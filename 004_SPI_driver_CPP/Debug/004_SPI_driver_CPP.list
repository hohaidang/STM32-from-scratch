
004_SPI_driver_CPP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001cf4  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08001eb8  08001eb8  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08001eb8  08001eb8  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  08001eb8  08001eb8  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001eb8  08001eb8  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08001eb8  08001eb8  00011eb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08001ec0  08001ec0  00011ec0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08001ec8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000038  20000064  08001f2c  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000009c  08001f2c  0002009c  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dbc9  00000000  00000000  0002008e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001a76  00000000  00000000  0002dc57  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000420  00000000  00000000  0002f6d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000003c8  00000000  00000000  0002faf0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000060d2  00000000  00000000  0002feb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000049b7  00000000  00000000  00035f8a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000134af  00000000  00000000  0003a941  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0004ddf0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001440  00000000  00000000  0004de6c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000064 	.word	0x20000064
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08001ea0 	.word	0x08001ea0

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000068 	.word	0x20000068
 8000200:	08001ea0 	.word	0x08001ea0

08000204 <main>:

uint8_t rx_buffer[3];
unique_ptr<SPI_Handler> SPI1_Handler;

int main(void)
{
 8000204:	b590      	push	{r4, r7, lr}
 8000206:	b089      	sub	sp, #36	; 0x24
 8000208:	af06      	add	r7, sp, #24
														SPI_BUS_CONFIG_FD,
														SPI_SCLK_SPEED_DIV32,
														SPI_DFF_8BITS,
														SPI_CPOL_LOW,
														SPI_CPHA_LOW,
														SPI_SSM_DI)) );
 800020a:	2030      	movs	r0, #48	; 0x30
 800020c:	f001 fce4 	bl	8001bd8 <_Znwj>
 8000210:	4603      	mov	r3, r0
 8000212:	461c      	mov	r4, r3
 8000214:	2300      	movs	r3, #0
 8000216:	9304      	str	r3, [sp, #16]
 8000218:	2300      	movs	r3, #0
 800021a:	9303      	str	r3, [sp, #12]
 800021c:	2300      	movs	r3, #0
 800021e:	9302      	str	r3, [sp, #8]
 8000220:	2300      	movs	r3, #0
 8000222:	9301      	str	r3, [sp, #4]
 8000224:	2304      	movs	r3, #4
 8000226:	9300      	str	r3, [sp, #0]
 8000228:	2301      	movs	r3, #1
 800022a:	2201      	movs	r2, #1
 800022c:	4927      	ldr	r1, [pc, #156]	; (80002cc <main+0xc8>)
 800022e:	4620      	mov	r0, r4
 8000230:	f000 fe3f 	bl	8000eb2 <_ZN11SPI_HandlerC1EP12SPI_RegDef_thhhhhhh>
	SPI1_Handler.reset( (new SPI_Handler(SPI1,
 8000234:	4621      	mov	r1, r4
 8000236:	4826      	ldr	r0, [pc, #152]	; (80002d0 <main+0xcc>)
 8000238:	f000 f87b 	bl	8000332 <_ZNSt10unique_ptrI11SPI_HandlerSt14default_deleteIS0_EE5resetEPS0_>

	SPI1_Handler->SPI_IRQInterruptConfig(IRQ_NO_SPI1, ENABLE);
 800023c:	4824      	ldr	r0, [pc, #144]	; (80002d0 <main+0xcc>)
 800023e:	f000 f897 	bl	8000370 <_ZNKSt10unique_ptrI11SPI_HandlerSt14default_deleteIS0_EEptEv>
 8000242:	4603      	mov	r3, r0
 8000244:	2201      	movs	r2, #1
 8000246:	2123      	movs	r1, #35	; 0x23
 8000248:	4618      	mov	r0, r3
 800024a:	f001 f943 	bl	80014d4 <_ZN11SPI_Handler22SPI_IRQInterruptConfigEhh>
	SPI1_Handler->SPI_IRQPriorityConfig(IRQ_NO_SPI1, IRQ_Prio_NO_15);
 800024e:	4820      	ldr	r0, [pc, #128]	; (80002d0 <main+0xcc>)
 8000250:	f000 f88e 	bl	8000370 <_ZNKSt10unique_ptrI11SPI_HandlerSt14default_deleteIS0_EEptEv>
 8000254:	4603      	mov	r3, r0
 8000256:	220f      	movs	r2, #15
 8000258:	2123      	movs	r1, #35	; 0x23
 800025a:	4618      	mov	r0, r3
 800025c:	f001 f9be 	bl	80015dc <_ZN11SPI_Handler21SPI_IRQPriorityConfigEhh>

	SPI1_Handler->SPI_ReceiveDataIT(&rx_buffer[0], 1);
 8000260:	481b      	ldr	r0, [pc, #108]	; (80002d0 <main+0xcc>)
 8000262:	f000 f885 	bl	8000370 <_ZNKSt10unique_ptrI11SPI_HandlerSt14default_deleteIS0_EEptEv>
 8000266:	4603      	mov	r3, r0
 8000268:	2201      	movs	r2, #1
 800026a:	491a      	ldr	r1, [pc, #104]	; (80002d4 <main+0xd0>)
 800026c:	4618      	mov	r0, r3
 800026e:	f001 f9e4 	bl	800163a <_ZN11SPI_Handler17SPI_ReceiveDataITEPKhm>

    uint8_t tx_buffer[1] = {0xD0};
 8000272:	23d0      	movs	r3, #208	; 0xd0
 8000274:	713b      	strb	r3, [r7, #4]
    uint8_t dummyRead = 0x00;
 8000276:	2300      	movs	r3, #0
 8000278:	70fb      	strb	r3, [r7, #3]
    uint8_t dummyWrite = 0x00;
 800027a:	2300      	movs	r3, #0
 800027c:	70bb      	strb	r3, [r7, #2]
    uint8_t chipID = 0;
 800027e:	2300      	movs	r3, #0
 8000280:	707b      	strb	r3, [r7, #1]
    SPI1_Handler->SPI_SendData(tx_buffer, 1);
 8000282:	4813      	ldr	r0, [pc, #76]	; (80002d0 <main+0xcc>)
 8000284:	f000 f874 	bl	8000370 <_ZNKSt10unique_ptrI11SPI_HandlerSt14default_deleteIS0_EEptEv>
 8000288:	1d3b      	adds	r3, r7, #4
 800028a:	2201      	movs	r2, #1
 800028c:	4619      	mov	r1, r3
 800028e:	f001 f842 	bl	8001316 <_ZN11SPI_Handler12SPI_SendDataEPKhm>
    SPI1_Handler->SPI_ReceiveData(&dummyRead, 1);
 8000292:	480f      	ldr	r0, [pc, #60]	; (80002d0 <main+0xcc>)
 8000294:	f000 f86c 	bl	8000370 <_ZNKSt10unique_ptrI11SPI_HandlerSt14default_deleteIS0_EEptEv>
 8000298:	1cfb      	adds	r3, r7, #3
 800029a:	2201      	movs	r2, #1
 800029c:	4619      	mov	r1, r3
 800029e:	f001 f8c6 	bl	800142e <_ZN11SPI_Handler15SPI_ReceiveDataEPhm>
    SPI1_Handler->SPI_SendData(&dummyWrite, 1);
 80002a2:	480b      	ldr	r0, [pc, #44]	; (80002d0 <main+0xcc>)
 80002a4:	f000 f864 	bl	8000370 <_ZNKSt10unique_ptrI11SPI_HandlerSt14default_deleteIS0_EEptEv>
 80002a8:	1cbb      	adds	r3, r7, #2
 80002aa:	2201      	movs	r2, #1
 80002ac:	4619      	mov	r1, r3
 80002ae:	f001 f832 	bl	8001316 <_ZN11SPI_Handler12SPI_SendDataEPKhm>
    SPI1_Handler->SPI_ReceiveData(&chipID, 1);
 80002b2:	4807      	ldr	r0, [pc, #28]	; (80002d0 <main+0xcc>)
 80002b4:	f000 f85c 	bl	8000370 <_ZNKSt10unique_ptrI11SPI_HandlerSt14default_deleteIS0_EEptEv>
 80002b8:	1c7b      	adds	r3, r7, #1
 80002ba:	2201      	movs	r2, #1
 80002bc:	4619      	mov	r1, r3
 80002be:	f001 f8b6 	bl	800142e <_ZN11SPI_Handler15SPI_ReceiveDataEPhm>

    return 0;
 80002c2:	2300      	movs	r3, #0
}
 80002c4:	4618      	mov	r0, r3
 80002c6:	370c      	adds	r7, #12
 80002c8:	46bd      	mov	sp, r7
 80002ca:	bd90      	pop	{r4, r7, pc}
 80002cc:	40013000 	.word	0x40013000
 80002d0:	20000084 	.word	0x20000084
 80002d4:	20000080 	.word	0x20000080

080002d8 <SPI1_IRQHandler>:

extern "C" {
    void SPI1_IRQHandler(void) {
 80002d8:	b580      	push	{r7, lr}
 80002da:	af00      	add	r7, sp, #0
        // handle the interrupt
        SPI1_Handler->SPI_IRQHandling();
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <SPI1_IRQHandler+0x18>)
 80002de:	f000 f847 	bl	8000370 <_ZNKSt10unique_ptrI11SPI_HandlerSt14default_deleteIS0_EEptEv>
 80002e2:	4603      	mov	r3, r0
 80002e4:	4618      	mov	r0, r3
 80002e6:	f001 f9ca 	bl	800167e <_ZN11SPI_Handler15SPI_IRQHandlingEv>
    }
 80002ea:	bf00      	nop
 80002ec:	bd80      	pop	{r7, pc}
 80002ee:	bf00      	nop
 80002f0:	20000084 	.word	0x20000084

080002f4 <_ZNSt10unique_ptrI11SPI_HandlerSt14default_deleteIS0_EED1Ev>:
	       is_convertible<_Up*, _Tp*>, is_same<_Dp, default_delete<_Tp>>>>
	unique_ptr(auto_ptr<_Up>&& __u) noexcept;
#endif

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
 80002f4:	b580      	push	{r7, lr}
 80002f6:	b084      	sub	sp, #16
 80002f8:	af00      	add	r7, sp, #0
 80002fa:	6078      	str	r0, [r7, #4]
      {
	auto& __ptr = _M_t._M_ptr();
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	4618      	mov	r0, r3
 8000300:	f000 f842 	bl	8000388 <_ZNSt15__uniq_ptr_implI11SPI_HandlerSt14default_deleteIS0_EE6_M_ptrEv>
 8000304:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 8000306:	68fb      	ldr	r3, [r7, #12]
 8000308:	681b      	ldr	r3, [r3, #0]
 800030a:	2b00      	cmp	r3, #0
 800030c:	d009      	beq.n	8000322 <_ZNSt10unique_ptrI11SPI_HandlerSt14default_deleteIS0_EED1Ev+0x2e>
	  get_deleter()(__ptr);
 800030e:	6878      	ldr	r0, [r7, #4]
 8000310:	f000 f847 	bl	80003a2 <_ZNSt10unique_ptrI11SPI_HandlerSt14default_deleteIS0_EE11get_deleterEv>
 8000314:	4602      	mov	r2, r0
 8000316:	68fb      	ldr	r3, [r7, #12]
 8000318:	681b      	ldr	r3, [r3, #0]
 800031a:	4619      	mov	r1, r3
 800031c:	4610      	mov	r0, r2
 800031e:	f000 f84d 	bl	80003bc <_ZNKSt14default_deleteI11SPI_HandlerEclEPS0_>
	__ptr = pointer();
 8000322:	68fb      	ldr	r3, [r7, #12]
 8000324:	2200      	movs	r2, #0
 8000326:	601a      	str	r2, [r3, #0]
      }
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	4618      	mov	r0, r3
 800032c:	3710      	adds	r7, #16
 800032e:	46bd      	mov	sp, r7
 8000330:	bd80      	pop	{r7, pc}

08000332 <_ZNSt10unique_ptrI11SPI_HandlerSt14default_deleteIS0_EE5resetEPS0_>:
       * @param __p  The new pointer to store.
       *
       * The deleter will be invoked if a pointer is already owned.
       */
      void
      reset(pointer __p = pointer()) noexcept
 8000332:	b580      	push	{r7, lr}
 8000334:	b082      	sub	sp, #8
 8000336:	af00      	add	r7, sp, #0
 8000338:	6078      	str	r0, [r7, #4]
 800033a:	6039      	str	r1, [r7, #0]
      {
	using std::swap;
	swap(_M_t._M_ptr(), __p);
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	4618      	mov	r0, r3
 8000340:	f000 f822 	bl	8000388 <_ZNSt15__uniq_ptr_implI11SPI_HandlerSt14default_deleteIS0_EE6_M_ptrEv>
 8000344:	4602      	mov	r2, r0
 8000346:	463b      	mov	r3, r7
 8000348:	4619      	mov	r1, r3
 800034a:	4610      	mov	r0, r2
 800034c:	f000 f853 	bl	80003f6 <_ZSt4swapIP11SPI_HandlerENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS6_ESt18is_move_assignableIS6_EEE5valueEvE4typeERS6_SG_>
	if (__p != pointer())
 8000350:	683b      	ldr	r3, [r7, #0]
 8000352:	2b00      	cmp	r3, #0
 8000354:	d008      	beq.n	8000368 <_ZNSt10unique_ptrI11SPI_HandlerSt14default_deleteIS0_EE5resetEPS0_+0x36>
	  get_deleter()(__p);
 8000356:	6878      	ldr	r0, [r7, #4]
 8000358:	f000 f823 	bl	80003a2 <_ZNSt10unique_ptrI11SPI_HandlerSt14default_deleteIS0_EE11get_deleterEv>
 800035c:	4602      	mov	r2, r0
 800035e:	683b      	ldr	r3, [r7, #0]
 8000360:	4619      	mov	r1, r3
 8000362:	4610      	mov	r0, r2
 8000364:	f000 f82a 	bl	80003bc <_ZNKSt14default_deleteI11SPI_HandlerEclEPS0_>
      }
 8000368:	bf00      	nop
 800036a:	3708      	adds	r7, #8
 800036c:	46bd      	mov	sp, r7
 800036e:	bd80      	pop	{r7, pc}

08000370 <_ZNKSt10unique_ptrI11SPI_HandlerSt14default_deleteIS0_EEptEv>:
      operator->() const noexcept
 8000370:	b580      	push	{r7, lr}
 8000372:	b082      	sub	sp, #8
 8000374:	af00      	add	r7, sp, #0
 8000376:	6078      	str	r0, [r7, #4]
	return get();
 8000378:	6878      	ldr	r0, [r7, #4]
 800037a:	f000 f85b 	bl	8000434 <_ZNKSt10unique_ptrI11SPI_HandlerSt14default_deleteIS0_EE3getEv>
 800037e:	4603      	mov	r3, r0
      }
 8000380:	4618      	mov	r0, r3
 8000382:	3708      	adds	r7, #8
 8000384:	46bd      	mov	sp, r7
 8000386:	bd80      	pop	{r7, pc}

08000388 <_ZNSt15__uniq_ptr_implI11SPI_HandlerSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 8000388:	b580      	push	{r7, lr}
 800038a:	b082      	sub	sp, #8
 800038c:	af00      	add	r7, sp, #0
 800038e:	6078      	str	r0, [r7, #4]
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	4618      	mov	r0, r3
 8000394:	f000 f85b 	bl	800044e <_ZSt3getILj0EJP11SPI_HandlerSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8000398:	4603      	mov	r3, r0
 800039a:	4618      	mov	r0, r3
 800039c:	3708      	adds	r7, #8
 800039e:	46bd      	mov	sp, r7
 80003a0:	bd80      	pop	{r7, pc}

080003a2 <_ZNSt10unique_ptrI11SPI_HandlerSt14default_deleteIS0_EE11get_deleterEv>:
      get_deleter() noexcept
 80003a2:	b580      	push	{r7, lr}
 80003a4:	b082      	sub	sp, #8
 80003a6:	af00      	add	r7, sp, #0
 80003a8:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	4618      	mov	r0, r3
 80003ae:	f000 f85b 	bl	8000468 <_ZNSt15__uniq_ptr_implI11SPI_HandlerSt14default_deleteIS0_EE10_M_deleterEv>
 80003b2:	4603      	mov	r3, r0
 80003b4:	4618      	mov	r0, r3
 80003b6:	3708      	adds	r7, #8
 80003b8:	46bd      	mov	sp, r7
 80003ba:	bd80      	pop	{r7, pc}

080003bc <_ZNKSt14default_deleteI11SPI_HandlerEclEPS0_>:
      operator()(_Tp* __ptr) const
 80003bc:	b590      	push	{r4, r7, lr}
 80003be:	b083      	sub	sp, #12
 80003c0:	af00      	add	r7, sp, #0
 80003c2:	6078      	str	r0, [r7, #4]
 80003c4:	6039      	str	r1, [r7, #0]
	delete __ptr;
 80003c6:	683c      	ldr	r4, [r7, #0]
 80003c8:	2c00      	cmp	r4, #0
 80003ca:	d006      	beq.n	80003da <_ZNKSt14default_deleteI11SPI_HandlerEclEPS0_+0x1e>
 80003cc:	4620      	mov	r0, r4
 80003ce:	f000 fdd0 	bl	8000f72 <_ZN11SPI_HandlerD1Ev>
 80003d2:	2130      	movs	r1, #48	; 0x30
 80003d4:	4620      	mov	r0, r4
 80003d6:	f001 fbfd 	bl	8001bd4 <_ZdlPvj>
      }
 80003da:	bf00      	nop
 80003dc:	370c      	adds	r7, #12
 80003de:	46bd      	mov	sp, r7
 80003e0:	bd90      	pop	{r4, r7, pc}

080003e2 <_ZSt4moveIRP11SPI_HandlerEONSt16remove_referenceIT_E4typeEOS4_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 80003e2:	b480      	push	{r7}
 80003e4:	b083      	sub	sp, #12
 80003e6:	af00      	add	r7, sp, #0
 80003e8:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	4618      	mov	r0, r3
 80003ee:	370c      	adds	r7, #12
 80003f0:	46bd      	mov	sp, r7
 80003f2:	bc80      	pop	{r7}
 80003f4:	4770      	bx	lr

080003f6 <_ZSt4swapIP11SPI_HandlerENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS6_ESt18is_move_assignableIS6_EEE5valueEvE4typeERS6_SG_>:
    inline
#if __cplusplus >= 201103L
    typename enable_if<__and_<__not_<__is_tuple_like<_Tp>>,
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
    swap(_Tp& __a, _Tp& __b)
 80003f6:	b580      	push	{r7, lr}
 80003f8:	b084      	sub	sp, #16
 80003fa:	af00      	add	r7, sp, #0
 80003fc:	6078      	str	r0, [r7, #4]
 80003fe:	6039      	str	r1, [r7, #0]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8000400:	6878      	ldr	r0, [r7, #4]
 8000402:	f7ff ffee 	bl	80003e2 <_ZSt4moveIRP11SPI_HandlerEONSt16remove_referenceIT_E4typeEOS4_>
 8000406:	4603      	mov	r3, r0
 8000408:	681b      	ldr	r3, [r3, #0]
 800040a:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 800040c:	6838      	ldr	r0, [r7, #0]
 800040e:	f7ff ffe8 	bl	80003e2 <_ZSt4moveIRP11SPI_HandlerEONSt16remove_referenceIT_E4typeEOS4_>
 8000412:	4603      	mov	r3, r0
 8000414:	681a      	ldr	r2, [r3, #0]
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 800041a:	f107 030c 	add.w	r3, r7, #12
 800041e:	4618      	mov	r0, r3
 8000420:	f7ff ffdf 	bl	80003e2 <_ZSt4moveIRP11SPI_HandlerEONSt16remove_referenceIT_E4typeEOS4_>
 8000424:	4603      	mov	r3, r0
 8000426:	681a      	ldr	r2, [r3, #0]
 8000428:	683b      	ldr	r3, [r7, #0]
 800042a:	601a      	str	r2, [r3, #0]
    }
 800042c:	bf00      	nop
 800042e:	3710      	adds	r7, #16
 8000430:	46bd      	mov	sp, r7
 8000432:	bd80      	pop	{r7, pc}

08000434 <_ZNKSt10unique_ptrI11SPI_HandlerSt14default_deleteIS0_EE3getEv>:
      get() const noexcept
 8000434:	b580      	push	{r7, lr}
 8000436:	b082      	sub	sp, #8
 8000438:	af00      	add	r7, sp, #0
 800043a:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	4618      	mov	r0, r3
 8000440:	f000 f81f 	bl	8000482 <_ZNKSt15__uniq_ptr_implI11SPI_HandlerSt14default_deleteIS0_EE6_M_ptrEv>
 8000444:	4603      	mov	r3, r0
 8000446:	4618      	mov	r0, r3
 8000448:	3708      	adds	r7, #8
 800044a:	46bd      	mov	sp, r7
 800044c:	bd80      	pop	{r7, pc}

0800044e <_ZSt3getILj0EJP11SPI_HandlerSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }

  /// Return a reference to the ith element of a tuple.
  template<std::size_t __i, typename... _Elements>
    constexpr __tuple_element_t<__i, tuple<_Elements...>>&
    get(tuple<_Elements...>& __t) noexcept
 800044e:	b580      	push	{r7, lr}
 8000450:	b082      	sub	sp, #8
 8000452:	af00      	add	r7, sp, #0
 8000454:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	4618      	mov	r0, r3
 800045a:	f000 f820 	bl	800049e <_ZSt12__get_helperILj0EP11SPI_HandlerJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800045e:	4603      	mov	r3, r0
 8000460:	4618      	mov	r0, r3
 8000462:	3708      	adds	r7, #8
 8000464:	46bd      	mov	sp, r7
 8000466:	bd80      	pop	{r7, pc}

08000468 <_ZNSt15__uniq_ptr_implI11SPI_HandlerSt14default_deleteIS0_EE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 8000468:	b580      	push	{r7, lr}
 800046a:	b082      	sub	sp, #8
 800046c:	af00      	add	r7, sp, #0
 800046e:	6078      	str	r0, [r7, #4]
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	4618      	mov	r0, r3
 8000474:	f000 f81f 	bl	80004b6 <_ZSt3getILj1EJP11SPI_HandlerSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8000478:	4603      	mov	r3, r0
 800047a:	4618      	mov	r0, r3
 800047c:	3708      	adds	r7, #8
 800047e:	46bd      	mov	sp, r7
 8000480:	bd80      	pop	{r7, pc}

08000482 <_ZNKSt15__uniq_ptr_implI11SPI_HandlerSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 8000482:	b580      	push	{r7, lr}
 8000484:	b082      	sub	sp, #8
 8000486:	af00      	add	r7, sp, #0
 8000488:	6078      	str	r0, [r7, #4]
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	4618      	mov	r0, r3
 800048e:	f000 f81e 	bl	80004ce <_ZSt3getILj0EJP11SPI_HandlerSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>
 8000492:	4603      	mov	r3, r0
 8000494:	681b      	ldr	r3, [r3, #0]
 8000496:	4618      	mov	r0, r3
 8000498:	3708      	adds	r7, #8
 800049a:	46bd      	mov	sp, r7
 800049c:	bd80      	pop	{r7, pc}

0800049e <_ZSt12__get_helperILj0EP11SPI_HandlerJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800049e:	b580      	push	{r7, lr}
 80004a0:	b082      	sub	sp, #8
 80004a2:	af00      	add	r7, sp, #0
 80004a4:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80004a6:	6878      	ldr	r0, [r7, #4]
 80004a8:	f000 f81e 	bl	80004e8 <_ZNSt11_Tuple_implILj0EJP11SPI_HandlerSt14default_deleteIS0_EEE7_M_headERS4_>
 80004ac:	4603      	mov	r3, r0
 80004ae:	4618      	mov	r0, r3
 80004b0:	3708      	adds	r7, #8
 80004b2:	46bd      	mov	sp, r7
 80004b4:	bd80      	pop	{r7, pc}

080004b6 <_ZSt3getILj1EJP11SPI_HandlerSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 80004b6:	b580      	push	{r7, lr}
 80004b8:	b082      	sub	sp, #8
 80004ba:	af00      	add	r7, sp, #0
 80004bc:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80004be:	6878      	ldr	r0, [r7, #4]
 80004c0:	f000 f81f 	bl	8000502 <_ZSt12__get_helperILj1ESt14default_deleteI11SPI_HandlerEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 80004c4:	4603      	mov	r3, r0
 80004c6:	4618      	mov	r0, r3
 80004c8:	3708      	adds	r7, #8
 80004ca:	46bd      	mov	sp, r7
 80004cc:	bd80      	pop	{r7, pc}

080004ce <_ZSt3getILj0EJP11SPI_HandlerSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>:

  /// Return a const reference to the ith element of a const tuple.
  template<std::size_t __i, typename... _Elements>
    constexpr const __tuple_element_t<__i, tuple<_Elements...>>&
    get(const tuple<_Elements...>& __t) noexcept
 80004ce:	b580      	push	{r7, lr}
 80004d0:	b082      	sub	sp, #8
 80004d2:	af00      	add	r7, sp, #0
 80004d4:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	4618      	mov	r0, r3
 80004da:	f000 f81e 	bl	800051a <_ZSt12__get_helperILj0EP11SPI_HandlerJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>
 80004de:	4603      	mov	r3, r0
 80004e0:	4618      	mov	r0, r3
 80004e2:	3708      	adds	r7, #8
 80004e4:	46bd      	mov	sp, r7
 80004e6:	bd80      	pop	{r7, pc}

080004e8 <_ZNSt11_Tuple_implILj0EJP11SPI_HandlerSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b082      	sub	sp, #8
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	6078      	str	r0, [r7, #4]
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	4618      	mov	r0, r3
 80004f4:	f000 f81d 	bl	8000532 <_ZNSt10_Head_baseILj0EP11SPI_HandlerLb0EE7_M_headERS2_>
 80004f8:	4603      	mov	r3, r0
 80004fa:	4618      	mov	r0, r3
 80004fc:	3708      	adds	r7, #8
 80004fe:	46bd      	mov	sp, r7
 8000500:	bd80      	pop	{r7, pc}

08000502 <_ZSt12__get_helperILj1ESt14default_deleteI11SPI_HandlerEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8000502:	b580      	push	{r7, lr}
 8000504:	b082      	sub	sp, #8
 8000506:	af00      	add	r7, sp, #0
 8000508:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800050a:	6878      	ldr	r0, [r7, #4]
 800050c:	f000 f81b 	bl	8000546 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI11SPI_HandlerEEE7_M_headERS3_>
 8000510:	4603      	mov	r3, r0
 8000512:	4618      	mov	r0, r3
 8000514:	3708      	adds	r7, #8
 8000516:	46bd      	mov	sp, r7
 8000518:	bd80      	pop	{r7, pc}

0800051a <_ZSt12__get_helperILj0EP11SPI_HandlerJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800051a:	b580      	push	{r7, lr}
 800051c:	b082      	sub	sp, #8
 800051e:	af00      	add	r7, sp, #0
 8000520:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8000522:	6878      	ldr	r0, [r7, #4]
 8000524:	f000 f81b 	bl	800055e <_ZNSt11_Tuple_implILj0EJP11SPI_HandlerSt14default_deleteIS0_EEE7_M_headERKS4_>
 8000528:	4603      	mov	r3, r0
 800052a:	4618      	mov	r0, r3
 800052c:	3708      	adds	r7, #8
 800052e:	46bd      	mov	sp, r7
 8000530:	bd80      	pop	{r7, pc}

08000532 <_ZNSt10_Head_baseILj0EP11SPI_HandlerLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8000532:	b480      	push	{r7}
 8000534:	b083      	sub	sp, #12
 8000536:	af00      	add	r7, sp, #0
 8000538:	6078      	str	r0, [r7, #4]
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	4618      	mov	r0, r3
 800053e:	370c      	adds	r7, #12
 8000540:	46bd      	mov	sp, r7
 8000542:	bc80      	pop	{r7}
 8000544:	4770      	bx	lr

08000546 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI11SPI_HandlerEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8000546:	b580      	push	{r7, lr}
 8000548:	b082      	sub	sp, #8
 800054a:	af00      	add	r7, sp, #0
 800054c:	6078      	str	r0, [r7, #4]
 800054e:	6878      	ldr	r0, [r7, #4]
 8000550:	f000 f812 	bl	8000578 <_ZNSt10_Head_baseILj1ESt14default_deleteI11SPI_HandlerELb1EE7_M_headERS3_>
 8000554:	4603      	mov	r3, r0
 8000556:	4618      	mov	r0, r3
 8000558:	3708      	adds	r7, #8
 800055a:	46bd      	mov	sp, r7
 800055c:	bd80      	pop	{r7, pc}

0800055e <_ZNSt11_Tuple_implILj0EJP11SPI_HandlerSt14default_deleteIS0_EEE7_M_headERKS4_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800055e:	b580      	push	{r7, lr}
 8000560:	b082      	sub	sp, #8
 8000562:	af00      	add	r7, sp, #0
 8000564:	6078      	str	r0, [r7, #4]
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	4618      	mov	r0, r3
 800056a:	f000 f80f 	bl	800058c <_ZNSt10_Head_baseILj0EP11SPI_HandlerLb0EE7_M_headERKS2_>
 800056e:	4603      	mov	r3, r0
 8000570:	4618      	mov	r0, r3
 8000572:	3708      	adds	r7, #8
 8000574:	46bd      	mov	sp, r7
 8000576:	bd80      	pop	{r7, pc}

08000578 <_ZNSt10_Head_baseILj1ESt14default_deleteI11SPI_HandlerELb1EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b; }
 8000578:	b480      	push	{r7}
 800057a:	b083      	sub	sp, #12
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	4618      	mov	r0, r3
 8000584:	370c      	adds	r7, #12
 8000586:	46bd      	mov	sp, r7
 8000588:	bc80      	pop	{r7}
 800058a:	4770      	bx	lr

0800058c <_ZNSt10_Head_baseILj0EP11SPI_HandlerLb0EE7_M_headERKS2_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 800058c:	b480      	push	{r7}
 800058e:	b083      	sub	sp, #12
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	4618      	mov	r0, r3
 8000598:	370c      	adds	r7, #12
 800059a:	46bd      	mov	sp, r7
 800059c:	bc80      	pop	{r7}
 800059e:	4770      	bx	lr

080005a0 <_Z41__static_initialization_and_destruction_0ii>:
}
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b082      	sub	sp, #8
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
 80005a8:	6039      	str	r1, [r7, #0]
unique_ptr<SPI_Handler> SPI1_Handler;
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d107      	bne.n	80005c0 <_Z41__static_initialization_and_destruction_0ii+0x20>
 80005b0:	683b      	ldr	r3, [r7, #0]
 80005b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80005b6:	4293      	cmp	r3, r2
 80005b8:	d102      	bne.n	80005c0 <_Z41__static_initialization_and_destruction_0ii+0x20>
 80005ba:	4803      	ldr	r0, [pc, #12]	; (80005c8 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 80005bc:	f7ff fe9a 	bl	80002f4 <_ZNSt10unique_ptrI11SPI_HandlerSt14default_deleteIS0_EED1Ev>
}
 80005c0:	bf00      	nop
 80005c2:	3708      	adds	r7, #8
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}
 80005c8:	20000084 	.word	0x20000084

080005cc <_GLOBAL__sub_I_rx_buffer>:
 80005cc:	b580      	push	{r7, lr}
 80005ce:	af00      	add	r7, sp, #0
 80005d0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80005d4:	2001      	movs	r0, #1
 80005d6:	f7ff ffe3 	bl	80005a0 <_Z41__static_initialization_and_destruction_0ii>
 80005da:	bd80      	pop	{r7, pc}

080005dc <_GLOBAL__sub_D_rx_buffer>:
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
 80005e0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80005e4:	2000      	movs	r0, #0
 80005e6:	f7ff ffdb 	bl	80005a0 <_Z41__static_initialization_and_destruction_0ii>
 80005ea:	bd80      	pop	{r7, pc}

080005ec <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80005ec:	b480      	push	{r7}
 80005ee:	af00      	add	r7, sp, #0
	return 1;
 80005f0:	2301      	movs	r3, #1
}
 80005f2:	4618      	mov	r0, r3
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bc80      	pop	{r7}
 80005f8:	4770      	bx	lr

080005fa <_kill>:

int _kill(int pid, int sig)
{
 80005fa:	b580      	push	{r7, lr}
 80005fc:	b082      	sub	sp, #8
 80005fe:	af00      	add	r7, sp, #0
 8000600:	6078      	str	r0, [r7, #4]
 8000602:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000604:	f001 fb0c 	bl	8001c20 <__errno>
 8000608:	4602      	mov	r2, r0
 800060a:	2316      	movs	r3, #22
 800060c:	6013      	str	r3, [r2, #0]
	return -1;
 800060e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000612:	4618      	mov	r0, r3
 8000614:	3708      	adds	r7, #8
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}

0800061a <_exit>:

void _exit (int status)
{
 800061a:	b580      	push	{r7, lr}
 800061c:	b082      	sub	sp, #8
 800061e:	af00      	add	r7, sp, #0
 8000620:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000622:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000626:	6878      	ldr	r0, [r7, #4]
 8000628:	f7ff ffe7 	bl	80005fa <_kill>
	while (1) {}		/* Make sure we hang here */
 800062c:	e7fe      	b.n	800062c <_exit+0x12>
	...

08000630 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b084      	sub	sp, #16
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000638:	4b11      	ldr	r3, [pc, #68]	; (8000680 <_sbrk+0x50>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	2b00      	cmp	r3, #0
 800063e:	d102      	bne.n	8000646 <_sbrk+0x16>
		heap_end = &end;
 8000640:	4b0f      	ldr	r3, [pc, #60]	; (8000680 <_sbrk+0x50>)
 8000642:	4a10      	ldr	r2, [pc, #64]	; (8000684 <_sbrk+0x54>)
 8000644:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000646:	4b0e      	ldr	r3, [pc, #56]	; (8000680 <_sbrk+0x50>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800064c:	4b0c      	ldr	r3, [pc, #48]	; (8000680 <_sbrk+0x50>)
 800064e:	681a      	ldr	r2, [r3, #0]
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	4413      	add	r3, r2
 8000654:	466a      	mov	r2, sp
 8000656:	4293      	cmp	r3, r2
 8000658:	d907      	bls.n	800066a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800065a:	f001 fae1 	bl	8001c20 <__errno>
 800065e:	4602      	mov	r2, r0
 8000660:	230c      	movs	r3, #12
 8000662:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000664:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000668:	e006      	b.n	8000678 <_sbrk+0x48>
	}

	heap_end += incr;
 800066a:	4b05      	ldr	r3, [pc, #20]	; (8000680 <_sbrk+0x50>)
 800066c:	681a      	ldr	r2, [r3, #0]
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	4413      	add	r3, r2
 8000672:	4a03      	ldr	r2, [pc, #12]	; (8000680 <_sbrk+0x50>)
 8000674:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000676:	68fb      	ldr	r3, [r7, #12]
}
 8000678:	4618      	mov	r0, r3
 800067a:	3710      	adds	r7, #16
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}
 8000680:	20000088 	.word	0x20000088
 8000684:	200000a0 	.word	0x200000a0

08000688 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000688:	480d      	ldr	r0, [pc, #52]	; (80006c0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800068a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800068c:	480d      	ldr	r0, [pc, #52]	; (80006c4 <LoopForever+0x6>)
  ldr r1, =_edata
 800068e:	490e      	ldr	r1, [pc, #56]	; (80006c8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000690:	4a0e      	ldr	r2, [pc, #56]	; (80006cc <LoopForever+0xe>)
  movs r3, #0
 8000692:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000694:	e002      	b.n	800069c <LoopCopyDataInit>

08000696 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000696:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000698:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800069a:	3304      	adds	r3, #4

0800069c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800069c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800069e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006a0:	d3f9      	bcc.n	8000696 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006a2:	4a0b      	ldr	r2, [pc, #44]	; (80006d0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80006a4:	4c0b      	ldr	r4, [pc, #44]	; (80006d4 <LoopForever+0x16>)
  movs r3, #0
 80006a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006a8:	e001      	b.n	80006ae <LoopFillZerobss>

080006aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006ac:	3204      	adds	r2, #4

080006ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006b0:	d3fb      	bcc.n	80006aa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80006b2:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 80006b6:	f001 fab9 	bl	8001c2c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006ba:	f7ff fda3 	bl	8000204 <main>

080006be <LoopForever>:

LoopForever:
    b LoopForever
 80006be:	e7fe      	b.n	80006be <LoopForever>
  ldr   r0, =_estack
 80006c0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80006c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006c8:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 80006cc:	08001ec8 	.word	0x08001ec8
  ldr r2, =_sbss
 80006d0:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 80006d4:	2000009c 	.word	0x2000009c

080006d8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006d8:	e7fe      	b.n	80006d8 <ADC_IRQHandler>
	...

080006dc <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t>:
#define SPI_SR_BSY                      7
#define SPI_SR_FRE                      8



inline uint8_t gpio_baseAddr_to_code(GPIO_RegDef_t *Port) {
 80006dc:	b480      	push	{r7}
 80006de:	b083      	sub	sp, #12
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
			 (Port == GPIOC) ? 0x02 : \
			 (Port == GPIOD) ? 0x03 : \
			 (Port == GPIOE) ? 0x04 : \
			 (Port == GPIOF) ? 0x05 : \
			 (Port == GPIOG) ? 0x06 : \
			 (Port == GPIOH) ? 0x07 : 0x00 );
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	4a1a      	ldr	r2, [pc, #104]	; (8000750 <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t+0x74>)
 80006e8:	4293      	cmp	r3, r2
 80006ea:	d02b      	beq.n	8000744 <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t+0x68>
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	4a19      	ldr	r2, [pc, #100]	; (8000754 <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t+0x78>)
 80006f0:	4293      	cmp	r3, r2
 80006f2:	d025      	beq.n	8000740 <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t+0x64>
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	4a18      	ldr	r2, [pc, #96]	; (8000758 <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t+0x7c>)
 80006f8:	4293      	cmp	r3, r2
 80006fa:	d01f      	beq.n	800073c <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t+0x60>
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	4a17      	ldr	r2, [pc, #92]	; (800075c <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t+0x80>)
 8000700:	4293      	cmp	r3, r2
 8000702:	d019      	beq.n	8000738 <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t+0x5c>
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	4a16      	ldr	r2, [pc, #88]	; (8000760 <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t+0x84>)
 8000708:	4293      	cmp	r3, r2
 800070a:	d013      	beq.n	8000734 <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t+0x58>
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	4a15      	ldr	r2, [pc, #84]	; (8000764 <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t+0x88>)
 8000710:	4293      	cmp	r3, r2
 8000712:	d00d      	beq.n	8000730 <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t+0x54>
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	4a14      	ldr	r2, [pc, #80]	; (8000768 <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t+0x8c>)
 8000718:	4293      	cmp	r3, r2
 800071a:	d007      	beq.n	800072c <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t+0x50>
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	4a13      	ldr	r2, [pc, #76]	; (800076c <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t+0x90>)
 8000720:	4293      	cmp	r3, r2
 8000722:	d101      	bne.n	8000728 <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t+0x4c>
 8000724:	2307      	movs	r3, #7
 8000726:	e00e      	b.n	8000746 <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t+0x6a>
 8000728:	2300      	movs	r3, #0
 800072a:	e00c      	b.n	8000746 <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t+0x6a>
 800072c:	2306      	movs	r3, #6
 800072e:	e00a      	b.n	8000746 <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t+0x6a>
 8000730:	2305      	movs	r3, #5
 8000732:	e008      	b.n	8000746 <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t+0x6a>
 8000734:	2304      	movs	r3, #4
 8000736:	e006      	b.n	8000746 <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t+0x6a>
 8000738:	2303      	movs	r3, #3
 800073a:	e004      	b.n	8000746 <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t+0x6a>
 800073c:	2302      	movs	r3, #2
 800073e:	e002      	b.n	8000746 <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t+0x6a>
 8000740:	2301      	movs	r3, #1
 8000742:	e000      	b.n	8000746 <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t+0x6a>
 8000744:	2300      	movs	r3, #0
}
 8000746:	4618      	mov	r0, r3
 8000748:	370c      	adds	r7, #12
 800074a:	46bd      	mov	sp, r7
 800074c:	bc80      	pop	{r7}
 800074e:	4770      	bx	lr
 8000750:	40020000 	.word	0x40020000
 8000754:	40020400 	.word	0x40020400
 8000758:	40020800 	.word	0x40020800
 800075c:	40020c00 	.word	0x40020c00
 8000760:	40021000 	.word	0x40021000
 8000764:	40021400 	.word	0x40021400
 8000768:	40021800 	.word	0x40021800
 800076c:	40021c00 	.word	0x40021c00

08000770 <_ZL14get_irq_pinNumh>:
	void GPIO_IRQInterruptConfig(const uint8_t IRQNumber, const uint8_t EnorDi);
	void GPIO_IRQPriorityConfig(const uint8_t IRQNumber, const uint8_t IRQPriority);

};

static inline uint8_t get_irq_pinNum(uint8_t PinNumber) {
 8000770:	b480      	push	{r7}
 8000772:	b083      	sub	sp, #12
 8000774:	af00      	add	r7, sp, #0
 8000776:	4603      	mov	r3, r0
 8000778:	71fb      	strb	r3, [r7, #7]
    return (PinNumber < 5)  ? PinNumber + 6 : \
           (PinNumber < 10) ? IRQ_NO_EXTI9_5 : \
           (PinNumber < 16) ? IRQ_NO_EXTI15_10 : 0;
 800077a:	79fb      	ldrb	r3, [r7, #7]
 800077c:	2b04      	cmp	r3, #4
 800077e:	d803      	bhi.n	8000788 <_ZL14get_irq_pinNumh+0x18>
 8000780:	79fb      	ldrb	r3, [r7, #7]
 8000782:	3306      	adds	r3, #6
 8000784:	b2db      	uxtb	r3, r3
 8000786:	e00a      	b.n	800079e <_ZL14get_irq_pinNumh+0x2e>
 8000788:	79fb      	ldrb	r3, [r7, #7]
 800078a:	2b09      	cmp	r3, #9
 800078c:	d906      	bls.n	800079c <_ZL14get_irq_pinNumh+0x2c>
 800078e:	79fb      	ldrb	r3, [r7, #7]
 8000790:	2b0f      	cmp	r3, #15
 8000792:	d801      	bhi.n	8000798 <_ZL14get_irq_pinNumh+0x28>
 8000794:	2328      	movs	r3, #40	; 0x28
 8000796:	e002      	b.n	800079e <_ZL14get_irq_pinNumh+0x2e>
 8000798:	2300      	movs	r3, #0
 800079a:	e000      	b.n	800079e <_ZL14get_irq_pinNumh+0x2e>
 800079c:	2317      	movs	r3, #23
}
 800079e:	4618      	mov	r0, r3
 80007a0:	370c      	adds	r7, #12
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bc80      	pop	{r7}
 80007a6:	4770      	bx	lr

080007a8 <_ZN12GPIO_HandlerC1EP13GPIO_RegDef_thhhhhhh>:
/*********************************************************************
 * @class      		  - GPIO_Handler
 *
 * @brief             - Constructor, initialize GPIO, clock, IRQ, Alt Function
 **********************************************************************/
GPIO_Handler::GPIO_Handler(
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b086      	sub	sp, #24
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	60f8      	str	r0, [r7, #12]
 80007b0:	60b9      	str	r1, [r7, #8]
 80007b2:	4611      	mov	r1, r2
 80007b4:	461a      	mov	r2, r3
 80007b6:	460b      	mov	r3, r1
 80007b8:	71fb      	strb	r3, [r7, #7]
 80007ba:	4613      	mov	r3, r2
 80007bc:	71bb      	strb	r3, [r7, #6]
		uint8_t GPIO_PinMode,
		uint8_t GPIO_PinSpeed,
		uint8_t GPIO_IRQ_Priority,
		uint8_t GPIO_PinOPType,
		uint8_t GPIO_PinPuPdControl,
		uint8_t GPIO_PinAltFunMode) {
 80007be:	68fb      	ldr	r3, [r7, #12]
 80007c0:	461a      	mov	r2, r3
 80007c2:	2300      	movs	r3, #0
 80007c4:	6013      	str	r3, [r2, #0]
 80007c6:	6053      	str	r3, [r2, #4]
 80007c8:	6093      	str	r3, [r2, #8]
	GPIOx_.pGPIOx = ((GPIO_RegDef_t *)(GPIOx_ADDR));
 80007ca:	68ba      	ldr	r2, [r7, #8]
 80007cc:	68fb      	ldr	r3, [r7, #12]
 80007ce:	601a      	str	r2, [r3, #0]
	GPIOx_.GPIO_PinConfig.GPIO_PinNumber = GPIO_PinNumber;
 80007d0:	68fb      	ldr	r3, [r7, #12]
 80007d2:	79fa      	ldrb	r2, [r7, #7]
 80007d4:	711a      	strb	r2, [r3, #4]
	GPIOx_.GPIO_PinConfig.GPIO_PinMode = GPIO_PinMode;
 80007d6:	68fb      	ldr	r3, [r7, #12]
 80007d8:	79ba      	ldrb	r2, [r7, #6]
 80007da:	715a      	strb	r2, [r3, #5]
	GPIOx_.GPIO_PinConfig.GPIO_PinSpeed = GPIO_PinSpeed;
 80007dc:	68fb      	ldr	r3, [r7, #12]
 80007de:	f897 2020 	ldrb.w	r2, [r7, #32]
 80007e2:	719a      	strb	r2, [r3, #6]
	GPIOx_.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PinPuPdControl;
 80007e4:	68fb      	ldr	r3, [r7, #12]
 80007e6:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80007ea:	71da      	strb	r2, [r3, #7]
	GPIOx_.GPIO_PinConfig.GPIO_PinOPType = GPIO_PinOPType;
 80007ec:	68fb      	ldr	r3, [r7, #12]
 80007ee:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80007f2:	721a      	strb	r2, [r3, #8]
	GPIOx_.GPIO_PinConfig.GPIO_PinAltFunMode = GPIO_PinAltFunMode;
 80007f4:	68fb      	ldr	r3, [r7, #12]
 80007f6:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80007fa:	725a      	strb	r2, [r3, #9]
	GPIO_PeriClockControl();
 80007fc:	68f8      	ldr	r0, [r7, #12]
 80007fe:	f000 f82b 	bl	8000858 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv>
	GPIO_Init();
 8000802:	68f8      	ldr	r0, [r7, #12]
 8000804:	f000 f8a2 	bl	800094c <_ZN12GPIO_Handler9GPIO_InitEv>
	// Configure interrupt
	if(GPIO_PinMode >= GPIO_MODE_IT_FT) {
 8000808:	79bb      	ldrb	r3, [r7, #6]
 800080a:	2b03      	cmp	r3, #3
 800080c:	d912      	bls.n	8000834 <_ZN12GPIO_HandlerC1EP13GPIO_RegDef_thhhhhhh+0x8c>
		uint8_t IRQ_number = get_irq_pinNum(GPIO_PinNumber);
 800080e:	79fb      	ldrb	r3, [r7, #7]
 8000810:	4618      	mov	r0, r3
 8000812:	f7ff ffad 	bl	8000770 <_ZL14get_irq_pinNumh>
 8000816:	4603      	mov	r3, r0
 8000818:	75fb      	strb	r3, [r7, #23]
		GPIO_IRQInterruptConfig(IRQ_number, ENABLE);
 800081a:	7dfb      	ldrb	r3, [r7, #23]
 800081c:	2201      	movs	r2, #1
 800081e:	4619      	mov	r1, r3
 8000820:	68f8      	ldr	r0, [r7, #12]
 8000822:	f000 fa93 	bl	8000d4c <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh>
		GPIO_IRQPriorityConfig(IRQ_number, GPIO_IRQ_Priority);
 8000826:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800082a:	7dfb      	ldrb	r3, [r7, #23]
 800082c:	4619      	mov	r1, r3
 800082e:	68f8      	ldr	r0, [r7, #12]
 8000830:	f000 fb10 	bl	8000e54 <_ZN12GPIO_Handler22GPIO_IRQPriorityConfigEhh>
	}
}
 8000834:	68fb      	ldr	r3, [r7, #12]
 8000836:	4618      	mov	r0, r3
 8000838:	3718      	adds	r7, #24
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}

0800083e <_ZN12GPIO_HandlerD1Ev>:
 *
 * @return None
 *
 * @Node: Be careful when using many Peripheral device in the same PORT
 **********************************************************************/
GPIO_Handler::~GPIO_Handler() {
 800083e:	b580      	push	{r7, lr}
 8000840:	b082      	sub	sp, #8
 8000842:	af00      	add	r7, sp, #0
 8000844:	6078      	str	r0, [r7, #4]
	GPIO_DeInit();
 8000846:	6878      	ldr	r0, [r7, #4]
 8000848:	f000 f9d6 	bl	8000bf8 <_ZN12GPIO_Handler11GPIO_DeInitEv>
}
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	4618      	mov	r0, r3
 8000850:	3708      	adds	r7, #8
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
	...

08000858 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv>:

// peripheral clock setup
void GPIO_Handler::GPIO_PeriClockControl() {
 8000858:	b480      	push	{r7}
 800085a:	b083      	sub	sp, #12
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
	if (GPIOx_.pGPIOx == GPIOA) {
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	4a30      	ldr	r2, [pc, #192]	; (8000928 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xd0>)
 8000866:	4293      	cmp	r3, r2
 8000868:	d106      	bne.n	8000878 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0x20>
		GPIOA_PCLK_EN();
 800086a:	4b30      	ldr	r3, [pc, #192]	; (800092c <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xd4>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086e:	4a2f      	ldr	r2, [pc, #188]	; (800092c <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xd4>)
 8000870:	f043 0301 	orr.w	r3, r3, #1
 8000874:	6313      	str	r3, [r2, #48]	; 0x30
	} else if (GPIOx_.pGPIOx == GPIOG) {
		GPIOG_PCLK_EN();
	} else if (GPIOx_.pGPIOx == GPIOH) {
		GPIOH_PCLK_EN();
	}
}
 8000876:	e052      	b.n	800091e <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xc6>
	} else if (GPIOx_.pGPIOx == GPIOB) {
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	4a2c      	ldr	r2, [pc, #176]	; (8000930 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xd8>)
 800087e:	4293      	cmp	r3, r2
 8000880:	d106      	bne.n	8000890 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0x38>
		GPIOB_PCLK_EN();
 8000882:	4b2a      	ldr	r3, [pc, #168]	; (800092c <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xd4>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000886:	4a29      	ldr	r2, [pc, #164]	; (800092c <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xd4>)
 8000888:	f043 0302 	orr.w	r3, r3, #2
 800088c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800088e:	e046      	b.n	800091e <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xc6>
	} else if (GPIOx_.pGPIOx == GPIOC) {
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	4a27      	ldr	r2, [pc, #156]	; (8000934 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xdc>)
 8000896:	4293      	cmp	r3, r2
 8000898:	d106      	bne.n	80008a8 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0x50>
		GPIOC_PCLK_EN();
 800089a:	4b24      	ldr	r3, [pc, #144]	; (800092c <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xd4>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089e:	4a23      	ldr	r2, [pc, #140]	; (800092c <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xd4>)
 80008a0:	f043 0304 	orr.w	r3, r3, #4
 80008a4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80008a6:	e03a      	b.n	800091e <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xc6>
	} else if (GPIOx_.pGPIOx == GPIOD) {
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	4a22      	ldr	r2, [pc, #136]	; (8000938 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xe0>)
 80008ae:	4293      	cmp	r3, r2
 80008b0:	d106      	bne.n	80008c0 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0x68>
		GPIOD_PCLK_EN();
 80008b2:	4b1e      	ldr	r3, [pc, #120]	; (800092c <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xd4>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b6:	4a1d      	ldr	r2, [pc, #116]	; (800092c <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xd4>)
 80008b8:	f043 0308 	orr.w	r3, r3, #8
 80008bc:	6313      	str	r3, [r2, #48]	; 0x30
}
 80008be:	e02e      	b.n	800091e <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xc6>
	} else if (GPIOx_.pGPIOx == GPIOE) {
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	4a1d      	ldr	r2, [pc, #116]	; (800093c <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xe4>)
 80008c6:	4293      	cmp	r3, r2
 80008c8:	d106      	bne.n	80008d8 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0x80>
		GPIOE_PCLK_EN();
 80008ca:	4b18      	ldr	r3, [pc, #96]	; (800092c <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xd4>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ce:	4a17      	ldr	r2, [pc, #92]	; (800092c <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xd4>)
 80008d0:	f043 0310 	orr.w	r3, r3, #16
 80008d4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80008d6:	e022      	b.n	800091e <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xc6>
	} else if (GPIOx_.pGPIOx == GPIOF) {
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	4a18      	ldr	r2, [pc, #96]	; (8000940 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xe8>)
 80008de:	4293      	cmp	r3, r2
 80008e0:	d106      	bne.n	80008f0 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0x98>
		GPIOF_PCLK_EN();
 80008e2:	4b12      	ldr	r3, [pc, #72]	; (800092c <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xd4>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e6:	4a11      	ldr	r2, [pc, #68]	; (800092c <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xd4>)
 80008e8:	f043 0320 	orr.w	r3, r3, #32
 80008ec:	6313      	str	r3, [r2, #48]	; 0x30
}
 80008ee:	e016      	b.n	800091e <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xc6>
	} else if (GPIOx_.pGPIOx == GPIOG) {
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	4a13      	ldr	r2, [pc, #76]	; (8000944 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xec>)
 80008f6:	4293      	cmp	r3, r2
 80008f8:	d106      	bne.n	8000908 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xb0>
		GPIOG_PCLK_EN();
 80008fa:	4b0c      	ldr	r3, [pc, #48]	; (800092c <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xd4>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fe:	4a0b      	ldr	r2, [pc, #44]	; (800092c <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xd4>)
 8000900:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000904:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000906:	e00a      	b.n	800091e <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xc6>
	} else if (GPIOx_.pGPIOx == GPIOH) {
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	4a0e      	ldr	r2, [pc, #56]	; (8000948 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xf0>)
 800090e:	4293      	cmp	r3, r2
 8000910:	d105      	bne.n	800091e <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xc6>
		GPIOH_PCLK_EN();
 8000912:	4b06      	ldr	r3, [pc, #24]	; (800092c <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xd4>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000916:	4a05      	ldr	r2, [pc, #20]	; (800092c <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xd4>)
 8000918:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800091c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800091e:	bf00      	nop
 8000920:	370c      	adds	r7, #12
 8000922:	46bd      	mov	sp, r7
 8000924:	bc80      	pop	{r7}
 8000926:	4770      	bx	lr
 8000928:	40020000 	.word	0x40020000
 800092c:	40023800 	.word	0x40023800
 8000930:	40020400 	.word	0x40020400
 8000934:	40020800 	.word	0x40020800
 8000938:	40020c00 	.word	0x40020c00
 800093c:	40021000 	.word	0x40021000
 8000940:	40021400 	.word	0x40021400
 8000944:	40021800 	.word	0x40021800
 8000948:	40021c00 	.word	0x40021c00

0800094c <_ZN12GPIO_Handler9GPIO_InitEv>:
 *
 * @param None
 *
 * @return None
 **********************************************************************/
void GPIO_Handler::GPIO_Init() {
 800094c:	b580      	push	{r7, lr}
 800094e:	b086      	sub	sp, #24
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
	uint32_t temp = 0;
 8000954:	2300      	movs	r3, #0
 8000956:	617b      	str	r3, [r7, #20]
	// 1. configure the mode of gpio pin
	if(GPIOx_.GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG) {
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	795b      	ldrb	r3, [r3, #5]
 800095c:	2b03      	cmp	r3, #3
 800095e:	d820      	bhi.n	80009a2 <_ZN12GPIO_Handler9GPIO_InitEv+0x56>
		// the non interrupt mode
		temp = GPIOx_.GPIO_PinConfig.GPIO_PinMode << (2 * GPIOx_.GPIO_PinConfig.GPIO_PinNumber);
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	795b      	ldrb	r3, [r3, #5]
 8000964:	461a      	mov	r2, r3
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	791b      	ldrb	r3, [r3, #4]
 800096a:	005b      	lsls	r3, r3, #1
 800096c:	fa02 f303 	lsl.w	r3, r2, r3
 8000970:	617b      	str	r3, [r7, #20]
		GPIOx_.pGPIOx->MODER &= ~(0x3 << (2 * GPIOx_.GPIO_PinConfig.GPIO_PinNumber)); // clearing
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	681a      	ldr	r2, [r3, #0]
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	791b      	ldrb	r3, [r3, #4]
 800097c:	005b      	lsls	r3, r3, #1
 800097e:	2103      	movs	r1, #3
 8000980:	fa01 f303 	lsl.w	r3, r1, r3
 8000984:	43db      	mvns	r3, r3
 8000986:	4619      	mov	r1, r3
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	400a      	ands	r2, r1
 800098e:	601a      	str	r2, [r3, #0]
		GPIOx_.pGPIOx->MODER |= temp;
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	6819      	ldr	r1, [r3, #0]
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	697a      	ldr	r2, [r7, #20]
 800099c:	430a      	orrs	r2, r1
 800099e:	601a      	str	r2, [r3, #0]
 80009a0:	e083      	b.n	8000aaa <_ZN12GPIO_Handler9GPIO_InitEv+0x15e>
	}
	else {
		// interrupt mode
		if(GPIO_MODE_IT_FT == GPIOx_.GPIO_PinConfig.GPIO_PinMode) {
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	795b      	ldrb	r3, [r3, #5]
 80009a6:	2b04      	cmp	r3, #4
 80009a8:	d117      	bne.n	80009da <_ZN12GPIO_Handler9GPIO_InitEv+0x8e>
			// 1. configure the FTSR
			EXTI->FTSR |= (1 << GPIOx_.GPIO_PinConfig.GPIO_PinNumber);
 80009aa:	4b90      	ldr	r3, [pc, #576]	; (8000bec <_ZN12GPIO_Handler9GPIO_InitEv+0x2a0>)
 80009ac:	68db      	ldr	r3, [r3, #12]
 80009ae:	687a      	ldr	r2, [r7, #4]
 80009b0:	7912      	ldrb	r2, [r2, #4]
 80009b2:	4611      	mov	r1, r2
 80009b4:	2201      	movs	r2, #1
 80009b6:	408a      	lsls	r2, r1
 80009b8:	4611      	mov	r1, r2
 80009ba:	4a8c      	ldr	r2, [pc, #560]	; (8000bec <_ZN12GPIO_Handler9GPIO_InitEv+0x2a0>)
 80009bc:	430b      	orrs	r3, r1
 80009be:	60d3      	str	r3, [r2, #12]

			// clear the corresponding RTSR bit
			EXTI->RTSR &= ~(1 << GPIOx_.GPIO_PinConfig.GPIO_PinNumber);
 80009c0:	4b8a      	ldr	r3, [pc, #552]	; (8000bec <_ZN12GPIO_Handler9GPIO_InitEv+0x2a0>)
 80009c2:	689b      	ldr	r3, [r3, #8]
 80009c4:	687a      	ldr	r2, [r7, #4]
 80009c6:	7912      	ldrb	r2, [r2, #4]
 80009c8:	4611      	mov	r1, r2
 80009ca:	2201      	movs	r2, #1
 80009cc:	408a      	lsls	r2, r1
 80009ce:	43d2      	mvns	r2, r2
 80009d0:	4611      	mov	r1, r2
 80009d2:	4a86      	ldr	r2, [pc, #536]	; (8000bec <_ZN12GPIO_Handler9GPIO_InitEv+0x2a0>)
 80009d4:	400b      	ands	r3, r1
 80009d6:	6093      	str	r3, [r2, #8]
 80009d8:	e035      	b.n	8000a46 <_ZN12GPIO_Handler9GPIO_InitEv+0xfa>

		}
		else if (GPIO_MODE_IT_RT == GPIOx_.GPIO_PinConfig.GPIO_PinMode) {
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	795b      	ldrb	r3, [r3, #5]
 80009de:	2b05      	cmp	r3, #5
 80009e0:	d117      	bne.n	8000a12 <_ZN12GPIO_Handler9GPIO_InitEv+0xc6>
			// 1. configure the RTSR
			EXTI->RTSR |= (1 << GPIOx_.GPIO_PinConfig.GPIO_PinNumber);
 80009e2:	4b82      	ldr	r3, [pc, #520]	; (8000bec <_ZN12GPIO_Handler9GPIO_InitEv+0x2a0>)
 80009e4:	689b      	ldr	r3, [r3, #8]
 80009e6:	687a      	ldr	r2, [r7, #4]
 80009e8:	7912      	ldrb	r2, [r2, #4]
 80009ea:	4611      	mov	r1, r2
 80009ec:	2201      	movs	r2, #1
 80009ee:	408a      	lsls	r2, r1
 80009f0:	4611      	mov	r1, r2
 80009f2:	4a7e      	ldr	r2, [pc, #504]	; (8000bec <_ZN12GPIO_Handler9GPIO_InitEv+0x2a0>)
 80009f4:	430b      	orrs	r3, r1
 80009f6:	6093      	str	r3, [r2, #8]

			// clear the corresponding RTSR bit
			EXTI->FTSR &= ~(1 << GPIOx_.GPIO_PinConfig.GPIO_PinNumber);
 80009f8:	4b7c      	ldr	r3, [pc, #496]	; (8000bec <_ZN12GPIO_Handler9GPIO_InitEv+0x2a0>)
 80009fa:	68db      	ldr	r3, [r3, #12]
 80009fc:	687a      	ldr	r2, [r7, #4]
 80009fe:	7912      	ldrb	r2, [r2, #4]
 8000a00:	4611      	mov	r1, r2
 8000a02:	2201      	movs	r2, #1
 8000a04:	408a      	lsls	r2, r1
 8000a06:	43d2      	mvns	r2, r2
 8000a08:	4611      	mov	r1, r2
 8000a0a:	4a78      	ldr	r2, [pc, #480]	; (8000bec <_ZN12GPIO_Handler9GPIO_InitEv+0x2a0>)
 8000a0c:	400b      	ands	r3, r1
 8000a0e:	60d3      	str	r3, [r2, #12]
 8000a10:	e019      	b.n	8000a46 <_ZN12GPIO_Handler9GPIO_InitEv+0xfa>
		}
		else if (GPIO_MODE_IT_RFT == GPIOx_.GPIO_PinConfig.GPIO_PinMode) {
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	795b      	ldrb	r3, [r3, #5]
 8000a16:	2b06      	cmp	r3, #6
 8000a18:	d115      	bne.n	8000a46 <_ZN12GPIO_Handler9GPIO_InitEv+0xfa>
			// 1. configure both FTSR and RTSR
			EXTI->FTSR |= (1 << GPIOx_.GPIO_PinConfig.GPIO_PinNumber);
 8000a1a:	4b74      	ldr	r3, [pc, #464]	; (8000bec <_ZN12GPIO_Handler9GPIO_InitEv+0x2a0>)
 8000a1c:	68db      	ldr	r3, [r3, #12]
 8000a1e:	687a      	ldr	r2, [r7, #4]
 8000a20:	7912      	ldrb	r2, [r2, #4]
 8000a22:	4611      	mov	r1, r2
 8000a24:	2201      	movs	r2, #1
 8000a26:	408a      	lsls	r2, r1
 8000a28:	4611      	mov	r1, r2
 8000a2a:	4a70      	ldr	r2, [pc, #448]	; (8000bec <_ZN12GPIO_Handler9GPIO_InitEv+0x2a0>)
 8000a2c:	430b      	orrs	r3, r1
 8000a2e:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= (1 << GPIOx_.GPIO_PinConfig.GPIO_PinNumber);
 8000a30:	4b6e      	ldr	r3, [pc, #440]	; (8000bec <_ZN12GPIO_Handler9GPIO_InitEv+0x2a0>)
 8000a32:	689b      	ldr	r3, [r3, #8]
 8000a34:	687a      	ldr	r2, [r7, #4]
 8000a36:	7912      	ldrb	r2, [r2, #4]
 8000a38:	4611      	mov	r1, r2
 8000a3a:	2201      	movs	r2, #1
 8000a3c:	408a      	lsls	r2, r1
 8000a3e:	4611      	mov	r1, r2
 8000a40:	4a6a      	ldr	r2, [pc, #424]	; (8000bec <_ZN12GPIO_Handler9GPIO_InitEv+0x2a0>)
 8000a42:	430b      	orrs	r3, r1
 8000a44:	6093      	str	r3, [r2, #8]
		}

		// 2. configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 = GPIOx_.GPIO_PinConfig.GPIO_PinNumber >> 2;
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	791b      	ldrb	r3, [r3, #4]
 8000a4a:	109b      	asrs	r3, r3, #2
 8000a4c:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = GPIOx_.GPIO_PinConfig.GPIO_PinNumber % 4;
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	791b      	ldrb	r3, [r3, #4]
 8000a52:	f003 0303 	and.w	r3, r3, #3
 8000a56:	74bb      	strb	r3, [r7, #18]
		uint8_t portCode = gpio_baseAddr_to_code(GPIOx_.pGPIOx);
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f7ff fe3d 	bl	80006dc <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t>
 8000a62:	4603      	mov	r3, r0
 8000a64:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 8000a66:	4b62      	ldr	r3, [pc, #392]	; (8000bf0 <_ZN12GPIO_Handler9GPIO_InitEv+0x2a4>)
 8000a68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a6a:	4a61      	ldr	r2, [pc, #388]	; (8000bf0 <_ZN12GPIO_Handler9GPIO_InitEv+0x2a4>)
 8000a6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a70:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[temp1] |= (portCode << (4 * temp2));
 8000a72:	4a60      	ldr	r2, [pc, #384]	; (8000bf4 <_ZN12GPIO_Handler9GPIO_InitEv+0x2a8>)
 8000a74:	7cfb      	ldrb	r3, [r7, #19]
 8000a76:	3302      	adds	r3, #2
 8000a78:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000a7c:	7c79      	ldrb	r1, [r7, #17]
 8000a7e:	7cbb      	ldrb	r3, [r7, #18]
 8000a80:	009b      	lsls	r3, r3, #2
 8000a82:	fa01 f303 	lsl.w	r3, r1, r3
 8000a86:	4618      	mov	r0, r3
 8000a88:	495a      	ldr	r1, [pc, #360]	; (8000bf4 <_ZN12GPIO_Handler9GPIO_InitEv+0x2a8>)
 8000a8a:	7cfb      	ldrb	r3, [r7, #19]
 8000a8c:	4302      	orrs	r2, r0
 8000a8e:	3302      	adds	r3, #2
 8000a90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		// 3. Enable the exti interrupt delivery using IMR
		EXTI->IMR |= 1 << GPIOx_.GPIO_PinConfig.GPIO_PinNumber;
 8000a94:	4b55      	ldr	r3, [pc, #340]	; (8000bec <_ZN12GPIO_Handler9GPIO_InitEv+0x2a0>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	687a      	ldr	r2, [r7, #4]
 8000a9a:	7912      	ldrb	r2, [r2, #4]
 8000a9c:	4611      	mov	r1, r2
 8000a9e:	2201      	movs	r2, #1
 8000aa0:	408a      	lsls	r2, r1
 8000aa2:	4611      	mov	r1, r2
 8000aa4:	4a51      	ldr	r2, [pc, #324]	; (8000bec <_ZN12GPIO_Handler9GPIO_InitEv+0x2a0>)
 8000aa6:	430b      	orrs	r3, r1
 8000aa8:	6013      	str	r3, [r2, #0]
	}

	temp = 0;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	617b      	str	r3, [r7, #20]
	// 2. configure the speed
	temp = GPIOx_.GPIO_PinConfig.GPIO_PinSpeed << (2 * GPIOx_.GPIO_PinConfig.GPIO_PinNumber);
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	799b      	ldrb	r3, [r3, #6]
 8000ab2:	461a      	mov	r2, r3
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	791b      	ldrb	r3, [r3, #4]
 8000ab8:	005b      	lsls	r3, r3, #1
 8000aba:	fa02 f303 	lsl.w	r3, r2, r3
 8000abe:	617b      	str	r3, [r7, #20]
	GPIOx_.pGPIOx->OSPEEDR &= ~(0x3 << (2 * GPIOx_.GPIO_PinConfig.GPIO_PinNumber)); // clearing
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	689a      	ldr	r2, [r3, #8]
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	791b      	ldrb	r3, [r3, #4]
 8000aca:	005b      	lsls	r3, r3, #1
 8000acc:	2103      	movs	r1, #3
 8000ace:	fa01 f303 	lsl.w	r3, r1, r3
 8000ad2:	43db      	mvns	r3, r3
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	400a      	ands	r2, r1
 8000adc:	609a      	str	r2, [r3, #8]
	GPIOx_.pGPIOx->OSPEEDR |= temp;
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	6899      	ldr	r1, [r3, #8]
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	697a      	ldr	r2, [r7, #20]
 8000aea:	430a      	orrs	r2, r1
 8000aec:	609a      	str	r2, [r3, #8]

	temp = 0;
 8000aee:	2300      	movs	r3, #0
 8000af0:	617b      	str	r3, [r7, #20]
	// 3. configure the pupd settings
	temp = GPIOx_.GPIO_PinConfig.GPIO_PinPuPdControl << (2 * GPIOx_.GPIO_PinConfig.GPIO_PinNumber);
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	79db      	ldrb	r3, [r3, #7]
 8000af6:	461a      	mov	r2, r3
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	791b      	ldrb	r3, [r3, #4]
 8000afc:	005b      	lsls	r3, r3, #1
 8000afe:	fa02 f303 	lsl.w	r3, r2, r3
 8000b02:	617b      	str	r3, [r7, #20]
	GPIOx_.pGPIOx->PUPDR &= ~(0x3 << (2 * GPIOx_.GPIO_PinConfig.GPIO_PinNumber));// clearing
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	68da      	ldr	r2, [r3, #12]
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	791b      	ldrb	r3, [r3, #4]
 8000b0e:	005b      	lsls	r3, r3, #1
 8000b10:	2103      	movs	r1, #3
 8000b12:	fa01 f303 	lsl.w	r3, r1, r3
 8000b16:	43db      	mvns	r3, r3
 8000b18:	4619      	mov	r1, r3
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	400a      	ands	r2, r1
 8000b20:	60da      	str	r2, [r3, #12]
	GPIOx_.pGPIOx->PUPDR |= temp;
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	68d9      	ldr	r1, [r3, #12]
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	697a      	ldr	r2, [r7, #20]
 8000b2e:	430a      	orrs	r2, r1
 8000b30:	60da      	str	r2, [r3, #12]

	temp = 0;
 8000b32:	2300      	movs	r3, #0
 8000b34:	617b      	str	r3, [r7, #20]
	// 4. configure the optype
	temp = GPIOx_.GPIO_PinConfig.GPIO_PinOPType << GPIOx_.GPIO_PinConfig.GPIO_PinNumber;
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	7a1b      	ldrb	r3, [r3, #8]
 8000b3a:	461a      	mov	r2, r3
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	791b      	ldrb	r3, [r3, #4]
 8000b40:	fa02 f303 	lsl.w	r3, r2, r3
 8000b44:	617b      	str	r3, [r7, #20]
	GPIOx_.pGPIOx->OTYPER &= ~(0x1 << GPIOx_.GPIO_PinConfig.GPIO_PinNumber); // clearing
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	685a      	ldr	r2, [r3, #4]
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	791b      	ldrb	r3, [r3, #4]
 8000b50:	4619      	mov	r1, r3
 8000b52:	2301      	movs	r3, #1
 8000b54:	408b      	lsls	r3, r1
 8000b56:	43db      	mvns	r3, r3
 8000b58:	4619      	mov	r1, r3
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	400a      	ands	r2, r1
 8000b60:	605a      	str	r2, [r3, #4]
	GPIOx_.pGPIOx->OTYPER |= temp;
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	6859      	ldr	r1, [r3, #4]
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	697a      	ldr	r2, [r7, #20]
 8000b6e:	430a      	orrs	r2, r1
 8000b70:	605a      	str	r2, [r3, #4]

	temp = 0;
 8000b72:	2300      	movs	r3, #0
 8000b74:	617b      	str	r3, [r7, #20]
	// 5. configure the alt functionality
	if(GPIOx_.GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN) {
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	795b      	ldrb	r3, [r3, #5]
 8000b7a:	2b02      	cmp	r3, #2
 8000b7c:	d131      	bne.n	8000be2 <_ZN12GPIO_Handler9GPIO_InitEv+0x296>
		// configure alt function register
		uint8_t temp1, temp2;
		temp1 = GPIOx_.GPIO_PinConfig.GPIO_PinNumber / 8;
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	791b      	ldrb	r3, [r3, #4]
 8000b82:	08db      	lsrs	r3, r3, #3
 8000b84:	743b      	strb	r3, [r7, #16]
		temp2 = GPIOx_.GPIO_PinConfig.GPIO_PinNumber % 8;
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	791b      	ldrb	r3, [r3, #4]
 8000b8a:	f003 0307 	and.w	r3, r3, #7
 8000b8e:	73fb      	strb	r3, [r7, #15]
		GPIOx_.pGPIOx->AFR[temp1] &= ~(0xF << (4 * temp2));
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	7c3a      	ldrb	r2, [r7, #16]
 8000b96:	3208      	adds	r2, #8
 8000b98:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000b9c:	7bfb      	ldrb	r3, [r7, #15]
 8000b9e:	009b      	lsls	r3, r3, #2
 8000ba0:	220f      	movs	r2, #15
 8000ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba6:	43db      	mvns	r3, r3
 8000ba8:	4618      	mov	r0, r3
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	7c3a      	ldrb	r2, [r7, #16]
 8000bb0:	4001      	ands	r1, r0
 8000bb2:	3208      	adds	r2, #8
 8000bb4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		GPIOx_.pGPIOx->AFR[temp1] |= (GPIOx_.GPIO_PinConfig.GPIO_PinAltFunMode << (4 * temp2));
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	7c3a      	ldrb	r2, [r7, #16]
 8000bbe:	3208      	adds	r2, #8
 8000bc0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	7a5b      	ldrb	r3, [r3, #9]
 8000bc8:	461a      	mov	r2, r3
 8000bca:	7bfb      	ldrb	r3, [r7, #15]
 8000bcc:	009b      	lsls	r3, r3, #2
 8000bce:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	7c3a      	ldrb	r2, [r7, #16]
 8000bda:	4301      	orrs	r1, r0
 8000bdc:	3208      	adds	r2, #8
 8000bde:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
 8000be2:	bf00      	nop
 8000be4:	3718      	adds	r7, #24
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	40013c00 	.word	0x40013c00
 8000bf0:	40023800 	.word	0x40023800
 8000bf4:	40013800 	.word	0x40013800

08000bf8 <_ZN12GPIO_Handler11GPIO_DeInitEv>:
 *
 * @brief - Reset GPIO Port
 *
 * @return uint8, b'0000_000x
 */
void GPIO_Handler::GPIO_DeInit() {
 8000bf8:	b480      	push	{r7}
 8000bfa:	b083      	sub	sp, #12
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
	if(GPIOx_.pGPIOx == GPIOA) {
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	4a48      	ldr	r2, [pc, #288]	; (8000d28 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x130>)
 8000c06:	4293      	cmp	r3, r2
 8000c08:	d10c      	bne.n	8000c24 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x2c>
		GPIOA_REG_RESET();
 8000c0a:	4b48      	ldr	r3, [pc, #288]	; (8000d2c <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 8000c0c:	691b      	ldr	r3, [r3, #16]
 8000c0e:	4a47      	ldr	r2, [pc, #284]	; (8000d2c <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 8000c10:	f043 0301 	orr.w	r3, r3, #1
 8000c14:	6113      	str	r3, [r2, #16]
 8000c16:	4b45      	ldr	r3, [pc, #276]	; (8000d2c <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 8000c18:	691b      	ldr	r3, [r3, #16]
 8000c1a:	4a44      	ldr	r2, [pc, #272]	; (8000d2c <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 8000c1c:	f023 0301 	bic.w	r3, r3, #1
 8000c20:	6113      	str	r3, [r2, #16]
		GPIOG_REG_RESET();
	}
	else if (GPIOx_.pGPIOx == GPIOH) {
		GPIOH_REG_RESET();
	}
}
 8000c22:	e07c      	b.n	8000d1e <_ZN12GPIO_Handler11GPIO_DeInitEv+0x126>
	else if (GPIOx_.pGPIOx == GPIOB) {
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	4a41      	ldr	r2, [pc, #260]	; (8000d30 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x138>)
 8000c2a:	4293      	cmp	r3, r2
 8000c2c:	d10c      	bne.n	8000c48 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x50>
		GPIOB_REG_RESET();
 8000c2e:	4b3f      	ldr	r3, [pc, #252]	; (8000d2c <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 8000c30:	691b      	ldr	r3, [r3, #16]
 8000c32:	4a3e      	ldr	r2, [pc, #248]	; (8000d2c <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 8000c34:	f043 0302 	orr.w	r3, r3, #2
 8000c38:	6113      	str	r3, [r2, #16]
 8000c3a:	4b3c      	ldr	r3, [pc, #240]	; (8000d2c <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 8000c3c:	691b      	ldr	r3, [r3, #16]
 8000c3e:	4a3b      	ldr	r2, [pc, #236]	; (8000d2c <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 8000c40:	f023 0302 	bic.w	r3, r3, #2
 8000c44:	6113      	str	r3, [r2, #16]
}
 8000c46:	e06a      	b.n	8000d1e <_ZN12GPIO_Handler11GPIO_DeInitEv+0x126>
	else if (GPIOx_.pGPIOx == GPIOC) {
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	4a39      	ldr	r2, [pc, #228]	; (8000d34 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x13c>)
 8000c4e:	4293      	cmp	r3, r2
 8000c50:	d10c      	bne.n	8000c6c <_ZN12GPIO_Handler11GPIO_DeInitEv+0x74>
		GPIOC_REG_RESET();
 8000c52:	4b36      	ldr	r3, [pc, #216]	; (8000d2c <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 8000c54:	691b      	ldr	r3, [r3, #16]
 8000c56:	4a35      	ldr	r2, [pc, #212]	; (8000d2c <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 8000c58:	f043 0304 	orr.w	r3, r3, #4
 8000c5c:	6113      	str	r3, [r2, #16]
 8000c5e:	4b33      	ldr	r3, [pc, #204]	; (8000d2c <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 8000c60:	691b      	ldr	r3, [r3, #16]
 8000c62:	4a32      	ldr	r2, [pc, #200]	; (8000d2c <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 8000c64:	f023 0304 	bic.w	r3, r3, #4
 8000c68:	6113      	str	r3, [r2, #16]
}
 8000c6a:	e058      	b.n	8000d1e <_ZN12GPIO_Handler11GPIO_DeInitEv+0x126>
	else if (GPIOx_.pGPIOx == GPIOD) {
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	4a31      	ldr	r2, [pc, #196]	; (8000d38 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x140>)
 8000c72:	4293      	cmp	r3, r2
 8000c74:	d10c      	bne.n	8000c90 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x98>
		GPIOD_REG_RESET();
 8000c76:	4b2d      	ldr	r3, [pc, #180]	; (8000d2c <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 8000c78:	691b      	ldr	r3, [r3, #16]
 8000c7a:	4a2c      	ldr	r2, [pc, #176]	; (8000d2c <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 8000c7c:	f043 0308 	orr.w	r3, r3, #8
 8000c80:	6113      	str	r3, [r2, #16]
 8000c82:	4b2a      	ldr	r3, [pc, #168]	; (8000d2c <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 8000c84:	691b      	ldr	r3, [r3, #16]
 8000c86:	4a29      	ldr	r2, [pc, #164]	; (8000d2c <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 8000c88:	f023 0308 	bic.w	r3, r3, #8
 8000c8c:	6113      	str	r3, [r2, #16]
}
 8000c8e:	e046      	b.n	8000d1e <_ZN12GPIO_Handler11GPIO_DeInitEv+0x126>
	else if (GPIOx_.pGPIOx == GPIOE) {
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4a29      	ldr	r2, [pc, #164]	; (8000d3c <_ZN12GPIO_Handler11GPIO_DeInitEv+0x144>)
 8000c96:	4293      	cmp	r3, r2
 8000c98:	d10c      	bne.n	8000cb4 <_ZN12GPIO_Handler11GPIO_DeInitEv+0xbc>
		GPIOE_REG_RESET();
 8000c9a:	4b24      	ldr	r3, [pc, #144]	; (8000d2c <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 8000c9c:	691b      	ldr	r3, [r3, #16]
 8000c9e:	4a23      	ldr	r2, [pc, #140]	; (8000d2c <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 8000ca0:	f043 0310 	orr.w	r3, r3, #16
 8000ca4:	6113      	str	r3, [r2, #16]
 8000ca6:	4b21      	ldr	r3, [pc, #132]	; (8000d2c <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 8000ca8:	691b      	ldr	r3, [r3, #16]
 8000caa:	4a20      	ldr	r2, [pc, #128]	; (8000d2c <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 8000cac:	f023 0310 	bic.w	r3, r3, #16
 8000cb0:	6113      	str	r3, [r2, #16]
}
 8000cb2:	e034      	b.n	8000d1e <_ZN12GPIO_Handler11GPIO_DeInitEv+0x126>
	else if (GPIOx_.pGPIOx == GPIOF) {
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4a21      	ldr	r2, [pc, #132]	; (8000d40 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x148>)
 8000cba:	4293      	cmp	r3, r2
 8000cbc:	d10c      	bne.n	8000cd8 <_ZN12GPIO_Handler11GPIO_DeInitEv+0xe0>
		GPIOF_REG_RESET();
 8000cbe:	4b1b      	ldr	r3, [pc, #108]	; (8000d2c <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 8000cc0:	691b      	ldr	r3, [r3, #16]
 8000cc2:	4a1a      	ldr	r2, [pc, #104]	; (8000d2c <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 8000cc4:	f043 0320 	orr.w	r3, r3, #32
 8000cc8:	6113      	str	r3, [r2, #16]
 8000cca:	4b18      	ldr	r3, [pc, #96]	; (8000d2c <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 8000ccc:	691b      	ldr	r3, [r3, #16]
 8000cce:	4a17      	ldr	r2, [pc, #92]	; (8000d2c <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 8000cd0:	f023 0320 	bic.w	r3, r3, #32
 8000cd4:	6113      	str	r3, [r2, #16]
}
 8000cd6:	e022      	b.n	8000d1e <_ZN12GPIO_Handler11GPIO_DeInitEv+0x126>
	else if (GPIOx_.pGPIOx == GPIOG) {
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4a19      	ldr	r2, [pc, #100]	; (8000d44 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x14c>)
 8000cde:	4293      	cmp	r3, r2
 8000ce0:	d10c      	bne.n	8000cfc <_ZN12GPIO_Handler11GPIO_DeInitEv+0x104>
		GPIOG_REG_RESET();
 8000ce2:	4b12      	ldr	r3, [pc, #72]	; (8000d2c <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 8000ce4:	691b      	ldr	r3, [r3, #16]
 8000ce6:	4a11      	ldr	r2, [pc, #68]	; (8000d2c <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 8000ce8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000cec:	6113      	str	r3, [r2, #16]
 8000cee:	4b0f      	ldr	r3, [pc, #60]	; (8000d2c <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 8000cf0:	691b      	ldr	r3, [r3, #16]
 8000cf2:	4a0e      	ldr	r2, [pc, #56]	; (8000d2c <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 8000cf4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000cf8:	6113      	str	r3, [r2, #16]
}
 8000cfa:	e010      	b.n	8000d1e <_ZN12GPIO_Handler11GPIO_DeInitEv+0x126>
	else if (GPIOx_.pGPIOx == GPIOH) {
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	4a11      	ldr	r2, [pc, #68]	; (8000d48 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x150>)
 8000d02:	4293      	cmp	r3, r2
 8000d04:	d10b      	bne.n	8000d1e <_ZN12GPIO_Handler11GPIO_DeInitEv+0x126>
		GPIOH_REG_RESET();
 8000d06:	4b09      	ldr	r3, [pc, #36]	; (8000d2c <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 8000d08:	691b      	ldr	r3, [r3, #16]
 8000d0a:	4a08      	ldr	r2, [pc, #32]	; (8000d2c <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 8000d0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d10:	6113      	str	r3, [r2, #16]
 8000d12:	4b06      	ldr	r3, [pc, #24]	; (8000d2c <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 8000d14:	691b      	ldr	r3, [r3, #16]
 8000d16:	4a05      	ldr	r2, [pc, #20]	; (8000d2c <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 8000d18:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000d1c:	6113      	str	r3, [r2, #16]
}
 8000d1e:	bf00      	nop
 8000d20:	370c      	adds	r7, #12
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bc80      	pop	{r7}
 8000d26:	4770      	bx	lr
 8000d28:	40020000 	.word	0x40020000
 8000d2c:	40023800 	.word	0x40023800
 8000d30:	40020400 	.word	0x40020400
 8000d34:	40020800 	.word	0x40020800
 8000d38:	40020c00 	.word	0x40020c00
 8000d3c:	40021000 	.word	0x40021000
 8000d40:	40021400 	.word	0x40021400
 8000d44:	40021800 	.word	0x40021800
 8000d48:	40021c00 	.word	0x40021c00

08000d4c <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh>:
 * @param[in] IRQNumber     - IRQNumber IRQ Position number
 * @param[in] EnorDi		- Enable/Disable Flag
 *
 * @return None
 */
void GPIO_Handler::GPIO_IRQInterruptConfig(const uint8_t IRQNumber, const uint8_t EnorDi) {
 8000d4c:	b480      	push	{r7}
 8000d4e:	b083      	sub	sp, #12
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
 8000d54:	460b      	mov	r3, r1
 8000d56:	70fb      	strb	r3, [r7, #3]
 8000d58:	4613      	mov	r3, r2
 8000d5a:	70bb      	strb	r3, [r7, #2]
	if(EnorDi == ENABLE) {
 8000d5c:	78bb      	ldrb	r3, [r7, #2]
 8000d5e:	2b01      	cmp	r3, #1
 8000d60:	d133      	bne.n	8000dca <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0x7e>
		if (IRQNumber <= 31) {
 8000d62:	78fb      	ldrb	r3, [r7, #3]
 8000d64:	2b1f      	cmp	r3, #31
 8000d66:	d80a      	bhi.n	8000d7e <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0x32>
			//	program ISER0 register
			*NVIC_ISER0 |= (1 << IRQNumber);
 8000d68:	4b34      	ldr	r3, [pc, #208]	; (8000e3c <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0xf0>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	78fa      	ldrb	r2, [r7, #3]
 8000d6e:	2101      	movs	r1, #1
 8000d70:	fa01 f202 	lsl.w	r2, r1, r2
 8000d74:	4611      	mov	r1, r2
 8000d76:	4a31      	ldr	r2, [pc, #196]	; (8000e3c <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0xf0>)
 8000d78:	430b      	orrs	r3, r1
 8000d7a:	6013      	str	r3, [r2, #0]
			// program ICE2 register
			*NVIC_ICER2 |= (1 << (IRQNumber % 64));
		}
	}

}
 8000d7c:	e059      	b.n	8000e32 <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0xe6>
		} else if (IRQNumber > 31 && IRQNumber < 64) {
 8000d7e:	78fb      	ldrb	r3, [r7, #3]
 8000d80:	2b1f      	cmp	r3, #31
 8000d82:	d90f      	bls.n	8000da4 <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0x58>
 8000d84:	78fb      	ldrb	r3, [r7, #3]
 8000d86:	2b3f      	cmp	r3, #63	; 0x3f
 8000d88:	d80c      	bhi.n	8000da4 <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0x58>
			*NVIC_ISER1 |= (1 << (IRQNumber % 32));
 8000d8a:	4b2d      	ldr	r3, [pc, #180]	; (8000e40 <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0xf4>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	78fa      	ldrb	r2, [r7, #3]
 8000d90:	f002 021f 	and.w	r2, r2, #31
 8000d94:	2101      	movs	r1, #1
 8000d96:	fa01 f202 	lsl.w	r2, r1, r2
 8000d9a:	4611      	mov	r1, r2
 8000d9c:	4a28      	ldr	r2, [pc, #160]	; (8000e40 <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0xf4>)
 8000d9e:	430b      	orrs	r3, r1
 8000da0:	6013      	str	r3, [r2, #0]
 8000da2:	e046      	b.n	8000e32 <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0xe6>
		} else if (IRQNumber >= 64 && IRQNumber < 96) {
 8000da4:	78fb      	ldrb	r3, [r7, #3]
 8000da6:	2b3f      	cmp	r3, #63	; 0x3f
 8000da8:	d943      	bls.n	8000e32 <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0xe6>
 8000daa:	78fb      	ldrb	r3, [r7, #3]
 8000dac:	2b5f      	cmp	r3, #95	; 0x5f
 8000dae:	d840      	bhi.n	8000e32 <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0xe6>
			*NVIC_ISER2 |= (1 << (IRQNumber % 64));
 8000db0:	4b24      	ldr	r3, [pc, #144]	; (8000e44 <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0xf8>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	78fa      	ldrb	r2, [r7, #3]
 8000db6:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000dba:	2101      	movs	r1, #1
 8000dbc:	fa01 f202 	lsl.w	r2, r1, r2
 8000dc0:	4611      	mov	r1, r2
 8000dc2:	4a20      	ldr	r2, [pc, #128]	; (8000e44 <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0xf8>)
 8000dc4:	430b      	orrs	r3, r1
 8000dc6:	6013      	str	r3, [r2, #0]
}
 8000dc8:	e033      	b.n	8000e32 <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0xe6>
		if (IRQNumber <= 31) {
 8000dca:	78fb      	ldrb	r3, [r7, #3]
 8000dcc:	2b1f      	cmp	r3, #31
 8000dce:	d80a      	bhi.n	8000de6 <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0x9a>
			*NVIC_ICER0 |= (1 << IRQNumber);
 8000dd0:	4b1d      	ldr	r3, [pc, #116]	; (8000e48 <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0xfc>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	78fa      	ldrb	r2, [r7, #3]
 8000dd6:	2101      	movs	r1, #1
 8000dd8:	fa01 f202 	lsl.w	r2, r1, r2
 8000ddc:	4611      	mov	r1, r2
 8000dde:	4a1a      	ldr	r2, [pc, #104]	; (8000e48 <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0xfc>)
 8000de0:	430b      	orrs	r3, r1
 8000de2:	6013      	str	r3, [r2, #0]
}
 8000de4:	e025      	b.n	8000e32 <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0xe6>
		} else if (IRQNumber > 31 && IRQNumber < 64) {
 8000de6:	78fb      	ldrb	r3, [r7, #3]
 8000de8:	2b1f      	cmp	r3, #31
 8000dea:	d90f      	bls.n	8000e0c <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0xc0>
 8000dec:	78fb      	ldrb	r3, [r7, #3]
 8000dee:	2b3f      	cmp	r3, #63	; 0x3f
 8000df0:	d80c      	bhi.n	8000e0c <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0xc0>
			*NVIC_ICER1 |= (1 << (IRQNumber % 32));
 8000df2:	4b16      	ldr	r3, [pc, #88]	; (8000e4c <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0x100>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	78fa      	ldrb	r2, [r7, #3]
 8000df8:	f002 021f 	and.w	r2, r2, #31
 8000dfc:	2101      	movs	r1, #1
 8000dfe:	fa01 f202 	lsl.w	r2, r1, r2
 8000e02:	4611      	mov	r1, r2
 8000e04:	4a11      	ldr	r2, [pc, #68]	; (8000e4c <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0x100>)
 8000e06:	430b      	orrs	r3, r1
 8000e08:	6013      	str	r3, [r2, #0]
 8000e0a:	e012      	b.n	8000e32 <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0xe6>
		} else if (IRQNumber >= 64 && IRQNumber < 96) {
 8000e0c:	78fb      	ldrb	r3, [r7, #3]
 8000e0e:	2b3f      	cmp	r3, #63	; 0x3f
 8000e10:	d90f      	bls.n	8000e32 <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0xe6>
 8000e12:	78fb      	ldrb	r3, [r7, #3]
 8000e14:	2b5f      	cmp	r3, #95	; 0x5f
 8000e16:	d80c      	bhi.n	8000e32 <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0xe6>
			*NVIC_ICER2 |= (1 << (IRQNumber % 64));
 8000e18:	4b0d      	ldr	r3, [pc, #52]	; (8000e50 <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0x104>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	78fa      	ldrb	r2, [r7, #3]
 8000e1e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000e22:	2101      	movs	r1, #1
 8000e24:	fa01 f202 	lsl.w	r2, r1, r2
 8000e28:	4611      	mov	r1, r2
 8000e2a:	4a09      	ldr	r2, [pc, #36]	; (8000e50 <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0x104>)
 8000e2c:	430b      	orrs	r3, r1
 8000e2e:	6013      	str	r3, [r2, #0]
}
 8000e30:	e7ff      	b.n	8000e32 <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0xe6>
 8000e32:	bf00      	nop
 8000e34:	370c      	adds	r7, #12
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bc80      	pop	{r7}
 8000e3a:	4770      	bx	lr
 8000e3c:	e000e100 	.word	0xe000e100
 8000e40:	e000e104 	.word	0xe000e104
 8000e44:	e000e108 	.word	0xe000e108
 8000e48:	e000e180 	.word	0xe000e180
 8000e4c:	e000e184 	.word	0xe000e184
 8000e50:	e000e188 	.word	0xe000e188

08000e54 <_ZN12GPIO_Handler22GPIO_IRQPriorityConfigEhh>:
 *
 * @param[in] IRQNumber: IRQ position for EXIT
 * @param[in] IRPriority: 0->15
 * @return None
 */
void GPIO_Handler::GPIO_IRQPriorityConfig(const uint8_t IRQNumber, const uint8_t IRQPriority) {
 8000e54:	b480      	push	{r7}
 8000e56:	b085      	sub	sp, #20
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
 8000e5c:	460b      	mov	r3, r1
 8000e5e:	70fb      	strb	r3, [r7, #3]
 8000e60:	4613      	mov	r3, r2
 8000e62:	70bb      	strb	r3, [r7, #2]
	// 1. first lets find out the ipr register
	uint8_t iprx = IRQNumber >> 2;
 8000e64:	78fb      	ldrb	r3, [r7, #3]
 8000e66:	109b      	asrs	r3, r3, #2
 8000e68:	73fb      	strb	r3, [r7, #15]
	uint8_t iprx_section = IRQNumber % 4;
 8000e6a:	78fb      	ldrb	r3, [r7, #3]
 8000e6c:	f003 0303 	and.w	r3, r3, #3
 8000e70:	73bb      	strb	r3, [r7, #14]
	uint8_t shift_amount = (8 * iprx_section) + (8 - NO_PR_BITS_IMPLEMENTED);
 8000e72:	7bbb      	ldrb	r3, [r7, #14]
 8000e74:	00db      	lsls	r3, r3, #3
 8000e76:	b2db      	uxtb	r3, r3
 8000e78:	3304      	adds	r3, #4
 8000e7a:	737b      	strb	r3, [r7, #13]

	*(NVIC_PR_BASE_ADDR + iprx) |= (IRQPriority << shift_amount);
 8000e7c:	7bfb      	ldrb	r3, [r7, #15]
 8000e7e:	f103 5360 	add.w	r3, r3, #939524096	; 0x38000000
 8000e82:	f503 5364 	add.w	r3, r3, #14592	; 0x3900
 8000e86:	009b      	lsls	r3, r3, #2
 8000e88:	681a      	ldr	r2, [r3, #0]
 8000e8a:	78b9      	ldrb	r1, [r7, #2]
 8000e8c:	7b7b      	ldrb	r3, [r7, #13]
 8000e8e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e92:	4618      	mov	r0, r3
 8000e94:	7bfb      	ldrb	r3, [r7, #15]
 8000e96:	f103 5360 	add.w	r3, r3, #939524096	; 0x38000000
 8000e9a:	f503 5364 	add.w	r3, r3, #14592	; 0x3900
 8000e9e:	009b      	lsls	r3, r3, #2
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	ea42 0300 	orr.w	r3, r2, r0
 8000ea6:	600b      	str	r3, [r1, #0]
}
 8000ea8:	bf00      	nop
 8000eaa:	3714      	adds	r7, #20
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bc80      	pop	{r7}
 8000eb0:	4770      	bx	lr

08000eb2 <_ZN11SPI_HandlerC1EP12SPI_RegDef_thhhhhhh>:
/*********************************************************************
 * @class      		  - GPIO_Handler Constructor
 *
 * @brief             -
 **********************************************************************/
SPI_Handler::SPI_Handler(SPI_RegDef_t *SPIx_ADDR,
 8000eb2:	b580      	push	{r7, lr}
 8000eb4:	b084      	sub	sp, #16
 8000eb6:	af00      	add	r7, sp, #0
 8000eb8:	60f8      	str	r0, [r7, #12]
 8000eba:	60b9      	str	r1, [r7, #8]
 8000ebc:	4611      	mov	r1, r2
 8000ebe:	461a      	mov	r2, r3
 8000ec0:	460b      	mov	r3, r1
 8000ec2:	71fb      	strb	r3, [r7, #7]
 8000ec4:	4613      	mov	r3, r2
 8000ec6:	71bb      	strb	r3, [r7, #6]
                         uint8_t BusConfig,
                         uint8_t SclkSpeed,
                         uint8_t DFF,
                         uint8_t CPOL,
                         uint8_t CPHA,
                         uint8_t SSM) {
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	4618      	mov	r0, r3
 8000ecc:	2320      	movs	r3, #32
 8000ece:	461a      	mov	r2, r3
 8000ed0:	2100      	movs	r1, #0
 8000ed2:	f000 fedf 	bl	8001c94 <memset>
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	3320      	adds	r3, #32
 8000eda:	4618      	mov	r0, r3
 8000edc:	f000 fd38 	bl	8001950 <_ZNSt10unique_ptrI12GPIO_HandlerSt14default_deleteIS0_EEC1IS2_vEEv>
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	3324      	adds	r3, #36	; 0x24
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f000 fd33 	bl	8001950 <_ZNSt10unique_ptrI12GPIO_HandlerSt14default_deleteIS0_EEC1IS2_vEEv>
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	3328      	adds	r3, #40	; 0x28
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f000 fd2e 	bl	8001950 <_ZNSt10unique_ptrI12GPIO_HandlerSt14default_deleteIS0_EEC1IS2_vEEv>
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	332c      	adds	r3, #44	; 0x2c
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f000 fd29 	bl	8001950 <_ZNSt10unique_ptrI12GPIO_HandlerSt14default_deleteIS0_EEC1IS2_vEEv>
    SPIx_.pSPIx = SPIx_ADDR;
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	68ba      	ldr	r2, [r7, #8]
 8000f02:	601a      	str	r2, [r3, #0]
    SPIx_.SPIConfig.SPI_DeviceMode = DeviceMode;
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	79fa      	ldrb	r2, [r7, #7]
 8000f08:	711a      	strb	r2, [r3, #4]
    SPIx_.SPIConfig.SPI_BusConfig = BusConfig;
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	79ba      	ldrb	r2, [r7, #6]
 8000f0e:	715a      	strb	r2, [r3, #5]
    SPIx_.SPIConfig.SPI_SclkSpeed = SclkSpeed;
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	7e3a      	ldrb	r2, [r7, #24]
 8000f14:	719a      	strb	r2, [r3, #6]
    SPIx_.SPIConfig.SPI_DFF = DFF;
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	7f3a      	ldrb	r2, [r7, #28]
 8000f1a:	71da      	strb	r2, [r3, #7]
    SPIx_.SPIConfig.SPI_CPOL = CPOL;
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000f22:	721a      	strb	r2, [r3, #8]
    SPIx_.SPIConfig.SPI_CPHA = CPHA;
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8000f2a:	725a      	strb	r2, [r3, #9]
    SPIx_.SPIConfig.SPI_SSM = SSM;
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8000f32:	729a      	strb	r2, [r3, #10]
    SPI_GPIOs_Init();
 8000f34:	68f8      	ldr	r0, [r7, #12]
 8000f36:	f000 f87f 	bl	8001038 <_ZN11SPI_Handler14SPI_GPIOs_InitEv>
    SPI_PeriClockControl();
 8000f3a:	68f8      	ldr	r0, [r7, #12]
 8000f3c:	f000 f83a 	bl	8000fb4 <_ZN11SPI_Handler20SPI_PeriClockControlEv>
    SPI_Init();
 8000f40:	68f8      	ldr	r0, [r7, #12]
 8000f42:	f000 f8fb 	bl	800113c <_ZN11SPI_Handler8SPI_InitEv>
    SPI_SSIConfig(ENABLE);
 8000f46:	2101      	movs	r1, #1
 8000f48:	68f8      	ldr	r0, [r7, #12]
 8000f4a:	f000 fa51 	bl	80013f0 <_ZN11SPI_Handler13SPI_SSIConfigEh>
    if(SPI_SSM_EN == SPIx_.SPIConfig.SPI_SSM) {
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	7a9b      	ldrb	r3, [r3, #10]
 8000f52:	2b01      	cmp	r3, #1
 8000f54:	d104      	bne.n	8000f60 <_ZN11SPI_HandlerC1EP12SPI_RegDef_thhhhhhh+0xae>
    	SPI_SSOEConfig(DISABLE);
 8000f56:	2100      	movs	r1, #0
 8000f58:	68f8      	ldr	r0, [r7, #12]
 8000f5a:	f000 fa2a 	bl	80013b2 <_ZN11SPI_Handler14SPI_SSOEConfigEh>
 8000f5e:	e003      	b.n	8000f68 <_ZN11SPI_HandlerC1EP12SPI_RegDef_thhhhhhh+0xb6>
    }
    else {
    	SPI_SSOEConfig(ENABLE);
 8000f60:	2101      	movs	r1, #1
 8000f62:	68f8      	ldr	r0, [r7, #12]
 8000f64:	f000 fa25 	bl	80013b2 <_ZN11SPI_Handler14SPI_SSOEConfigEh>
    }
}
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	3710      	adds	r7, #16
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}

08000f72 <_ZN11SPI_HandlerD1Ev>:
 *
 * @return None
 *
 * @Node: Be careful when using many Peripheral device in the same PORT
 **********************************************************************/
SPI_Handler::~SPI_Handler(){
 8000f72:	b580      	push	{r7, lr}
 8000f74:	b082      	sub	sp, #8
 8000f76:	af00      	add	r7, sp, #0
 8000f78:	6078      	str	r0, [r7, #4]
	SPI_DeInit();
 8000f7a:	6878      	ldr	r0, [r7, #4]
 8000f7c:	f000 f938 	bl	80011f0 <_ZN11SPI_Handler10SPI_DeInitEv>
SPI_Handler::~SPI_Handler(){
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	332c      	adds	r3, #44	; 0x2c
 8000f84:	4618      	mov	r0, r3
 8000f86:	f000 fcf3 	bl	8001970 <_ZNSt10unique_ptrI12GPIO_HandlerSt14default_deleteIS0_EED1Ev>
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	3328      	adds	r3, #40	; 0x28
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f000 fcee 	bl	8001970 <_ZNSt10unique_ptrI12GPIO_HandlerSt14default_deleteIS0_EED1Ev>
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	3324      	adds	r3, #36	; 0x24
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f000 fce9 	bl	8001970 <_ZNSt10unique_ptrI12GPIO_HandlerSt14default_deleteIS0_EED1Ev>
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	3320      	adds	r3, #32
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f000 fce4 	bl	8001970 <_ZNSt10unique_ptrI12GPIO_HandlerSt14default_deleteIS0_EED1Ev>
}
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	4618      	mov	r0, r3
 8000fac:	3708      	adds	r7, #8
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
	...

08000fb4 <_ZN11SPI_Handler20SPI_PeriClockControlEv>:

// peripheral clock setup
void SPI_Handler::SPI_PeriClockControl() {
 8000fb4:	b480      	push	{r7}
 8000fb6:	b083      	sub	sp, #12
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
	if (SPI1 == SPIx_.pSPIx) {
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4a18      	ldr	r2, [pc, #96]	; (8001024 <_ZN11SPI_Handler20SPI_PeriClockControlEv+0x70>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d106      	bne.n	8000fd4 <_ZN11SPI_Handler20SPI_PeriClockControlEv+0x20>
		SPI1_PCLK_EN();
 8000fc6:	4b18      	ldr	r3, [pc, #96]	; (8001028 <_ZN11SPI_Handler20SPI_PeriClockControlEv+0x74>)
 8000fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fca:	4a17      	ldr	r2, [pc, #92]	; (8001028 <_ZN11SPI_Handler20SPI_PeriClockControlEv+0x74>)
 8000fcc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000fd0:	6453      	str	r3, [r2, #68]	; 0x44
		SPI3_PCLK_EN();
	}
	else if (SPI4 == SPIx_.pSPIx) {
		SPI4_PCLK_EN();
	}
}
 8000fd2:	e022      	b.n	800101a <_ZN11SPI_Handler20SPI_PeriClockControlEv+0x66>
	else if (SPI2 == SPIx_.pSPIx) {
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4a14      	ldr	r2, [pc, #80]	; (800102c <_ZN11SPI_Handler20SPI_PeriClockControlEv+0x78>)
 8000fda:	4293      	cmp	r3, r2
 8000fdc:	d106      	bne.n	8000fec <_ZN11SPI_Handler20SPI_PeriClockControlEv+0x38>
		SPI2_PCLK_EN();
 8000fde:	4b12      	ldr	r3, [pc, #72]	; (8001028 <_ZN11SPI_Handler20SPI_PeriClockControlEv+0x74>)
 8000fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe2:	4a11      	ldr	r2, [pc, #68]	; (8001028 <_ZN11SPI_Handler20SPI_PeriClockControlEv+0x74>)
 8000fe4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fe8:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000fea:	e016      	b.n	800101a <_ZN11SPI_Handler20SPI_PeriClockControlEv+0x66>
	else if (SPI3 == SPIx_.pSPIx) {
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4a0f      	ldr	r2, [pc, #60]	; (8001030 <_ZN11SPI_Handler20SPI_PeriClockControlEv+0x7c>)
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	d106      	bne.n	8001004 <_ZN11SPI_Handler20SPI_PeriClockControlEv+0x50>
		SPI3_PCLK_EN();
 8000ff6:	4b0c      	ldr	r3, [pc, #48]	; (8001028 <_ZN11SPI_Handler20SPI_PeriClockControlEv+0x74>)
 8000ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ffa:	4a0b      	ldr	r2, [pc, #44]	; (8001028 <_ZN11SPI_Handler20SPI_PeriClockControlEv+0x74>)
 8000ffc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001000:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001002:	e00a      	b.n	800101a <_ZN11SPI_Handler20SPI_PeriClockControlEv+0x66>
	else if (SPI4 == SPIx_.pSPIx) {
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4a0a      	ldr	r2, [pc, #40]	; (8001034 <_ZN11SPI_Handler20SPI_PeriClockControlEv+0x80>)
 800100a:	4293      	cmp	r3, r2
 800100c:	d105      	bne.n	800101a <_ZN11SPI_Handler20SPI_PeriClockControlEv+0x66>
		SPI4_PCLK_EN();
 800100e:	4b06      	ldr	r3, [pc, #24]	; (8001028 <_ZN11SPI_Handler20SPI_PeriClockControlEv+0x74>)
 8001010:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001012:	4a05      	ldr	r2, [pc, #20]	; (8001028 <_ZN11SPI_Handler20SPI_PeriClockControlEv+0x74>)
 8001014:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001018:	6453      	str	r3, [r2, #68]	; 0x44
}
 800101a:	bf00      	nop
 800101c:	370c      	adds	r7, #12
 800101e:	46bd      	mov	sp, r7
 8001020:	bc80      	pop	{r7}
 8001022:	4770      	bx	lr
 8001024:	40013000 	.word	0x40013000
 8001028:	40023800 	.word	0x40023800
 800102c:	40003800 	.word	0x40003800
 8001030:	40003c00 	.word	0x40003c00
 8001034:	40013400 	.word	0x40013400

08001038 <_ZN11SPI_Handler14SPI_GPIOs_InitEv>:
 *
 * @param None
 *
 * @return None
 **********************************************************************/
void SPI_Handler::SPI_GPIOs_Init() {
 8001038:	b5b0      	push	{r4, r5, r7, lr}
 800103a:	b088      	sub	sp, #32
 800103c:	af06      	add	r7, sp, #24
 800103e:	6078      	str	r0, [r7, #4]
    if (SPIx_.pSPIx == SPI1) {
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4a3b      	ldr	r2, [pc, #236]	; (8001134 <_ZN11SPI_Handler14SPI_GPIOs_InitEv+0xfc>)
 8001046:	4293      	cmp	r3, r2
 8001048:	d16f      	bne.n	800112a <_ZN11SPI_Handler14SPI_GPIOs_InitEv+0xf2>
        SPI_Sck.reset( new GPIO_Handler(GPIOA,
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	f103 0420 	add.w	r4, r3, #32
                                        GPIO_MODE_ALTFN,
                                        GPIO_SPEED_HIGH,
                                        IRQ_Prio_NO_15,
                                        GPIO_OP_TYPE_PP,
                                        GPIO_NO_PUPD,
                                        5) );
 8001050:	200c      	movs	r0, #12
 8001052:	f000 fdc1 	bl	8001bd8 <_Znwj>
 8001056:	4603      	mov	r3, r0
 8001058:	461d      	mov	r5, r3
 800105a:	2305      	movs	r3, #5
 800105c:	9304      	str	r3, [sp, #16]
 800105e:	2300      	movs	r3, #0
 8001060:	9303      	str	r3, [sp, #12]
 8001062:	2300      	movs	r3, #0
 8001064:	9302      	str	r3, [sp, #8]
 8001066:	230f      	movs	r3, #15
 8001068:	9301      	str	r3, [sp, #4]
 800106a:	2303      	movs	r3, #3
 800106c:	9300      	str	r3, [sp, #0]
 800106e:	2302      	movs	r3, #2
 8001070:	2205      	movs	r2, #5
 8001072:	4931      	ldr	r1, [pc, #196]	; (8001138 <_ZN11SPI_Handler14SPI_GPIOs_InitEv+0x100>)
 8001074:	4628      	mov	r0, r5
 8001076:	f7ff fb97 	bl	80007a8 <_ZN12GPIO_HandlerC1EP13GPIO_RegDef_thhhhhhh>
        SPI_Sck.reset( new GPIO_Handler(GPIOA,
 800107a:	4629      	mov	r1, r5
 800107c:	4620      	mov	r0, r4
 800107e:	f000 fc96 	bl	80019ae <_ZNSt10unique_ptrI12GPIO_HandlerSt14default_deleteIS0_EE5resetEPS0_>

        SPI_MOSI.reset( new GPIO_Handler(GPIOA,
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	f103 0424 	add.w	r4, r3, #36	; 0x24
                                        GPIO_MODE_ALTFN,
                                        GPIO_SPEED_HIGH,
                                        IRQ_Prio_NO_15,
                                        GPIO_OP_TYPE_PP,
                                        GPIO_NO_PUPD,
                                        5) );
 8001088:	200c      	movs	r0, #12
 800108a:	f000 fda5 	bl	8001bd8 <_Znwj>
 800108e:	4603      	mov	r3, r0
 8001090:	461d      	mov	r5, r3
 8001092:	2305      	movs	r3, #5
 8001094:	9304      	str	r3, [sp, #16]
 8001096:	2300      	movs	r3, #0
 8001098:	9303      	str	r3, [sp, #12]
 800109a:	2300      	movs	r3, #0
 800109c:	9302      	str	r3, [sp, #8]
 800109e:	230f      	movs	r3, #15
 80010a0:	9301      	str	r3, [sp, #4]
 80010a2:	2303      	movs	r3, #3
 80010a4:	9300      	str	r3, [sp, #0]
 80010a6:	2302      	movs	r3, #2
 80010a8:	2207      	movs	r2, #7
 80010aa:	4923      	ldr	r1, [pc, #140]	; (8001138 <_ZN11SPI_Handler14SPI_GPIOs_InitEv+0x100>)
 80010ac:	4628      	mov	r0, r5
 80010ae:	f7ff fb7b 	bl	80007a8 <_ZN12GPIO_HandlerC1EP13GPIO_RegDef_thhhhhhh>
        SPI_MOSI.reset( new GPIO_Handler(GPIOA,
 80010b2:	4629      	mov	r1, r5
 80010b4:	4620      	mov	r0, r4
 80010b6:	f000 fc7a 	bl	80019ae <_ZNSt10unique_ptrI12GPIO_HandlerSt14default_deleteIS0_EE5resetEPS0_>

        SPI_MISO.reset( new GPIO_Handler(GPIOA,
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	f103 0428 	add.w	r4, r3, #40	; 0x28
                                        GPIO_MODE_ALTFN,
                                        GPIO_SPEED_HIGH,
                                        IRQ_Prio_NO_15,
                                        GPIO_OP_TYPE_PP,
                                        GPIO_NO_PUPD,
                                        5) );
 80010c0:	200c      	movs	r0, #12
 80010c2:	f000 fd89 	bl	8001bd8 <_Znwj>
 80010c6:	4603      	mov	r3, r0
 80010c8:	461d      	mov	r5, r3
 80010ca:	2305      	movs	r3, #5
 80010cc:	9304      	str	r3, [sp, #16]
 80010ce:	2300      	movs	r3, #0
 80010d0:	9303      	str	r3, [sp, #12]
 80010d2:	2300      	movs	r3, #0
 80010d4:	9302      	str	r3, [sp, #8]
 80010d6:	230f      	movs	r3, #15
 80010d8:	9301      	str	r3, [sp, #4]
 80010da:	2303      	movs	r3, #3
 80010dc:	9300      	str	r3, [sp, #0]
 80010de:	2302      	movs	r3, #2
 80010e0:	2206      	movs	r2, #6
 80010e2:	4915      	ldr	r1, [pc, #84]	; (8001138 <_ZN11SPI_Handler14SPI_GPIOs_InitEv+0x100>)
 80010e4:	4628      	mov	r0, r5
 80010e6:	f7ff fb5f 	bl	80007a8 <_ZN12GPIO_HandlerC1EP13GPIO_RegDef_thhhhhhh>
        SPI_MISO.reset( new GPIO_Handler(GPIOA,
 80010ea:	4629      	mov	r1, r5
 80010ec:	4620      	mov	r0, r4
 80010ee:	f000 fc5e 	bl	80019ae <_ZNSt10unique_ptrI12GPIO_HandlerSt14default_deleteIS0_EE5resetEPS0_>



        SPI_NSS.reset( new GPIO_Handler(GPIOA,
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	f103 042c 	add.w	r4, r3, #44	; 0x2c
                                        GPIO_MODE_ALTFN,
                                        GPIO_SPEED_HIGH,
                                        IRQ_Prio_NO_15,
                                        GPIO_OP_TYPE_PP,
                                        GPIO_NO_PUPD,
                                        5) );
 80010f8:	200c      	movs	r0, #12
 80010fa:	f000 fd6d 	bl	8001bd8 <_Znwj>
 80010fe:	4603      	mov	r3, r0
 8001100:	461d      	mov	r5, r3
 8001102:	2305      	movs	r3, #5
 8001104:	9304      	str	r3, [sp, #16]
 8001106:	2300      	movs	r3, #0
 8001108:	9303      	str	r3, [sp, #12]
 800110a:	2300      	movs	r3, #0
 800110c:	9302      	str	r3, [sp, #8]
 800110e:	230f      	movs	r3, #15
 8001110:	9301      	str	r3, [sp, #4]
 8001112:	2303      	movs	r3, #3
 8001114:	9300      	str	r3, [sp, #0]
 8001116:	2302      	movs	r3, #2
 8001118:	2204      	movs	r2, #4
 800111a:	4907      	ldr	r1, [pc, #28]	; (8001138 <_ZN11SPI_Handler14SPI_GPIOs_InitEv+0x100>)
 800111c:	4628      	mov	r0, r5
 800111e:	f7ff fb43 	bl	80007a8 <_ZN12GPIO_HandlerC1EP13GPIO_RegDef_thhhhhhh>
        SPI_NSS.reset( new GPIO_Handler(GPIOA,
 8001122:	4629      	mov	r1, r5
 8001124:	4620      	mov	r0, r4
 8001126:	f000 fc42 	bl	80019ae <_ZNSt10unique_ptrI12GPIO_HandlerSt14default_deleteIS0_EE5resetEPS0_>
    }

}
 800112a:	bf00      	nop
 800112c:	3708      	adds	r7, #8
 800112e:	46bd      	mov	sp, r7
 8001130:	bdb0      	pop	{r4, r5, r7, pc}
 8001132:	bf00      	nop
 8001134:	40013000 	.word	0x40013000
 8001138:	40020000 	.word	0x40020000

0800113c <_ZN11SPI_Handler8SPI_InitEv>:
 *
 * @param None
 *
 * @return None
 **********************************************************************/
void SPI_Handler::SPI_Init() {
 800113c:	b480      	push	{r7}
 800113e:	b085      	sub	sp, #20
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
    // Lets configure the SPI_CR1 register
    uint32_t tempReg = 0;
 8001144:	2300      	movs	r3, #0
 8001146:	60fb      	str	r3, [r7, #12]

    // 1. configure the device mode
    tempReg |= SPIx_.SPIConfig.SPI_DeviceMode << SPI_CR1_MSTR;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	791b      	ldrb	r3, [r3, #4]
 800114c:	009b      	lsls	r3, r3, #2
 800114e:	461a      	mov	r2, r3
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	4313      	orrs	r3, r2
 8001154:	60fb      	str	r3, [r7, #12]
    // 2. configure the bus config
    if(SPI_BUS_CONFIG_FD == SPIx_.SPIConfig.SPI_BusConfig) {
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	795b      	ldrb	r3, [r3, #5]
 800115a:	2b01      	cmp	r3, #1
 800115c:	d104      	bne.n	8001168 <_ZN11SPI_Handler8SPI_InitEv+0x2c>
        // bidi mode should be cleared
        tempReg &= ~(1 << SPI_CR1_BIDIMODE);
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001164:	60fb      	str	r3, [r7, #12]
 8001166:	e018      	b.n	800119a <_ZN11SPI_Handler8SPI_InitEv+0x5e>
    }
    else if(SPI_BUS_CONFIG_HD == SPIx_.SPIConfig.SPI_BusConfig) {
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	795b      	ldrb	r3, [r3, #5]
 800116c:	2b02      	cmp	r3, #2
 800116e:	d108      	bne.n	8001182 <_ZN11SPI_Handler8SPI_InitEv+0x46>
        // bidi mode should be set
        tempReg |= (1 << SPI_CR1_BIDIMODE);
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001176:	60fb      	str	r3, [r7, #12]
        // bidioe mode should be set
        tempReg |= (1 << SPI_CR1_BIDIOE);
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800117e:	60fb      	str	r3, [r7, #12]
 8001180:	e00b      	b.n	800119a <_ZN11SPI_Handler8SPI_InitEv+0x5e>
    }
    else if(SPI_BUS_CONFIG_SIMPLEX_RXONLY == SPIx_.SPIConfig.SPI_BusConfig) {
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	795b      	ldrb	r3, [r3, #5]
 8001186:	2b03      	cmp	r3, #3
 8001188:	d107      	bne.n	800119a <_ZN11SPI_Handler8SPI_InitEv+0x5e>
        // bidi mode should be cleared, for active SCLK, because SLCK is only activate when MOSI is activate
        tempReg &= ~(1 << SPI_CR1_BIDIMODE);
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001190:	60fb      	str	r3, [r7, #12]
        // RXONLY should be set
        tempReg |= (1 << SPI_CR1_RXONLY);
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001198:	60fb      	str	r3, [r7, #12]
    }

    // 3. configure for clock speed
    tempReg |= (SPIx_.SPIConfig.SPI_SclkSpeed << SPI_CR1_BR);
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	799b      	ldrb	r3, [r3, #6]
 800119e:	00db      	lsls	r3, r3, #3
 80011a0:	461a      	mov	r2, r3
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	4313      	orrs	r3, r2
 80011a6:	60fb      	str	r3, [r7, #12]

    // 4. configure for data format
    tempReg |= (SPIx_.SPIConfig.SPI_DFF << SPI_CR1_DFF);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	79db      	ldrb	r3, [r3, #7]
 80011ac:	02db      	lsls	r3, r3, #11
 80011ae:	461a      	mov	r2, r3
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	4313      	orrs	r3, r2
 80011b4:	60fb      	str	r3, [r7, #12]

    // 5. configure CPOL
    tempReg |= (SPIx_.SPIConfig.SPI_CPOL << SPI_CR1_CPOL);
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	7a1b      	ldrb	r3, [r3, #8]
 80011ba:	005b      	lsls	r3, r3, #1
 80011bc:	461a      	mov	r2, r3
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	4313      	orrs	r3, r2
 80011c2:	60fb      	str	r3, [r7, #12]

    // 6. configure CPOA
    tempReg |= (SPIx_.SPIConfig.SPI_CPHA << SPI_CR1_CPHA);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	7a5b      	ldrb	r3, [r3, #9]
 80011c8:	461a      	mov	r2, r3
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	4313      	orrs	r3, r2
 80011ce:	60fb      	str	r3, [r7, #12]

    tempReg |= (SPIx_.SPIConfig.SPI_SSM << SPI_CR1_SSM);
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	7a9b      	ldrb	r3, [r3, #10]
 80011d4:	025b      	lsls	r3, r3, #9
 80011d6:	461a      	mov	r2, r3
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	4313      	orrs	r3, r2
 80011dc:	60fb      	str	r3, [r7, #12]

    SPIx_.pSPIx->CR1 = tempReg;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	68fa      	ldr	r2, [r7, #12]
 80011e4:	601a      	str	r2, [r3, #0]
}
 80011e6:	bf00      	nop
 80011e8:	3714      	adds	r7, #20
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bc80      	pop	{r7}
 80011ee:	4770      	bx	lr

080011f0 <_ZN11SPI_Handler10SPI_DeInitEv>:
 *
 * @param None
 *
 * @return None
 **********************************************************************/
void SPI_Handler::SPI_DeInit() {
 80011f0:	b480      	push	{r7}
 80011f2:	b083      	sub	sp, #12
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
	if (SPI1 == SPIx_.pSPIx) {
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4a24      	ldr	r2, [pc, #144]	; (8001290 <_ZN11SPI_Handler10SPI_DeInitEv+0xa0>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d10c      	bne.n	800121c <_ZN11SPI_Handler10SPI_DeInitEv+0x2c>
		SPI1_REG_RESET();
 8001202:	4b24      	ldr	r3, [pc, #144]	; (8001294 <_ZN11SPI_Handler10SPI_DeInitEv+0xa4>)
 8001204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001206:	4a23      	ldr	r2, [pc, #140]	; (8001294 <_ZN11SPI_Handler10SPI_DeInitEv+0xa4>)
 8001208:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800120c:	6253      	str	r3, [r2, #36]	; 0x24
 800120e:	4b21      	ldr	r3, [pc, #132]	; (8001294 <_ZN11SPI_Handler10SPI_DeInitEv+0xa4>)
 8001210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001212:	4a20      	ldr	r2, [pc, #128]	; (8001294 <_ZN11SPI_Handler10SPI_DeInitEv+0xa4>)
 8001214:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001218:	6253      	str	r3, [r2, #36]	; 0x24
		SPI3_REG_RESET();
	}
	else if (SPI4 == SPIx_.pSPIx) {
		SPI4_REG_RESET();
	}
}
 800121a:	e034      	b.n	8001286 <_ZN11SPI_Handler10SPI_DeInitEv+0x96>
	else if (SPI2 == SPIx_.pSPIx) {
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4a1d      	ldr	r2, [pc, #116]	; (8001298 <_ZN11SPI_Handler10SPI_DeInitEv+0xa8>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d10c      	bne.n	8001240 <_ZN11SPI_Handler10SPI_DeInitEv+0x50>
		SPI2_REG_RESET();
 8001226:	4b1b      	ldr	r3, [pc, #108]	; (8001294 <_ZN11SPI_Handler10SPI_DeInitEv+0xa4>)
 8001228:	6a1b      	ldr	r3, [r3, #32]
 800122a:	4a1a      	ldr	r2, [pc, #104]	; (8001294 <_ZN11SPI_Handler10SPI_DeInitEv+0xa4>)
 800122c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001230:	6213      	str	r3, [r2, #32]
 8001232:	4b18      	ldr	r3, [pc, #96]	; (8001294 <_ZN11SPI_Handler10SPI_DeInitEv+0xa4>)
 8001234:	6a1b      	ldr	r3, [r3, #32]
 8001236:	4a17      	ldr	r2, [pc, #92]	; (8001294 <_ZN11SPI_Handler10SPI_DeInitEv+0xa4>)
 8001238:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800123c:	6213      	str	r3, [r2, #32]
}
 800123e:	e022      	b.n	8001286 <_ZN11SPI_Handler10SPI_DeInitEv+0x96>
	else if (SPI3 == SPIx_.pSPIx) {
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4a15      	ldr	r2, [pc, #84]	; (800129c <_ZN11SPI_Handler10SPI_DeInitEv+0xac>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d10c      	bne.n	8001264 <_ZN11SPI_Handler10SPI_DeInitEv+0x74>
		SPI3_REG_RESET();
 800124a:	4b12      	ldr	r3, [pc, #72]	; (8001294 <_ZN11SPI_Handler10SPI_DeInitEv+0xa4>)
 800124c:	6a1b      	ldr	r3, [r3, #32]
 800124e:	4a11      	ldr	r2, [pc, #68]	; (8001294 <_ZN11SPI_Handler10SPI_DeInitEv+0xa4>)
 8001250:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001254:	6213      	str	r3, [r2, #32]
 8001256:	4b0f      	ldr	r3, [pc, #60]	; (8001294 <_ZN11SPI_Handler10SPI_DeInitEv+0xa4>)
 8001258:	6a1b      	ldr	r3, [r3, #32]
 800125a:	4a0e      	ldr	r2, [pc, #56]	; (8001294 <_ZN11SPI_Handler10SPI_DeInitEv+0xa4>)
 800125c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001260:	6213      	str	r3, [r2, #32]
}
 8001262:	e010      	b.n	8001286 <_ZN11SPI_Handler10SPI_DeInitEv+0x96>
	else if (SPI4 == SPIx_.pSPIx) {
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4a0d      	ldr	r2, [pc, #52]	; (80012a0 <_ZN11SPI_Handler10SPI_DeInitEv+0xb0>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d10b      	bne.n	8001286 <_ZN11SPI_Handler10SPI_DeInitEv+0x96>
		SPI4_REG_RESET();
 800126e:	4b09      	ldr	r3, [pc, #36]	; (8001294 <_ZN11SPI_Handler10SPI_DeInitEv+0xa4>)
 8001270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001272:	4a08      	ldr	r2, [pc, #32]	; (8001294 <_ZN11SPI_Handler10SPI_DeInitEv+0xa4>)
 8001274:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001278:	6253      	str	r3, [r2, #36]	; 0x24
 800127a:	4b06      	ldr	r3, [pc, #24]	; (8001294 <_ZN11SPI_Handler10SPI_DeInitEv+0xa4>)
 800127c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800127e:	4a05      	ldr	r2, [pc, #20]	; (8001294 <_ZN11SPI_Handler10SPI_DeInitEv+0xa4>)
 8001280:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001284:	6253      	str	r3, [r2, #36]	; 0x24
}
 8001286:	bf00      	nop
 8001288:	370c      	adds	r7, #12
 800128a:	46bd      	mov	sp, r7
 800128c:	bc80      	pop	{r7}
 800128e:	4770      	bx	lr
 8001290:	40013000 	.word	0x40013000
 8001294:	40023800 	.word	0x40023800
 8001298:	40003800 	.word	0x40003800
 800129c:	40003c00 	.word	0x40003c00
 80012a0:	40013400 	.word	0x40013400

080012a4 <_ZN11SPI_Handler21SPI_PeripheralControlEh>:
 *
 * @param None
 *
 * @return None
 **********************************************************************/
void SPI_Handler::SPI_PeripheralControl(uint8_t EnOrDi) {
 80012a4:	b480      	push	{r7}
 80012a6:	b083      	sub	sp, #12
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
 80012ac:	460b      	mov	r3, r1
 80012ae:	70fb      	strb	r3, [r7, #3]
    if(ENABLE == EnOrDi) {
 80012b0:	78fb      	ldrb	r3, [r7, #3]
 80012b2:	2b01      	cmp	r3, #1
 80012b4:	d108      	bne.n	80012c8 <_ZN11SPI_Handler21SPI_PeripheralControlEh+0x24>
        SPIx_.pSPIx->CR1 |= (1 << SPI_CR1_SPE);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	681a      	ldr	r2, [r3, #0]
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80012c4:	601a      	str	r2, [r3, #0]
    }
    else {
        SPIx_.pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
    }
}
 80012c6:	e007      	b.n	80012d8 <_ZN11SPI_Handler21SPI_PeripheralControlEh+0x34>
        SPIx_.pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	681a      	ldr	r2, [r3, #0]
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80012d6:	601a      	str	r2, [r3, #0]
}
 80012d8:	bf00      	nop
 80012da:	370c      	adds	r7, #12
 80012dc:	46bd      	mov	sp, r7
 80012de:	bc80      	pop	{r7}
 80012e0:	4770      	bx	lr

080012e2 <_ZN11SPI_Handler17SPI_GetFlagStatusEh>:
 *
 * @param None
 *
 * @return None
 **********************************************************************/
uint8_t SPI_Handler::SPI_GetFlagStatus(uint8_t FlagName) {
 80012e2:	b480      	push	{r7}
 80012e4:	b083      	sub	sp, #12
 80012e6:	af00      	add	r7, sp, #0
 80012e8:	6078      	str	r0, [r7, #4]
 80012ea:	460b      	mov	r3, r1
 80012ec:	70fb      	strb	r3, [r7, #3]
    if(SPIx_.pSPIx->SR & FlagName) {
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	689a      	ldr	r2, [r3, #8]
 80012f4:	78fb      	ldrb	r3, [r7, #3]
 80012f6:	4013      	ands	r3, r2
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	bf14      	ite	ne
 80012fc:	2301      	movne	r3, #1
 80012fe:	2300      	moveq	r3, #0
 8001300:	b2db      	uxtb	r3, r3
 8001302:	2b00      	cmp	r3, #0
 8001304:	d001      	beq.n	800130a <_ZN11SPI_Handler17SPI_GetFlagStatusEh+0x28>
        return FLAG_SET;
 8001306:	2301      	movs	r3, #1
 8001308:	e000      	b.n	800130c <_ZN11SPI_Handler17SPI_GetFlagStatusEh+0x2a>
    }
    return FLAG_RESET;
 800130a:	2300      	movs	r3, #0
}
 800130c:	4618      	mov	r0, r3
 800130e:	370c      	adds	r7, #12
 8001310:	46bd      	mov	sp, r7
 8001312:	bc80      	pop	{r7}
 8001314:	4770      	bx	lr

08001316 <_ZN11SPI_Handler12SPI_SendDataEPKhm>:
 * @param[in]: pTxBuffer: pointer to Tx buffer
 * @param[in]: Len: length of data transfer
 *
 * @return None
 **********************************************************************/
void SPI_Handler::SPI_SendData(const uint8_t *pTxBuffer, uint32_t Len) {
 8001316:	b580      	push	{r7, lr}
 8001318:	b084      	sub	sp, #16
 800131a:	af00      	add	r7, sp, #0
 800131c:	60f8      	str	r0, [r7, #12]
 800131e:	60b9      	str	r1, [r7, #8]
 8001320:	607a      	str	r2, [r7, #4]
	if ((SPIx_.pSPIx->CR1 & SPI_CR1_SPE_MSK) != SPI_CR1_SPE_MSK) {
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800132c:	2b40      	cmp	r3, #64	; 0x40
 800132e:	bf14      	ite	ne
 8001330:	2301      	movne	r3, #1
 8001332:	2300      	moveq	r3, #0
 8001334:	b2db      	uxtb	r3, r3
 8001336:	2b00      	cmp	r3, #0
 8001338:	d003      	beq.n	8001342 <_ZN11SPI_Handler12SPI_SendDataEPKhm+0x2c>
		SPI_PeripheralControl(ENABLE);
 800133a:	2101      	movs	r1, #1
 800133c:	68f8      	ldr	r0, [r7, #12]
 800133e:	f7ff ffb1 	bl	80012a4 <_ZN11SPI_Handler21SPI_PeripheralControlEh>
	}

    while(Len > 0) {
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d030      	beq.n	80013aa <_ZN11SPI_Handler12SPI_SendDataEPKhm+0x94>
        // 1. wait util tx buffer empty
        while(SPI_GetFlagStatus(SPI_TXE_FLAG) == FLAG_RESET);
 8001348:	2102      	movs	r1, #2
 800134a:	68f8      	ldr	r0, [r7, #12]
 800134c:	f7ff ffc9 	bl	80012e2 <_ZN11SPI_Handler17SPI_GetFlagStatusEh>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	bf0c      	ite	eq
 8001356:	2301      	moveq	r3, #1
 8001358:	2300      	movne	r3, #0
 800135a:	b2db      	uxtb	r3, r3
 800135c:	2b00      	cmp	r3, #0
 800135e:	d000      	beq.n	8001362 <_ZN11SPI_Handler12SPI_SendDataEPKhm+0x4c>
 8001360:	e7f2      	b.n	8001348 <_ZN11SPI_Handler12SPI_SendDataEPKhm+0x32>

        // 2. check the DFF bit in CR1
        if(SPIx_.pSPIx->CR1 & (1 << SPI_CR1_DFF)) {
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800136c:	2b00      	cmp	r3, #0
 800136e:	bf14      	ite	ne
 8001370:	2301      	movne	r3, #1
 8001372:	2300      	moveq	r3, #0
 8001374:	b2db      	uxtb	r3, r3
 8001376:	2b00      	cmp	r3, #0
 8001378:	d00b      	beq.n	8001392 <_ZN11SPI_Handler12SPI_SendDataEPKhm+0x7c>
            // 16 BIT DFF
            // 1. load the data into the DR
            SPIx_.pSPIx->DR = *((uint16_t *)pTxBuffer);
 800137a:	68bb      	ldr	r3, [r7, #8]
 800137c:	881a      	ldrh	r2, [r3, #0]
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	60da      	str	r2, [r3, #12]
            Len -= 2;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	3b02      	subs	r3, #2
 8001388:	607b      	str	r3, [r7, #4]
            (uint16_t *)pTxBuffer++;
 800138a:	68bb      	ldr	r3, [r7, #8]
 800138c:	3301      	adds	r3, #1
 800138e:	60bb      	str	r3, [r7, #8]
 8001390:	e7d7      	b.n	8001342 <_ZN11SPI_Handler12SPI_SendDataEPKhm+0x2c>
        }
        else {
            SPIx_.pSPIx->DR = *pTxBuffer;
 8001392:	68bb      	ldr	r3, [r7, #8]
 8001394:	781a      	ldrb	r2, [r3, #0]
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	60da      	str	r2, [r3, #12]
            Len -= 1;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	3b01      	subs	r3, #1
 80013a0:	607b      	str	r3, [r7, #4]
            pTxBuffer++;
 80013a2:	68bb      	ldr	r3, [r7, #8]
 80013a4:	3301      	adds	r3, #1
 80013a6:	60bb      	str	r3, [r7, #8]
    while(Len > 0) {
 80013a8:	e7cb      	b.n	8001342 <_ZN11SPI_Handler12SPI_SendDataEPKhm+0x2c>
        }
    }
}
 80013aa:	bf00      	nop
 80013ac:	3710      	adds	r7, #16
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}

080013b2 <_ZN11SPI_Handler14SPI_SSOEConfigEh>:



void SPI_Handler::SPI_SSOEConfig(uint8_t EnOrDi) {
 80013b2:	b480      	push	{r7}
 80013b4:	b083      	sub	sp, #12
 80013b6:	af00      	add	r7, sp, #0
 80013b8:	6078      	str	r0, [r7, #4]
 80013ba:	460b      	mov	r3, r1
 80013bc:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE) {
 80013be:	78fb      	ldrb	r3, [r7, #3]
 80013c0:	2b01      	cmp	r3, #1
 80013c2:	d108      	bne.n	80013d6 <_ZN11SPI_Handler14SPI_SSOEConfigEh+0x24>
		SPIx_.pSPIx->CR2 |= (1 << SPI_CR2_SSOE);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	685a      	ldr	r2, [r3, #4]
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f042 0204 	orr.w	r2, r2, #4
 80013d2:	605a      	str	r2, [r3, #4]
	}
	else {
		SPIx_.pSPIx->CR2 &= ~(1 << SPI_CR2_SSOE);
	}
}
 80013d4:	e007      	b.n	80013e6 <_ZN11SPI_Handler14SPI_SSOEConfigEh+0x34>
		SPIx_.pSPIx->CR2 &= ~(1 << SPI_CR2_SSOE);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	685a      	ldr	r2, [r3, #4]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f022 0204 	bic.w	r2, r2, #4
 80013e4:	605a      	str	r2, [r3, #4]
}
 80013e6:	bf00      	nop
 80013e8:	370c      	adds	r7, #12
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bc80      	pop	{r7}
 80013ee:	4770      	bx	lr

080013f0 <_ZN11SPI_Handler13SPI_SSIConfigEh>:
 *
 * @return            - None

 */
void SPI_Handler::SPI_SSIConfig(uint8_t EnOrDi)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b083      	sub	sp, #12
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
 80013f8:	460b      	mov	r3, r1
 80013fa:	70fb      	strb	r3, [r7, #3]
    if(EnOrDi == ENABLE)
 80013fc:	78fb      	ldrb	r3, [r7, #3]
 80013fe:	2b01      	cmp	r3, #1
 8001400:	d108      	bne.n	8001414 <_ZN11SPI_Handler13SPI_SSIConfigEh+0x24>
    {
        SPIx_.pSPIx->CR1 |=  (1 << SPI_CR1_SSI);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	681a      	ldr	r2, [r3, #0]
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001410:	601a      	str	r2, [r3, #0]
    }else
    {
        SPIx_.pSPIx->CR1 &=  ~(1 << SPI_CR1_SSI);
    }
}
 8001412:	e007      	b.n	8001424 <_ZN11SPI_Handler13SPI_SSIConfigEh+0x34>
        SPIx_.pSPIx->CR1 &=  ~(1 << SPI_CR1_SSI);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	681a      	ldr	r2, [r3, #0]
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001422:	601a      	str	r2, [r3, #0]
}
 8001424:	bf00      	nop
 8001426:	370c      	adds	r7, #12
 8001428:	46bd      	mov	sp, r7
 800142a:	bc80      	pop	{r7}
 800142c:	4770      	bx	lr

0800142e <_ZN11SPI_Handler15SPI_ReceiveDataEPhm>:
 * @param[in]: Len: length of data receive
 *
 * @return None
 **********************************************************************/
void SPI_Handler::SPI_ReceiveData(uint8_t *pRxBuffer, uint32_t Len)
{
 800142e:	b580      	push	{r7, lr}
 8001430:	b084      	sub	sp, #16
 8001432:	af00      	add	r7, sp, #0
 8001434:	60f8      	str	r0, [r7, #12]
 8001436:	60b9      	str	r1, [r7, #8]
 8001438:	607a      	str	r2, [r7, #4]
	if ((SPIx_.pSPIx->CR1 & SPI_CR1_SPE_MSK) != SPI_CR1_SPE_MSK) {
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001444:	2b40      	cmp	r3, #64	; 0x40
 8001446:	bf14      	ite	ne
 8001448:	2301      	movne	r3, #1
 800144a:	2300      	moveq	r3, #0
 800144c:	b2db      	uxtb	r3, r3
 800144e:	2b00      	cmp	r3, #0
 8001450:	d003      	beq.n	800145a <_ZN11SPI_Handler15SPI_ReceiveDataEPhm+0x2c>
		SPI_PeripheralControl(ENABLE);
 8001452:	2101      	movs	r1, #1
 8001454:	68f8      	ldr	r0, [r7, #12]
 8001456:	f7ff ff25 	bl	80012a4 <_ZN11SPI_Handler21SPI_PeripheralControlEh>
	}

	while(Len > 0)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d035      	beq.n	80014cc <_ZN11SPI_Handler15SPI_ReceiveDataEPhm+0x9e>
		{
			//1. wait until RXNE is set
			while(SPI_GetFlagStatus(SPI_RXNE_FLAG)  == (uint8_t)FLAG_RESET );
 8001460:	2101      	movs	r1, #1
 8001462:	68f8      	ldr	r0, [r7, #12]
 8001464:	f7ff ff3d 	bl	80012e2 <_ZN11SPI_Handler17SPI_GetFlagStatusEh>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	bf0c      	ite	eq
 800146e:	2301      	moveq	r3, #1
 8001470:	2300      	movne	r3, #0
 8001472:	b2db      	uxtb	r3, r3
 8001474:	2b00      	cmp	r3, #0
 8001476:	d000      	beq.n	800147a <_ZN11SPI_Handler15SPI_ReceiveDataEPhm+0x4c>
 8001478:	e7f2      	b.n	8001460 <_ZN11SPI_Handler15SPI_ReceiveDataEPhm+0x32>

			//2. check the DFF bit in CR1
			if( (SPIx_.pSPIx->CR1 & ( 1 << SPI_CR1_DFF) ) )
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001484:	2b00      	cmp	r3, #0
 8001486:	bf14      	ite	ne
 8001488:	2301      	movne	r3, #1
 800148a:	2300      	moveq	r3, #0
 800148c:	b2db      	uxtb	r3, r3
 800148e:	2b00      	cmp	r3, #0
 8001490:	d00f      	beq.n	80014b2 <_ZN11SPI_Handler15SPI_ReceiveDataEPhm+0x84>
			{
				//16 bit DFF
				//1. load the data from DR to Rxbuffer address
				 *((uint16_t*)pRxBuffer) = SPIx_.pSPIx->DR ;
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	68da      	ldr	r2, [r3, #12]
 8001498:	68bb      	ldr	r3, [r7, #8]
 800149a:	b292      	uxth	r2, r2
 800149c:	801a      	strh	r2, [r3, #0]
				Len--;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	3b01      	subs	r3, #1
 80014a2:	607b      	str	r3, [r7, #4]
				Len--;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	3b01      	subs	r3, #1
 80014a8:	607b      	str	r3, [r7, #4]
				(uint16_t*)pRxBuffer++;
 80014aa:	68bb      	ldr	r3, [r7, #8]
 80014ac:	3301      	adds	r3, #1
 80014ae:	60bb      	str	r3, [r7, #8]
 80014b0:	e7d3      	b.n	800145a <_ZN11SPI_Handler15SPI_ReceiveDataEPhm+0x2c>
			}else
			{
				//8 bit DFF
				*(pRxBuffer) = SPIx_.pSPIx->DR ;
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	68da      	ldr	r2, [r3, #12]
 80014b8:	68bb      	ldr	r3, [r7, #8]
 80014ba:	b2d2      	uxtb	r2, r2
 80014bc:	701a      	strb	r2, [r3, #0]
				Len--;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	3b01      	subs	r3, #1
 80014c2:	607b      	str	r3, [r7, #4]
				pRxBuffer++;
 80014c4:	68bb      	ldr	r3, [r7, #8]
 80014c6:	3301      	adds	r3, #1
 80014c8:	60bb      	str	r3, [r7, #8]
	while(Len > 0)
 80014ca:	e7c6      	b.n	800145a <_ZN11SPI_Handler15SPI_ReceiveDataEPhm+0x2c>
			}
		}
}
 80014cc:	bf00      	nop
 80014ce:	3710      	adds	r7, #16
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}

080014d4 <_ZN11SPI_Handler22SPI_IRQInterruptConfigEhh>:
 * @param[in] IRQNumber     - IRQNumber IRQ Position number
 * @param[in] EnorDi        - Enable/Disable Flag
 *
 * @return None
 */
void SPI_Handler::SPI_IRQInterruptConfig(const uint8_t IRQNumber, const uint8_t EnorDi) {
 80014d4:	b480      	push	{r7}
 80014d6:	b083      	sub	sp, #12
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
 80014dc:	460b      	mov	r3, r1
 80014de:	70fb      	strb	r3, [r7, #3]
 80014e0:	4613      	mov	r3, r2
 80014e2:	70bb      	strb	r3, [r7, #2]
    if(EnorDi == ENABLE) {
 80014e4:	78bb      	ldrb	r3, [r7, #2]
 80014e6:	2b01      	cmp	r3, #1
 80014e8:	d133      	bne.n	8001552 <_ZN11SPI_Handler22SPI_IRQInterruptConfigEhh+0x7e>
        if (IRQNumber <= 31) {
 80014ea:	78fb      	ldrb	r3, [r7, #3]
 80014ec:	2b1f      	cmp	r3, #31
 80014ee:	d80a      	bhi.n	8001506 <_ZN11SPI_Handler22SPI_IRQInterruptConfigEhh+0x32>
            //  program ISER0 register
            *NVIC_ISER0 |= (1 << IRQNumber);
 80014f0:	4b34      	ldr	r3, [pc, #208]	; (80015c4 <_ZN11SPI_Handler22SPI_IRQInterruptConfigEhh+0xf0>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	78fa      	ldrb	r2, [r7, #3]
 80014f6:	2101      	movs	r1, #1
 80014f8:	fa01 f202 	lsl.w	r2, r1, r2
 80014fc:	4611      	mov	r1, r2
 80014fe:	4a31      	ldr	r2, [pc, #196]	; (80015c4 <_ZN11SPI_Handler22SPI_IRQInterruptConfigEhh+0xf0>)
 8001500:	430b      	orrs	r3, r1
 8001502:	6013      	str	r3, [r2, #0]
            // program ICE2 register
            *NVIC_ICER2 |= (1 << (IRQNumber % 64));
        }
    }

}
 8001504:	e059      	b.n	80015ba <_ZN11SPI_Handler22SPI_IRQInterruptConfigEhh+0xe6>
        } else if (IRQNumber > 31 && IRQNumber < 64) {
 8001506:	78fb      	ldrb	r3, [r7, #3]
 8001508:	2b1f      	cmp	r3, #31
 800150a:	d90f      	bls.n	800152c <_ZN11SPI_Handler22SPI_IRQInterruptConfigEhh+0x58>
 800150c:	78fb      	ldrb	r3, [r7, #3]
 800150e:	2b3f      	cmp	r3, #63	; 0x3f
 8001510:	d80c      	bhi.n	800152c <_ZN11SPI_Handler22SPI_IRQInterruptConfigEhh+0x58>
            *NVIC_ISER1 |= (1 << (IRQNumber % 32));
 8001512:	4b2d      	ldr	r3, [pc, #180]	; (80015c8 <_ZN11SPI_Handler22SPI_IRQInterruptConfigEhh+0xf4>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	78fa      	ldrb	r2, [r7, #3]
 8001518:	f002 021f 	and.w	r2, r2, #31
 800151c:	2101      	movs	r1, #1
 800151e:	fa01 f202 	lsl.w	r2, r1, r2
 8001522:	4611      	mov	r1, r2
 8001524:	4a28      	ldr	r2, [pc, #160]	; (80015c8 <_ZN11SPI_Handler22SPI_IRQInterruptConfigEhh+0xf4>)
 8001526:	430b      	orrs	r3, r1
 8001528:	6013      	str	r3, [r2, #0]
 800152a:	e046      	b.n	80015ba <_ZN11SPI_Handler22SPI_IRQInterruptConfigEhh+0xe6>
        } else if (IRQNumber >= 64 && IRQNumber < 96) {
 800152c:	78fb      	ldrb	r3, [r7, #3]
 800152e:	2b3f      	cmp	r3, #63	; 0x3f
 8001530:	d943      	bls.n	80015ba <_ZN11SPI_Handler22SPI_IRQInterruptConfigEhh+0xe6>
 8001532:	78fb      	ldrb	r3, [r7, #3]
 8001534:	2b5f      	cmp	r3, #95	; 0x5f
 8001536:	d840      	bhi.n	80015ba <_ZN11SPI_Handler22SPI_IRQInterruptConfigEhh+0xe6>
            *NVIC_ISER2 |= (1 << (IRQNumber % 64));
 8001538:	4b24      	ldr	r3, [pc, #144]	; (80015cc <_ZN11SPI_Handler22SPI_IRQInterruptConfigEhh+0xf8>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	78fa      	ldrb	r2, [r7, #3]
 800153e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8001542:	2101      	movs	r1, #1
 8001544:	fa01 f202 	lsl.w	r2, r1, r2
 8001548:	4611      	mov	r1, r2
 800154a:	4a20      	ldr	r2, [pc, #128]	; (80015cc <_ZN11SPI_Handler22SPI_IRQInterruptConfigEhh+0xf8>)
 800154c:	430b      	orrs	r3, r1
 800154e:	6013      	str	r3, [r2, #0]
}
 8001550:	e033      	b.n	80015ba <_ZN11SPI_Handler22SPI_IRQInterruptConfigEhh+0xe6>
        if (IRQNumber <= 31) {
 8001552:	78fb      	ldrb	r3, [r7, #3]
 8001554:	2b1f      	cmp	r3, #31
 8001556:	d80a      	bhi.n	800156e <_ZN11SPI_Handler22SPI_IRQInterruptConfigEhh+0x9a>
            *NVIC_ICER0 |= (1 << IRQNumber);
 8001558:	4b1d      	ldr	r3, [pc, #116]	; (80015d0 <_ZN11SPI_Handler22SPI_IRQInterruptConfigEhh+0xfc>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	78fa      	ldrb	r2, [r7, #3]
 800155e:	2101      	movs	r1, #1
 8001560:	fa01 f202 	lsl.w	r2, r1, r2
 8001564:	4611      	mov	r1, r2
 8001566:	4a1a      	ldr	r2, [pc, #104]	; (80015d0 <_ZN11SPI_Handler22SPI_IRQInterruptConfigEhh+0xfc>)
 8001568:	430b      	orrs	r3, r1
 800156a:	6013      	str	r3, [r2, #0]
}
 800156c:	e025      	b.n	80015ba <_ZN11SPI_Handler22SPI_IRQInterruptConfigEhh+0xe6>
        } else if (IRQNumber > 31 && IRQNumber < 64) {
 800156e:	78fb      	ldrb	r3, [r7, #3]
 8001570:	2b1f      	cmp	r3, #31
 8001572:	d90f      	bls.n	8001594 <_ZN11SPI_Handler22SPI_IRQInterruptConfigEhh+0xc0>
 8001574:	78fb      	ldrb	r3, [r7, #3]
 8001576:	2b3f      	cmp	r3, #63	; 0x3f
 8001578:	d80c      	bhi.n	8001594 <_ZN11SPI_Handler22SPI_IRQInterruptConfigEhh+0xc0>
            *NVIC_ICER1 |= (1 << (IRQNumber % 32));
 800157a:	4b16      	ldr	r3, [pc, #88]	; (80015d4 <_ZN11SPI_Handler22SPI_IRQInterruptConfigEhh+0x100>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	78fa      	ldrb	r2, [r7, #3]
 8001580:	f002 021f 	and.w	r2, r2, #31
 8001584:	2101      	movs	r1, #1
 8001586:	fa01 f202 	lsl.w	r2, r1, r2
 800158a:	4611      	mov	r1, r2
 800158c:	4a11      	ldr	r2, [pc, #68]	; (80015d4 <_ZN11SPI_Handler22SPI_IRQInterruptConfigEhh+0x100>)
 800158e:	430b      	orrs	r3, r1
 8001590:	6013      	str	r3, [r2, #0]
 8001592:	e012      	b.n	80015ba <_ZN11SPI_Handler22SPI_IRQInterruptConfigEhh+0xe6>
        } else if (IRQNumber >= 64 && IRQNumber < 96) {
 8001594:	78fb      	ldrb	r3, [r7, #3]
 8001596:	2b3f      	cmp	r3, #63	; 0x3f
 8001598:	d90f      	bls.n	80015ba <_ZN11SPI_Handler22SPI_IRQInterruptConfigEhh+0xe6>
 800159a:	78fb      	ldrb	r3, [r7, #3]
 800159c:	2b5f      	cmp	r3, #95	; 0x5f
 800159e:	d80c      	bhi.n	80015ba <_ZN11SPI_Handler22SPI_IRQInterruptConfigEhh+0xe6>
            *NVIC_ICER2 |= (1 << (IRQNumber % 64));
 80015a0:	4b0d      	ldr	r3, [pc, #52]	; (80015d8 <_ZN11SPI_Handler22SPI_IRQInterruptConfigEhh+0x104>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	78fa      	ldrb	r2, [r7, #3]
 80015a6:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80015aa:	2101      	movs	r1, #1
 80015ac:	fa01 f202 	lsl.w	r2, r1, r2
 80015b0:	4611      	mov	r1, r2
 80015b2:	4a09      	ldr	r2, [pc, #36]	; (80015d8 <_ZN11SPI_Handler22SPI_IRQInterruptConfigEhh+0x104>)
 80015b4:	430b      	orrs	r3, r1
 80015b6:	6013      	str	r3, [r2, #0]
}
 80015b8:	e7ff      	b.n	80015ba <_ZN11SPI_Handler22SPI_IRQInterruptConfigEhh+0xe6>
 80015ba:	bf00      	nop
 80015bc:	370c      	adds	r7, #12
 80015be:	46bd      	mov	sp, r7
 80015c0:	bc80      	pop	{r7}
 80015c2:	4770      	bx	lr
 80015c4:	e000e100 	.word	0xe000e100
 80015c8:	e000e104 	.word	0xe000e104
 80015cc:	e000e108 	.word	0xe000e108
 80015d0:	e000e180 	.word	0xe000e180
 80015d4:	e000e184 	.word	0xe000e184
 80015d8:	e000e188 	.word	0xe000e188

080015dc <_ZN11SPI_Handler21SPI_IRQPriorityConfigEhh>:
 *
 * @param[in] IRQNumber: IRQ position for EXIT
 * @param[in] IRPriority: 0->15
 * @return None
 */
void SPI_Handler::SPI_IRQPriorityConfig(const uint8_t IRQNumber, const uint8_t IRQPriority) {
 80015dc:	b480      	push	{r7}
 80015de:	b085      	sub	sp, #20
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
 80015e4:	460b      	mov	r3, r1
 80015e6:	70fb      	strb	r3, [r7, #3]
 80015e8:	4613      	mov	r3, r2
 80015ea:	70bb      	strb	r3, [r7, #2]
    // 1. first lets find out the ipr register
    uint8_t iprx = IRQNumber >> 2;
 80015ec:	78fb      	ldrb	r3, [r7, #3]
 80015ee:	109b      	asrs	r3, r3, #2
 80015f0:	73fb      	strb	r3, [r7, #15]
    uint8_t iprx_section = IRQNumber % 4;
 80015f2:	78fb      	ldrb	r3, [r7, #3]
 80015f4:	f003 0303 	and.w	r3, r3, #3
 80015f8:	73bb      	strb	r3, [r7, #14]
    uint8_t shift_amount = (8 * iprx_section) + (8 - NO_PR_BITS_IMPLEMENTED);
 80015fa:	7bbb      	ldrb	r3, [r7, #14]
 80015fc:	00db      	lsls	r3, r3, #3
 80015fe:	b2db      	uxtb	r3, r3
 8001600:	3304      	adds	r3, #4
 8001602:	737b      	strb	r3, [r7, #13]

    *(NVIC_PR_BASE_ADDR + iprx) |= (IRQPriority << shift_amount);
 8001604:	7bfb      	ldrb	r3, [r7, #15]
 8001606:	f103 5360 	add.w	r3, r3, #939524096	; 0x38000000
 800160a:	f503 5364 	add.w	r3, r3, #14592	; 0x3900
 800160e:	009b      	lsls	r3, r3, #2
 8001610:	681a      	ldr	r2, [r3, #0]
 8001612:	78b9      	ldrb	r1, [r7, #2]
 8001614:	7b7b      	ldrb	r3, [r7, #13]
 8001616:	fa01 f303 	lsl.w	r3, r1, r3
 800161a:	4618      	mov	r0, r3
 800161c:	7bfb      	ldrb	r3, [r7, #15]
 800161e:	f103 5360 	add.w	r3, r3, #939524096	; 0x38000000
 8001622:	f503 5364 	add.w	r3, r3, #14592	; 0x3900
 8001626:	009b      	lsls	r3, r3, #2
 8001628:	4619      	mov	r1, r3
 800162a:	ea42 0300 	orr.w	r3, r2, r0
 800162e:	600b      	str	r3, [r1, #0]
}
 8001630:	bf00      	nop
 8001632:	3714      	adds	r7, #20
 8001634:	46bd      	mov	sp, r7
 8001636:	bc80      	pop	{r7}
 8001638:	4770      	bx	lr

0800163a <_ZN11SPI_Handler17SPI_ReceiveDataITEPKhm>:
    }

    return SPIx_.TxState;
}

uint8_t SPI_Handler::SPI_ReceiveDataIT(const uint8_t *pRxBuffer, uint32_t Len) {
 800163a:	b480      	push	{r7}
 800163c:	b085      	sub	sp, #20
 800163e:	af00      	add	r7, sp, #0
 8001640:	60f8      	str	r0, [r7, #12]
 8001642:	60b9      	str	r1, [r7, #8]
 8001644:	607a      	str	r2, [r7, #4]
    if(SPIx_.RxState != SPI_BUSY_IN_RX) {
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	7f5b      	ldrb	r3, [r3, #29]
 800164a:	2b01      	cmp	r3, #1
 800164c:	d010      	beq.n	8001670 <_ZN11SPI_Handler17SPI_ReceiveDataITEPKhm+0x36>
        // 1. Save the Tx buffer address and Len information in some global variables
        SPIx_.pRxBuffer = const_cast<uint8_t *>(pRxBuffer);
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	68ba      	ldr	r2, [r7, #8]
 8001652:	611a      	str	r2, [r3, #16]
        SPIx_.RxLen = Len;
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	687a      	ldr	r2, [r7, #4]
 8001658:	619a      	str	r2, [r3, #24]

        // 2. Mark the SPI state as busy in transmission so that no other code
        // can take over same SPI peripheral until transmission is over
        SPIx_.RxState = SPI_BUSY_IN_RX;
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	2201      	movs	r2, #1
 800165e:	775a      	strb	r2, [r3, #29]

        // 3. Enable TXEIE control bit to get interrupt whenever TXE flag is set in SR
        SPIx_.pSPIx->CR2 |= (1 << SPI_CR2_RXNEIE);
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	685a      	ldr	r2, [r3, #4]
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800166e:	605a      	str	r2, [r3, #4]
    }

    return SPIx_.TxState;
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	7f1b      	ldrb	r3, [r3, #28]
}
 8001674:	4618      	mov	r0, r3
 8001676:	3714      	adds	r7, #20
 8001678:	46bd      	mov	sp, r7
 800167a:	bc80      	pop	{r7}
 800167c:	4770      	bx	lr

0800167e <_ZN11SPI_Handler15SPI_IRQHandlingEv>:

void SPI_Handler::SPI_IRQHandling() {
 800167e:	b580      	push	{r7, lr}
 8001680:	b084      	sub	sp, #16
 8001682:	af00      	add	r7, sp, #0
 8001684:	6078      	str	r0, [r7, #4]
    uint8_t temp1 = 0, temp2 = 0;
 8001686:	2300      	movs	r3, #0
 8001688:	73fb      	strb	r3, [r7, #15]
 800168a:	2300      	movs	r3, #0
 800168c:	73bb      	strb	r3, [r7, #14]
    // First lets check for TXE
    temp1 = SPIx_.pSPIx->SR & (1 << SPI_SR_TXE);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	689b      	ldr	r3, [r3, #8]
 8001694:	b2db      	uxtb	r3, r3
 8001696:	f003 0302 	and.w	r3, r3, #2
 800169a:	73fb      	strb	r3, [r7, #15]
    temp2 = SPIx_.pSPIx->CR2 & (1 << SPI_CR2_TXEIE);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	b2db      	uxtb	r3, r3
 80016a4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80016a8:	73bb      	strb	r3, [r7, #14]
    if(temp1 && temp2) {
 80016aa:	7bfb      	ldrb	r3, [r7, #15]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d005      	beq.n	80016bc <_ZN11SPI_Handler15SPI_IRQHandlingEv+0x3e>
 80016b0:	7bbb      	ldrb	r3, [r7, #14]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d002      	beq.n	80016bc <_ZN11SPI_Handler15SPI_IRQHandlingEv+0x3e>
        // Handle TXE
        spi_txe_interrupt_handle();
 80016b6:	6878      	ldr	r0, [r7, #4]
 80016b8:	f000 f832 	bl	8001720 <_ZN11SPI_Handler24spi_txe_interrupt_handleEv>
    }

    // check for RXNE
    temp1 = SPIx_.pSPIx->SR & (1 << SPI_SR_RXNE);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	689b      	ldr	r3, [r3, #8]
 80016c2:	b2db      	uxtb	r3, r3
 80016c4:	f003 0301 	and.w	r3, r3, #1
 80016c8:	73fb      	strb	r3, [r7, #15]
    temp2 = SPIx_.pSPIx->CR2 & (1 << SPI_CR2_RXNEIE);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	b2db      	uxtb	r3, r3
 80016d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016d6:	73bb      	strb	r3, [r7, #14]
    if(temp1 && temp2) {
 80016d8:	7bfb      	ldrb	r3, [r7, #15]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d005      	beq.n	80016ea <_ZN11SPI_Handler15SPI_IRQHandlingEv+0x6c>
 80016de:	7bbb      	ldrb	r3, [r7, #14]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d002      	beq.n	80016ea <_ZN11SPI_Handler15SPI_IRQHandlingEv+0x6c>
        spi_rxne_interrupt_handle();
 80016e4:	6878      	ldr	r0, [r7, #4]
 80016e6:	f000 f86c 	bl	80017c2 <_ZN11SPI_Handler25spi_rxne_interrupt_handleEv>
    }

    // check for ovr flag
    temp1 = SPIx_.pSPIx->SR & (1 << SPI_SR_OVR);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	689b      	ldr	r3, [r3, #8]
 80016f0:	b2db      	uxtb	r3, r3
 80016f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016f6:	73fb      	strb	r3, [r7, #15]
    temp2 = SPIx_.pSPIx->CR2 & (1 << SPI_CR2_ERRIE);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	b2db      	uxtb	r3, r3
 8001700:	f003 0320 	and.w	r3, r3, #32
 8001704:	73bb      	strb	r3, [r7, #14]
    if(temp1 && temp2) {
 8001706:	7bfb      	ldrb	r3, [r7, #15]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d005      	beq.n	8001718 <_ZN11SPI_Handler15SPI_IRQHandlingEv+0x9a>
 800170c:	7bbb      	ldrb	r3, [r7, #14]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d002      	beq.n	8001718 <_ZN11SPI_Handler15SPI_IRQHandlingEv+0x9a>
        spi_ovr_err_interrupt_handle();
 8001712:	6878      	ldr	r0, [r7, #4]
 8001714:	f000 f8a8 	bl	8001868 <_ZN11SPI_Handler28spi_ovr_err_interrupt_handleEv>
    }
}
 8001718:	bf00      	nop
 800171a:	3710      	adds	r7, #16
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}

08001720 <_ZN11SPI_Handler24spi_txe_interrupt_handleEv>:

void SPI_Handler::spi_txe_interrupt_handle() {
 8001720:	b580      	push	{r7, lr}
 8001722:	b082      	sub	sp, #8
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
	if ((SPIx_.pSPIx->CR1 & SPI_CR1_SPE_MSK) != SPI_CR1_SPE_MSK) {
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001732:	2b40      	cmp	r3, #64	; 0x40
 8001734:	bf14      	ite	ne
 8001736:	2301      	movne	r3, #1
 8001738:	2300      	moveq	r3, #0
 800173a:	b2db      	uxtb	r3, r3
 800173c:	2b00      	cmp	r3, #0
 800173e:	d003      	beq.n	8001748 <_ZN11SPI_Handler24spi_txe_interrupt_handleEv+0x28>
        SPI_PeripheralControl(ENABLE);
 8001740:	2101      	movs	r1, #1
 8001742:	6878      	ldr	r0, [r7, #4]
 8001744:	f7ff fdae 	bl	80012a4 <_ZN11SPI_Handler21SPI_PeripheralControlEh>
    }

    // 2. check the DFF bit in CR1
    if (SPIx_.pSPIx->CR1 & (1 << SPI_CR1_DFF)) {
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001752:	2b00      	cmp	r3, #0
 8001754:	bf14      	ite	ne
 8001756:	2301      	movne	r3, #1
 8001758:	2300      	moveq	r3, #0
 800175a:	b2db      	uxtb	r3, r3
 800175c:	2b00      	cmp	r3, #0
 800175e:	d010      	beq.n	8001782 <_ZN11SPI_Handler24spi_txe_interrupt_handleEv+0x62>
        // 16 BIT DFF
        // 1. load the data into the DR
        SPIx_.pSPIx->DR = *((uint16_t*) SPIx_.pTxBuffer);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	68db      	ldr	r3, [r3, #12]
 8001764:	881a      	ldrh	r2, [r3, #0]
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	60da      	str	r2, [r3, #12]
        SPIx_.TxLen -= 2;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	695b      	ldr	r3, [r3, #20]
 8001770:	1e9a      	subs	r2, r3, #2
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	615a      	str	r2, [r3, #20]
        (uint16_t*) SPIx_.pTxBuffer++;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	68db      	ldr	r3, [r3, #12]
 800177a:	1c5a      	adds	r2, r3, #1
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	60da      	str	r2, [r3, #12]
 8001780:	e00f      	b.n	80017a2 <_ZN11SPI_Handler24spi_txe_interrupt_handleEv+0x82>
    } else {
        SPIx_.pSPIx->DR = *SPIx_.pTxBuffer;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	68db      	ldr	r3, [r3, #12]
 8001786:	781a      	ldrb	r2, [r3, #0]
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	60da      	str	r2, [r3, #12]
        SPIx_.TxLen -= 1;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	695b      	ldr	r3, [r3, #20]
 8001792:	1e5a      	subs	r2, r3, #1
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	615a      	str	r2, [r3, #20]
        SPIx_.pTxBuffer++;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	68db      	ldr	r3, [r3, #12]
 800179c:	1c5a      	adds	r2, r3, #1
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	60da      	str	r2, [r3, #12]
    }

    if(!SPIx_.TxLen) {
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	695b      	ldr	r3, [r3, #20]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d107      	bne.n	80017ba <_ZN11SPI_Handler24spi_txe_interrupt_handleEv+0x9a>
        // TxLen is zero, close the spi transmission and inform the application
        // Tx is over
        SPI_CloseTransmission();
 80017aa:	6878      	ldr	r0, [r7, #4]
 80017ac:	f000 f877 	bl	800189e <_ZN11SPI_Handler21SPI_CloseTransmissionEv>
        SPI_ApplicationEventCallback(&SPIx_, SPI_EVENT_TX_CMPLT);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2101      	movs	r1, #1
 80017b4:	4618      	mov	r0, r3
 80017b6:	f000 f8a6 	bl	8001906 <_Z28SPI_ApplicationEventCallbackP12SPI_Handle_th>
    }
}
 80017ba:	bf00      	nop
 80017bc:	3708      	adds	r7, #8
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}

080017c2 <_ZN11SPI_Handler25spi_rxne_interrupt_handleEv>:

void SPI_Handler::spi_rxne_interrupt_handle() {
 80017c2:	b580      	push	{r7, lr}
 80017c4:	b082      	sub	sp, #8
 80017c6:	af00      	add	r7, sp, #0
 80017c8:	6078      	str	r0, [r7, #4]
	if ((SPIx_.pSPIx->CR1 & SPI_CR1_SPE_MSK) != SPI_CR1_SPE_MSK) {
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017d4:	2b40      	cmp	r3, #64	; 0x40
 80017d6:	bf14      	ite	ne
 80017d8:	2301      	movne	r3, #1
 80017da:	2300      	moveq	r3, #0
 80017dc:	b2db      	uxtb	r3, r3
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d003      	beq.n	80017ea <_ZN11SPI_Handler25spi_rxne_interrupt_handleEv+0x28>
        SPI_PeripheralControl(ENABLE);
 80017e2:	2101      	movs	r1, #1
 80017e4:	6878      	ldr	r0, [r7, #4]
 80017e6:	f7ff fd5d 	bl	80012a4 <_ZN11SPI_Handler21SPI_PeripheralControlEh>
    }


    //2. check the DFF bit in CR1
    if ((SPIx_.pSPIx->CR1 & (1 << SPI_CR1_DFF))) {
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	bf14      	ite	ne
 80017f8:	2301      	movne	r3, #1
 80017fa:	2300      	moveq	r3, #0
 80017fc:	b2db      	uxtb	r3, r3
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d011      	beq.n	8001826 <_ZN11SPI_Handler25spi_rxne_interrupt_handleEv+0x64>
        //16 bit DFF
        //1. load the data from DR to Rxbuffer address
        *((uint16_t*) SPIx_.pRxBuffer) = SPIx_.pSPIx->DR;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	68da      	ldr	r2, [r3, #12]
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	691b      	ldr	r3, [r3, #16]
 800180c:	b292      	uxth	r2, r2
 800180e:	801a      	strh	r2, [r3, #0]
        SPIx_.RxLen -= 2;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	699b      	ldr	r3, [r3, #24]
 8001814:	1e9a      	subs	r2, r3, #2
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	619a      	str	r2, [r3, #24]
        (uint16_t*) SPIx_.pRxBuffer++;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	691b      	ldr	r3, [r3, #16]
 800181e:	1c5a      	adds	r2, r3, #1
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	611a      	str	r2, [r3, #16]
 8001824:	e010      	b.n	8001848 <_ZN11SPI_Handler25spi_rxne_interrupt_handleEv+0x86>
    } else {
        //8 bit DFF
        *(SPIx_.pRxBuffer) = SPIx_.pSPIx->DR;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	68da      	ldr	r2, [r3, #12]
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	691b      	ldr	r3, [r3, #16]
 8001830:	b2d2      	uxtb	r2, r2
 8001832:	701a      	strb	r2, [r3, #0]
        SPIx_.RxLen--;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	699b      	ldr	r3, [r3, #24]
 8001838:	1e5a      	subs	r2, r3, #1
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	619a      	str	r2, [r3, #24]
        SPIx_.pRxBuffer++;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	691b      	ldr	r3, [r3, #16]
 8001842:	1c5a      	adds	r2, r3, #1
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	611a      	str	r2, [r3, #16]
    }

    if(!SPIx_.RxLen) {
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	699b      	ldr	r3, [r3, #24]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d107      	bne.n	8001860 <_ZN11SPI_Handler25spi_rxne_interrupt_handleEv+0x9e>
        // TxLen is zero, close the spi transmission and inform the application
        // Tx is over
        SPI_CloseReception();
 8001850:	6878      	ldr	r0, [r7, #4]
 8001852:	f000 f83e 	bl	80018d2 <_ZN11SPI_Handler18SPI_CloseReceptionEv>
        SPI_ApplicationEventCallback(&SPIx_, SPI_EVENT_RX_CMPLT);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	2102      	movs	r1, #2
 800185a:	4618      	mov	r0, r3
 800185c:	f000 f853 	bl	8001906 <_Z28SPI_ApplicationEventCallbackP12SPI_Handle_th>
    }
}
 8001860:	bf00      	nop
 8001862:	3708      	adds	r7, #8
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}

08001868 <_ZN11SPI_Handler28spi_ovr_err_interrupt_handleEv>:

void SPI_Handler::spi_ovr_err_interrupt_handle() {
 8001868:	b580      	push	{r7, lr}
 800186a:	b084      	sub	sp, #16
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
    uint8_t temp = 0;
 8001870:	2300      	movs	r3, #0
 8001872:	73fb      	strb	r3, [r7, #15]
    // 1. Clear the ovr flag
    if(SPIx_.TxState != SPI_BUSY_IN_TX) {
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	7f1b      	ldrb	r3, [r3, #28]
 8001878:	2b02      	cmp	r3, #2
 800187a:	d007      	beq.n	800188c <_ZN11SPI_Handler28spi_ovr_err_interrupt_handleEv+0x24>
        temp = SPIx_.pSPIx->DR;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	68db      	ldr	r3, [r3, #12]
 8001882:	73fb      	strb	r3, [r7, #15]
        temp = SPIx_.pSPIx->SR;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	689b      	ldr	r3, [r3, #8]
 800188a:	73fb      	strb	r3, [r7, #15]
    }
    // 2. Inform the application
    SPI_ApplicationEventCallback(&SPIx_, SPI_EVENT_OVR_ERR);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2103      	movs	r1, #3
 8001890:	4618      	mov	r0, r3
 8001892:	f000 f838 	bl	8001906 <_Z28SPI_ApplicationEventCallbackP12SPI_Handle_th>
    static_cast<void>(temp);
}
 8001896:	bf00      	nop
 8001898:	3710      	adds	r7, #16
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}

0800189e <_ZN11SPI_Handler21SPI_CloseTransmissionEv>:
    temp = SPIx_.pSPIx->DR;
    temp = SPIx_.pSPIx->SR;
    static_cast<void>(temp);
}

void SPI_Handler::SPI_CloseTransmission() {
 800189e:	b480      	push	{r7}
 80018a0:	b083      	sub	sp, #12
 80018a2:	af00      	add	r7, sp, #0
 80018a4:	6078      	str	r0, [r7, #4]
    SPIx_.pSPIx->CR2 &= ~(1 << SPI_CR2_TXEIE);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	685a      	ldr	r2, [r3, #4]
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80018b4:	605a      	str	r2, [r3, #4]
    SPIx_.pTxBuffer = nullptr;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2200      	movs	r2, #0
 80018ba:	60da      	str	r2, [r3, #12]
    SPIx_.TxLen = 0;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2200      	movs	r2, #0
 80018c0:	615a      	str	r2, [r3, #20]
    SPIx_.TxState = SPI_READY;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	2200      	movs	r2, #0
 80018c6:	771a      	strb	r2, [r3, #28]
}
 80018c8:	bf00      	nop
 80018ca:	370c      	adds	r7, #12
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bc80      	pop	{r7}
 80018d0:	4770      	bx	lr

080018d2 <_ZN11SPI_Handler18SPI_CloseReceptionEv>:

void SPI_Handler::SPI_CloseReception() {
 80018d2:	b480      	push	{r7}
 80018d4:	b083      	sub	sp, #12
 80018d6:	af00      	add	r7, sp, #0
 80018d8:	6078      	str	r0, [r7, #4]
    SPIx_.pSPIx->CR2 &= ~(1 << SPI_CR2_RXNEIE);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	685a      	ldr	r2, [r3, #4]
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80018e8:	605a      	str	r2, [r3, #4]
    SPIx_.pRxBuffer = nullptr;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	2200      	movs	r2, #0
 80018ee:	611a      	str	r2, [r3, #16]
    SPIx_.RxLen = 0;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2200      	movs	r2, #0
 80018f4:	619a      	str	r2, [r3, #24]
    SPIx_.RxState = SPI_READY;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	2200      	movs	r2, #0
 80018fa:	775a      	strb	r2, [r3, #29]
}
 80018fc:	bf00      	nop
 80018fe:	370c      	adds	r7, #12
 8001900:	46bd      	mov	sp, r7
 8001902:	bc80      	pop	{r7}
 8001904:	4770      	bx	lr

08001906 <_Z28SPI_ApplicationEventCallbackP12SPI_Handle_th>:

__weak void SPI_ApplicationEventCallback(SPI_Handle_t *pSPIHandle, uint8_t AppEv) {
 8001906:	b480      	push	{r7}
 8001908:	b083      	sub	sp, #12
 800190a:	af00      	add	r7, sp, #0
 800190c:	6078      	str	r0, [r7, #4]
 800190e:	460b      	mov	r3, r1
 8001910:	70fb      	strb	r3, [r7, #3]
    //This is a weak implementation . the user application may override this function.
}
 8001912:	bf00      	nop
 8001914:	370c      	adds	r7, #12
 8001916:	46bd      	mov	sp, r7
 8001918:	bc80      	pop	{r7}
 800191a:	4770      	bx	lr

0800191c <_ZNSt5tupleIJP12GPIO_HandlerSt14default_deleteIS0_EEEC1IS1_S3_Lb1EEEv>:
      constexpr tuple()
 800191c:	b580      	push	{r7, lr}
 800191e:	b082      	sub	sp, #8
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
      : _Inherited() { }
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	4618      	mov	r0, r3
 8001928:	f000 f860 	bl	80019ec <_ZNSt11_Tuple_implILj0EJP12GPIO_HandlerSt14default_deleteIS0_EEEC1Ev>
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	4618      	mov	r0, r3
 8001930:	3708      	adds	r7, #8
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}

08001936 <_ZNSt15__uniq_ptr_implI12GPIO_HandlerSt14default_deleteIS0_EEC1Ev>:
      __uniq_ptr_impl() = default;
 8001936:	b580      	push	{r7, lr}
 8001938:	b082      	sub	sp, #8
 800193a:	af00      	add	r7, sp, #0
 800193c:	6078      	str	r0, [r7, #4]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	4618      	mov	r0, r3
 8001942:	f7ff ffeb 	bl	800191c <_ZNSt5tupleIJP12GPIO_HandlerSt14default_deleteIS0_EEEC1IS1_S3_Lb1EEEv>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	4618      	mov	r0, r3
 800194a:	3708      	adds	r7, #8
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}

08001950 <_ZNSt10unique_ptrI12GPIO_HandlerSt14default_deleteIS0_EEC1IS2_vEEv>:
	constexpr unique_ptr() noexcept
 8001950:	b580      	push	{r7, lr}
 8001952:	b082      	sub	sp, #8
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
	: _M_t()
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2200      	movs	r2, #0
 800195c:	601a      	str	r2, [r3, #0]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	4618      	mov	r0, r3
 8001962:	f7ff ffe8 	bl	8001936 <_ZNSt15__uniq_ptr_implI12GPIO_HandlerSt14default_deleteIS0_EEC1Ev>
        { }
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	4618      	mov	r0, r3
 800196a:	3708      	adds	r7, #8
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}

08001970 <_ZNSt10unique_ptrI12GPIO_HandlerSt14default_deleteIS0_EED1Ev>:
      ~unique_ptr() noexcept
 8001970:	b580      	push	{r7, lr}
 8001972:	b084      	sub	sp, #16
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	4618      	mov	r0, r3
 800197c:	f000 f846 	bl	8001a0c <_ZNSt15__uniq_ptr_implI12GPIO_HandlerSt14default_deleteIS0_EE6_M_ptrEv>
 8001980:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d009      	beq.n	800199e <_ZNSt10unique_ptrI12GPIO_HandlerSt14default_deleteIS0_EED1Ev+0x2e>
	  get_deleter()(__ptr);
 800198a:	6878      	ldr	r0, [r7, #4]
 800198c:	f000 f84b 	bl	8001a26 <_ZNSt10unique_ptrI12GPIO_HandlerSt14default_deleteIS0_EE11get_deleterEv>
 8001990:	4602      	mov	r2, r0
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4619      	mov	r1, r3
 8001998:	4610      	mov	r0, r2
 800199a:	f000 f851 	bl	8001a40 <_ZNKSt14default_deleteI12GPIO_HandlerEclEPS0_>
	__ptr = pointer();
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	2200      	movs	r2, #0
 80019a2:	601a      	str	r2, [r3, #0]
      }
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	4618      	mov	r0, r3
 80019a8:	3710      	adds	r7, #16
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}

080019ae <_ZNSt10unique_ptrI12GPIO_HandlerSt14default_deleteIS0_EE5resetEPS0_>:
      reset(pointer __p = pointer()) noexcept
 80019ae:	b580      	push	{r7, lr}
 80019b0:	b082      	sub	sp, #8
 80019b2:	af00      	add	r7, sp, #0
 80019b4:	6078      	str	r0, [r7, #4]
 80019b6:	6039      	str	r1, [r7, #0]
	swap(_M_t._M_ptr(), __p);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	4618      	mov	r0, r3
 80019bc:	f000 f826 	bl	8001a0c <_ZNSt15__uniq_ptr_implI12GPIO_HandlerSt14default_deleteIS0_EE6_M_ptrEv>
 80019c0:	4602      	mov	r2, r0
 80019c2:	463b      	mov	r3, r7
 80019c4:	4619      	mov	r1, r3
 80019c6:	4610      	mov	r0, r2
 80019c8:	f000 f857 	bl	8001a7a <_ZSt4swapIP12GPIO_HandlerENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS6_ESt18is_move_assignableIS6_EEE5valueEvE4typeERS6_SG_>
	if (__p != pointer())
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d008      	beq.n	80019e4 <_ZNSt10unique_ptrI12GPIO_HandlerSt14default_deleteIS0_EE5resetEPS0_+0x36>
	  get_deleter()(__p);
 80019d2:	6878      	ldr	r0, [r7, #4]
 80019d4:	f000 f827 	bl	8001a26 <_ZNSt10unique_ptrI12GPIO_HandlerSt14default_deleteIS0_EE11get_deleterEv>
 80019d8:	4602      	mov	r2, r0
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	4619      	mov	r1, r3
 80019de:	4610      	mov	r0, r2
 80019e0:	f000 f82e 	bl	8001a40 <_ZNKSt14default_deleteI12GPIO_HandlerEclEPS0_>
      }
 80019e4:	bf00      	nop
 80019e6:	3708      	adds	r7, #8
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}

080019ec <_ZNSt11_Tuple_implILj0EJP12GPIO_HandlerSt14default_deleteIS0_EEEC1Ev>:
      constexpr _Tuple_impl()
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b082      	sub	sp, #8
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 80019f4:	6878      	ldr	r0, [r7, #4]
 80019f6:	f000 f85f 	bl	8001ab8 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI12GPIO_HandlerEEEC1Ev>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	4618      	mov	r0, r3
 80019fe:	f000 f867 	bl	8001ad0 <_ZNSt10_Head_baseILj0EP12GPIO_HandlerLb0EEC1Ev>
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	4618      	mov	r0, r3
 8001a06:	3708      	adds	r7, #8
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}

08001a0c <_ZNSt15__uniq_ptr_implI12GPIO_HandlerSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b082      	sub	sp, #8
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	4618      	mov	r0, r3
 8001a18:	f000 f867 	bl	8001aea <_ZSt3getILj0EJP12GPIO_HandlerSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	4618      	mov	r0, r3
 8001a20:	3708      	adds	r7, #8
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}

08001a26 <_ZNSt10unique_ptrI12GPIO_HandlerSt14default_deleteIS0_EE11get_deleterEv>:
      get_deleter() noexcept
 8001a26:	b580      	push	{r7, lr}
 8001a28:	b082      	sub	sp, #8
 8001a2a:	af00      	add	r7, sp, #0
 8001a2c:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	4618      	mov	r0, r3
 8001a32:	f000 f867 	bl	8001b04 <_ZNSt15__uniq_ptr_implI12GPIO_HandlerSt14default_deleteIS0_EE10_M_deleterEv>
 8001a36:	4603      	mov	r3, r0
 8001a38:	4618      	mov	r0, r3
 8001a3a:	3708      	adds	r7, #8
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}

08001a40 <_ZNKSt14default_deleteI12GPIO_HandlerEclEPS0_>:
      operator()(_Tp* __ptr) const
 8001a40:	b590      	push	{r4, r7, lr}
 8001a42:	b083      	sub	sp, #12
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
 8001a48:	6039      	str	r1, [r7, #0]
	delete __ptr;
 8001a4a:	683c      	ldr	r4, [r7, #0]
 8001a4c:	2c00      	cmp	r4, #0
 8001a4e:	d006      	beq.n	8001a5e <_ZNKSt14default_deleteI12GPIO_HandlerEclEPS0_+0x1e>
 8001a50:	4620      	mov	r0, r4
 8001a52:	f7fe fef4 	bl	800083e <_ZN12GPIO_HandlerD1Ev>
 8001a56:	210c      	movs	r1, #12
 8001a58:	4620      	mov	r0, r4
 8001a5a:	f000 f8bb 	bl	8001bd4 <_ZdlPvj>
      }
 8001a5e:	bf00      	nop
 8001a60:	370c      	adds	r7, #12
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd90      	pop	{r4, r7, pc}

08001a66 <_ZSt4moveIRP12GPIO_HandlerEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 8001a66:	b480      	push	{r7}
 8001a68:	b083      	sub	sp, #12
 8001a6a:	af00      	add	r7, sp, #0
 8001a6c:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	4618      	mov	r0, r3
 8001a72:	370c      	adds	r7, #12
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bc80      	pop	{r7}
 8001a78:	4770      	bx	lr

08001a7a <_ZSt4swapIP12GPIO_HandlerENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS6_ESt18is_move_assignableIS6_EEE5valueEvE4typeERS6_SG_>:
    swap(_Tp& __a, _Tp& __b)
 8001a7a:	b580      	push	{r7, lr}
 8001a7c:	b084      	sub	sp, #16
 8001a7e:	af00      	add	r7, sp, #0
 8001a80:	6078      	str	r0, [r7, #4]
 8001a82:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8001a84:	6878      	ldr	r0, [r7, #4]
 8001a86:	f7ff ffee 	bl	8001a66 <_ZSt4moveIRP12GPIO_HandlerEONSt16remove_referenceIT_E4typeEOS4_>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 8001a90:	6838      	ldr	r0, [r7, #0]
 8001a92:	f7ff ffe8 	bl	8001a66 <_ZSt4moveIRP12GPIO_HandlerEONSt16remove_referenceIT_E4typeEOS4_>
 8001a96:	4603      	mov	r3, r0
 8001a98:	681a      	ldr	r2, [r3, #0]
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8001a9e:	f107 030c 	add.w	r3, r7, #12
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f7ff ffdf 	bl	8001a66 <_ZSt4moveIRP12GPIO_HandlerEONSt16remove_referenceIT_E4typeEOS4_>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	681a      	ldr	r2, [r3, #0]
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	601a      	str	r2, [r3, #0]
    }
 8001ab0:	bf00      	nop
 8001ab2:	3710      	adds	r7, #16
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}

08001ab8 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI12GPIO_HandlerEEEC1Ev>:
      constexpr _Tuple_impl()
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b082      	sub	sp, #8
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
      : _Base() { }
 8001ac0:	6878      	ldr	r0, [r7, #4]
 8001ac2:	f000 f82c 	bl	8001b1e <_ZNSt10_Head_baseILj1ESt14default_deleteI12GPIO_HandlerELb1EEC1Ev>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	4618      	mov	r0, r3
 8001aca:	3708      	adds	r7, #8
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}

08001ad0 <_ZNSt10_Head_baseILj0EP12GPIO_HandlerLb0EEC1Ev>:
      constexpr _Head_base()
 8001ad0:	b480      	push	{r7}
 8001ad2:	b083      	sub	sp, #12
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2200      	movs	r2, #0
 8001adc:	601a      	str	r2, [r3, #0]
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	370c      	adds	r7, #12
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bc80      	pop	{r7}
 8001ae8:	4770      	bx	lr

08001aea <_ZSt3getILj0EJP12GPIO_HandlerSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 8001aea:	b580      	push	{r7, lr}
 8001aec:	b082      	sub	sp, #8
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	4618      	mov	r0, r3
 8001af6:	f000 f81c 	bl	8001b32 <_ZSt12__get_helperILj0EP12GPIO_HandlerJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8001afa:	4603      	mov	r3, r0
 8001afc:	4618      	mov	r0, r3
 8001afe:	3708      	adds	r7, #8
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}

08001b04 <_ZNSt15__uniq_ptr_implI12GPIO_HandlerSt14default_deleteIS0_EE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b082      	sub	sp, #8
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f000 f81b 	bl	8001b4a <_ZSt3getILj1EJP12GPIO_HandlerSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8001b14:	4603      	mov	r3, r0
 8001b16:	4618      	mov	r0, r3
 8001b18:	3708      	adds	r7, #8
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}

08001b1e <_ZNSt10_Head_baseILj1ESt14default_deleteI12GPIO_HandlerELb1EEC1Ev>:
      constexpr _Head_base()
 8001b1e:	b480      	push	{r7}
 8001b20:	b083      	sub	sp, #12
 8001b22:	af00      	add	r7, sp, #0
 8001b24:	6078      	str	r0, [r7, #4]
      : _Head() { }
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	4618      	mov	r0, r3
 8001b2a:	370c      	adds	r7, #12
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bc80      	pop	{r7}
 8001b30:	4770      	bx	lr

08001b32 <_ZSt12__get_helperILj0EP12GPIO_HandlerJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8001b32:	b580      	push	{r7, lr}
 8001b34:	b082      	sub	sp, #8
 8001b36:	af00      	add	r7, sp, #0
 8001b38:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8001b3a:	6878      	ldr	r0, [r7, #4]
 8001b3c:	f000 f811 	bl	8001b62 <_ZNSt11_Tuple_implILj0EJP12GPIO_HandlerSt14default_deleteIS0_EEE7_M_headERS4_>
 8001b40:	4603      	mov	r3, r0
 8001b42:	4618      	mov	r0, r3
 8001b44:	3708      	adds	r7, #8
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}

08001b4a <_ZSt3getILj1EJP12GPIO_HandlerSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 8001b4a:	b580      	push	{r7, lr}
 8001b4c:	b082      	sub	sp, #8
 8001b4e:	af00      	add	r7, sp, #0
 8001b50:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8001b52:	6878      	ldr	r0, [r7, #4]
 8001b54:	f000 f812 	bl	8001b7c <_ZSt12__get_helperILj1ESt14default_deleteI12GPIO_HandlerEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	3708      	adds	r7, #8
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}

08001b62 <_ZNSt11_Tuple_implILj0EJP12GPIO_HandlerSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8001b62:	b580      	push	{r7, lr}
 8001b64:	b082      	sub	sp, #8
 8001b66:	af00      	add	r7, sp, #0
 8001b68:	6078      	str	r0, [r7, #4]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f000 f811 	bl	8001b94 <_ZNSt10_Head_baseILj0EP12GPIO_HandlerLb0EE7_M_headERS2_>
 8001b72:	4603      	mov	r3, r0
 8001b74:	4618      	mov	r0, r3
 8001b76:	3708      	adds	r7, #8
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}

08001b7c <_ZSt12__get_helperILj1ESt14default_deleteI12GPIO_HandlerEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b082      	sub	sp, #8
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8001b84:	6878      	ldr	r0, [r7, #4]
 8001b86:	f000 f80f 	bl	8001ba8 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI12GPIO_HandlerEEE7_M_headERS3_>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	3708      	adds	r7, #8
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}

08001b94 <_ZNSt10_Head_baseILj0EP12GPIO_HandlerLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8001b94:	b480      	push	{r7}
 8001b96:	b083      	sub	sp, #12
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	370c      	adds	r7, #12
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bc80      	pop	{r7}
 8001ba6:	4770      	bx	lr

08001ba8 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI12GPIO_HandlerEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b082      	sub	sp, #8
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
 8001bb0:	6878      	ldr	r0, [r7, #4]
 8001bb2:	f000 f805 	bl	8001bc0 <_ZNSt10_Head_baseILj1ESt14default_deleteI12GPIO_HandlerELb1EE7_M_headERS3_>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	4618      	mov	r0, r3
 8001bba:	3708      	adds	r7, #8
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}

08001bc0 <_ZNSt10_Head_baseILj1ESt14default_deleteI12GPIO_HandlerELb1EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b; }
 8001bc0:	b480      	push	{r7}
 8001bc2:	b083      	sub	sp, #12
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	4618      	mov	r0, r3
 8001bcc:	370c      	adds	r7, #12
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bc80      	pop	{r7}
 8001bd2:	4770      	bx	lr

08001bd4 <_ZdlPvj>:
 8001bd4:	f000 b811 	b.w	8001bfa <_ZdlPv>

08001bd8 <_Znwj>:
 8001bd8:	b510      	push	{r4, lr}
 8001bda:	2800      	cmp	r0, #0
 8001bdc:	bf14      	ite	ne
 8001bde:	4604      	movne	r4, r0
 8001be0:	2401      	moveq	r4, #1
 8001be2:	4620      	mov	r0, r4
 8001be4:	f000 f846 	bl	8001c74 <malloc>
 8001be8:	b930      	cbnz	r0, 8001bf8 <_Znwj+0x20>
 8001bea:	f000 f809 	bl	8001c00 <_ZSt15get_new_handlerv>
 8001bee:	b908      	cbnz	r0, 8001bf4 <_Znwj+0x1c>
 8001bf0:	f000 f80e 	bl	8001c10 <abort>
 8001bf4:	4780      	blx	r0
 8001bf6:	e7f4      	b.n	8001be2 <_Znwj+0xa>
 8001bf8:	bd10      	pop	{r4, pc}

08001bfa <_ZdlPv>:
 8001bfa:	f000 b843 	b.w	8001c84 <free>
	...

08001c00 <_ZSt15get_new_handlerv>:
 8001c00:	4b02      	ldr	r3, [pc, #8]	; (8001c0c <_ZSt15get_new_handlerv+0xc>)
 8001c02:	6818      	ldr	r0, [r3, #0]
 8001c04:	f3bf 8f5b 	dmb	ish
 8001c08:	4770      	bx	lr
 8001c0a:	bf00      	nop
 8001c0c:	2000008c 	.word	0x2000008c

08001c10 <abort>:
 8001c10:	b508      	push	{r3, lr}
 8001c12:	2006      	movs	r0, #6
 8001c14:	f000 f926 	bl	8001e64 <raise>
 8001c18:	2001      	movs	r0, #1
 8001c1a:	f7fe fcfe 	bl	800061a <_exit>
	...

08001c20 <__errno>:
 8001c20:	4b01      	ldr	r3, [pc, #4]	; (8001c28 <__errno+0x8>)
 8001c22:	6818      	ldr	r0, [r3, #0]
 8001c24:	4770      	bx	lr
 8001c26:	bf00      	nop
 8001c28:	20000000 	.word	0x20000000

08001c2c <__libc_init_array>:
 8001c2c:	b570      	push	{r4, r5, r6, lr}
 8001c2e:	4e0d      	ldr	r6, [pc, #52]	; (8001c64 <__libc_init_array+0x38>)
 8001c30:	4c0d      	ldr	r4, [pc, #52]	; (8001c68 <__libc_init_array+0x3c>)
 8001c32:	1ba4      	subs	r4, r4, r6
 8001c34:	10a4      	asrs	r4, r4, #2
 8001c36:	2500      	movs	r5, #0
 8001c38:	42a5      	cmp	r5, r4
 8001c3a:	d109      	bne.n	8001c50 <__libc_init_array+0x24>
 8001c3c:	4e0b      	ldr	r6, [pc, #44]	; (8001c6c <__libc_init_array+0x40>)
 8001c3e:	4c0c      	ldr	r4, [pc, #48]	; (8001c70 <__libc_init_array+0x44>)
 8001c40:	f000 f92e 	bl	8001ea0 <_init>
 8001c44:	1ba4      	subs	r4, r4, r6
 8001c46:	10a4      	asrs	r4, r4, #2
 8001c48:	2500      	movs	r5, #0
 8001c4a:	42a5      	cmp	r5, r4
 8001c4c:	d105      	bne.n	8001c5a <__libc_init_array+0x2e>
 8001c4e:	bd70      	pop	{r4, r5, r6, pc}
 8001c50:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001c54:	4798      	blx	r3
 8001c56:	3501      	adds	r5, #1
 8001c58:	e7ee      	b.n	8001c38 <__libc_init_array+0xc>
 8001c5a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001c5e:	4798      	blx	r3
 8001c60:	3501      	adds	r5, #1
 8001c62:	e7f2      	b.n	8001c4a <__libc_init_array+0x1e>
 8001c64:	08001eb8 	.word	0x08001eb8
 8001c68:	08001eb8 	.word	0x08001eb8
 8001c6c:	08001eb8 	.word	0x08001eb8
 8001c70:	08001ec0 	.word	0x08001ec0

08001c74 <malloc>:
 8001c74:	4b02      	ldr	r3, [pc, #8]	; (8001c80 <malloc+0xc>)
 8001c76:	4601      	mov	r1, r0
 8001c78:	6818      	ldr	r0, [r3, #0]
 8001c7a:	f000 b861 	b.w	8001d40 <_malloc_r>
 8001c7e:	bf00      	nop
 8001c80:	20000000 	.word	0x20000000

08001c84 <free>:
 8001c84:	4b02      	ldr	r3, [pc, #8]	; (8001c90 <free+0xc>)
 8001c86:	4601      	mov	r1, r0
 8001c88:	6818      	ldr	r0, [r3, #0]
 8001c8a:	f000 b80b 	b.w	8001ca4 <_free_r>
 8001c8e:	bf00      	nop
 8001c90:	20000000 	.word	0x20000000

08001c94 <memset>:
 8001c94:	4402      	add	r2, r0
 8001c96:	4603      	mov	r3, r0
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	d100      	bne.n	8001c9e <memset+0xa>
 8001c9c:	4770      	bx	lr
 8001c9e:	f803 1b01 	strb.w	r1, [r3], #1
 8001ca2:	e7f9      	b.n	8001c98 <memset+0x4>

08001ca4 <_free_r>:
 8001ca4:	b538      	push	{r3, r4, r5, lr}
 8001ca6:	4605      	mov	r5, r0
 8001ca8:	2900      	cmp	r1, #0
 8001caa:	d045      	beq.n	8001d38 <_free_r+0x94>
 8001cac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001cb0:	1f0c      	subs	r4, r1, #4
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	bfb8      	it	lt
 8001cb6:	18e4      	addlt	r4, r4, r3
 8001cb8:	f000 f8f0 	bl	8001e9c <__malloc_lock>
 8001cbc:	4a1f      	ldr	r2, [pc, #124]	; (8001d3c <_free_r+0x98>)
 8001cbe:	6813      	ldr	r3, [r2, #0]
 8001cc0:	4610      	mov	r0, r2
 8001cc2:	b933      	cbnz	r3, 8001cd2 <_free_r+0x2e>
 8001cc4:	6063      	str	r3, [r4, #4]
 8001cc6:	6014      	str	r4, [r2, #0]
 8001cc8:	4628      	mov	r0, r5
 8001cca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001cce:	f000 b8e6 	b.w	8001e9e <__malloc_unlock>
 8001cd2:	42a3      	cmp	r3, r4
 8001cd4:	d90c      	bls.n	8001cf0 <_free_r+0x4c>
 8001cd6:	6821      	ldr	r1, [r4, #0]
 8001cd8:	1862      	adds	r2, r4, r1
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	bf04      	itt	eq
 8001cde:	681a      	ldreq	r2, [r3, #0]
 8001ce0:	685b      	ldreq	r3, [r3, #4]
 8001ce2:	6063      	str	r3, [r4, #4]
 8001ce4:	bf04      	itt	eq
 8001ce6:	1852      	addeq	r2, r2, r1
 8001ce8:	6022      	streq	r2, [r4, #0]
 8001cea:	6004      	str	r4, [r0, #0]
 8001cec:	e7ec      	b.n	8001cc8 <_free_r+0x24>
 8001cee:	4613      	mov	r3, r2
 8001cf0:	685a      	ldr	r2, [r3, #4]
 8001cf2:	b10a      	cbz	r2, 8001cf8 <_free_r+0x54>
 8001cf4:	42a2      	cmp	r2, r4
 8001cf6:	d9fa      	bls.n	8001cee <_free_r+0x4a>
 8001cf8:	6819      	ldr	r1, [r3, #0]
 8001cfa:	1858      	adds	r0, r3, r1
 8001cfc:	42a0      	cmp	r0, r4
 8001cfe:	d10b      	bne.n	8001d18 <_free_r+0x74>
 8001d00:	6820      	ldr	r0, [r4, #0]
 8001d02:	4401      	add	r1, r0
 8001d04:	1858      	adds	r0, r3, r1
 8001d06:	4282      	cmp	r2, r0
 8001d08:	6019      	str	r1, [r3, #0]
 8001d0a:	d1dd      	bne.n	8001cc8 <_free_r+0x24>
 8001d0c:	6810      	ldr	r0, [r2, #0]
 8001d0e:	6852      	ldr	r2, [r2, #4]
 8001d10:	605a      	str	r2, [r3, #4]
 8001d12:	4401      	add	r1, r0
 8001d14:	6019      	str	r1, [r3, #0]
 8001d16:	e7d7      	b.n	8001cc8 <_free_r+0x24>
 8001d18:	d902      	bls.n	8001d20 <_free_r+0x7c>
 8001d1a:	230c      	movs	r3, #12
 8001d1c:	602b      	str	r3, [r5, #0]
 8001d1e:	e7d3      	b.n	8001cc8 <_free_r+0x24>
 8001d20:	6820      	ldr	r0, [r4, #0]
 8001d22:	1821      	adds	r1, r4, r0
 8001d24:	428a      	cmp	r2, r1
 8001d26:	bf04      	itt	eq
 8001d28:	6811      	ldreq	r1, [r2, #0]
 8001d2a:	6852      	ldreq	r2, [r2, #4]
 8001d2c:	6062      	str	r2, [r4, #4]
 8001d2e:	bf04      	itt	eq
 8001d30:	1809      	addeq	r1, r1, r0
 8001d32:	6021      	streq	r1, [r4, #0]
 8001d34:	605c      	str	r4, [r3, #4]
 8001d36:	e7c7      	b.n	8001cc8 <_free_r+0x24>
 8001d38:	bd38      	pop	{r3, r4, r5, pc}
 8001d3a:	bf00      	nop
 8001d3c:	20000090 	.word	0x20000090

08001d40 <_malloc_r>:
 8001d40:	b570      	push	{r4, r5, r6, lr}
 8001d42:	1ccd      	adds	r5, r1, #3
 8001d44:	f025 0503 	bic.w	r5, r5, #3
 8001d48:	3508      	adds	r5, #8
 8001d4a:	2d0c      	cmp	r5, #12
 8001d4c:	bf38      	it	cc
 8001d4e:	250c      	movcc	r5, #12
 8001d50:	2d00      	cmp	r5, #0
 8001d52:	4606      	mov	r6, r0
 8001d54:	db01      	blt.n	8001d5a <_malloc_r+0x1a>
 8001d56:	42a9      	cmp	r1, r5
 8001d58:	d903      	bls.n	8001d62 <_malloc_r+0x22>
 8001d5a:	230c      	movs	r3, #12
 8001d5c:	6033      	str	r3, [r6, #0]
 8001d5e:	2000      	movs	r0, #0
 8001d60:	bd70      	pop	{r4, r5, r6, pc}
 8001d62:	f000 f89b 	bl	8001e9c <__malloc_lock>
 8001d66:	4a21      	ldr	r2, [pc, #132]	; (8001dec <_malloc_r+0xac>)
 8001d68:	6814      	ldr	r4, [r2, #0]
 8001d6a:	4621      	mov	r1, r4
 8001d6c:	b991      	cbnz	r1, 8001d94 <_malloc_r+0x54>
 8001d6e:	4c20      	ldr	r4, [pc, #128]	; (8001df0 <_malloc_r+0xb0>)
 8001d70:	6823      	ldr	r3, [r4, #0]
 8001d72:	b91b      	cbnz	r3, 8001d7c <_malloc_r+0x3c>
 8001d74:	4630      	mov	r0, r6
 8001d76:	f000 f83d 	bl	8001df4 <_sbrk_r>
 8001d7a:	6020      	str	r0, [r4, #0]
 8001d7c:	4629      	mov	r1, r5
 8001d7e:	4630      	mov	r0, r6
 8001d80:	f000 f838 	bl	8001df4 <_sbrk_r>
 8001d84:	1c43      	adds	r3, r0, #1
 8001d86:	d124      	bne.n	8001dd2 <_malloc_r+0x92>
 8001d88:	230c      	movs	r3, #12
 8001d8a:	6033      	str	r3, [r6, #0]
 8001d8c:	4630      	mov	r0, r6
 8001d8e:	f000 f886 	bl	8001e9e <__malloc_unlock>
 8001d92:	e7e4      	b.n	8001d5e <_malloc_r+0x1e>
 8001d94:	680b      	ldr	r3, [r1, #0]
 8001d96:	1b5b      	subs	r3, r3, r5
 8001d98:	d418      	bmi.n	8001dcc <_malloc_r+0x8c>
 8001d9a:	2b0b      	cmp	r3, #11
 8001d9c:	d90f      	bls.n	8001dbe <_malloc_r+0x7e>
 8001d9e:	600b      	str	r3, [r1, #0]
 8001da0:	50cd      	str	r5, [r1, r3]
 8001da2:	18cc      	adds	r4, r1, r3
 8001da4:	4630      	mov	r0, r6
 8001da6:	f000 f87a 	bl	8001e9e <__malloc_unlock>
 8001daa:	f104 000b 	add.w	r0, r4, #11
 8001dae:	1d23      	adds	r3, r4, #4
 8001db0:	f020 0007 	bic.w	r0, r0, #7
 8001db4:	1ac3      	subs	r3, r0, r3
 8001db6:	d0d3      	beq.n	8001d60 <_malloc_r+0x20>
 8001db8:	425a      	negs	r2, r3
 8001dba:	50e2      	str	r2, [r4, r3]
 8001dbc:	e7d0      	b.n	8001d60 <_malloc_r+0x20>
 8001dbe:	428c      	cmp	r4, r1
 8001dc0:	684b      	ldr	r3, [r1, #4]
 8001dc2:	bf16      	itet	ne
 8001dc4:	6063      	strne	r3, [r4, #4]
 8001dc6:	6013      	streq	r3, [r2, #0]
 8001dc8:	460c      	movne	r4, r1
 8001dca:	e7eb      	b.n	8001da4 <_malloc_r+0x64>
 8001dcc:	460c      	mov	r4, r1
 8001dce:	6849      	ldr	r1, [r1, #4]
 8001dd0:	e7cc      	b.n	8001d6c <_malloc_r+0x2c>
 8001dd2:	1cc4      	adds	r4, r0, #3
 8001dd4:	f024 0403 	bic.w	r4, r4, #3
 8001dd8:	42a0      	cmp	r0, r4
 8001dda:	d005      	beq.n	8001de8 <_malloc_r+0xa8>
 8001ddc:	1a21      	subs	r1, r4, r0
 8001dde:	4630      	mov	r0, r6
 8001de0:	f000 f808 	bl	8001df4 <_sbrk_r>
 8001de4:	3001      	adds	r0, #1
 8001de6:	d0cf      	beq.n	8001d88 <_malloc_r+0x48>
 8001de8:	6025      	str	r5, [r4, #0]
 8001dea:	e7db      	b.n	8001da4 <_malloc_r+0x64>
 8001dec:	20000090 	.word	0x20000090
 8001df0:	20000094 	.word	0x20000094

08001df4 <_sbrk_r>:
 8001df4:	b538      	push	{r3, r4, r5, lr}
 8001df6:	4c06      	ldr	r4, [pc, #24]	; (8001e10 <_sbrk_r+0x1c>)
 8001df8:	2300      	movs	r3, #0
 8001dfa:	4605      	mov	r5, r0
 8001dfc:	4608      	mov	r0, r1
 8001dfe:	6023      	str	r3, [r4, #0]
 8001e00:	f7fe fc16 	bl	8000630 <_sbrk>
 8001e04:	1c43      	adds	r3, r0, #1
 8001e06:	d102      	bne.n	8001e0e <_sbrk_r+0x1a>
 8001e08:	6823      	ldr	r3, [r4, #0]
 8001e0a:	b103      	cbz	r3, 8001e0e <_sbrk_r+0x1a>
 8001e0c:	602b      	str	r3, [r5, #0]
 8001e0e:	bd38      	pop	{r3, r4, r5, pc}
 8001e10:	20000098 	.word	0x20000098

08001e14 <_raise_r>:
 8001e14:	291f      	cmp	r1, #31
 8001e16:	b538      	push	{r3, r4, r5, lr}
 8001e18:	4604      	mov	r4, r0
 8001e1a:	460d      	mov	r5, r1
 8001e1c:	d904      	bls.n	8001e28 <_raise_r+0x14>
 8001e1e:	2316      	movs	r3, #22
 8001e20:	6003      	str	r3, [r0, #0]
 8001e22:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001e26:	bd38      	pop	{r3, r4, r5, pc}
 8001e28:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8001e2a:	b112      	cbz	r2, 8001e32 <_raise_r+0x1e>
 8001e2c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8001e30:	b94b      	cbnz	r3, 8001e46 <_raise_r+0x32>
 8001e32:	4620      	mov	r0, r4
 8001e34:	f000 f830 	bl	8001e98 <_getpid_r>
 8001e38:	462a      	mov	r2, r5
 8001e3a:	4601      	mov	r1, r0
 8001e3c:	4620      	mov	r0, r4
 8001e3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001e42:	f000 b817 	b.w	8001e74 <_kill_r>
 8001e46:	2b01      	cmp	r3, #1
 8001e48:	d00a      	beq.n	8001e60 <_raise_r+0x4c>
 8001e4a:	1c59      	adds	r1, r3, #1
 8001e4c:	d103      	bne.n	8001e56 <_raise_r+0x42>
 8001e4e:	2316      	movs	r3, #22
 8001e50:	6003      	str	r3, [r0, #0]
 8001e52:	2001      	movs	r0, #1
 8001e54:	e7e7      	b.n	8001e26 <_raise_r+0x12>
 8001e56:	2400      	movs	r4, #0
 8001e58:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8001e5c:	4628      	mov	r0, r5
 8001e5e:	4798      	blx	r3
 8001e60:	2000      	movs	r0, #0
 8001e62:	e7e0      	b.n	8001e26 <_raise_r+0x12>

08001e64 <raise>:
 8001e64:	4b02      	ldr	r3, [pc, #8]	; (8001e70 <raise+0xc>)
 8001e66:	4601      	mov	r1, r0
 8001e68:	6818      	ldr	r0, [r3, #0]
 8001e6a:	f7ff bfd3 	b.w	8001e14 <_raise_r>
 8001e6e:	bf00      	nop
 8001e70:	20000000 	.word	0x20000000

08001e74 <_kill_r>:
 8001e74:	b538      	push	{r3, r4, r5, lr}
 8001e76:	4c07      	ldr	r4, [pc, #28]	; (8001e94 <_kill_r+0x20>)
 8001e78:	2300      	movs	r3, #0
 8001e7a:	4605      	mov	r5, r0
 8001e7c:	4608      	mov	r0, r1
 8001e7e:	4611      	mov	r1, r2
 8001e80:	6023      	str	r3, [r4, #0]
 8001e82:	f7fe fbba 	bl	80005fa <_kill>
 8001e86:	1c43      	adds	r3, r0, #1
 8001e88:	d102      	bne.n	8001e90 <_kill_r+0x1c>
 8001e8a:	6823      	ldr	r3, [r4, #0]
 8001e8c:	b103      	cbz	r3, 8001e90 <_kill_r+0x1c>
 8001e8e:	602b      	str	r3, [r5, #0]
 8001e90:	bd38      	pop	{r3, r4, r5, pc}
 8001e92:	bf00      	nop
 8001e94:	20000098 	.word	0x20000098

08001e98 <_getpid_r>:
 8001e98:	f7fe bba8 	b.w	80005ec <_getpid>

08001e9c <__malloc_lock>:
 8001e9c:	4770      	bx	lr

08001e9e <__malloc_unlock>:
 8001e9e:	4770      	bx	lr

08001ea0 <_init>:
 8001ea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ea2:	bf00      	nop
 8001ea4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001ea6:	bc08      	pop	{r3}
 8001ea8:	469e      	mov	lr, r3
 8001eaa:	4770      	bx	lr

08001eac <_fini>:
 8001eac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001eae:	bf00      	nop
 8001eb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001eb2:	bc08      	pop	{r3}
 8001eb4:	469e      	mov	lr, r3
 8001eb6:	4770      	bx	lr
