
004_SPI_driver_CPP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000182c  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080019f0  080019f0  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080019f0  080019f0  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  080019f0  080019f0  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  080019f0  080019f0  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080019f0  080019f0  000119f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080019f4  080019f4  000119f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  080019f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000030  20000064  08001a5c  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000094  08001a5c  00020094  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d827  00000000  00000000  0002008e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001a25  00000000  00000000  0002d8b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000003c0  00000000  00000000  0002f2e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000368  00000000  00000000  0002f6a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00006099  00000000  00000000  0002fa08  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00004820  00000000  00000000  00035aa1  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00013297  00000000  00000000  0003a2c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0004d558  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000128c  00000000  00000000  0004d5d4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000064 	.word	0x20000064
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080019d8 	.word	0x080019d8

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000068 	.word	0x20000068
 8000200:	080019d8 	.word	0x080019d8

08000204 <main>:
//PA4 - slave select
// Alternate function 5


int main(void)
{
 8000204:	b590      	push	{r4, r7, lr}
 8000206:	b08b      	sub	sp, #44	; 0x2c
 8000208:	af06      	add	r7, sp, #24
														SPI_BUS_CONFIG_FD,
														SPI_SCLK_SPEED_DIV32,
														SPI_DFF_8BITS,
														SPI_CPOL_LOW,
														SPI_CPHA_LOW,
														SPI_SSM_DI));
 800020a:	2030      	movs	r0, #48	; 0x30
 800020c:	f001 fa80 	bl	8001710 <_Znwj>
 8000210:	4603      	mov	r3, r0
 8000212:	461c      	mov	r4, r3
 8000214:	2300      	movs	r3, #0
 8000216:	9304      	str	r3, [sp, #16]
 8000218:	2300      	movs	r3, #0
 800021a:	9303      	str	r3, [sp, #12]
 800021c:	2300      	movs	r3, #0
 800021e:	9302      	str	r3, [sp, #8]
 8000220:	2300      	movs	r3, #0
 8000222:	9301      	str	r3, [sp, #4]
 8000224:	2304      	movs	r3, #4
 8000226:	9300      	str	r3, [sp, #0]
 8000228:	2301      	movs	r3, #1
 800022a:	2201      	movs	r2, #1
 800022c:	4922      	ldr	r1, [pc, #136]	; (80002b8 <main+0xb4>)
 800022e:	4620      	mov	r0, r4
 8000230:	f000 fe17 	bl	8000e62 <_ZN11SPI_HandlerC1EP12SPI_RegDef_thhhhhhh>
 8000234:	f107 030c 	add.w	r3, r7, #12
 8000238:	4621      	mov	r1, r4
 800023a:	4618      	mov	r0, r3
 800023c:	f000 f83e 	bl	80002bc <_ZNSt10unique_ptrI11SPI_HandlerSt14default_deleteIS0_EEC1IS2_vEEPS0_>

    uint8_t tx_buffer[1] = {0xD0};
 8000240:	23d0      	movs	r3, #208	; 0xd0
 8000242:	723b      	strb	r3, [r7, #8]
    uint8_t dummyRead = 0x00;
 8000244:	2300      	movs	r3, #0
 8000246:	71fb      	strb	r3, [r7, #7]
    uint8_t dummyWrite = 0x00;
 8000248:	2300      	movs	r3, #0
 800024a:	71bb      	strb	r3, [r7, #6]
    uint8_t chipID = 0;
 800024c:	2300      	movs	r3, #0
 800024e:	717b      	strb	r3, [r7, #5]
    SPI1_Handler->SPI_SendData(tx_buffer, 1);
 8000250:	f107 030c 	add.w	r3, r7, #12
 8000254:	4618      	mov	r0, r3
 8000256:	f000 f85f 	bl	8000318 <_ZNKSt10unique_ptrI11SPI_HandlerSt14default_deleteIS0_EEptEv>
 800025a:	f107 0308 	add.w	r3, r7, #8
 800025e:	2201      	movs	r2, #1
 8000260:	4619      	mov	r1, r3
 8000262:	f001 f828 	bl	80012b6 <_ZN11SPI_Handler12SPI_SendDataEPhm>
    SPI1_Handler->SPI_ReceiveData(&dummyRead, 1);
 8000266:	f107 030c 	add.w	r3, r7, #12
 800026a:	4618      	mov	r0, r3
 800026c:	f000 f854 	bl	8000318 <_ZNKSt10unique_ptrI11SPI_HandlerSt14default_deleteIS0_EEptEv>
 8000270:	1dfb      	adds	r3, r7, #7
 8000272:	2201      	movs	r2, #1
 8000274:	4619      	mov	r1, r3
 8000276:	f001 f8aa 	bl	80013ce <_ZN11SPI_Handler15SPI_ReceiveDataEPhm>
    SPI1_Handler->SPI_SendData(&dummyWrite, 1);
 800027a:	f107 030c 	add.w	r3, r7, #12
 800027e:	4618      	mov	r0, r3
 8000280:	f000 f84a 	bl	8000318 <_ZNKSt10unique_ptrI11SPI_HandlerSt14default_deleteIS0_EEptEv>
 8000284:	1dbb      	adds	r3, r7, #6
 8000286:	2201      	movs	r2, #1
 8000288:	4619      	mov	r1, r3
 800028a:	f001 f814 	bl	80012b6 <_ZN11SPI_Handler12SPI_SendDataEPhm>
    SPI1_Handler->SPI_ReceiveData(&chipID, 1);
 800028e:	f107 030c 	add.w	r3, r7, #12
 8000292:	4618      	mov	r0, r3
 8000294:	f000 f840 	bl	8000318 <_ZNKSt10unique_ptrI11SPI_HandlerSt14default_deleteIS0_EEptEv>
 8000298:	1d7b      	adds	r3, r7, #5
 800029a:	2201      	movs	r2, #1
 800029c:	4619      	mov	r1, r3
 800029e:	f001 f896 	bl	80013ce <_ZN11SPI_Handler15SPI_ReceiveDataEPhm>

    return 0;
 80002a2:	2400      	movs	r4, #0
														SPI_SSM_DI));
 80002a4:	f107 030c 	add.w	r3, r7, #12
 80002a8:	4618      	mov	r0, r3
 80002aa:	f000 f816 	bl	80002da <_ZNSt10unique_ptrI11SPI_HandlerSt14default_deleteIS0_EED1Ev>
 80002ae:	4623      	mov	r3, r4
}
 80002b0:	4618      	mov	r0, r3
 80002b2:	3714      	adds	r7, #20
 80002b4:	46bd      	mov	sp, r7
 80002b6:	bd90      	pop	{r4, r7, pc}
 80002b8:	40013000 	.word	0x40013000

080002bc <_ZNSt10unique_ptrI11SPI_HandlerSt14default_deleteIS0_EEC1IS2_vEEPS0_>:
       * The deleter will be value-initialized.
       */
      template <typename _Up = _Dp,
		typename = _DeleterConstraint<_Up>>
	explicit
	unique_ptr(pointer __p) noexcept
 80002bc:	b580      	push	{r7, lr}
 80002be:	b082      	sub	sp, #8
 80002c0:	af00      	add	r7, sp, #0
 80002c2:	6078      	str	r0, [r7, #4]
 80002c4:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	6839      	ldr	r1, [r7, #0]
 80002ca:	4618      	mov	r0, r3
 80002cc:	f000 f830 	bl	8000330 <_ZNSt15__uniq_ptr_implI11SPI_HandlerSt14default_deleteIS0_EEC1EPS0_>
        { }
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	4618      	mov	r0, r3
 80002d4:	3708      	adds	r7, #8
 80002d6:	46bd      	mov	sp, r7
 80002d8:	bd80      	pop	{r7, pc}

080002da <_ZNSt10unique_ptrI11SPI_HandlerSt14default_deleteIS0_EED1Ev>:
	       is_convertible<_Up*, _Tp*>, is_same<_Dp, default_delete<_Tp>>>>
	unique_ptr(auto_ptr<_Up>&& __u) noexcept;
#endif

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
 80002da:	b580      	push	{r7, lr}
 80002dc:	b084      	sub	sp, #16
 80002de:	af00      	add	r7, sp, #0
 80002e0:	6078      	str	r0, [r7, #4]
      {
	auto& __ptr = _M_t._M_ptr();
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	4618      	mov	r0, r3
 80002e6:	f000 f837 	bl	8000358 <_ZNSt15__uniq_ptr_implI11SPI_HandlerSt14default_deleteIS0_EE6_M_ptrEv>
 80002ea:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 80002ec:	68fb      	ldr	r3, [r7, #12]
 80002ee:	681b      	ldr	r3, [r3, #0]
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	d009      	beq.n	8000308 <_ZNSt10unique_ptrI11SPI_HandlerSt14default_deleteIS0_EED1Ev+0x2e>
	  get_deleter()(__ptr);
 80002f4:	6878      	ldr	r0, [r7, #4]
 80002f6:	f000 f83c 	bl	8000372 <_ZNSt10unique_ptrI11SPI_HandlerSt14default_deleteIS0_EE11get_deleterEv>
 80002fa:	4602      	mov	r2, r0
 80002fc:	68fb      	ldr	r3, [r7, #12]
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	4619      	mov	r1, r3
 8000302:	4610      	mov	r0, r2
 8000304:	f000 f842 	bl	800038c <_ZNKSt14default_deleteI11SPI_HandlerEclEPS0_>
	__ptr = pointer();
 8000308:	68fb      	ldr	r3, [r7, #12]
 800030a:	2200      	movs	r2, #0
 800030c:	601a      	str	r2, [r3, #0]
      }
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	4618      	mov	r0, r3
 8000312:	3710      	adds	r7, #16
 8000314:	46bd      	mov	sp, r7
 8000316:	bd80      	pop	{r7, pc}

08000318 <_ZNKSt10unique_ptrI11SPI_HandlerSt14default_deleteIS0_EEptEv>:
	return *get();
      }

      /// Return the stored pointer.
      pointer
      operator->() const noexcept
 8000318:	b580      	push	{r7, lr}
 800031a:	b082      	sub	sp, #8
 800031c:	af00      	add	r7, sp, #0
 800031e:	6078      	str	r0, [r7, #4]
      {
	_GLIBCXX_DEBUG_PEDASSERT(get() != pointer());
	return get();
 8000320:	6878      	ldr	r0, [r7, #4]
 8000322:	f000 f846 	bl	80003b2 <_ZNKSt10unique_ptrI11SPI_HandlerSt14default_deleteIS0_EE3getEv>
 8000326:	4603      	mov	r3, r0
      }
 8000328:	4618      	mov	r0, r3
 800032a:	3708      	adds	r7, #8
 800032c:	46bd      	mov	sp, r7
 800032e:	bd80      	pop	{r7, pc}

08000330 <_ZNSt15__uniq_ptr_implI11SPI_HandlerSt14default_deleteIS0_EEC1EPS0_>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 8000330:	b580      	push	{r7, lr}
 8000332:	b082      	sub	sp, #8
 8000334:	af00      	add	r7, sp, #0
 8000336:	6078      	str	r0, [r7, #4]
 8000338:	6039      	str	r1, [r7, #0]
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	4618      	mov	r0, r3
 800033e:	f000 f845 	bl	80003cc <_ZNSt5tupleIJP11SPI_HandlerSt14default_deleteIS0_EEEC1IS1_S3_Lb1EEEv>
 8000342:	6878      	ldr	r0, [r7, #4]
 8000344:	f000 f808 	bl	8000358 <_ZNSt15__uniq_ptr_implI11SPI_HandlerSt14default_deleteIS0_EE6_M_ptrEv>
 8000348:	4602      	mov	r2, r0
 800034a:	683b      	ldr	r3, [r7, #0]
 800034c:	6013      	str	r3, [r2, #0]
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	4618      	mov	r0, r3
 8000352:	3708      	adds	r7, #8
 8000354:	46bd      	mov	sp, r7
 8000356:	bd80      	pop	{r7, pc}

08000358 <_ZNSt15__uniq_ptr_implI11SPI_HandlerSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 8000358:	b580      	push	{r7, lr}
 800035a:	b082      	sub	sp, #8
 800035c:	af00      	add	r7, sp, #0
 800035e:	6078      	str	r0, [r7, #4]
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	4618      	mov	r0, r3
 8000364:	f000 f83f 	bl	80003e6 <_ZSt3getILj0EJP11SPI_HandlerSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8000368:	4603      	mov	r3, r0
 800036a:	4618      	mov	r0, r3
 800036c:	3708      	adds	r7, #8
 800036e:	46bd      	mov	sp, r7
 8000370:	bd80      	pop	{r7, pc}

08000372 <_ZNSt10unique_ptrI11SPI_HandlerSt14default_deleteIS0_EE11get_deleterEv>:
      get() const noexcept
      { return _M_t._M_ptr(); }

      /// Return a reference to the stored deleter.
      deleter_type&
      get_deleter() noexcept
 8000372:	b580      	push	{r7, lr}
 8000374:	b082      	sub	sp, #8
 8000376:	af00      	add	r7, sp, #0
 8000378:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	4618      	mov	r0, r3
 800037e:	f000 f83f 	bl	8000400 <_ZNSt15__uniq_ptr_implI11SPI_HandlerSt14default_deleteIS0_EE10_M_deleterEv>
 8000382:	4603      	mov	r3, r0
 8000384:	4618      	mov	r0, r3
 8000386:	3708      	adds	r7, #8
 8000388:	46bd      	mov	sp, r7
 800038a:	bd80      	pop	{r7, pc}

0800038c <_ZNKSt14default_deleteI11SPI_HandlerEclEPS0_>:
      operator()(_Tp* __ptr) const
 800038c:	b590      	push	{r4, r7, lr}
 800038e:	b083      	sub	sp, #12
 8000390:	af00      	add	r7, sp, #0
 8000392:	6078      	str	r0, [r7, #4]
 8000394:	6039      	str	r1, [r7, #0]
	delete __ptr;
 8000396:	683c      	ldr	r4, [r7, #0]
 8000398:	2c00      	cmp	r4, #0
 800039a:	d006      	beq.n	80003aa <_ZNKSt14default_deleteI11SPI_HandlerEclEPS0_+0x1e>
 800039c:	4620      	mov	r0, r4
 800039e:	f000 fdc0 	bl	8000f22 <_ZN11SPI_HandlerD1Ev>
 80003a2:	2130      	movs	r1, #48	; 0x30
 80003a4:	4620      	mov	r0, r4
 80003a6:	f001 f9b1 	bl	800170c <_ZdlPvj>
      }
 80003aa:	bf00      	nop
 80003ac:	370c      	adds	r7, #12
 80003ae:	46bd      	mov	sp, r7
 80003b0:	bd90      	pop	{r4, r7, pc}

080003b2 <_ZNKSt10unique_ptrI11SPI_HandlerSt14default_deleteIS0_EE3getEv>:
      get() const noexcept
 80003b2:	b580      	push	{r7, lr}
 80003b4:	b082      	sub	sp, #8
 80003b6:	af00      	add	r7, sp, #0
 80003b8:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	4618      	mov	r0, r3
 80003be:	f000 f82c 	bl	800041a <_ZNKSt15__uniq_ptr_implI11SPI_HandlerSt14default_deleteIS0_EE6_M_ptrEv>
 80003c2:	4603      	mov	r3, r0
 80003c4:	4618      	mov	r0, r3
 80003c6:	3708      	adds	r7, #8
 80003c8:	46bd      	mov	sp, r7
 80003ca:	bd80      	pop	{r7, pc}

080003cc <_ZNSt5tupleIJP11SPI_HandlerSt14default_deleteIS0_EEEC1IS1_S3_Lb1EEEv>:
                typename enable_if<__and_<
                                     __is_implicitly_default_constructible<_U1>,
                                     __is_implicitly_default_constructible<_U2>>
                                   ::value, bool>::type = true>

      constexpr tuple()
 80003cc:	b580      	push	{r7, lr}
 80003ce:	b082      	sub	sp, #8
 80003d0:	af00      	add	r7, sp, #0
 80003d2:	6078      	str	r0, [r7, #4]
      : _Inherited() { }
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	4618      	mov	r0, r3
 80003d8:	f000 f82d 	bl	8000436 <_ZNSt11_Tuple_implILj0EJP11SPI_HandlerSt14default_deleteIS0_EEEC1Ev>
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	4618      	mov	r0, r3
 80003e0:	3708      	adds	r7, #8
 80003e2:	46bd      	mov	sp, r7
 80003e4:	bd80      	pop	{r7, pc}

080003e6 <_ZSt3getILj0EJP11SPI_HandlerSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }

  /// Return a reference to the ith element of a tuple.
  template<std::size_t __i, typename... _Elements>
    constexpr __tuple_element_t<__i, tuple<_Elements...>>&
    get(tuple<_Elements...>& __t) noexcept
 80003e6:	b580      	push	{r7, lr}
 80003e8:	b082      	sub	sp, #8
 80003ea:	af00      	add	r7, sp, #0
 80003ec:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	4618      	mov	r0, r3
 80003f2:	f000 f830 	bl	8000456 <_ZSt12__get_helperILj0EP11SPI_HandlerJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 80003f6:	4603      	mov	r3, r0
 80003f8:	4618      	mov	r0, r3
 80003fa:	3708      	adds	r7, #8
 80003fc:	46bd      	mov	sp, r7
 80003fe:	bd80      	pop	{r7, pc}

08000400 <_ZNSt15__uniq_ptr_implI11SPI_HandlerSt14default_deleteIS0_EE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 8000400:	b580      	push	{r7, lr}
 8000402:	b082      	sub	sp, #8
 8000404:	af00      	add	r7, sp, #0
 8000406:	6078      	str	r0, [r7, #4]
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	4618      	mov	r0, r3
 800040c:	f000 f82f 	bl	800046e <_ZSt3getILj1EJP11SPI_HandlerSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8000410:	4603      	mov	r3, r0
 8000412:	4618      	mov	r0, r3
 8000414:	3708      	adds	r7, #8
 8000416:	46bd      	mov	sp, r7
 8000418:	bd80      	pop	{r7, pc}

0800041a <_ZNKSt15__uniq_ptr_implI11SPI_HandlerSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 800041a:	b580      	push	{r7, lr}
 800041c:	b082      	sub	sp, #8
 800041e:	af00      	add	r7, sp, #0
 8000420:	6078      	str	r0, [r7, #4]
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	4618      	mov	r0, r3
 8000426:	f000 f82e 	bl	8000486 <_ZSt3getILj0EJP11SPI_HandlerSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>
 800042a:	4603      	mov	r3, r0
 800042c:	681b      	ldr	r3, [r3, #0]
 800042e:	4618      	mov	r0, r3
 8000430:	3708      	adds	r7, #8
 8000432:	46bd      	mov	sp, r7
 8000434:	bd80      	pop	{r7, pc}

08000436 <_ZNSt11_Tuple_implILj0EJP11SPI_HandlerSt14default_deleteIS0_EEEC1Ev>:
      constexpr _Tuple_impl()
 8000436:	b580      	push	{r7, lr}
 8000438:	b082      	sub	sp, #8
 800043a:	af00      	add	r7, sp, #0
 800043c:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 800043e:	6878      	ldr	r0, [r7, #4]
 8000440:	f000 f82e 	bl	80004a0 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI11SPI_HandlerEEEC1Ev>
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	4618      	mov	r0, r3
 8000448:	f000 f836 	bl	80004b8 <_ZNSt10_Head_baseILj0EP11SPI_HandlerLb0EEC1Ev>
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	4618      	mov	r0, r3
 8000450:	3708      	adds	r7, #8
 8000452:	46bd      	mov	sp, r7
 8000454:	bd80      	pop	{r7, pc}

08000456 <_ZSt12__get_helperILj0EP11SPI_HandlerJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8000456:	b580      	push	{r7, lr}
 8000458:	b082      	sub	sp, #8
 800045a:	af00      	add	r7, sp, #0
 800045c:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800045e:	6878      	ldr	r0, [r7, #4]
 8000460:	f000 f837 	bl	80004d2 <_ZNSt11_Tuple_implILj0EJP11SPI_HandlerSt14default_deleteIS0_EEE7_M_headERS4_>
 8000464:	4603      	mov	r3, r0
 8000466:	4618      	mov	r0, r3
 8000468:	3708      	adds	r7, #8
 800046a:	46bd      	mov	sp, r7
 800046c:	bd80      	pop	{r7, pc}

0800046e <_ZSt3getILj1EJP11SPI_HandlerSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 800046e:	b580      	push	{r7, lr}
 8000470:	b082      	sub	sp, #8
 8000472:	af00      	add	r7, sp, #0
 8000474:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8000476:	6878      	ldr	r0, [r7, #4]
 8000478:	f000 f838 	bl	80004ec <_ZSt12__get_helperILj1ESt14default_deleteI11SPI_HandlerEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 800047c:	4603      	mov	r3, r0
 800047e:	4618      	mov	r0, r3
 8000480:	3708      	adds	r7, #8
 8000482:	46bd      	mov	sp, r7
 8000484:	bd80      	pop	{r7, pc}

08000486 <_ZSt3getILj0EJP11SPI_HandlerSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>:

  /// Return a const reference to the ith element of a const tuple.
  template<std::size_t __i, typename... _Elements>
    constexpr const __tuple_element_t<__i, tuple<_Elements...>>&
    get(const tuple<_Elements...>& __t) noexcept
 8000486:	b580      	push	{r7, lr}
 8000488:	b082      	sub	sp, #8
 800048a:	af00      	add	r7, sp, #0
 800048c:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	4618      	mov	r0, r3
 8000492:	f000 f837 	bl	8000504 <_ZSt12__get_helperILj0EP11SPI_HandlerJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8000496:	4603      	mov	r3, r0
 8000498:	4618      	mov	r0, r3
 800049a:	3708      	adds	r7, #8
 800049c:	46bd      	mov	sp, r7
 800049e:	bd80      	pop	{r7, pc}

080004a0 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI11SPI_HandlerEEEC1Ev>:
      constexpr _Tuple_impl()
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b082      	sub	sp, #8
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	6078      	str	r0, [r7, #4]
      : _Base() { }
 80004a8:	6878      	ldr	r0, [r7, #4]
 80004aa:	f000 f837 	bl	800051c <_ZNSt10_Head_baseILj1ESt14default_deleteI11SPI_HandlerELb1EEC1Ev>
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	4618      	mov	r0, r3
 80004b2:	3708      	adds	r7, #8
 80004b4:	46bd      	mov	sp, r7
 80004b6:	bd80      	pop	{r7, pc}

080004b8 <_ZNSt10_Head_baseILj0EP11SPI_HandlerLb0EEC1Ev>:
      constexpr _Head_base()
 80004b8:	b480      	push	{r7}
 80004ba:	b083      	sub	sp, #12
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	2200      	movs	r2, #0
 80004c4:	601a      	str	r2, [r3, #0]
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	4618      	mov	r0, r3
 80004ca:	370c      	adds	r7, #12
 80004cc:	46bd      	mov	sp, r7
 80004ce:	bc80      	pop	{r7}
 80004d0:	4770      	bx	lr

080004d2 <_ZNSt11_Tuple_implILj0EJP11SPI_HandlerSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80004d2:	b580      	push	{r7, lr}
 80004d4:	b082      	sub	sp, #8
 80004d6:	af00      	add	r7, sp, #0
 80004d8:	6078      	str	r0, [r7, #4]
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	4618      	mov	r0, r3
 80004de:	f000 f827 	bl	8000530 <_ZNSt10_Head_baseILj0EP11SPI_HandlerLb0EE7_M_headERS2_>
 80004e2:	4603      	mov	r3, r0
 80004e4:	4618      	mov	r0, r3
 80004e6:	3708      	adds	r7, #8
 80004e8:	46bd      	mov	sp, r7
 80004ea:	bd80      	pop	{r7, pc}

080004ec <_ZSt12__get_helperILj1ESt14default_deleteI11SPI_HandlerEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b082      	sub	sp, #8
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80004f4:	6878      	ldr	r0, [r7, #4]
 80004f6:	f000 f825 	bl	8000544 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI11SPI_HandlerEEE7_M_headERS3_>
 80004fa:	4603      	mov	r3, r0
 80004fc:	4618      	mov	r0, r3
 80004fe:	3708      	adds	r7, #8
 8000500:	46bd      	mov	sp, r7
 8000502:	bd80      	pop	{r7, pc}

08000504 <_ZSt12__get_helperILj0EP11SPI_HandlerJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8000504:	b580      	push	{r7, lr}
 8000506:	b082      	sub	sp, #8
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800050c:	6878      	ldr	r0, [r7, #4]
 800050e:	f000 f825 	bl	800055c <_ZNSt11_Tuple_implILj0EJP11SPI_HandlerSt14default_deleteIS0_EEE7_M_headERKS4_>
 8000512:	4603      	mov	r3, r0
 8000514:	4618      	mov	r0, r3
 8000516:	3708      	adds	r7, #8
 8000518:	46bd      	mov	sp, r7
 800051a:	bd80      	pop	{r7, pc}

0800051c <_ZNSt10_Head_baseILj1ESt14default_deleteI11SPI_HandlerELb1EEC1Ev>:
      constexpr _Head_base()
 800051c:	b480      	push	{r7}
 800051e:	b083      	sub	sp, #12
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
      : _Head() { }
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	4618      	mov	r0, r3
 8000528:	370c      	adds	r7, #12
 800052a:	46bd      	mov	sp, r7
 800052c:	bc80      	pop	{r7}
 800052e:	4770      	bx	lr

08000530 <_ZNSt10_Head_baseILj0EP11SPI_HandlerLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8000530:	b480      	push	{r7}
 8000532:	b083      	sub	sp, #12
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	4618      	mov	r0, r3
 800053c:	370c      	adds	r7, #12
 800053e:	46bd      	mov	sp, r7
 8000540:	bc80      	pop	{r7}
 8000542:	4770      	bx	lr

08000544 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI11SPI_HandlerEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8000544:	b580      	push	{r7, lr}
 8000546:	b082      	sub	sp, #8
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
 800054c:	6878      	ldr	r0, [r7, #4]
 800054e:	f000 f812 	bl	8000576 <_ZNSt10_Head_baseILj1ESt14default_deleteI11SPI_HandlerELb1EE7_M_headERS3_>
 8000552:	4603      	mov	r3, r0
 8000554:	4618      	mov	r0, r3
 8000556:	3708      	adds	r7, #8
 8000558:	46bd      	mov	sp, r7
 800055a:	bd80      	pop	{r7, pc}

0800055c <_ZNSt11_Tuple_implILj0EJP11SPI_HandlerSt14default_deleteIS0_EEE7_M_headERKS4_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800055c:	b580      	push	{r7, lr}
 800055e:	b082      	sub	sp, #8
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	4618      	mov	r0, r3
 8000568:	f000 f80f 	bl	800058a <_ZNSt10_Head_baseILj0EP11SPI_HandlerLb0EE7_M_headERKS2_>
 800056c:	4603      	mov	r3, r0
 800056e:	4618      	mov	r0, r3
 8000570:	3708      	adds	r7, #8
 8000572:	46bd      	mov	sp, r7
 8000574:	bd80      	pop	{r7, pc}

08000576 <_ZNSt10_Head_baseILj1ESt14default_deleteI11SPI_HandlerELb1EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b; }
 8000576:	b480      	push	{r7}
 8000578:	b083      	sub	sp, #12
 800057a:	af00      	add	r7, sp, #0
 800057c:	6078      	str	r0, [r7, #4]
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	4618      	mov	r0, r3
 8000582:	370c      	adds	r7, #12
 8000584:	46bd      	mov	sp, r7
 8000586:	bc80      	pop	{r7}
 8000588:	4770      	bx	lr

0800058a <_ZNSt10_Head_baseILj0EP11SPI_HandlerLb0EE7_M_headERKS2_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 800058a:	b480      	push	{r7}
 800058c:	b083      	sub	sp, #12
 800058e:	af00      	add	r7, sp, #0
 8000590:	6078      	str	r0, [r7, #4]
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	4618      	mov	r0, r3
 8000596:	370c      	adds	r7, #12
 8000598:	46bd      	mov	sp, r7
 800059a:	bc80      	pop	{r7}
 800059c:	4770      	bx	lr

0800059e <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800059e:	b480      	push	{r7}
 80005a0:	af00      	add	r7, sp, #0
	return 1;
 80005a2:	2301      	movs	r3, #1
}
 80005a4:	4618      	mov	r0, r3
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bc80      	pop	{r7}
 80005aa:	4770      	bx	lr

080005ac <_kill>:

int _kill(int pid, int sig)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
 80005b4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80005b6:	f001 f8cf 	bl	8001758 <__errno>
 80005ba:	4602      	mov	r2, r0
 80005bc:	2316      	movs	r3, #22
 80005be:	6013      	str	r3, [r2, #0]
	return -1;
 80005c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80005c4:	4618      	mov	r0, r3
 80005c6:	3708      	adds	r7, #8
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd80      	pop	{r7, pc}

080005cc <_exit>:

void _exit (int status)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b082      	sub	sp, #8
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80005d4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80005d8:	6878      	ldr	r0, [r7, #4]
 80005da:	f7ff ffe7 	bl	80005ac <_kill>
	while (1) {}		/* Make sure we hang here */
 80005de:	e7fe      	b.n	80005de <_exit+0x12>

080005e0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b084      	sub	sp, #16
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80005e8:	4b11      	ldr	r3, [pc, #68]	; (8000630 <_sbrk+0x50>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d102      	bne.n	80005f6 <_sbrk+0x16>
		heap_end = &end;
 80005f0:	4b0f      	ldr	r3, [pc, #60]	; (8000630 <_sbrk+0x50>)
 80005f2:	4a10      	ldr	r2, [pc, #64]	; (8000634 <_sbrk+0x54>)
 80005f4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80005f6:	4b0e      	ldr	r3, [pc, #56]	; (8000630 <_sbrk+0x50>)
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80005fc:	4b0c      	ldr	r3, [pc, #48]	; (8000630 <_sbrk+0x50>)
 80005fe:	681a      	ldr	r2, [r3, #0]
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	4413      	add	r3, r2
 8000604:	466a      	mov	r2, sp
 8000606:	4293      	cmp	r3, r2
 8000608:	d907      	bls.n	800061a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800060a:	f001 f8a5 	bl	8001758 <__errno>
 800060e:	4602      	mov	r2, r0
 8000610:	230c      	movs	r3, #12
 8000612:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000614:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000618:	e006      	b.n	8000628 <_sbrk+0x48>
	}

	heap_end += incr;
 800061a:	4b05      	ldr	r3, [pc, #20]	; (8000630 <_sbrk+0x50>)
 800061c:	681a      	ldr	r2, [r3, #0]
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	4413      	add	r3, r2
 8000622:	4a03      	ldr	r2, [pc, #12]	; (8000630 <_sbrk+0x50>)
 8000624:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000626:	68fb      	ldr	r3, [r7, #12]
}
 8000628:	4618      	mov	r0, r3
 800062a:	3710      	adds	r7, #16
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}
 8000630:	20000080 	.word	0x20000080
 8000634:	20000098 	.word	0x20000098

08000638 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000638:	480d      	ldr	r0, [pc, #52]	; (8000670 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800063a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800063c:	480d      	ldr	r0, [pc, #52]	; (8000674 <LoopForever+0x6>)
  ldr r1, =_edata
 800063e:	490e      	ldr	r1, [pc, #56]	; (8000678 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000640:	4a0e      	ldr	r2, [pc, #56]	; (800067c <LoopForever+0xe>)
  movs r3, #0
 8000642:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000644:	e002      	b.n	800064c <LoopCopyDataInit>

08000646 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000646:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000648:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800064a:	3304      	adds	r3, #4

0800064c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800064c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800064e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000650:	d3f9      	bcc.n	8000646 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000652:	4a0b      	ldr	r2, [pc, #44]	; (8000680 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000654:	4c0b      	ldr	r4, [pc, #44]	; (8000684 <LoopForever+0x16>)
  movs r3, #0
 8000656:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000658:	e001      	b.n	800065e <LoopFillZerobss>

0800065a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800065a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800065c:	3204      	adds	r2, #4

0800065e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800065e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000660:	d3fb      	bcc.n	800065a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000662:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 8000666:	f001 f87d 	bl	8001764 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800066a:	f7ff fdcb 	bl	8000204 <main>

0800066e <LoopForever>:

LoopForever:
    b LoopForever
 800066e:	e7fe      	b.n	800066e <LoopForever>
  ldr   r0, =_estack
 8000670:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000674:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000678:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 800067c:	080019f8 	.word	0x080019f8
  ldr r2, =_sbss
 8000680:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8000684:	20000094 	.word	0x20000094

08000688 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000688:	e7fe      	b.n	8000688 <ADC_IRQHandler>
	...

0800068c <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t>:
#define SPI_SR_BSY                      7
#define SPI_SR_FRE                      8



inline uint8_t gpio_baseAddr_to_code(GPIO_RegDef_t *Port) {
 800068c:	b480      	push	{r7}
 800068e:	b083      	sub	sp, #12
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
			 (Port == GPIOC) ? 0x02 : \
			 (Port == GPIOD) ? 0x03 : \
			 (Port == GPIOE) ? 0x04 : \
			 (Port == GPIOF) ? 0x05 : \
			 (Port == GPIOG) ? 0x06 : \
			 (Port == GPIOH) ? 0x07 : 0x00 );
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	4a1a      	ldr	r2, [pc, #104]	; (8000700 <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t+0x74>)
 8000698:	4293      	cmp	r3, r2
 800069a:	d02b      	beq.n	80006f4 <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t+0x68>
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	4a19      	ldr	r2, [pc, #100]	; (8000704 <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t+0x78>)
 80006a0:	4293      	cmp	r3, r2
 80006a2:	d025      	beq.n	80006f0 <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t+0x64>
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	4a18      	ldr	r2, [pc, #96]	; (8000708 <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t+0x7c>)
 80006a8:	4293      	cmp	r3, r2
 80006aa:	d01f      	beq.n	80006ec <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t+0x60>
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	4a17      	ldr	r2, [pc, #92]	; (800070c <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t+0x80>)
 80006b0:	4293      	cmp	r3, r2
 80006b2:	d019      	beq.n	80006e8 <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t+0x5c>
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	4a16      	ldr	r2, [pc, #88]	; (8000710 <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t+0x84>)
 80006b8:	4293      	cmp	r3, r2
 80006ba:	d013      	beq.n	80006e4 <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t+0x58>
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	4a15      	ldr	r2, [pc, #84]	; (8000714 <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t+0x88>)
 80006c0:	4293      	cmp	r3, r2
 80006c2:	d00d      	beq.n	80006e0 <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t+0x54>
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	4a14      	ldr	r2, [pc, #80]	; (8000718 <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t+0x8c>)
 80006c8:	4293      	cmp	r3, r2
 80006ca:	d007      	beq.n	80006dc <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t+0x50>
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	4a13      	ldr	r2, [pc, #76]	; (800071c <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t+0x90>)
 80006d0:	4293      	cmp	r3, r2
 80006d2:	d101      	bne.n	80006d8 <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t+0x4c>
 80006d4:	2307      	movs	r3, #7
 80006d6:	e00e      	b.n	80006f6 <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t+0x6a>
 80006d8:	2300      	movs	r3, #0
 80006da:	e00c      	b.n	80006f6 <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t+0x6a>
 80006dc:	2306      	movs	r3, #6
 80006de:	e00a      	b.n	80006f6 <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t+0x6a>
 80006e0:	2305      	movs	r3, #5
 80006e2:	e008      	b.n	80006f6 <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t+0x6a>
 80006e4:	2304      	movs	r3, #4
 80006e6:	e006      	b.n	80006f6 <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t+0x6a>
 80006e8:	2303      	movs	r3, #3
 80006ea:	e004      	b.n	80006f6 <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t+0x6a>
 80006ec:	2302      	movs	r3, #2
 80006ee:	e002      	b.n	80006f6 <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t+0x6a>
 80006f0:	2301      	movs	r3, #1
 80006f2:	e000      	b.n	80006f6 <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t+0x6a>
 80006f4:	2300      	movs	r3, #0
}
 80006f6:	4618      	mov	r0, r3
 80006f8:	370c      	adds	r7, #12
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bc80      	pop	{r7}
 80006fe:	4770      	bx	lr
 8000700:	40020000 	.word	0x40020000
 8000704:	40020400 	.word	0x40020400
 8000708:	40020800 	.word	0x40020800
 800070c:	40020c00 	.word	0x40020c00
 8000710:	40021000 	.word	0x40021000
 8000714:	40021400 	.word	0x40021400
 8000718:	40021800 	.word	0x40021800
 800071c:	40021c00 	.word	0x40021c00

08000720 <_ZN12GPIO_HandlerC1EP13GPIO_RegDef_thhhhhhh>:
/*********************************************************************
 * @class      		  - GPIO_Handler
 *
 * @brief             - Constructor, initialize GPIO, clock, IRQ, Alt Function
 **********************************************************************/
GPIO_Handler::GPIO_Handler(
 8000720:	b580      	push	{r7, lr}
 8000722:	b086      	sub	sp, #24
 8000724:	af00      	add	r7, sp, #0
 8000726:	60f8      	str	r0, [r7, #12]
 8000728:	60b9      	str	r1, [r7, #8]
 800072a:	4611      	mov	r1, r2
 800072c:	461a      	mov	r2, r3
 800072e:	460b      	mov	r3, r1
 8000730:	71fb      	strb	r3, [r7, #7]
 8000732:	4613      	mov	r3, r2
 8000734:	71bb      	strb	r3, [r7, #6]
		uint8_t GPIO_PinMode,
		uint8_t GPIO_PinSpeed,
		uint8_t GPIO_IRQ_Priority,
		uint8_t GPIO_PinOPType,
		uint8_t GPIO_PinPuPdControl,
		uint8_t GPIO_PinAltFunMode) {
 8000736:	68fb      	ldr	r3, [r7, #12]
 8000738:	461a      	mov	r2, r3
 800073a:	2300      	movs	r3, #0
 800073c:	6013      	str	r3, [r2, #0]
 800073e:	6053      	str	r3, [r2, #4]
 8000740:	6093      	str	r3, [r2, #8]
	GPIOx_.pGPIOx = ((GPIO_RegDef_t *)(GPIOx_ADDR));
 8000742:	68ba      	ldr	r2, [r7, #8]
 8000744:	68fb      	ldr	r3, [r7, #12]
 8000746:	601a      	str	r2, [r3, #0]
	GPIOx_.GPIO_PinConfig.GPIO_PinNumber = GPIO_PinNumber;
 8000748:	68fb      	ldr	r3, [r7, #12]
 800074a:	79fa      	ldrb	r2, [r7, #7]
 800074c:	711a      	strb	r2, [r3, #4]
	GPIOx_.GPIO_PinConfig.GPIO_PinMode = GPIO_PinMode;
 800074e:	68fb      	ldr	r3, [r7, #12]
 8000750:	79ba      	ldrb	r2, [r7, #6]
 8000752:	715a      	strb	r2, [r3, #5]
	GPIOx_.GPIO_PinConfig.GPIO_PinSpeed = GPIO_PinSpeed;
 8000754:	68fb      	ldr	r3, [r7, #12]
 8000756:	f897 2020 	ldrb.w	r2, [r7, #32]
 800075a:	719a      	strb	r2, [r3, #6]
	GPIOx_.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PinPuPdControl;
 800075c:	68fb      	ldr	r3, [r7, #12]
 800075e:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8000762:	71da      	strb	r2, [r3, #7]
	GPIOx_.GPIO_PinConfig.GPIO_PinOPType = GPIO_PinOPType;
 8000764:	68fb      	ldr	r3, [r7, #12]
 8000766:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800076a:	721a      	strb	r2, [r3, #8]
	GPIOx_.GPIO_PinConfig.GPIO_PinAltFunMode = GPIO_PinAltFunMode;
 800076c:	68fb      	ldr	r3, [r7, #12]
 800076e:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8000772:	725a      	strb	r2, [r3, #9]
	GPIO_PeriClockControl();
 8000774:	68f8      	ldr	r0, [r7, #12]
 8000776:	f000 f82b 	bl	80007d0 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv>
	GPIO_Init();
 800077a:	68f8      	ldr	r0, [r7, #12]
 800077c:	f000 f8a2 	bl	80008c4 <_ZN12GPIO_Handler9GPIO_InitEv>
	// Configure interrupt
	if(GPIO_PinMode >= GPIO_MODE_IT_FT) {
 8000780:	79bb      	ldrb	r3, [r7, #6]
 8000782:	2b03      	cmp	r3, #3
 8000784:	d912      	bls.n	80007ac <_ZN12GPIO_HandlerC1EP13GPIO_RegDef_thhhhhhh+0x8c>
		uint8_t IRQ_number = get_irq_pinNum(GPIO_PinNumber);
 8000786:	79fb      	ldrb	r3, [r7, #7]
 8000788:	4618      	mov	r0, r3
 800078a:	f000 fb4e 	bl	8000e2a <_ZL14get_irq_pinNumh>
 800078e:	4603      	mov	r3, r0
 8000790:	75fb      	strb	r3, [r7, #23]
		GPIO_IRQInterruptConfig(IRQ_number, ENABLE);
 8000792:	7dfb      	ldrb	r3, [r7, #23]
 8000794:	2201      	movs	r2, #1
 8000796:	4619      	mov	r1, r3
 8000798:	68f8      	ldr	r0, [r7, #12]
 800079a:	f000 fa93 	bl	8000cc4 <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh>
		GPIO_IRQPriorityConfig(IRQ_number, GPIO_IRQ_Priority);
 800079e:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80007a2:	7dfb      	ldrb	r3, [r7, #23]
 80007a4:	4619      	mov	r1, r3
 80007a6:	68f8      	ldr	r0, [r7, #12]
 80007a8:	f000 fb10 	bl	8000dcc <_ZN12GPIO_Handler22GPIO_IRQPriorityConfigEhh>
	}
}
 80007ac:	68fb      	ldr	r3, [r7, #12]
 80007ae:	4618      	mov	r0, r3
 80007b0:	3718      	adds	r7, #24
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}

080007b6 <_ZN12GPIO_HandlerD1Ev>:
 *
 * @return None
 *
 * @Node: Be careful when using many Peripheral device in the same PORT
 **********************************************************************/
GPIO_Handler::~GPIO_Handler() {
 80007b6:	b580      	push	{r7, lr}
 80007b8:	b082      	sub	sp, #8
 80007ba:	af00      	add	r7, sp, #0
 80007bc:	6078      	str	r0, [r7, #4]
	GPIO_DeInit();
 80007be:	6878      	ldr	r0, [r7, #4]
 80007c0:	f000 f9d6 	bl	8000b70 <_ZN12GPIO_Handler11GPIO_DeInitEv>
}
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	4618      	mov	r0, r3
 80007c8:	3708      	adds	r7, #8
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
	...

080007d0 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv>:

// peripheral clock setup
void GPIO_Handler::GPIO_PeriClockControl() {
 80007d0:	b480      	push	{r7}
 80007d2:	b083      	sub	sp, #12
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
	if (GPIOx_.pGPIOx == GPIOA) {
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	4a30      	ldr	r2, [pc, #192]	; (80008a0 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xd0>)
 80007de:	4293      	cmp	r3, r2
 80007e0:	d106      	bne.n	80007f0 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0x20>
		GPIOA_PCLK_EN();
 80007e2:	4b30      	ldr	r3, [pc, #192]	; (80008a4 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xd4>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	4a2f      	ldr	r2, [pc, #188]	; (80008a4 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xd4>)
 80007e8:	f043 0301 	orr.w	r3, r3, #1
 80007ec:	6313      	str	r3, [r2, #48]	; 0x30
	} else if (GPIOx_.pGPIOx == GPIOG) {
		GPIOG_PCLK_EN();
	} else if (GPIOx_.pGPIOx == GPIOH) {
		GPIOH_PCLK_EN();
	}
}
 80007ee:	e052      	b.n	8000896 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xc6>
	} else if (GPIOx_.pGPIOx == GPIOB) {
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	4a2c      	ldr	r2, [pc, #176]	; (80008a8 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xd8>)
 80007f6:	4293      	cmp	r3, r2
 80007f8:	d106      	bne.n	8000808 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0x38>
		GPIOB_PCLK_EN();
 80007fa:	4b2a      	ldr	r3, [pc, #168]	; (80008a4 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xd4>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fe:	4a29      	ldr	r2, [pc, #164]	; (80008a4 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xd4>)
 8000800:	f043 0302 	orr.w	r3, r3, #2
 8000804:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000806:	e046      	b.n	8000896 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xc6>
	} else if (GPIOx_.pGPIOx == GPIOC) {
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	4a27      	ldr	r2, [pc, #156]	; (80008ac <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xdc>)
 800080e:	4293      	cmp	r3, r2
 8000810:	d106      	bne.n	8000820 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0x50>
		GPIOC_PCLK_EN();
 8000812:	4b24      	ldr	r3, [pc, #144]	; (80008a4 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xd4>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	4a23      	ldr	r2, [pc, #140]	; (80008a4 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xd4>)
 8000818:	f043 0304 	orr.w	r3, r3, #4
 800081c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800081e:	e03a      	b.n	8000896 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xc6>
	} else if (GPIOx_.pGPIOx == GPIOD) {
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	4a22      	ldr	r2, [pc, #136]	; (80008b0 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xe0>)
 8000826:	4293      	cmp	r3, r2
 8000828:	d106      	bne.n	8000838 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0x68>
		GPIOD_PCLK_EN();
 800082a:	4b1e      	ldr	r3, [pc, #120]	; (80008a4 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xd4>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	4a1d      	ldr	r2, [pc, #116]	; (80008a4 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xd4>)
 8000830:	f043 0308 	orr.w	r3, r3, #8
 8000834:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000836:	e02e      	b.n	8000896 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xc6>
	} else if (GPIOx_.pGPIOx == GPIOE) {
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	4a1d      	ldr	r2, [pc, #116]	; (80008b4 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xe4>)
 800083e:	4293      	cmp	r3, r2
 8000840:	d106      	bne.n	8000850 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0x80>
		GPIOE_PCLK_EN();
 8000842:	4b18      	ldr	r3, [pc, #96]	; (80008a4 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xd4>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000846:	4a17      	ldr	r2, [pc, #92]	; (80008a4 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xd4>)
 8000848:	f043 0310 	orr.w	r3, r3, #16
 800084c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800084e:	e022      	b.n	8000896 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xc6>
	} else if (GPIOx_.pGPIOx == GPIOF) {
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	4a18      	ldr	r2, [pc, #96]	; (80008b8 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xe8>)
 8000856:	4293      	cmp	r3, r2
 8000858:	d106      	bne.n	8000868 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0x98>
		GPIOF_PCLK_EN();
 800085a:	4b12      	ldr	r3, [pc, #72]	; (80008a4 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xd4>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085e:	4a11      	ldr	r2, [pc, #68]	; (80008a4 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xd4>)
 8000860:	f043 0320 	orr.w	r3, r3, #32
 8000864:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000866:	e016      	b.n	8000896 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xc6>
	} else if (GPIOx_.pGPIOx == GPIOG) {
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	4a13      	ldr	r2, [pc, #76]	; (80008bc <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xec>)
 800086e:	4293      	cmp	r3, r2
 8000870:	d106      	bne.n	8000880 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xb0>
		GPIOG_PCLK_EN();
 8000872:	4b0c      	ldr	r3, [pc, #48]	; (80008a4 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xd4>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	4a0b      	ldr	r2, [pc, #44]	; (80008a4 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xd4>)
 8000878:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800087c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800087e:	e00a      	b.n	8000896 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xc6>
	} else if (GPIOx_.pGPIOx == GPIOH) {
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	4a0e      	ldr	r2, [pc, #56]	; (80008c0 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xf0>)
 8000886:	4293      	cmp	r3, r2
 8000888:	d105      	bne.n	8000896 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xc6>
		GPIOH_PCLK_EN();
 800088a:	4b06      	ldr	r3, [pc, #24]	; (80008a4 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xd4>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088e:	4a05      	ldr	r2, [pc, #20]	; (80008a4 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xd4>)
 8000890:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000894:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000896:	bf00      	nop
 8000898:	370c      	adds	r7, #12
 800089a:	46bd      	mov	sp, r7
 800089c:	bc80      	pop	{r7}
 800089e:	4770      	bx	lr
 80008a0:	40020000 	.word	0x40020000
 80008a4:	40023800 	.word	0x40023800
 80008a8:	40020400 	.word	0x40020400
 80008ac:	40020800 	.word	0x40020800
 80008b0:	40020c00 	.word	0x40020c00
 80008b4:	40021000 	.word	0x40021000
 80008b8:	40021400 	.word	0x40021400
 80008bc:	40021800 	.word	0x40021800
 80008c0:	40021c00 	.word	0x40021c00

080008c4 <_ZN12GPIO_Handler9GPIO_InitEv>:
 *
 * @param None
 *
 * @return None
 **********************************************************************/
void GPIO_Handler::GPIO_Init() {
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b086      	sub	sp, #24
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
	uint32_t temp = 0;
 80008cc:	2300      	movs	r3, #0
 80008ce:	617b      	str	r3, [r7, #20]
	// 1. configure the mode of gpio pin
	if(GPIOx_.GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG) {
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	795b      	ldrb	r3, [r3, #5]
 80008d4:	2b03      	cmp	r3, #3
 80008d6:	d820      	bhi.n	800091a <_ZN12GPIO_Handler9GPIO_InitEv+0x56>
		// the non interrupt mode
		temp = GPIOx_.GPIO_PinConfig.GPIO_PinMode << (2 * GPIOx_.GPIO_PinConfig.GPIO_PinNumber);
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	795b      	ldrb	r3, [r3, #5]
 80008dc:	461a      	mov	r2, r3
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	791b      	ldrb	r3, [r3, #4]
 80008e2:	005b      	lsls	r3, r3, #1
 80008e4:	fa02 f303 	lsl.w	r3, r2, r3
 80008e8:	617b      	str	r3, [r7, #20]
		GPIOx_.pGPIOx->MODER &= ~(0x3 << (2 * GPIOx_.GPIO_PinConfig.GPIO_PinNumber)); // clearing
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	681a      	ldr	r2, [r3, #0]
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	791b      	ldrb	r3, [r3, #4]
 80008f4:	005b      	lsls	r3, r3, #1
 80008f6:	2103      	movs	r1, #3
 80008f8:	fa01 f303 	lsl.w	r3, r1, r3
 80008fc:	43db      	mvns	r3, r3
 80008fe:	4619      	mov	r1, r3
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	400a      	ands	r2, r1
 8000906:	601a      	str	r2, [r3, #0]
		GPIOx_.pGPIOx->MODER |= temp;
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	6819      	ldr	r1, [r3, #0]
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	697a      	ldr	r2, [r7, #20]
 8000914:	430a      	orrs	r2, r1
 8000916:	601a      	str	r2, [r3, #0]
 8000918:	e083      	b.n	8000a22 <_ZN12GPIO_Handler9GPIO_InitEv+0x15e>
	}
	else {
		// interrupt mode
		if(GPIO_MODE_IT_FT == GPIOx_.GPIO_PinConfig.GPIO_PinMode) {
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	795b      	ldrb	r3, [r3, #5]
 800091e:	2b04      	cmp	r3, #4
 8000920:	d117      	bne.n	8000952 <_ZN12GPIO_Handler9GPIO_InitEv+0x8e>
			// 1. configure the FTSR
			EXTI->FTSR |= (1 << GPIOx_.GPIO_PinConfig.GPIO_PinNumber);
 8000922:	4b90      	ldr	r3, [pc, #576]	; (8000b64 <_ZN12GPIO_Handler9GPIO_InitEv+0x2a0>)
 8000924:	68db      	ldr	r3, [r3, #12]
 8000926:	687a      	ldr	r2, [r7, #4]
 8000928:	7912      	ldrb	r2, [r2, #4]
 800092a:	4611      	mov	r1, r2
 800092c:	2201      	movs	r2, #1
 800092e:	408a      	lsls	r2, r1
 8000930:	4611      	mov	r1, r2
 8000932:	4a8c      	ldr	r2, [pc, #560]	; (8000b64 <_ZN12GPIO_Handler9GPIO_InitEv+0x2a0>)
 8000934:	430b      	orrs	r3, r1
 8000936:	60d3      	str	r3, [r2, #12]

			// clear the corresponding RTSR bit
			EXTI->RTSR &= ~(1 << GPIOx_.GPIO_PinConfig.GPIO_PinNumber);
 8000938:	4b8a      	ldr	r3, [pc, #552]	; (8000b64 <_ZN12GPIO_Handler9GPIO_InitEv+0x2a0>)
 800093a:	689b      	ldr	r3, [r3, #8]
 800093c:	687a      	ldr	r2, [r7, #4]
 800093e:	7912      	ldrb	r2, [r2, #4]
 8000940:	4611      	mov	r1, r2
 8000942:	2201      	movs	r2, #1
 8000944:	408a      	lsls	r2, r1
 8000946:	43d2      	mvns	r2, r2
 8000948:	4611      	mov	r1, r2
 800094a:	4a86      	ldr	r2, [pc, #536]	; (8000b64 <_ZN12GPIO_Handler9GPIO_InitEv+0x2a0>)
 800094c:	400b      	ands	r3, r1
 800094e:	6093      	str	r3, [r2, #8]
 8000950:	e035      	b.n	80009be <_ZN12GPIO_Handler9GPIO_InitEv+0xfa>

		}
		else if (GPIO_MODE_IT_RT == GPIOx_.GPIO_PinConfig.GPIO_PinMode) {
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	795b      	ldrb	r3, [r3, #5]
 8000956:	2b05      	cmp	r3, #5
 8000958:	d117      	bne.n	800098a <_ZN12GPIO_Handler9GPIO_InitEv+0xc6>
			// 1. configure the RTSR
			EXTI->RTSR |= (1 << GPIOx_.GPIO_PinConfig.GPIO_PinNumber);
 800095a:	4b82      	ldr	r3, [pc, #520]	; (8000b64 <_ZN12GPIO_Handler9GPIO_InitEv+0x2a0>)
 800095c:	689b      	ldr	r3, [r3, #8]
 800095e:	687a      	ldr	r2, [r7, #4]
 8000960:	7912      	ldrb	r2, [r2, #4]
 8000962:	4611      	mov	r1, r2
 8000964:	2201      	movs	r2, #1
 8000966:	408a      	lsls	r2, r1
 8000968:	4611      	mov	r1, r2
 800096a:	4a7e      	ldr	r2, [pc, #504]	; (8000b64 <_ZN12GPIO_Handler9GPIO_InitEv+0x2a0>)
 800096c:	430b      	orrs	r3, r1
 800096e:	6093      	str	r3, [r2, #8]

			// clear the corresponding RTSR bit
			EXTI->FTSR &= ~(1 << GPIOx_.GPIO_PinConfig.GPIO_PinNumber);
 8000970:	4b7c      	ldr	r3, [pc, #496]	; (8000b64 <_ZN12GPIO_Handler9GPIO_InitEv+0x2a0>)
 8000972:	68db      	ldr	r3, [r3, #12]
 8000974:	687a      	ldr	r2, [r7, #4]
 8000976:	7912      	ldrb	r2, [r2, #4]
 8000978:	4611      	mov	r1, r2
 800097a:	2201      	movs	r2, #1
 800097c:	408a      	lsls	r2, r1
 800097e:	43d2      	mvns	r2, r2
 8000980:	4611      	mov	r1, r2
 8000982:	4a78      	ldr	r2, [pc, #480]	; (8000b64 <_ZN12GPIO_Handler9GPIO_InitEv+0x2a0>)
 8000984:	400b      	ands	r3, r1
 8000986:	60d3      	str	r3, [r2, #12]
 8000988:	e019      	b.n	80009be <_ZN12GPIO_Handler9GPIO_InitEv+0xfa>
		}
		else if (GPIO_MODE_IT_RFT == GPIOx_.GPIO_PinConfig.GPIO_PinMode) {
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	795b      	ldrb	r3, [r3, #5]
 800098e:	2b06      	cmp	r3, #6
 8000990:	d115      	bne.n	80009be <_ZN12GPIO_Handler9GPIO_InitEv+0xfa>
			// 1. configure both FTSR and RTSR
			EXTI->FTSR |= (1 << GPIOx_.GPIO_PinConfig.GPIO_PinNumber);
 8000992:	4b74      	ldr	r3, [pc, #464]	; (8000b64 <_ZN12GPIO_Handler9GPIO_InitEv+0x2a0>)
 8000994:	68db      	ldr	r3, [r3, #12]
 8000996:	687a      	ldr	r2, [r7, #4]
 8000998:	7912      	ldrb	r2, [r2, #4]
 800099a:	4611      	mov	r1, r2
 800099c:	2201      	movs	r2, #1
 800099e:	408a      	lsls	r2, r1
 80009a0:	4611      	mov	r1, r2
 80009a2:	4a70      	ldr	r2, [pc, #448]	; (8000b64 <_ZN12GPIO_Handler9GPIO_InitEv+0x2a0>)
 80009a4:	430b      	orrs	r3, r1
 80009a6:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= (1 << GPIOx_.GPIO_PinConfig.GPIO_PinNumber);
 80009a8:	4b6e      	ldr	r3, [pc, #440]	; (8000b64 <_ZN12GPIO_Handler9GPIO_InitEv+0x2a0>)
 80009aa:	689b      	ldr	r3, [r3, #8]
 80009ac:	687a      	ldr	r2, [r7, #4]
 80009ae:	7912      	ldrb	r2, [r2, #4]
 80009b0:	4611      	mov	r1, r2
 80009b2:	2201      	movs	r2, #1
 80009b4:	408a      	lsls	r2, r1
 80009b6:	4611      	mov	r1, r2
 80009b8:	4a6a      	ldr	r2, [pc, #424]	; (8000b64 <_ZN12GPIO_Handler9GPIO_InitEv+0x2a0>)
 80009ba:	430b      	orrs	r3, r1
 80009bc:	6093      	str	r3, [r2, #8]
		}

		// 2. configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 = GPIOx_.GPIO_PinConfig.GPIO_PinNumber >> 2;
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	791b      	ldrb	r3, [r3, #4]
 80009c2:	109b      	asrs	r3, r3, #2
 80009c4:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = GPIOx_.GPIO_PinConfig.GPIO_PinNumber % 4;
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	791b      	ldrb	r3, [r3, #4]
 80009ca:	f003 0303 	and.w	r3, r3, #3
 80009ce:	74bb      	strb	r3, [r7, #18]
		uint8_t portCode = gpio_baseAddr_to_code(GPIOx_.pGPIOx);
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	4618      	mov	r0, r3
 80009d6:	f7ff fe59 	bl	800068c <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t>
 80009da:	4603      	mov	r3, r0
 80009dc:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 80009de:	4b62      	ldr	r3, [pc, #392]	; (8000b68 <_ZN12GPIO_Handler9GPIO_InitEv+0x2a4>)
 80009e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009e2:	4a61      	ldr	r2, [pc, #388]	; (8000b68 <_ZN12GPIO_Handler9GPIO_InitEv+0x2a4>)
 80009e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009e8:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[temp1] |= (portCode << (4 * temp2));
 80009ea:	4a60      	ldr	r2, [pc, #384]	; (8000b6c <_ZN12GPIO_Handler9GPIO_InitEv+0x2a8>)
 80009ec:	7cfb      	ldrb	r3, [r7, #19]
 80009ee:	3302      	adds	r3, #2
 80009f0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80009f4:	7c79      	ldrb	r1, [r7, #17]
 80009f6:	7cbb      	ldrb	r3, [r7, #18]
 80009f8:	009b      	lsls	r3, r3, #2
 80009fa:	fa01 f303 	lsl.w	r3, r1, r3
 80009fe:	4618      	mov	r0, r3
 8000a00:	495a      	ldr	r1, [pc, #360]	; (8000b6c <_ZN12GPIO_Handler9GPIO_InitEv+0x2a8>)
 8000a02:	7cfb      	ldrb	r3, [r7, #19]
 8000a04:	4302      	orrs	r2, r0
 8000a06:	3302      	adds	r3, #2
 8000a08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		// 3. Enable the exti interrupt delivery using IMR
		EXTI->IMR |= 1 << GPIOx_.GPIO_PinConfig.GPIO_PinNumber;
 8000a0c:	4b55      	ldr	r3, [pc, #340]	; (8000b64 <_ZN12GPIO_Handler9GPIO_InitEv+0x2a0>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	687a      	ldr	r2, [r7, #4]
 8000a12:	7912      	ldrb	r2, [r2, #4]
 8000a14:	4611      	mov	r1, r2
 8000a16:	2201      	movs	r2, #1
 8000a18:	408a      	lsls	r2, r1
 8000a1a:	4611      	mov	r1, r2
 8000a1c:	4a51      	ldr	r2, [pc, #324]	; (8000b64 <_ZN12GPIO_Handler9GPIO_InitEv+0x2a0>)
 8000a1e:	430b      	orrs	r3, r1
 8000a20:	6013      	str	r3, [r2, #0]
	}

	temp = 0;
 8000a22:	2300      	movs	r3, #0
 8000a24:	617b      	str	r3, [r7, #20]
	// 2. configure the speed
	temp = GPIOx_.GPIO_PinConfig.GPIO_PinSpeed << (2 * GPIOx_.GPIO_PinConfig.GPIO_PinNumber);
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	799b      	ldrb	r3, [r3, #6]
 8000a2a:	461a      	mov	r2, r3
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	791b      	ldrb	r3, [r3, #4]
 8000a30:	005b      	lsls	r3, r3, #1
 8000a32:	fa02 f303 	lsl.w	r3, r2, r3
 8000a36:	617b      	str	r3, [r7, #20]
	GPIOx_.pGPIOx->OSPEEDR &= ~(0x3 << (2 * GPIOx_.GPIO_PinConfig.GPIO_PinNumber)); // clearing
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	689a      	ldr	r2, [r3, #8]
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	791b      	ldrb	r3, [r3, #4]
 8000a42:	005b      	lsls	r3, r3, #1
 8000a44:	2103      	movs	r1, #3
 8000a46:	fa01 f303 	lsl.w	r3, r1, r3
 8000a4a:	43db      	mvns	r3, r3
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	400a      	ands	r2, r1
 8000a54:	609a      	str	r2, [r3, #8]
	GPIOx_.pGPIOx->OSPEEDR |= temp;
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	6899      	ldr	r1, [r3, #8]
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	697a      	ldr	r2, [r7, #20]
 8000a62:	430a      	orrs	r2, r1
 8000a64:	609a      	str	r2, [r3, #8]

	temp = 0;
 8000a66:	2300      	movs	r3, #0
 8000a68:	617b      	str	r3, [r7, #20]
	// 3. configure the pupd settings
	temp = GPIOx_.GPIO_PinConfig.GPIO_PinPuPdControl << (2 * GPIOx_.GPIO_PinConfig.GPIO_PinNumber);
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	79db      	ldrb	r3, [r3, #7]
 8000a6e:	461a      	mov	r2, r3
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	791b      	ldrb	r3, [r3, #4]
 8000a74:	005b      	lsls	r3, r3, #1
 8000a76:	fa02 f303 	lsl.w	r3, r2, r3
 8000a7a:	617b      	str	r3, [r7, #20]
	GPIOx_.pGPIOx->PUPDR &= ~(0x3 << (2 * GPIOx_.GPIO_PinConfig.GPIO_PinNumber));// clearing
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	68da      	ldr	r2, [r3, #12]
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	791b      	ldrb	r3, [r3, #4]
 8000a86:	005b      	lsls	r3, r3, #1
 8000a88:	2103      	movs	r1, #3
 8000a8a:	fa01 f303 	lsl.w	r3, r1, r3
 8000a8e:	43db      	mvns	r3, r3
 8000a90:	4619      	mov	r1, r3
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	400a      	ands	r2, r1
 8000a98:	60da      	str	r2, [r3, #12]
	GPIOx_.pGPIOx->PUPDR |= temp;
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	68d9      	ldr	r1, [r3, #12]
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	697a      	ldr	r2, [r7, #20]
 8000aa6:	430a      	orrs	r2, r1
 8000aa8:	60da      	str	r2, [r3, #12]

	temp = 0;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	617b      	str	r3, [r7, #20]
	// 4. configure the optype
	temp = GPIOx_.GPIO_PinConfig.GPIO_PinOPType << GPIOx_.GPIO_PinConfig.GPIO_PinNumber;
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	7a1b      	ldrb	r3, [r3, #8]
 8000ab2:	461a      	mov	r2, r3
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	791b      	ldrb	r3, [r3, #4]
 8000ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8000abc:	617b      	str	r3, [r7, #20]
	GPIOx_.pGPIOx->OTYPER &= ~(0x1 << GPIOx_.GPIO_PinConfig.GPIO_PinNumber); // clearing
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	685a      	ldr	r2, [r3, #4]
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	791b      	ldrb	r3, [r3, #4]
 8000ac8:	4619      	mov	r1, r3
 8000aca:	2301      	movs	r3, #1
 8000acc:	408b      	lsls	r3, r1
 8000ace:	43db      	mvns	r3, r3
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	400a      	ands	r2, r1
 8000ad8:	605a      	str	r2, [r3, #4]
	GPIOx_.pGPIOx->OTYPER |= temp;
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	6859      	ldr	r1, [r3, #4]
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	697a      	ldr	r2, [r7, #20]
 8000ae6:	430a      	orrs	r2, r1
 8000ae8:	605a      	str	r2, [r3, #4]

	temp = 0;
 8000aea:	2300      	movs	r3, #0
 8000aec:	617b      	str	r3, [r7, #20]
	// 5. configure the alt functionality
	if(GPIOx_.GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN) {
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	795b      	ldrb	r3, [r3, #5]
 8000af2:	2b02      	cmp	r3, #2
 8000af4:	d131      	bne.n	8000b5a <_ZN12GPIO_Handler9GPIO_InitEv+0x296>
		// configure alt function register
		uint8_t temp1, temp2;
		temp1 = GPIOx_.GPIO_PinConfig.GPIO_PinNumber / 8;
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	791b      	ldrb	r3, [r3, #4]
 8000afa:	08db      	lsrs	r3, r3, #3
 8000afc:	743b      	strb	r3, [r7, #16]
		temp2 = GPIOx_.GPIO_PinConfig.GPIO_PinNumber % 8;
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	791b      	ldrb	r3, [r3, #4]
 8000b02:	f003 0307 	and.w	r3, r3, #7
 8000b06:	73fb      	strb	r3, [r7, #15]
		GPIOx_.pGPIOx->AFR[temp1] &= ~(0xF << (4 * temp2));
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	7c3a      	ldrb	r2, [r7, #16]
 8000b0e:	3208      	adds	r2, #8
 8000b10:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000b14:	7bfb      	ldrb	r3, [r7, #15]
 8000b16:	009b      	lsls	r3, r3, #2
 8000b18:	220f      	movs	r2, #15
 8000b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b1e:	43db      	mvns	r3, r3
 8000b20:	4618      	mov	r0, r3
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	7c3a      	ldrb	r2, [r7, #16]
 8000b28:	4001      	ands	r1, r0
 8000b2a:	3208      	adds	r2, #8
 8000b2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		GPIOx_.pGPIOx->AFR[temp1] |= (GPIOx_.GPIO_PinConfig.GPIO_PinAltFunMode << (4 * temp2));
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	7c3a      	ldrb	r2, [r7, #16]
 8000b36:	3208      	adds	r2, #8
 8000b38:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	7a5b      	ldrb	r3, [r3, #9]
 8000b40:	461a      	mov	r2, r3
 8000b42:	7bfb      	ldrb	r3, [r7, #15]
 8000b44:	009b      	lsls	r3, r3, #2
 8000b46:	fa02 f303 	lsl.w	r3, r2, r3
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	7c3a      	ldrb	r2, [r7, #16]
 8000b52:	4301      	orrs	r1, r0
 8000b54:	3208      	adds	r2, #8
 8000b56:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
 8000b5a:	bf00      	nop
 8000b5c:	3718      	adds	r7, #24
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	40013c00 	.word	0x40013c00
 8000b68:	40023800 	.word	0x40023800
 8000b6c:	40013800 	.word	0x40013800

08000b70 <_ZN12GPIO_Handler11GPIO_DeInitEv>:
 *
 * @brief - Reset GPIO Port
 *
 * @return uint8, b'0000_000x
 */
void GPIO_Handler::GPIO_DeInit() {
 8000b70:	b480      	push	{r7}
 8000b72:	b083      	sub	sp, #12
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
	if(GPIOx_.pGPIOx == GPIOA) {
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	4a48      	ldr	r2, [pc, #288]	; (8000ca0 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x130>)
 8000b7e:	4293      	cmp	r3, r2
 8000b80:	d10c      	bne.n	8000b9c <_ZN12GPIO_Handler11GPIO_DeInitEv+0x2c>
		GPIOA_REG_RESET();
 8000b82:	4b48      	ldr	r3, [pc, #288]	; (8000ca4 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 8000b84:	691b      	ldr	r3, [r3, #16]
 8000b86:	4a47      	ldr	r2, [pc, #284]	; (8000ca4 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 8000b88:	f043 0301 	orr.w	r3, r3, #1
 8000b8c:	6113      	str	r3, [r2, #16]
 8000b8e:	4b45      	ldr	r3, [pc, #276]	; (8000ca4 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 8000b90:	691b      	ldr	r3, [r3, #16]
 8000b92:	4a44      	ldr	r2, [pc, #272]	; (8000ca4 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 8000b94:	f023 0301 	bic.w	r3, r3, #1
 8000b98:	6113      	str	r3, [r2, #16]
		GPIOG_REG_RESET();
	}
	else if (GPIOx_.pGPIOx == GPIOH) {
		GPIOH_REG_RESET();
	}
}
 8000b9a:	e07c      	b.n	8000c96 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x126>
	else if (GPIOx_.pGPIOx == GPIOB) {
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	4a41      	ldr	r2, [pc, #260]	; (8000ca8 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x138>)
 8000ba2:	4293      	cmp	r3, r2
 8000ba4:	d10c      	bne.n	8000bc0 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x50>
		GPIOB_REG_RESET();
 8000ba6:	4b3f      	ldr	r3, [pc, #252]	; (8000ca4 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 8000ba8:	691b      	ldr	r3, [r3, #16]
 8000baa:	4a3e      	ldr	r2, [pc, #248]	; (8000ca4 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 8000bac:	f043 0302 	orr.w	r3, r3, #2
 8000bb0:	6113      	str	r3, [r2, #16]
 8000bb2:	4b3c      	ldr	r3, [pc, #240]	; (8000ca4 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 8000bb4:	691b      	ldr	r3, [r3, #16]
 8000bb6:	4a3b      	ldr	r2, [pc, #236]	; (8000ca4 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 8000bb8:	f023 0302 	bic.w	r3, r3, #2
 8000bbc:	6113      	str	r3, [r2, #16]
}
 8000bbe:	e06a      	b.n	8000c96 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x126>
	else if (GPIOx_.pGPIOx == GPIOC) {
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	4a39      	ldr	r2, [pc, #228]	; (8000cac <_ZN12GPIO_Handler11GPIO_DeInitEv+0x13c>)
 8000bc6:	4293      	cmp	r3, r2
 8000bc8:	d10c      	bne.n	8000be4 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x74>
		GPIOC_REG_RESET();
 8000bca:	4b36      	ldr	r3, [pc, #216]	; (8000ca4 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 8000bcc:	691b      	ldr	r3, [r3, #16]
 8000bce:	4a35      	ldr	r2, [pc, #212]	; (8000ca4 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 8000bd0:	f043 0304 	orr.w	r3, r3, #4
 8000bd4:	6113      	str	r3, [r2, #16]
 8000bd6:	4b33      	ldr	r3, [pc, #204]	; (8000ca4 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 8000bd8:	691b      	ldr	r3, [r3, #16]
 8000bda:	4a32      	ldr	r2, [pc, #200]	; (8000ca4 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 8000bdc:	f023 0304 	bic.w	r3, r3, #4
 8000be0:	6113      	str	r3, [r2, #16]
}
 8000be2:	e058      	b.n	8000c96 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x126>
	else if (GPIOx_.pGPIOx == GPIOD) {
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	4a31      	ldr	r2, [pc, #196]	; (8000cb0 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x140>)
 8000bea:	4293      	cmp	r3, r2
 8000bec:	d10c      	bne.n	8000c08 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x98>
		GPIOD_REG_RESET();
 8000bee:	4b2d      	ldr	r3, [pc, #180]	; (8000ca4 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 8000bf0:	691b      	ldr	r3, [r3, #16]
 8000bf2:	4a2c      	ldr	r2, [pc, #176]	; (8000ca4 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 8000bf4:	f043 0308 	orr.w	r3, r3, #8
 8000bf8:	6113      	str	r3, [r2, #16]
 8000bfa:	4b2a      	ldr	r3, [pc, #168]	; (8000ca4 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 8000bfc:	691b      	ldr	r3, [r3, #16]
 8000bfe:	4a29      	ldr	r2, [pc, #164]	; (8000ca4 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 8000c00:	f023 0308 	bic.w	r3, r3, #8
 8000c04:	6113      	str	r3, [r2, #16]
}
 8000c06:	e046      	b.n	8000c96 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x126>
	else if (GPIOx_.pGPIOx == GPIOE) {
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	4a29      	ldr	r2, [pc, #164]	; (8000cb4 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x144>)
 8000c0e:	4293      	cmp	r3, r2
 8000c10:	d10c      	bne.n	8000c2c <_ZN12GPIO_Handler11GPIO_DeInitEv+0xbc>
		GPIOE_REG_RESET();
 8000c12:	4b24      	ldr	r3, [pc, #144]	; (8000ca4 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 8000c14:	691b      	ldr	r3, [r3, #16]
 8000c16:	4a23      	ldr	r2, [pc, #140]	; (8000ca4 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 8000c18:	f043 0310 	orr.w	r3, r3, #16
 8000c1c:	6113      	str	r3, [r2, #16]
 8000c1e:	4b21      	ldr	r3, [pc, #132]	; (8000ca4 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 8000c20:	691b      	ldr	r3, [r3, #16]
 8000c22:	4a20      	ldr	r2, [pc, #128]	; (8000ca4 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 8000c24:	f023 0310 	bic.w	r3, r3, #16
 8000c28:	6113      	str	r3, [r2, #16]
}
 8000c2a:	e034      	b.n	8000c96 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x126>
	else if (GPIOx_.pGPIOx == GPIOF) {
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4a21      	ldr	r2, [pc, #132]	; (8000cb8 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x148>)
 8000c32:	4293      	cmp	r3, r2
 8000c34:	d10c      	bne.n	8000c50 <_ZN12GPIO_Handler11GPIO_DeInitEv+0xe0>
		GPIOF_REG_RESET();
 8000c36:	4b1b      	ldr	r3, [pc, #108]	; (8000ca4 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 8000c38:	691b      	ldr	r3, [r3, #16]
 8000c3a:	4a1a      	ldr	r2, [pc, #104]	; (8000ca4 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 8000c3c:	f043 0320 	orr.w	r3, r3, #32
 8000c40:	6113      	str	r3, [r2, #16]
 8000c42:	4b18      	ldr	r3, [pc, #96]	; (8000ca4 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 8000c44:	691b      	ldr	r3, [r3, #16]
 8000c46:	4a17      	ldr	r2, [pc, #92]	; (8000ca4 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 8000c48:	f023 0320 	bic.w	r3, r3, #32
 8000c4c:	6113      	str	r3, [r2, #16]
}
 8000c4e:	e022      	b.n	8000c96 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x126>
	else if (GPIOx_.pGPIOx == GPIOG) {
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	4a19      	ldr	r2, [pc, #100]	; (8000cbc <_ZN12GPIO_Handler11GPIO_DeInitEv+0x14c>)
 8000c56:	4293      	cmp	r3, r2
 8000c58:	d10c      	bne.n	8000c74 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x104>
		GPIOG_REG_RESET();
 8000c5a:	4b12      	ldr	r3, [pc, #72]	; (8000ca4 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 8000c5c:	691b      	ldr	r3, [r3, #16]
 8000c5e:	4a11      	ldr	r2, [pc, #68]	; (8000ca4 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 8000c60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c64:	6113      	str	r3, [r2, #16]
 8000c66:	4b0f      	ldr	r3, [pc, #60]	; (8000ca4 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 8000c68:	691b      	ldr	r3, [r3, #16]
 8000c6a:	4a0e      	ldr	r2, [pc, #56]	; (8000ca4 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 8000c6c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000c70:	6113      	str	r3, [r2, #16]
}
 8000c72:	e010      	b.n	8000c96 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x126>
	else if (GPIOx_.pGPIOx == GPIOH) {
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	4a11      	ldr	r2, [pc, #68]	; (8000cc0 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x150>)
 8000c7a:	4293      	cmp	r3, r2
 8000c7c:	d10b      	bne.n	8000c96 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x126>
		GPIOH_REG_RESET();
 8000c7e:	4b09      	ldr	r3, [pc, #36]	; (8000ca4 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 8000c80:	691b      	ldr	r3, [r3, #16]
 8000c82:	4a08      	ldr	r2, [pc, #32]	; (8000ca4 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 8000c84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c88:	6113      	str	r3, [r2, #16]
 8000c8a:	4b06      	ldr	r3, [pc, #24]	; (8000ca4 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 8000c8c:	691b      	ldr	r3, [r3, #16]
 8000c8e:	4a05      	ldr	r2, [pc, #20]	; (8000ca4 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 8000c90:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000c94:	6113      	str	r3, [r2, #16]
}
 8000c96:	bf00      	nop
 8000c98:	370c      	adds	r7, #12
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bc80      	pop	{r7}
 8000c9e:	4770      	bx	lr
 8000ca0:	40020000 	.word	0x40020000
 8000ca4:	40023800 	.word	0x40023800
 8000ca8:	40020400 	.word	0x40020400
 8000cac:	40020800 	.word	0x40020800
 8000cb0:	40020c00 	.word	0x40020c00
 8000cb4:	40021000 	.word	0x40021000
 8000cb8:	40021400 	.word	0x40021400
 8000cbc:	40021800 	.word	0x40021800
 8000cc0:	40021c00 	.word	0x40021c00

08000cc4 <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh>:
 * @param[in] IRQNumber     - IRQNumber IRQ Position number
 * @param[in] EnorDi		- Enable/Disable Flag
 *
 * @return None
 */
void GPIO_Handler::GPIO_IRQInterruptConfig(const uint8_t IRQNumber, const uint8_t EnorDi) {
 8000cc4:	b480      	push	{r7}
 8000cc6:	b083      	sub	sp, #12
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
 8000ccc:	460b      	mov	r3, r1
 8000cce:	70fb      	strb	r3, [r7, #3]
 8000cd0:	4613      	mov	r3, r2
 8000cd2:	70bb      	strb	r3, [r7, #2]
	if(EnorDi == ENABLE) {
 8000cd4:	78bb      	ldrb	r3, [r7, #2]
 8000cd6:	2b01      	cmp	r3, #1
 8000cd8:	d133      	bne.n	8000d42 <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0x7e>
		if (IRQNumber <= 31) {
 8000cda:	78fb      	ldrb	r3, [r7, #3]
 8000cdc:	2b1f      	cmp	r3, #31
 8000cde:	d80a      	bhi.n	8000cf6 <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0x32>
			//	program ISER0 register
			*NVIC_ISER0 |= (1 << IRQNumber);
 8000ce0:	4b34      	ldr	r3, [pc, #208]	; (8000db4 <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0xf0>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	78fa      	ldrb	r2, [r7, #3]
 8000ce6:	2101      	movs	r1, #1
 8000ce8:	fa01 f202 	lsl.w	r2, r1, r2
 8000cec:	4611      	mov	r1, r2
 8000cee:	4a31      	ldr	r2, [pc, #196]	; (8000db4 <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0xf0>)
 8000cf0:	430b      	orrs	r3, r1
 8000cf2:	6013      	str	r3, [r2, #0]
			// program ICE2 register
			*NVIC_ICER2 |= (1 << (IRQNumber % 64));
		}
	}

}
 8000cf4:	e059      	b.n	8000daa <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0xe6>
		} else if (IRQNumber > 31 && IRQNumber < 64) {
 8000cf6:	78fb      	ldrb	r3, [r7, #3]
 8000cf8:	2b1f      	cmp	r3, #31
 8000cfa:	d90f      	bls.n	8000d1c <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0x58>
 8000cfc:	78fb      	ldrb	r3, [r7, #3]
 8000cfe:	2b3f      	cmp	r3, #63	; 0x3f
 8000d00:	d80c      	bhi.n	8000d1c <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0x58>
			*NVIC_ISER1 |= (1 << (IRQNumber % 32));
 8000d02:	4b2d      	ldr	r3, [pc, #180]	; (8000db8 <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0xf4>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	78fa      	ldrb	r2, [r7, #3]
 8000d08:	f002 021f 	and.w	r2, r2, #31
 8000d0c:	2101      	movs	r1, #1
 8000d0e:	fa01 f202 	lsl.w	r2, r1, r2
 8000d12:	4611      	mov	r1, r2
 8000d14:	4a28      	ldr	r2, [pc, #160]	; (8000db8 <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0xf4>)
 8000d16:	430b      	orrs	r3, r1
 8000d18:	6013      	str	r3, [r2, #0]
 8000d1a:	e046      	b.n	8000daa <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0xe6>
		} else if (IRQNumber >= 64 && IRQNumber < 96) {
 8000d1c:	78fb      	ldrb	r3, [r7, #3]
 8000d1e:	2b3f      	cmp	r3, #63	; 0x3f
 8000d20:	d943      	bls.n	8000daa <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0xe6>
 8000d22:	78fb      	ldrb	r3, [r7, #3]
 8000d24:	2b5f      	cmp	r3, #95	; 0x5f
 8000d26:	d840      	bhi.n	8000daa <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0xe6>
			*NVIC_ISER2 |= (1 << (IRQNumber % 64));
 8000d28:	4b24      	ldr	r3, [pc, #144]	; (8000dbc <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0xf8>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	78fa      	ldrb	r2, [r7, #3]
 8000d2e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000d32:	2101      	movs	r1, #1
 8000d34:	fa01 f202 	lsl.w	r2, r1, r2
 8000d38:	4611      	mov	r1, r2
 8000d3a:	4a20      	ldr	r2, [pc, #128]	; (8000dbc <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0xf8>)
 8000d3c:	430b      	orrs	r3, r1
 8000d3e:	6013      	str	r3, [r2, #0]
}
 8000d40:	e033      	b.n	8000daa <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0xe6>
		if (IRQNumber <= 31) {
 8000d42:	78fb      	ldrb	r3, [r7, #3]
 8000d44:	2b1f      	cmp	r3, #31
 8000d46:	d80a      	bhi.n	8000d5e <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0x9a>
			*NVIC_ICER0 |= (1 << IRQNumber);
 8000d48:	4b1d      	ldr	r3, [pc, #116]	; (8000dc0 <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0xfc>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	78fa      	ldrb	r2, [r7, #3]
 8000d4e:	2101      	movs	r1, #1
 8000d50:	fa01 f202 	lsl.w	r2, r1, r2
 8000d54:	4611      	mov	r1, r2
 8000d56:	4a1a      	ldr	r2, [pc, #104]	; (8000dc0 <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0xfc>)
 8000d58:	430b      	orrs	r3, r1
 8000d5a:	6013      	str	r3, [r2, #0]
}
 8000d5c:	e025      	b.n	8000daa <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0xe6>
		} else if (IRQNumber > 31 && IRQNumber < 64) {
 8000d5e:	78fb      	ldrb	r3, [r7, #3]
 8000d60:	2b1f      	cmp	r3, #31
 8000d62:	d90f      	bls.n	8000d84 <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0xc0>
 8000d64:	78fb      	ldrb	r3, [r7, #3]
 8000d66:	2b3f      	cmp	r3, #63	; 0x3f
 8000d68:	d80c      	bhi.n	8000d84 <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0xc0>
			*NVIC_ICER1 |= (1 << (IRQNumber % 32));
 8000d6a:	4b16      	ldr	r3, [pc, #88]	; (8000dc4 <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0x100>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	78fa      	ldrb	r2, [r7, #3]
 8000d70:	f002 021f 	and.w	r2, r2, #31
 8000d74:	2101      	movs	r1, #1
 8000d76:	fa01 f202 	lsl.w	r2, r1, r2
 8000d7a:	4611      	mov	r1, r2
 8000d7c:	4a11      	ldr	r2, [pc, #68]	; (8000dc4 <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0x100>)
 8000d7e:	430b      	orrs	r3, r1
 8000d80:	6013      	str	r3, [r2, #0]
 8000d82:	e012      	b.n	8000daa <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0xe6>
		} else if (IRQNumber >= 64 && IRQNumber < 96) {
 8000d84:	78fb      	ldrb	r3, [r7, #3]
 8000d86:	2b3f      	cmp	r3, #63	; 0x3f
 8000d88:	d90f      	bls.n	8000daa <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0xe6>
 8000d8a:	78fb      	ldrb	r3, [r7, #3]
 8000d8c:	2b5f      	cmp	r3, #95	; 0x5f
 8000d8e:	d80c      	bhi.n	8000daa <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0xe6>
			*NVIC_ICER2 |= (1 << (IRQNumber % 64));
 8000d90:	4b0d      	ldr	r3, [pc, #52]	; (8000dc8 <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0x104>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	78fa      	ldrb	r2, [r7, #3]
 8000d96:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000d9a:	2101      	movs	r1, #1
 8000d9c:	fa01 f202 	lsl.w	r2, r1, r2
 8000da0:	4611      	mov	r1, r2
 8000da2:	4a09      	ldr	r2, [pc, #36]	; (8000dc8 <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0x104>)
 8000da4:	430b      	orrs	r3, r1
 8000da6:	6013      	str	r3, [r2, #0]
}
 8000da8:	e7ff      	b.n	8000daa <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0xe6>
 8000daa:	bf00      	nop
 8000dac:	370c      	adds	r7, #12
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bc80      	pop	{r7}
 8000db2:	4770      	bx	lr
 8000db4:	e000e100 	.word	0xe000e100
 8000db8:	e000e104 	.word	0xe000e104
 8000dbc:	e000e108 	.word	0xe000e108
 8000dc0:	e000e180 	.word	0xe000e180
 8000dc4:	e000e184 	.word	0xe000e184
 8000dc8:	e000e188 	.word	0xe000e188

08000dcc <_ZN12GPIO_Handler22GPIO_IRQPriorityConfigEhh>:
 *
 * @param[in] IRQNumber: IRQ position for EXIT
 * @param[in] IRPriority: 0->15
 * @return None
 */
void GPIO_Handler::GPIO_IRQPriorityConfig(const uint8_t IRQNumber, const uint8_t IRQPriority) {
 8000dcc:	b480      	push	{r7}
 8000dce:	b085      	sub	sp, #20
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
 8000dd4:	460b      	mov	r3, r1
 8000dd6:	70fb      	strb	r3, [r7, #3]
 8000dd8:	4613      	mov	r3, r2
 8000dda:	70bb      	strb	r3, [r7, #2]
	// 1. first lets find out the ipr register
	uint8_t iprx = IRQNumber >> 2;
 8000ddc:	78fb      	ldrb	r3, [r7, #3]
 8000dde:	109b      	asrs	r3, r3, #2
 8000de0:	73fb      	strb	r3, [r7, #15]
	uint8_t iprx_section = IRQNumber % 4;
 8000de2:	78fb      	ldrb	r3, [r7, #3]
 8000de4:	f003 0303 	and.w	r3, r3, #3
 8000de8:	73bb      	strb	r3, [r7, #14]
	uint8_t shift_amount = (8 * iprx_section) + (8 - NO_PR_BITS_IMPLEMENTED);
 8000dea:	7bbb      	ldrb	r3, [r7, #14]
 8000dec:	00db      	lsls	r3, r3, #3
 8000dee:	b2db      	uxtb	r3, r3
 8000df0:	3304      	adds	r3, #4
 8000df2:	737b      	strb	r3, [r7, #13]

	*(NVIC_PR_BASE_ADDR + iprx) |= (IRQPriority << shift_amount);
 8000df4:	7bfb      	ldrb	r3, [r7, #15]
 8000df6:	f103 5360 	add.w	r3, r3, #939524096	; 0x38000000
 8000dfa:	f503 5364 	add.w	r3, r3, #14592	; 0x3900
 8000dfe:	009b      	lsls	r3, r3, #2
 8000e00:	681a      	ldr	r2, [r3, #0]
 8000e02:	78b9      	ldrb	r1, [r7, #2]
 8000e04:	7b7b      	ldrb	r3, [r7, #13]
 8000e06:	fa01 f303 	lsl.w	r3, r1, r3
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	7bfb      	ldrb	r3, [r7, #15]
 8000e0e:	f103 5360 	add.w	r3, r3, #939524096	; 0x38000000
 8000e12:	f503 5364 	add.w	r3, r3, #14592	; 0x3900
 8000e16:	009b      	lsls	r3, r3, #2
 8000e18:	4619      	mov	r1, r3
 8000e1a:	ea42 0300 	orr.w	r3, r2, r0
 8000e1e:	600b      	str	r3, [r1, #0]
}
 8000e20:	bf00      	nop
 8000e22:	3714      	adds	r7, #20
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bc80      	pop	{r7}
 8000e28:	4770      	bx	lr

08000e2a <_ZL14get_irq_pinNumh>:
    }

}


static inline uint8_t get_irq_pinNum(uint8_t PinNumber) {
 8000e2a:	b480      	push	{r7}
 8000e2c:	b083      	sub	sp, #12
 8000e2e:	af00      	add	r7, sp, #0
 8000e30:	4603      	mov	r3, r0
 8000e32:	71fb      	strb	r3, [r7, #7]
	return (PinNumber < 5) 	? PinNumber + 6 : \
		   (PinNumber < 10)	? IRQ_NO_EXTI9_5 : \
		   (PinNumber < 16) ? IRQ_NO_EXTI15_10 : 0;
 8000e34:	79fb      	ldrb	r3, [r7, #7]
 8000e36:	2b04      	cmp	r3, #4
 8000e38:	d803      	bhi.n	8000e42 <_ZL14get_irq_pinNumh+0x18>
 8000e3a:	79fb      	ldrb	r3, [r7, #7]
 8000e3c:	3306      	adds	r3, #6
 8000e3e:	b2db      	uxtb	r3, r3
 8000e40:	e00a      	b.n	8000e58 <_ZL14get_irq_pinNumh+0x2e>
 8000e42:	79fb      	ldrb	r3, [r7, #7]
 8000e44:	2b09      	cmp	r3, #9
 8000e46:	d906      	bls.n	8000e56 <_ZL14get_irq_pinNumh+0x2c>
 8000e48:	79fb      	ldrb	r3, [r7, #7]
 8000e4a:	2b0f      	cmp	r3, #15
 8000e4c:	d801      	bhi.n	8000e52 <_ZL14get_irq_pinNumh+0x28>
 8000e4e:	2328      	movs	r3, #40	; 0x28
 8000e50:	e002      	b.n	8000e58 <_ZL14get_irq_pinNumh+0x2e>
 8000e52:	2300      	movs	r3, #0
 8000e54:	e000      	b.n	8000e58 <_ZL14get_irq_pinNumh+0x2e>
 8000e56:	2317      	movs	r3, #23
}
 8000e58:	4618      	mov	r0, r3
 8000e5a:	370c      	adds	r7, #12
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bc80      	pop	{r7}
 8000e60:	4770      	bx	lr

08000e62 <_ZN11SPI_HandlerC1EP12SPI_RegDef_thhhhhhh>:
/*********************************************************************
 * @class      		  - GPIO_Handler Constructor
 *
 * @brief             -
 **********************************************************************/
SPI_Handler::SPI_Handler(SPI_RegDef_t *SPIx_ADDR,
 8000e62:	b580      	push	{r7, lr}
 8000e64:	b084      	sub	sp, #16
 8000e66:	af00      	add	r7, sp, #0
 8000e68:	60f8      	str	r0, [r7, #12]
 8000e6a:	60b9      	str	r1, [r7, #8]
 8000e6c:	4611      	mov	r1, r2
 8000e6e:	461a      	mov	r2, r3
 8000e70:	460b      	mov	r3, r1
 8000e72:	71fb      	strb	r3, [r7, #7]
 8000e74:	4613      	mov	r3, r2
 8000e76:	71bb      	strb	r3, [r7, #6]
                         uint8_t BusConfig,
                         uint8_t SclkSpeed,
                         uint8_t DFF,
                         uint8_t CPOL,
                         uint8_t CPHA,
                         uint8_t SSM) {
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	2320      	movs	r3, #32
 8000e7e:	461a      	mov	r2, r3
 8000e80:	2100      	movs	r1, #0
 8000e82:	f000 fca3 	bl	80017cc <memset>
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	3320      	adds	r3, #32
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f000 fafc 	bl	8001488 <_ZNSt10unique_ptrI12GPIO_HandlerSt14default_deleteIS0_EEC1IS2_vEEv>
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	3324      	adds	r3, #36	; 0x24
 8000e94:	4618      	mov	r0, r3
 8000e96:	f000 faf7 	bl	8001488 <_ZNSt10unique_ptrI12GPIO_HandlerSt14default_deleteIS0_EEC1IS2_vEEv>
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	3328      	adds	r3, #40	; 0x28
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f000 faf2 	bl	8001488 <_ZNSt10unique_ptrI12GPIO_HandlerSt14default_deleteIS0_EEC1IS2_vEEv>
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	332c      	adds	r3, #44	; 0x2c
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f000 faed 	bl	8001488 <_ZNSt10unique_ptrI12GPIO_HandlerSt14default_deleteIS0_EEC1IS2_vEEv>
    SPIx_.pSPIx = SPIx_ADDR;
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	68ba      	ldr	r2, [r7, #8]
 8000eb2:	601a      	str	r2, [r3, #0]
    SPIx_.SPIConfig.SPI_DeviceMode = DeviceMode;
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	79fa      	ldrb	r2, [r7, #7]
 8000eb8:	711a      	strb	r2, [r3, #4]
    SPIx_.SPIConfig.SPI_BusConfig = BusConfig;
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	79ba      	ldrb	r2, [r7, #6]
 8000ebe:	715a      	strb	r2, [r3, #5]
    SPIx_.SPIConfig.SPI_SclkSpeed = SclkSpeed;
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	7e3a      	ldrb	r2, [r7, #24]
 8000ec4:	719a      	strb	r2, [r3, #6]
    SPIx_.SPIConfig.SPI_DFF = DFF;
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	7f3a      	ldrb	r2, [r7, #28]
 8000eca:	71da      	strb	r2, [r3, #7]
    SPIx_.SPIConfig.SPI_CPOL = CPOL;
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000ed2:	721a      	strb	r2, [r3, #8]
    SPIx_.SPIConfig.SPI_CPHA = CPHA;
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8000eda:	725a      	strb	r2, [r3, #9]
    SPIx_.SPIConfig.SPI_SSM = SSM;
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8000ee2:	729a      	strb	r2, [r3, #10]
    SPI_GPIOs_Init();
 8000ee4:	68f8      	ldr	r0, [r7, #12]
 8000ee6:	f000 f87f 	bl	8000fe8 <_ZN11SPI_Handler14SPI_GPIOs_InitEv>
    SPI_PeriClockControl();
 8000eea:	68f8      	ldr	r0, [r7, #12]
 8000eec:	f000 f83a 	bl	8000f64 <_ZN11SPI_Handler20SPI_PeriClockControlEv>
    SPI_Init();
 8000ef0:	68f8      	ldr	r0, [r7, #12]
 8000ef2:	f000 f8f3 	bl	80010dc <_ZN11SPI_Handler8SPI_InitEv>
    SPI_SSIConfig(ENABLE);
 8000ef6:	2101      	movs	r1, #1
 8000ef8:	68f8      	ldr	r0, [r7, #12]
 8000efa:	f000 fa49 	bl	8001390 <_ZN11SPI_Handler13SPI_SSIConfigEh>
    if(SPI_SSM_EN == SPIx_.SPIConfig.SPI_SSM) {
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	7a9b      	ldrb	r3, [r3, #10]
 8000f02:	2b01      	cmp	r3, #1
 8000f04:	d104      	bne.n	8000f10 <_ZN11SPI_HandlerC1EP12SPI_RegDef_thhhhhhh+0xae>
    	SPI_SSOEConfig(DISABLE);
 8000f06:	2100      	movs	r1, #0
 8000f08:	68f8      	ldr	r0, [r7, #12]
 8000f0a:	f000 fa22 	bl	8001352 <_ZN11SPI_Handler14SPI_SSOEConfigEh>
 8000f0e:	e003      	b.n	8000f18 <_ZN11SPI_HandlerC1EP12SPI_RegDef_thhhhhhh+0xb6>
    }
    else {
    	SPI_SSOEConfig(ENABLE);
 8000f10:	2101      	movs	r1, #1
 8000f12:	68f8      	ldr	r0, [r7, #12]
 8000f14:	f000 fa1d 	bl	8001352 <_ZN11SPI_Handler14SPI_SSOEConfigEh>
    }
}
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	3710      	adds	r7, #16
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}

08000f22 <_ZN11SPI_HandlerD1Ev>:
 *
 * @return None
 *
 * @Node: Be careful when using many Peripheral device in the same PORT
 **********************************************************************/
SPI_Handler::~SPI_Handler(){
 8000f22:	b580      	push	{r7, lr}
 8000f24:	b082      	sub	sp, #8
 8000f26:	af00      	add	r7, sp, #0
 8000f28:	6078      	str	r0, [r7, #4]
	SPI_DeInit();
 8000f2a:	6878      	ldr	r0, [r7, #4]
 8000f2c:	f000 f930 	bl	8001190 <_ZN11SPI_Handler10SPI_DeInitEv>
SPI_Handler::~SPI_Handler(){
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	332c      	adds	r3, #44	; 0x2c
 8000f34:	4618      	mov	r0, r3
 8000f36:	f000 fab7 	bl	80014a8 <_ZNSt10unique_ptrI12GPIO_HandlerSt14default_deleteIS0_EED1Ev>
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	3328      	adds	r3, #40	; 0x28
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f000 fab2 	bl	80014a8 <_ZNSt10unique_ptrI12GPIO_HandlerSt14default_deleteIS0_EED1Ev>
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	3324      	adds	r3, #36	; 0x24
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f000 faad 	bl	80014a8 <_ZNSt10unique_ptrI12GPIO_HandlerSt14default_deleteIS0_EED1Ev>
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	3320      	adds	r3, #32
 8000f52:	4618      	mov	r0, r3
 8000f54:	f000 faa8 	bl	80014a8 <_ZNSt10unique_ptrI12GPIO_HandlerSt14default_deleteIS0_EED1Ev>
}
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	3708      	adds	r7, #8
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
	...

08000f64 <_ZN11SPI_Handler20SPI_PeriClockControlEv>:

// peripheral clock setup
void SPI_Handler::SPI_PeriClockControl() {
 8000f64:	b480      	push	{r7}
 8000f66:	b083      	sub	sp, #12
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
	if (SPI1 == SPIx_.pSPIx) {
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4a18      	ldr	r2, [pc, #96]	; (8000fd4 <_ZN11SPI_Handler20SPI_PeriClockControlEv+0x70>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d106      	bne.n	8000f84 <_ZN11SPI_Handler20SPI_PeriClockControlEv+0x20>
		SPI1_PCLK_EN();
 8000f76:	4b18      	ldr	r3, [pc, #96]	; (8000fd8 <_ZN11SPI_Handler20SPI_PeriClockControlEv+0x74>)
 8000f78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f7a:	4a17      	ldr	r2, [pc, #92]	; (8000fd8 <_ZN11SPI_Handler20SPI_PeriClockControlEv+0x74>)
 8000f7c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000f80:	6453      	str	r3, [r2, #68]	; 0x44
		SPI3_PCLK_EN();
	}
	else if (SPI4 == SPIx_.pSPIx) {
		SPI4_PCLK_EN();
	}
}
 8000f82:	e022      	b.n	8000fca <_ZN11SPI_Handler20SPI_PeriClockControlEv+0x66>
	else if (SPI2 == SPIx_.pSPIx) {
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4a14      	ldr	r2, [pc, #80]	; (8000fdc <_ZN11SPI_Handler20SPI_PeriClockControlEv+0x78>)
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d106      	bne.n	8000f9c <_ZN11SPI_Handler20SPI_PeriClockControlEv+0x38>
		SPI2_PCLK_EN();
 8000f8e:	4b12      	ldr	r3, [pc, #72]	; (8000fd8 <_ZN11SPI_Handler20SPI_PeriClockControlEv+0x74>)
 8000f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f92:	4a11      	ldr	r2, [pc, #68]	; (8000fd8 <_ZN11SPI_Handler20SPI_PeriClockControlEv+0x74>)
 8000f94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f98:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000f9a:	e016      	b.n	8000fca <_ZN11SPI_Handler20SPI_PeriClockControlEv+0x66>
	else if (SPI3 == SPIx_.pSPIx) {
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4a0f      	ldr	r2, [pc, #60]	; (8000fe0 <_ZN11SPI_Handler20SPI_PeriClockControlEv+0x7c>)
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d106      	bne.n	8000fb4 <_ZN11SPI_Handler20SPI_PeriClockControlEv+0x50>
		SPI3_PCLK_EN();
 8000fa6:	4b0c      	ldr	r3, [pc, #48]	; (8000fd8 <_ZN11SPI_Handler20SPI_PeriClockControlEv+0x74>)
 8000fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000faa:	4a0b      	ldr	r2, [pc, #44]	; (8000fd8 <_ZN11SPI_Handler20SPI_PeriClockControlEv+0x74>)
 8000fac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000fb0:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000fb2:	e00a      	b.n	8000fca <_ZN11SPI_Handler20SPI_PeriClockControlEv+0x66>
	else if (SPI4 == SPIx_.pSPIx) {
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a0a      	ldr	r2, [pc, #40]	; (8000fe4 <_ZN11SPI_Handler20SPI_PeriClockControlEv+0x80>)
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	d105      	bne.n	8000fca <_ZN11SPI_Handler20SPI_PeriClockControlEv+0x66>
		SPI4_PCLK_EN();
 8000fbe:	4b06      	ldr	r3, [pc, #24]	; (8000fd8 <_ZN11SPI_Handler20SPI_PeriClockControlEv+0x74>)
 8000fc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fc2:	4a05      	ldr	r2, [pc, #20]	; (8000fd8 <_ZN11SPI_Handler20SPI_PeriClockControlEv+0x74>)
 8000fc4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000fc8:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000fca:	bf00      	nop
 8000fcc:	370c      	adds	r7, #12
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bc80      	pop	{r7}
 8000fd2:	4770      	bx	lr
 8000fd4:	40013000 	.word	0x40013000
 8000fd8:	40023800 	.word	0x40023800
 8000fdc:	40003800 	.word	0x40003800
 8000fe0:	40003c00 	.word	0x40003c00
 8000fe4:	40013400 	.word	0x40013400

08000fe8 <_ZN11SPI_Handler14SPI_GPIOs_InitEv>:
 *
 * @param None
 *
 * @return None
 **********************************************************************/
void SPI_Handler::SPI_GPIOs_Init() {
 8000fe8:	b5b0      	push	{r4, r5, r7, lr}
 8000fea:	b088      	sub	sp, #32
 8000fec:	af06      	add	r7, sp, #24
 8000fee:	6078      	str	r0, [r7, #4]
	SPI_Sck.reset( new GPIO_Handler(GPIOA,
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	f103 0420 	add.w	r4, r3, #32
									GPIO_MODE_ALTFN,
									GPIO_SPEED_HIGH,
									IRQ_Prio_NO_15,
									GPIO_OP_TYPE_PP,
									GPIO_NO_PUPD,
									5) );
 8000ff6:	200c      	movs	r0, #12
 8000ff8:	f000 fb8a 	bl	8001710 <_Znwj>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	461d      	mov	r5, r3
 8001000:	2305      	movs	r3, #5
 8001002:	9304      	str	r3, [sp, #16]
 8001004:	2300      	movs	r3, #0
 8001006:	9303      	str	r3, [sp, #12]
 8001008:	2300      	movs	r3, #0
 800100a:	9302      	str	r3, [sp, #8]
 800100c:	230f      	movs	r3, #15
 800100e:	9301      	str	r3, [sp, #4]
 8001010:	2303      	movs	r3, #3
 8001012:	9300      	str	r3, [sp, #0]
 8001014:	2302      	movs	r3, #2
 8001016:	2205      	movs	r2, #5
 8001018:	492f      	ldr	r1, [pc, #188]	; (80010d8 <_ZN11SPI_Handler14SPI_GPIOs_InitEv+0xf0>)
 800101a:	4628      	mov	r0, r5
 800101c:	f7ff fb80 	bl	8000720 <_ZN12GPIO_HandlerC1EP13GPIO_RegDef_thhhhhhh>
	SPI_Sck.reset( new GPIO_Handler(GPIOA,
 8001020:	4629      	mov	r1, r5
 8001022:	4620      	mov	r0, r4
 8001024:	f000 fa5f 	bl	80014e6 <_ZNSt10unique_ptrI12GPIO_HandlerSt14default_deleteIS0_EE5resetEPS0_>

	SPI_MOSI.reset( new GPIO_Handler(GPIOA,
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	f103 0424 	add.w	r4, r3, #36	; 0x24
									GPIO_MODE_ALTFN,
									GPIO_SPEED_HIGH,
									IRQ_Prio_NO_15,
									GPIO_OP_TYPE_PP,
									GPIO_NO_PUPD,
									5) );
 800102e:	200c      	movs	r0, #12
 8001030:	f000 fb6e 	bl	8001710 <_Znwj>
 8001034:	4603      	mov	r3, r0
 8001036:	461d      	mov	r5, r3
 8001038:	2305      	movs	r3, #5
 800103a:	9304      	str	r3, [sp, #16]
 800103c:	2300      	movs	r3, #0
 800103e:	9303      	str	r3, [sp, #12]
 8001040:	2300      	movs	r3, #0
 8001042:	9302      	str	r3, [sp, #8]
 8001044:	230f      	movs	r3, #15
 8001046:	9301      	str	r3, [sp, #4]
 8001048:	2303      	movs	r3, #3
 800104a:	9300      	str	r3, [sp, #0]
 800104c:	2302      	movs	r3, #2
 800104e:	2207      	movs	r2, #7
 8001050:	4921      	ldr	r1, [pc, #132]	; (80010d8 <_ZN11SPI_Handler14SPI_GPIOs_InitEv+0xf0>)
 8001052:	4628      	mov	r0, r5
 8001054:	f7ff fb64 	bl	8000720 <_ZN12GPIO_HandlerC1EP13GPIO_RegDef_thhhhhhh>
	SPI_MOSI.reset( new GPIO_Handler(GPIOA,
 8001058:	4629      	mov	r1, r5
 800105a:	4620      	mov	r0, r4
 800105c:	f000 fa43 	bl	80014e6 <_ZNSt10unique_ptrI12GPIO_HandlerSt14default_deleteIS0_EE5resetEPS0_>

	SPI_MISO.reset( new GPIO_Handler(GPIOA,
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	f103 0428 	add.w	r4, r3, #40	; 0x28
									GPIO_MODE_ALTFN,
									GPIO_SPEED_HIGH,
									IRQ_Prio_NO_15,
									GPIO_OP_TYPE_PP,
									GPIO_NO_PUPD,
									5) );
 8001066:	200c      	movs	r0, #12
 8001068:	f000 fb52 	bl	8001710 <_Znwj>
 800106c:	4603      	mov	r3, r0
 800106e:	461d      	mov	r5, r3
 8001070:	2305      	movs	r3, #5
 8001072:	9304      	str	r3, [sp, #16]
 8001074:	2300      	movs	r3, #0
 8001076:	9303      	str	r3, [sp, #12]
 8001078:	2300      	movs	r3, #0
 800107a:	9302      	str	r3, [sp, #8]
 800107c:	230f      	movs	r3, #15
 800107e:	9301      	str	r3, [sp, #4]
 8001080:	2303      	movs	r3, #3
 8001082:	9300      	str	r3, [sp, #0]
 8001084:	2302      	movs	r3, #2
 8001086:	2206      	movs	r2, #6
 8001088:	4913      	ldr	r1, [pc, #76]	; (80010d8 <_ZN11SPI_Handler14SPI_GPIOs_InitEv+0xf0>)
 800108a:	4628      	mov	r0, r5
 800108c:	f7ff fb48 	bl	8000720 <_ZN12GPIO_HandlerC1EP13GPIO_RegDef_thhhhhhh>
	SPI_MISO.reset( new GPIO_Handler(GPIOA,
 8001090:	4629      	mov	r1, r5
 8001092:	4620      	mov	r0, r4
 8001094:	f000 fa27 	bl	80014e6 <_ZNSt10unique_ptrI12GPIO_HandlerSt14default_deleteIS0_EE5resetEPS0_>



	SPI_NSS.reset( new GPIO_Handler(GPIOA,
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	f103 042c 	add.w	r4, r3, #44	; 0x2c
									GPIO_MODE_ALTFN,
									GPIO_SPEED_HIGH,
									IRQ_Prio_NO_15,
									GPIO_OP_TYPE_PP,
									GPIO_NO_PUPD,
									5) );
 800109e:	200c      	movs	r0, #12
 80010a0:	f000 fb36 	bl	8001710 <_Znwj>
 80010a4:	4603      	mov	r3, r0
 80010a6:	461d      	mov	r5, r3
 80010a8:	2305      	movs	r3, #5
 80010aa:	9304      	str	r3, [sp, #16]
 80010ac:	2300      	movs	r3, #0
 80010ae:	9303      	str	r3, [sp, #12]
 80010b0:	2300      	movs	r3, #0
 80010b2:	9302      	str	r3, [sp, #8]
 80010b4:	230f      	movs	r3, #15
 80010b6:	9301      	str	r3, [sp, #4]
 80010b8:	2303      	movs	r3, #3
 80010ba:	9300      	str	r3, [sp, #0]
 80010bc:	2302      	movs	r3, #2
 80010be:	2204      	movs	r2, #4
 80010c0:	4905      	ldr	r1, [pc, #20]	; (80010d8 <_ZN11SPI_Handler14SPI_GPIOs_InitEv+0xf0>)
 80010c2:	4628      	mov	r0, r5
 80010c4:	f7ff fb2c 	bl	8000720 <_ZN12GPIO_HandlerC1EP13GPIO_RegDef_thhhhhhh>
	SPI_NSS.reset( new GPIO_Handler(GPIOA,
 80010c8:	4629      	mov	r1, r5
 80010ca:	4620      	mov	r0, r4
 80010cc:	f000 fa0b 	bl	80014e6 <_ZNSt10unique_ptrI12GPIO_HandlerSt14default_deleteIS0_EE5resetEPS0_>
}
 80010d0:	bf00      	nop
 80010d2:	3708      	adds	r7, #8
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bdb0      	pop	{r4, r5, r7, pc}
 80010d8:	40020000 	.word	0x40020000

080010dc <_ZN11SPI_Handler8SPI_InitEv>:
 *
 * @param None
 *
 * @return None
 **********************************************************************/
void SPI_Handler::SPI_Init() {
 80010dc:	b480      	push	{r7}
 80010de:	b085      	sub	sp, #20
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
    // Lets configure the SPI_CR1 register
    uint32_t tempReg = 0;
 80010e4:	2300      	movs	r3, #0
 80010e6:	60fb      	str	r3, [r7, #12]

    // 1. configure the device mode
    tempReg |= SPIx_.SPIConfig.SPI_DeviceMode << SPI_CR1_MSTR;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	791b      	ldrb	r3, [r3, #4]
 80010ec:	009b      	lsls	r3, r3, #2
 80010ee:	461a      	mov	r2, r3
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	4313      	orrs	r3, r2
 80010f4:	60fb      	str	r3, [r7, #12]
    // 2. configure the bus config
    if(SPI_BUS_CONFIG_FD == SPIx_.SPIConfig.SPI_BusConfig) {
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	795b      	ldrb	r3, [r3, #5]
 80010fa:	2b01      	cmp	r3, #1
 80010fc:	d104      	bne.n	8001108 <_ZN11SPI_Handler8SPI_InitEv+0x2c>
        // bidi mode should be cleared
        tempReg &= ~(1 << SPI_CR1_BIDIMODE);
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001104:	60fb      	str	r3, [r7, #12]
 8001106:	e018      	b.n	800113a <_ZN11SPI_Handler8SPI_InitEv+0x5e>
    }
    else if(SPI_BUS_CONFIG_HD == SPIx_.SPIConfig.SPI_BusConfig) {
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	795b      	ldrb	r3, [r3, #5]
 800110c:	2b02      	cmp	r3, #2
 800110e:	d108      	bne.n	8001122 <_ZN11SPI_Handler8SPI_InitEv+0x46>
        // bidi mode should be set
        tempReg |= (1 << SPI_CR1_BIDIMODE);
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001116:	60fb      	str	r3, [r7, #12]
        // bidioe mode should be set
        tempReg |= (1 << SPI_CR1_BIDIOE);
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800111e:	60fb      	str	r3, [r7, #12]
 8001120:	e00b      	b.n	800113a <_ZN11SPI_Handler8SPI_InitEv+0x5e>
    }
    else if(SPI_BUS_CONFIG_SIMPLEX_RXONLY == SPIx_.SPIConfig.SPI_BusConfig) {
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	795b      	ldrb	r3, [r3, #5]
 8001126:	2b03      	cmp	r3, #3
 8001128:	d107      	bne.n	800113a <_ZN11SPI_Handler8SPI_InitEv+0x5e>
        // bidi mode should be cleared, for active SCLK, because SLCK is only activate when MOSI is activate
        tempReg &= ~(1 << SPI_CR1_BIDIMODE);
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001130:	60fb      	str	r3, [r7, #12]
        // RXONLY should be set
        tempReg |= (1 << SPI_CR1_RXONLY);
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001138:	60fb      	str	r3, [r7, #12]
    }

    // 3. configure for clock speed
    tempReg |= (SPIx_.SPIConfig.SPI_SclkSpeed << SPI_CR1_BR);
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	799b      	ldrb	r3, [r3, #6]
 800113e:	00db      	lsls	r3, r3, #3
 8001140:	461a      	mov	r2, r3
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	4313      	orrs	r3, r2
 8001146:	60fb      	str	r3, [r7, #12]

    // 4. configure for data format
    tempReg |= (SPIx_.SPIConfig.SPI_DFF << SPI_CR1_DFF);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	79db      	ldrb	r3, [r3, #7]
 800114c:	02db      	lsls	r3, r3, #11
 800114e:	461a      	mov	r2, r3
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	4313      	orrs	r3, r2
 8001154:	60fb      	str	r3, [r7, #12]

    // 5. configure CPOL
    tempReg |= (SPIx_.SPIConfig.SPI_CPOL << SPI_CR1_CPOL);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	7a1b      	ldrb	r3, [r3, #8]
 800115a:	005b      	lsls	r3, r3, #1
 800115c:	461a      	mov	r2, r3
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	4313      	orrs	r3, r2
 8001162:	60fb      	str	r3, [r7, #12]

    // 6. configure CPOA
    tempReg |= (SPIx_.SPIConfig.SPI_CPHA << SPI_CR1_CPHA);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	7a5b      	ldrb	r3, [r3, #9]
 8001168:	461a      	mov	r2, r3
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	4313      	orrs	r3, r2
 800116e:	60fb      	str	r3, [r7, #12]

    tempReg |= (SPIx_.SPIConfig.SPI_SSM << SPI_CR1_SSM);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	7a9b      	ldrb	r3, [r3, #10]
 8001174:	025b      	lsls	r3, r3, #9
 8001176:	461a      	mov	r2, r3
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	4313      	orrs	r3, r2
 800117c:	60fb      	str	r3, [r7, #12]

    SPIx_.pSPIx->CR1 = tempReg;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	68fa      	ldr	r2, [r7, #12]
 8001184:	601a      	str	r2, [r3, #0]
}
 8001186:	bf00      	nop
 8001188:	3714      	adds	r7, #20
 800118a:	46bd      	mov	sp, r7
 800118c:	bc80      	pop	{r7}
 800118e:	4770      	bx	lr

08001190 <_ZN11SPI_Handler10SPI_DeInitEv>:
 *
 * @param None
 *
 * @return None
 **********************************************************************/
void SPI_Handler::SPI_DeInit() {
 8001190:	b480      	push	{r7}
 8001192:	b083      	sub	sp, #12
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
	if (SPI1 == SPIx_.pSPIx) {
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4a24      	ldr	r2, [pc, #144]	; (8001230 <_ZN11SPI_Handler10SPI_DeInitEv+0xa0>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d10c      	bne.n	80011bc <_ZN11SPI_Handler10SPI_DeInitEv+0x2c>
		SPI1_REG_RESET();
 80011a2:	4b24      	ldr	r3, [pc, #144]	; (8001234 <_ZN11SPI_Handler10SPI_DeInitEv+0xa4>)
 80011a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011a6:	4a23      	ldr	r2, [pc, #140]	; (8001234 <_ZN11SPI_Handler10SPI_DeInitEv+0xa4>)
 80011a8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80011ac:	6253      	str	r3, [r2, #36]	; 0x24
 80011ae:	4b21      	ldr	r3, [pc, #132]	; (8001234 <_ZN11SPI_Handler10SPI_DeInitEv+0xa4>)
 80011b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011b2:	4a20      	ldr	r2, [pc, #128]	; (8001234 <_ZN11SPI_Handler10SPI_DeInitEv+0xa4>)
 80011b4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80011b8:	6253      	str	r3, [r2, #36]	; 0x24
		SPI3_REG_RESET();
	}
	else if (SPI4 == SPIx_.pSPIx) {
		SPI4_REG_RESET();
	}
}
 80011ba:	e034      	b.n	8001226 <_ZN11SPI_Handler10SPI_DeInitEv+0x96>
	else if (SPI2 == SPIx_.pSPIx) {
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a1d      	ldr	r2, [pc, #116]	; (8001238 <_ZN11SPI_Handler10SPI_DeInitEv+0xa8>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d10c      	bne.n	80011e0 <_ZN11SPI_Handler10SPI_DeInitEv+0x50>
		SPI2_REG_RESET();
 80011c6:	4b1b      	ldr	r3, [pc, #108]	; (8001234 <_ZN11SPI_Handler10SPI_DeInitEv+0xa4>)
 80011c8:	6a1b      	ldr	r3, [r3, #32]
 80011ca:	4a1a      	ldr	r2, [pc, #104]	; (8001234 <_ZN11SPI_Handler10SPI_DeInitEv+0xa4>)
 80011cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011d0:	6213      	str	r3, [r2, #32]
 80011d2:	4b18      	ldr	r3, [pc, #96]	; (8001234 <_ZN11SPI_Handler10SPI_DeInitEv+0xa4>)
 80011d4:	6a1b      	ldr	r3, [r3, #32]
 80011d6:	4a17      	ldr	r2, [pc, #92]	; (8001234 <_ZN11SPI_Handler10SPI_DeInitEv+0xa4>)
 80011d8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80011dc:	6213      	str	r3, [r2, #32]
}
 80011de:	e022      	b.n	8001226 <_ZN11SPI_Handler10SPI_DeInitEv+0x96>
	else if (SPI3 == SPIx_.pSPIx) {
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4a15      	ldr	r2, [pc, #84]	; (800123c <_ZN11SPI_Handler10SPI_DeInitEv+0xac>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d10c      	bne.n	8001204 <_ZN11SPI_Handler10SPI_DeInitEv+0x74>
		SPI3_REG_RESET();
 80011ea:	4b12      	ldr	r3, [pc, #72]	; (8001234 <_ZN11SPI_Handler10SPI_DeInitEv+0xa4>)
 80011ec:	6a1b      	ldr	r3, [r3, #32]
 80011ee:	4a11      	ldr	r2, [pc, #68]	; (8001234 <_ZN11SPI_Handler10SPI_DeInitEv+0xa4>)
 80011f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80011f4:	6213      	str	r3, [r2, #32]
 80011f6:	4b0f      	ldr	r3, [pc, #60]	; (8001234 <_ZN11SPI_Handler10SPI_DeInitEv+0xa4>)
 80011f8:	6a1b      	ldr	r3, [r3, #32]
 80011fa:	4a0e      	ldr	r2, [pc, #56]	; (8001234 <_ZN11SPI_Handler10SPI_DeInitEv+0xa4>)
 80011fc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001200:	6213      	str	r3, [r2, #32]
}
 8001202:	e010      	b.n	8001226 <_ZN11SPI_Handler10SPI_DeInitEv+0x96>
	else if (SPI4 == SPIx_.pSPIx) {
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4a0d      	ldr	r2, [pc, #52]	; (8001240 <_ZN11SPI_Handler10SPI_DeInitEv+0xb0>)
 800120a:	4293      	cmp	r3, r2
 800120c:	d10b      	bne.n	8001226 <_ZN11SPI_Handler10SPI_DeInitEv+0x96>
		SPI4_REG_RESET();
 800120e:	4b09      	ldr	r3, [pc, #36]	; (8001234 <_ZN11SPI_Handler10SPI_DeInitEv+0xa4>)
 8001210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001212:	4a08      	ldr	r2, [pc, #32]	; (8001234 <_ZN11SPI_Handler10SPI_DeInitEv+0xa4>)
 8001214:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001218:	6253      	str	r3, [r2, #36]	; 0x24
 800121a:	4b06      	ldr	r3, [pc, #24]	; (8001234 <_ZN11SPI_Handler10SPI_DeInitEv+0xa4>)
 800121c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800121e:	4a05      	ldr	r2, [pc, #20]	; (8001234 <_ZN11SPI_Handler10SPI_DeInitEv+0xa4>)
 8001220:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001224:	6253      	str	r3, [r2, #36]	; 0x24
}
 8001226:	bf00      	nop
 8001228:	370c      	adds	r7, #12
 800122a:	46bd      	mov	sp, r7
 800122c:	bc80      	pop	{r7}
 800122e:	4770      	bx	lr
 8001230:	40013000 	.word	0x40013000
 8001234:	40023800 	.word	0x40023800
 8001238:	40003800 	.word	0x40003800
 800123c:	40003c00 	.word	0x40003c00
 8001240:	40013400 	.word	0x40013400

08001244 <_ZN11SPI_Handler21SPI_PeripheralControlEh>:
 *
 * @param None
 *
 * @return None
 **********************************************************************/
void SPI_Handler::SPI_PeripheralControl(uint8_t EnOrDi) {
 8001244:	b480      	push	{r7}
 8001246:	b083      	sub	sp, #12
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
 800124c:	460b      	mov	r3, r1
 800124e:	70fb      	strb	r3, [r7, #3]
    if(ENABLE == EnOrDi) {
 8001250:	78fb      	ldrb	r3, [r7, #3]
 8001252:	2b01      	cmp	r3, #1
 8001254:	d108      	bne.n	8001268 <_ZN11SPI_Handler21SPI_PeripheralControlEh+0x24>
        SPIx_.pSPIx->CR1 |= (1 << SPI_CR1_SPE);
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	681a      	ldr	r2, [r3, #0]
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001264:	601a      	str	r2, [r3, #0]
    }
    else {
        SPIx_.pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
    }
}
 8001266:	e007      	b.n	8001278 <_ZN11SPI_Handler21SPI_PeripheralControlEh+0x34>
        SPIx_.pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	681a      	ldr	r2, [r3, #0]
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001276:	601a      	str	r2, [r3, #0]
}
 8001278:	bf00      	nop
 800127a:	370c      	adds	r7, #12
 800127c:	46bd      	mov	sp, r7
 800127e:	bc80      	pop	{r7}
 8001280:	4770      	bx	lr

08001282 <_ZN11SPI_Handler17SPI_GetFlagStatusEh>:
 *
 * @param None
 *
 * @return None
 **********************************************************************/
uint8_t SPI_Handler::SPI_GetFlagStatus(uint8_t FlagName) {
 8001282:	b480      	push	{r7}
 8001284:	b083      	sub	sp, #12
 8001286:	af00      	add	r7, sp, #0
 8001288:	6078      	str	r0, [r7, #4]
 800128a:	460b      	mov	r3, r1
 800128c:	70fb      	strb	r3, [r7, #3]
    if(SPIx_.pSPIx->SR & FlagName) {
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	689a      	ldr	r2, [r3, #8]
 8001294:	78fb      	ldrb	r3, [r7, #3]
 8001296:	4013      	ands	r3, r2
 8001298:	2b00      	cmp	r3, #0
 800129a:	bf14      	ite	ne
 800129c:	2301      	movne	r3, #1
 800129e:	2300      	moveq	r3, #0
 80012a0:	b2db      	uxtb	r3, r3
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d001      	beq.n	80012aa <_ZN11SPI_Handler17SPI_GetFlagStatusEh+0x28>
        return FLAG_SET;
 80012a6:	2301      	movs	r3, #1
 80012a8:	e000      	b.n	80012ac <_ZN11SPI_Handler17SPI_GetFlagStatusEh+0x2a>
    }
    return FLAG_RESET;
 80012aa:	2300      	movs	r3, #0
}
 80012ac:	4618      	mov	r0, r3
 80012ae:	370c      	adds	r7, #12
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bc80      	pop	{r7}
 80012b4:	4770      	bx	lr

080012b6 <_ZN11SPI_Handler12SPI_SendDataEPhm>:
 * @param None
 * @Node              - This is blocking call
 *
 * @return None
 **********************************************************************/
void SPI_Handler::SPI_SendData(uint8_t *pTxBuffer, uint32_t Len) {
 80012b6:	b580      	push	{r7, lr}
 80012b8:	b084      	sub	sp, #16
 80012ba:	af00      	add	r7, sp, #0
 80012bc:	60f8      	str	r0, [r7, #12]
 80012be:	60b9      	str	r1, [r7, #8]
 80012c0:	607a      	str	r2, [r7, #4]
	if ((SPIx_.pSPIx->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE) {
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f003 0306 	and.w	r3, r3, #6
 80012cc:	2b06      	cmp	r3, #6
 80012ce:	bf14      	ite	ne
 80012d0:	2301      	movne	r3, #1
 80012d2:	2300      	moveq	r3, #0
 80012d4:	b2db      	uxtb	r3, r3
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d003      	beq.n	80012e2 <_ZN11SPI_Handler12SPI_SendDataEPhm+0x2c>
		SPI_PeripheralControl(ENABLE);
 80012da:	2101      	movs	r1, #1
 80012dc:	68f8      	ldr	r0, [r7, #12]
 80012de:	f7ff ffb1 	bl	8001244 <_ZN11SPI_Handler21SPI_PeripheralControlEh>
	}

    while(Len > 0) {
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d030      	beq.n	800134a <_ZN11SPI_Handler12SPI_SendDataEPhm+0x94>
        // 1. wait util tx buffer empty
        while(SPI_GetFlagStatus(SPI_TXE_FLAG) == FLAG_RESET);
 80012e8:	2102      	movs	r1, #2
 80012ea:	68f8      	ldr	r0, [r7, #12]
 80012ec:	f7ff ffc9 	bl	8001282 <_ZN11SPI_Handler17SPI_GetFlagStatusEh>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	bf0c      	ite	eq
 80012f6:	2301      	moveq	r3, #1
 80012f8:	2300      	movne	r3, #0
 80012fa:	b2db      	uxtb	r3, r3
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d000      	beq.n	8001302 <_ZN11SPI_Handler12SPI_SendDataEPhm+0x4c>
 8001300:	e7f2      	b.n	80012e8 <_ZN11SPI_Handler12SPI_SendDataEPhm+0x32>

        // 2. check the DFF bit in CR1
        if(SPIx_.pSPIx->CR1 & (1 << SPI_CR1_DFF)) {
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800130c:	2b00      	cmp	r3, #0
 800130e:	bf14      	ite	ne
 8001310:	2301      	movne	r3, #1
 8001312:	2300      	moveq	r3, #0
 8001314:	b2db      	uxtb	r3, r3
 8001316:	2b00      	cmp	r3, #0
 8001318:	d00b      	beq.n	8001332 <_ZN11SPI_Handler12SPI_SendDataEPhm+0x7c>
            // 16 BIT DFF
            // 1. load the data into the DR
            SPIx_.pSPIx->DR = *((uint16_t *)pTxBuffer);
 800131a:	68bb      	ldr	r3, [r7, #8]
 800131c:	881a      	ldrh	r2, [r3, #0]
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	60da      	str	r2, [r3, #12]
            Len -= 2;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	3b02      	subs	r3, #2
 8001328:	607b      	str	r3, [r7, #4]
            (uint16_t *)pTxBuffer++;
 800132a:	68bb      	ldr	r3, [r7, #8]
 800132c:	3301      	adds	r3, #1
 800132e:	60bb      	str	r3, [r7, #8]
 8001330:	e7d7      	b.n	80012e2 <_ZN11SPI_Handler12SPI_SendDataEPhm+0x2c>
        }
        else {
            SPIx_.pSPIx->DR = *pTxBuffer;
 8001332:	68bb      	ldr	r3, [r7, #8]
 8001334:	781a      	ldrb	r2, [r3, #0]
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	60da      	str	r2, [r3, #12]
            Len -= 1;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	3b01      	subs	r3, #1
 8001340:	607b      	str	r3, [r7, #4]
            pTxBuffer++;
 8001342:	68bb      	ldr	r3, [r7, #8]
 8001344:	3301      	adds	r3, #1
 8001346:	60bb      	str	r3, [r7, #8]
    while(Len > 0) {
 8001348:	e7cb      	b.n	80012e2 <_ZN11SPI_Handler12SPI_SendDataEPhm+0x2c>
        }
    }
}
 800134a:	bf00      	nop
 800134c:	3710      	adds	r7, #16
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}

08001352 <_ZN11SPI_Handler14SPI_SSOEConfigEh>:
//	answer = SPIx_.pSPIx->DR;
//	return answer;
//}


void SPI_Handler::SPI_SSOEConfig(uint8_t EnOrDi) {
 8001352:	b480      	push	{r7}
 8001354:	b083      	sub	sp, #12
 8001356:	af00      	add	r7, sp, #0
 8001358:	6078      	str	r0, [r7, #4]
 800135a:	460b      	mov	r3, r1
 800135c:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE) {
 800135e:	78fb      	ldrb	r3, [r7, #3]
 8001360:	2b01      	cmp	r3, #1
 8001362:	d108      	bne.n	8001376 <_ZN11SPI_Handler14SPI_SSOEConfigEh+0x24>
		SPIx_.pSPIx->CR2 |= (1 << SPI_CR2_SSOE);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	685a      	ldr	r2, [r3, #4]
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f042 0204 	orr.w	r2, r2, #4
 8001372:	605a      	str	r2, [r3, #4]
	}
	else {
		SPIx_.pSPIx->CR2 &= ~(1 << SPI_CR2_SSOE);
	}
}
 8001374:	e007      	b.n	8001386 <_ZN11SPI_Handler14SPI_SSOEConfigEh+0x34>
		SPIx_.pSPIx->CR2 &= ~(1 << SPI_CR2_SSOE);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	685a      	ldr	r2, [r3, #4]
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f022 0204 	bic.w	r2, r2, #4
 8001384:	605a      	str	r2, [r3, #4]
}
 8001386:	bf00      	nop
 8001388:	370c      	adds	r7, #12
 800138a:	46bd      	mov	sp, r7
 800138c:	bc80      	pop	{r7}
 800138e:	4770      	bx	lr

08001390 <_ZN11SPI_Handler13SPI_SSIConfigEh>:
 *
 * @Note              -

 */
void SPI_Handler::SPI_SSIConfig(uint8_t EnOrDi)
{
 8001390:	b480      	push	{r7}
 8001392:	b083      	sub	sp, #12
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
 8001398:	460b      	mov	r3, r1
 800139a:	70fb      	strb	r3, [r7, #3]
    if(EnOrDi == ENABLE)
 800139c:	78fb      	ldrb	r3, [r7, #3]
 800139e:	2b01      	cmp	r3, #1
 80013a0:	d108      	bne.n	80013b4 <_ZN11SPI_Handler13SPI_SSIConfigEh+0x24>
    {
        SPIx_.pSPIx->CR1 |=  (1 << SPI_CR1_SSI);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	681a      	ldr	r2, [r3, #0]
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80013b0:	601a      	str	r2, [r3, #0]
    }else
    {
        SPIx_.pSPIx->CR1 &=  ~(1 << SPI_CR1_SSI);
    }
}
 80013b2:	e007      	b.n	80013c4 <_ZN11SPI_Handler13SPI_SSIConfigEh+0x34>
        SPIx_.pSPIx->CR1 &=  ~(1 << SPI_CR1_SSI);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	681a      	ldr	r2, [r3, #0]
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80013c2:	601a      	str	r2, [r3, #0]
}
 80013c4:	bf00      	nop
 80013c6:	370c      	adds	r7, #12
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bc80      	pop	{r7}
 80013cc:	4770      	bx	lr

080013ce <_ZN11SPI_Handler15SPI_ReceiveDataEPhm>:


void SPI_Handler::SPI_ReceiveData(uint8_t *pRxBuffer, uint32_t Len)
{
 80013ce:	b580      	push	{r7, lr}
 80013d0:	b084      	sub	sp, #16
 80013d2:	af00      	add	r7, sp, #0
 80013d4:	60f8      	str	r0, [r7, #12]
 80013d6:	60b9      	str	r1, [r7, #8]
 80013d8:	607a      	str	r2, [r7, #4]
	while(Len > 0)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d035      	beq.n	800144c <_ZN11SPI_Handler15SPI_ReceiveDataEPhm+0x7e>
		{
			//1. wait until RXNE is set
			while(SPI_GetFlagStatus(SPI_RXNE_FLAG)  == (uint8_t)FLAG_RESET );
 80013e0:	2101      	movs	r1, #1
 80013e2:	68f8      	ldr	r0, [r7, #12]
 80013e4:	f7ff ff4d 	bl	8001282 <_ZN11SPI_Handler17SPI_GetFlagStatusEh>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	bf0c      	ite	eq
 80013ee:	2301      	moveq	r3, #1
 80013f0:	2300      	movne	r3, #0
 80013f2:	b2db      	uxtb	r3, r3
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d000      	beq.n	80013fa <_ZN11SPI_Handler15SPI_ReceiveDataEPhm+0x2c>
 80013f8:	e7f2      	b.n	80013e0 <_ZN11SPI_Handler15SPI_ReceiveDataEPhm+0x12>

			//2. check the DFF bit in CR1
			if( (SPIx_.pSPIx->CR1 & ( 1 << SPI_CR1_DFF) ) )
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001404:	2b00      	cmp	r3, #0
 8001406:	bf14      	ite	ne
 8001408:	2301      	movne	r3, #1
 800140a:	2300      	moveq	r3, #0
 800140c:	b2db      	uxtb	r3, r3
 800140e:	2b00      	cmp	r3, #0
 8001410:	d00f      	beq.n	8001432 <_ZN11SPI_Handler15SPI_ReceiveDataEPhm+0x64>
			{
				//16 bit DFF
				//1. load the data from DR to Rxbuffer address
				 *((uint16_t*)pRxBuffer) = SPIx_.pSPIx->DR ;
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	68da      	ldr	r2, [r3, #12]
 8001418:	68bb      	ldr	r3, [r7, #8]
 800141a:	b292      	uxth	r2, r2
 800141c:	801a      	strh	r2, [r3, #0]
				Len--;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	3b01      	subs	r3, #1
 8001422:	607b      	str	r3, [r7, #4]
				Len--;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	3b01      	subs	r3, #1
 8001428:	607b      	str	r3, [r7, #4]
				(uint16_t*)pRxBuffer++;
 800142a:	68bb      	ldr	r3, [r7, #8]
 800142c:	3301      	adds	r3, #1
 800142e:	60bb      	str	r3, [r7, #8]
 8001430:	e7d3      	b.n	80013da <_ZN11SPI_Handler15SPI_ReceiveDataEPhm+0xc>
			}else
			{
				//8 bit DFF
				*(pRxBuffer) = SPIx_.pSPIx->DR ;
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	68da      	ldr	r2, [r3, #12]
 8001438:	68bb      	ldr	r3, [r7, #8]
 800143a:	b2d2      	uxtb	r2, r2
 800143c:	701a      	strb	r2, [r3, #0]
				Len--;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	3b01      	subs	r3, #1
 8001442:	607b      	str	r3, [r7, #4]
				pRxBuffer++;
 8001444:	68bb      	ldr	r3, [r7, #8]
 8001446:	3301      	adds	r3, #1
 8001448:	60bb      	str	r3, [r7, #8]
	while(Len > 0)
 800144a:	e7c6      	b.n	80013da <_ZN11SPI_Handler15SPI_ReceiveDataEPhm+0xc>
			}
		}

}
 800144c:	bf00      	nop
 800144e:	3710      	adds	r7, #16
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}

08001454 <_ZNSt5tupleIJP12GPIO_HandlerSt14default_deleteIS0_EEEC1IS1_S3_Lb1EEEv>:
      constexpr tuple()
 8001454:	b580      	push	{r7, lr}
 8001456:	b082      	sub	sp, #8
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
      : _Inherited() { }
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	4618      	mov	r0, r3
 8001460:	f000 f860 	bl	8001524 <_ZNSt11_Tuple_implILj0EJP12GPIO_HandlerSt14default_deleteIS0_EEEC1Ev>
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	4618      	mov	r0, r3
 8001468:	3708      	adds	r7, #8
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}

0800146e <_ZNSt15__uniq_ptr_implI12GPIO_HandlerSt14default_deleteIS0_EEC1Ev>:
      __uniq_ptr_impl() = default;
 800146e:	b580      	push	{r7, lr}
 8001470:	b082      	sub	sp, #8
 8001472:	af00      	add	r7, sp, #0
 8001474:	6078      	str	r0, [r7, #4]
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	4618      	mov	r0, r3
 800147a:	f7ff ffeb 	bl	8001454 <_ZNSt5tupleIJP12GPIO_HandlerSt14default_deleteIS0_EEEC1IS1_S3_Lb1EEEv>
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	4618      	mov	r0, r3
 8001482:	3708      	adds	r7, #8
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}

08001488 <_ZNSt10unique_ptrI12GPIO_HandlerSt14default_deleteIS0_EEC1IS2_vEEv>:
	constexpr unique_ptr() noexcept
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
	: _M_t()
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2200      	movs	r2, #0
 8001494:	601a      	str	r2, [r3, #0]
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	4618      	mov	r0, r3
 800149a:	f7ff ffe8 	bl	800146e <_ZNSt15__uniq_ptr_implI12GPIO_HandlerSt14default_deleteIS0_EEC1Ev>
        { }
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	4618      	mov	r0, r3
 80014a2:	3708      	adds	r7, #8
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}

080014a8 <_ZNSt10unique_ptrI12GPIO_HandlerSt14default_deleteIS0_EED1Ev>:
      ~unique_ptr() noexcept
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b084      	sub	sp, #16
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	4618      	mov	r0, r3
 80014b4:	f000 f846 	bl	8001544 <_ZNSt15__uniq_ptr_implI12GPIO_HandlerSt14default_deleteIS0_EE6_M_ptrEv>
 80014b8:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d009      	beq.n	80014d6 <_ZNSt10unique_ptrI12GPIO_HandlerSt14default_deleteIS0_EED1Ev+0x2e>
	  get_deleter()(__ptr);
 80014c2:	6878      	ldr	r0, [r7, #4]
 80014c4:	f000 f84b 	bl	800155e <_ZNSt10unique_ptrI12GPIO_HandlerSt14default_deleteIS0_EE11get_deleterEv>
 80014c8:	4602      	mov	r2, r0
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	4619      	mov	r1, r3
 80014d0:	4610      	mov	r0, r2
 80014d2:	f000 f851 	bl	8001578 <_ZNKSt14default_deleteI12GPIO_HandlerEclEPS0_>
	__ptr = pointer();
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	2200      	movs	r2, #0
 80014da:	601a      	str	r2, [r3, #0]
      }
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	4618      	mov	r0, r3
 80014e0:	3710      	adds	r7, #16
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}

080014e6 <_ZNSt10unique_ptrI12GPIO_HandlerSt14default_deleteIS0_EE5resetEPS0_>:
       * @param __p  The new pointer to store.
       *
       * The deleter will be invoked if a pointer is already owned.
       */
      void
      reset(pointer __p = pointer()) noexcept
 80014e6:	b580      	push	{r7, lr}
 80014e8:	b082      	sub	sp, #8
 80014ea:	af00      	add	r7, sp, #0
 80014ec:	6078      	str	r0, [r7, #4]
 80014ee:	6039      	str	r1, [r7, #0]
      {
	using std::swap;
	swap(_M_t._M_ptr(), __p);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	4618      	mov	r0, r3
 80014f4:	f000 f826 	bl	8001544 <_ZNSt15__uniq_ptr_implI12GPIO_HandlerSt14default_deleteIS0_EE6_M_ptrEv>
 80014f8:	4602      	mov	r2, r0
 80014fa:	463b      	mov	r3, r7
 80014fc:	4619      	mov	r1, r3
 80014fe:	4610      	mov	r0, r2
 8001500:	f000 f857 	bl	80015b2 <_ZSt4swapIP12GPIO_HandlerENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS6_ESt18is_move_assignableIS6_EEE5valueEvE4typeERS6_SG_>
	if (__p != pointer())
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d008      	beq.n	800151c <_ZNSt10unique_ptrI12GPIO_HandlerSt14default_deleteIS0_EE5resetEPS0_+0x36>
	  get_deleter()(__p);
 800150a:	6878      	ldr	r0, [r7, #4]
 800150c:	f000 f827 	bl	800155e <_ZNSt10unique_ptrI12GPIO_HandlerSt14default_deleteIS0_EE11get_deleterEv>
 8001510:	4602      	mov	r2, r0
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	4619      	mov	r1, r3
 8001516:	4610      	mov	r0, r2
 8001518:	f000 f82e 	bl	8001578 <_ZNKSt14default_deleteI12GPIO_HandlerEclEPS0_>
      }
 800151c:	bf00      	nop
 800151e:	3708      	adds	r7, #8
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}

08001524 <_ZNSt11_Tuple_implILj0EJP12GPIO_HandlerSt14default_deleteIS0_EEEC1Ev>:
      constexpr _Tuple_impl()
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 800152c:	6878      	ldr	r0, [r7, #4]
 800152e:	f000 f85f 	bl	80015f0 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI12GPIO_HandlerEEEC1Ev>
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	4618      	mov	r0, r3
 8001536:	f000 f867 	bl	8001608 <_ZNSt10_Head_baseILj0EP12GPIO_HandlerLb0EEC1Ev>
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	4618      	mov	r0, r3
 800153e:	3708      	adds	r7, #8
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}

08001544 <_ZNSt15__uniq_ptr_implI12GPIO_HandlerSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 8001544:	b580      	push	{r7, lr}
 8001546:	b082      	sub	sp, #8
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	4618      	mov	r0, r3
 8001550:	f000 f867 	bl	8001622 <_ZSt3getILj0EJP12GPIO_HandlerSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8001554:	4603      	mov	r3, r0
 8001556:	4618      	mov	r0, r3
 8001558:	3708      	adds	r7, #8
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}

0800155e <_ZNSt10unique_ptrI12GPIO_HandlerSt14default_deleteIS0_EE11get_deleterEv>:
      get_deleter() noexcept
 800155e:	b580      	push	{r7, lr}
 8001560:	b082      	sub	sp, #8
 8001562:	af00      	add	r7, sp, #0
 8001564:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	4618      	mov	r0, r3
 800156a:	f000 f867 	bl	800163c <_ZNSt15__uniq_ptr_implI12GPIO_HandlerSt14default_deleteIS0_EE10_M_deleterEv>
 800156e:	4603      	mov	r3, r0
 8001570:	4618      	mov	r0, r3
 8001572:	3708      	adds	r7, #8
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}

08001578 <_ZNKSt14default_deleteI12GPIO_HandlerEclEPS0_>:
      operator()(_Tp* __ptr) const
 8001578:	b590      	push	{r4, r7, lr}
 800157a:	b083      	sub	sp, #12
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
 8001580:	6039      	str	r1, [r7, #0]
	delete __ptr;
 8001582:	683c      	ldr	r4, [r7, #0]
 8001584:	2c00      	cmp	r4, #0
 8001586:	d006      	beq.n	8001596 <_ZNKSt14default_deleteI12GPIO_HandlerEclEPS0_+0x1e>
 8001588:	4620      	mov	r0, r4
 800158a:	f7ff f914 	bl	80007b6 <_ZN12GPIO_HandlerD1Ev>
 800158e:	210c      	movs	r1, #12
 8001590:	4620      	mov	r0, r4
 8001592:	f000 f8bb 	bl	800170c <_ZdlPvj>
      }
 8001596:	bf00      	nop
 8001598:	370c      	adds	r7, #12
 800159a:	46bd      	mov	sp, r7
 800159c:	bd90      	pop	{r4, r7, pc}

0800159e <_ZSt4moveIRP12GPIO_HandlerEONSt16remove_referenceIT_E4typeEOS4_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 800159e:	b480      	push	{r7}
 80015a0:	b083      	sub	sp, #12
 80015a2:	af00      	add	r7, sp, #0
 80015a4:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	4618      	mov	r0, r3
 80015aa:	370c      	adds	r7, #12
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bc80      	pop	{r7}
 80015b0:	4770      	bx	lr

080015b2 <_ZSt4swapIP12GPIO_HandlerENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS6_ESt18is_move_assignableIS6_EEE5valueEvE4typeERS6_SG_>:
    inline
#if __cplusplus >= 201103L
    typename enable_if<__and_<__not_<__is_tuple_like<_Tp>>,
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
    swap(_Tp& __a, _Tp& __b)
 80015b2:	b580      	push	{r7, lr}
 80015b4:	b084      	sub	sp, #16
 80015b6:	af00      	add	r7, sp, #0
 80015b8:	6078      	str	r0, [r7, #4]
 80015ba:	6039      	str	r1, [r7, #0]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80015bc:	6878      	ldr	r0, [r7, #4]
 80015be:	f7ff ffee 	bl	800159e <_ZSt4moveIRP12GPIO_HandlerEONSt16remove_referenceIT_E4typeEOS4_>
 80015c2:	4603      	mov	r3, r0
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 80015c8:	6838      	ldr	r0, [r7, #0]
 80015ca:	f7ff ffe8 	bl	800159e <_ZSt4moveIRP12GPIO_HandlerEONSt16remove_referenceIT_E4typeEOS4_>
 80015ce:	4603      	mov	r3, r0
 80015d0:	681a      	ldr	r2, [r3, #0]
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80015d6:	f107 030c 	add.w	r3, r7, #12
 80015da:	4618      	mov	r0, r3
 80015dc:	f7ff ffdf 	bl	800159e <_ZSt4moveIRP12GPIO_HandlerEONSt16remove_referenceIT_E4typeEOS4_>
 80015e0:	4603      	mov	r3, r0
 80015e2:	681a      	ldr	r2, [r3, #0]
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	601a      	str	r2, [r3, #0]
    }
 80015e8:	bf00      	nop
 80015ea:	3710      	adds	r7, #16
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}

080015f0 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI12GPIO_HandlerEEEC1Ev>:
      constexpr _Tuple_impl()
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
      : _Base() { }
 80015f8:	6878      	ldr	r0, [r7, #4]
 80015fa:	f000 f82c 	bl	8001656 <_ZNSt10_Head_baseILj1ESt14default_deleteI12GPIO_HandlerELb1EEC1Ev>
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	4618      	mov	r0, r3
 8001602:	3708      	adds	r7, #8
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}

08001608 <_ZNSt10_Head_baseILj0EP12GPIO_HandlerLb0EEC1Ev>:
      constexpr _Head_base()
 8001608:	b480      	push	{r7}
 800160a:	b083      	sub	sp, #12
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2200      	movs	r2, #0
 8001614:	601a      	str	r2, [r3, #0]
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	4618      	mov	r0, r3
 800161a:	370c      	adds	r7, #12
 800161c:	46bd      	mov	sp, r7
 800161e:	bc80      	pop	{r7}
 8001620:	4770      	bx	lr

08001622 <_ZSt3getILj0EJP12GPIO_HandlerSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 8001622:	b580      	push	{r7, lr}
 8001624:	b082      	sub	sp, #8
 8001626:	af00      	add	r7, sp, #0
 8001628:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	4618      	mov	r0, r3
 800162e:	f000 f81c 	bl	800166a <_ZSt12__get_helperILj0EP12GPIO_HandlerJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8001632:	4603      	mov	r3, r0
 8001634:	4618      	mov	r0, r3
 8001636:	3708      	adds	r7, #8
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}

0800163c <_ZNSt15__uniq_ptr_implI12GPIO_HandlerSt14default_deleteIS0_EE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	4618      	mov	r0, r3
 8001648:	f000 f81b 	bl	8001682 <_ZSt3getILj1EJP12GPIO_HandlerSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 800164c:	4603      	mov	r3, r0
 800164e:	4618      	mov	r0, r3
 8001650:	3708      	adds	r7, #8
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}

08001656 <_ZNSt10_Head_baseILj1ESt14default_deleteI12GPIO_HandlerELb1EEC1Ev>:
      constexpr _Head_base()
 8001656:	b480      	push	{r7}
 8001658:	b083      	sub	sp, #12
 800165a:	af00      	add	r7, sp, #0
 800165c:	6078      	str	r0, [r7, #4]
      : _Head() { }
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	4618      	mov	r0, r3
 8001662:	370c      	adds	r7, #12
 8001664:	46bd      	mov	sp, r7
 8001666:	bc80      	pop	{r7}
 8001668:	4770      	bx	lr

0800166a <_ZSt12__get_helperILj0EP12GPIO_HandlerJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800166a:	b580      	push	{r7, lr}
 800166c:	b082      	sub	sp, #8
 800166e:	af00      	add	r7, sp, #0
 8001670:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8001672:	6878      	ldr	r0, [r7, #4]
 8001674:	f000 f811 	bl	800169a <_ZNSt11_Tuple_implILj0EJP12GPIO_HandlerSt14default_deleteIS0_EEE7_M_headERS4_>
 8001678:	4603      	mov	r3, r0
 800167a:	4618      	mov	r0, r3
 800167c:	3708      	adds	r7, #8
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}

08001682 <_ZSt3getILj1EJP12GPIO_HandlerSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 8001682:	b580      	push	{r7, lr}
 8001684:	b082      	sub	sp, #8
 8001686:	af00      	add	r7, sp, #0
 8001688:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800168a:	6878      	ldr	r0, [r7, #4]
 800168c:	f000 f812 	bl	80016b4 <_ZSt12__get_helperILj1ESt14default_deleteI12GPIO_HandlerEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 8001690:	4603      	mov	r3, r0
 8001692:	4618      	mov	r0, r3
 8001694:	3708      	adds	r7, #8
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}

0800169a <_ZNSt11_Tuple_implILj0EJP12GPIO_HandlerSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800169a:	b580      	push	{r7, lr}
 800169c:	b082      	sub	sp, #8
 800169e:	af00      	add	r7, sp, #0
 80016a0:	6078      	str	r0, [r7, #4]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	4618      	mov	r0, r3
 80016a6:	f000 f811 	bl	80016cc <_ZNSt10_Head_baseILj0EP12GPIO_HandlerLb0EE7_M_headERS2_>
 80016aa:	4603      	mov	r3, r0
 80016ac:	4618      	mov	r0, r3
 80016ae:	3708      	adds	r7, #8
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}

080016b4 <_ZSt12__get_helperILj1ESt14default_deleteI12GPIO_HandlerEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b082      	sub	sp, #8
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80016bc:	6878      	ldr	r0, [r7, #4]
 80016be:	f000 f80f 	bl	80016e0 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI12GPIO_HandlerEEE7_M_headERS3_>
 80016c2:	4603      	mov	r3, r0
 80016c4:	4618      	mov	r0, r3
 80016c6:	3708      	adds	r7, #8
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}

080016cc <_ZNSt10_Head_baseILj0EP12GPIO_HandlerLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 80016cc:	b480      	push	{r7}
 80016ce:	b083      	sub	sp, #12
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	4618      	mov	r0, r3
 80016d8:	370c      	adds	r7, #12
 80016da:	46bd      	mov	sp, r7
 80016dc:	bc80      	pop	{r7}
 80016de:	4770      	bx	lr

080016e0 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI12GPIO_HandlerEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b082      	sub	sp, #8
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
 80016e8:	6878      	ldr	r0, [r7, #4]
 80016ea:	f000 f805 	bl	80016f8 <_ZNSt10_Head_baseILj1ESt14default_deleteI12GPIO_HandlerELb1EE7_M_headERS3_>
 80016ee:	4603      	mov	r3, r0
 80016f0:	4618      	mov	r0, r3
 80016f2:	3708      	adds	r7, #8
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}

080016f8 <_ZNSt10_Head_baseILj1ESt14default_deleteI12GPIO_HandlerELb1EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b; }
 80016f8:	b480      	push	{r7}
 80016fa:	b083      	sub	sp, #12
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	4618      	mov	r0, r3
 8001704:	370c      	adds	r7, #12
 8001706:	46bd      	mov	sp, r7
 8001708:	bc80      	pop	{r7}
 800170a:	4770      	bx	lr

0800170c <_ZdlPvj>:
 800170c:	f000 b811 	b.w	8001732 <_ZdlPv>

08001710 <_Znwj>:
 8001710:	b510      	push	{r4, lr}
 8001712:	2800      	cmp	r0, #0
 8001714:	bf14      	ite	ne
 8001716:	4604      	movne	r4, r0
 8001718:	2401      	moveq	r4, #1
 800171a:	4620      	mov	r0, r4
 800171c:	f000 f846 	bl	80017ac <malloc>
 8001720:	b930      	cbnz	r0, 8001730 <_Znwj+0x20>
 8001722:	f000 f809 	bl	8001738 <_ZSt15get_new_handlerv>
 8001726:	b908      	cbnz	r0, 800172c <_Znwj+0x1c>
 8001728:	f000 f80e 	bl	8001748 <abort>
 800172c:	4780      	blx	r0
 800172e:	e7f4      	b.n	800171a <_Znwj+0xa>
 8001730:	bd10      	pop	{r4, pc}

08001732 <_ZdlPv>:
 8001732:	f000 b843 	b.w	80017bc <free>
	...

08001738 <_ZSt15get_new_handlerv>:
 8001738:	4b02      	ldr	r3, [pc, #8]	; (8001744 <_ZSt15get_new_handlerv+0xc>)
 800173a:	6818      	ldr	r0, [r3, #0]
 800173c:	f3bf 8f5b 	dmb	ish
 8001740:	4770      	bx	lr
 8001742:	bf00      	nop
 8001744:	20000084 	.word	0x20000084

08001748 <abort>:
 8001748:	b508      	push	{r3, lr}
 800174a:	2006      	movs	r0, #6
 800174c:	f000 f926 	bl	800199c <raise>
 8001750:	2001      	movs	r0, #1
 8001752:	f7fe ff3b 	bl	80005cc <_exit>
	...

08001758 <__errno>:
 8001758:	4b01      	ldr	r3, [pc, #4]	; (8001760 <__errno+0x8>)
 800175a:	6818      	ldr	r0, [r3, #0]
 800175c:	4770      	bx	lr
 800175e:	bf00      	nop
 8001760:	20000000 	.word	0x20000000

08001764 <__libc_init_array>:
 8001764:	b570      	push	{r4, r5, r6, lr}
 8001766:	4e0d      	ldr	r6, [pc, #52]	; (800179c <__libc_init_array+0x38>)
 8001768:	4c0d      	ldr	r4, [pc, #52]	; (80017a0 <__libc_init_array+0x3c>)
 800176a:	1ba4      	subs	r4, r4, r6
 800176c:	10a4      	asrs	r4, r4, #2
 800176e:	2500      	movs	r5, #0
 8001770:	42a5      	cmp	r5, r4
 8001772:	d109      	bne.n	8001788 <__libc_init_array+0x24>
 8001774:	4e0b      	ldr	r6, [pc, #44]	; (80017a4 <__libc_init_array+0x40>)
 8001776:	4c0c      	ldr	r4, [pc, #48]	; (80017a8 <__libc_init_array+0x44>)
 8001778:	f000 f92e 	bl	80019d8 <_init>
 800177c:	1ba4      	subs	r4, r4, r6
 800177e:	10a4      	asrs	r4, r4, #2
 8001780:	2500      	movs	r5, #0
 8001782:	42a5      	cmp	r5, r4
 8001784:	d105      	bne.n	8001792 <__libc_init_array+0x2e>
 8001786:	bd70      	pop	{r4, r5, r6, pc}
 8001788:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800178c:	4798      	blx	r3
 800178e:	3501      	adds	r5, #1
 8001790:	e7ee      	b.n	8001770 <__libc_init_array+0xc>
 8001792:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001796:	4798      	blx	r3
 8001798:	3501      	adds	r5, #1
 800179a:	e7f2      	b.n	8001782 <__libc_init_array+0x1e>
 800179c:	080019f0 	.word	0x080019f0
 80017a0:	080019f0 	.word	0x080019f0
 80017a4:	080019f0 	.word	0x080019f0
 80017a8:	080019f4 	.word	0x080019f4

080017ac <malloc>:
 80017ac:	4b02      	ldr	r3, [pc, #8]	; (80017b8 <malloc+0xc>)
 80017ae:	4601      	mov	r1, r0
 80017b0:	6818      	ldr	r0, [r3, #0]
 80017b2:	f000 b861 	b.w	8001878 <_malloc_r>
 80017b6:	bf00      	nop
 80017b8:	20000000 	.word	0x20000000

080017bc <free>:
 80017bc:	4b02      	ldr	r3, [pc, #8]	; (80017c8 <free+0xc>)
 80017be:	4601      	mov	r1, r0
 80017c0:	6818      	ldr	r0, [r3, #0]
 80017c2:	f000 b80b 	b.w	80017dc <_free_r>
 80017c6:	bf00      	nop
 80017c8:	20000000 	.word	0x20000000

080017cc <memset>:
 80017cc:	4402      	add	r2, r0
 80017ce:	4603      	mov	r3, r0
 80017d0:	4293      	cmp	r3, r2
 80017d2:	d100      	bne.n	80017d6 <memset+0xa>
 80017d4:	4770      	bx	lr
 80017d6:	f803 1b01 	strb.w	r1, [r3], #1
 80017da:	e7f9      	b.n	80017d0 <memset+0x4>

080017dc <_free_r>:
 80017dc:	b538      	push	{r3, r4, r5, lr}
 80017de:	4605      	mov	r5, r0
 80017e0:	2900      	cmp	r1, #0
 80017e2:	d045      	beq.n	8001870 <_free_r+0x94>
 80017e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80017e8:	1f0c      	subs	r4, r1, #4
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	bfb8      	it	lt
 80017ee:	18e4      	addlt	r4, r4, r3
 80017f0:	f000 f8f0 	bl	80019d4 <__malloc_lock>
 80017f4:	4a1f      	ldr	r2, [pc, #124]	; (8001874 <_free_r+0x98>)
 80017f6:	6813      	ldr	r3, [r2, #0]
 80017f8:	4610      	mov	r0, r2
 80017fa:	b933      	cbnz	r3, 800180a <_free_r+0x2e>
 80017fc:	6063      	str	r3, [r4, #4]
 80017fe:	6014      	str	r4, [r2, #0]
 8001800:	4628      	mov	r0, r5
 8001802:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001806:	f000 b8e6 	b.w	80019d6 <__malloc_unlock>
 800180a:	42a3      	cmp	r3, r4
 800180c:	d90c      	bls.n	8001828 <_free_r+0x4c>
 800180e:	6821      	ldr	r1, [r4, #0]
 8001810:	1862      	adds	r2, r4, r1
 8001812:	4293      	cmp	r3, r2
 8001814:	bf04      	itt	eq
 8001816:	681a      	ldreq	r2, [r3, #0]
 8001818:	685b      	ldreq	r3, [r3, #4]
 800181a:	6063      	str	r3, [r4, #4]
 800181c:	bf04      	itt	eq
 800181e:	1852      	addeq	r2, r2, r1
 8001820:	6022      	streq	r2, [r4, #0]
 8001822:	6004      	str	r4, [r0, #0]
 8001824:	e7ec      	b.n	8001800 <_free_r+0x24>
 8001826:	4613      	mov	r3, r2
 8001828:	685a      	ldr	r2, [r3, #4]
 800182a:	b10a      	cbz	r2, 8001830 <_free_r+0x54>
 800182c:	42a2      	cmp	r2, r4
 800182e:	d9fa      	bls.n	8001826 <_free_r+0x4a>
 8001830:	6819      	ldr	r1, [r3, #0]
 8001832:	1858      	adds	r0, r3, r1
 8001834:	42a0      	cmp	r0, r4
 8001836:	d10b      	bne.n	8001850 <_free_r+0x74>
 8001838:	6820      	ldr	r0, [r4, #0]
 800183a:	4401      	add	r1, r0
 800183c:	1858      	adds	r0, r3, r1
 800183e:	4282      	cmp	r2, r0
 8001840:	6019      	str	r1, [r3, #0]
 8001842:	d1dd      	bne.n	8001800 <_free_r+0x24>
 8001844:	6810      	ldr	r0, [r2, #0]
 8001846:	6852      	ldr	r2, [r2, #4]
 8001848:	605a      	str	r2, [r3, #4]
 800184a:	4401      	add	r1, r0
 800184c:	6019      	str	r1, [r3, #0]
 800184e:	e7d7      	b.n	8001800 <_free_r+0x24>
 8001850:	d902      	bls.n	8001858 <_free_r+0x7c>
 8001852:	230c      	movs	r3, #12
 8001854:	602b      	str	r3, [r5, #0]
 8001856:	e7d3      	b.n	8001800 <_free_r+0x24>
 8001858:	6820      	ldr	r0, [r4, #0]
 800185a:	1821      	adds	r1, r4, r0
 800185c:	428a      	cmp	r2, r1
 800185e:	bf04      	itt	eq
 8001860:	6811      	ldreq	r1, [r2, #0]
 8001862:	6852      	ldreq	r2, [r2, #4]
 8001864:	6062      	str	r2, [r4, #4]
 8001866:	bf04      	itt	eq
 8001868:	1809      	addeq	r1, r1, r0
 800186a:	6021      	streq	r1, [r4, #0]
 800186c:	605c      	str	r4, [r3, #4]
 800186e:	e7c7      	b.n	8001800 <_free_r+0x24>
 8001870:	bd38      	pop	{r3, r4, r5, pc}
 8001872:	bf00      	nop
 8001874:	20000088 	.word	0x20000088

08001878 <_malloc_r>:
 8001878:	b570      	push	{r4, r5, r6, lr}
 800187a:	1ccd      	adds	r5, r1, #3
 800187c:	f025 0503 	bic.w	r5, r5, #3
 8001880:	3508      	adds	r5, #8
 8001882:	2d0c      	cmp	r5, #12
 8001884:	bf38      	it	cc
 8001886:	250c      	movcc	r5, #12
 8001888:	2d00      	cmp	r5, #0
 800188a:	4606      	mov	r6, r0
 800188c:	db01      	blt.n	8001892 <_malloc_r+0x1a>
 800188e:	42a9      	cmp	r1, r5
 8001890:	d903      	bls.n	800189a <_malloc_r+0x22>
 8001892:	230c      	movs	r3, #12
 8001894:	6033      	str	r3, [r6, #0]
 8001896:	2000      	movs	r0, #0
 8001898:	bd70      	pop	{r4, r5, r6, pc}
 800189a:	f000 f89b 	bl	80019d4 <__malloc_lock>
 800189e:	4a21      	ldr	r2, [pc, #132]	; (8001924 <_malloc_r+0xac>)
 80018a0:	6814      	ldr	r4, [r2, #0]
 80018a2:	4621      	mov	r1, r4
 80018a4:	b991      	cbnz	r1, 80018cc <_malloc_r+0x54>
 80018a6:	4c20      	ldr	r4, [pc, #128]	; (8001928 <_malloc_r+0xb0>)
 80018a8:	6823      	ldr	r3, [r4, #0]
 80018aa:	b91b      	cbnz	r3, 80018b4 <_malloc_r+0x3c>
 80018ac:	4630      	mov	r0, r6
 80018ae:	f000 f83d 	bl	800192c <_sbrk_r>
 80018b2:	6020      	str	r0, [r4, #0]
 80018b4:	4629      	mov	r1, r5
 80018b6:	4630      	mov	r0, r6
 80018b8:	f000 f838 	bl	800192c <_sbrk_r>
 80018bc:	1c43      	adds	r3, r0, #1
 80018be:	d124      	bne.n	800190a <_malloc_r+0x92>
 80018c0:	230c      	movs	r3, #12
 80018c2:	6033      	str	r3, [r6, #0]
 80018c4:	4630      	mov	r0, r6
 80018c6:	f000 f886 	bl	80019d6 <__malloc_unlock>
 80018ca:	e7e4      	b.n	8001896 <_malloc_r+0x1e>
 80018cc:	680b      	ldr	r3, [r1, #0]
 80018ce:	1b5b      	subs	r3, r3, r5
 80018d0:	d418      	bmi.n	8001904 <_malloc_r+0x8c>
 80018d2:	2b0b      	cmp	r3, #11
 80018d4:	d90f      	bls.n	80018f6 <_malloc_r+0x7e>
 80018d6:	600b      	str	r3, [r1, #0]
 80018d8:	50cd      	str	r5, [r1, r3]
 80018da:	18cc      	adds	r4, r1, r3
 80018dc:	4630      	mov	r0, r6
 80018de:	f000 f87a 	bl	80019d6 <__malloc_unlock>
 80018e2:	f104 000b 	add.w	r0, r4, #11
 80018e6:	1d23      	adds	r3, r4, #4
 80018e8:	f020 0007 	bic.w	r0, r0, #7
 80018ec:	1ac3      	subs	r3, r0, r3
 80018ee:	d0d3      	beq.n	8001898 <_malloc_r+0x20>
 80018f0:	425a      	negs	r2, r3
 80018f2:	50e2      	str	r2, [r4, r3]
 80018f4:	e7d0      	b.n	8001898 <_malloc_r+0x20>
 80018f6:	428c      	cmp	r4, r1
 80018f8:	684b      	ldr	r3, [r1, #4]
 80018fa:	bf16      	itet	ne
 80018fc:	6063      	strne	r3, [r4, #4]
 80018fe:	6013      	streq	r3, [r2, #0]
 8001900:	460c      	movne	r4, r1
 8001902:	e7eb      	b.n	80018dc <_malloc_r+0x64>
 8001904:	460c      	mov	r4, r1
 8001906:	6849      	ldr	r1, [r1, #4]
 8001908:	e7cc      	b.n	80018a4 <_malloc_r+0x2c>
 800190a:	1cc4      	adds	r4, r0, #3
 800190c:	f024 0403 	bic.w	r4, r4, #3
 8001910:	42a0      	cmp	r0, r4
 8001912:	d005      	beq.n	8001920 <_malloc_r+0xa8>
 8001914:	1a21      	subs	r1, r4, r0
 8001916:	4630      	mov	r0, r6
 8001918:	f000 f808 	bl	800192c <_sbrk_r>
 800191c:	3001      	adds	r0, #1
 800191e:	d0cf      	beq.n	80018c0 <_malloc_r+0x48>
 8001920:	6025      	str	r5, [r4, #0]
 8001922:	e7db      	b.n	80018dc <_malloc_r+0x64>
 8001924:	20000088 	.word	0x20000088
 8001928:	2000008c 	.word	0x2000008c

0800192c <_sbrk_r>:
 800192c:	b538      	push	{r3, r4, r5, lr}
 800192e:	4c06      	ldr	r4, [pc, #24]	; (8001948 <_sbrk_r+0x1c>)
 8001930:	2300      	movs	r3, #0
 8001932:	4605      	mov	r5, r0
 8001934:	4608      	mov	r0, r1
 8001936:	6023      	str	r3, [r4, #0]
 8001938:	f7fe fe52 	bl	80005e0 <_sbrk>
 800193c:	1c43      	adds	r3, r0, #1
 800193e:	d102      	bne.n	8001946 <_sbrk_r+0x1a>
 8001940:	6823      	ldr	r3, [r4, #0]
 8001942:	b103      	cbz	r3, 8001946 <_sbrk_r+0x1a>
 8001944:	602b      	str	r3, [r5, #0]
 8001946:	bd38      	pop	{r3, r4, r5, pc}
 8001948:	20000090 	.word	0x20000090

0800194c <_raise_r>:
 800194c:	291f      	cmp	r1, #31
 800194e:	b538      	push	{r3, r4, r5, lr}
 8001950:	4604      	mov	r4, r0
 8001952:	460d      	mov	r5, r1
 8001954:	d904      	bls.n	8001960 <_raise_r+0x14>
 8001956:	2316      	movs	r3, #22
 8001958:	6003      	str	r3, [r0, #0]
 800195a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800195e:	bd38      	pop	{r3, r4, r5, pc}
 8001960:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8001962:	b112      	cbz	r2, 800196a <_raise_r+0x1e>
 8001964:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8001968:	b94b      	cbnz	r3, 800197e <_raise_r+0x32>
 800196a:	4620      	mov	r0, r4
 800196c:	f000 f830 	bl	80019d0 <_getpid_r>
 8001970:	462a      	mov	r2, r5
 8001972:	4601      	mov	r1, r0
 8001974:	4620      	mov	r0, r4
 8001976:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800197a:	f000 b817 	b.w	80019ac <_kill_r>
 800197e:	2b01      	cmp	r3, #1
 8001980:	d00a      	beq.n	8001998 <_raise_r+0x4c>
 8001982:	1c59      	adds	r1, r3, #1
 8001984:	d103      	bne.n	800198e <_raise_r+0x42>
 8001986:	2316      	movs	r3, #22
 8001988:	6003      	str	r3, [r0, #0]
 800198a:	2001      	movs	r0, #1
 800198c:	e7e7      	b.n	800195e <_raise_r+0x12>
 800198e:	2400      	movs	r4, #0
 8001990:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8001994:	4628      	mov	r0, r5
 8001996:	4798      	blx	r3
 8001998:	2000      	movs	r0, #0
 800199a:	e7e0      	b.n	800195e <_raise_r+0x12>

0800199c <raise>:
 800199c:	4b02      	ldr	r3, [pc, #8]	; (80019a8 <raise+0xc>)
 800199e:	4601      	mov	r1, r0
 80019a0:	6818      	ldr	r0, [r3, #0]
 80019a2:	f7ff bfd3 	b.w	800194c <_raise_r>
 80019a6:	bf00      	nop
 80019a8:	20000000 	.word	0x20000000

080019ac <_kill_r>:
 80019ac:	b538      	push	{r3, r4, r5, lr}
 80019ae:	4c07      	ldr	r4, [pc, #28]	; (80019cc <_kill_r+0x20>)
 80019b0:	2300      	movs	r3, #0
 80019b2:	4605      	mov	r5, r0
 80019b4:	4608      	mov	r0, r1
 80019b6:	4611      	mov	r1, r2
 80019b8:	6023      	str	r3, [r4, #0]
 80019ba:	f7fe fdf7 	bl	80005ac <_kill>
 80019be:	1c43      	adds	r3, r0, #1
 80019c0:	d102      	bne.n	80019c8 <_kill_r+0x1c>
 80019c2:	6823      	ldr	r3, [r4, #0]
 80019c4:	b103      	cbz	r3, 80019c8 <_kill_r+0x1c>
 80019c6:	602b      	str	r3, [r5, #0]
 80019c8:	bd38      	pop	{r3, r4, r5, pc}
 80019ca:	bf00      	nop
 80019cc:	20000090 	.word	0x20000090

080019d0 <_getpid_r>:
 80019d0:	f7fe bde5 	b.w	800059e <_getpid>

080019d4 <__malloc_lock>:
 80019d4:	4770      	bx	lr

080019d6 <__malloc_unlock>:
 80019d6:	4770      	bx	lr

080019d8 <_init>:
 80019d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019da:	bf00      	nop
 80019dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80019de:	bc08      	pop	{r3}
 80019e0:	469e      	mov	lr, r3
 80019e2:	4770      	bx	lr

080019e4 <_fini>:
 80019e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019e6:	bf00      	nop
 80019e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80019ea:	bc08      	pop	{r3}
 80019ec:	469e      	mov	lr, r3
 80019ee:	4770      	bx	lr
