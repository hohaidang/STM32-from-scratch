
004_SPI_driver_CPP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001e28  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08001fec  08001fec  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08001fec  08001fec  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  08001fec  08001fec  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001fec  08001fec  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001fec  08001fec  00011fec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001ff0  08001ff0  00011ff0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08001ff4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000038  20000064  08002058  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000009c  08002058  0002009c  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dda9  00000000  00000000  0002008e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001b58  00000000  00000000  0002de37  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000488  00000000  00000000  0002f990  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000420  00000000  00000000  0002fe18  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000063c7  00000000  00000000  00030238  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00005109  00000000  00000000  000365ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00012e96  00000000  00000000  0003b708  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0004e59e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000015fc  00000000  00000000  0004e61c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000064 	.word	0x20000064
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08001fd4 	.word	0x08001fd4

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000068 	.word	0x20000068
 8000200:	08001fd4 	.word	0x08001fd4

08000204 <_Z13user_spi_readhPhmPv>:
	for(int i = 0; i < 2500000; ++i) {

	}
}

int8_t user_spi_read (uint8_t reg_addr, uint8_t *reg_data, uint32_t len, void *intf_ptr) {
 8000204:	b580      	push	{r7, lr}
 8000206:	b084      	sub	sp, #16
 8000208:	af00      	add	r7, sp, #0
 800020a:	60b9      	str	r1, [r7, #8]
 800020c:	607a      	str	r2, [r7, #4]
 800020e:	603b      	str	r3, [r7, #0]
 8000210:	4603      	mov	r3, r0
 8000212:	73fb      	strb	r3, [r7, #15]
    SPI1_Handler->SPI_SendDataIT((const uint8_t *)&reg_addr, len);
 8000214:	4b09      	ldr	r3, [pc, #36]	; (800023c <_Z13user_spi_readhPhmPv+0x38>)
 8000216:	681b      	ldr	r3, [r3, #0]
 8000218:	f107 010f 	add.w	r1, r7, #15
 800021c:	687a      	ldr	r2, [r7, #4]
 800021e:	4618      	mov	r0, r3
 8000220:	f001 fa6f 	bl	8001702 <_ZN11SPI_Handler14SPI_SendDataITEPKhm>
    SPI1_Handler->SPI_ReceiveDataIT(reg_data, len);
 8000224:	4b05      	ldr	r3, [pc, #20]	; (800023c <_Z13user_spi_readhPhmPv+0x38>)
 8000226:	681b      	ldr	r3, [r3, #0]
 8000228:	687a      	ldr	r2, [r7, #4]
 800022a:	68b9      	ldr	r1, [r7, #8]
 800022c:	4618      	mov	r0, r3
 800022e:	f001 fa99 	bl	8001764 <_ZN11SPI_Handler17SPI_ReceiveDataITEPhm>
    return 0;
 8000232:	2300      	movs	r3, #0
}
 8000234:	4618      	mov	r0, r3
 8000236:	3710      	adds	r7, #16
 8000238:	46bd      	mov	sp, r7
 800023a:	bd80      	pop	{r7, pc}
 800023c:	20000080 	.word	0x20000080

08000240 <main>:

int main(void)
{
 8000240:	b590      	push	{r4, r7, lr}
 8000242:	b09d      	sub	sp, #116	; 0x74
 8000244:	af06      	add	r7, sp, #24
										SPI_BUS_CONFIG_FD,
										SPI_SCLK_SPEED_DIV32,
										SPI_DFF_8BITS,
										SPI_CPOL_LOW,
										SPI_CPHA_LOW,
										SPI_SSM_DI);
 8000246:	2030      	movs	r0, #48	; 0x30
 8000248:	f001 fd60 	bl	8001d0c <_Znwj>
 800024c:	4603      	mov	r3, r0
 800024e:	461c      	mov	r4, r3
 8000250:	2300      	movs	r3, #0
 8000252:	9304      	str	r3, [sp, #16]
 8000254:	2300      	movs	r3, #0
 8000256:	9303      	str	r3, [sp, #12]
 8000258:	2300      	movs	r3, #0
 800025a:	9302      	str	r3, [sp, #8]
 800025c:	2300      	movs	r3, #0
 800025e:	9301      	str	r3, [sp, #4]
 8000260:	2304      	movs	r3, #4
 8000262:	9300      	str	r3, [sp, #0]
 8000264:	2301      	movs	r3, #1
 8000266:	2201      	movs	r2, #1
 8000268:	4928      	ldr	r1, [pc, #160]	; (800030c <main+0xcc>)
 800026a:	4620      	mov	r0, r4
 800026c:	f000 ff9f 	bl	80011ae <_ZN11SPI_HandlerC1EP12SPI_RegDef_thhhhhhh>
	SPI1_Handler = new SPI_Handler(SPI1,
 8000270:	4b27      	ldr	r3, [pc, #156]	; (8000310 <main+0xd0>)
 8000272:	601c      	str	r4, [r3, #0]

	SPI1_Handler->SPI_IRQInterruptConfig(IRQ_NO_SPI1, ENABLE);
 8000274:	4b26      	ldr	r3, [pc, #152]	; (8000310 <main+0xd0>)
 8000276:	681b      	ldr	r3, [r3, #0]
 8000278:	2201      	movs	r2, #1
 800027a:	2123      	movs	r1, #35	; 0x23
 800027c:	4618      	mov	r0, r3
 800027e:	f001 f98d 	bl	800159c <_ZN11SPI_Handler22SPI_IRQInterruptConfigEhh>
	SPI1_Handler->SPI_IRQPriorityConfig(IRQ_NO_SPI1, IRQ_Prio_NO_15);
 8000282:	4b23      	ldr	r3, [pc, #140]	; (8000310 <main+0xd0>)
 8000284:	681b      	ldr	r3, [r3, #0]
 8000286:	220f      	movs	r2, #15
 8000288:	2123      	movs	r1, #35	; 0x23
 800028a:	4618      	mov	r0, r3
 800028c:	f001 fa0a 	bl	80016a4 <_ZN11SPI_Handler21SPI_IRQPriorityConfigEhh>


	struct bme280_dev dev;
	int8_t rslt = BME280_OK;
 8000290:	2300      	movs	r3, #0
 8000292:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Sensor_0 interface over SPI with native chip select line */
	uint8_t dev_addr = 0;
 8000296:	2300      	movs	r3, #0
 8000298:	72fb      	strb	r3, [r7, #11]

	dev.intf_ptr = &dev_addr;
 800029a:	f107 030b 	add.w	r3, r7, #11
 800029e:	613b      	str	r3, [r7, #16]
	dev.intf = BME280_SPI_INTF;
 80002a0:	2300      	movs	r3, #0
 80002a2:	753b      	strb	r3, [r7, #20]
	dev.read = user_spi_read;
 80002a4:	4b1b      	ldr	r3, [pc, #108]	; (8000314 <main+0xd4>)
 80002a6:	61bb      	str	r3, [r7, #24]
//	dev.write = &user_spi_write;
//	dev.delay_ms = user_delay_ms;


	rslt = bme280_init(&dev);
 80002a8:	f107 030c 	add.w	r3, r7, #12
 80002ac:	4618      	mov	r0, r3
 80002ae:	f000 f88d 	bl	80003cc <bme280_init>
 80002b2:	4603      	mov	r3, r0
 80002b4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	static_cast<void>(rslt);

    uint8_t tx_buffer[1] = {0xD0};
 80002b8:	23d0      	movs	r3, #208	; 0xd0
 80002ba:	723b      	strb	r3, [r7, #8]
    uint8_t chipID = 0;
 80002bc:	2300      	movs	r3, #0
 80002be:	71fb      	strb	r3, [r7, #7]


    SPI1_Handler->SPI_SendDataIT(tx_buffer, 1);
 80002c0:	4b13      	ldr	r3, [pc, #76]	; (8000310 <main+0xd0>)
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	f107 0108 	add.w	r1, r7, #8
 80002c8:	2201      	movs	r2, #1
 80002ca:	4618      	mov	r0, r3
 80002cc:	f001 fa19 	bl	8001702 <_ZN11SPI_Handler14SPI_SendDataITEPKhm>

    SPI1_Handler->SPI_ReceiveDataIT(&chipID, 1);
 80002d0:	4b0f      	ldr	r3, [pc, #60]	; (8000310 <main+0xd0>)
 80002d2:	681b      	ldr	r3, [r3, #0]
 80002d4:	1df9      	adds	r1, r7, #7
 80002d6:	2201      	movs	r2, #1
 80002d8:	4618      	mov	r0, r3
 80002da:	f001 fa43 	bl	8001764 <_ZN11SPI_Handler17SPI_ReceiveDataITEPhm>

    while(SPI1_Handler->SPI_GetFlagStatus(SPI_BSY_FLAG));
 80002de:	4b0c      	ldr	r3, [pc, #48]	; (8000310 <main+0xd0>)
 80002e0:	681b      	ldr	r3, [r3, #0]
 80002e2:	2180      	movs	r1, #128	; 0x80
 80002e4:	4618      	mov	r0, r3
 80002e6:	f001 f900 	bl	80014ea <_ZN11SPI_Handler17SPI_GetFlagStatusEh>
 80002ea:	4603      	mov	r3, r0
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	bf14      	ite	ne
 80002f0:	2301      	movne	r3, #1
 80002f2:	2300      	moveq	r3, #0
 80002f4:	b2db      	uxtb	r3, r3
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d000      	beq.n	80002fc <main+0xbc>
 80002fa:	e7f0      	b.n	80002de <main+0x9e>
    SPI1_Handler->SPI_PeripheralControl(DISABLE);
 80002fc:	4b04      	ldr	r3, [pc, #16]	; (8000310 <main+0xd0>)
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	2100      	movs	r1, #0
 8000302:	4618      	mov	r0, r3
 8000304:	f001 f8d2 	bl	80014ac <_ZN11SPI_Handler21SPI_PeripheralControlEh>
    while(1);
 8000308:	e7fe      	b.n	8000308 <main+0xc8>
 800030a:	bf00      	nop
 800030c:	40013000 	.word	0x40013000
 8000310:	20000080 	.word	0x20000080
 8000314:	08000205 	.word	0x08000205

08000318 <SPI1_IRQHandler>:
    return 0;
}

extern "C" {
    void SPI1_IRQHandler(void) {
 8000318:	b580      	push	{r7, lr}
 800031a:	af00      	add	r7, sp, #0
        // handle the interrupt
        SPI1_Handler->SPI_IRQHandling();
 800031c:	4b03      	ldr	r3, [pc, #12]	; (800032c <SPI1_IRQHandler+0x14>)
 800031e:	681b      	ldr	r3, [r3, #0]
 8000320:	4618      	mov	r0, r3
 8000322:	f001 fa49 	bl	80017b8 <_ZN11SPI_Handler15SPI_IRQHandlingEv>
    }
 8000326:	bf00      	nop
 8000328:	bd80      	pop	{r7, pc}
 800032a:	bf00      	nop
 800032c:	20000080 	.word	0x20000080

08000330 <_getpid>:
 8000330:	b480      	push	{r7}
 8000332:	af00      	add	r7, sp, #0
 8000334:	2301      	movs	r3, #1
 8000336:	4618      	mov	r0, r3
 8000338:	46bd      	mov	sp, r7
 800033a:	bc80      	pop	{r7}
 800033c:	4770      	bx	lr

0800033e <_kill>:
 800033e:	b580      	push	{r7, lr}
 8000340:	b082      	sub	sp, #8
 8000342:	af00      	add	r7, sp, #0
 8000344:	6078      	str	r0, [r7, #4]
 8000346:	6039      	str	r1, [r7, #0]
 8000348:	f001 fd04 	bl	8001d54 <__errno>
 800034c:	4602      	mov	r2, r0
 800034e:	2316      	movs	r3, #22
 8000350:	6013      	str	r3, [r2, #0]
 8000352:	f04f 33ff 	mov.w	r3, #4294967295
 8000356:	4618      	mov	r0, r3
 8000358:	3708      	adds	r7, #8
 800035a:	46bd      	mov	sp, r7
 800035c:	bd80      	pop	{r7, pc}

0800035e <_exit>:
 800035e:	b580      	push	{r7, lr}
 8000360:	b082      	sub	sp, #8
 8000362:	af00      	add	r7, sp, #0
 8000364:	6078      	str	r0, [r7, #4]
 8000366:	f04f 31ff 	mov.w	r1, #4294967295
 800036a:	6878      	ldr	r0, [r7, #4]
 800036c:	f7ff ffe7 	bl	800033e <_kill>
 8000370:	e7fe      	b.n	8000370 <_exit+0x12>
	...

08000374 <_sbrk>:
 8000374:	b580      	push	{r7, lr}
 8000376:	b084      	sub	sp, #16
 8000378:	af00      	add	r7, sp, #0
 800037a:	6078      	str	r0, [r7, #4]
 800037c:	4b11      	ldr	r3, [pc, #68]	; (80003c4 <_sbrk+0x50>)
 800037e:	681b      	ldr	r3, [r3, #0]
 8000380:	2b00      	cmp	r3, #0
 8000382:	d102      	bne.n	800038a <_sbrk+0x16>
 8000384:	4b0f      	ldr	r3, [pc, #60]	; (80003c4 <_sbrk+0x50>)
 8000386:	4a10      	ldr	r2, [pc, #64]	; (80003c8 <_sbrk+0x54>)
 8000388:	601a      	str	r2, [r3, #0]
 800038a:	4b0e      	ldr	r3, [pc, #56]	; (80003c4 <_sbrk+0x50>)
 800038c:	681b      	ldr	r3, [r3, #0]
 800038e:	60fb      	str	r3, [r7, #12]
 8000390:	4b0c      	ldr	r3, [pc, #48]	; (80003c4 <_sbrk+0x50>)
 8000392:	681a      	ldr	r2, [r3, #0]
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	4413      	add	r3, r2
 8000398:	466a      	mov	r2, sp
 800039a:	4293      	cmp	r3, r2
 800039c:	d907      	bls.n	80003ae <_sbrk+0x3a>
 800039e:	f001 fcd9 	bl	8001d54 <__errno>
 80003a2:	4602      	mov	r2, r0
 80003a4:	230c      	movs	r3, #12
 80003a6:	6013      	str	r3, [r2, #0]
 80003a8:	f04f 33ff 	mov.w	r3, #4294967295
 80003ac:	e006      	b.n	80003bc <_sbrk+0x48>
 80003ae:	4b05      	ldr	r3, [pc, #20]	; (80003c4 <_sbrk+0x50>)
 80003b0:	681a      	ldr	r2, [r3, #0]
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	4413      	add	r3, r2
 80003b6:	4a03      	ldr	r2, [pc, #12]	; (80003c4 <_sbrk+0x50>)
 80003b8:	6013      	str	r3, [r2, #0]
 80003ba:	68fb      	ldr	r3, [r7, #12]
 80003bc:	4618      	mov	r0, r3
 80003be:	3710      	adds	r7, #16
 80003c0:	46bd      	mov	sp, r7
 80003c2:	bd80      	pop	{r7, pc}
 80003c4:	20000084 	.word	0x20000084
 80003c8:	200000a0 	.word	0x200000a0

080003cc <bme280_init>:
/*!
 *  @brief This API is the entry point.
 *  It reads the chip-id and calibration data from the sensor.
 */
int8_t bme280_init(struct bme280_dev *dev)
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	b084      	sub	sp, #16
 80003d0:	af00      	add	r7, sp, #0
 80003d2:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    /* chip id read try count */
    uint8_t try_count = 5;
 80003d4:	2305      	movs	r3, #5
 80003d6:	73bb      	strb	r3, [r7, #14]
    uint8_t chip_id = 0;
 80003d8:	2300      	movs	r3, #0
 80003da:	737b      	strb	r3, [r7, #13]

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 80003dc:	6878      	ldr	r0, [r7, #4]
 80003de:	f000 fab2 	bl	8000946 <null_ptr_check>
 80003e2:	4603      	mov	r3, r0
 80003e4:	73fb      	strb	r3, [r7, #15]

    /* Proceed if null check is fine */
    if (rslt == BME280_OK)
 80003e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d137      	bne.n	800045e <bme280_init+0x92>
    {
        while (try_count)
 80003ee:	e02c      	b.n	800044a <bme280_init+0x7e>
        {
            /* Read the chip-id of bme280 sensor */
            rslt = bme280_get_regs(BME280_CHIP_ID_ADDR, &chip_id, 1, dev);
 80003f0:	f107 010d 	add.w	r1, r7, #13
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	2201      	movs	r2, #1
 80003f8:	20d0      	movs	r0, #208	; 0xd0
 80003fa:	f000 f836 	bl	800046a <bme280_get_regs>
 80003fe:	4603      	mov	r3, r0
 8000400:	73fb      	strb	r3, [r7, #15]

            /* Check for chip id validity */
            if ((rslt == BME280_OK) && (chip_id == BME280_CHIP_ID))
 8000402:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000406:	2b00      	cmp	r3, #0
 8000408:	d114      	bne.n	8000434 <bme280_init+0x68>
 800040a:	7b7b      	ldrb	r3, [r7, #13]
 800040c:	2b60      	cmp	r3, #96	; 0x60
 800040e:	d111      	bne.n	8000434 <bme280_init+0x68>
            {
                dev->chip_id = chip_id;
 8000410:	7b7a      	ldrb	r2, [r7, #13]
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	701a      	strb	r2, [r3, #0]

                /* Reset the sensor */
                rslt = bme280_soft_reset(dev);
 8000416:	6878      	ldr	r0, [r7, #4]
 8000418:	f000 f8dd 	bl	80005d6 <bme280_soft_reset>
 800041c:	4603      	mov	r3, r0
 800041e:	73fb      	strb	r3, [r7, #15]

                if (rslt == BME280_OK)
 8000420:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000424:	2b00      	cmp	r3, #0
 8000426:	d114      	bne.n	8000452 <bme280_init+0x86>
                {
                    /* Read the calibration data */
                    rslt = get_calib_data(dev);
 8000428:	6878      	ldr	r0, [r7, #4]
 800042a:	f000 f923 	bl	8000674 <get_calib_data>
 800042e:	4603      	mov	r3, r0
 8000430:	73fb      	strb	r3, [r7, #15]
                }

                break;
 8000432:	e00e      	b.n	8000452 <bme280_init+0x86>
            }

            /* Wait for 1 ms */
            dev->delay_us(1000, dev->intf_ptr);
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	695b      	ldr	r3, [r3, #20]
 8000438:	687a      	ldr	r2, [r7, #4]
 800043a:	6852      	ldr	r2, [r2, #4]
 800043c:	4611      	mov	r1, r2
 800043e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000442:	4798      	blx	r3
            --try_count;
 8000444:	7bbb      	ldrb	r3, [r7, #14]
 8000446:	3b01      	subs	r3, #1
 8000448:	73bb      	strb	r3, [r7, #14]
        while (try_count)
 800044a:	7bbb      	ldrb	r3, [r7, #14]
 800044c:	2b00      	cmp	r3, #0
 800044e:	d1cf      	bne.n	80003f0 <bme280_init+0x24>
 8000450:	e000      	b.n	8000454 <bme280_init+0x88>
                break;
 8000452:	bf00      	nop
        }

        /* Chip id check failed */
        if (!try_count)
 8000454:	7bbb      	ldrb	r3, [r7, #14]
 8000456:	2b00      	cmp	r3, #0
 8000458:	d101      	bne.n	800045e <bme280_init+0x92>
        {
            rslt = BME280_E_DEV_NOT_FOUND;
 800045a:	23fe      	movs	r3, #254	; 0xfe
 800045c:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 800045e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000462:	4618      	mov	r0, r3
 8000464:	3710      	adds	r7, #16
 8000466:	46bd      	mov	sp, r7
 8000468:	bd80      	pop	{r7, pc}

0800046a <bme280_get_regs>:

/*!
 * @brief This API reads the data from the given register address of the sensor.
 */
int8_t bme280_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint16_t len, struct bme280_dev *dev)
{
 800046a:	b590      	push	{r4, r7, lr}
 800046c:	b087      	sub	sp, #28
 800046e:	af00      	add	r7, sp, #0
 8000470:	60b9      	str	r1, [r7, #8]
 8000472:	607b      	str	r3, [r7, #4]
 8000474:	4603      	mov	r3, r0
 8000476:	73fb      	strb	r3, [r7, #15]
 8000478:	4613      	mov	r3, r2
 800047a:	81bb      	strh	r3, [r7, #12]
    int8_t rslt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 800047c:	6878      	ldr	r0, [r7, #4]
 800047e:	f000 fa62 	bl	8000946 <null_ptr_check>
 8000482:	4603      	mov	r3, r0
 8000484:	75fb      	strb	r3, [r7, #23]

    /* Proceed if null check is fine */
    if ((rslt == BME280_OK) && (reg_data != NULL))
 8000486:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800048a:	2b00      	cmp	r3, #0
 800048c:	d11f      	bne.n	80004ce <bme280_get_regs+0x64>
 800048e:	68bb      	ldr	r3, [r7, #8]
 8000490:	2b00      	cmp	r3, #0
 8000492:	d01c      	beq.n	80004ce <bme280_get_regs+0x64>
    {
        /* If interface selected is SPI */
        if (dev->intf != BME280_I2C_INTF)
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	7a1b      	ldrb	r3, [r3, #8]
 8000498:	2b01      	cmp	r3, #1
 800049a:	d003      	beq.n	80004a4 <bme280_get_regs+0x3a>
        {
            reg_addr = reg_addr | 0x80;
 800049c:	7bfb      	ldrb	r3, [r7, #15]
 800049e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80004a2:	73fb      	strb	r3, [r7, #15]
        }

        /* Read the data  */
        dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	68dc      	ldr	r4, [r3, #12]
 80004a8:	89ba      	ldrh	r2, [r7, #12]
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	685b      	ldr	r3, [r3, #4]
 80004ae:	7bf8      	ldrb	r0, [r7, #15]
 80004b0:	68b9      	ldr	r1, [r7, #8]
 80004b2:	47a0      	blx	r4
 80004b4:	4603      	mov	r3, r0
 80004b6:	461a      	mov	r2, r3
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        /* Check for communication error */
        if (dev->intf_rslt != BME280_INTF_RET_SUCCESS)
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	f993 3045 	ldrsb.w	r3, [r3, #69]	; 0x45
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	d004      	beq.n	80004d2 <bme280_get_regs+0x68>
        {
            rslt = BME280_E_COMM_FAIL;
 80004c8:	23fc      	movs	r3, #252	; 0xfc
 80004ca:	75fb      	strb	r3, [r7, #23]
        if (dev->intf_rslt != BME280_INTF_RET_SUCCESS)
 80004cc:	e001      	b.n	80004d2 <bme280_get_regs+0x68>
        }
    }
    else
    {
        rslt = BME280_E_NULL_PTR;
 80004ce:	23ff      	movs	r3, #255	; 0xff
 80004d0:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80004d2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80004d6:	4618      	mov	r0, r3
 80004d8:	371c      	adds	r7, #28
 80004da:	46bd      	mov	sp, r7
 80004dc:	bd90      	pop	{r4, r7, pc}

080004de <bme280_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of the sensor.
 */
int8_t bme280_set_regs(uint8_t *reg_addr, const uint8_t *reg_data, uint8_t len, struct bme280_dev *dev)
{
 80004de:	b590      	push	{r4, r7, lr}
 80004e0:	b08d      	sub	sp, #52	; 0x34
 80004e2:	af00      	add	r7, sp, #0
 80004e4:	60f8      	str	r0, [r7, #12]
 80004e6:	60b9      	str	r1, [r7, #8]
 80004e8:	603b      	str	r3, [r7, #0]
 80004ea:	4613      	mov	r3, r2
 80004ec:	71fb      	strb	r3, [r7, #7]
    int8_t rslt;
    uint8_t temp_buff[20]; /* Typically not to write more than 10 registers */

    if (len > 10)
 80004ee:	79fb      	ldrb	r3, [r7, #7]
 80004f0:	2b0a      	cmp	r3, #10
 80004f2:	d901      	bls.n	80004f8 <bme280_set_regs+0x1a>
    {
        len = 10;
 80004f4:	230a      	movs	r3, #10
 80004f6:	71fb      	strb	r3, [r7, #7]

    uint16_t temp_len;
    uint8_t reg_addr_cnt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 80004f8:	6838      	ldr	r0, [r7, #0]
 80004fa:	f000 fa24 	bl	8000946 <null_ptr_check>
 80004fe:	4603      	mov	r3, r0
 8000500:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check for arguments validity */
    if ((rslt == BME280_OK) && (reg_addr != NULL) && (reg_data != NULL))
 8000504:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8000508:	2b00      	cmp	r3, #0
 800050a:	d159      	bne.n	80005c0 <bme280_set_regs+0xe2>
 800050c:	68fb      	ldr	r3, [r7, #12]
 800050e:	2b00      	cmp	r3, #0
 8000510:	d056      	beq.n	80005c0 <bme280_set_regs+0xe2>
 8000512:	68bb      	ldr	r3, [r7, #8]
 8000514:	2b00      	cmp	r3, #0
 8000516:	d053      	beq.n	80005c0 <bme280_set_regs+0xe2>
    {
        if (len != 0)
 8000518:	79fb      	ldrb	r3, [r7, #7]
 800051a:	2b00      	cmp	r3, #0
 800051c:	d04c      	beq.n	80005b8 <bme280_set_regs+0xda>
        {
            temp_buff[0] = reg_data[0];
 800051e:	68bb      	ldr	r3, [r7, #8]
 8000520:	781b      	ldrb	r3, [r3, #0]
 8000522:	753b      	strb	r3, [r7, #20]

            /* If interface selected is SPI */
            if (dev->intf != BME280_I2C_INTF)
 8000524:	683b      	ldr	r3, [r7, #0]
 8000526:	7a1b      	ldrb	r3, [r3, #8]
 8000528:	2b01      	cmp	r3, #1
 800052a:	d01a      	beq.n	8000562 <bme280_set_regs+0x84>
            {
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 800052c:	2300      	movs	r3, #0
 800052e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8000532:	e011      	b.n	8000558 <bme280_set_regs+0x7a>
                {
                    reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 8000534:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000538:	68fa      	ldr	r2, [r7, #12]
 800053a:	4413      	add	r3, r2
 800053c:	781a      	ldrb	r2, [r3, #0]
 800053e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000542:	68f9      	ldr	r1, [r7, #12]
 8000544:	440b      	add	r3, r1
 8000546:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800054a:	b2d2      	uxtb	r2, r2
 800054c:	701a      	strb	r2, [r3, #0]
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 800054e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000552:	3301      	adds	r3, #1
 8000554:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8000558:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800055c:	79fb      	ldrb	r3, [r7, #7]
 800055e:	429a      	cmp	r2, r3
 8000560:	d3e8      	bcc.n	8000534 <bme280_set_regs+0x56>
                }
            }

            /* Burst write mode */
            if (len > 1)
 8000562:	79fb      	ldrb	r3, [r7, #7]
 8000564:	2b01      	cmp	r3, #1
 8000566:	d90d      	bls.n	8000584 <bme280_set_regs+0xa6>
            {
                /* Interleave register address w.r.t data for
                 * burst write
                 */
                interleave_reg_addr(reg_addr, temp_buff, reg_data, len);
 8000568:	79fb      	ldrb	r3, [r7, #7]
 800056a:	f107 0114 	add.w	r1, r7, #20
 800056e:	68ba      	ldr	r2, [r7, #8]
 8000570:	68f8      	ldr	r0, [r7, #12]
 8000572:	f000 f8c3 	bl	80006fc <interleave_reg_addr>
                temp_len = ((len * 2) - 1);
 8000576:	79fb      	ldrb	r3, [r7, #7]
 8000578:	b29b      	uxth	r3, r3
 800057a:	005b      	lsls	r3, r3, #1
 800057c:	b29b      	uxth	r3, r3
 800057e:	3b01      	subs	r3, #1
 8000580:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8000582:	e001      	b.n	8000588 <bme280_set_regs+0xaa>
            }
            else
            {
                temp_len = len;
 8000584:	79fb      	ldrb	r3, [r7, #7]
 8000586:	85bb      	strh	r3, [r7, #44]	; 0x2c
            }

            dev->intf_rslt = dev->write(reg_addr[0], temp_buff, temp_len, dev->intf_ptr);
 8000588:	683b      	ldr	r3, [r7, #0]
 800058a:	691c      	ldr	r4, [r3, #16]
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	7818      	ldrb	r0, [r3, #0]
 8000590:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8000592:	683b      	ldr	r3, [r7, #0]
 8000594:	685b      	ldr	r3, [r3, #4]
 8000596:	f107 0114 	add.w	r1, r7, #20
 800059a:	47a0      	blx	r4
 800059c:	4603      	mov	r3, r0
 800059e:	461a      	mov	r2, r3
 80005a0:	683b      	ldr	r3, [r7, #0]
 80005a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            /* Check for communication error */
            if (dev->intf_rslt != BME280_INTF_RET_SUCCESS)
 80005a6:	683b      	ldr	r3, [r7, #0]
 80005a8:	f993 3045 	ldrsb.w	r3, [r3, #69]	; 0x45
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d00b      	beq.n	80005c8 <bme280_set_regs+0xea>
            {
                rslt = BME280_E_COMM_FAIL;
 80005b0:	23fc      	movs	r3, #252	; 0xfc
 80005b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        if (len != 0)
 80005b6:	e007      	b.n	80005c8 <bme280_set_regs+0xea>
            }
        }
        else
        {
            rslt = BME280_E_INVALID_LEN;
 80005b8:	23fd      	movs	r3, #253	; 0xfd
 80005ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        if (len != 0)
 80005be:	e003      	b.n	80005c8 <bme280_set_regs+0xea>
        }
    }
    else
    {
        rslt = BME280_E_NULL_PTR;
 80005c0:	23ff      	movs	r3, #255	; 0xff
 80005c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80005c6:	e000      	b.n	80005ca <bme280_set_regs+0xec>
        if (len != 0)
 80005c8:	bf00      	nop
    }

    return rslt;
 80005ca:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 80005ce:	4618      	mov	r0, r3
 80005d0:	3734      	adds	r7, #52	; 0x34
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bd90      	pop	{r4, r7, pc}

080005d6 <bme280_soft_reset>:

/*!
 * @brief This API performs the soft reset of the sensor.
 */
int8_t bme280_soft_reset(struct bme280_dev *dev)
{
 80005d6:	b580      	push	{r7, lr}
 80005d8:	b084      	sub	sp, #16
 80005da:	af00      	add	r7, sp, #0
 80005dc:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BME280_RESET_ADDR;
 80005de:	23e0      	movs	r3, #224	; 0xe0
 80005e0:	737b      	strb	r3, [r7, #13]
    uint8_t status_reg = 0;
 80005e2:	2300      	movs	r3, #0
 80005e4:	733b      	strb	r3, [r7, #12]
    uint8_t try_run = 5;
 80005e6:	2305      	movs	r3, #5
 80005e8:	73bb      	strb	r3, [r7, #14]

    /* 0xB6 is the soft reset command */
    uint8_t soft_rst_cmd = BME280_SOFT_RESET_COMMAND;
 80005ea:	23b6      	movs	r3, #182	; 0xb6
 80005ec:	72fb      	strb	r3, [r7, #11]

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 80005ee:	6878      	ldr	r0, [r7, #4]
 80005f0:	f000 f9a9 	bl	8000946 <null_ptr_check>
 80005f4:	4603      	mov	r3, r0
 80005f6:	73fb      	strb	r3, [r7, #15]

    /* Proceed if null check is fine */
    if (rslt == BME280_OK)
 80005f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d133      	bne.n	8000668 <bme280_soft_reset+0x92>
    {
        /* Write the soft reset command in the sensor */
        rslt = bme280_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 8000600:	f107 010b 	add.w	r1, r7, #11
 8000604:	f107 000d 	add.w	r0, r7, #13
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	2201      	movs	r2, #1
 800060c:	f7ff ff67 	bl	80004de <bme280_set_regs>
 8000610:	4603      	mov	r3, r0
 8000612:	73fb      	strb	r3, [r7, #15]

        if (rslt == BME280_OK)
 8000614:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000618:	2b00      	cmp	r3, #0
 800061a:	d125      	bne.n	8000668 <bme280_soft_reset+0x92>
        {
            /* If NVM not copied yet, Wait for NVM to copy */
            do
            {
                /* As per data sheet - Table 1, startup time is 2 ms. */
                dev->delay_us(2000, dev->intf_ptr);
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	695b      	ldr	r3, [r3, #20]
 8000620:	687a      	ldr	r2, [r7, #4]
 8000622:	6852      	ldr	r2, [r2, #4]
 8000624:	4611      	mov	r1, r2
 8000626:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800062a:	4798      	blx	r3
                rslt = bme280_get_regs(BME280_STATUS_REG_ADDR, &status_reg, 1, dev);
 800062c:	f107 010c 	add.w	r1, r7, #12
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	2201      	movs	r2, #1
 8000634:	20f3      	movs	r0, #243	; 0xf3
 8000636:	f7ff ff18 	bl	800046a <bme280_get_regs>
 800063a:	4603      	mov	r3, r0
 800063c:	73fb      	strb	r3, [r7, #15]

            } while ((rslt == BME280_OK) && (try_run--) && (status_reg & BME280_STATUS_IM_UPDATE));
 800063e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000642:	2b00      	cmp	r3, #0
 8000644:	d109      	bne.n	800065a <bme280_soft_reset+0x84>
 8000646:	7bbb      	ldrb	r3, [r7, #14]
 8000648:	1e5a      	subs	r2, r3, #1
 800064a:	73ba      	strb	r2, [r7, #14]
 800064c:	2b00      	cmp	r3, #0
 800064e:	d004      	beq.n	800065a <bme280_soft_reset+0x84>
 8000650:	7b3b      	ldrb	r3, [r7, #12]
 8000652:	f003 0301 	and.w	r3, r3, #1
 8000656:	2b00      	cmp	r3, #0
 8000658:	d1e0      	bne.n	800061c <bme280_soft_reset+0x46>

            if (status_reg & BME280_STATUS_IM_UPDATE)
 800065a:	7b3b      	ldrb	r3, [r7, #12]
 800065c:	f003 0301 	and.w	r3, r3, #1
 8000660:	2b00      	cmp	r3, #0
 8000662:	d001      	beq.n	8000668 <bme280_soft_reset+0x92>
            {
                rslt = BME280_E_NVM_COPY_FAILED;
 8000664:	23fa      	movs	r3, #250	; 0xfa
 8000666:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 8000668:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800066c:	4618      	mov	r0, r3
 800066e:	3710      	adds	r7, #16
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}

08000674 <get_calib_data>:
/*!
 * @brief This internal API reads the calibration data from the sensor, parse
 * it and store in the device structure.
 */
static int8_t get_calib_data(struct bme280_dev *dev)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b08a      	sub	sp, #40	; 0x28
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BME280_TEMP_PRESS_CALIB_DATA_ADDR;
 800067c:	2388      	movs	r3, #136	; 0x88
 800067e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    /* Array to store calibration data */
    uint8_t calib_data[BME280_TEMP_PRESS_CALIB_DATA_LEN] = { 0 };
 8000682:	f107 030c 	add.w	r3, r7, #12
 8000686:	2200      	movs	r2, #0
 8000688:	601a      	str	r2, [r3, #0]
 800068a:	605a      	str	r2, [r3, #4]
 800068c:	609a      	str	r2, [r3, #8]
 800068e:	60da      	str	r2, [r3, #12]
 8000690:	611a      	str	r2, [r3, #16]
 8000692:	615a      	str	r2, [r3, #20]
 8000694:	831a      	strh	r2, [r3, #24]

    /* Read the calibration data from the sensor */
    rslt = bme280_get_regs(reg_addr, calib_data, BME280_TEMP_PRESS_CALIB_DATA_LEN, dev);
 8000696:	f107 010c 	add.w	r1, r7, #12
 800069a:	f897 0026 	ldrb.w	r0, [r7, #38]	; 0x26
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	221a      	movs	r2, #26
 80006a2:	f7ff fee2 	bl	800046a <bme280_get_regs>
 80006a6:	4603      	mov	r3, r0
 80006a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if (rslt == BME280_OK)
 80006ac:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d11d      	bne.n	80006f0 <get_calib_data+0x7c>
    {
        /* Parse temperature and pressure calibration data and store
         * it in device structure
         */
        parse_temp_press_calib_data(calib_data, dev);
 80006b4:	f107 030c 	add.w	r3, r7, #12
 80006b8:	6879      	ldr	r1, [r7, #4]
 80006ba:	4618      	mov	r0, r3
 80006bc:	f000 f848 	bl	8000750 <parse_temp_press_calib_data>
        reg_addr = BME280_HUMIDITY_CALIB_DATA_ADDR;
 80006c0:	23e1      	movs	r3, #225	; 0xe1
 80006c2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

        /* Read the humidity calibration data from the sensor */
        rslt = bme280_get_regs(reg_addr, calib_data, BME280_HUMIDITY_CALIB_DATA_LEN, dev);
 80006c6:	f107 010c 	add.w	r1, r7, #12
 80006ca:	f897 0026 	ldrb.w	r0, [r7, #38]	; 0x26
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	2207      	movs	r2, #7
 80006d2:	f7ff feca 	bl	800046a <bme280_get_regs>
 80006d6:	4603      	mov	r3, r0
 80006d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        if (rslt == BME280_OK)
 80006dc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d105      	bne.n	80006f0 <get_calib_data+0x7c>
        {
            /* Parse humidity calibration data and store it in
             * device structure
             */
            parse_humidity_calib_data(calib_data, dev);
 80006e4:	f107 030c 	add.w	r3, r7, #12
 80006e8:	6879      	ldr	r1, [r7, #4]
 80006ea:	4618      	mov	r0, r3
 80006ec:	f000 f8de 	bl	80008ac <parse_humidity_calib_data>
        }
    }

    return rslt;
 80006f0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80006f4:	4618      	mov	r0, r3
 80006f6:	3728      	adds	r7, #40	; 0x28
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}

080006fc <interleave_reg_addr>:
/*!
 * @brief This internal API interleaves the register address between the
 * register data buffer for burst write operation.
 */
static void interleave_reg_addr(const uint8_t *reg_addr, uint8_t *temp_buff, const uint8_t *reg_data, uint8_t len)
{
 80006fc:	b480      	push	{r7}
 80006fe:	b087      	sub	sp, #28
 8000700:	af00      	add	r7, sp, #0
 8000702:	60f8      	str	r0, [r7, #12]
 8000704:	60b9      	str	r1, [r7, #8]
 8000706:	607a      	str	r2, [r7, #4]
 8000708:	70fb      	strb	r3, [r7, #3]
    uint8_t index;

    for (index = 1; index < len; index++)
 800070a:	2301      	movs	r3, #1
 800070c:	75fb      	strb	r3, [r7, #23]
 800070e:	e016      	b.n	800073e <interleave_reg_addr+0x42>
    {
        temp_buff[(index * 2) - 1] = reg_addr[index];
 8000710:	7dfb      	ldrb	r3, [r7, #23]
 8000712:	68fa      	ldr	r2, [r7, #12]
 8000714:	441a      	add	r2, r3
 8000716:	7dfb      	ldrb	r3, [r7, #23]
 8000718:	005b      	lsls	r3, r3, #1
 800071a:	3b01      	subs	r3, #1
 800071c:	68b9      	ldr	r1, [r7, #8]
 800071e:	440b      	add	r3, r1
 8000720:	7812      	ldrb	r2, [r2, #0]
 8000722:	701a      	strb	r2, [r3, #0]
        temp_buff[index * 2] = reg_data[index];
 8000724:	7dfb      	ldrb	r3, [r7, #23]
 8000726:	687a      	ldr	r2, [r7, #4]
 8000728:	441a      	add	r2, r3
 800072a:	7dfb      	ldrb	r3, [r7, #23]
 800072c:	005b      	lsls	r3, r3, #1
 800072e:	4619      	mov	r1, r3
 8000730:	68bb      	ldr	r3, [r7, #8]
 8000732:	440b      	add	r3, r1
 8000734:	7812      	ldrb	r2, [r2, #0]
 8000736:	701a      	strb	r2, [r3, #0]
    for (index = 1; index < len; index++)
 8000738:	7dfb      	ldrb	r3, [r7, #23]
 800073a:	3301      	adds	r3, #1
 800073c:	75fb      	strb	r3, [r7, #23]
 800073e:	7dfa      	ldrb	r2, [r7, #23]
 8000740:	78fb      	ldrb	r3, [r7, #3]
 8000742:	429a      	cmp	r2, r3
 8000744:	d3e4      	bcc.n	8000710 <interleave_reg_addr+0x14>
    }
}
 8000746:	bf00      	nop
 8000748:	371c      	adds	r7, #28
 800074a:	46bd      	mov	sp, r7
 800074c:	bc80      	pop	{r7}
 800074e:	4770      	bx	lr

08000750 <parse_temp_press_calib_data>:
/*!
 *  @brief This internal API is used to parse the temperature and
 *  pressure calibration data and store it in device structure.
 */
static void parse_temp_press_calib_data(const uint8_t *reg_data, struct bme280_dev *dev)
{
 8000750:	b480      	push	{r7}
 8000752:	b085      	sub	sp, #20
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
 8000758:	6039      	str	r1, [r7, #0]
    struct bme280_calib_data *calib_data = &dev->calib_data;
 800075a:	683b      	ldr	r3, [r7, #0]
 800075c:	3318      	adds	r3, #24
 800075e:	60fb      	str	r3, [r7, #12]

    calib_data->dig_t1 = BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	3301      	adds	r3, #1
 8000764:	781b      	ldrb	r3, [r3, #0]
 8000766:	021b      	lsls	r3, r3, #8
 8000768:	b21a      	sxth	r2, r3
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	781b      	ldrb	r3, [r3, #0]
 800076e:	b21b      	sxth	r3, r3
 8000770:	4313      	orrs	r3, r2
 8000772:	b21b      	sxth	r3, r3
 8000774:	b29a      	uxth	r2, r3
 8000776:	68fb      	ldr	r3, [r7, #12]
 8000778:	801a      	strh	r2, [r3, #0]
    calib_data->dig_t2 = (int16_t)BME280_CONCAT_BYTES(reg_data[3], reg_data[2]);
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	3303      	adds	r3, #3
 800077e:	781b      	ldrb	r3, [r3, #0]
 8000780:	021b      	lsls	r3, r3, #8
 8000782:	b21a      	sxth	r2, r3
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	3302      	adds	r3, #2
 8000788:	781b      	ldrb	r3, [r3, #0]
 800078a:	b21b      	sxth	r3, r3
 800078c:	4313      	orrs	r3, r2
 800078e:	b21a      	sxth	r2, r3
 8000790:	68fb      	ldr	r3, [r7, #12]
 8000792:	805a      	strh	r2, [r3, #2]
    calib_data->dig_t3 = (int16_t)BME280_CONCAT_BYTES(reg_data[5], reg_data[4]);
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	3305      	adds	r3, #5
 8000798:	781b      	ldrb	r3, [r3, #0]
 800079a:	021b      	lsls	r3, r3, #8
 800079c:	b21a      	sxth	r2, r3
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	3304      	adds	r3, #4
 80007a2:	781b      	ldrb	r3, [r3, #0]
 80007a4:	b21b      	sxth	r3, r3
 80007a6:	4313      	orrs	r3, r2
 80007a8:	b21a      	sxth	r2, r3
 80007aa:	68fb      	ldr	r3, [r7, #12]
 80007ac:	809a      	strh	r2, [r3, #4]
    calib_data->dig_p1 = BME280_CONCAT_BYTES(reg_data[7], reg_data[6]);
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	3307      	adds	r3, #7
 80007b2:	781b      	ldrb	r3, [r3, #0]
 80007b4:	021b      	lsls	r3, r3, #8
 80007b6:	b21a      	sxth	r2, r3
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	3306      	adds	r3, #6
 80007bc:	781b      	ldrb	r3, [r3, #0]
 80007be:	b21b      	sxth	r3, r3
 80007c0:	4313      	orrs	r3, r2
 80007c2:	b21b      	sxth	r3, r3
 80007c4:	b29a      	uxth	r2, r3
 80007c6:	68fb      	ldr	r3, [r7, #12]
 80007c8:	80da      	strh	r2, [r3, #6]
    calib_data->dig_p2 = (int16_t)BME280_CONCAT_BYTES(reg_data[9], reg_data[8]);
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	3309      	adds	r3, #9
 80007ce:	781b      	ldrb	r3, [r3, #0]
 80007d0:	021b      	lsls	r3, r3, #8
 80007d2:	b21a      	sxth	r2, r3
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	3308      	adds	r3, #8
 80007d8:	781b      	ldrb	r3, [r3, #0]
 80007da:	b21b      	sxth	r3, r3
 80007dc:	4313      	orrs	r3, r2
 80007de:	b21a      	sxth	r2, r3
 80007e0:	68fb      	ldr	r3, [r7, #12]
 80007e2:	811a      	strh	r2, [r3, #8]
    calib_data->dig_p3 = (int16_t)BME280_CONCAT_BYTES(reg_data[11], reg_data[10]);
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	330b      	adds	r3, #11
 80007e8:	781b      	ldrb	r3, [r3, #0]
 80007ea:	021b      	lsls	r3, r3, #8
 80007ec:	b21a      	sxth	r2, r3
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	330a      	adds	r3, #10
 80007f2:	781b      	ldrb	r3, [r3, #0]
 80007f4:	b21b      	sxth	r3, r3
 80007f6:	4313      	orrs	r3, r2
 80007f8:	b21a      	sxth	r2, r3
 80007fa:	68fb      	ldr	r3, [r7, #12]
 80007fc:	815a      	strh	r2, [r3, #10]
    calib_data->dig_p4 = (int16_t)BME280_CONCAT_BYTES(reg_data[13], reg_data[12]);
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	330d      	adds	r3, #13
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	021b      	lsls	r3, r3, #8
 8000806:	b21a      	sxth	r2, r3
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	330c      	adds	r3, #12
 800080c:	781b      	ldrb	r3, [r3, #0]
 800080e:	b21b      	sxth	r3, r3
 8000810:	4313      	orrs	r3, r2
 8000812:	b21a      	sxth	r2, r3
 8000814:	68fb      	ldr	r3, [r7, #12]
 8000816:	819a      	strh	r2, [r3, #12]
    calib_data->dig_p5 = (int16_t)BME280_CONCAT_BYTES(reg_data[15], reg_data[14]);
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	330f      	adds	r3, #15
 800081c:	781b      	ldrb	r3, [r3, #0]
 800081e:	021b      	lsls	r3, r3, #8
 8000820:	b21a      	sxth	r2, r3
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	330e      	adds	r3, #14
 8000826:	781b      	ldrb	r3, [r3, #0]
 8000828:	b21b      	sxth	r3, r3
 800082a:	4313      	orrs	r3, r2
 800082c:	b21a      	sxth	r2, r3
 800082e:	68fb      	ldr	r3, [r7, #12]
 8000830:	81da      	strh	r2, [r3, #14]
    calib_data->dig_p6 = (int16_t)BME280_CONCAT_BYTES(reg_data[17], reg_data[16]);
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	3311      	adds	r3, #17
 8000836:	781b      	ldrb	r3, [r3, #0]
 8000838:	021b      	lsls	r3, r3, #8
 800083a:	b21a      	sxth	r2, r3
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	3310      	adds	r3, #16
 8000840:	781b      	ldrb	r3, [r3, #0]
 8000842:	b21b      	sxth	r3, r3
 8000844:	4313      	orrs	r3, r2
 8000846:	b21a      	sxth	r2, r3
 8000848:	68fb      	ldr	r3, [r7, #12]
 800084a:	821a      	strh	r2, [r3, #16]
    calib_data->dig_p7 = (int16_t)BME280_CONCAT_BYTES(reg_data[19], reg_data[18]);
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	3313      	adds	r3, #19
 8000850:	781b      	ldrb	r3, [r3, #0]
 8000852:	021b      	lsls	r3, r3, #8
 8000854:	b21a      	sxth	r2, r3
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	3312      	adds	r3, #18
 800085a:	781b      	ldrb	r3, [r3, #0]
 800085c:	b21b      	sxth	r3, r3
 800085e:	4313      	orrs	r3, r2
 8000860:	b21a      	sxth	r2, r3
 8000862:	68fb      	ldr	r3, [r7, #12]
 8000864:	825a      	strh	r2, [r3, #18]
    calib_data->dig_p8 = (int16_t)BME280_CONCAT_BYTES(reg_data[21], reg_data[20]);
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	3315      	adds	r3, #21
 800086a:	781b      	ldrb	r3, [r3, #0]
 800086c:	021b      	lsls	r3, r3, #8
 800086e:	b21a      	sxth	r2, r3
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	3314      	adds	r3, #20
 8000874:	781b      	ldrb	r3, [r3, #0]
 8000876:	b21b      	sxth	r3, r3
 8000878:	4313      	orrs	r3, r2
 800087a:	b21a      	sxth	r2, r3
 800087c:	68fb      	ldr	r3, [r7, #12]
 800087e:	829a      	strh	r2, [r3, #20]
    calib_data->dig_p9 = (int16_t)BME280_CONCAT_BYTES(reg_data[23], reg_data[22]);
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	3317      	adds	r3, #23
 8000884:	781b      	ldrb	r3, [r3, #0]
 8000886:	021b      	lsls	r3, r3, #8
 8000888:	b21a      	sxth	r2, r3
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	3316      	adds	r3, #22
 800088e:	781b      	ldrb	r3, [r3, #0]
 8000890:	b21b      	sxth	r3, r3
 8000892:	4313      	orrs	r3, r2
 8000894:	b21a      	sxth	r2, r3
 8000896:	68fb      	ldr	r3, [r7, #12]
 8000898:	82da      	strh	r2, [r3, #22]
    calib_data->dig_h1 = reg_data[25];
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	7e5a      	ldrb	r2, [r3, #25]
 800089e:	68fb      	ldr	r3, [r7, #12]
 80008a0:	761a      	strb	r2, [r3, #24]
}
 80008a2:	bf00      	nop
 80008a4:	3714      	adds	r7, #20
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bc80      	pop	{r7}
 80008aa:	4770      	bx	lr

080008ac <parse_humidity_calib_data>:
/*!
 *  @brief This internal API is used to parse the humidity calibration data
 *  and store it in device structure.
 */
static void parse_humidity_calib_data(const uint8_t *reg_data, struct bme280_dev *dev)
{
 80008ac:	b480      	push	{r7}
 80008ae:	b087      	sub	sp, #28
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
 80008b4:	6039      	str	r1, [r7, #0]
    struct bme280_calib_data *calib_data = &dev->calib_data;
 80008b6:	683b      	ldr	r3, [r7, #0]
 80008b8:	3318      	adds	r3, #24
 80008ba:	617b      	str	r3, [r7, #20]
    int16_t dig_h4_lsb;
    int16_t dig_h4_msb;
    int16_t dig_h5_lsb;
    int16_t dig_h5_msb;

    calib_data->dig_h2 = (int16_t)BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	3301      	adds	r3, #1
 80008c0:	781b      	ldrb	r3, [r3, #0]
 80008c2:	021b      	lsls	r3, r3, #8
 80008c4:	b21a      	sxth	r2, r3
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	781b      	ldrb	r3, [r3, #0]
 80008ca:	b21b      	sxth	r3, r3
 80008cc:	4313      	orrs	r3, r2
 80008ce:	b21a      	sxth	r2, r3
 80008d0:	697b      	ldr	r3, [r7, #20]
 80008d2:	835a      	strh	r2, [r3, #26]
    calib_data->dig_h3 = reg_data[2];
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	789a      	ldrb	r2, [r3, #2]
 80008d8:	697b      	ldr	r3, [r7, #20]
 80008da:	771a      	strb	r2, [r3, #28]
    dig_h4_msb = (int16_t)(int8_t)reg_data[3] * 16;
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	3303      	adds	r3, #3
 80008e0:	781b      	ldrb	r3, [r3, #0]
 80008e2:	b25b      	sxtb	r3, r3
 80008e4:	b29b      	uxth	r3, r3
 80008e6:	011b      	lsls	r3, r3, #4
 80008e8:	b29b      	uxth	r3, r3
 80008ea:	827b      	strh	r3, [r7, #18]
    dig_h4_lsb = (int16_t)(reg_data[4] & 0x0F);
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	3304      	adds	r3, #4
 80008f0:	781b      	ldrb	r3, [r3, #0]
 80008f2:	b21b      	sxth	r3, r3
 80008f4:	f003 030f 	and.w	r3, r3, #15
 80008f8:	823b      	strh	r3, [r7, #16]
    calib_data->dig_h4 = dig_h4_msb | dig_h4_lsb;
 80008fa:	8a7a      	ldrh	r2, [r7, #18]
 80008fc:	8a3b      	ldrh	r3, [r7, #16]
 80008fe:	4313      	orrs	r3, r2
 8000900:	b21a      	sxth	r2, r3
 8000902:	697b      	ldr	r3, [r7, #20]
 8000904:	83da      	strh	r2, [r3, #30]
    dig_h5_msb = (int16_t)(int8_t)reg_data[5] * 16;
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	3305      	adds	r3, #5
 800090a:	781b      	ldrb	r3, [r3, #0]
 800090c:	b25b      	sxtb	r3, r3
 800090e:	b29b      	uxth	r3, r3
 8000910:	011b      	lsls	r3, r3, #4
 8000912:	b29b      	uxth	r3, r3
 8000914:	81fb      	strh	r3, [r7, #14]
    dig_h5_lsb = (int16_t)(reg_data[4] >> 4);
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	3304      	adds	r3, #4
 800091a:	781b      	ldrb	r3, [r3, #0]
 800091c:	091b      	lsrs	r3, r3, #4
 800091e:	b2db      	uxtb	r3, r3
 8000920:	81bb      	strh	r3, [r7, #12]
    calib_data->dig_h5 = dig_h5_msb | dig_h5_lsb;
 8000922:	89fa      	ldrh	r2, [r7, #14]
 8000924:	89bb      	ldrh	r3, [r7, #12]
 8000926:	4313      	orrs	r3, r2
 8000928:	b21a      	sxth	r2, r3
 800092a:	697b      	ldr	r3, [r7, #20]
 800092c:	841a      	strh	r2, [r3, #32]
    calib_data->dig_h6 = (int8_t)reg_data[6];
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	3306      	adds	r3, #6
 8000932:	781b      	ldrb	r3, [r3, #0]
 8000934:	b25a      	sxtb	r2, r3
 8000936:	697b      	ldr	r3, [r7, #20]
 8000938:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 800093c:	bf00      	nop
 800093e:	371c      	adds	r7, #28
 8000940:	46bd      	mov	sp, r7
 8000942:	bc80      	pop	{r7}
 8000944:	4770      	bx	lr

08000946 <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bme280_dev *dev)
{
 8000946:	b480      	push	{r7}
 8000948:	b085      	sub	sp, #20
 800094a:	af00      	add	r7, sp, #0
 800094c:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	2b00      	cmp	r3, #0
 8000952:	d00b      	beq.n	800096c <null_ptr_check+0x26>
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	68db      	ldr	r3, [r3, #12]
 8000958:	2b00      	cmp	r3, #0
 800095a:	d007      	beq.n	800096c <null_ptr_check+0x26>
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	691b      	ldr	r3, [r3, #16]
 8000960:	2b00      	cmp	r3, #0
 8000962:	d003      	beq.n	800096c <null_ptr_check+0x26>
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	695b      	ldr	r3, [r3, #20]
 8000968:	2b00      	cmp	r3, #0
 800096a:	d102      	bne.n	8000972 <null_ptr_check+0x2c>
    {
        /* Device structure pointer is not valid */
        rslt = BME280_E_NULL_PTR;
 800096c:	23ff      	movs	r3, #255	; 0xff
 800096e:	73fb      	strb	r3, [r7, #15]
 8000970:	e001      	b.n	8000976 <null_ptr_check+0x30>
    }
    else
    {
        /* Device structure is fine */
        rslt = BME280_OK;
 8000972:	2300      	movs	r3, #0
 8000974:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8000976:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800097a:	4618      	mov	r0, r3
 800097c:	3714      	adds	r7, #20
 800097e:	46bd      	mov	sp, r7
 8000980:	bc80      	pop	{r7}
 8000982:	4770      	bx	lr

08000984 <Reset_Handler>:
 8000984:	480d      	ldr	r0, [pc, #52]	; (80009bc <LoopForever+0x2>)
 8000986:	4685      	mov	sp, r0
 8000988:	480d      	ldr	r0, [pc, #52]	; (80009c0 <LoopForever+0x6>)
 800098a:	490e      	ldr	r1, [pc, #56]	; (80009c4 <LoopForever+0xa>)
 800098c:	4a0e      	ldr	r2, [pc, #56]	; (80009c8 <LoopForever+0xe>)
 800098e:	2300      	movs	r3, #0
 8000990:	e002      	b.n	8000998 <LoopCopyDataInit>

08000992 <CopyDataInit>:
 8000992:	58d4      	ldr	r4, [r2, r3]
 8000994:	50c4      	str	r4, [r0, r3]
 8000996:	3304      	adds	r3, #4

08000998 <LoopCopyDataInit>:
 8000998:	18c4      	adds	r4, r0, r3
 800099a:	428c      	cmp	r4, r1
 800099c:	d3f9      	bcc.n	8000992 <CopyDataInit>
 800099e:	4a0b      	ldr	r2, [pc, #44]	; (80009cc <LoopForever+0x12>)
 80009a0:	4c0b      	ldr	r4, [pc, #44]	; (80009d0 <LoopForever+0x16>)
 80009a2:	2300      	movs	r3, #0
 80009a4:	e001      	b.n	80009aa <LoopFillZerobss>

080009a6 <FillZerobss>:
 80009a6:	6013      	str	r3, [r2, #0]
 80009a8:	3204      	adds	r2, #4

080009aa <LoopFillZerobss>:
 80009aa:	42a2      	cmp	r2, r4
 80009ac:	d3fb      	bcc.n	80009a6 <FillZerobss>
 80009ae:	f3af 8000 	nop.w
 80009b2:	f001 f9d5 	bl	8001d60 <__libc_init_array>
 80009b6:	f7ff fc43 	bl	8000240 <main>

080009ba <LoopForever>:
 80009ba:	e7fe      	b.n	80009ba <LoopForever>
 80009bc:	20020000 	.word	0x20020000
 80009c0:	20000000 	.word	0x20000000
 80009c4:	20000064 	.word	0x20000064
 80009c8:	08001ff4 	.word	0x08001ff4
 80009cc:	20000064 	.word	0x20000064
 80009d0:	2000009c 	.word	0x2000009c

080009d4 <ADC_IRQHandler>:
 80009d4:	e7fe      	b.n	80009d4 <ADC_IRQHandler>
	...

080009d8 <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t>:
#define SPI_SR_BSY                      7
#define SPI_SR_FRE                      8



inline uint8_t gpio_baseAddr_to_code(GPIO_RegDef_t *Port) {
 80009d8:	b480      	push	{r7}
 80009da:	b083      	sub	sp, #12
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
			 (Port == GPIOC) ? 0x02 : \
			 (Port == GPIOD) ? 0x03 : \
			 (Port == GPIOE) ? 0x04 : \
			 (Port == GPIOF) ? 0x05 : \
			 (Port == GPIOG) ? 0x06 : \
			 (Port == GPIOH) ? 0x07 : 0x00 );
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	4a1a      	ldr	r2, [pc, #104]	; (8000a4c <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t+0x74>)
 80009e4:	4293      	cmp	r3, r2
 80009e6:	d02b      	beq.n	8000a40 <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t+0x68>
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	4a19      	ldr	r2, [pc, #100]	; (8000a50 <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t+0x78>)
 80009ec:	4293      	cmp	r3, r2
 80009ee:	d025      	beq.n	8000a3c <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t+0x64>
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	4a18      	ldr	r2, [pc, #96]	; (8000a54 <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t+0x7c>)
 80009f4:	4293      	cmp	r3, r2
 80009f6:	d01f      	beq.n	8000a38 <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t+0x60>
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	4a17      	ldr	r2, [pc, #92]	; (8000a58 <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t+0x80>)
 80009fc:	4293      	cmp	r3, r2
 80009fe:	d019      	beq.n	8000a34 <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t+0x5c>
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	4a16      	ldr	r2, [pc, #88]	; (8000a5c <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t+0x84>)
 8000a04:	4293      	cmp	r3, r2
 8000a06:	d013      	beq.n	8000a30 <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t+0x58>
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	4a15      	ldr	r2, [pc, #84]	; (8000a60 <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t+0x88>)
 8000a0c:	4293      	cmp	r3, r2
 8000a0e:	d00d      	beq.n	8000a2c <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t+0x54>
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	4a14      	ldr	r2, [pc, #80]	; (8000a64 <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t+0x8c>)
 8000a14:	4293      	cmp	r3, r2
 8000a16:	d007      	beq.n	8000a28 <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t+0x50>
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	4a13      	ldr	r2, [pc, #76]	; (8000a68 <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t+0x90>)
 8000a1c:	4293      	cmp	r3, r2
 8000a1e:	d101      	bne.n	8000a24 <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t+0x4c>
 8000a20:	2307      	movs	r3, #7
 8000a22:	e00e      	b.n	8000a42 <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t+0x6a>
 8000a24:	2300      	movs	r3, #0
 8000a26:	e00c      	b.n	8000a42 <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t+0x6a>
 8000a28:	2306      	movs	r3, #6
 8000a2a:	e00a      	b.n	8000a42 <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t+0x6a>
 8000a2c:	2305      	movs	r3, #5
 8000a2e:	e008      	b.n	8000a42 <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t+0x6a>
 8000a30:	2304      	movs	r3, #4
 8000a32:	e006      	b.n	8000a42 <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t+0x6a>
 8000a34:	2303      	movs	r3, #3
 8000a36:	e004      	b.n	8000a42 <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t+0x6a>
 8000a38:	2302      	movs	r3, #2
 8000a3a:	e002      	b.n	8000a42 <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t+0x6a>
 8000a3c:	2301      	movs	r3, #1
 8000a3e:	e000      	b.n	8000a42 <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t+0x6a>
 8000a40:	2300      	movs	r3, #0
}
 8000a42:	4618      	mov	r0, r3
 8000a44:	370c      	adds	r7, #12
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bc80      	pop	{r7}
 8000a4a:	4770      	bx	lr
 8000a4c:	40020000 	.word	0x40020000
 8000a50:	40020400 	.word	0x40020400
 8000a54:	40020800 	.word	0x40020800
 8000a58:	40020c00 	.word	0x40020c00
 8000a5c:	40021000 	.word	0x40021000
 8000a60:	40021400 	.word	0x40021400
 8000a64:	40021800 	.word	0x40021800
 8000a68:	40021c00 	.word	0x40021c00

08000a6c <_ZL14get_irq_pinNumh>:
	void GPIO_IRQInterruptConfig(const uint8_t IRQNumber, const uint8_t EnorDi);
	void GPIO_IRQPriorityConfig(const uint8_t IRQNumber, const uint8_t IRQPriority);

};

static inline uint8_t get_irq_pinNum(uint8_t PinNumber) {
 8000a6c:	b480      	push	{r7}
 8000a6e:	b083      	sub	sp, #12
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	4603      	mov	r3, r0
 8000a74:	71fb      	strb	r3, [r7, #7]
    return (PinNumber < 5)  ? PinNumber + 6 : \
           (PinNumber < 10) ? IRQ_NO_EXTI9_5 : \
           (PinNumber < 16) ? IRQ_NO_EXTI15_10 : 0;
 8000a76:	79fb      	ldrb	r3, [r7, #7]
 8000a78:	2b04      	cmp	r3, #4
 8000a7a:	d803      	bhi.n	8000a84 <_ZL14get_irq_pinNumh+0x18>
 8000a7c:	79fb      	ldrb	r3, [r7, #7]
 8000a7e:	3306      	adds	r3, #6
 8000a80:	b2db      	uxtb	r3, r3
 8000a82:	e00a      	b.n	8000a9a <_ZL14get_irq_pinNumh+0x2e>
 8000a84:	79fb      	ldrb	r3, [r7, #7]
 8000a86:	2b09      	cmp	r3, #9
 8000a88:	d906      	bls.n	8000a98 <_ZL14get_irq_pinNumh+0x2c>
 8000a8a:	79fb      	ldrb	r3, [r7, #7]
 8000a8c:	2b0f      	cmp	r3, #15
 8000a8e:	d801      	bhi.n	8000a94 <_ZL14get_irq_pinNumh+0x28>
 8000a90:	2328      	movs	r3, #40	; 0x28
 8000a92:	e002      	b.n	8000a9a <_ZL14get_irq_pinNumh+0x2e>
 8000a94:	2300      	movs	r3, #0
 8000a96:	e000      	b.n	8000a9a <_ZL14get_irq_pinNumh+0x2e>
 8000a98:	2317      	movs	r3, #23
}
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	370c      	adds	r7, #12
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bc80      	pop	{r7}
 8000aa2:	4770      	bx	lr

08000aa4 <_ZN12GPIO_HandlerC1EP13GPIO_RegDef_thhhhhhh>:
/*********************************************************************
 * @class      		  - GPIO_Handler
 *
 * @brief             - Constructor, initialize GPIO, clock, IRQ, Alt Function
 **********************************************************************/
GPIO_Handler::GPIO_Handler(
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b086      	sub	sp, #24
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	60f8      	str	r0, [r7, #12]
 8000aac:	60b9      	str	r1, [r7, #8]
 8000aae:	4611      	mov	r1, r2
 8000ab0:	461a      	mov	r2, r3
 8000ab2:	460b      	mov	r3, r1
 8000ab4:	71fb      	strb	r3, [r7, #7]
 8000ab6:	4613      	mov	r3, r2
 8000ab8:	71bb      	strb	r3, [r7, #6]
		uint8_t GPIO_PinMode,
		uint8_t GPIO_PinSpeed,
		uint8_t GPIO_IRQ_Priority,
		uint8_t GPIO_PinOPType,
		uint8_t GPIO_PinPuPdControl,
		uint8_t GPIO_PinAltFunMode) {
 8000aba:	68fb      	ldr	r3, [r7, #12]
 8000abc:	461a      	mov	r2, r3
 8000abe:	2300      	movs	r3, #0
 8000ac0:	6013      	str	r3, [r2, #0]
 8000ac2:	6053      	str	r3, [r2, #4]
 8000ac4:	6093      	str	r3, [r2, #8]
	GPIOx_.pGPIOx = ((GPIO_RegDef_t *)(GPIOx_ADDR));
 8000ac6:	68ba      	ldr	r2, [r7, #8]
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	601a      	str	r2, [r3, #0]
	GPIOx_.GPIO_PinConfig.GPIO_PinNumber = GPIO_PinNumber;
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	79fa      	ldrb	r2, [r7, #7]
 8000ad0:	711a      	strb	r2, [r3, #4]
	GPIOx_.GPIO_PinConfig.GPIO_PinMode = GPIO_PinMode;
 8000ad2:	68fb      	ldr	r3, [r7, #12]
 8000ad4:	79ba      	ldrb	r2, [r7, #6]
 8000ad6:	715a      	strb	r2, [r3, #5]
	GPIOx_.GPIO_PinConfig.GPIO_PinSpeed = GPIO_PinSpeed;
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000ade:	719a      	strb	r2, [r3, #6]
	GPIOx_.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PinPuPdControl;
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8000ae6:	71da      	strb	r2, [r3, #7]
	GPIOx_.GPIO_PinConfig.GPIO_PinOPType = GPIO_PinOPType;
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8000aee:	721a      	strb	r2, [r3, #8]
	GPIOx_.GPIO_PinConfig.GPIO_PinAltFunMode = GPIO_PinAltFunMode;
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8000af6:	725a      	strb	r2, [r3, #9]
	GPIO_PeriClockControl();
 8000af8:	68f8      	ldr	r0, [r7, #12]
 8000afa:	f000 f82b 	bl	8000b54 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv>
	GPIO_Init();
 8000afe:	68f8      	ldr	r0, [r7, #12]
 8000b00:	f000 f8a2 	bl	8000c48 <_ZN12GPIO_Handler9GPIO_InitEv>
	// Configure interrupt
	if(GPIO_PinMode >= GPIO_MODE_IT_FT) {
 8000b04:	79bb      	ldrb	r3, [r7, #6]
 8000b06:	2b03      	cmp	r3, #3
 8000b08:	d912      	bls.n	8000b30 <_ZN12GPIO_HandlerC1EP13GPIO_RegDef_thhhhhhh+0x8c>
		uint8_t IRQ_number = get_irq_pinNum(GPIO_PinNumber);
 8000b0a:	79fb      	ldrb	r3, [r7, #7]
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	f7ff ffad 	bl	8000a6c <_ZL14get_irq_pinNumh>
 8000b12:	4603      	mov	r3, r0
 8000b14:	75fb      	strb	r3, [r7, #23]
		GPIO_IRQInterruptConfig(IRQ_number, ENABLE);
 8000b16:	7dfb      	ldrb	r3, [r7, #23]
 8000b18:	2201      	movs	r2, #1
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	68f8      	ldr	r0, [r7, #12]
 8000b1e:	f000 fa93 	bl	8001048 <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh>
		GPIO_IRQPriorityConfig(IRQ_number, GPIO_IRQ_Priority);
 8000b22:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8000b26:	7dfb      	ldrb	r3, [r7, #23]
 8000b28:	4619      	mov	r1, r3
 8000b2a:	68f8      	ldr	r0, [r7, #12]
 8000b2c:	f000 fb10 	bl	8001150 <_ZN12GPIO_Handler22GPIO_IRQPriorityConfigEhh>
	}
}
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	4618      	mov	r0, r3
 8000b34:	3718      	adds	r7, #24
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}

08000b3a <_ZN12GPIO_HandlerD1Ev>:
 *
 * @return None
 *
 * @Node: Be careful when using many Peripheral device in the same PORT
 **********************************************************************/
GPIO_Handler::~GPIO_Handler() {
 8000b3a:	b580      	push	{r7, lr}
 8000b3c:	b082      	sub	sp, #8
 8000b3e:	af00      	add	r7, sp, #0
 8000b40:	6078      	str	r0, [r7, #4]
	GPIO_DeInit();
 8000b42:	6878      	ldr	r0, [r7, #4]
 8000b44:	f000 f9d6 	bl	8000ef4 <_ZN12GPIO_Handler11GPIO_DeInitEv>
}
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	3708      	adds	r7, #8
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
	...

08000b54 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv>:

// peripheral clock setup
void GPIO_Handler::GPIO_PeriClockControl() {
 8000b54:	b480      	push	{r7}
 8000b56:	b083      	sub	sp, #12
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
	if (GPIOx_.pGPIOx == GPIOA) {
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	4a30      	ldr	r2, [pc, #192]	; (8000c24 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xd0>)
 8000b62:	4293      	cmp	r3, r2
 8000b64:	d106      	bne.n	8000b74 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0x20>
		GPIOA_PCLK_EN();
 8000b66:	4b30      	ldr	r3, [pc, #192]	; (8000c28 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xd4>)
 8000b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6a:	4a2f      	ldr	r2, [pc, #188]	; (8000c28 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xd4>)
 8000b6c:	f043 0301 	orr.w	r3, r3, #1
 8000b70:	6313      	str	r3, [r2, #48]	; 0x30
	} else if (GPIOx_.pGPIOx == GPIOG) {
		GPIOG_PCLK_EN();
	} else if (GPIOx_.pGPIOx == GPIOH) {
		GPIOH_PCLK_EN();
	}
}
 8000b72:	e052      	b.n	8000c1a <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xc6>
	} else if (GPIOx_.pGPIOx == GPIOB) {
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	4a2c      	ldr	r2, [pc, #176]	; (8000c2c <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xd8>)
 8000b7a:	4293      	cmp	r3, r2
 8000b7c:	d106      	bne.n	8000b8c <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0x38>
		GPIOB_PCLK_EN();
 8000b7e:	4b2a      	ldr	r3, [pc, #168]	; (8000c28 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xd4>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b82:	4a29      	ldr	r2, [pc, #164]	; (8000c28 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xd4>)
 8000b84:	f043 0302 	orr.w	r3, r3, #2
 8000b88:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000b8a:	e046      	b.n	8000c1a <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xc6>
	} else if (GPIOx_.pGPIOx == GPIOC) {
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	4a27      	ldr	r2, [pc, #156]	; (8000c30 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xdc>)
 8000b92:	4293      	cmp	r3, r2
 8000b94:	d106      	bne.n	8000ba4 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0x50>
		GPIOC_PCLK_EN();
 8000b96:	4b24      	ldr	r3, [pc, #144]	; (8000c28 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xd4>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9a:	4a23      	ldr	r2, [pc, #140]	; (8000c28 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xd4>)
 8000b9c:	f043 0304 	orr.w	r3, r3, #4
 8000ba0:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000ba2:	e03a      	b.n	8000c1a <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xc6>
	} else if (GPIOx_.pGPIOx == GPIOD) {
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	4a22      	ldr	r2, [pc, #136]	; (8000c34 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xe0>)
 8000baa:	4293      	cmp	r3, r2
 8000bac:	d106      	bne.n	8000bbc <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0x68>
		GPIOD_PCLK_EN();
 8000bae:	4b1e      	ldr	r3, [pc, #120]	; (8000c28 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xd4>)
 8000bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb2:	4a1d      	ldr	r2, [pc, #116]	; (8000c28 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xd4>)
 8000bb4:	f043 0308 	orr.w	r3, r3, #8
 8000bb8:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000bba:	e02e      	b.n	8000c1a <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xc6>
	} else if (GPIOx_.pGPIOx == GPIOE) {
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	4a1d      	ldr	r2, [pc, #116]	; (8000c38 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xe4>)
 8000bc2:	4293      	cmp	r3, r2
 8000bc4:	d106      	bne.n	8000bd4 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0x80>
		GPIOE_PCLK_EN();
 8000bc6:	4b18      	ldr	r3, [pc, #96]	; (8000c28 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xd4>)
 8000bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bca:	4a17      	ldr	r2, [pc, #92]	; (8000c28 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xd4>)
 8000bcc:	f043 0310 	orr.w	r3, r3, #16
 8000bd0:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000bd2:	e022      	b.n	8000c1a <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xc6>
	} else if (GPIOx_.pGPIOx == GPIOF) {
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	4a18      	ldr	r2, [pc, #96]	; (8000c3c <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xe8>)
 8000bda:	4293      	cmp	r3, r2
 8000bdc:	d106      	bne.n	8000bec <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0x98>
		GPIOF_PCLK_EN();
 8000bde:	4b12      	ldr	r3, [pc, #72]	; (8000c28 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xd4>)
 8000be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be2:	4a11      	ldr	r2, [pc, #68]	; (8000c28 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xd4>)
 8000be4:	f043 0320 	orr.w	r3, r3, #32
 8000be8:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000bea:	e016      	b.n	8000c1a <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xc6>
	} else if (GPIOx_.pGPIOx == GPIOG) {
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	4a13      	ldr	r2, [pc, #76]	; (8000c40 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xec>)
 8000bf2:	4293      	cmp	r3, r2
 8000bf4:	d106      	bne.n	8000c04 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xb0>
		GPIOG_PCLK_EN();
 8000bf6:	4b0c      	ldr	r3, [pc, #48]	; (8000c28 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xd4>)
 8000bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfa:	4a0b      	ldr	r2, [pc, #44]	; (8000c28 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xd4>)
 8000bfc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c00:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000c02:	e00a      	b.n	8000c1a <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xc6>
	} else if (GPIOx_.pGPIOx == GPIOH) {
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	4a0e      	ldr	r2, [pc, #56]	; (8000c44 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xf0>)
 8000c0a:	4293      	cmp	r3, r2
 8000c0c:	d105      	bne.n	8000c1a <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xc6>
		GPIOH_PCLK_EN();
 8000c0e:	4b06      	ldr	r3, [pc, #24]	; (8000c28 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xd4>)
 8000c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c12:	4a05      	ldr	r2, [pc, #20]	; (8000c28 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xd4>)
 8000c14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c18:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000c1a:	bf00      	nop
 8000c1c:	370c      	adds	r7, #12
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bc80      	pop	{r7}
 8000c22:	4770      	bx	lr
 8000c24:	40020000 	.word	0x40020000
 8000c28:	40023800 	.word	0x40023800
 8000c2c:	40020400 	.word	0x40020400
 8000c30:	40020800 	.word	0x40020800
 8000c34:	40020c00 	.word	0x40020c00
 8000c38:	40021000 	.word	0x40021000
 8000c3c:	40021400 	.word	0x40021400
 8000c40:	40021800 	.word	0x40021800
 8000c44:	40021c00 	.word	0x40021c00

08000c48 <_ZN12GPIO_Handler9GPIO_InitEv>:
 *
 * @param None
 *
 * @return None
 **********************************************************************/
void GPIO_Handler::GPIO_Init() {
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b086      	sub	sp, #24
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
	uint32_t temp = 0;
 8000c50:	2300      	movs	r3, #0
 8000c52:	617b      	str	r3, [r7, #20]
	// 1. configure the mode of gpio pin
	if(GPIOx_.GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG) {
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	795b      	ldrb	r3, [r3, #5]
 8000c58:	2b03      	cmp	r3, #3
 8000c5a:	d820      	bhi.n	8000c9e <_ZN12GPIO_Handler9GPIO_InitEv+0x56>
		// the non interrupt mode
		temp = GPIOx_.GPIO_PinConfig.GPIO_PinMode << (2 * GPIOx_.GPIO_PinConfig.GPIO_PinNumber);
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	795b      	ldrb	r3, [r3, #5]
 8000c60:	461a      	mov	r2, r3
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	791b      	ldrb	r3, [r3, #4]
 8000c66:	005b      	lsls	r3, r3, #1
 8000c68:	fa02 f303 	lsl.w	r3, r2, r3
 8000c6c:	617b      	str	r3, [r7, #20]
		GPIOx_.pGPIOx->MODER &= ~(0x3 << (2 * GPIOx_.GPIO_PinConfig.GPIO_PinNumber)); // clearing
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	681a      	ldr	r2, [r3, #0]
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	791b      	ldrb	r3, [r3, #4]
 8000c78:	005b      	lsls	r3, r3, #1
 8000c7a:	2103      	movs	r1, #3
 8000c7c:	fa01 f303 	lsl.w	r3, r1, r3
 8000c80:	43db      	mvns	r3, r3
 8000c82:	4619      	mov	r1, r3
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	400a      	ands	r2, r1
 8000c8a:	601a      	str	r2, [r3, #0]
		GPIOx_.pGPIOx->MODER |= temp;
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	6819      	ldr	r1, [r3, #0]
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	697a      	ldr	r2, [r7, #20]
 8000c98:	430a      	orrs	r2, r1
 8000c9a:	601a      	str	r2, [r3, #0]
 8000c9c:	e083      	b.n	8000da6 <_ZN12GPIO_Handler9GPIO_InitEv+0x15e>
	}
	else {
		// interrupt mode
		if(GPIO_MODE_IT_FT == GPIOx_.GPIO_PinConfig.GPIO_PinMode) {
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	795b      	ldrb	r3, [r3, #5]
 8000ca2:	2b04      	cmp	r3, #4
 8000ca4:	d117      	bne.n	8000cd6 <_ZN12GPIO_Handler9GPIO_InitEv+0x8e>
			// 1. configure the FTSR
			EXTI->FTSR |= (1 << GPIOx_.GPIO_PinConfig.GPIO_PinNumber);
 8000ca6:	4b90      	ldr	r3, [pc, #576]	; (8000ee8 <_ZN12GPIO_Handler9GPIO_InitEv+0x2a0>)
 8000ca8:	68db      	ldr	r3, [r3, #12]
 8000caa:	687a      	ldr	r2, [r7, #4]
 8000cac:	7912      	ldrb	r2, [r2, #4]
 8000cae:	4611      	mov	r1, r2
 8000cb0:	2201      	movs	r2, #1
 8000cb2:	408a      	lsls	r2, r1
 8000cb4:	4611      	mov	r1, r2
 8000cb6:	4a8c      	ldr	r2, [pc, #560]	; (8000ee8 <_ZN12GPIO_Handler9GPIO_InitEv+0x2a0>)
 8000cb8:	430b      	orrs	r3, r1
 8000cba:	60d3      	str	r3, [r2, #12]

			// clear the corresponding RTSR bit
			EXTI->RTSR &= ~(1 << GPIOx_.GPIO_PinConfig.GPIO_PinNumber);
 8000cbc:	4b8a      	ldr	r3, [pc, #552]	; (8000ee8 <_ZN12GPIO_Handler9GPIO_InitEv+0x2a0>)
 8000cbe:	689b      	ldr	r3, [r3, #8]
 8000cc0:	687a      	ldr	r2, [r7, #4]
 8000cc2:	7912      	ldrb	r2, [r2, #4]
 8000cc4:	4611      	mov	r1, r2
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	408a      	lsls	r2, r1
 8000cca:	43d2      	mvns	r2, r2
 8000ccc:	4611      	mov	r1, r2
 8000cce:	4a86      	ldr	r2, [pc, #536]	; (8000ee8 <_ZN12GPIO_Handler9GPIO_InitEv+0x2a0>)
 8000cd0:	400b      	ands	r3, r1
 8000cd2:	6093      	str	r3, [r2, #8]
 8000cd4:	e035      	b.n	8000d42 <_ZN12GPIO_Handler9GPIO_InitEv+0xfa>

		}
		else if (GPIO_MODE_IT_RT == GPIOx_.GPIO_PinConfig.GPIO_PinMode) {
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	795b      	ldrb	r3, [r3, #5]
 8000cda:	2b05      	cmp	r3, #5
 8000cdc:	d117      	bne.n	8000d0e <_ZN12GPIO_Handler9GPIO_InitEv+0xc6>
			// 1. configure the RTSR
			EXTI->RTSR |= (1 << GPIOx_.GPIO_PinConfig.GPIO_PinNumber);
 8000cde:	4b82      	ldr	r3, [pc, #520]	; (8000ee8 <_ZN12GPIO_Handler9GPIO_InitEv+0x2a0>)
 8000ce0:	689b      	ldr	r3, [r3, #8]
 8000ce2:	687a      	ldr	r2, [r7, #4]
 8000ce4:	7912      	ldrb	r2, [r2, #4]
 8000ce6:	4611      	mov	r1, r2
 8000ce8:	2201      	movs	r2, #1
 8000cea:	408a      	lsls	r2, r1
 8000cec:	4611      	mov	r1, r2
 8000cee:	4a7e      	ldr	r2, [pc, #504]	; (8000ee8 <_ZN12GPIO_Handler9GPIO_InitEv+0x2a0>)
 8000cf0:	430b      	orrs	r3, r1
 8000cf2:	6093      	str	r3, [r2, #8]

			// clear the corresponding RTSR bit
			EXTI->FTSR &= ~(1 << GPIOx_.GPIO_PinConfig.GPIO_PinNumber);
 8000cf4:	4b7c      	ldr	r3, [pc, #496]	; (8000ee8 <_ZN12GPIO_Handler9GPIO_InitEv+0x2a0>)
 8000cf6:	68db      	ldr	r3, [r3, #12]
 8000cf8:	687a      	ldr	r2, [r7, #4]
 8000cfa:	7912      	ldrb	r2, [r2, #4]
 8000cfc:	4611      	mov	r1, r2
 8000cfe:	2201      	movs	r2, #1
 8000d00:	408a      	lsls	r2, r1
 8000d02:	43d2      	mvns	r2, r2
 8000d04:	4611      	mov	r1, r2
 8000d06:	4a78      	ldr	r2, [pc, #480]	; (8000ee8 <_ZN12GPIO_Handler9GPIO_InitEv+0x2a0>)
 8000d08:	400b      	ands	r3, r1
 8000d0a:	60d3      	str	r3, [r2, #12]
 8000d0c:	e019      	b.n	8000d42 <_ZN12GPIO_Handler9GPIO_InitEv+0xfa>
		}
		else if (GPIO_MODE_IT_RFT == GPIOx_.GPIO_PinConfig.GPIO_PinMode) {
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	795b      	ldrb	r3, [r3, #5]
 8000d12:	2b06      	cmp	r3, #6
 8000d14:	d115      	bne.n	8000d42 <_ZN12GPIO_Handler9GPIO_InitEv+0xfa>
			// 1. configure both FTSR and RTSR
			EXTI->FTSR |= (1 << GPIOx_.GPIO_PinConfig.GPIO_PinNumber);
 8000d16:	4b74      	ldr	r3, [pc, #464]	; (8000ee8 <_ZN12GPIO_Handler9GPIO_InitEv+0x2a0>)
 8000d18:	68db      	ldr	r3, [r3, #12]
 8000d1a:	687a      	ldr	r2, [r7, #4]
 8000d1c:	7912      	ldrb	r2, [r2, #4]
 8000d1e:	4611      	mov	r1, r2
 8000d20:	2201      	movs	r2, #1
 8000d22:	408a      	lsls	r2, r1
 8000d24:	4611      	mov	r1, r2
 8000d26:	4a70      	ldr	r2, [pc, #448]	; (8000ee8 <_ZN12GPIO_Handler9GPIO_InitEv+0x2a0>)
 8000d28:	430b      	orrs	r3, r1
 8000d2a:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= (1 << GPIOx_.GPIO_PinConfig.GPIO_PinNumber);
 8000d2c:	4b6e      	ldr	r3, [pc, #440]	; (8000ee8 <_ZN12GPIO_Handler9GPIO_InitEv+0x2a0>)
 8000d2e:	689b      	ldr	r3, [r3, #8]
 8000d30:	687a      	ldr	r2, [r7, #4]
 8000d32:	7912      	ldrb	r2, [r2, #4]
 8000d34:	4611      	mov	r1, r2
 8000d36:	2201      	movs	r2, #1
 8000d38:	408a      	lsls	r2, r1
 8000d3a:	4611      	mov	r1, r2
 8000d3c:	4a6a      	ldr	r2, [pc, #424]	; (8000ee8 <_ZN12GPIO_Handler9GPIO_InitEv+0x2a0>)
 8000d3e:	430b      	orrs	r3, r1
 8000d40:	6093      	str	r3, [r2, #8]
		}

		// 2. configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 = GPIOx_.GPIO_PinConfig.GPIO_PinNumber >> 2;
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	791b      	ldrb	r3, [r3, #4]
 8000d46:	109b      	asrs	r3, r3, #2
 8000d48:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = GPIOx_.GPIO_PinConfig.GPIO_PinNumber % 4;
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	791b      	ldrb	r3, [r3, #4]
 8000d4e:	f003 0303 	and.w	r3, r3, #3
 8000d52:	74bb      	strb	r3, [r7, #18]
		uint8_t portCode = gpio_baseAddr_to_code(GPIOx_.pGPIOx);
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f7ff fe3d 	bl	80009d8 <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 8000d62:	4b62      	ldr	r3, [pc, #392]	; (8000eec <_ZN12GPIO_Handler9GPIO_InitEv+0x2a4>)
 8000d64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d66:	4a61      	ldr	r2, [pc, #388]	; (8000eec <_ZN12GPIO_Handler9GPIO_InitEv+0x2a4>)
 8000d68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d6c:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[temp1] |= (portCode << (4 * temp2));
 8000d6e:	4a60      	ldr	r2, [pc, #384]	; (8000ef0 <_ZN12GPIO_Handler9GPIO_InitEv+0x2a8>)
 8000d70:	7cfb      	ldrb	r3, [r7, #19]
 8000d72:	3302      	adds	r3, #2
 8000d74:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000d78:	7c79      	ldrb	r1, [r7, #17]
 8000d7a:	7cbb      	ldrb	r3, [r7, #18]
 8000d7c:	009b      	lsls	r3, r3, #2
 8000d7e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d82:	4618      	mov	r0, r3
 8000d84:	495a      	ldr	r1, [pc, #360]	; (8000ef0 <_ZN12GPIO_Handler9GPIO_InitEv+0x2a8>)
 8000d86:	7cfb      	ldrb	r3, [r7, #19]
 8000d88:	4302      	orrs	r2, r0
 8000d8a:	3302      	adds	r3, #2
 8000d8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		// 3. Enable the exti interrupt delivery using IMR
		EXTI->IMR |= 1 << GPIOx_.GPIO_PinConfig.GPIO_PinNumber;
 8000d90:	4b55      	ldr	r3, [pc, #340]	; (8000ee8 <_ZN12GPIO_Handler9GPIO_InitEv+0x2a0>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	687a      	ldr	r2, [r7, #4]
 8000d96:	7912      	ldrb	r2, [r2, #4]
 8000d98:	4611      	mov	r1, r2
 8000d9a:	2201      	movs	r2, #1
 8000d9c:	408a      	lsls	r2, r1
 8000d9e:	4611      	mov	r1, r2
 8000da0:	4a51      	ldr	r2, [pc, #324]	; (8000ee8 <_ZN12GPIO_Handler9GPIO_InitEv+0x2a0>)
 8000da2:	430b      	orrs	r3, r1
 8000da4:	6013      	str	r3, [r2, #0]
	}

	temp = 0;
 8000da6:	2300      	movs	r3, #0
 8000da8:	617b      	str	r3, [r7, #20]
	// 2. configure the speed
	temp = GPIOx_.GPIO_PinConfig.GPIO_PinSpeed << (2 * GPIOx_.GPIO_PinConfig.GPIO_PinNumber);
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	799b      	ldrb	r3, [r3, #6]
 8000dae:	461a      	mov	r2, r3
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	791b      	ldrb	r3, [r3, #4]
 8000db4:	005b      	lsls	r3, r3, #1
 8000db6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dba:	617b      	str	r3, [r7, #20]
	GPIOx_.pGPIOx->OSPEEDR &= ~(0x3 << (2 * GPIOx_.GPIO_PinConfig.GPIO_PinNumber)); // clearing
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	689a      	ldr	r2, [r3, #8]
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	791b      	ldrb	r3, [r3, #4]
 8000dc6:	005b      	lsls	r3, r3, #1
 8000dc8:	2103      	movs	r1, #3
 8000dca:	fa01 f303 	lsl.w	r3, r1, r3
 8000dce:	43db      	mvns	r3, r3
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	400a      	ands	r2, r1
 8000dd8:	609a      	str	r2, [r3, #8]
	GPIOx_.pGPIOx->OSPEEDR |= temp;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	6899      	ldr	r1, [r3, #8]
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	697a      	ldr	r2, [r7, #20]
 8000de6:	430a      	orrs	r2, r1
 8000de8:	609a      	str	r2, [r3, #8]

	temp = 0;
 8000dea:	2300      	movs	r3, #0
 8000dec:	617b      	str	r3, [r7, #20]
	// 3. configure the pupd settings
	temp = GPIOx_.GPIO_PinConfig.GPIO_PinPuPdControl << (2 * GPIOx_.GPIO_PinConfig.GPIO_PinNumber);
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	79db      	ldrb	r3, [r3, #7]
 8000df2:	461a      	mov	r2, r3
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	791b      	ldrb	r3, [r3, #4]
 8000df8:	005b      	lsls	r3, r3, #1
 8000dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfe:	617b      	str	r3, [r7, #20]
	GPIOx_.pGPIOx->PUPDR &= ~(0x3 << (2 * GPIOx_.GPIO_PinConfig.GPIO_PinNumber));// clearing
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	68da      	ldr	r2, [r3, #12]
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	791b      	ldrb	r3, [r3, #4]
 8000e0a:	005b      	lsls	r3, r3, #1
 8000e0c:	2103      	movs	r1, #3
 8000e0e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e12:	43db      	mvns	r3, r3
 8000e14:	4619      	mov	r1, r3
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	400a      	ands	r2, r1
 8000e1c:	60da      	str	r2, [r3, #12]
	GPIOx_.pGPIOx->PUPDR |= temp;
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	68d9      	ldr	r1, [r3, #12]
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	697a      	ldr	r2, [r7, #20]
 8000e2a:	430a      	orrs	r2, r1
 8000e2c:	60da      	str	r2, [r3, #12]

	temp = 0;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	617b      	str	r3, [r7, #20]
	// 4. configure the optype
	temp = GPIOx_.GPIO_PinConfig.GPIO_PinOPType << GPIOx_.GPIO_PinConfig.GPIO_PinNumber;
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	7a1b      	ldrb	r3, [r3, #8]
 8000e36:	461a      	mov	r2, r3
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	791b      	ldrb	r3, [r3, #4]
 8000e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e40:	617b      	str	r3, [r7, #20]
	GPIOx_.pGPIOx->OTYPER &= ~(0x1 << GPIOx_.GPIO_PinConfig.GPIO_PinNumber); // clearing
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	685a      	ldr	r2, [r3, #4]
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	791b      	ldrb	r3, [r3, #4]
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	2301      	movs	r3, #1
 8000e50:	408b      	lsls	r3, r1
 8000e52:	43db      	mvns	r3, r3
 8000e54:	4619      	mov	r1, r3
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	400a      	ands	r2, r1
 8000e5c:	605a      	str	r2, [r3, #4]
	GPIOx_.pGPIOx->OTYPER |= temp;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	6859      	ldr	r1, [r3, #4]
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	697a      	ldr	r2, [r7, #20]
 8000e6a:	430a      	orrs	r2, r1
 8000e6c:	605a      	str	r2, [r3, #4]

	temp = 0;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	617b      	str	r3, [r7, #20]
	// 5. configure the alt functionality
	if(GPIOx_.GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN) {
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	795b      	ldrb	r3, [r3, #5]
 8000e76:	2b02      	cmp	r3, #2
 8000e78:	d131      	bne.n	8000ede <_ZN12GPIO_Handler9GPIO_InitEv+0x296>
		// configure alt function register
		uint8_t temp1, temp2;
		temp1 = GPIOx_.GPIO_PinConfig.GPIO_PinNumber / 8;
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	791b      	ldrb	r3, [r3, #4]
 8000e7e:	08db      	lsrs	r3, r3, #3
 8000e80:	743b      	strb	r3, [r7, #16]
		temp2 = GPIOx_.GPIO_PinConfig.GPIO_PinNumber % 8;
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	791b      	ldrb	r3, [r3, #4]
 8000e86:	f003 0307 	and.w	r3, r3, #7
 8000e8a:	73fb      	strb	r3, [r7, #15]
		GPIOx_.pGPIOx->AFR[temp1] &= ~(0xF << (4 * temp2));
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	7c3a      	ldrb	r2, [r7, #16]
 8000e92:	3208      	adds	r2, #8
 8000e94:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000e98:	7bfb      	ldrb	r3, [r7, #15]
 8000e9a:	009b      	lsls	r3, r3, #2
 8000e9c:	220f      	movs	r2, #15
 8000e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea2:	43db      	mvns	r3, r3
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	7c3a      	ldrb	r2, [r7, #16]
 8000eac:	4001      	ands	r1, r0
 8000eae:	3208      	adds	r2, #8
 8000eb0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		GPIOx_.pGPIOx->AFR[temp1] |= (GPIOx_.GPIO_PinConfig.GPIO_PinAltFunMode << (4 * temp2));
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	7c3a      	ldrb	r2, [r7, #16]
 8000eba:	3208      	adds	r2, #8
 8000ebc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	7a5b      	ldrb	r3, [r3, #9]
 8000ec4:	461a      	mov	r2, r3
 8000ec6:	7bfb      	ldrb	r3, [r7, #15]
 8000ec8:	009b      	lsls	r3, r3, #2
 8000eca:	fa02 f303 	lsl.w	r3, r2, r3
 8000ece:	4618      	mov	r0, r3
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	7c3a      	ldrb	r2, [r7, #16]
 8000ed6:	4301      	orrs	r1, r0
 8000ed8:	3208      	adds	r2, #8
 8000eda:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
 8000ede:	bf00      	nop
 8000ee0:	3718      	adds	r7, #24
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	40013c00 	.word	0x40013c00
 8000eec:	40023800 	.word	0x40023800
 8000ef0:	40013800 	.word	0x40013800

08000ef4 <_ZN12GPIO_Handler11GPIO_DeInitEv>:
 *
 * @brief - Reset GPIO Port
 *
 * @return uint8, b'0000_000x
 */
void GPIO_Handler::GPIO_DeInit() {
 8000ef4:	b480      	push	{r7}
 8000ef6:	b083      	sub	sp, #12
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
	if(GPIOx_.pGPIOx == GPIOA) {
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a48      	ldr	r2, [pc, #288]	; (8001024 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x130>)
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d10c      	bne.n	8000f20 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x2c>
		GPIOA_REG_RESET();
 8000f06:	4b48      	ldr	r3, [pc, #288]	; (8001028 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 8000f08:	691b      	ldr	r3, [r3, #16]
 8000f0a:	4a47      	ldr	r2, [pc, #284]	; (8001028 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 8000f0c:	f043 0301 	orr.w	r3, r3, #1
 8000f10:	6113      	str	r3, [r2, #16]
 8000f12:	4b45      	ldr	r3, [pc, #276]	; (8001028 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 8000f14:	691b      	ldr	r3, [r3, #16]
 8000f16:	4a44      	ldr	r2, [pc, #272]	; (8001028 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 8000f18:	f023 0301 	bic.w	r3, r3, #1
 8000f1c:	6113      	str	r3, [r2, #16]
		GPIOG_REG_RESET();
	}
	else if (GPIOx_.pGPIOx == GPIOH) {
		GPIOH_REG_RESET();
	}
}
 8000f1e:	e07c      	b.n	800101a <_ZN12GPIO_Handler11GPIO_DeInitEv+0x126>
	else if (GPIOx_.pGPIOx == GPIOB) {
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	4a41      	ldr	r2, [pc, #260]	; (800102c <_ZN12GPIO_Handler11GPIO_DeInitEv+0x138>)
 8000f26:	4293      	cmp	r3, r2
 8000f28:	d10c      	bne.n	8000f44 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x50>
		GPIOB_REG_RESET();
 8000f2a:	4b3f      	ldr	r3, [pc, #252]	; (8001028 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 8000f2c:	691b      	ldr	r3, [r3, #16]
 8000f2e:	4a3e      	ldr	r2, [pc, #248]	; (8001028 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 8000f30:	f043 0302 	orr.w	r3, r3, #2
 8000f34:	6113      	str	r3, [r2, #16]
 8000f36:	4b3c      	ldr	r3, [pc, #240]	; (8001028 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 8000f38:	691b      	ldr	r3, [r3, #16]
 8000f3a:	4a3b      	ldr	r2, [pc, #236]	; (8001028 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 8000f3c:	f023 0302 	bic.w	r3, r3, #2
 8000f40:	6113      	str	r3, [r2, #16]
}
 8000f42:	e06a      	b.n	800101a <_ZN12GPIO_Handler11GPIO_DeInitEv+0x126>
	else if (GPIOx_.pGPIOx == GPIOC) {
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	4a39      	ldr	r2, [pc, #228]	; (8001030 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x13c>)
 8000f4a:	4293      	cmp	r3, r2
 8000f4c:	d10c      	bne.n	8000f68 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x74>
		GPIOC_REG_RESET();
 8000f4e:	4b36      	ldr	r3, [pc, #216]	; (8001028 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 8000f50:	691b      	ldr	r3, [r3, #16]
 8000f52:	4a35      	ldr	r2, [pc, #212]	; (8001028 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 8000f54:	f043 0304 	orr.w	r3, r3, #4
 8000f58:	6113      	str	r3, [r2, #16]
 8000f5a:	4b33      	ldr	r3, [pc, #204]	; (8001028 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 8000f5c:	691b      	ldr	r3, [r3, #16]
 8000f5e:	4a32      	ldr	r2, [pc, #200]	; (8001028 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 8000f60:	f023 0304 	bic.w	r3, r3, #4
 8000f64:	6113      	str	r3, [r2, #16]
}
 8000f66:	e058      	b.n	800101a <_ZN12GPIO_Handler11GPIO_DeInitEv+0x126>
	else if (GPIOx_.pGPIOx == GPIOD) {
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	4a31      	ldr	r2, [pc, #196]	; (8001034 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x140>)
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	d10c      	bne.n	8000f8c <_ZN12GPIO_Handler11GPIO_DeInitEv+0x98>
		GPIOD_REG_RESET();
 8000f72:	4b2d      	ldr	r3, [pc, #180]	; (8001028 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 8000f74:	691b      	ldr	r3, [r3, #16]
 8000f76:	4a2c      	ldr	r2, [pc, #176]	; (8001028 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 8000f78:	f043 0308 	orr.w	r3, r3, #8
 8000f7c:	6113      	str	r3, [r2, #16]
 8000f7e:	4b2a      	ldr	r3, [pc, #168]	; (8001028 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 8000f80:	691b      	ldr	r3, [r3, #16]
 8000f82:	4a29      	ldr	r2, [pc, #164]	; (8001028 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 8000f84:	f023 0308 	bic.w	r3, r3, #8
 8000f88:	6113      	str	r3, [r2, #16]
}
 8000f8a:	e046      	b.n	800101a <_ZN12GPIO_Handler11GPIO_DeInitEv+0x126>
	else if (GPIOx_.pGPIOx == GPIOE) {
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4a29      	ldr	r2, [pc, #164]	; (8001038 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x144>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d10c      	bne.n	8000fb0 <_ZN12GPIO_Handler11GPIO_DeInitEv+0xbc>
		GPIOE_REG_RESET();
 8000f96:	4b24      	ldr	r3, [pc, #144]	; (8001028 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 8000f98:	691b      	ldr	r3, [r3, #16]
 8000f9a:	4a23      	ldr	r2, [pc, #140]	; (8001028 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 8000f9c:	f043 0310 	orr.w	r3, r3, #16
 8000fa0:	6113      	str	r3, [r2, #16]
 8000fa2:	4b21      	ldr	r3, [pc, #132]	; (8001028 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 8000fa4:	691b      	ldr	r3, [r3, #16]
 8000fa6:	4a20      	ldr	r2, [pc, #128]	; (8001028 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 8000fa8:	f023 0310 	bic.w	r3, r3, #16
 8000fac:	6113      	str	r3, [r2, #16]
}
 8000fae:	e034      	b.n	800101a <_ZN12GPIO_Handler11GPIO_DeInitEv+0x126>
	else if (GPIOx_.pGPIOx == GPIOF) {
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a21      	ldr	r2, [pc, #132]	; (800103c <_ZN12GPIO_Handler11GPIO_DeInitEv+0x148>)
 8000fb6:	4293      	cmp	r3, r2
 8000fb8:	d10c      	bne.n	8000fd4 <_ZN12GPIO_Handler11GPIO_DeInitEv+0xe0>
		GPIOF_REG_RESET();
 8000fba:	4b1b      	ldr	r3, [pc, #108]	; (8001028 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 8000fbc:	691b      	ldr	r3, [r3, #16]
 8000fbe:	4a1a      	ldr	r2, [pc, #104]	; (8001028 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 8000fc0:	f043 0320 	orr.w	r3, r3, #32
 8000fc4:	6113      	str	r3, [r2, #16]
 8000fc6:	4b18      	ldr	r3, [pc, #96]	; (8001028 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 8000fc8:	691b      	ldr	r3, [r3, #16]
 8000fca:	4a17      	ldr	r2, [pc, #92]	; (8001028 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 8000fcc:	f023 0320 	bic.w	r3, r3, #32
 8000fd0:	6113      	str	r3, [r2, #16]
}
 8000fd2:	e022      	b.n	800101a <_ZN12GPIO_Handler11GPIO_DeInitEv+0x126>
	else if (GPIOx_.pGPIOx == GPIOG) {
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4a19      	ldr	r2, [pc, #100]	; (8001040 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x14c>)
 8000fda:	4293      	cmp	r3, r2
 8000fdc:	d10c      	bne.n	8000ff8 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x104>
		GPIOG_REG_RESET();
 8000fde:	4b12      	ldr	r3, [pc, #72]	; (8001028 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 8000fe0:	691b      	ldr	r3, [r3, #16]
 8000fe2:	4a11      	ldr	r2, [pc, #68]	; (8001028 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 8000fe4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000fe8:	6113      	str	r3, [r2, #16]
 8000fea:	4b0f      	ldr	r3, [pc, #60]	; (8001028 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 8000fec:	691b      	ldr	r3, [r3, #16]
 8000fee:	4a0e      	ldr	r2, [pc, #56]	; (8001028 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 8000ff0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000ff4:	6113      	str	r3, [r2, #16]
}
 8000ff6:	e010      	b.n	800101a <_ZN12GPIO_Handler11GPIO_DeInitEv+0x126>
	else if (GPIOx_.pGPIOx == GPIOH) {
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4a11      	ldr	r2, [pc, #68]	; (8001044 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x150>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d10b      	bne.n	800101a <_ZN12GPIO_Handler11GPIO_DeInitEv+0x126>
		GPIOH_REG_RESET();
 8001002:	4b09      	ldr	r3, [pc, #36]	; (8001028 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 8001004:	691b      	ldr	r3, [r3, #16]
 8001006:	4a08      	ldr	r2, [pc, #32]	; (8001028 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 8001008:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800100c:	6113      	str	r3, [r2, #16]
 800100e:	4b06      	ldr	r3, [pc, #24]	; (8001028 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 8001010:	691b      	ldr	r3, [r3, #16]
 8001012:	4a05      	ldr	r2, [pc, #20]	; (8001028 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 8001014:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001018:	6113      	str	r3, [r2, #16]
}
 800101a:	bf00      	nop
 800101c:	370c      	adds	r7, #12
 800101e:	46bd      	mov	sp, r7
 8001020:	bc80      	pop	{r7}
 8001022:	4770      	bx	lr
 8001024:	40020000 	.word	0x40020000
 8001028:	40023800 	.word	0x40023800
 800102c:	40020400 	.word	0x40020400
 8001030:	40020800 	.word	0x40020800
 8001034:	40020c00 	.word	0x40020c00
 8001038:	40021000 	.word	0x40021000
 800103c:	40021400 	.word	0x40021400
 8001040:	40021800 	.word	0x40021800
 8001044:	40021c00 	.word	0x40021c00

08001048 <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh>:
 * @param[in] IRQNumber     - IRQNumber IRQ Position number
 * @param[in] EnorDi		- Enable/Disable Flag
 *
 * @return None
 */
void GPIO_Handler::GPIO_IRQInterruptConfig(const uint8_t IRQNumber, const uint8_t EnorDi) {
 8001048:	b480      	push	{r7}
 800104a:	b083      	sub	sp, #12
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
 8001050:	460b      	mov	r3, r1
 8001052:	70fb      	strb	r3, [r7, #3]
 8001054:	4613      	mov	r3, r2
 8001056:	70bb      	strb	r3, [r7, #2]
	if(EnorDi == ENABLE) {
 8001058:	78bb      	ldrb	r3, [r7, #2]
 800105a:	2b01      	cmp	r3, #1
 800105c:	d133      	bne.n	80010c6 <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0x7e>
		if (IRQNumber <= 31) {
 800105e:	78fb      	ldrb	r3, [r7, #3]
 8001060:	2b1f      	cmp	r3, #31
 8001062:	d80a      	bhi.n	800107a <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0x32>
			//	program ISER0 register
			*NVIC_ISER0 |= (1 << IRQNumber);
 8001064:	4b34      	ldr	r3, [pc, #208]	; (8001138 <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0xf0>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	78fa      	ldrb	r2, [r7, #3]
 800106a:	2101      	movs	r1, #1
 800106c:	fa01 f202 	lsl.w	r2, r1, r2
 8001070:	4611      	mov	r1, r2
 8001072:	4a31      	ldr	r2, [pc, #196]	; (8001138 <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0xf0>)
 8001074:	430b      	orrs	r3, r1
 8001076:	6013      	str	r3, [r2, #0]
			// program ICE2 register
			*NVIC_ICER2 |= (1 << (IRQNumber % 64));
		}
	}

}
 8001078:	e059      	b.n	800112e <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0xe6>
		} else if (IRQNumber > 31 && IRQNumber < 64) {
 800107a:	78fb      	ldrb	r3, [r7, #3]
 800107c:	2b1f      	cmp	r3, #31
 800107e:	d90f      	bls.n	80010a0 <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0x58>
 8001080:	78fb      	ldrb	r3, [r7, #3]
 8001082:	2b3f      	cmp	r3, #63	; 0x3f
 8001084:	d80c      	bhi.n	80010a0 <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0x58>
			*NVIC_ISER1 |= (1 << (IRQNumber % 32));
 8001086:	4b2d      	ldr	r3, [pc, #180]	; (800113c <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0xf4>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	78fa      	ldrb	r2, [r7, #3]
 800108c:	f002 021f 	and.w	r2, r2, #31
 8001090:	2101      	movs	r1, #1
 8001092:	fa01 f202 	lsl.w	r2, r1, r2
 8001096:	4611      	mov	r1, r2
 8001098:	4a28      	ldr	r2, [pc, #160]	; (800113c <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0xf4>)
 800109a:	430b      	orrs	r3, r1
 800109c:	6013      	str	r3, [r2, #0]
 800109e:	e046      	b.n	800112e <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0xe6>
		} else if (IRQNumber >= 64 && IRQNumber < 96) {
 80010a0:	78fb      	ldrb	r3, [r7, #3]
 80010a2:	2b3f      	cmp	r3, #63	; 0x3f
 80010a4:	d943      	bls.n	800112e <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0xe6>
 80010a6:	78fb      	ldrb	r3, [r7, #3]
 80010a8:	2b5f      	cmp	r3, #95	; 0x5f
 80010aa:	d840      	bhi.n	800112e <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0xe6>
			*NVIC_ISER2 |= (1 << (IRQNumber % 64));
 80010ac:	4b24      	ldr	r3, [pc, #144]	; (8001140 <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0xf8>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	78fa      	ldrb	r2, [r7, #3]
 80010b2:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80010b6:	2101      	movs	r1, #1
 80010b8:	fa01 f202 	lsl.w	r2, r1, r2
 80010bc:	4611      	mov	r1, r2
 80010be:	4a20      	ldr	r2, [pc, #128]	; (8001140 <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0xf8>)
 80010c0:	430b      	orrs	r3, r1
 80010c2:	6013      	str	r3, [r2, #0]
}
 80010c4:	e033      	b.n	800112e <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0xe6>
		if (IRQNumber <= 31) {
 80010c6:	78fb      	ldrb	r3, [r7, #3]
 80010c8:	2b1f      	cmp	r3, #31
 80010ca:	d80a      	bhi.n	80010e2 <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0x9a>
			*NVIC_ICER0 |= (1 << IRQNumber);
 80010cc:	4b1d      	ldr	r3, [pc, #116]	; (8001144 <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0xfc>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	78fa      	ldrb	r2, [r7, #3]
 80010d2:	2101      	movs	r1, #1
 80010d4:	fa01 f202 	lsl.w	r2, r1, r2
 80010d8:	4611      	mov	r1, r2
 80010da:	4a1a      	ldr	r2, [pc, #104]	; (8001144 <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0xfc>)
 80010dc:	430b      	orrs	r3, r1
 80010de:	6013      	str	r3, [r2, #0]
}
 80010e0:	e025      	b.n	800112e <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0xe6>
		} else if (IRQNumber > 31 && IRQNumber < 64) {
 80010e2:	78fb      	ldrb	r3, [r7, #3]
 80010e4:	2b1f      	cmp	r3, #31
 80010e6:	d90f      	bls.n	8001108 <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0xc0>
 80010e8:	78fb      	ldrb	r3, [r7, #3]
 80010ea:	2b3f      	cmp	r3, #63	; 0x3f
 80010ec:	d80c      	bhi.n	8001108 <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0xc0>
			*NVIC_ICER1 |= (1 << (IRQNumber % 32));
 80010ee:	4b16      	ldr	r3, [pc, #88]	; (8001148 <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0x100>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	78fa      	ldrb	r2, [r7, #3]
 80010f4:	f002 021f 	and.w	r2, r2, #31
 80010f8:	2101      	movs	r1, #1
 80010fa:	fa01 f202 	lsl.w	r2, r1, r2
 80010fe:	4611      	mov	r1, r2
 8001100:	4a11      	ldr	r2, [pc, #68]	; (8001148 <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0x100>)
 8001102:	430b      	orrs	r3, r1
 8001104:	6013      	str	r3, [r2, #0]
 8001106:	e012      	b.n	800112e <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0xe6>
		} else if (IRQNumber >= 64 && IRQNumber < 96) {
 8001108:	78fb      	ldrb	r3, [r7, #3]
 800110a:	2b3f      	cmp	r3, #63	; 0x3f
 800110c:	d90f      	bls.n	800112e <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0xe6>
 800110e:	78fb      	ldrb	r3, [r7, #3]
 8001110:	2b5f      	cmp	r3, #95	; 0x5f
 8001112:	d80c      	bhi.n	800112e <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0xe6>
			*NVIC_ICER2 |= (1 << (IRQNumber % 64));
 8001114:	4b0d      	ldr	r3, [pc, #52]	; (800114c <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0x104>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	78fa      	ldrb	r2, [r7, #3]
 800111a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800111e:	2101      	movs	r1, #1
 8001120:	fa01 f202 	lsl.w	r2, r1, r2
 8001124:	4611      	mov	r1, r2
 8001126:	4a09      	ldr	r2, [pc, #36]	; (800114c <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0x104>)
 8001128:	430b      	orrs	r3, r1
 800112a:	6013      	str	r3, [r2, #0]
}
 800112c:	e7ff      	b.n	800112e <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0xe6>
 800112e:	bf00      	nop
 8001130:	370c      	adds	r7, #12
 8001132:	46bd      	mov	sp, r7
 8001134:	bc80      	pop	{r7}
 8001136:	4770      	bx	lr
 8001138:	e000e100 	.word	0xe000e100
 800113c:	e000e104 	.word	0xe000e104
 8001140:	e000e108 	.word	0xe000e108
 8001144:	e000e180 	.word	0xe000e180
 8001148:	e000e184 	.word	0xe000e184
 800114c:	e000e188 	.word	0xe000e188

08001150 <_ZN12GPIO_Handler22GPIO_IRQPriorityConfigEhh>:
 *
 * @param[in] IRQNumber: IRQ position for EXIT
 * @param[in] IRPriority: 0->15
 * @return None
 */
void GPIO_Handler::GPIO_IRQPriorityConfig(const uint8_t IRQNumber, const uint8_t IRQPriority) {
 8001150:	b480      	push	{r7}
 8001152:	b085      	sub	sp, #20
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
 8001158:	460b      	mov	r3, r1
 800115a:	70fb      	strb	r3, [r7, #3]
 800115c:	4613      	mov	r3, r2
 800115e:	70bb      	strb	r3, [r7, #2]
	// 1. first lets find out the ipr register
	uint8_t iprx = IRQNumber >> 2;
 8001160:	78fb      	ldrb	r3, [r7, #3]
 8001162:	109b      	asrs	r3, r3, #2
 8001164:	73fb      	strb	r3, [r7, #15]
	uint8_t iprx_section = IRQNumber % 4;
 8001166:	78fb      	ldrb	r3, [r7, #3]
 8001168:	f003 0303 	and.w	r3, r3, #3
 800116c:	73bb      	strb	r3, [r7, #14]
	uint8_t shift_amount = (8 * iprx_section) + (8 - NO_PR_BITS_IMPLEMENTED);
 800116e:	7bbb      	ldrb	r3, [r7, #14]
 8001170:	00db      	lsls	r3, r3, #3
 8001172:	b2db      	uxtb	r3, r3
 8001174:	3304      	adds	r3, #4
 8001176:	737b      	strb	r3, [r7, #13]

	*(NVIC_PR_BASE_ADDR + iprx) |= (IRQPriority << shift_amount);
 8001178:	7bfb      	ldrb	r3, [r7, #15]
 800117a:	f103 5360 	add.w	r3, r3, #939524096	; 0x38000000
 800117e:	f503 5364 	add.w	r3, r3, #14592	; 0x3900
 8001182:	009b      	lsls	r3, r3, #2
 8001184:	681a      	ldr	r2, [r3, #0]
 8001186:	78b9      	ldrb	r1, [r7, #2]
 8001188:	7b7b      	ldrb	r3, [r7, #13]
 800118a:	fa01 f303 	lsl.w	r3, r1, r3
 800118e:	4618      	mov	r0, r3
 8001190:	7bfb      	ldrb	r3, [r7, #15]
 8001192:	f103 5360 	add.w	r3, r3, #939524096	; 0x38000000
 8001196:	f503 5364 	add.w	r3, r3, #14592	; 0x3900
 800119a:	009b      	lsls	r3, r3, #2
 800119c:	4619      	mov	r1, r3
 800119e:	ea42 0300 	orr.w	r3, r2, r0
 80011a2:	600b      	str	r3, [r1, #0]
}
 80011a4:	bf00      	nop
 80011a6:	3714      	adds	r7, #20
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bc80      	pop	{r7}
 80011ac:	4770      	bx	lr

080011ae <_ZN11SPI_HandlerC1EP12SPI_RegDef_thhhhhhh>:
 80011ae:	b580      	push	{r7, lr}
 80011b0:	b084      	sub	sp, #16
 80011b2:	af00      	add	r7, sp, #0
 80011b4:	60f8      	str	r0, [r7, #12]
 80011b6:	60b9      	str	r1, [r7, #8]
 80011b8:	4611      	mov	r1, r2
 80011ba:	461a      	mov	r2, r3
 80011bc:	460b      	mov	r3, r1
 80011be:	71fb      	strb	r3, [r7, #7]
 80011c0:	4613      	mov	r3, r2
 80011c2:	71bb      	strb	r3, [r7, #6]
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	4618      	mov	r0, r3
 80011c8:	2320      	movs	r3, #32
 80011ca:	461a      	mov	r2, r3
 80011cc:	2100      	movs	r1, #0
 80011ce:	f000 fdfb 	bl	8001dc8 <memset>
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	3320      	adds	r3, #32
 80011d6:	4618      	mov	r0, r3
 80011d8:	f000 fc73 	bl	8001ac2 <_ZNSt10unique_ptrI12GPIO_HandlerSt14default_deleteIS0_EEC1IS2_vEEv>
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	3324      	adds	r3, #36	; 0x24
 80011e0:	4618      	mov	r0, r3
 80011e2:	f000 fc6e 	bl	8001ac2 <_ZNSt10unique_ptrI12GPIO_HandlerSt14default_deleteIS0_EEC1IS2_vEEv>
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	3328      	adds	r3, #40	; 0x28
 80011ea:	4618      	mov	r0, r3
 80011ec:	f000 fc69 	bl	8001ac2 <_ZNSt10unique_ptrI12GPIO_HandlerSt14default_deleteIS0_EEC1IS2_vEEv>
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	332c      	adds	r3, #44	; 0x2c
 80011f4:	4618      	mov	r0, r3
 80011f6:	f000 fc64 	bl	8001ac2 <_ZNSt10unique_ptrI12GPIO_HandlerSt14default_deleteIS0_EEC1IS2_vEEv>
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	68ba      	ldr	r2, [r7, #8]
 80011fe:	601a      	str	r2, [r3, #0]
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	79fa      	ldrb	r2, [r7, #7]
 8001204:	711a      	strb	r2, [r3, #4]
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	79ba      	ldrb	r2, [r7, #6]
 800120a:	715a      	strb	r2, [r3, #5]
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	7e3a      	ldrb	r2, [r7, #24]
 8001210:	719a      	strb	r2, [r3, #6]
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	7f3a      	ldrb	r2, [r7, #28]
 8001216:	71da      	strb	r2, [r3, #7]
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	f897 2020 	ldrb.w	r2, [r7, #32]
 800121e:	721a      	strb	r2, [r3, #8]
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001226:	725a      	strb	r2, [r3, #9]
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800122e:	729a      	strb	r2, [r3, #10]
 8001230:	68f8      	ldr	r0, [r7, #12]
 8001232:	f000 f85f 	bl	80012f4 <_ZN11SPI_Handler14SPI_GPIOs_InitEv>
 8001236:	68f8      	ldr	r0, [r7, #12]
 8001238:	f000 f81a 	bl	8001270 <_ZN11SPI_Handler20SPI_PeriClockControlEv>
 800123c:	68f8      	ldr	r0, [r7, #12]
 800123e:	f000 f8db 	bl	80013f8 <_ZN11SPI_Handler8SPI_InitEv>
 8001242:	2101      	movs	r1, #1
 8001244:	68f8      	ldr	r0, [r7, #12]
 8001246:	f000 f989 	bl	800155c <_ZN11SPI_Handler13SPI_SSIConfigEh>
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	7a9b      	ldrb	r3, [r3, #10]
 800124e:	2b01      	cmp	r3, #1
 8001250:	d104      	bne.n	800125c <_ZN11SPI_HandlerC1EP12SPI_RegDef_thhhhhhh+0xae>
 8001252:	2100      	movs	r1, #0
 8001254:	68f8      	ldr	r0, [r7, #12]
 8001256:	f000 f962 	bl	800151e <_ZN11SPI_Handler14SPI_SSOEConfigEh>
 800125a:	e003      	b.n	8001264 <_ZN11SPI_HandlerC1EP12SPI_RegDef_thhhhhhh+0xb6>
 800125c:	2101      	movs	r1, #1
 800125e:	68f8      	ldr	r0, [r7, #12]
 8001260:	f000 f95d 	bl	800151e <_ZN11SPI_Handler14SPI_SSOEConfigEh>
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	4618      	mov	r0, r3
 8001268:	3710      	adds	r7, #16
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
	...

08001270 <_ZN11SPI_Handler20SPI_PeriClockControlEv>:
 8001270:	b480      	push	{r7}
 8001272:	b083      	sub	sp, #12
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4a18      	ldr	r2, [pc, #96]	; (80012e0 <_ZN11SPI_Handler20SPI_PeriClockControlEv+0x70>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d106      	bne.n	8001290 <_ZN11SPI_Handler20SPI_PeriClockControlEv+0x20>
 8001282:	4b18      	ldr	r3, [pc, #96]	; (80012e4 <_ZN11SPI_Handler20SPI_PeriClockControlEv+0x74>)
 8001284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001286:	4a17      	ldr	r2, [pc, #92]	; (80012e4 <_ZN11SPI_Handler20SPI_PeriClockControlEv+0x74>)
 8001288:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800128c:	6453      	str	r3, [r2, #68]	; 0x44
 800128e:	e022      	b.n	80012d6 <_ZN11SPI_Handler20SPI_PeriClockControlEv+0x66>
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4a14      	ldr	r2, [pc, #80]	; (80012e8 <_ZN11SPI_Handler20SPI_PeriClockControlEv+0x78>)
 8001296:	4293      	cmp	r3, r2
 8001298:	d106      	bne.n	80012a8 <_ZN11SPI_Handler20SPI_PeriClockControlEv+0x38>
 800129a:	4b12      	ldr	r3, [pc, #72]	; (80012e4 <_ZN11SPI_Handler20SPI_PeriClockControlEv+0x74>)
 800129c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800129e:	4a11      	ldr	r2, [pc, #68]	; (80012e4 <_ZN11SPI_Handler20SPI_PeriClockControlEv+0x74>)
 80012a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012a4:	6413      	str	r3, [r2, #64]	; 0x40
 80012a6:	e016      	b.n	80012d6 <_ZN11SPI_Handler20SPI_PeriClockControlEv+0x66>
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4a0f      	ldr	r2, [pc, #60]	; (80012ec <_ZN11SPI_Handler20SPI_PeriClockControlEv+0x7c>)
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d106      	bne.n	80012c0 <_ZN11SPI_Handler20SPI_PeriClockControlEv+0x50>
 80012b2:	4b0c      	ldr	r3, [pc, #48]	; (80012e4 <_ZN11SPI_Handler20SPI_PeriClockControlEv+0x74>)
 80012b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b6:	4a0b      	ldr	r2, [pc, #44]	; (80012e4 <_ZN11SPI_Handler20SPI_PeriClockControlEv+0x74>)
 80012b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80012bc:	6413      	str	r3, [r2, #64]	; 0x40
 80012be:	e00a      	b.n	80012d6 <_ZN11SPI_Handler20SPI_PeriClockControlEv+0x66>
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4a0a      	ldr	r2, [pc, #40]	; (80012f0 <_ZN11SPI_Handler20SPI_PeriClockControlEv+0x80>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d105      	bne.n	80012d6 <_ZN11SPI_Handler20SPI_PeriClockControlEv+0x66>
 80012ca:	4b06      	ldr	r3, [pc, #24]	; (80012e4 <_ZN11SPI_Handler20SPI_PeriClockControlEv+0x74>)
 80012cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ce:	4a05      	ldr	r2, [pc, #20]	; (80012e4 <_ZN11SPI_Handler20SPI_PeriClockControlEv+0x74>)
 80012d0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80012d4:	6453      	str	r3, [r2, #68]	; 0x44
 80012d6:	bf00      	nop
 80012d8:	370c      	adds	r7, #12
 80012da:	46bd      	mov	sp, r7
 80012dc:	bc80      	pop	{r7}
 80012de:	4770      	bx	lr
 80012e0:	40013000 	.word	0x40013000
 80012e4:	40023800 	.word	0x40023800
 80012e8:	40003800 	.word	0x40003800
 80012ec:	40003c00 	.word	0x40003c00
 80012f0:	40013400 	.word	0x40013400

080012f4 <_ZN11SPI_Handler14SPI_GPIOs_InitEv>:
 80012f4:	b5b0      	push	{r4, r5, r7, lr}
 80012f6:	b088      	sub	sp, #32
 80012f8:	af06      	add	r7, sp, #24
 80012fa:	6078      	str	r0, [r7, #4]
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4a3b      	ldr	r2, [pc, #236]	; (80013f0 <_ZN11SPI_Handler14SPI_GPIOs_InitEv+0xfc>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d16f      	bne.n	80013e6 <_ZN11SPI_Handler14SPI_GPIOs_InitEv+0xf2>
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	f103 0420 	add.w	r4, r3, #32
 800130c:	200c      	movs	r0, #12
 800130e:	f000 fcfd 	bl	8001d0c <_Znwj>
 8001312:	4603      	mov	r3, r0
 8001314:	461d      	mov	r5, r3
 8001316:	2305      	movs	r3, #5
 8001318:	9304      	str	r3, [sp, #16]
 800131a:	2300      	movs	r3, #0
 800131c:	9303      	str	r3, [sp, #12]
 800131e:	2300      	movs	r3, #0
 8001320:	9302      	str	r3, [sp, #8]
 8001322:	230f      	movs	r3, #15
 8001324:	9301      	str	r3, [sp, #4]
 8001326:	2303      	movs	r3, #3
 8001328:	9300      	str	r3, [sp, #0]
 800132a:	2302      	movs	r3, #2
 800132c:	2205      	movs	r2, #5
 800132e:	4931      	ldr	r1, [pc, #196]	; (80013f4 <_ZN11SPI_Handler14SPI_GPIOs_InitEv+0x100>)
 8001330:	4628      	mov	r0, r5
 8001332:	f7ff fbb7 	bl	8000aa4 <_ZN12GPIO_HandlerC1EP13GPIO_RegDef_thhhhhhh>
 8001336:	4629      	mov	r1, r5
 8001338:	4620      	mov	r0, r4
 800133a:	f000 fbd2 	bl	8001ae2 <_ZNSt10unique_ptrI12GPIO_HandlerSt14default_deleteIS0_EE5resetEPS0_>
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	f103 0424 	add.w	r4, r3, #36	; 0x24
 8001344:	200c      	movs	r0, #12
 8001346:	f000 fce1 	bl	8001d0c <_Znwj>
 800134a:	4603      	mov	r3, r0
 800134c:	461d      	mov	r5, r3
 800134e:	2305      	movs	r3, #5
 8001350:	9304      	str	r3, [sp, #16]
 8001352:	2300      	movs	r3, #0
 8001354:	9303      	str	r3, [sp, #12]
 8001356:	2300      	movs	r3, #0
 8001358:	9302      	str	r3, [sp, #8]
 800135a:	230f      	movs	r3, #15
 800135c:	9301      	str	r3, [sp, #4]
 800135e:	2303      	movs	r3, #3
 8001360:	9300      	str	r3, [sp, #0]
 8001362:	2302      	movs	r3, #2
 8001364:	2207      	movs	r2, #7
 8001366:	4923      	ldr	r1, [pc, #140]	; (80013f4 <_ZN11SPI_Handler14SPI_GPIOs_InitEv+0x100>)
 8001368:	4628      	mov	r0, r5
 800136a:	f7ff fb9b 	bl	8000aa4 <_ZN12GPIO_HandlerC1EP13GPIO_RegDef_thhhhhhh>
 800136e:	4629      	mov	r1, r5
 8001370:	4620      	mov	r0, r4
 8001372:	f000 fbb6 	bl	8001ae2 <_ZNSt10unique_ptrI12GPIO_HandlerSt14default_deleteIS0_EE5resetEPS0_>
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	f103 0428 	add.w	r4, r3, #40	; 0x28
 800137c:	200c      	movs	r0, #12
 800137e:	f000 fcc5 	bl	8001d0c <_Znwj>
 8001382:	4603      	mov	r3, r0
 8001384:	461d      	mov	r5, r3
 8001386:	2305      	movs	r3, #5
 8001388:	9304      	str	r3, [sp, #16]
 800138a:	2300      	movs	r3, #0
 800138c:	9303      	str	r3, [sp, #12]
 800138e:	2300      	movs	r3, #0
 8001390:	9302      	str	r3, [sp, #8]
 8001392:	230f      	movs	r3, #15
 8001394:	9301      	str	r3, [sp, #4]
 8001396:	2303      	movs	r3, #3
 8001398:	9300      	str	r3, [sp, #0]
 800139a:	2302      	movs	r3, #2
 800139c:	2206      	movs	r2, #6
 800139e:	4915      	ldr	r1, [pc, #84]	; (80013f4 <_ZN11SPI_Handler14SPI_GPIOs_InitEv+0x100>)
 80013a0:	4628      	mov	r0, r5
 80013a2:	f7ff fb7f 	bl	8000aa4 <_ZN12GPIO_HandlerC1EP13GPIO_RegDef_thhhhhhh>
 80013a6:	4629      	mov	r1, r5
 80013a8:	4620      	mov	r0, r4
 80013aa:	f000 fb9a 	bl	8001ae2 <_ZNSt10unique_ptrI12GPIO_HandlerSt14default_deleteIS0_EE5resetEPS0_>
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 80013b4:	200c      	movs	r0, #12
 80013b6:	f000 fca9 	bl	8001d0c <_Znwj>
 80013ba:	4603      	mov	r3, r0
 80013bc:	461d      	mov	r5, r3
 80013be:	2305      	movs	r3, #5
 80013c0:	9304      	str	r3, [sp, #16]
 80013c2:	2300      	movs	r3, #0
 80013c4:	9303      	str	r3, [sp, #12]
 80013c6:	2300      	movs	r3, #0
 80013c8:	9302      	str	r3, [sp, #8]
 80013ca:	230f      	movs	r3, #15
 80013cc:	9301      	str	r3, [sp, #4]
 80013ce:	2303      	movs	r3, #3
 80013d0:	9300      	str	r3, [sp, #0]
 80013d2:	2302      	movs	r3, #2
 80013d4:	2204      	movs	r2, #4
 80013d6:	4907      	ldr	r1, [pc, #28]	; (80013f4 <_ZN11SPI_Handler14SPI_GPIOs_InitEv+0x100>)
 80013d8:	4628      	mov	r0, r5
 80013da:	f7ff fb63 	bl	8000aa4 <_ZN12GPIO_HandlerC1EP13GPIO_RegDef_thhhhhhh>
 80013de:	4629      	mov	r1, r5
 80013e0:	4620      	mov	r0, r4
 80013e2:	f000 fb7e 	bl	8001ae2 <_ZNSt10unique_ptrI12GPIO_HandlerSt14default_deleteIS0_EE5resetEPS0_>
 80013e6:	bf00      	nop
 80013e8:	3708      	adds	r7, #8
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bdb0      	pop	{r4, r5, r7, pc}
 80013ee:	bf00      	nop
 80013f0:	40013000 	.word	0x40013000
 80013f4:	40020000 	.word	0x40020000

080013f8 <_ZN11SPI_Handler8SPI_InitEv>:
 80013f8:	b480      	push	{r7}
 80013fa:	b085      	sub	sp, #20
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
 8001400:	2300      	movs	r3, #0
 8001402:	60fb      	str	r3, [r7, #12]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	791b      	ldrb	r3, [r3, #4]
 8001408:	009b      	lsls	r3, r3, #2
 800140a:	461a      	mov	r2, r3
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	4313      	orrs	r3, r2
 8001410:	60fb      	str	r3, [r7, #12]
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	795b      	ldrb	r3, [r3, #5]
 8001416:	2b01      	cmp	r3, #1
 8001418:	d104      	bne.n	8001424 <_ZN11SPI_Handler8SPI_InitEv+0x2c>
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001420:	60fb      	str	r3, [r7, #12]
 8001422:	e018      	b.n	8001456 <_ZN11SPI_Handler8SPI_InitEv+0x5e>
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	795b      	ldrb	r3, [r3, #5]
 8001428:	2b02      	cmp	r3, #2
 800142a:	d108      	bne.n	800143e <_ZN11SPI_Handler8SPI_InitEv+0x46>
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001432:	60fb      	str	r3, [r7, #12]
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800143a:	60fb      	str	r3, [r7, #12]
 800143c:	e00b      	b.n	8001456 <_ZN11SPI_Handler8SPI_InitEv+0x5e>
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	795b      	ldrb	r3, [r3, #5]
 8001442:	2b03      	cmp	r3, #3
 8001444:	d107      	bne.n	8001456 <_ZN11SPI_Handler8SPI_InitEv+0x5e>
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800144c:	60fb      	str	r3, [r7, #12]
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001454:	60fb      	str	r3, [r7, #12]
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	799b      	ldrb	r3, [r3, #6]
 800145a:	00db      	lsls	r3, r3, #3
 800145c:	461a      	mov	r2, r3
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	4313      	orrs	r3, r2
 8001462:	60fb      	str	r3, [r7, #12]
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	79db      	ldrb	r3, [r3, #7]
 8001468:	02db      	lsls	r3, r3, #11
 800146a:	461a      	mov	r2, r3
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	4313      	orrs	r3, r2
 8001470:	60fb      	str	r3, [r7, #12]
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	7a1b      	ldrb	r3, [r3, #8]
 8001476:	005b      	lsls	r3, r3, #1
 8001478:	461a      	mov	r2, r3
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	4313      	orrs	r3, r2
 800147e:	60fb      	str	r3, [r7, #12]
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	7a5b      	ldrb	r3, [r3, #9]
 8001484:	461a      	mov	r2, r3
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	4313      	orrs	r3, r2
 800148a:	60fb      	str	r3, [r7, #12]
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	7a9b      	ldrb	r3, [r3, #10]
 8001490:	025b      	lsls	r3, r3, #9
 8001492:	461a      	mov	r2, r3
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	4313      	orrs	r3, r2
 8001498:	60fb      	str	r3, [r7, #12]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	68fa      	ldr	r2, [r7, #12]
 80014a0:	601a      	str	r2, [r3, #0]
 80014a2:	bf00      	nop
 80014a4:	3714      	adds	r7, #20
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bc80      	pop	{r7}
 80014aa:	4770      	bx	lr

080014ac <_ZN11SPI_Handler21SPI_PeripheralControlEh>:
 80014ac:	b480      	push	{r7}
 80014ae:	b083      	sub	sp, #12
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
 80014b4:	460b      	mov	r3, r1
 80014b6:	70fb      	strb	r3, [r7, #3]
 80014b8:	78fb      	ldrb	r3, [r7, #3]
 80014ba:	2b01      	cmp	r3, #1
 80014bc:	d108      	bne.n	80014d0 <_ZN11SPI_Handler21SPI_PeripheralControlEh+0x24>
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	681a      	ldr	r2, [r3, #0]
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80014cc:	601a      	str	r2, [r3, #0]
 80014ce:	e007      	b.n	80014e0 <_ZN11SPI_Handler21SPI_PeripheralControlEh+0x34>
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	681a      	ldr	r2, [r3, #0]
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80014de:	601a      	str	r2, [r3, #0]
 80014e0:	bf00      	nop
 80014e2:	370c      	adds	r7, #12
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bc80      	pop	{r7}
 80014e8:	4770      	bx	lr

080014ea <_ZN11SPI_Handler17SPI_GetFlagStatusEh>:
 80014ea:	b480      	push	{r7}
 80014ec:	b083      	sub	sp, #12
 80014ee:	af00      	add	r7, sp, #0
 80014f0:	6078      	str	r0, [r7, #4]
 80014f2:	460b      	mov	r3, r1
 80014f4:	70fb      	strb	r3, [r7, #3]
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	689a      	ldr	r2, [r3, #8]
 80014fc:	78fb      	ldrb	r3, [r7, #3]
 80014fe:	4013      	ands	r3, r2
 8001500:	2b00      	cmp	r3, #0
 8001502:	bf14      	ite	ne
 8001504:	2301      	movne	r3, #1
 8001506:	2300      	moveq	r3, #0
 8001508:	b2db      	uxtb	r3, r3
 800150a:	2b00      	cmp	r3, #0
 800150c:	d001      	beq.n	8001512 <_ZN11SPI_Handler17SPI_GetFlagStatusEh+0x28>
 800150e:	2301      	movs	r3, #1
 8001510:	e000      	b.n	8001514 <_ZN11SPI_Handler17SPI_GetFlagStatusEh+0x2a>
 8001512:	2300      	movs	r3, #0
 8001514:	4618      	mov	r0, r3
 8001516:	370c      	adds	r7, #12
 8001518:	46bd      	mov	sp, r7
 800151a:	bc80      	pop	{r7}
 800151c:	4770      	bx	lr

0800151e <_ZN11SPI_Handler14SPI_SSOEConfigEh>:
 800151e:	b480      	push	{r7}
 8001520:	b083      	sub	sp, #12
 8001522:	af00      	add	r7, sp, #0
 8001524:	6078      	str	r0, [r7, #4]
 8001526:	460b      	mov	r3, r1
 8001528:	70fb      	strb	r3, [r7, #3]
 800152a:	78fb      	ldrb	r3, [r7, #3]
 800152c:	2b01      	cmp	r3, #1
 800152e:	d108      	bne.n	8001542 <_ZN11SPI_Handler14SPI_SSOEConfigEh+0x24>
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	685a      	ldr	r2, [r3, #4]
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f042 0204 	orr.w	r2, r2, #4
 800153e:	605a      	str	r2, [r3, #4]
 8001540:	e007      	b.n	8001552 <_ZN11SPI_Handler14SPI_SSOEConfigEh+0x34>
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	685a      	ldr	r2, [r3, #4]
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f022 0204 	bic.w	r2, r2, #4
 8001550:	605a      	str	r2, [r3, #4]
 8001552:	bf00      	nop
 8001554:	370c      	adds	r7, #12
 8001556:	46bd      	mov	sp, r7
 8001558:	bc80      	pop	{r7}
 800155a:	4770      	bx	lr

0800155c <_ZN11SPI_Handler13SPI_SSIConfigEh>:
 800155c:	b480      	push	{r7}
 800155e:	b083      	sub	sp, #12
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
 8001564:	460b      	mov	r3, r1
 8001566:	70fb      	strb	r3, [r7, #3]
 8001568:	78fb      	ldrb	r3, [r7, #3]
 800156a:	2b01      	cmp	r3, #1
 800156c:	d108      	bne.n	8001580 <_ZN11SPI_Handler13SPI_SSIConfigEh+0x24>
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	681a      	ldr	r2, [r3, #0]
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800157c:	601a      	str	r2, [r3, #0]
 800157e:	e007      	b.n	8001590 <_ZN11SPI_Handler13SPI_SSIConfigEh+0x34>
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	681a      	ldr	r2, [r3, #0]
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800158e:	601a      	str	r2, [r3, #0]
 8001590:	bf00      	nop
 8001592:	370c      	adds	r7, #12
 8001594:	46bd      	mov	sp, r7
 8001596:	bc80      	pop	{r7}
 8001598:	4770      	bx	lr
	...

0800159c <_ZN11SPI_Handler22SPI_IRQInterruptConfigEhh>:
 800159c:	b480      	push	{r7}
 800159e:	b083      	sub	sp, #12
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
 80015a4:	460b      	mov	r3, r1
 80015a6:	70fb      	strb	r3, [r7, #3]
 80015a8:	4613      	mov	r3, r2
 80015aa:	70bb      	strb	r3, [r7, #2]
 80015ac:	78bb      	ldrb	r3, [r7, #2]
 80015ae:	2b01      	cmp	r3, #1
 80015b0:	d133      	bne.n	800161a <_ZN11SPI_Handler22SPI_IRQInterruptConfigEhh+0x7e>
 80015b2:	78fb      	ldrb	r3, [r7, #3]
 80015b4:	2b1f      	cmp	r3, #31
 80015b6:	d80a      	bhi.n	80015ce <_ZN11SPI_Handler22SPI_IRQInterruptConfigEhh+0x32>
 80015b8:	4b34      	ldr	r3, [pc, #208]	; (800168c <_ZN11SPI_Handler22SPI_IRQInterruptConfigEhh+0xf0>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	78fa      	ldrb	r2, [r7, #3]
 80015be:	2101      	movs	r1, #1
 80015c0:	fa01 f202 	lsl.w	r2, r1, r2
 80015c4:	4611      	mov	r1, r2
 80015c6:	4a31      	ldr	r2, [pc, #196]	; (800168c <_ZN11SPI_Handler22SPI_IRQInterruptConfigEhh+0xf0>)
 80015c8:	430b      	orrs	r3, r1
 80015ca:	6013      	str	r3, [r2, #0]
 80015cc:	e059      	b.n	8001682 <_ZN11SPI_Handler22SPI_IRQInterruptConfigEhh+0xe6>
 80015ce:	78fb      	ldrb	r3, [r7, #3]
 80015d0:	2b1f      	cmp	r3, #31
 80015d2:	d90f      	bls.n	80015f4 <_ZN11SPI_Handler22SPI_IRQInterruptConfigEhh+0x58>
 80015d4:	78fb      	ldrb	r3, [r7, #3]
 80015d6:	2b3f      	cmp	r3, #63	; 0x3f
 80015d8:	d80c      	bhi.n	80015f4 <_ZN11SPI_Handler22SPI_IRQInterruptConfigEhh+0x58>
 80015da:	4b2d      	ldr	r3, [pc, #180]	; (8001690 <_ZN11SPI_Handler22SPI_IRQInterruptConfigEhh+0xf4>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	78fa      	ldrb	r2, [r7, #3]
 80015e0:	f002 021f 	and.w	r2, r2, #31
 80015e4:	2101      	movs	r1, #1
 80015e6:	fa01 f202 	lsl.w	r2, r1, r2
 80015ea:	4611      	mov	r1, r2
 80015ec:	4a28      	ldr	r2, [pc, #160]	; (8001690 <_ZN11SPI_Handler22SPI_IRQInterruptConfigEhh+0xf4>)
 80015ee:	430b      	orrs	r3, r1
 80015f0:	6013      	str	r3, [r2, #0]
 80015f2:	e046      	b.n	8001682 <_ZN11SPI_Handler22SPI_IRQInterruptConfigEhh+0xe6>
 80015f4:	78fb      	ldrb	r3, [r7, #3]
 80015f6:	2b3f      	cmp	r3, #63	; 0x3f
 80015f8:	d943      	bls.n	8001682 <_ZN11SPI_Handler22SPI_IRQInterruptConfigEhh+0xe6>
 80015fa:	78fb      	ldrb	r3, [r7, #3]
 80015fc:	2b5f      	cmp	r3, #95	; 0x5f
 80015fe:	d840      	bhi.n	8001682 <_ZN11SPI_Handler22SPI_IRQInterruptConfigEhh+0xe6>
 8001600:	4b24      	ldr	r3, [pc, #144]	; (8001694 <_ZN11SPI_Handler22SPI_IRQInterruptConfigEhh+0xf8>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	78fa      	ldrb	r2, [r7, #3]
 8001606:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800160a:	2101      	movs	r1, #1
 800160c:	fa01 f202 	lsl.w	r2, r1, r2
 8001610:	4611      	mov	r1, r2
 8001612:	4a20      	ldr	r2, [pc, #128]	; (8001694 <_ZN11SPI_Handler22SPI_IRQInterruptConfigEhh+0xf8>)
 8001614:	430b      	orrs	r3, r1
 8001616:	6013      	str	r3, [r2, #0]
 8001618:	e033      	b.n	8001682 <_ZN11SPI_Handler22SPI_IRQInterruptConfigEhh+0xe6>
 800161a:	78fb      	ldrb	r3, [r7, #3]
 800161c:	2b1f      	cmp	r3, #31
 800161e:	d80a      	bhi.n	8001636 <_ZN11SPI_Handler22SPI_IRQInterruptConfigEhh+0x9a>
 8001620:	4b1d      	ldr	r3, [pc, #116]	; (8001698 <_ZN11SPI_Handler22SPI_IRQInterruptConfigEhh+0xfc>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	78fa      	ldrb	r2, [r7, #3]
 8001626:	2101      	movs	r1, #1
 8001628:	fa01 f202 	lsl.w	r2, r1, r2
 800162c:	4611      	mov	r1, r2
 800162e:	4a1a      	ldr	r2, [pc, #104]	; (8001698 <_ZN11SPI_Handler22SPI_IRQInterruptConfigEhh+0xfc>)
 8001630:	430b      	orrs	r3, r1
 8001632:	6013      	str	r3, [r2, #0]
 8001634:	e025      	b.n	8001682 <_ZN11SPI_Handler22SPI_IRQInterruptConfigEhh+0xe6>
 8001636:	78fb      	ldrb	r3, [r7, #3]
 8001638:	2b1f      	cmp	r3, #31
 800163a:	d90f      	bls.n	800165c <_ZN11SPI_Handler22SPI_IRQInterruptConfigEhh+0xc0>
 800163c:	78fb      	ldrb	r3, [r7, #3]
 800163e:	2b3f      	cmp	r3, #63	; 0x3f
 8001640:	d80c      	bhi.n	800165c <_ZN11SPI_Handler22SPI_IRQInterruptConfigEhh+0xc0>
 8001642:	4b16      	ldr	r3, [pc, #88]	; (800169c <_ZN11SPI_Handler22SPI_IRQInterruptConfigEhh+0x100>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	78fa      	ldrb	r2, [r7, #3]
 8001648:	f002 021f 	and.w	r2, r2, #31
 800164c:	2101      	movs	r1, #1
 800164e:	fa01 f202 	lsl.w	r2, r1, r2
 8001652:	4611      	mov	r1, r2
 8001654:	4a11      	ldr	r2, [pc, #68]	; (800169c <_ZN11SPI_Handler22SPI_IRQInterruptConfigEhh+0x100>)
 8001656:	430b      	orrs	r3, r1
 8001658:	6013      	str	r3, [r2, #0]
 800165a:	e012      	b.n	8001682 <_ZN11SPI_Handler22SPI_IRQInterruptConfigEhh+0xe6>
 800165c:	78fb      	ldrb	r3, [r7, #3]
 800165e:	2b3f      	cmp	r3, #63	; 0x3f
 8001660:	d90f      	bls.n	8001682 <_ZN11SPI_Handler22SPI_IRQInterruptConfigEhh+0xe6>
 8001662:	78fb      	ldrb	r3, [r7, #3]
 8001664:	2b5f      	cmp	r3, #95	; 0x5f
 8001666:	d80c      	bhi.n	8001682 <_ZN11SPI_Handler22SPI_IRQInterruptConfigEhh+0xe6>
 8001668:	4b0d      	ldr	r3, [pc, #52]	; (80016a0 <_ZN11SPI_Handler22SPI_IRQInterruptConfigEhh+0x104>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	78fa      	ldrb	r2, [r7, #3]
 800166e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8001672:	2101      	movs	r1, #1
 8001674:	fa01 f202 	lsl.w	r2, r1, r2
 8001678:	4611      	mov	r1, r2
 800167a:	4a09      	ldr	r2, [pc, #36]	; (80016a0 <_ZN11SPI_Handler22SPI_IRQInterruptConfigEhh+0x104>)
 800167c:	430b      	orrs	r3, r1
 800167e:	6013      	str	r3, [r2, #0]
 8001680:	e7ff      	b.n	8001682 <_ZN11SPI_Handler22SPI_IRQInterruptConfigEhh+0xe6>
 8001682:	bf00      	nop
 8001684:	370c      	adds	r7, #12
 8001686:	46bd      	mov	sp, r7
 8001688:	bc80      	pop	{r7}
 800168a:	4770      	bx	lr
 800168c:	e000e100 	.word	0xe000e100
 8001690:	e000e104 	.word	0xe000e104
 8001694:	e000e108 	.word	0xe000e108
 8001698:	e000e180 	.word	0xe000e180
 800169c:	e000e184 	.word	0xe000e184
 80016a0:	e000e188 	.word	0xe000e188

080016a4 <_ZN11SPI_Handler21SPI_IRQPriorityConfigEhh>:
 80016a4:	b480      	push	{r7}
 80016a6:	b085      	sub	sp, #20
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
 80016ac:	460b      	mov	r3, r1
 80016ae:	70fb      	strb	r3, [r7, #3]
 80016b0:	4613      	mov	r3, r2
 80016b2:	70bb      	strb	r3, [r7, #2]
 80016b4:	78fb      	ldrb	r3, [r7, #3]
 80016b6:	109b      	asrs	r3, r3, #2
 80016b8:	73fb      	strb	r3, [r7, #15]
 80016ba:	78fb      	ldrb	r3, [r7, #3]
 80016bc:	f003 0303 	and.w	r3, r3, #3
 80016c0:	73bb      	strb	r3, [r7, #14]
 80016c2:	7bbb      	ldrb	r3, [r7, #14]
 80016c4:	00db      	lsls	r3, r3, #3
 80016c6:	b2db      	uxtb	r3, r3
 80016c8:	3304      	adds	r3, #4
 80016ca:	737b      	strb	r3, [r7, #13]
 80016cc:	7bfb      	ldrb	r3, [r7, #15]
 80016ce:	f103 5360 	add.w	r3, r3, #939524096	; 0x38000000
 80016d2:	f503 5364 	add.w	r3, r3, #14592	; 0x3900
 80016d6:	009b      	lsls	r3, r3, #2
 80016d8:	681a      	ldr	r2, [r3, #0]
 80016da:	78b9      	ldrb	r1, [r7, #2]
 80016dc:	7b7b      	ldrb	r3, [r7, #13]
 80016de:	fa01 f303 	lsl.w	r3, r1, r3
 80016e2:	4618      	mov	r0, r3
 80016e4:	7bfb      	ldrb	r3, [r7, #15]
 80016e6:	f103 5360 	add.w	r3, r3, #939524096	; 0x38000000
 80016ea:	f503 5364 	add.w	r3, r3, #14592	; 0x3900
 80016ee:	009b      	lsls	r3, r3, #2
 80016f0:	4619      	mov	r1, r3
 80016f2:	ea42 0300 	orr.w	r3, r2, r0
 80016f6:	600b      	str	r3, [r1, #0]
 80016f8:	bf00      	nop
 80016fa:	3714      	adds	r7, #20
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bc80      	pop	{r7}
 8001700:	4770      	bx	lr

08001702 <_ZN11SPI_Handler14SPI_SendDataITEPKhm>:
 8001702:	b580      	push	{r7, lr}
 8001704:	b084      	sub	sp, #16
 8001706:	af00      	add	r7, sp, #0
 8001708:	60f8      	str	r0, [r7, #12]
 800170a:	60b9      	str	r1, [r7, #8]
 800170c:	607a      	str	r2, [r7, #4]
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001718:	2b40      	cmp	r3, #64	; 0x40
 800171a:	bf14      	ite	ne
 800171c:	2301      	movne	r3, #1
 800171e:	2300      	moveq	r3, #0
 8001720:	b2db      	uxtb	r3, r3
 8001722:	2b00      	cmp	r3, #0
 8001724:	d003      	beq.n	800172e <_ZN11SPI_Handler14SPI_SendDataITEPKhm+0x2c>
 8001726:	2101      	movs	r1, #1
 8001728:	68f8      	ldr	r0, [r7, #12]
 800172a:	f7ff febf 	bl	80014ac <_ZN11SPI_Handler21SPI_PeripheralControlEh>
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	7f1b      	ldrb	r3, [r3, #28]
 8001732:	2b02      	cmp	r3, #2
 8001734:	d010      	beq.n	8001758 <_ZN11SPI_Handler14SPI_SendDataITEPKhm+0x56>
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	68ba      	ldr	r2, [r7, #8]
 800173a:	60da      	str	r2, [r3, #12]
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	687a      	ldr	r2, [r7, #4]
 8001740:	615a      	str	r2, [r3, #20]
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	2202      	movs	r2, #2
 8001746:	771a      	strb	r2, [r3, #28]
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	685a      	ldr	r2, [r3, #4]
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001756:	605a      	str	r2, [r3, #4]
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	7f1b      	ldrb	r3, [r3, #28]
 800175c:	4618      	mov	r0, r3
 800175e:	3710      	adds	r7, #16
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}

08001764 <_ZN11SPI_Handler17SPI_ReceiveDataITEPhm>:
 8001764:	b580      	push	{r7, lr}
 8001766:	b084      	sub	sp, #16
 8001768:	af00      	add	r7, sp, #0
 800176a:	60f8      	str	r0, [r7, #12]
 800176c:	60b9      	str	r1, [r7, #8]
 800176e:	607a      	str	r2, [r7, #4]
 8001770:	68f8      	ldr	r0, [r7, #12]
 8001772:	f000 f93a 	bl	80019ea <_ZN11SPI_Handler16SPI_ClearOVRFlagEv>
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	7f5b      	ldrb	r3, [r3, #29]
 800177a:	2b01      	cmp	r3, #1
 800177c:	d010      	beq.n	80017a0 <_ZN11SPI_Handler17SPI_ReceiveDataITEPhm+0x3c>
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	68ba      	ldr	r2, [r7, #8]
 8001782:	611a      	str	r2, [r3, #16]
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	687a      	ldr	r2, [r7, #4]
 8001788:	619a      	str	r2, [r3, #24]
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	2201      	movs	r2, #1
 800178e:	775a      	strb	r2, [r3, #29]
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	685a      	ldr	r2, [r3, #4]
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800179e:	605a      	str	r2, [r3, #4]
 80017a0:	687a      	ldr	r2, [r7, #4]
 80017a2:	68b9      	ldr	r1, [r7, #8]
 80017a4:	68f8      	ldr	r0, [r7, #12]
 80017a6:	f7ff ffac 	bl	8001702 <_ZN11SPI_Handler14SPI_SendDataITEPKhm>
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	7f1b      	ldrb	r3, [r3, #28]
 80017ae:	4618      	mov	r0, r3
 80017b0:	3710      	adds	r7, #16
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
	...

080017b8 <_ZN11SPI_Handler15SPI_IRQHandlingEv>:
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b084      	sub	sp, #16
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
 80017c0:	4b29      	ldr	r3, [pc, #164]	; (8001868 <_ZN11SPI_Handler15SPI_IRQHandlingEv+0xb0>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	3301      	adds	r3, #1
 80017c6:	4a28      	ldr	r2, [pc, #160]	; (8001868 <_ZN11SPI_Handler15SPI_IRQHandlingEv+0xb0>)
 80017c8:	6013      	str	r3, [r2, #0]
 80017ca:	2300      	movs	r3, #0
 80017cc:	73fb      	strb	r3, [r7, #15]
 80017ce:	2300      	movs	r3, #0
 80017d0:	73bb      	strb	r3, [r7, #14]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	689b      	ldr	r3, [r3, #8]
 80017d8:	b2db      	uxtb	r3, r3
 80017da:	f003 0302 	and.w	r3, r3, #2
 80017de:	73fb      	strb	r3, [r7, #15]
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	b2db      	uxtb	r3, r3
 80017e8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80017ec:	73bb      	strb	r3, [r7, #14]
 80017ee:	7bfb      	ldrb	r3, [r7, #15]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d006      	beq.n	8001802 <_ZN11SPI_Handler15SPI_IRQHandlingEv+0x4a>
 80017f4:	7bbb      	ldrb	r3, [r7, #14]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d003      	beq.n	8001802 <_ZN11SPI_Handler15SPI_IRQHandlingEv+0x4a>
 80017fa:	6878      	ldr	r0, [r7, #4]
 80017fc:	f000 f836 	bl	800186c <_ZN11SPI_Handler24spi_txe_interrupt_handleEv>
 8001800:	e02f      	b.n	8001862 <_ZN11SPI_Handler15SPI_IRQHandlingEv+0xaa>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	689b      	ldr	r3, [r3, #8]
 8001808:	b2db      	uxtb	r3, r3
 800180a:	f003 0301 	and.w	r3, r3, #1
 800180e:	73fb      	strb	r3, [r7, #15]
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	b2db      	uxtb	r3, r3
 8001818:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800181c:	73bb      	strb	r3, [r7, #14]
 800181e:	7bfb      	ldrb	r3, [r7, #15]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d006      	beq.n	8001832 <_ZN11SPI_Handler15SPI_IRQHandlingEv+0x7a>
 8001824:	7bbb      	ldrb	r3, [r7, #14]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d003      	beq.n	8001832 <_ZN11SPI_Handler15SPI_IRQHandlingEv+0x7a>
 800182a:	6878      	ldr	r0, [r7, #4]
 800182c:	f000 f86f 	bl	800190e <_ZN11SPI_Handler25spi_rxne_interrupt_handleEv>
 8001830:	e017      	b.n	8001862 <_ZN11SPI_Handler15SPI_IRQHandlingEv+0xaa>
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	689b      	ldr	r3, [r3, #8]
 8001838:	b2db      	uxtb	r3, r3
 800183a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800183e:	73fb      	strb	r3, [r7, #15]
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	b2db      	uxtb	r3, r3
 8001848:	f003 0320 	and.w	r3, r3, #32
 800184c:	73bb      	strb	r3, [r7, #14]
 800184e:	7bfb      	ldrb	r3, [r7, #15]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d006      	beq.n	8001862 <_ZN11SPI_Handler15SPI_IRQHandlingEv+0xaa>
 8001854:	7bbb      	ldrb	r3, [r7, #14]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d003      	beq.n	8001862 <_ZN11SPI_Handler15SPI_IRQHandlingEv+0xaa>
 800185a:	6878      	ldr	r0, [r7, #4]
 800185c:	f000 f8aa 	bl	80019b4 <_ZN11SPI_Handler28spi_ovr_err_interrupt_handleEv>
 8001860:	bf00      	nop
 8001862:	3710      	adds	r7, #16
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}
 8001868:	20000088 	.word	0x20000088

0800186c <_ZN11SPI_Handler24spi_txe_interrupt_handleEv>:
 800186c:	b580      	push	{r7, lr}
 800186e:	b082      	sub	sp, #8
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800187e:	2b40      	cmp	r3, #64	; 0x40
 8001880:	bf14      	ite	ne
 8001882:	2301      	movne	r3, #1
 8001884:	2300      	moveq	r3, #0
 8001886:	b2db      	uxtb	r3, r3
 8001888:	2b00      	cmp	r3, #0
 800188a:	d003      	beq.n	8001894 <_ZN11SPI_Handler24spi_txe_interrupt_handleEv+0x28>
 800188c:	2101      	movs	r1, #1
 800188e:	6878      	ldr	r0, [r7, #4]
 8001890:	f7ff fe0c 	bl	80014ac <_ZN11SPI_Handler21SPI_PeripheralControlEh>
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800189e:	2b00      	cmp	r3, #0
 80018a0:	bf14      	ite	ne
 80018a2:	2301      	movne	r3, #1
 80018a4:	2300      	moveq	r3, #0
 80018a6:	b2db      	uxtb	r3, r3
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d010      	beq.n	80018ce <_ZN11SPI_Handler24spi_txe_interrupt_handleEv+0x62>
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	68db      	ldr	r3, [r3, #12]
 80018b0:	881a      	ldrh	r2, [r3, #0]
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	60da      	str	r2, [r3, #12]
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	695b      	ldr	r3, [r3, #20]
 80018bc:	1e9a      	subs	r2, r3, #2
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	615a      	str	r2, [r3, #20]
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	68db      	ldr	r3, [r3, #12]
 80018c6:	1c5a      	adds	r2, r3, #1
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	60da      	str	r2, [r3, #12]
 80018cc:	e00f      	b.n	80018ee <_ZN11SPI_Handler24spi_txe_interrupt_handleEv+0x82>
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	68db      	ldr	r3, [r3, #12]
 80018d2:	781a      	ldrb	r2, [r3, #0]
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	60da      	str	r2, [r3, #12]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	695b      	ldr	r3, [r3, #20]
 80018de:	1e5a      	subs	r2, r3, #1
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	615a      	str	r2, [r3, #20]
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	68db      	ldr	r3, [r3, #12]
 80018e8:	1c5a      	adds	r2, r3, #1
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	60da      	str	r2, [r3, #12]
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	695b      	ldr	r3, [r3, #20]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d107      	bne.n	8001906 <_ZN11SPI_Handler24spi_txe_interrupt_handleEv+0x9a>
 80018f6:	6878      	ldr	r0, [r7, #4]
 80018f8:	f000 f88a 	bl	8001a10 <_ZN11SPI_Handler21SPI_CloseTransmissionEv>
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2101      	movs	r1, #1
 8001900:	4618      	mov	r0, r3
 8001902:	f000 f8b9 	bl	8001a78 <_Z28SPI_ApplicationEventCallbackP12SPI_Handle_th>
 8001906:	bf00      	nop
 8001908:	3708      	adds	r7, #8
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}

0800190e <_ZN11SPI_Handler25spi_rxne_interrupt_handleEv>:
 800190e:	b580      	push	{r7, lr}
 8001910:	b082      	sub	sp, #8
 8001912:	af00      	add	r7, sp, #0
 8001914:	6078      	str	r0, [r7, #4]
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001920:	2b40      	cmp	r3, #64	; 0x40
 8001922:	bf14      	ite	ne
 8001924:	2301      	movne	r3, #1
 8001926:	2300      	moveq	r3, #0
 8001928:	b2db      	uxtb	r3, r3
 800192a:	2b00      	cmp	r3, #0
 800192c:	d003      	beq.n	8001936 <_ZN11SPI_Handler25spi_rxne_interrupt_handleEv+0x28>
 800192e:	2101      	movs	r1, #1
 8001930:	6878      	ldr	r0, [r7, #4]
 8001932:	f7ff fdbb 	bl	80014ac <_ZN11SPI_Handler21SPI_PeripheralControlEh>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001940:	2b00      	cmp	r3, #0
 8001942:	bf14      	ite	ne
 8001944:	2301      	movne	r3, #1
 8001946:	2300      	moveq	r3, #0
 8001948:	b2db      	uxtb	r3, r3
 800194a:	2b00      	cmp	r3, #0
 800194c:	d011      	beq.n	8001972 <_ZN11SPI_Handler25spi_rxne_interrupt_handleEv+0x64>
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	68da      	ldr	r2, [r3, #12]
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	691b      	ldr	r3, [r3, #16]
 8001958:	b292      	uxth	r2, r2
 800195a:	801a      	strh	r2, [r3, #0]
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	699b      	ldr	r3, [r3, #24]
 8001960:	1e9a      	subs	r2, r3, #2
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	619a      	str	r2, [r3, #24]
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	691b      	ldr	r3, [r3, #16]
 800196a:	1c5a      	adds	r2, r3, #1
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	611a      	str	r2, [r3, #16]
 8001970:	e010      	b.n	8001994 <_ZN11SPI_Handler25spi_rxne_interrupt_handleEv+0x86>
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	68da      	ldr	r2, [r3, #12]
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	691b      	ldr	r3, [r3, #16]
 800197c:	b2d2      	uxtb	r2, r2
 800197e:	701a      	strb	r2, [r3, #0]
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	699b      	ldr	r3, [r3, #24]
 8001984:	1e5a      	subs	r2, r3, #1
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	619a      	str	r2, [r3, #24]
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	691b      	ldr	r3, [r3, #16]
 800198e:	1c5a      	adds	r2, r3, #1
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	611a      	str	r2, [r3, #16]
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	699b      	ldr	r3, [r3, #24]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d107      	bne.n	80019ac <_ZN11SPI_Handler25spi_rxne_interrupt_handleEv+0x9e>
 800199c:	6878      	ldr	r0, [r7, #4]
 800199e:	f000 f851 	bl	8001a44 <_ZN11SPI_Handler18SPI_CloseReceptionEv>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2102      	movs	r1, #2
 80019a6:	4618      	mov	r0, r3
 80019a8:	f000 f866 	bl	8001a78 <_Z28SPI_ApplicationEventCallbackP12SPI_Handle_th>
 80019ac:	bf00      	nop
 80019ae:	3708      	adds	r7, #8
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}

080019b4 <_ZN11SPI_Handler28spi_ovr_err_interrupt_handleEv>:
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b084      	sub	sp, #16
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
 80019bc:	2300      	movs	r3, #0
 80019be:	73fb      	strb	r3, [r7, #15]
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	7f1b      	ldrb	r3, [r3, #28]
 80019c4:	2b02      	cmp	r3, #2
 80019c6:	d007      	beq.n	80019d8 <_ZN11SPI_Handler28spi_ovr_err_interrupt_handleEv+0x24>
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	68db      	ldr	r3, [r3, #12]
 80019ce:	73fb      	strb	r3, [r7, #15]
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	689b      	ldr	r3, [r3, #8]
 80019d6:	73fb      	strb	r3, [r7, #15]
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2103      	movs	r1, #3
 80019dc:	4618      	mov	r0, r3
 80019de:	f000 f84b 	bl	8001a78 <_Z28SPI_ApplicationEventCallbackP12SPI_Handle_th>
 80019e2:	bf00      	nop
 80019e4:	3710      	adds	r7, #16
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}

080019ea <_ZN11SPI_Handler16SPI_ClearOVRFlagEv>:
 80019ea:	b480      	push	{r7}
 80019ec:	b085      	sub	sp, #20
 80019ee:	af00      	add	r7, sp, #0
 80019f0:	6078      	str	r0, [r7, #4]
 80019f2:	2300      	movs	r3, #0
 80019f4:	73fb      	strb	r3, [r7, #15]
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	68db      	ldr	r3, [r3, #12]
 80019fc:	73fb      	strb	r3, [r7, #15]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	689b      	ldr	r3, [r3, #8]
 8001a04:	73fb      	strb	r3, [r7, #15]
 8001a06:	bf00      	nop
 8001a08:	3714      	adds	r7, #20
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bc80      	pop	{r7}
 8001a0e:	4770      	bx	lr

08001a10 <_ZN11SPI_Handler21SPI_CloseTransmissionEv>:
 8001a10:	b480      	push	{r7}
 8001a12:	b083      	sub	sp, #12
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	685a      	ldr	r2, [r3, #4]
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001a26:	605a      	str	r2, [r3, #4]
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	60da      	str	r2, [r3, #12]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2200      	movs	r2, #0
 8001a32:	615a      	str	r2, [r3, #20]
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2200      	movs	r2, #0
 8001a38:	771a      	strb	r2, [r3, #28]
 8001a3a:	bf00      	nop
 8001a3c:	370c      	adds	r7, #12
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bc80      	pop	{r7}
 8001a42:	4770      	bx	lr

08001a44 <_ZN11SPI_Handler18SPI_CloseReceptionEv>:
 8001a44:	b480      	push	{r7}
 8001a46:	b083      	sub	sp, #12
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	685a      	ldr	r2, [r3, #4]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001a5a:	605a      	str	r2, [r3, #4]
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2200      	movs	r2, #0
 8001a60:	611a      	str	r2, [r3, #16]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2200      	movs	r2, #0
 8001a66:	619a      	str	r2, [r3, #24]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	775a      	strb	r2, [r3, #29]
 8001a6e:	bf00      	nop
 8001a70:	370c      	adds	r7, #12
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bc80      	pop	{r7}
 8001a76:	4770      	bx	lr

08001a78 <_Z28SPI_ApplicationEventCallbackP12SPI_Handle_th>:
 8001a78:	b480      	push	{r7}
 8001a7a:	b083      	sub	sp, #12
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
 8001a80:	460b      	mov	r3, r1
 8001a82:	70fb      	strb	r3, [r7, #3]
 8001a84:	bf00      	nop
 8001a86:	370c      	adds	r7, #12
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bc80      	pop	{r7}
 8001a8c:	4770      	bx	lr

08001a8e <_ZNSt5tupleIJP12GPIO_HandlerSt14default_deleteIS0_EEEC1IS1_S3_Lb1EEEv>:
 8001a8e:	b580      	push	{r7, lr}
 8001a90:	b082      	sub	sp, #8
 8001a92:	af00      	add	r7, sp, #0
 8001a94:	6078      	str	r0, [r7, #4]
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f000 f841 	bl	8001b20 <_ZNSt11_Tuple_implILj0EJP12GPIO_HandlerSt14default_deleteIS0_EEEC1Ev>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	3708      	adds	r7, #8
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}

08001aa8 <_ZNSt15__uniq_ptr_implI12GPIO_HandlerSt14default_deleteIS0_EEC1Ev>:
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b082      	sub	sp, #8
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f7ff ffeb 	bl	8001a8e <_ZNSt5tupleIJP12GPIO_HandlerSt14default_deleteIS0_EEEC1IS1_S3_Lb1EEEv>
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	4618      	mov	r0, r3
 8001abc:	3708      	adds	r7, #8
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}

08001ac2 <_ZNSt10unique_ptrI12GPIO_HandlerSt14default_deleteIS0_EEC1IS2_vEEv>:
 8001ac2:	b580      	push	{r7, lr}
 8001ac4:	b082      	sub	sp, #8
 8001ac6:	af00      	add	r7, sp, #0
 8001ac8:	6078      	str	r0, [r7, #4]
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2200      	movs	r2, #0
 8001ace:	601a      	str	r2, [r3, #0]
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f7ff ffe8 	bl	8001aa8 <_ZNSt15__uniq_ptr_implI12GPIO_HandlerSt14default_deleteIS0_EEC1Ev>
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	4618      	mov	r0, r3
 8001adc:	3708      	adds	r7, #8
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}

08001ae2 <_ZNSt10unique_ptrI12GPIO_HandlerSt14default_deleteIS0_EE5resetEPS0_>:
 8001ae2:	b580      	push	{r7, lr}
 8001ae4:	b082      	sub	sp, #8
 8001ae6:	af00      	add	r7, sp, #0
 8001ae8:	6078      	str	r0, [r7, #4]
 8001aea:	6039      	str	r1, [r7, #0]
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	4618      	mov	r0, r3
 8001af0:	f000 f826 	bl	8001b40 <_ZNSt15__uniq_ptr_implI12GPIO_HandlerSt14default_deleteIS0_EE6_M_ptrEv>
 8001af4:	4602      	mov	r2, r0
 8001af6:	463b      	mov	r3, r7
 8001af8:	4619      	mov	r1, r3
 8001afa:	4610      	mov	r0, r2
 8001afc:	f000 f857 	bl	8001bae <_ZSt4swapIP12GPIO_HandlerENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS6_ESt18is_move_assignableIS6_EEE5valueEvE4typeERS6_SG_>
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d008      	beq.n	8001b18 <_ZNSt10unique_ptrI12GPIO_HandlerSt14default_deleteIS0_EE5resetEPS0_+0x36>
 8001b06:	6878      	ldr	r0, [r7, #4]
 8001b08:	f000 f827 	bl	8001b5a <_ZNSt10unique_ptrI12GPIO_HandlerSt14default_deleteIS0_EE11get_deleterEv>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	4619      	mov	r1, r3
 8001b12:	4610      	mov	r0, r2
 8001b14:	f000 f82e 	bl	8001b74 <_ZNKSt14default_deleteI12GPIO_HandlerEclEPS0_>
 8001b18:	bf00      	nop
 8001b1a:	3708      	adds	r7, #8
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}

08001b20 <_ZNSt11_Tuple_implILj0EJP12GPIO_HandlerSt14default_deleteIS0_EEEC1Ev>:
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b082      	sub	sp, #8
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
 8001b28:	6878      	ldr	r0, [r7, #4]
 8001b2a:	f000 f85f 	bl	8001bec <_ZNSt11_Tuple_implILj1EJSt14default_deleteI12GPIO_HandlerEEEC1Ev>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	4618      	mov	r0, r3
 8001b32:	f000 f867 	bl	8001c04 <_ZNSt10_Head_baseILj0EP12GPIO_HandlerLb0EEC1Ev>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	4618      	mov	r0, r3
 8001b3a:	3708      	adds	r7, #8
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}

08001b40 <_ZNSt15__uniq_ptr_implI12GPIO_HandlerSt14default_deleteIS0_EE6_M_ptrEv>:
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b082      	sub	sp, #8
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f000 f867 	bl	8001c1e <_ZSt3getILj0EJP12GPIO_HandlerSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8001b50:	4603      	mov	r3, r0
 8001b52:	4618      	mov	r0, r3
 8001b54:	3708      	adds	r7, #8
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}

08001b5a <_ZNSt10unique_ptrI12GPIO_HandlerSt14default_deleteIS0_EE11get_deleterEv>:
 8001b5a:	b580      	push	{r7, lr}
 8001b5c:	b082      	sub	sp, #8
 8001b5e:	af00      	add	r7, sp, #0
 8001b60:	6078      	str	r0, [r7, #4]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	4618      	mov	r0, r3
 8001b66:	f000 f867 	bl	8001c38 <_ZNSt15__uniq_ptr_implI12GPIO_HandlerSt14default_deleteIS0_EE10_M_deleterEv>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	3708      	adds	r7, #8
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}

08001b74 <_ZNKSt14default_deleteI12GPIO_HandlerEclEPS0_>:
 8001b74:	b590      	push	{r4, r7, lr}
 8001b76:	b083      	sub	sp, #12
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
 8001b7c:	6039      	str	r1, [r7, #0]
 8001b7e:	683c      	ldr	r4, [r7, #0]
 8001b80:	2c00      	cmp	r4, #0
 8001b82:	d006      	beq.n	8001b92 <_ZNKSt14default_deleteI12GPIO_HandlerEclEPS0_+0x1e>
 8001b84:	4620      	mov	r0, r4
 8001b86:	f7fe ffd8 	bl	8000b3a <_ZN12GPIO_HandlerD1Ev>
 8001b8a:	210c      	movs	r1, #12
 8001b8c:	4620      	mov	r0, r4
 8001b8e:	f000 f8bb 	bl	8001d08 <_ZdlPvj>
 8001b92:	bf00      	nop
 8001b94:	370c      	adds	r7, #12
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd90      	pop	{r4, r7, pc}

08001b9a <_ZSt4moveIRP12GPIO_HandlerEONSt16remove_referenceIT_E4typeEOS4_>:
 8001b9a:	b480      	push	{r7}
 8001b9c:	b083      	sub	sp, #12
 8001b9e:	af00      	add	r7, sp, #0
 8001ba0:	6078      	str	r0, [r7, #4]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	370c      	adds	r7, #12
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bc80      	pop	{r7}
 8001bac:	4770      	bx	lr

08001bae <_ZSt4swapIP12GPIO_HandlerENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS6_ESt18is_move_assignableIS6_EEE5valueEvE4typeERS6_SG_>:
 8001bae:	b580      	push	{r7, lr}
 8001bb0:	b084      	sub	sp, #16
 8001bb2:	af00      	add	r7, sp, #0
 8001bb4:	6078      	str	r0, [r7, #4]
 8001bb6:	6039      	str	r1, [r7, #0]
 8001bb8:	6878      	ldr	r0, [r7, #4]
 8001bba:	f7ff ffee 	bl	8001b9a <_ZSt4moveIRP12GPIO_HandlerEONSt16remove_referenceIT_E4typeEOS4_>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	60fb      	str	r3, [r7, #12]
 8001bc4:	6838      	ldr	r0, [r7, #0]
 8001bc6:	f7ff ffe8 	bl	8001b9a <_ZSt4moveIRP12GPIO_HandlerEONSt16remove_referenceIT_E4typeEOS4_>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	681a      	ldr	r2, [r3, #0]
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	601a      	str	r2, [r3, #0]
 8001bd2:	f107 030c 	add.w	r3, r7, #12
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f7ff ffdf 	bl	8001b9a <_ZSt4moveIRP12GPIO_HandlerEONSt16remove_referenceIT_E4typeEOS4_>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	681a      	ldr	r2, [r3, #0]
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	601a      	str	r2, [r3, #0]
 8001be4:	bf00      	nop
 8001be6:	3710      	adds	r7, #16
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}

08001bec <_ZNSt11_Tuple_implILj1EJSt14default_deleteI12GPIO_HandlerEEEC1Ev>:
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b082      	sub	sp, #8
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
 8001bf4:	6878      	ldr	r0, [r7, #4]
 8001bf6:	f000 f82c 	bl	8001c52 <_ZNSt10_Head_baseILj1ESt14default_deleteI12GPIO_HandlerELb1EEC1Ev>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	3708      	adds	r7, #8
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}

08001c04 <_ZNSt10_Head_baseILj0EP12GPIO_HandlerLb0EEC1Ev>:
 8001c04:	b480      	push	{r7}
 8001c06:	b083      	sub	sp, #12
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2200      	movs	r2, #0
 8001c10:	601a      	str	r2, [r3, #0]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	4618      	mov	r0, r3
 8001c16:	370c      	adds	r7, #12
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bc80      	pop	{r7}
 8001c1c:	4770      	bx	lr

08001c1e <_ZSt3getILj0EJP12GPIO_HandlerSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
 8001c1e:	b580      	push	{r7, lr}
 8001c20:	b082      	sub	sp, #8
 8001c22:	af00      	add	r7, sp, #0
 8001c24:	6078      	str	r0, [r7, #4]
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f000 f81c 	bl	8001c66 <_ZSt12__get_helperILj0EP12GPIO_HandlerJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	4618      	mov	r0, r3
 8001c32:	3708      	adds	r7, #8
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}

08001c38 <_ZNSt15__uniq_ptr_implI12GPIO_HandlerSt14default_deleteIS0_EE10_M_deleterEv>:
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b082      	sub	sp, #8
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	4618      	mov	r0, r3
 8001c44:	f000 f81b 	bl	8001c7e <_ZSt3getILj1EJP12GPIO_HandlerSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	3708      	adds	r7, #8
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}

08001c52 <_ZNSt10_Head_baseILj1ESt14default_deleteI12GPIO_HandlerELb1EEC1Ev>:
 8001c52:	b480      	push	{r7}
 8001c54:	b083      	sub	sp, #12
 8001c56:	af00      	add	r7, sp, #0
 8001c58:	6078      	str	r0, [r7, #4]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	370c      	adds	r7, #12
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bc80      	pop	{r7}
 8001c64:	4770      	bx	lr

08001c66 <_ZSt12__get_helperILj0EP12GPIO_HandlerJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
 8001c66:	b580      	push	{r7, lr}
 8001c68:	b082      	sub	sp, #8
 8001c6a:	af00      	add	r7, sp, #0
 8001c6c:	6078      	str	r0, [r7, #4]
 8001c6e:	6878      	ldr	r0, [r7, #4]
 8001c70:	f000 f811 	bl	8001c96 <_ZNSt11_Tuple_implILj0EJP12GPIO_HandlerSt14default_deleteIS0_EEE7_M_headERS4_>
 8001c74:	4603      	mov	r3, r0
 8001c76:	4618      	mov	r0, r3
 8001c78:	3708      	adds	r7, #8
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}

08001c7e <_ZSt3getILj1EJP12GPIO_HandlerSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
 8001c7e:	b580      	push	{r7, lr}
 8001c80:	b082      	sub	sp, #8
 8001c82:	af00      	add	r7, sp, #0
 8001c84:	6078      	str	r0, [r7, #4]
 8001c86:	6878      	ldr	r0, [r7, #4]
 8001c88:	f000 f812 	bl	8001cb0 <_ZSt12__get_helperILj1ESt14default_deleteI12GPIO_HandlerEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	4618      	mov	r0, r3
 8001c90:	3708      	adds	r7, #8
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}

08001c96 <_ZNSt11_Tuple_implILj0EJP12GPIO_HandlerSt14default_deleteIS0_EEE7_M_headERS4_>:
 8001c96:	b580      	push	{r7, lr}
 8001c98:	b082      	sub	sp, #8
 8001c9a:	af00      	add	r7, sp, #0
 8001c9c:	6078      	str	r0, [r7, #4]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f000 f811 	bl	8001cc8 <_ZNSt10_Head_baseILj0EP12GPIO_HandlerLb0EE7_M_headERS2_>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	4618      	mov	r0, r3
 8001caa:	3708      	adds	r7, #8
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}

08001cb0 <_ZSt12__get_helperILj1ESt14default_deleteI12GPIO_HandlerEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b082      	sub	sp, #8
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
 8001cb8:	6878      	ldr	r0, [r7, #4]
 8001cba:	f000 f80f 	bl	8001cdc <_ZNSt11_Tuple_implILj1EJSt14default_deleteI12GPIO_HandlerEEE7_M_headERS3_>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	3708      	adds	r7, #8
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}

08001cc8 <_ZNSt10_Head_baseILj0EP12GPIO_HandlerLb0EE7_M_headERS2_>:
 8001cc8:	b480      	push	{r7}
 8001cca:	b083      	sub	sp, #12
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	370c      	adds	r7, #12
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bc80      	pop	{r7}
 8001cda:	4770      	bx	lr

08001cdc <_ZNSt11_Tuple_implILj1EJSt14default_deleteI12GPIO_HandlerEEE7_M_headERS3_>:
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b082      	sub	sp, #8
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
 8001ce4:	6878      	ldr	r0, [r7, #4]
 8001ce6:	f000 f805 	bl	8001cf4 <_ZNSt10_Head_baseILj1ESt14default_deleteI12GPIO_HandlerELb1EE7_M_headERS3_>
 8001cea:	4603      	mov	r3, r0
 8001cec:	4618      	mov	r0, r3
 8001cee:	3708      	adds	r7, #8
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}

08001cf4 <_ZNSt10_Head_baseILj1ESt14default_deleteI12GPIO_HandlerELb1EE7_M_headERS3_>:
 8001cf4:	b480      	push	{r7}
 8001cf6:	b083      	sub	sp, #12
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	4618      	mov	r0, r3
 8001d00:	370c      	adds	r7, #12
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bc80      	pop	{r7}
 8001d06:	4770      	bx	lr

08001d08 <_ZdlPvj>:
 8001d08:	f000 b81a 	b.w	8001d40 <_ZdlPv>

08001d0c <_Znwj>:
 8001d0c:	b510      	push	{r4, lr}
 8001d0e:	2800      	cmp	r0, #0
 8001d10:	bf14      	ite	ne
 8001d12:	4604      	movne	r4, r0
 8001d14:	2401      	moveq	r4, #1
 8001d16:	4620      	mov	r0, r4
 8001d18:	f000 f846 	bl	8001da8 <malloc>
 8001d1c:	b930      	cbnz	r0, 8001d2c <_Znwj+0x20>
 8001d1e:	f000 f807 	bl	8001d30 <_ZSt15get_new_handlerv>
 8001d22:	b908      	cbnz	r0, 8001d28 <_Znwj+0x1c>
 8001d24:	f000 f80e 	bl	8001d44 <abort>
 8001d28:	4780      	blx	r0
 8001d2a:	e7f4      	b.n	8001d16 <_Znwj+0xa>
 8001d2c:	bd10      	pop	{r4, pc}
	...

08001d30 <_ZSt15get_new_handlerv>:
 8001d30:	4b02      	ldr	r3, [pc, #8]	; (8001d3c <_ZSt15get_new_handlerv+0xc>)
 8001d32:	6818      	ldr	r0, [r3, #0]
 8001d34:	f3bf 8f5b 	dmb	ish
 8001d38:	4770      	bx	lr
 8001d3a:	bf00      	nop
 8001d3c:	2000008c 	.word	0x2000008c

08001d40 <_ZdlPv>:
 8001d40:	f000 b83a 	b.w	8001db8 <free>

08001d44 <abort>:
 8001d44:	b508      	push	{r3, lr}
 8001d46:	2006      	movs	r0, #6
 8001d48:	f000 f926 	bl	8001f98 <raise>
 8001d4c:	2001      	movs	r0, #1
 8001d4e:	f7fe fb06 	bl	800035e <_exit>
	...

08001d54 <__errno>:
 8001d54:	4b01      	ldr	r3, [pc, #4]	; (8001d5c <__errno+0x8>)
 8001d56:	6818      	ldr	r0, [r3, #0]
 8001d58:	4770      	bx	lr
 8001d5a:	bf00      	nop
 8001d5c:	20000000 	.word	0x20000000

08001d60 <__libc_init_array>:
 8001d60:	b570      	push	{r4, r5, r6, lr}
 8001d62:	4e0d      	ldr	r6, [pc, #52]	; (8001d98 <__libc_init_array+0x38>)
 8001d64:	4c0d      	ldr	r4, [pc, #52]	; (8001d9c <__libc_init_array+0x3c>)
 8001d66:	1ba4      	subs	r4, r4, r6
 8001d68:	10a4      	asrs	r4, r4, #2
 8001d6a:	2500      	movs	r5, #0
 8001d6c:	42a5      	cmp	r5, r4
 8001d6e:	d109      	bne.n	8001d84 <__libc_init_array+0x24>
 8001d70:	4e0b      	ldr	r6, [pc, #44]	; (8001da0 <__libc_init_array+0x40>)
 8001d72:	4c0c      	ldr	r4, [pc, #48]	; (8001da4 <__libc_init_array+0x44>)
 8001d74:	f000 f92e 	bl	8001fd4 <_init>
 8001d78:	1ba4      	subs	r4, r4, r6
 8001d7a:	10a4      	asrs	r4, r4, #2
 8001d7c:	2500      	movs	r5, #0
 8001d7e:	42a5      	cmp	r5, r4
 8001d80:	d105      	bne.n	8001d8e <__libc_init_array+0x2e>
 8001d82:	bd70      	pop	{r4, r5, r6, pc}
 8001d84:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001d88:	4798      	blx	r3
 8001d8a:	3501      	adds	r5, #1
 8001d8c:	e7ee      	b.n	8001d6c <__libc_init_array+0xc>
 8001d8e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001d92:	4798      	blx	r3
 8001d94:	3501      	adds	r5, #1
 8001d96:	e7f2      	b.n	8001d7e <__libc_init_array+0x1e>
 8001d98:	08001fec 	.word	0x08001fec
 8001d9c:	08001fec 	.word	0x08001fec
 8001da0:	08001fec 	.word	0x08001fec
 8001da4:	08001ff0 	.word	0x08001ff0

08001da8 <malloc>:
 8001da8:	4b02      	ldr	r3, [pc, #8]	; (8001db4 <malloc+0xc>)
 8001daa:	4601      	mov	r1, r0
 8001dac:	6818      	ldr	r0, [r3, #0]
 8001dae:	f000 b861 	b.w	8001e74 <_malloc_r>
 8001db2:	bf00      	nop
 8001db4:	20000000 	.word	0x20000000

08001db8 <free>:
 8001db8:	4b02      	ldr	r3, [pc, #8]	; (8001dc4 <free+0xc>)
 8001dba:	4601      	mov	r1, r0
 8001dbc:	6818      	ldr	r0, [r3, #0]
 8001dbe:	f000 b80b 	b.w	8001dd8 <_free_r>
 8001dc2:	bf00      	nop
 8001dc4:	20000000 	.word	0x20000000

08001dc8 <memset>:
 8001dc8:	4402      	add	r2, r0
 8001dca:	4603      	mov	r3, r0
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d100      	bne.n	8001dd2 <memset+0xa>
 8001dd0:	4770      	bx	lr
 8001dd2:	f803 1b01 	strb.w	r1, [r3], #1
 8001dd6:	e7f9      	b.n	8001dcc <memset+0x4>

08001dd8 <_free_r>:
 8001dd8:	b538      	push	{r3, r4, r5, lr}
 8001dda:	4605      	mov	r5, r0
 8001ddc:	2900      	cmp	r1, #0
 8001dde:	d045      	beq.n	8001e6c <_free_r+0x94>
 8001de0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001de4:	1f0c      	subs	r4, r1, #4
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	bfb8      	it	lt
 8001dea:	18e4      	addlt	r4, r4, r3
 8001dec:	f000 f8f0 	bl	8001fd0 <__malloc_lock>
 8001df0:	4a1f      	ldr	r2, [pc, #124]	; (8001e70 <_free_r+0x98>)
 8001df2:	6813      	ldr	r3, [r2, #0]
 8001df4:	4610      	mov	r0, r2
 8001df6:	b933      	cbnz	r3, 8001e06 <_free_r+0x2e>
 8001df8:	6063      	str	r3, [r4, #4]
 8001dfa:	6014      	str	r4, [r2, #0]
 8001dfc:	4628      	mov	r0, r5
 8001dfe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001e02:	f000 b8e6 	b.w	8001fd2 <__malloc_unlock>
 8001e06:	42a3      	cmp	r3, r4
 8001e08:	d90c      	bls.n	8001e24 <_free_r+0x4c>
 8001e0a:	6821      	ldr	r1, [r4, #0]
 8001e0c:	1862      	adds	r2, r4, r1
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	bf04      	itt	eq
 8001e12:	681a      	ldreq	r2, [r3, #0]
 8001e14:	685b      	ldreq	r3, [r3, #4]
 8001e16:	6063      	str	r3, [r4, #4]
 8001e18:	bf04      	itt	eq
 8001e1a:	1852      	addeq	r2, r2, r1
 8001e1c:	6022      	streq	r2, [r4, #0]
 8001e1e:	6004      	str	r4, [r0, #0]
 8001e20:	e7ec      	b.n	8001dfc <_free_r+0x24>
 8001e22:	4613      	mov	r3, r2
 8001e24:	685a      	ldr	r2, [r3, #4]
 8001e26:	b10a      	cbz	r2, 8001e2c <_free_r+0x54>
 8001e28:	42a2      	cmp	r2, r4
 8001e2a:	d9fa      	bls.n	8001e22 <_free_r+0x4a>
 8001e2c:	6819      	ldr	r1, [r3, #0]
 8001e2e:	1858      	adds	r0, r3, r1
 8001e30:	42a0      	cmp	r0, r4
 8001e32:	d10b      	bne.n	8001e4c <_free_r+0x74>
 8001e34:	6820      	ldr	r0, [r4, #0]
 8001e36:	4401      	add	r1, r0
 8001e38:	1858      	adds	r0, r3, r1
 8001e3a:	4282      	cmp	r2, r0
 8001e3c:	6019      	str	r1, [r3, #0]
 8001e3e:	d1dd      	bne.n	8001dfc <_free_r+0x24>
 8001e40:	6810      	ldr	r0, [r2, #0]
 8001e42:	6852      	ldr	r2, [r2, #4]
 8001e44:	605a      	str	r2, [r3, #4]
 8001e46:	4401      	add	r1, r0
 8001e48:	6019      	str	r1, [r3, #0]
 8001e4a:	e7d7      	b.n	8001dfc <_free_r+0x24>
 8001e4c:	d902      	bls.n	8001e54 <_free_r+0x7c>
 8001e4e:	230c      	movs	r3, #12
 8001e50:	602b      	str	r3, [r5, #0]
 8001e52:	e7d3      	b.n	8001dfc <_free_r+0x24>
 8001e54:	6820      	ldr	r0, [r4, #0]
 8001e56:	1821      	adds	r1, r4, r0
 8001e58:	428a      	cmp	r2, r1
 8001e5a:	bf04      	itt	eq
 8001e5c:	6811      	ldreq	r1, [r2, #0]
 8001e5e:	6852      	ldreq	r2, [r2, #4]
 8001e60:	6062      	str	r2, [r4, #4]
 8001e62:	bf04      	itt	eq
 8001e64:	1809      	addeq	r1, r1, r0
 8001e66:	6021      	streq	r1, [r4, #0]
 8001e68:	605c      	str	r4, [r3, #4]
 8001e6a:	e7c7      	b.n	8001dfc <_free_r+0x24>
 8001e6c:	bd38      	pop	{r3, r4, r5, pc}
 8001e6e:	bf00      	nop
 8001e70:	20000090 	.word	0x20000090

08001e74 <_malloc_r>:
 8001e74:	b570      	push	{r4, r5, r6, lr}
 8001e76:	1ccd      	adds	r5, r1, #3
 8001e78:	f025 0503 	bic.w	r5, r5, #3
 8001e7c:	3508      	adds	r5, #8
 8001e7e:	2d0c      	cmp	r5, #12
 8001e80:	bf38      	it	cc
 8001e82:	250c      	movcc	r5, #12
 8001e84:	2d00      	cmp	r5, #0
 8001e86:	4606      	mov	r6, r0
 8001e88:	db01      	blt.n	8001e8e <_malloc_r+0x1a>
 8001e8a:	42a9      	cmp	r1, r5
 8001e8c:	d903      	bls.n	8001e96 <_malloc_r+0x22>
 8001e8e:	230c      	movs	r3, #12
 8001e90:	6033      	str	r3, [r6, #0]
 8001e92:	2000      	movs	r0, #0
 8001e94:	bd70      	pop	{r4, r5, r6, pc}
 8001e96:	f000 f89b 	bl	8001fd0 <__malloc_lock>
 8001e9a:	4a21      	ldr	r2, [pc, #132]	; (8001f20 <_malloc_r+0xac>)
 8001e9c:	6814      	ldr	r4, [r2, #0]
 8001e9e:	4621      	mov	r1, r4
 8001ea0:	b991      	cbnz	r1, 8001ec8 <_malloc_r+0x54>
 8001ea2:	4c20      	ldr	r4, [pc, #128]	; (8001f24 <_malloc_r+0xb0>)
 8001ea4:	6823      	ldr	r3, [r4, #0]
 8001ea6:	b91b      	cbnz	r3, 8001eb0 <_malloc_r+0x3c>
 8001ea8:	4630      	mov	r0, r6
 8001eaa:	f000 f83d 	bl	8001f28 <_sbrk_r>
 8001eae:	6020      	str	r0, [r4, #0]
 8001eb0:	4629      	mov	r1, r5
 8001eb2:	4630      	mov	r0, r6
 8001eb4:	f000 f838 	bl	8001f28 <_sbrk_r>
 8001eb8:	1c43      	adds	r3, r0, #1
 8001eba:	d124      	bne.n	8001f06 <_malloc_r+0x92>
 8001ebc:	230c      	movs	r3, #12
 8001ebe:	6033      	str	r3, [r6, #0]
 8001ec0:	4630      	mov	r0, r6
 8001ec2:	f000 f886 	bl	8001fd2 <__malloc_unlock>
 8001ec6:	e7e4      	b.n	8001e92 <_malloc_r+0x1e>
 8001ec8:	680b      	ldr	r3, [r1, #0]
 8001eca:	1b5b      	subs	r3, r3, r5
 8001ecc:	d418      	bmi.n	8001f00 <_malloc_r+0x8c>
 8001ece:	2b0b      	cmp	r3, #11
 8001ed0:	d90f      	bls.n	8001ef2 <_malloc_r+0x7e>
 8001ed2:	600b      	str	r3, [r1, #0]
 8001ed4:	50cd      	str	r5, [r1, r3]
 8001ed6:	18cc      	adds	r4, r1, r3
 8001ed8:	4630      	mov	r0, r6
 8001eda:	f000 f87a 	bl	8001fd2 <__malloc_unlock>
 8001ede:	f104 000b 	add.w	r0, r4, #11
 8001ee2:	1d23      	adds	r3, r4, #4
 8001ee4:	f020 0007 	bic.w	r0, r0, #7
 8001ee8:	1ac3      	subs	r3, r0, r3
 8001eea:	d0d3      	beq.n	8001e94 <_malloc_r+0x20>
 8001eec:	425a      	negs	r2, r3
 8001eee:	50e2      	str	r2, [r4, r3]
 8001ef0:	e7d0      	b.n	8001e94 <_malloc_r+0x20>
 8001ef2:	428c      	cmp	r4, r1
 8001ef4:	684b      	ldr	r3, [r1, #4]
 8001ef6:	bf16      	itet	ne
 8001ef8:	6063      	strne	r3, [r4, #4]
 8001efa:	6013      	streq	r3, [r2, #0]
 8001efc:	460c      	movne	r4, r1
 8001efe:	e7eb      	b.n	8001ed8 <_malloc_r+0x64>
 8001f00:	460c      	mov	r4, r1
 8001f02:	6849      	ldr	r1, [r1, #4]
 8001f04:	e7cc      	b.n	8001ea0 <_malloc_r+0x2c>
 8001f06:	1cc4      	adds	r4, r0, #3
 8001f08:	f024 0403 	bic.w	r4, r4, #3
 8001f0c:	42a0      	cmp	r0, r4
 8001f0e:	d005      	beq.n	8001f1c <_malloc_r+0xa8>
 8001f10:	1a21      	subs	r1, r4, r0
 8001f12:	4630      	mov	r0, r6
 8001f14:	f000 f808 	bl	8001f28 <_sbrk_r>
 8001f18:	3001      	adds	r0, #1
 8001f1a:	d0cf      	beq.n	8001ebc <_malloc_r+0x48>
 8001f1c:	6025      	str	r5, [r4, #0]
 8001f1e:	e7db      	b.n	8001ed8 <_malloc_r+0x64>
 8001f20:	20000090 	.word	0x20000090
 8001f24:	20000094 	.word	0x20000094

08001f28 <_sbrk_r>:
 8001f28:	b538      	push	{r3, r4, r5, lr}
 8001f2a:	4c06      	ldr	r4, [pc, #24]	; (8001f44 <_sbrk_r+0x1c>)
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	4605      	mov	r5, r0
 8001f30:	4608      	mov	r0, r1
 8001f32:	6023      	str	r3, [r4, #0]
 8001f34:	f7fe fa1e 	bl	8000374 <_sbrk>
 8001f38:	1c43      	adds	r3, r0, #1
 8001f3a:	d102      	bne.n	8001f42 <_sbrk_r+0x1a>
 8001f3c:	6823      	ldr	r3, [r4, #0]
 8001f3e:	b103      	cbz	r3, 8001f42 <_sbrk_r+0x1a>
 8001f40:	602b      	str	r3, [r5, #0]
 8001f42:	bd38      	pop	{r3, r4, r5, pc}
 8001f44:	20000098 	.word	0x20000098

08001f48 <_raise_r>:
 8001f48:	291f      	cmp	r1, #31
 8001f4a:	b538      	push	{r3, r4, r5, lr}
 8001f4c:	4604      	mov	r4, r0
 8001f4e:	460d      	mov	r5, r1
 8001f50:	d904      	bls.n	8001f5c <_raise_r+0x14>
 8001f52:	2316      	movs	r3, #22
 8001f54:	6003      	str	r3, [r0, #0]
 8001f56:	f04f 30ff 	mov.w	r0, #4294967295
 8001f5a:	bd38      	pop	{r3, r4, r5, pc}
 8001f5c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8001f5e:	b112      	cbz	r2, 8001f66 <_raise_r+0x1e>
 8001f60:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8001f64:	b94b      	cbnz	r3, 8001f7a <_raise_r+0x32>
 8001f66:	4620      	mov	r0, r4
 8001f68:	f000 f830 	bl	8001fcc <_getpid_r>
 8001f6c:	462a      	mov	r2, r5
 8001f6e:	4601      	mov	r1, r0
 8001f70:	4620      	mov	r0, r4
 8001f72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001f76:	f000 b817 	b.w	8001fa8 <_kill_r>
 8001f7a:	2b01      	cmp	r3, #1
 8001f7c:	d00a      	beq.n	8001f94 <_raise_r+0x4c>
 8001f7e:	1c59      	adds	r1, r3, #1
 8001f80:	d103      	bne.n	8001f8a <_raise_r+0x42>
 8001f82:	2316      	movs	r3, #22
 8001f84:	6003      	str	r3, [r0, #0]
 8001f86:	2001      	movs	r0, #1
 8001f88:	e7e7      	b.n	8001f5a <_raise_r+0x12>
 8001f8a:	2400      	movs	r4, #0
 8001f8c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8001f90:	4628      	mov	r0, r5
 8001f92:	4798      	blx	r3
 8001f94:	2000      	movs	r0, #0
 8001f96:	e7e0      	b.n	8001f5a <_raise_r+0x12>

08001f98 <raise>:
 8001f98:	4b02      	ldr	r3, [pc, #8]	; (8001fa4 <raise+0xc>)
 8001f9a:	4601      	mov	r1, r0
 8001f9c:	6818      	ldr	r0, [r3, #0]
 8001f9e:	f7ff bfd3 	b.w	8001f48 <_raise_r>
 8001fa2:	bf00      	nop
 8001fa4:	20000000 	.word	0x20000000

08001fa8 <_kill_r>:
 8001fa8:	b538      	push	{r3, r4, r5, lr}
 8001faa:	4c07      	ldr	r4, [pc, #28]	; (8001fc8 <_kill_r+0x20>)
 8001fac:	2300      	movs	r3, #0
 8001fae:	4605      	mov	r5, r0
 8001fb0:	4608      	mov	r0, r1
 8001fb2:	4611      	mov	r1, r2
 8001fb4:	6023      	str	r3, [r4, #0]
 8001fb6:	f7fe f9c2 	bl	800033e <_kill>
 8001fba:	1c43      	adds	r3, r0, #1
 8001fbc:	d102      	bne.n	8001fc4 <_kill_r+0x1c>
 8001fbe:	6823      	ldr	r3, [r4, #0]
 8001fc0:	b103      	cbz	r3, 8001fc4 <_kill_r+0x1c>
 8001fc2:	602b      	str	r3, [r5, #0]
 8001fc4:	bd38      	pop	{r3, r4, r5, pc}
 8001fc6:	bf00      	nop
 8001fc8:	20000098 	.word	0x20000098

08001fcc <_getpid_r>:
 8001fcc:	f7fe b9b0 	b.w	8000330 <_getpid>

08001fd0 <__malloc_lock>:
 8001fd0:	4770      	bx	lr

08001fd2 <__malloc_unlock>:
 8001fd2:	4770      	bx	lr

08001fd4 <_init>:
 8001fd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fd6:	bf00      	nop
 8001fd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001fda:	bc08      	pop	{r3}
 8001fdc:	469e      	mov	lr, r3
 8001fde:	4770      	bx	lr

08001fe0 <_fini>:
 8001fe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fe2:	bf00      	nop
 8001fe4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001fe6:	bc08      	pop	{r3}
 8001fe8:	469e      	mov	lr, r3
 8001fea:	4770      	bx	lr
