
004_SPI_driver_CPP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b80  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000228  08004d48  08004d48  00014d48  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f70  08004f70  000201d0  2**0
                  CONTENTS
  4 .ARM          00000000  08004f70  08004f70  000201d0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004f70  08004f70  000201d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004f70  08004f70  00014f70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004f74  08004f74  00014f74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d0  20000000  08004f78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000003c  200001d0  08005148  000201d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000020c  08005148  0002020c  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  000201d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000146af  00000000  00000000  000201fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000024d8  00000000  00000000  000348a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000006f0  00000000  00000000  00036d88  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000688  00000000  00000000  00037478  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00006aaa  00000000  00000000  00037b00  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000653f  00000000  00000000  0003e5aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000179c3  00000000  00000000  00044ae9  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0005c4ac  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a58  00000000  00000000  0005c528  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	200001d0 	.word	0x200001d0
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08004d30 	.word	0x08004d30

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	200001d4 	.word	0x200001d4
 8000204:	08004d30 	.word	0x08004d30

08000208 <strlen>:
 8000208:	4603      	mov	r3, r0
 800020a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020e:	2a00      	cmp	r2, #0
 8000210:	d1fb      	bne.n	800020a <strlen+0x2>
 8000212:	1a18      	subs	r0, r3, r0
 8000214:	3801      	subs	r0, #1
 8000216:	4770      	bx	lr

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000356:	f1a4 0401 	sub.w	r4, r4, #1
 800035a:	d1e9      	bne.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_dcmpun>:
 8000ac4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x10>
 8000ace:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad2:	d10a      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ad4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000adc:	d102      	bne.n	8000ae4 <__aeabi_dcmpun+0x20>
 8000ade:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae2:	d102      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	f04f 0001 	mov.w	r0, #1
 8000aee:	4770      	bx	lr

08000af0 <__aeabi_d2iz>:
 8000af0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000af8:	d215      	bcs.n	8000b26 <__aeabi_d2iz+0x36>
 8000afa:	d511      	bpl.n	8000b20 <__aeabi_d2iz+0x30>
 8000afc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b00:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b04:	d912      	bls.n	8000b2c <__aeabi_d2iz+0x3c>
 8000b06:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b0a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b0e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b12:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b16:	fa23 f002 	lsr.w	r0, r3, r2
 8000b1a:	bf18      	it	ne
 8000b1c:	4240      	negne	r0, r0
 8000b1e:	4770      	bx	lr
 8000b20:	f04f 0000 	mov.w	r0, #0
 8000b24:	4770      	bx	lr
 8000b26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b2a:	d105      	bne.n	8000b38 <__aeabi_d2iz+0x48>
 8000b2c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b30:	bf08      	it	eq
 8000b32:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop

08000b40 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8000b40:	b480      	push	{r7}
 8000b42:	b083      	sub	sp, #12
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
 8000b48:	6039      	str	r1, [r7, #0]
 8000b4a:	683b      	ldr	r3, [r7, #0]
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	370c      	adds	r7, #12
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bc80      	pop	{r7}
 8000b54:	4770      	bx	lr

08000b56 <_ZNSt9_Any_data9_M_accessEv>:
    void (_Undefined_class::*_M_member_pointer)();
  };

  union [[gnu::may_alias]] _Any_data
  {
    void*       _M_access()       { return &_M_pod_data[0]; }
 8000b56:	b480      	push	{r7}
 8000b58:	b083      	sub	sp, #12
 8000b5a:	af00      	add	r7, sp, #0
 8000b5c:	6078      	str	r0, [r7, #4]
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	4618      	mov	r0, r3
 8000b62:	370c      	adds	r7, #12
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bc80      	pop	{r7}
 8000b68:	4770      	bx	lr

08000b6a <_ZNKSt9_Any_data9_M_accessEv>:
    const void* _M_access() const { return &_M_pod_data[0]; }
 8000b6a:	b480      	push	{r7}
 8000b6c:	b083      	sub	sp, #12
 8000b6e:	af00      	add	r7, sp, #0
 8000b70:	6078      	str	r0, [r7, #4]
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	4618      	mov	r0, r3
 8000b76:	370c      	adds	r7, #12
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bc80      	pop	{r7}
 8000b7c:	4770      	bx	lr

08000b7e <_ZNSt14_Function_baseC1Ev>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
 8000b7e:	b480      	push	{r7}
 8000b80:	b083      	sub	sp, #12
 8000b82:	af00      	add	r7, sp, #0
 8000b84:	6078      	str	r0, [r7, #4]
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	2200      	movs	r2, #0
 8000b8a:	609a      	str	r2, [r3, #8]
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	4618      	mov	r0, r3
 8000b90:	370c      	adds	r7, #12
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bc80      	pop	{r7}
 8000b96:	4770      	bx	lr

08000b98 <_ZNSt14_Function_baseD1Ev>:

    ~_Function_base()
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b082      	sub	sp, #8
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
    {
      if (_M_manager)
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	689b      	ldr	r3, [r3, #8]
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d005      	beq.n	8000bb4 <_ZNSt14_Function_baseD1Ev+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	689b      	ldr	r3, [r3, #8]
 8000bac:	6878      	ldr	r0, [r7, #4]
 8000bae:	6879      	ldr	r1, [r7, #4]
 8000bb0:	2203      	movs	r2, #3
 8000bb2:	4798      	blx	r3
    }
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	3708      	adds	r7, #8
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}

08000bbe <_ZNSt8functionIFhhPhmEED1Ev>:
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8000bbe:	b580      	push	{r7, lr}
 8000bc0:	b082      	sub	sp, #8
 8000bc2:	af00      	add	r7, sp, #0
 8000bc4:	6078      	str	r0, [r7, #4]
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f7ff ffe5 	bl	8000b98 <_ZNSt14_Function_baseD1Ev>
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	3708      	adds	r7, #8
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}

08000bd8 <_ZNSt8functionIFhhPKhmEED1Ev>:
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b082      	sub	sp, #8
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	4618      	mov	r0, r3
 8000be4:	f7ff ffd8 	bl	8000b98 <_ZNSt14_Function_baseD1Ev>
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	4618      	mov	r0, r3
 8000bec:	3708      	adds	r7, #8
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}
	...

08000bf4 <_Z13user_spi_readhPhm>:
	for(int i = 0; i < 25000; ++i) {

	}
}

u8 user_spi_read (const u8 reg_addr, u8 *reg_data, u32 len) {
 8000bf4:	b5b0      	push	{r4, r5, r7, lr}
 8000bf6:	b08e      	sub	sp, #56	; 0x38
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	60b9      	str	r1, [r7, #8]
 8000bfe:	607a      	str	r2, [r7, #4]
 8000c00:	73fb      	strb	r3, [r7, #15]
    vector<u8> txBuffer(len + 1, 0);
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	1c5c      	adds	r4, r3, #1
 8000c06:	2300      	movs	r3, #0
 8000c08:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8000c0c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c10:	4618      	mov	r0, r3
 8000c12:	f000 f94b 	bl	8000eac <_ZNSaIhEC1Ev>
 8000c16:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c1a:	f107 022b 	add.w	r2, r7, #43	; 0x2b
 8000c1e:	f107 001c 	add.w	r0, r7, #28
 8000c22:	4621      	mov	r1, r4
 8000c24:	f000 f95a 	bl	8000edc <_ZNSt6vectorIhSaIhEEC1EjRKhRKS0_>
 8000c28:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f000 f949 	bl	8000ec4 <_ZNSaIhED1Ev>
    vector<u8> rxBuffer(len + 1, 0);
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	1c5c      	adds	r4, r3, #1
 8000c36:	2300      	movs	r3, #0
 8000c38:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8000c3c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000c40:	4618      	mov	r0, r3
 8000c42:	f000 f933 	bl	8000eac <_ZNSaIhEC1Ev>
 8000c46:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000c4a:	f107 022f 	add.w	r2, r7, #47	; 0x2f
 8000c4e:	f107 0010 	add.w	r0, r7, #16
 8000c52:	4621      	mov	r1, r4
 8000c54:	f000 f942 	bl	8000edc <_ZNSt6vectorIhSaIhEEC1EjRKhRKS0_>
 8000c58:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f000 f931 	bl	8000ec4 <_ZNSaIhED1Ev>
    txBuffer[0] = reg_addr;
 8000c62:	f107 031c 	add.w	r3, r7, #28
 8000c66:	2100      	movs	r1, #0
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f000 f969 	bl	8000f40 <_ZNSt6vectorIhSaIhEEixEj>
 8000c6e:	4602      	mov	r2, r0
 8000c70:	7bfb      	ldrb	r3, [r7, #15]
 8000c72:	7013      	strb	r3, [r2, #0]

    PB6->GPIO_WriteToOutputPin(RESET);
 8000c74:	4b24      	ldr	r3, [pc, #144]	; (8000d08 <_Z13user_spi_readhPhm+0x114>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	2100      	movs	r1, #0
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	f001 fbca 	bl	8002414 <_ZN12GPIO_Handler21GPIO_WriteToOutputPinEh>

    SPI1_Handler->SPI_SendAndReceiveData(&txBuffer[0], &rxBuffer[0], len + 1);
 8000c80:	4b22      	ldr	r3, [pc, #136]	; (8000d0c <_Z13user_spi_readhPhm+0x118>)
 8000c82:	681c      	ldr	r4, [r3, #0]
 8000c84:	f107 031c 	add.w	r3, r7, #28
 8000c88:	2100      	movs	r1, #0
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f000 f958 	bl	8000f40 <_ZNSt6vectorIhSaIhEEixEj>
 8000c90:	4605      	mov	r5, r0
 8000c92:	f107 0310 	add.w	r3, r7, #16
 8000c96:	2100      	movs	r1, #0
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f000 f951 	bl	8000f40 <_ZNSt6vectorIhSaIhEEixEj>
 8000c9e:	4602      	mov	r2, r0
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	3301      	adds	r3, #1
 8000ca4:	4629      	mov	r1, r5
 8000ca6:	4620      	mov	r0, r4
 8000ca8:	f001 fea6 	bl	80029f8 <_ZN11SPI_Handler22SPI_SendAndReceiveDataEPhS0_m>

    PB6->GPIO_WriteToOutputPin(SET);
 8000cac:	4b16      	ldr	r3, [pc, #88]	; (8000d08 <_Z13user_spi_readhPhm+0x114>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	2101      	movs	r1, #1
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f001 fbae 	bl	8002414 <_ZN12GPIO_Handler21GPIO_WriteToOutputPinEh>

    // copy to reg_data
    for(u32 i = 0; i < len; ++i) {
 8000cb8:	2300      	movs	r3, #0
 8000cba:	637b      	str	r3, [r7, #52]	; 0x34
 8000cbc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	429a      	cmp	r2, r3
 8000cc2:	d211      	bcs.n	8000ce8 <_Z13user_spi_readhPhm+0xf4>
        reg_data[i] = rxBuffer[i + 1];
 8000cc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000cc6:	1c5a      	adds	r2, r3, #1
 8000cc8:	f107 0310 	add.w	r3, r7, #16
 8000ccc:	4611      	mov	r1, r2
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f000 f936 	bl	8000f40 <_ZNSt6vectorIhSaIhEEixEj>
 8000cd4:	4601      	mov	r1, r0
 8000cd6:	68ba      	ldr	r2, [r7, #8]
 8000cd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000cda:	4413      	add	r3, r2
 8000cdc:	780a      	ldrb	r2, [r1, #0]
 8000cde:	701a      	strb	r2, [r3, #0]
    for(u32 i = 0; i < len; ++i) {
 8000ce0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ce2:	3301      	adds	r3, #1
 8000ce4:	637b      	str	r3, [r7, #52]	; 0x34
 8000ce6:	e7e9      	b.n	8000cbc <_Z13user_spi_readhPhm+0xc8>
    }
    return 0;
 8000ce8:	2400      	movs	r4, #0
    vector<u8> rxBuffer(len + 1, 0);
 8000cea:	f107 0310 	add.w	r3, r7, #16
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f000 f90b 	bl	8000f0a <_ZNSt6vectorIhSaIhEED1Ev>
    vector<u8> txBuffer(len + 1, 0);
 8000cf4:	f107 031c 	add.w	r3, r7, #28
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f000 f906 	bl	8000f0a <_ZNSt6vectorIhSaIhEED1Ev>
    return 0;
 8000cfe:	4623      	mov	r3, r4
}
 8000d00:	4618      	mov	r0, r3
 8000d02:	3738      	adds	r7, #56	; 0x38
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bdb0      	pop	{r4, r5, r7, pc}
 8000d08:	200001f0 	.word	0x200001f0
 8000d0c:	200001ec 	.word	0x200001ec

08000d10 <_Z14user_spi_writehPKhm>:

u8 user_spi_write(const u8 reg_addr, const u8 *reg_data, u32 len) {
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b08c      	sub	sp, #48	; 0x30
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	4603      	mov	r3, r0
 8000d18:	60b9      	str	r1, [r7, #8]
 8000d1a:	607a      	str	r2, [r7, #4]
 8000d1c:	73fb      	strb	r3, [r7, #15]
    u8 txBuffer[28] = {};
 8000d1e:	f107 0310 	add.w	r3, r7, #16
 8000d22:	2200      	movs	r2, #0
 8000d24:	601a      	str	r2, [r3, #0]
 8000d26:	605a      	str	r2, [r3, #4]
 8000d28:	609a      	str	r2, [r3, #8]
 8000d2a:	60da      	str	r2, [r3, #12]
 8000d2c:	611a      	str	r2, [r3, #16]
 8000d2e:	615a      	str	r2, [r3, #20]
 8000d30:	619a      	str	r2, [r3, #24]
    txBuffer[0] = reg_addr;
 8000d32:	7bfb      	ldrb	r3, [r7, #15]
 8000d34:	743b      	strb	r3, [r7, #16]
    for(u32 i = 0; i < len; ++i) {
 8000d36:	2300      	movs	r3, #0
 8000d38:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000d3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	429a      	cmp	r2, r3
 8000d40:	d20e      	bcs.n	8000d60 <_Z14user_spi_writehPKhm+0x50>
        txBuffer[i + 1] = reg_data[i];
 8000d42:	68ba      	ldr	r2, [r7, #8]
 8000d44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d46:	441a      	add	r2, r3
 8000d48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d4a:	3301      	adds	r3, #1
 8000d4c:	7812      	ldrb	r2, [r2, #0]
 8000d4e:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8000d52:	440b      	add	r3, r1
 8000d54:	f803 2c20 	strb.w	r2, [r3, #-32]
    for(u32 i = 0; i < len; ++i) {
 8000d58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d5a:	3301      	adds	r3, #1
 8000d5c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000d5e:	e7ec      	b.n	8000d3a <_Z14user_spi_writehPKhm+0x2a>
    }

    PB6->GPIO_WriteToOutputPin(RESET);
 8000d60:	4b0c      	ldr	r3, [pc, #48]	; (8000d94 <_Z14user_spi_writehPKhm+0x84>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	2100      	movs	r1, #0
 8000d66:	4618      	mov	r0, r3
 8000d68:	f001 fb54 	bl	8002414 <_ZN12GPIO_Handler21GPIO_WriteToOutputPinEh>
    SPI1_Handler->SPI_SendData(&txBuffer[0], len + 1);
 8000d6c:	4b0a      	ldr	r3, [pc, #40]	; (8000d98 <_Z14user_spi_writehPKhm+0x88>)
 8000d6e:	6818      	ldr	r0, [r3, #0]
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	1c5a      	adds	r2, r3, #1
 8000d74:	f107 0310 	add.w	r3, r7, #16
 8000d78:	4619      	mov	r1, r3
 8000d7a:	f001 fddf 	bl	800293c <_ZN11SPI_Handler12SPI_SendDataEPKhm>
    PB6->GPIO_WriteToOutputPin(SET);
 8000d7e:	4b05      	ldr	r3, [pc, #20]	; (8000d94 <_Z14user_spi_writehPKhm+0x84>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	2101      	movs	r1, #1
 8000d84:	4618      	mov	r0, r3
 8000d86:	f001 fb45 	bl	8002414 <_ZN12GPIO_Handler21GPIO_WriteToOutputPinEh>

    return 0;
 8000d8a:	2300      	movs	r3, #0
}
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	3730      	adds	r7, #48	; 0x30
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	200001f0 	.word	0x200001f0
 8000d98:	200001ec 	.word	0x200001ec

08000d9c <main>:
    cout << fixed << setprecision(2) << temp << " deg C, " <<  pres << " hPa, " <<  hum << " % " << endl;
#endif
}

int main(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b082      	sub	sp, #8
 8000da0:	af00      	add	r7, sp, #0
    InitilizePeripheral();
 8000da2:	f000 f80b 	bl	8000dbc <_Z19InitilizePeripheralv>
    int8_t rslt = BME280_OK;
 8000da6:	2300      	movs	r3, #0
 8000da8:	71fb      	strb	r3, [r7, #7]

    bme280->testFunctionPtr();
 8000daa:	4b03      	ldr	r3, [pc, #12]	; (8000db8 <main+0x1c>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	4618      	mov	r0, r3
 8000db0:	f000 fe05 	bl	80019be <_ZN17BMESensor_Handler15testFunctionPtrEv>
//
//
//
//    SPI1_Handler->SPI_PeripheralControl(DISABLE);
    static_cast<void>(rslt);
    while(1);
 8000db4:	e7fe      	b.n	8000db4 <main+0x18>
 8000db6:	bf00      	nop
 8000db8:	200001f4 	.word	0x200001f4

08000dbc <_Z19InitilizePeripheralv>:
    return 0;
}

void InitilizePeripheral(void) {
 8000dbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000dbe:	b08f      	sub	sp, #60	; 0x3c
 8000dc0:	af06      	add	r7, sp, #24
                                    SPI_BUS_CONFIG_FD,
                                    SPI_SCLK_SPEED_DIV32,
                                    SPI_DFF_8BITS,
                                    SPI_CPOL_LOW,
                                    SPI_CPHA_LOW,
                                    SPI_SSM_EN);
 8000dc2:	2030      	movs	r0, #48	; 0x30
 8000dc4:	f002 f9a3 	bl	800310e <_Znwj>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	461c      	mov	r4, r3
 8000dcc:	2301      	movs	r3, #1
 8000dce:	9304      	str	r3, [sp, #16]
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	9303      	str	r3, [sp, #12]
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	9302      	str	r3, [sp, #8]
 8000dd8:	2300      	movs	r3, #0
 8000dda:	9301      	str	r3, [sp, #4]
 8000ddc:	2304      	movs	r3, #4
 8000dde:	9300      	str	r3, [sp, #0]
 8000de0:	2301      	movs	r3, #1
 8000de2:	2201      	movs	r2, #1
 8000de4:	4924      	ldr	r1, [pc, #144]	; (8000e78 <_Z19InitilizePeripheralv+0xbc>)
 8000de6:	4620      	mov	r0, r4
 8000de8:	f001 fbf1 	bl	80025ce <_ZN11SPI_HandlerC1EP12SPI_RegDef_thhhhhhh>
    SPI1_Handler = new SPI_Handler(SPI1,
 8000dec:	4b23      	ldr	r3, [pc, #140]	; (8000e7c <_Z19InitilizePeripheralv+0xc0>)
 8000dee:	601c      	str	r4, [r3, #0]
    PB6 = new GPIO_Handler(GPIOB,
                           GPIO_PIN_NO_6,
                           GPIO_MODE_OUT,
                           GPIO_SPEED_FAST,
                           GPIO_OP_TYPE_PP,
                           GPIO_NO_PUPD);
 8000df0:	200c      	movs	r0, #12
 8000df2:	f002 f98c 	bl	800310e <_Znwj>
 8000df6:	4603      	mov	r3, r0
 8000df8:	461c      	mov	r4, r3
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	9304      	str	r3, [sp, #16]
 8000dfe:	230f      	movs	r3, #15
 8000e00:	9303      	str	r3, [sp, #12]
 8000e02:	2300      	movs	r3, #0
 8000e04:	9302      	str	r3, [sp, #8]
 8000e06:	2300      	movs	r3, #0
 8000e08:	9301      	str	r3, [sp, #4]
 8000e0a:	2302      	movs	r3, #2
 8000e0c:	9300      	str	r3, [sp, #0]
 8000e0e:	2301      	movs	r3, #1
 8000e10:	2206      	movs	r2, #6
 8000e12:	491b      	ldr	r1, [pc, #108]	; (8000e80 <_Z19InitilizePeripheralv+0xc4>)
 8000e14:	4620      	mov	r0, r4
 8000e16:	f001 f82b 	bl	8001e70 <_ZN12GPIO_HandlerC1EP13GPIO_RegDef_thhhhhhh>
    PB6 = new GPIO_Handler(GPIOB,
 8000e1a:	4b1a      	ldr	r3, [pc, #104]	; (8000e84 <_Z19InitilizePeripheralv+0xc8>)
 8000e1c:	601c      	str	r4, [r3, #0]
    PB6->GPIO_WriteToOutputPin(SET);
 8000e1e:	4b19      	ldr	r3, [pc, #100]	; (8000e84 <_Z19InitilizePeripheralv+0xc8>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	2101      	movs	r1, #1
 8000e24:	4618      	mov	r0, r3
 8000e26:	f001 faf5 	bl	8002414 <_ZN12GPIO_Handler21GPIO_WriteToOutputPinEh>

    bme280 = new BMESensor_Handler(user_spi_read,
 8000e2a:	463b      	mov	r3, r7
 8000e2c:	4916      	ldr	r1, [pc, #88]	; (8000e88 <_Z19InitilizePeripheralv+0xcc>)
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f000 f89e 	bl	8000f70 <_ZNSt8functionIFhhPhmEEC1IPS1_vvEET_>
 8000e34:	463d      	mov	r5, r7
 8000e36:	f107 0310 	add.w	r3, r7, #16
 8000e3a:	4914      	ldr	r1, [pc, #80]	; (8000e8c <_Z19InitilizePeripheralv+0xd0>)
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f000 f8cb 	bl	8000fd8 <_ZNSt8functionIFhhPKhmEEC1IPS2_vvEET_>
 8000e42:	f107 0610 	add.w	r6, r7, #16
                                   user_spi_write);
 8000e46:	2038      	movs	r0, #56	; 0x38
 8000e48:	f002 f961 	bl	800310e <_Znwj>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	461c      	mov	r4, r3
 8000e50:	4632      	mov	r2, r6
 8000e52:	4629      	mov	r1, r5
 8000e54:	4620      	mov	r0, r4
 8000e56:	f000 fd4c 	bl	80018f2 <_ZN17BMESensor_HandlerC1ESt8functionIFhhPhmEES0_IFhhPKhmEE>
    bme280 = new BMESensor_Handler(user_spi_read,
 8000e5a:	4b0d      	ldr	r3, [pc, #52]	; (8000e90 <_Z19InitilizePeripheralv+0xd4>)
 8000e5c:	601c      	str	r4, [r3, #0]
 8000e5e:	f107 0310 	add.w	r3, r7, #16
 8000e62:	4618      	mov	r0, r3
 8000e64:	f7ff feb8 	bl	8000bd8 <_ZNSt8functionIFhhPKhmEED1Ev>
 8000e68:	463b      	mov	r3, r7
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f7ff fea7 	bl	8000bbe <_ZNSt8functionIFhhPhmEED1Ev>
}
 8000e70:	bf00      	nop
 8000e72:	3724      	adds	r7, #36	; 0x24
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e78:	40013000 	.word	0x40013000
 8000e7c:	200001ec 	.word	0x200001ec
 8000e80:	40020400 	.word	0x40020400
 8000e84:	200001f0 	.word	0x200001f0
 8000e88:	08000bf5 	.word	0x08000bf5
 8000e8c:	08000d11 	.word	0x08000d11
 8000e90:	200001f4 	.word	0x200001f4

08000e94 <SPI1_IRQHandler>:

extern "C" {
    void SPI1_IRQHandler(void) {
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0
        // handle the interrupt
        SPI1_Handler->SPI_IRQHandling();
 8000e98:	4b03      	ldr	r3, [pc, #12]	; (8000ea8 <SPI1_IRQHandler+0x14>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f001 fe71 	bl	8002b84 <_ZN11SPI_Handler15SPI_IRQHandlingEv>
    }
 8000ea2:	bf00      	nop
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	200001ec 	.word	0x200001ec

08000eac <_ZNSaIhEC1Ev>:
      typedef true_type propagate_on_container_move_assignment;

      typedef true_type is_always_equal;
#endif

      allocator() throw() { }
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
 8000eb4:	6878      	ldr	r0, [r7, #4]
 8000eb6:	f000 f8b9 	bl	800102c <_ZN9__gnu_cxx13new_allocatorIhEC1Ev>
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	3708      	adds	r7, #8
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}

08000ec4 <_ZNSaIhED1Ev>:
      : __allocator_base<_Tp>(__a) { }

      template<typename _Tp1>
	allocator(const allocator<_Tp1>&) throw() { }

      ~allocator() throw() { }
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
 8000ecc:	6878      	ldr	r0, [r7, #4]
 8000ece:	f000 f8b7 	bl	8001040 <_ZN9__gnu_cxx13new_allocatorIhED1Ev>
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	3708      	adds	r7, #8
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}

08000edc <_ZNSt6vectorIhSaIhEEC1EjRKhRKS0_>:
       *  @param  __value  An element to copy.
       *  @param  __a  An allocator.
       *
       *  This constructor fills the %vector with @a __n copies of @a __value.
       */
      vector(size_type __n, const value_type& __value,
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b084      	sub	sp, #16
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	60f8      	str	r0, [r7, #12]
 8000ee4:	60b9      	str	r1, [r7, #8]
 8000ee6:	607a      	str	r2, [r7, #4]
 8000ee8:	603b      	str	r3, [r7, #0]
	     const allocator_type& __a = allocator_type())
      : _Base(__n, __a)
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	683a      	ldr	r2, [r7, #0]
 8000eee:	68b9      	ldr	r1, [r7, #8]
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f000 f8bb 	bl	800106c <_ZNSt12_Vector_baseIhSaIhEEC1EjRKS0_>
      { _M_fill_initialize(__n, __value); }
 8000ef6:	687a      	ldr	r2, [r7, #4]
 8000ef8:	68b9      	ldr	r1, [r7, #8]
 8000efa:	68f8      	ldr	r0, [r7, #12]
 8000efc:	f000 f8e3 	bl	80010c6 <_ZNSt6vectorIhSaIhEE18_M_fill_initializeEjRKh>
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	4618      	mov	r0, r3
 8000f04:	3710      	adds	r7, #16
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}

08000f0a <_ZNSt6vectorIhSaIhEED1Ev>:
       *  The dtor only erases the elements, and note that if the
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      ~vector() _GLIBCXX_NOEXCEPT
 8000f0a:	b5b0      	push	{r4, r5, r7, lr}
 8000f0c:	b082      	sub	sp, #8
 8000f0e:	af00      	add	r7, sp, #0
 8000f10:	6078      	str	r0, [r7, #4]
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681c      	ldr	r4, [r3, #0]
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator()); }
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f000 f8eb 	bl	80010f8 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8000f22:	4603      	mov	r3, r0
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8000f24:	461a      	mov	r2, r3
 8000f26:	4629      	mov	r1, r5
 8000f28:	4620      	mov	r0, r4
 8000f2a:	f000 f8ef 	bl	800110c <_ZSt8_DestroyIPhhEvT_S1_RSaIT0_E>
		      _M_get_Tp_allocator()); }
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	4618      	mov	r0, r3
 8000f32:	f000 f8af 	bl	8001094 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	4618      	mov	r0, r3
 8000f3a:	3708      	adds	r7, #8
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bdb0      	pop	{r4, r5, r7, pc}

08000f40 <_ZNSt6vectorIhSaIhEEixEj>:
       *  Note that data access with this operator is unchecked and
       *  out_of_range lookups are not defined. (For checked lookups
       *  see at().)
       */
      reference
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 8000f40:	b480      	push	{r7}
 8000f42:	b083      	sub	sp, #12
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
 8000f48:	6039      	str	r1, [r7, #0]
      {
	__glibcxx_requires_subscript(__n);
	return *(this->_M_impl._M_start + __n);
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681a      	ldr	r2, [r3, #0]
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	4413      	add	r3, r2
      }
 8000f52:	4618      	mov	r0, r3
 8000f54:	370c      	adds	r7, #12
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bc80      	pop	{r7}
 8000f5a:	4770      	bx	lr

08000f5c <_ZSt4moveIRPFhhPhmEEONSt16remove_referenceIT_E4typeEOS5_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8000f5c:	b480      	push	{r7}
 8000f5e:	b083      	sub	sp, #12
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	4618      	mov	r0, r3
 8000f68:	370c      	adds	r7, #12
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bc80      	pop	{r7}
 8000f6e:	4770      	bx	lr

08000f70 <_ZNSt8functionIFhhPhmEEC1IPS1_vvEET_>:
	}
    }

  template<typename _Res, typename... _ArgTypes>
    template<typename _Functor, typename, typename>
      function<_Res(_ArgTypes...)>::
 8000f70:	b590      	push	{r4, r7, lr}
 8000f72:	b083      	sub	sp, #12
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
 8000f78:	6039      	str	r1, [r7, #0]
      function(_Functor __f)
      : _Function_base()
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f7ff fdfe 	bl	8000b7e <_ZNSt14_Function_baseC1Ev>
      {
	typedef _Function_handler<_Res(_ArgTypes...), _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	4618      	mov	r0, r3
 8000f86:	f000 f8cf 	bl	8001128 <_ZNSt14_Function_base13_Base_managerIPFhhPhmEE21_M_not_empty_functionIS2_EEbPT_>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d00f      	beq.n	8000fb0 <_ZNSt8functionIFhhPhmEEC1IPS1_vvEET_+0x40>
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
 8000f90:	687c      	ldr	r4, [r7, #4]
 8000f92:	463b      	mov	r3, r7
 8000f94:	4618      	mov	r0, r3
 8000f96:	f7ff ffe1 	bl	8000f5c <_ZSt4moveIRPFhhPhmEEONSt16remove_referenceIT_E4typeEOS5_>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	4620      	mov	r0, r4
 8000fa0:	f000 f8d1 	bl	8001146 <_ZNSt14_Function_base13_Base_managerIPFhhPhmEE15_M_init_functorERSt9_Any_dataOS3_>
	    _M_invoker = &_My_handler::_M_invoke;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	4a05      	ldr	r2, [pc, #20]	; (8000fbc <_ZNSt8functionIFhhPhmEEC1IPS1_vvEET_+0x4c>)
 8000fa8:	60da      	str	r2, [r3, #12]
	    _M_manager = &_My_handler::_M_manager;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	4a04      	ldr	r2, [pc, #16]	; (8000fc0 <_ZNSt8functionIFhhPhmEEC1IPS1_vvEET_+0x50>)
 8000fae:	609a      	str	r2, [r3, #8]
	  }
      }
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	370c      	adds	r7, #12
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd90      	pop	{r4, r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	0800116b 	.word	0x0800116b
 8000fc0:	080011b3 	.word	0x080011b3

08000fc4 <_ZSt4moveIRPFhhPKhmEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 8000fc4:	b480      	push	{r7}
 8000fc6:	b083      	sub	sp, #12
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	4618      	mov	r0, r3
 8000fd0:	370c      	adds	r7, #12
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bc80      	pop	{r7}
 8000fd6:	4770      	bx	lr

08000fd8 <_ZNSt8functionIFhhPKhmEEC1IPS2_vvEET_>:
      function<_Res(_ArgTypes...)>::
 8000fd8:	b590      	push	{r4, r7, lr}
 8000fda:	b083      	sub	sp, #12
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
 8000fe0:	6039      	str	r1, [r7, #0]
      : _Function_base()
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f7ff fdca 	bl	8000b7e <_ZNSt14_Function_baseC1Ev>
	if (_My_handler::_M_not_empty_function(__f))
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	4618      	mov	r0, r3
 8000fee:	f000 f908 	bl	8001202 <_ZNSt14_Function_base13_Base_managerIPFhhPKhmEE21_M_not_empty_functionIS3_EEbPT_>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d00f      	beq.n	8001018 <_ZNSt8functionIFhhPKhmEEC1IPS2_vvEET_+0x40>
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
 8000ff8:	687c      	ldr	r4, [r7, #4]
 8000ffa:	463b      	mov	r3, r7
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f7ff ffe1 	bl	8000fc4 <_ZSt4moveIRPFhhPKhmEEONSt16remove_referenceIT_E4typeEOS6_>
 8001002:	4603      	mov	r3, r0
 8001004:	4619      	mov	r1, r3
 8001006:	4620      	mov	r0, r4
 8001008:	f000 f90a 	bl	8001220 <_ZNSt14_Function_base13_Base_managerIPFhhPKhmEE15_M_init_functorERSt9_Any_dataOS4_>
	    _M_invoker = &_My_handler::_M_invoke;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	4a05      	ldr	r2, [pc, #20]	; (8001024 <_ZNSt8functionIFhhPKhmEEC1IPS2_vvEET_+0x4c>)
 8001010:	60da      	str	r2, [r3, #12]
	    _M_manager = &_My_handler::_M_manager;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	4a04      	ldr	r2, [pc, #16]	; (8001028 <_ZNSt8functionIFhhPKhmEEC1IPS2_vvEET_+0x50>)
 8001016:	609a      	str	r2, [r3, #8]
      }
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	4618      	mov	r0, r3
 800101c:	370c      	adds	r7, #12
 800101e:	46bd      	mov	sp, r7
 8001020:	bd90      	pop	{r4, r7, pc}
 8001022:	bf00      	nop
 8001024:	08001245 	.word	0x08001245
 8001028:	0800128d 	.word	0x0800128d

0800102c <_ZN9__gnu_cxx13new_allocatorIhEC1Ev>:
      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 2103. propagate_on_container_move_assignment
      typedef std::true_type propagate_on_container_move_assignment;
#endif

      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800102c:	b480      	push	{r7}
 800102e:	b083      	sub	sp, #12
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	4618      	mov	r0, r3
 8001038:	370c      	adds	r7, #12
 800103a:	46bd      	mov	sp, r7
 800103c:	bc80      	pop	{r7}
 800103e:	4770      	bx	lr

08001040 <_ZN9__gnu_cxx13new_allocatorIhED1Ev>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }

      template<typename _Tp1>
	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8001040:	b480      	push	{r7}
 8001042:	b083      	sub	sp, #12
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	4618      	mov	r0, r3
 800104c:	370c      	adds	r7, #12
 800104e:	46bd      	mov	sp, r7
 8001050:	bc80      	pop	{r7}
 8001052:	4770      	bx	lr

08001054 <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implD1Ev>:
      struct _Vector_impl
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
 800105c:	6878      	ldr	r0, [r7, #4]
 800105e:	f7ff ff31 	bl	8000ec4 <_ZNSaIhED1Ev>
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	4618      	mov	r0, r3
 8001066:	3708      	adds	r7, #8
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}

0800106c <_ZNSt12_Vector_baseIhSaIhEEC1EjRKS0_>:
      _Vector_base(size_t __n, const allocator_type& __a)
 800106c:	b580      	push	{r7, lr}
 800106e:	b084      	sub	sp, #16
 8001070:	af00      	add	r7, sp, #0
 8001072:	60f8      	str	r0, [r7, #12]
 8001074:	60b9      	str	r1, [r7, #8]
 8001076:	607a      	str	r2, [r7, #4]
      : _M_impl(__a)
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	6879      	ldr	r1, [r7, #4]
 800107c:	4618      	mov	r0, r3
 800107e:	f000 f92d 	bl	80012dc <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implC1ERKS0_>
      { _M_create_storage(__n); }
 8001082:	68b9      	ldr	r1, [r7, #8]
 8001084:	68f8      	ldr	r0, [r7, #12]
 8001086:	f000 f940 	bl	800130a <_ZNSt12_Vector_baseIhSaIhEE17_M_create_storageEj>
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	4618      	mov	r0, r3
 800108e:	3710      	adds	r7, #16
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}

08001094 <_ZNSt12_Vector_baseIhSaIhEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	6819      	ldr	r1, [r3, #0]
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	689b      	ldr	r3, [r3, #8]
		      - this->_M_impl._M_start); }
 80010a4:	461a      	mov	r2, r3
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	1ad3      	subs	r3, r2, r3
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 80010ac:	461a      	mov	r2, r3
 80010ae:	6878      	ldr	r0, [r7, #4]
 80010b0:	f000 f945 	bl	800133e <_ZNSt12_Vector_baseIhSaIhEE13_M_deallocateEPhj>
		      - this->_M_impl._M_start); }
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	4618      	mov	r0, r3
 80010b8:	f7ff ffcc 	bl	8001054 <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implD1Ev>
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	4618      	mov	r0, r3
 80010c0:	3708      	adds	r7, #8
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}

080010c6 <_ZNSt6vectorIhSaIhEE18_M_fill_initializeEjRKh>:
	}

      // Called by the first initialize_dispatch above and by the
      // vector(n,value,a) constructor.
      void
      _M_fill_initialize(size_type __n, const value_type& __value)
 80010c6:	b590      	push	{r4, r7, lr}
 80010c8:	b085      	sub	sp, #20
 80010ca:	af00      	add	r7, sp, #0
 80010cc:	60f8      	str	r0, [r7, #12]
 80010ce:	60b9      	str	r1, [r7, #8]
 80010d0:	607a      	str	r2, [r7, #4]
      {
	this->_M_impl._M_finish =
	  std::__uninitialized_fill_n_a(this->_M_impl._M_start, __n, __value,
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	681c      	ldr	r4, [r3, #0]
					_M_get_Tp_allocator());
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	4618      	mov	r0, r3
 80010da:	f000 f80d 	bl	80010f8 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 80010de:	4603      	mov	r3, r0
	  std::__uninitialized_fill_n_a(this->_M_impl._M_start, __n, __value,
 80010e0:	687a      	ldr	r2, [r7, #4]
 80010e2:	68b9      	ldr	r1, [r7, #8]
 80010e4:	4620      	mov	r0, r4
 80010e6:	f000 f93d 	bl	8001364 <_ZSt24__uninitialized_fill_n_aIPhjhhET_S1_T0_RKT1_RSaIT2_E>
 80010ea:	4602      	mov	r2, r0
	this->_M_impl._M_finish =
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	605a      	str	r2, [r3, #4]
      }
 80010f0:	bf00      	nop
 80010f2:	3714      	adds	r7, #20
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd90      	pop	{r4, r7, pc}

080010f8 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 80010f8:	b480      	push	{r7}
 80010fa:	b083      	sub	sp, #12
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	4618      	mov	r0, r3
 8001104:	370c      	adds	r7, #12
 8001106:	46bd      	mov	sp, r7
 8001108:	bc80      	pop	{r7}
 800110a:	4770      	bx	lr

0800110c <_ZSt8_DestroyIPhhEvT_S1_RSaIT0_E>:
	__traits::destroy(__alloc, std::__addressof(*__first));
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 800110c:	b580      	push	{r7, lr}
 800110e:	b084      	sub	sp, #16
 8001110:	af00      	add	r7, sp, #0
 8001112:	60f8      	str	r0, [r7, #12]
 8001114:	60b9      	str	r1, [r7, #8]
 8001116:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 8001118:	68b9      	ldr	r1, [r7, #8]
 800111a:	68f8      	ldr	r0, [r7, #12]
 800111c:	f000 f933 	bl	8001386 <_ZSt8_DestroyIPhEvT_S1_>
    }
 8001120:	bf00      	nop
 8001122:	3710      	adds	r7, #16
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}

08001128 <_ZNSt14_Function_base13_Base_managerIPFhhPhmEE21_M_not_empty_functionIS2_EEbPT_>:
	  _M_not_empty_function(_Tp* __fp)
 8001128:	b480      	push	{r7}
 800112a:	b083      	sub	sp, #12
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
	  { return __fp != nullptr; }
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	2b00      	cmp	r3, #0
 8001134:	bf14      	ite	ne
 8001136:	2301      	movne	r3, #1
 8001138:	2300      	moveq	r3, #0
 800113a:	b2db      	uxtb	r3, r3
 800113c:	4618      	mov	r0, r3
 800113e:	370c      	adds	r7, #12
 8001140:	46bd      	mov	sp, r7
 8001142:	bc80      	pop	{r7}
 8001144:	4770      	bx	lr

08001146 <_ZNSt14_Function_base13_Base_managerIPFhhPhmEE15_M_init_functorERSt9_Any_dataOS3_>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f)
 8001146:	b590      	push	{r4, r7, lr}
 8001148:	b085      	sub	sp, #20
 800114a:	af00      	add	r7, sp, #0
 800114c:	6078      	str	r0, [r7, #4]
 800114e:	6039      	str	r1, [r7, #0]
	{ _M_init_functor(__functor, std::move(__f), _Local_storage()); }
 8001150:	6838      	ldr	r0, [r7, #0]
 8001152:	f7ff ff03 	bl	8000f5c <_ZSt4moveIRPFhhPhmEEONSt16remove_referenceIT_E4typeEOS5_>
 8001156:	4603      	mov	r3, r0
 8001158:	4622      	mov	r2, r4
 800115a:	4619      	mov	r1, r3
 800115c:	6878      	ldr	r0, [r7, #4]
 800115e:	f000 f91f 	bl	80013a0 <_ZNSt14_Function_base13_Base_managerIPFhhPhmEE15_M_init_functorERSt9_Any_dataOS3_St17integral_constantIbLb1EE>
 8001162:	bf00      	nop
 8001164:	3714      	adds	r7, #20
 8001166:	46bd      	mov	sp, r7
 8001168:	bd90      	pop	{r4, r7, pc}

0800116a <_ZNSt17_Function_handlerIFhhPhmEPS1_E9_M_invokeERKSt9_Any_dataOhOS0_Om>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 800116a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800116c:	b085      	sub	sp, #20
 800116e:	af00      	add	r7, sp, #0
 8001170:	60f8      	str	r0, [r7, #12]
 8001172:	60b9      	str	r1, [r7, #8]
 8001174:	607a      	str	r2, [r7, #4]
 8001176:	603b      	str	r3, [r7, #0]
	return (*_Base::_M_get_pointer(__functor))(
 8001178:	68f8      	ldr	r0, [r7, #12]
 800117a:	f000 f92c 	bl	80013d6 <_ZNSt14_Function_base13_Base_managerIPFhhPhmEE14_M_get_pointerERKSt9_Any_data>
 800117e:	4603      	mov	r3, r0
 8001180:	681c      	ldr	r4, [r3, #0]
	    std::forward<_ArgTypes>(__args)...);
 8001182:	68b8      	ldr	r0, [r7, #8]
 8001184:	f000 f938 	bl	80013f8 <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 8001188:	4603      	mov	r3, r0
	return (*_Base::_M_get_pointer(__functor))(
 800118a:	781d      	ldrb	r5, [r3, #0]
	    std::forward<_ArgTypes>(__args)...);
 800118c:	6878      	ldr	r0, [r7, #4]
 800118e:	f000 f93d 	bl	800140c <_ZSt7forwardIPhEOT_RNSt16remove_referenceIS1_E4typeE>
 8001192:	4603      	mov	r3, r0
	return (*_Base::_M_get_pointer(__functor))(
 8001194:	681e      	ldr	r6, [r3, #0]
	    std::forward<_ArgTypes>(__args)...);
 8001196:	6838      	ldr	r0, [r7, #0]
 8001198:	f000 f942 	bl	8001420 <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
 800119c:	4603      	mov	r3, r0
	return (*_Base::_M_get_pointer(__functor))(
 800119e:	681b      	ldr	r3, [r3, #0]
	    std::forward<_ArgTypes>(__args)...);
 80011a0:	461a      	mov	r2, r3
 80011a2:	4631      	mov	r1, r6
 80011a4:	4628      	mov	r0, r5
 80011a6:	47a0      	blx	r4
 80011a8:	4603      	mov	r3, r0
      }
 80011aa:	4618      	mov	r0, r3
 80011ac:	3714      	adds	r7, #20
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080011b2 <_ZNSt14_Function_base13_Base_managerIPFhhPhmEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80011b2:	b5b0      	push	{r4, r5, r7, lr}
 80011b4:	b086      	sub	sp, #24
 80011b6:	af00      	add	r7, sp, #0
 80011b8:	60f8      	str	r0, [r7, #12]
 80011ba:	60b9      	str	r1, [r7, #8]
 80011bc:	4613      	mov	r3, r2
 80011be:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 80011c0:	79fb      	ldrb	r3, [r7, #7]
 80011c2:	2b02      	cmp	r3, #2
 80011c4:	d00d      	beq.n	80011e2 <_ZNSt14_Function_base13_Base_managerIPFhhPhmEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x30>
 80011c6:	2b03      	cmp	r3, #3
 80011c8:	d011      	beq.n	80011ee <_ZNSt14_Function_base13_Base_managerIPFhhPhmEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x3c>
 80011ca:	2b01      	cmp	r3, #1
 80011cc:	d114      	bne.n	80011f8 <_ZNSt14_Function_base13_Base_managerIPFhhPhmEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x46>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80011ce:	68f8      	ldr	r0, [r7, #12]
 80011d0:	f000 f930 	bl	8001434 <_ZNSt9_Any_data9_M_accessIPPFhhPhmEEERT_v>
 80011d4:	4604      	mov	r4, r0
 80011d6:	68b8      	ldr	r0, [r7, #8]
 80011d8:	f000 f8fd 	bl	80013d6 <_ZNSt14_Function_base13_Base_managerIPFhhPhmEE14_M_get_pointerERKSt9_Any_data>
 80011dc:	4603      	mov	r3, r0
 80011de:	6023      	str	r3, [r4, #0]
	      break;
 80011e0:	e00a      	b.n	80011f8 <_ZNSt14_Function_base13_Base_managerIPFhhPhmEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x46>
	      _M_clone(__dest, __source, _Local_storage());
 80011e2:	462a      	mov	r2, r5
 80011e4:	68b9      	ldr	r1, [r7, #8]
 80011e6:	68f8      	ldr	r0, [r7, #12]
 80011e8:	f000 f930 	bl	800144c <_ZNSt14_Function_base13_Base_managerIPFhhPhmEE8_M_cloneERSt9_Any_dataRKS5_St17integral_constantIbLb1EE>
	      break;
 80011ec:	e004      	b.n	80011f8 <_ZNSt14_Function_base13_Base_managerIPFhhPhmEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x46>
	      _M_destroy(__dest, _Local_storage());
 80011ee:	4621      	mov	r1, r4
 80011f0:	68f8      	ldr	r0, [r7, #12]
 80011f2:	f000 f946 	bl	8001482 <_ZNSt14_Function_base13_Base_managerIPFhhPhmEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 80011f6:	bf00      	nop
	  return false;
 80011f8:	2300      	movs	r3, #0
	}
 80011fa:	4618      	mov	r0, r3
 80011fc:	3718      	adds	r7, #24
 80011fe:	46bd      	mov	sp, r7
 8001200:	bdb0      	pop	{r4, r5, r7, pc}

08001202 <_ZNSt14_Function_base13_Base_managerIPFhhPKhmEE21_M_not_empty_functionIS3_EEbPT_>:
	  _M_not_empty_function(_Tp* __fp)
 8001202:	b480      	push	{r7}
 8001204:	b083      	sub	sp, #12
 8001206:	af00      	add	r7, sp, #0
 8001208:	6078      	str	r0, [r7, #4]
	  { return __fp != nullptr; }
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	2b00      	cmp	r3, #0
 800120e:	bf14      	ite	ne
 8001210:	2301      	movne	r3, #1
 8001212:	2300      	moveq	r3, #0
 8001214:	b2db      	uxtb	r3, r3
 8001216:	4618      	mov	r0, r3
 8001218:	370c      	adds	r7, #12
 800121a:	46bd      	mov	sp, r7
 800121c:	bc80      	pop	{r7}
 800121e:	4770      	bx	lr

08001220 <_ZNSt14_Function_base13_Base_managerIPFhhPKhmEE15_M_init_functorERSt9_Any_dataOS4_>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f)
 8001220:	b590      	push	{r4, r7, lr}
 8001222:	b085      	sub	sp, #20
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
 8001228:	6039      	str	r1, [r7, #0]
	{ _M_init_functor(__functor, std::move(__f), _Local_storage()); }
 800122a:	6838      	ldr	r0, [r7, #0]
 800122c:	f7ff feca 	bl	8000fc4 <_ZSt4moveIRPFhhPKhmEEONSt16remove_referenceIT_E4typeEOS6_>
 8001230:	4603      	mov	r3, r0
 8001232:	4622      	mov	r2, r4
 8001234:	4619      	mov	r1, r3
 8001236:	6878      	ldr	r0, [r7, #4]
 8001238:	f000 f92f 	bl	800149a <_ZNSt14_Function_base13_Base_managerIPFhhPKhmEE15_M_init_functorERSt9_Any_dataOS4_St17integral_constantIbLb1EE>
 800123c:	bf00      	nop
 800123e:	3714      	adds	r7, #20
 8001240:	46bd      	mov	sp, r7
 8001242:	bd90      	pop	{r4, r7, pc}

08001244 <_ZNSt17_Function_handlerIFhhPKhmEPS2_E9_M_invokeERKSt9_Any_dataOhOS1_Om>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8001244:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001246:	b085      	sub	sp, #20
 8001248:	af00      	add	r7, sp, #0
 800124a:	60f8      	str	r0, [r7, #12]
 800124c:	60b9      	str	r1, [r7, #8]
 800124e:	607a      	str	r2, [r7, #4]
 8001250:	603b      	str	r3, [r7, #0]
	return (*_Base::_M_get_pointer(__functor))(
 8001252:	68f8      	ldr	r0, [r7, #12]
 8001254:	f000 f93c 	bl	80014d0 <_ZNSt14_Function_base13_Base_managerIPFhhPKhmEE14_M_get_pointerERKSt9_Any_data>
 8001258:	4603      	mov	r3, r0
 800125a:	681c      	ldr	r4, [r3, #0]
	    std::forward<_ArgTypes>(__args)...);
 800125c:	68b8      	ldr	r0, [r7, #8]
 800125e:	f000 f8cb 	bl	80013f8 <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 8001262:	4603      	mov	r3, r0
	return (*_Base::_M_get_pointer(__functor))(
 8001264:	781d      	ldrb	r5, [r3, #0]
	    std::forward<_ArgTypes>(__args)...);
 8001266:	6878      	ldr	r0, [r7, #4]
 8001268:	f000 f943 	bl	80014f2 <_ZSt7forwardIPKhEOT_RNSt16remove_referenceIS2_E4typeE>
 800126c:	4603      	mov	r3, r0
	return (*_Base::_M_get_pointer(__functor))(
 800126e:	681e      	ldr	r6, [r3, #0]
	    std::forward<_ArgTypes>(__args)...);
 8001270:	6838      	ldr	r0, [r7, #0]
 8001272:	f000 f8d5 	bl	8001420 <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
 8001276:	4603      	mov	r3, r0
	return (*_Base::_M_get_pointer(__functor))(
 8001278:	681b      	ldr	r3, [r3, #0]
	    std::forward<_ArgTypes>(__args)...);
 800127a:	461a      	mov	r2, r3
 800127c:	4631      	mov	r1, r6
 800127e:	4628      	mov	r0, r5
 8001280:	47a0      	blx	r4
 8001282:	4603      	mov	r3, r0
      }
 8001284:	4618      	mov	r0, r3
 8001286:	3714      	adds	r7, #20
 8001288:	46bd      	mov	sp, r7
 800128a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800128c <_ZNSt14_Function_base13_Base_managerIPFhhPKhmEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 800128c:	b5b0      	push	{r4, r5, r7, lr}
 800128e:	b086      	sub	sp, #24
 8001290:	af00      	add	r7, sp, #0
 8001292:	60f8      	str	r0, [r7, #12]
 8001294:	60b9      	str	r1, [r7, #8]
 8001296:	4613      	mov	r3, r2
 8001298:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 800129a:	79fb      	ldrb	r3, [r7, #7]
 800129c:	2b02      	cmp	r3, #2
 800129e:	d00d      	beq.n	80012bc <_ZNSt14_Function_base13_Base_managerIPFhhPKhmEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x30>
 80012a0:	2b03      	cmp	r3, #3
 80012a2:	d011      	beq.n	80012c8 <_ZNSt14_Function_base13_Base_managerIPFhhPKhmEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x3c>
 80012a4:	2b01      	cmp	r3, #1
 80012a6:	d114      	bne.n	80012d2 <_ZNSt14_Function_base13_Base_managerIPFhhPKhmEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x46>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80012a8:	68f8      	ldr	r0, [r7, #12]
 80012aa:	f000 f92c 	bl	8001506 <_ZNSt9_Any_data9_M_accessIPPFhhPKhmEEERT_v>
 80012ae:	4604      	mov	r4, r0
 80012b0:	68b8      	ldr	r0, [r7, #8]
 80012b2:	f000 f90d 	bl	80014d0 <_ZNSt14_Function_base13_Base_managerIPFhhPKhmEE14_M_get_pointerERKSt9_Any_data>
 80012b6:	4603      	mov	r3, r0
 80012b8:	6023      	str	r3, [r4, #0]
	      break;
 80012ba:	e00a      	b.n	80012d2 <_ZNSt14_Function_base13_Base_managerIPFhhPKhmEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x46>
	      _M_clone(__dest, __source, _Local_storage());
 80012bc:	462a      	mov	r2, r5
 80012be:	68b9      	ldr	r1, [r7, #8]
 80012c0:	68f8      	ldr	r0, [r7, #12]
 80012c2:	f000 f92c 	bl	800151e <_ZNSt14_Function_base13_Base_managerIPFhhPKhmEE8_M_cloneERSt9_Any_dataRKS6_St17integral_constantIbLb1EE>
	      break;
 80012c6:	e004      	b.n	80012d2 <_ZNSt14_Function_base13_Base_managerIPFhhPKhmEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x46>
	      _M_destroy(__dest, _Local_storage());
 80012c8:	4621      	mov	r1, r4
 80012ca:	68f8      	ldr	r0, [r7, #12]
 80012cc:	f000 f942 	bl	8001554 <_ZNSt14_Function_base13_Base_managerIPFhhPKhmEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 80012d0:	bf00      	nop
	  return false;
 80012d2:	2300      	movs	r3, #0
	}
 80012d4:	4618      	mov	r0, r3
 80012d6:	3718      	adds	r7, #24
 80012d8:	46bd      	mov	sp, r7
 80012da:	bdb0      	pop	{r4, r5, r7, pc}

080012dc <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implC1ERKS0_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
 80012dc:	b580      	push	{r7, lr}
 80012de:	b082      	sub	sp, #8
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
 80012e4:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(__a), _M_start(), _M_finish(), _M_end_of_storage()
 80012e6:	6839      	ldr	r1, [r7, #0]
 80012e8:	6878      	ldr	r0, [r7, #4]
 80012ea:	f000 f93f 	bl	800156c <_ZNSaIhEC1ERKS_>
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	2200      	movs	r2, #0
 80012f2:	601a      	str	r2, [r3, #0]
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	2200      	movs	r2, #0
 80012f8:	605a      	str	r2, [r3, #4]
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	2200      	movs	r2, #0
 80012fe:	609a      	str	r2, [r3, #8]
	{ }
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	4618      	mov	r0, r3
 8001304:	3708      	adds	r7, #8
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}

0800130a <_ZNSt12_Vector_baseIhSaIhEE17_M_create_storageEj>:
      _M_create_storage(size_t __n)
 800130a:	b580      	push	{r7, lr}
 800130c:	b082      	sub	sp, #8
 800130e:	af00      	add	r7, sp, #0
 8001310:	6078      	str	r0, [r7, #4]
 8001312:	6039      	str	r1, [r7, #0]
	this->_M_impl._M_start = this->_M_allocate(__n);
 8001314:	6839      	ldr	r1, [r7, #0]
 8001316:	6878      	ldr	r0, [r7, #4]
 8001318:	f000 f936 	bl	8001588 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj>
 800131c:	4602      	mov	r2, r0
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	601a      	str	r2, [r3, #0]
	this->_M_impl._M_finish = this->_M_impl._M_start;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681a      	ldr	r2, [r3, #0]
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	605a      	str	r2, [r3, #4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681a      	ldr	r2, [r3, #0]
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	441a      	add	r2, r3
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	609a      	str	r2, [r3, #8]
      }
 8001336:	bf00      	nop
 8001338:	3708      	adds	r7, #8
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}

0800133e <_ZNSt12_Vector_baseIhSaIhEE13_M_deallocateEPhj>:
      _M_deallocate(pointer __p, size_t __n)
 800133e:	b580      	push	{r7, lr}
 8001340:	b084      	sub	sp, #16
 8001342:	af00      	add	r7, sp, #0
 8001344:	60f8      	str	r0, [r7, #12]
 8001346:	60b9      	str	r1, [r7, #8]
 8001348:	607a      	str	r2, [r7, #4]
	if (__p)
 800134a:	68bb      	ldr	r3, [r7, #8]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d005      	beq.n	800135c <_ZNSt12_Vector_baseIhSaIhEE13_M_deallocateEPhj+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	687a      	ldr	r2, [r7, #4]
 8001354:	68b9      	ldr	r1, [r7, #8]
 8001356:	4618      	mov	r0, r3
 8001358:	f000 f92a 	bl	80015b0 <_ZNSt16allocator_traitsISaIhEE10deallocateERS0_Phj>
      }
 800135c:	bf00      	nop
 800135e:	3710      	adds	r7, #16
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}

08001364 <_ZSt24__uninitialized_fill_n_aIPhjhhET_S1_T0_RKT1_RSaIT2_E>:
    }

  template<typename _ForwardIterator, typename _Size, typename _Tp,
	   typename _Tp2>
    inline _ForwardIterator
    __uninitialized_fill_n_a(_ForwardIterator __first, _Size __n, 
 8001364:	b580      	push	{r7, lr}
 8001366:	b084      	sub	sp, #16
 8001368:	af00      	add	r7, sp, #0
 800136a:	60f8      	str	r0, [r7, #12]
 800136c:	60b9      	str	r1, [r7, #8]
 800136e:	607a      	str	r2, [r7, #4]
 8001370:	603b      	str	r3, [r7, #0]
			     const _Tp& __x, allocator<_Tp2>&)
    { return std::uninitialized_fill_n(__first, __n, __x); }
 8001372:	687a      	ldr	r2, [r7, #4]
 8001374:	68b9      	ldr	r1, [r7, #8]
 8001376:	68f8      	ldr	r0, [r7, #12]
 8001378:	f000 f929 	bl	80015ce <_ZSt20uninitialized_fill_nIPhjhET_S1_T0_RKT1_>
 800137c:	4603      	mov	r3, r0
 800137e:	4618      	mov	r0, r3
 8001380:	3710      	adds	r7, #16
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}

08001386 <_ZSt8_DestroyIPhEvT_S1_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8001386:	b580      	push	{r7, lr}
 8001388:	b082      	sub	sp, #8
 800138a:	af00      	add	r7, sp, #0
 800138c:	6078      	str	r0, [r7, #4]
 800138e:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 8001390:	6839      	ldr	r1, [r7, #0]
 8001392:	6878      	ldr	r0, [r7, #4]
 8001394:	f000 f92d 	bl	80015f2 <_ZNSt12_Destroy_auxILb1EE9__destroyIPhEEvT_S3_>
    }
 8001398:	bf00      	nop
 800139a:	3708      	adds	r7, #8
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}

080013a0 <_ZNSt14_Function_base13_Base_managerIPFhhPhmEE15_M_init_functorERSt9_Any_dataOS3_St17integral_constantIbLb1EE>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
 80013a0:	b590      	push	{r4, r7, lr}
 80013a2:	b085      	sub	sp, #20
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	60f8      	str	r0, [r7, #12]
 80013a8:	60b9      	str	r1, [r7, #8]
 80013aa:	713a      	strb	r2, [r7, #4]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 80013ac:	68b8      	ldr	r0, [r7, #8]
 80013ae:	f7ff fdd5 	bl	8000f5c <_ZSt4moveIRPFhhPhmEEONSt16remove_referenceIT_E4typeEOS5_>
 80013b2:	4603      	mov	r3, r0
 80013b4:	681c      	ldr	r4, [r3, #0]
 80013b6:	68f8      	ldr	r0, [r7, #12]
 80013b8:	f7ff fbcd 	bl	8000b56 <_ZNSt9_Any_data9_M_accessEv>
 80013bc:	4603      	mov	r3, r0
 80013be:	4619      	mov	r1, r3
 80013c0:	2004      	movs	r0, #4
 80013c2:	f7ff fbbd 	bl	8000b40 <_ZnwjPv>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d000      	beq.n	80013ce <_ZNSt14_Function_base13_Base_managerIPFhhPhmEE15_M_init_functorERSt9_Any_dataOS3_St17integral_constantIbLb1EE+0x2e>
 80013cc:	601c      	str	r4, [r3, #0]
 80013ce:	bf00      	nop
 80013d0:	3714      	adds	r7, #20
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd90      	pop	{r4, r7, pc}

080013d6 <_ZNSt14_Function_base13_Base_managerIPFhhPhmEE14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
 80013d6:	b580      	push	{r7, lr}
 80013d8:	b084      	sub	sp, #16
 80013da:	af00      	add	r7, sp, #0
 80013dc:	6078      	str	r0, [r7, #4]
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
 80013de:	6878      	ldr	r0, [r7, #4]
 80013e0:	f000 f911 	bl	8001606 <_ZNKSt9_Any_data9_M_accessIPFhhPhmEEERKT_v>
 80013e4:	4603      	mov	r3, r0
	  const _Functor* __ptr =
 80013e6:	4618      	mov	r0, r3
 80013e8:	f000 f919 	bl	800161e <_ZSt11__addressofIKPFhhPhmEEPT_RS4_>
 80013ec:	60f8      	str	r0, [r7, #12]
	  return const_cast<_Functor*>(__ptr);
 80013ee:	68fb      	ldr	r3, [r7, #12]
	}
 80013f0:	4618      	mov	r0, r3
 80013f2:	3710      	adds	r7, #16
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}

080013f8 <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80013f8:	b480      	push	{r7}
 80013fa:	b083      	sub	sp, #12
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	4618      	mov	r0, r3
 8001404:	370c      	adds	r7, #12
 8001406:	46bd      	mov	sp, r7
 8001408:	bc80      	pop	{r7}
 800140a:	4770      	bx	lr

0800140c <_ZSt7forwardIPhEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800140c:	b480      	push	{r7}
 800140e:	b083      	sub	sp, #12
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	4618      	mov	r0, r3
 8001418:	370c      	adds	r7, #12
 800141a:	46bd      	mov	sp, r7
 800141c:	bc80      	pop	{r7}
 800141e:	4770      	bx	lr

08001420 <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8001420:	b480      	push	{r7}
 8001422:	b083      	sub	sp, #12
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	4618      	mov	r0, r3
 800142c:	370c      	adds	r7, #12
 800142e:	46bd      	mov	sp, r7
 8001430:	bc80      	pop	{r7}
 8001432:	4770      	bx	lr

08001434 <_ZNSt9_Any_data9_M_accessIPPFhhPhmEEERT_v>:
      _M_access()
 8001434:	b580      	push	{r7, lr}
 8001436:	b082      	sub	sp, #8
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 800143c:	6878      	ldr	r0, [r7, #4]
 800143e:	f7ff fb8a 	bl	8000b56 <_ZNSt9_Any_data9_M_accessEv>
 8001442:	4603      	mov	r3, r0
 8001444:	4618      	mov	r0, r3
 8001446:	3708      	adds	r7, #8
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}

0800144c <_ZNSt14_Function_base13_Base_managerIPFhhPhmEE8_M_cloneERSt9_Any_dataRKS5_St17integral_constantIbLb1EE>:
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
 800144c:	b590      	push	{r4, r7, lr}
 800144e:	b085      	sub	sp, #20
 8001450:	af00      	add	r7, sp, #0
 8001452:	60f8      	str	r0, [r7, #12]
 8001454:	60b9      	str	r1, [r7, #8]
 8001456:	713a      	strb	r2, [r7, #4]
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 8001458:	68b8      	ldr	r0, [r7, #8]
 800145a:	f000 f8d4 	bl	8001606 <_ZNKSt9_Any_data9_M_accessIPFhhPhmEEERKT_v>
 800145e:	4603      	mov	r3, r0
 8001460:	681c      	ldr	r4, [r3, #0]
 8001462:	68f8      	ldr	r0, [r7, #12]
 8001464:	f7ff fb77 	bl	8000b56 <_ZNSt9_Any_data9_M_accessEv>
 8001468:	4603      	mov	r3, r0
 800146a:	4619      	mov	r1, r3
 800146c:	2004      	movs	r0, #4
 800146e:	f7ff fb67 	bl	8000b40 <_ZnwjPv>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d000      	beq.n	800147a <_ZNSt14_Function_base13_Base_managerIPFhhPhmEE8_M_cloneERSt9_Any_dataRKS5_St17integral_constantIbLb1EE+0x2e>
 8001478:	601c      	str	r4, [r3, #0]
	}
 800147a:	bf00      	nop
 800147c:	3714      	adds	r7, #20
 800147e:	46bd      	mov	sp, r7
 8001480:	bd90      	pop	{r4, r7, pc}

08001482 <_ZNSt14_Function_base13_Base_managerIPFhhPhmEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 8001482:	b580      	push	{r7, lr}
 8001484:	b082      	sub	sp, #8
 8001486:	af00      	add	r7, sp, #0
 8001488:	6078      	str	r0, [r7, #4]
 800148a:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 800148c:	6878      	ldr	r0, [r7, #4]
 800148e:	f000 f8d0 	bl	8001632 <_ZNSt9_Any_data9_M_accessIPFhhPhmEEERT_v>
	}
 8001492:	bf00      	nop
 8001494:	3708      	adds	r7, #8
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}

0800149a <_ZNSt14_Function_base13_Base_managerIPFhhPKhmEE15_M_init_functorERSt9_Any_dataOS4_St17integral_constantIbLb1EE>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
 800149a:	b590      	push	{r4, r7, lr}
 800149c:	b085      	sub	sp, #20
 800149e:	af00      	add	r7, sp, #0
 80014a0:	60f8      	str	r0, [r7, #12]
 80014a2:	60b9      	str	r1, [r7, #8]
 80014a4:	713a      	strb	r2, [r7, #4]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 80014a6:	68b8      	ldr	r0, [r7, #8]
 80014a8:	f7ff fd8c 	bl	8000fc4 <_ZSt4moveIRPFhhPKhmEEONSt16remove_referenceIT_E4typeEOS6_>
 80014ac:	4603      	mov	r3, r0
 80014ae:	681c      	ldr	r4, [r3, #0]
 80014b0:	68f8      	ldr	r0, [r7, #12]
 80014b2:	f7ff fb50 	bl	8000b56 <_ZNSt9_Any_data9_M_accessEv>
 80014b6:	4603      	mov	r3, r0
 80014b8:	4619      	mov	r1, r3
 80014ba:	2004      	movs	r0, #4
 80014bc:	f7ff fb40 	bl	8000b40 <_ZnwjPv>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d000      	beq.n	80014c8 <_ZNSt14_Function_base13_Base_managerIPFhhPKhmEE15_M_init_functorERSt9_Any_dataOS4_St17integral_constantIbLb1EE+0x2e>
 80014c6:	601c      	str	r4, [r3, #0]
 80014c8:	bf00      	nop
 80014ca:	3714      	adds	r7, #20
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd90      	pop	{r4, r7, pc}

080014d0 <_ZNSt14_Function_base13_Base_managerIPFhhPKhmEE14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b084      	sub	sp, #16
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
 80014d8:	6878      	ldr	r0, [r7, #4]
 80014da:	f000 f8b6 	bl	800164a <_ZNKSt9_Any_data9_M_accessIPFhhPKhmEEERKT_v>
 80014de:	4603      	mov	r3, r0
	  const _Functor* __ptr =
 80014e0:	4618      	mov	r0, r3
 80014e2:	f000 f8be 	bl	8001662 <_ZSt11__addressofIKPFhhPKhmEEPT_RS5_>
 80014e6:	60f8      	str	r0, [r7, #12]
	  return const_cast<_Functor*>(__ptr);
 80014e8:	68fb      	ldr	r3, [r7, #12]
	}
 80014ea:	4618      	mov	r0, r3
 80014ec:	3710      	adds	r7, #16
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}

080014f2 <_ZSt7forwardIPKhEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80014f2:	b480      	push	{r7}
 80014f4:	b083      	sub	sp, #12
 80014f6:	af00      	add	r7, sp, #0
 80014f8:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	4618      	mov	r0, r3
 80014fe:	370c      	adds	r7, #12
 8001500:	46bd      	mov	sp, r7
 8001502:	bc80      	pop	{r7}
 8001504:	4770      	bx	lr

08001506 <_ZNSt9_Any_data9_M_accessIPPFhhPKhmEEERT_v>:
      _M_access()
 8001506:	b580      	push	{r7, lr}
 8001508:	b082      	sub	sp, #8
 800150a:	af00      	add	r7, sp, #0
 800150c:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 800150e:	6878      	ldr	r0, [r7, #4]
 8001510:	f7ff fb21 	bl	8000b56 <_ZNSt9_Any_data9_M_accessEv>
 8001514:	4603      	mov	r3, r0
 8001516:	4618      	mov	r0, r3
 8001518:	3708      	adds	r7, #8
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}

0800151e <_ZNSt14_Function_base13_Base_managerIPFhhPKhmEE8_M_cloneERSt9_Any_dataRKS6_St17integral_constantIbLb1EE>:
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
 800151e:	b590      	push	{r4, r7, lr}
 8001520:	b085      	sub	sp, #20
 8001522:	af00      	add	r7, sp, #0
 8001524:	60f8      	str	r0, [r7, #12]
 8001526:	60b9      	str	r1, [r7, #8]
 8001528:	713a      	strb	r2, [r7, #4]
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 800152a:	68b8      	ldr	r0, [r7, #8]
 800152c:	f000 f88d 	bl	800164a <_ZNKSt9_Any_data9_M_accessIPFhhPKhmEEERKT_v>
 8001530:	4603      	mov	r3, r0
 8001532:	681c      	ldr	r4, [r3, #0]
 8001534:	68f8      	ldr	r0, [r7, #12]
 8001536:	f7ff fb0e 	bl	8000b56 <_ZNSt9_Any_data9_M_accessEv>
 800153a:	4603      	mov	r3, r0
 800153c:	4619      	mov	r1, r3
 800153e:	2004      	movs	r0, #4
 8001540:	f7ff fafe 	bl	8000b40 <_ZnwjPv>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d000      	beq.n	800154c <_ZNSt14_Function_base13_Base_managerIPFhhPKhmEE8_M_cloneERSt9_Any_dataRKS6_St17integral_constantIbLb1EE+0x2e>
 800154a:	601c      	str	r4, [r3, #0]
	}
 800154c:	bf00      	nop
 800154e:	3714      	adds	r7, #20
 8001550:	46bd      	mov	sp, r7
 8001552:	bd90      	pop	{r4, r7, pc}

08001554 <_ZNSt14_Function_base13_Base_managerIPFhhPKhmEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 8001554:	b580      	push	{r7, lr}
 8001556:	b082      	sub	sp, #8
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
 800155c:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 800155e:	6878      	ldr	r0, [r7, #4]
 8001560:	f000 f889 	bl	8001676 <_ZNSt9_Any_data9_M_accessIPFhhPKhmEEERT_v>
	}
 8001564:	bf00      	nop
 8001566:	3708      	adds	r7, #8
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}

0800156c <_ZNSaIhEC1ERKS_>:
      allocator(const allocator& __a) throw()
 800156c:	b580      	push	{r7, lr}
 800156e:	b082      	sub	sp, #8
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
 8001574:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 8001576:	6839      	ldr	r1, [r7, #0]
 8001578:	6878      	ldr	r0, [r7, #4]
 800157a:	f000 f888 	bl	800168e <_ZN9__gnu_cxx13new_allocatorIhEC1ERKS1_>
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	4618      	mov	r0, r3
 8001582:	3708      	adds	r7, #8
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}

08001588 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
 8001590:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	2b00      	cmp	r3, #0
 8001596:	d006      	beq.n	80015a6 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj+0x1e>
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6839      	ldr	r1, [r7, #0]
 800159c:	4618      	mov	r0, r3
 800159e:	f000 f881 	bl	80016a4 <_ZNSt16allocator_traitsISaIhEE8allocateERS0_j>
 80015a2:	4603      	mov	r3, r0
 80015a4:	e000      	b.n	80015a8 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj+0x20>
 80015a6:	2300      	movs	r3, #0
      }
 80015a8:	4618      	mov	r0, r3
 80015aa:	3708      	adds	r7, #8
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}

080015b0 <_ZNSt16allocator_traitsISaIhEE10deallocateERS0_Phj>:
       *  @param  __n  The number of objects space was allocated for.
       *
       *  Calls <tt> a.deallocate(p, n) </tt>
      */
      static void
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b084      	sub	sp, #16
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	60f8      	str	r0, [r7, #12]
 80015b8:	60b9      	str	r1, [r7, #8]
 80015ba:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 80015bc:	687a      	ldr	r2, [r7, #4]
 80015be:	68b9      	ldr	r1, [r7, #8]
 80015c0:	68f8      	ldr	r0, [r7, #12]
 80015c2:	f000 f87e 	bl	80016c2 <_ZN9__gnu_cxx13new_allocatorIhE10deallocateEPhj>
 80015c6:	bf00      	nop
 80015c8:	3710      	adds	r7, #16
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}

080015ce <_ZSt20uninitialized_fill_nIPhjhET_S1_T0_RKT1_>:
    uninitialized_fill_n(_ForwardIterator __first, _Size __n, const _Tp& __x)
 80015ce:	b580      	push	{r7, lr}
 80015d0:	b086      	sub	sp, #24
 80015d2:	af00      	add	r7, sp, #0
 80015d4:	60f8      	str	r0, [r7, #12]
 80015d6:	60b9      	str	r1, [r7, #8]
 80015d8:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_copy_assignable<_ValueType>::value;
 80015da:	2301      	movs	r3, #1
 80015dc:	75fb      	strb	r3, [r7, #23]
	__uninit_fill_n(__first, __n, __x);
 80015de:	687a      	ldr	r2, [r7, #4]
 80015e0:	68b9      	ldr	r1, [r7, #8]
 80015e2:	68f8      	ldr	r0, [r7, #12]
 80015e4:	f000 f87a 	bl	80016dc <_ZNSt22__uninitialized_fill_nILb1EE15__uninit_fill_nIPhjhEET_S3_T0_RKT1_>
 80015e8:	4603      	mov	r3, r0
    }
 80015ea:	4618      	mov	r0, r3
 80015ec:	3718      	adds	r7, #24
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}

080015f2 <_ZNSt12_Destroy_auxILb1EE9__destroyIPhEEvT_S3_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 80015f2:	b480      	push	{r7}
 80015f4:	b083      	sub	sp, #12
 80015f6:	af00      	add	r7, sp, #0
 80015f8:	6078      	str	r0, [r7, #4]
 80015fa:	6039      	str	r1, [r7, #0]
 80015fc:	bf00      	nop
 80015fe:	370c      	adds	r7, #12
 8001600:	46bd      	mov	sp, r7
 8001602:	bc80      	pop	{r7}
 8001604:	4770      	bx	lr

08001606 <_ZNKSt9_Any_data9_M_accessIPFhhPhmEEERKT_v>:
      _M_access() const
 8001606:	b580      	push	{r7, lr}
 8001608:	b082      	sub	sp, #8
 800160a:	af00      	add	r7, sp, #0
 800160c:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 800160e:	6878      	ldr	r0, [r7, #4]
 8001610:	f7ff faab 	bl	8000b6a <_ZNKSt9_Any_data9_M_accessEv>
 8001614:	4603      	mov	r3, r0
 8001616:	4618      	mov	r0, r3
 8001618:	3708      	adds	r7, #8
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}

0800161e <_ZSt11__addressofIKPFhhPhmEEPT_RS4_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800161e:	b480      	push	{r7}
 8001620:	b083      	sub	sp, #12
 8001622:	af00      	add	r7, sp, #0
 8001624:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	4618      	mov	r0, r3
 800162a:	370c      	adds	r7, #12
 800162c:	46bd      	mov	sp, r7
 800162e:	bc80      	pop	{r7}
 8001630:	4770      	bx	lr

08001632 <_ZNSt9_Any_data9_M_accessIPFhhPhmEEERT_v>:
      _M_access()
 8001632:	b580      	push	{r7, lr}
 8001634:	b082      	sub	sp, #8
 8001636:	af00      	add	r7, sp, #0
 8001638:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 800163a:	6878      	ldr	r0, [r7, #4]
 800163c:	f7ff fa8b 	bl	8000b56 <_ZNSt9_Any_data9_M_accessEv>
 8001640:	4603      	mov	r3, r0
 8001642:	4618      	mov	r0, r3
 8001644:	3708      	adds	r7, #8
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}

0800164a <_ZNKSt9_Any_data9_M_accessIPFhhPKhmEEERKT_v>:
      _M_access() const
 800164a:	b580      	push	{r7, lr}
 800164c:	b082      	sub	sp, #8
 800164e:	af00      	add	r7, sp, #0
 8001650:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 8001652:	6878      	ldr	r0, [r7, #4]
 8001654:	f7ff fa89 	bl	8000b6a <_ZNKSt9_Any_data9_M_accessEv>
 8001658:	4603      	mov	r3, r0
 800165a:	4618      	mov	r0, r3
 800165c:	3708      	adds	r7, #8
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}

08001662 <_ZSt11__addressofIKPFhhPKhmEEPT_RS5_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8001662:	b480      	push	{r7}
 8001664:	b083      	sub	sp, #12
 8001666:	af00      	add	r7, sp, #0
 8001668:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	4618      	mov	r0, r3
 800166e:	370c      	adds	r7, #12
 8001670:	46bd      	mov	sp, r7
 8001672:	bc80      	pop	{r7}
 8001674:	4770      	bx	lr

08001676 <_ZNSt9_Any_data9_M_accessIPFhhPKhmEEERT_v>:
      _M_access()
 8001676:	b580      	push	{r7, lr}
 8001678:	b082      	sub	sp, #8
 800167a:	af00      	add	r7, sp, #0
 800167c:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 800167e:	6878      	ldr	r0, [r7, #4]
 8001680:	f7ff fa69 	bl	8000b56 <_ZNSt9_Any_data9_M_accessEv>
 8001684:	4603      	mov	r3, r0
 8001686:	4618      	mov	r0, r3
 8001688:	3708      	adds	r7, #8
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}

0800168e <_ZN9__gnu_cxx13new_allocatorIhEC1ERKS1_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 800168e:	b480      	push	{r7}
 8001690:	b083      	sub	sp, #12
 8001692:	af00      	add	r7, sp, #0
 8001694:	6078      	str	r0, [r7, #4]
 8001696:	6039      	str	r1, [r7, #0]
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	4618      	mov	r0, r3
 800169c:	370c      	adds	r7, #12
 800169e:	46bd      	mov	sp, r7
 80016a0:	bc80      	pop	{r7}
 80016a2:	4770      	bx	lr

080016a4 <_ZNSt16allocator_traitsISaIhEE8allocateERS0_j>:
      allocate(allocator_type& __a, size_type __n)
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b082      	sub	sp, #8
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
 80016ac:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 80016ae:	2200      	movs	r2, #0
 80016b0:	6839      	ldr	r1, [r7, #0]
 80016b2:	6878      	ldr	r0, [r7, #4]
 80016b4:	f000 f822 	bl	80016fc <_ZN9__gnu_cxx13new_allocatorIhE8allocateEjPKv>
 80016b8:	4603      	mov	r3, r0
 80016ba:	4618      	mov	r0, r3
 80016bc:	3708      	adds	r7, #8
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}

080016c2 <_ZN9__gnu_cxx13new_allocatorIhE10deallocateEPhj>:
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
 80016c2:	b580      	push	{r7, lr}
 80016c4:	b084      	sub	sp, #16
 80016c6:	af00      	add	r7, sp, #0
 80016c8:	60f8      	str	r0, [r7, #12]
 80016ca:	60b9      	str	r1, [r7, #8]
 80016cc:	607a      	str	r2, [r7, #4]
	  {
	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p);
 80016ce:	68b8      	ldr	r0, [r7, #8]
 80016d0:	f001 fd36 	bl	8003140 <_ZdlPv>
      }
 80016d4:	bf00      	nop
 80016d6:	3710      	adds	r7, #16
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}

080016dc <_ZNSt22__uninitialized_fill_nILb1EE15__uninit_fill_nIPhjhEET_S3_T0_RKT1_>:
        __uninit_fill_n(_ForwardIterator __first, _Size __n,
 80016dc:	b580      	push	{r7, lr}
 80016de:	b084      	sub	sp, #16
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	60f8      	str	r0, [r7, #12]
 80016e4:	60b9      	str	r1, [r7, #8]
 80016e6:	607a      	str	r2, [r7, #4]
        { return std::fill_n(__first, __n, __x); }
 80016e8:	687a      	ldr	r2, [r7, #4]
 80016ea:	68b9      	ldr	r1, [r7, #8]
 80016ec:	68f8      	ldr	r0, [r7, #12]
 80016ee:	f000 f821 	bl	8001734 <_ZSt6fill_nIPhjhET_S1_T0_RKT1_>
 80016f2:	4603      	mov	r3, r0
 80016f4:	4618      	mov	r0, r3
 80016f6:	3710      	adds	r7, #16
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}

080016fc <_ZN9__gnu_cxx13new_allocatorIhE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b084      	sub	sp, #16
 8001700:	af00      	add	r7, sp, #0
 8001702:	60f8      	str	r0, [r7, #12]
 8001704:	60b9      	str	r1, [r7, #8]
 8001706:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 8001708:	68f8      	ldr	r0, [r7, #12]
 800170a:	f000 f827 	bl	800175c <_ZNK9__gnu_cxx13new_allocatorIhE8max_sizeEv>
 800170e:	4602      	mov	r2, r0
 8001710:	68bb      	ldr	r3, [r7, #8]
 8001712:	4293      	cmp	r3, r2
 8001714:	bf8c      	ite	hi
 8001716:	2301      	movhi	r3, #1
 8001718:	2300      	movls	r3, #0
 800171a:	b2db      	uxtb	r3, r3
 800171c:	2b00      	cmp	r3, #0
 800171e:	d001      	beq.n	8001724 <_ZN9__gnu_cxx13new_allocatorIhE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8001720:	f001 fd10 	bl	8003144 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8001724:	68b8      	ldr	r0, [r7, #8]
 8001726:	f001 fcf2 	bl	800310e <_Znwj>
 800172a:	4603      	mov	r3, r0
      }
 800172c:	4618      	mov	r0, r3
 800172e:	3710      	adds	r7, #16
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}

08001734 <_ZSt6fill_nIPhjhET_S1_T0_RKT1_>:
   *  _GLIBCXX_RESOLVE_LIB_DEFECTS
   *  DR 865. More algorithms that throw away information
  */
  template<typename _OI, typename _Size, typename _Tp>
    inline _OI
    fill_n(_OI __first, _Size __n, const _Tp& __value)
 8001734:	b580      	push	{r7, lr}
 8001736:	b084      	sub	sp, #16
 8001738:	af00      	add	r7, sp, #0
 800173a:	60f8      	str	r0, [r7, #12]
 800173c:	60b9      	str	r1, [r7, #8]
 800173e:	607a      	str	r2, [r7, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_OutputIteratorConcept<_OI, _Tp>)

      return _OI(std::__fill_n_a(std::__niter_base(__first), __n, __value));
 8001740:	68f8      	ldr	r0, [r7, #12]
 8001742:	f000 f816 	bl	8001772 <_ZSt12__niter_baseIPhET_S1_>
 8001746:	4603      	mov	r3, r0
 8001748:	687a      	ldr	r2, [r7, #4]
 800174a:	68b9      	ldr	r1, [r7, #8]
 800174c:	4618      	mov	r0, r3
 800174e:	f000 f81a 	bl	8001786 <_ZSt10__fill_n_aIjhEN9__gnu_cxx11__enable_ifIXsrSt9__is_byteIT0_E7__valueEPS3_E6__typeES5_T_RKS3_>
 8001752:	4603      	mov	r3, r0
    }
 8001754:	4618      	mov	r0, r3
 8001756:	3710      	adds	r7, #16
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}

0800175c <_ZNK9__gnu_cxx13new_allocatorIhE8max_sizeEv>:

      size_type
      max_size() const _GLIBCXX_USE_NOEXCEPT
 800175c:	b480      	push	{r7}
 800175e:	b083      	sub	sp, #12
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 8001764:	f04f 33ff 	mov.w	r3, #4294967295
 8001768:	4618      	mov	r0, r3
 800176a:	370c      	adds	r7, #12
 800176c:	46bd      	mov	sp, r7
 800176e:	bc80      	pop	{r7}
 8001770:	4770      	bx	lr

08001772 <_ZSt12__niter_baseIPhET_S1_>:
    __niter_base(_Iterator __it)
 8001772:	b480      	push	{r7}
 8001774:	b083      	sub	sp, #12
 8001776:	af00      	add	r7, sp, #0
 8001778:	6078      	str	r0, [r7, #4]
    { return __it; }
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	4618      	mov	r0, r3
 800177e:	370c      	adds	r7, #12
 8001780:	46bd      	mov	sp, r7
 8001782:	bc80      	pop	{r7}
 8001784:	4770      	bx	lr

08001786 <_ZSt10__fill_n_aIjhEN9__gnu_cxx11__enable_ifIXsrSt9__is_byteIT0_E7__valueEPS3_E6__typeES5_T_RKS3_>:
    __fill_n_a(_Tp* __first, _Size __n, const _Tp& __c)
 8001786:	b580      	push	{r7, lr}
 8001788:	b084      	sub	sp, #16
 800178a:	af00      	add	r7, sp, #0
 800178c:	60f8      	str	r0, [r7, #12]
 800178e:	60b9      	str	r1, [r7, #8]
 8001790:	607a      	str	r2, [r7, #4]
      std::__fill_a(__first, __first + __n, __c);
 8001792:	68fa      	ldr	r2, [r7, #12]
 8001794:	68bb      	ldr	r3, [r7, #8]
 8001796:	4413      	add	r3, r2
 8001798:	687a      	ldr	r2, [r7, #4]
 800179a:	4619      	mov	r1, r3
 800179c:	68f8      	ldr	r0, [r7, #12]
 800179e:	f000 f807 	bl	80017b0 <_ZSt8__fill_aIhEN9__gnu_cxx11__enable_ifIXsrSt9__is_byteIT_E7__valueEvE6__typeEPS3_S7_RKS3_>
      return __first + __n;
 80017a2:	68fa      	ldr	r2, [r7, #12]
 80017a4:	68bb      	ldr	r3, [r7, #8]
 80017a6:	4413      	add	r3, r2
    }
 80017a8:	4618      	mov	r0, r3
 80017aa:	3710      	adds	r7, #16
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}

080017b0 <_ZSt8__fill_aIhEN9__gnu_cxx11__enable_ifIXsrSt9__is_byteIT_E7__valueEvE6__typeEPS3_S7_RKS3_>:
    __fill_a(_Tp* __first, _Tp* __last, const _Tp& __c)
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b086      	sub	sp, #24
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	60f8      	str	r0, [r7, #12]
 80017b8:	60b9      	str	r1, [r7, #8]
 80017ba:	607a      	str	r2, [r7, #4]
      const _Tp __tmp = __c;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	781b      	ldrb	r3, [r3, #0]
 80017c0:	75fb      	strb	r3, [r7, #23]
      if (const size_t __len = __last - __first)
 80017c2:	68ba      	ldr	r2, [r7, #8]
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	1ad3      	subs	r3, r2, r3
 80017c8:	613b      	str	r3, [r7, #16]
 80017ca:	693b      	ldr	r3, [r7, #16]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d005      	beq.n	80017dc <_ZSt8__fill_aIhEN9__gnu_cxx11__enable_ifIXsrSt9__is_byteIT_E7__valueEvE6__typeEPS3_S7_RKS3_+0x2c>
	__builtin_memset(__first, static_cast<unsigned char>(__tmp), __len);
 80017d0:	7dfb      	ldrb	r3, [r7, #23]
 80017d2:	693a      	ldr	r2, [r7, #16]
 80017d4:	4619      	mov	r1, r3
 80017d6:	68f8      	ldr	r0, [r7, #12]
 80017d8:	f001 fd07 	bl	80031ea <memset>
    }
 80017dc:	bf00      	nop
 80017de:	3718      	adds	r7, #24
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}

080017e4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0
	return 1;
 80017e8:	2301      	movs	r3, #1
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bc80      	pop	{r7}
 80017f0:	4770      	bx	lr

080017f2 <_kill>:

int _kill(int pid, int sig)
{
 80017f2:	b580      	push	{r7, lr}
 80017f4:	b082      	sub	sp, #8
 80017f6:	af00      	add	r7, sp, #0
 80017f8:	6078      	str	r0, [r7, #4]
 80017fa:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80017fc:	f001 fcb0 	bl	8003160 <__errno>
 8001800:	4602      	mov	r2, r0
 8001802:	2316      	movs	r3, #22
 8001804:	6013      	str	r3, [r2, #0]
	return -1;
 8001806:	f04f 33ff 	mov.w	r3, #4294967295
}
 800180a:	4618      	mov	r0, r3
 800180c:	3708      	adds	r7, #8
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}

08001812 <_exit>:

void _exit (int status)
{
 8001812:	b580      	push	{r7, lr}
 8001814:	b082      	sub	sp, #8
 8001816:	af00      	add	r7, sp, #0
 8001818:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800181a:	f04f 31ff 	mov.w	r1, #4294967295
 800181e:	6878      	ldr	r0, [r7, #4]
 8001820:	f7ff ffe7 	bl	80017f2 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001824:	e7fe      	b.n	8001824 <_exit+0x12>
	...

08001828 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b084      	sub	sp, #16
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001830:	4b11      	ldr	r3, [pc, #68]	; (8001878 <_sbrk+0x50>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d102      	bne.n	800183e <_sbrk+0x16>
		heap_end = &end;
 8001838:	4b0f      	ldr	r3, [pc, #60]	; (8001878 <_sbrk+0x50>)
 800183a:	4a10      	ldr	r2, [pc, #64]	; (800187c <_sbrk+0x54>)
 800183c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800183e:	4b0e      	ldr	r3, [pc, #56]	; (8001878 <_sbrk+0x50>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001844:	4b0c      	ldr	r3, [pc, #48]	; (8001878 <_sbrk+0x50>)
 8001846:	681a      	ldr	r2, [r3, #0]
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	4413      	add	r3, r2
 800184c:	466a      	mov	r2, sp
 800184e:	4293      	cmp	r3, r2
 8001850:	d907      	bls.n	8001862 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001852:	f001 fc85 	bl	8003160 <__errno>
 8001856:	4602      	mov	r2, r0
 8001858:	230c      	movs	r3, #12
 800185a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800185c:	f04f 33ff 	mov.w	r3, #4294967295
 8001860:	e006      	b.n	8001870 <_sbrk+0x48>
	}

	heap_end += incr;
 8001862:	4b05      	ldr	r3, [pc, #20]	; (8001878 <_sbrk+0x50>)
 8001864:	681a      	ldr	r2, [r3, #0]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	4413      	add	r3, r2
 800186a:	4a03      	ldr	r2, [pc, #12]	; (8001878 <_sbrk+0x50>)
 800186c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800186e:	68fb      	ldr	r3, [r7, #12]
}
 8001870:	4618      	mov	r0, r3
 8001872:	3710      	adds	r7, #16
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}
 8001878:	200001f8 	.word	0x200001f8
 800187c:	20000210 	.word	0x20000210

08001880 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001880:	480d      	ldr	r0, [pc, #52]	; (80018b8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001882:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001884:	480d      	ldr	r0, [pc, #52]	; (80018bc <LoopForever+0x6>)
  ldr r1, =_edata
 8001886:	490e      	ldr	r1, [pc, #56]	; (80018c0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001888:	4a0e      	ldr	r2, [pc, #56]	; (80018c4 <LoopForever+0xe>)
  movs r3, #0
 800188a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800188c:	e002      	b.n	8001894 <LoopCopyDataInit>

0800188e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800188e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001890:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001892:	3304      	adds	r3, #4

08001894 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001894:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001896:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001898:	d3f9      	bcc.n	800188e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800189a:	4a0b      	ldr	r2, [pc, #44]	; (80018c8 <LoopForever+0x12>)
  ldr r4, =_ebss
 800189c:	4c0b      	ldr	r4, [pc, #44]	; (80018cc <LoopForever+0x16>)
  movs r3, #0
 800189e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018a0:	e001      	b.n	80018a6 <LoopFillZerobss>

080018a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018a4:	3204      	adds	r2, #4

080018a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018a8:	d3fb      	bcc.n	80018a2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80018aa:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 80018ae:	f001 fc5d 	bl	800316c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80018b2:	f7ff fa73 	bl	8000d9c <main>

080018b6 <LoopForever>:

LoopForever:
    b LoopForever
 80018b6:	e7fe      	b.n	80018b6 <LoopForever>
  ldr   r0, =_estack
 80018b8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80018bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018c0:	200001d0 	.word	0x200001d0
  ldr r2, =_sidata
 80018c4:	08004f78 	.word	0x08004f78
  ldr r2, =_sbss
 80018c8:	200001d0 	.word	0x200001d0
  ldr r4, =_ebss
 80018cc:	2000020c 	.word	0x2000020c

080018d0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80018d0:	e7fe      	b.n	80018d0 <ADC_IRQHandler>

080018d2 <_ZNKSt14_Function_base8_M_emptyEv>:
    bool _M_empty() const { return !_M_manager; }
 80018d2:	b480      	push	{r7}
 80018d4:	b083      	sub	sp, #12
 80018d6:	af00      	add	r7, sp, #0
 80018d8:	6078      	str	r0, [r7, #4]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	689b      	ldr	r3, [r3, #8]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	bf0c      	ite	eq
 80018e2:	2301      	moveq	r3, #1
 80018e4:	2300      	movne	r3, #0
 80018e6:	b2db      	uxtb	r3, r3
 80018e8:	4618      	mov	r0, r3
 80018ea:	370c      	adds	r7, #12
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bc80      	pop	{r7}
 80018f0:	4770      	bx	lr

080018f2 <_ZN17BMESensor_HandlerC1ESt8functionIFhhPhmEES0_IFhhPKhmEE>:
#define SRC_BME280_C_
#include "../inc/bme280_driver.h"



BMESensor_Handler::BMESensor_Handler(read_fnc user_read,
 80018f2:	b580      	push	{r7, lr}
 80018f4:	b084      	sub	sp, #16
 80018f6:	af00      	add	r7, sp, #0
 80018f8:	60f8      	str	r0, [r7, #12]
 80018fa:	60b9      	str	r1, [r7, #8]
 80018fc:	607a      	str	r2, [r7, #4]
                                     write_fnc user_write) {
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	4618      	mov	r0, r3
 8001902:	2338      	movs	r3, #56	; 0x38
 8001904:	461a      	mov	r2, r3
 8001906:	2100      	movs	r1, #0
 8001908:	f001 fc6f 	bl	80031ea <memset>
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	3304      	adds	r3, #4
 8001910:	4618      	mov	r0, r3
 8001912:	f000 f869 	bl	80019e8 <_ZNSt8functionIFhhPhmEEC1Ev>
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	3314      	adds	r3, #20
 800191a:	4618      	mov	r0, r3
 800191c:	f000 f871 	bl	8001a02 <_ZNSt8functionIFhhPKhmEEC1Ev>
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	3328      	adds	r3, #40	; 0x28
 8001924:	4618      	mov	r0, r3
 8001926:	f000 f879 	bl	8001a1c <_ZNSt8functionIFvmEEC1Ev>
    dev_.user_read = user_read;
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	3304      	adds	r3, #4
 800192e:	68b9      	ldr	r1, [r7, #8]
 8001930:	4618      	mov	r0, r3
 8001932:	f000 f880 	bl	8001a36 <_ZNSt8functionIFhhPhmEEaSERKS2_>
    dev_.user_write = user_write;
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	3314      	adds	r3, #20
 800193a:	6879      	ldr	r1, [r7, #4]
 800193c:	4618      	mov	r0, r3
 800193e:	f000 f895 	bl	8001a6c <_ZNSt8functionIFhhPKhmEEaSERKS3_>
    dev_.status = init_BME280();
 8001942:	68f8      	ldr	r0, [r7, #12]
 8001944:	f000 f80a 	bl	800195c <_ZN17BMESensor_Handler11init_BME280Ev>
 8001948:	4603      	mov	r3, r0
 800194a:	461a      	mov	r2, r3
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
}
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	4618      	mov	r0, r3
 8001956:	3710      	adds	r7, #16
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}

0800195c <_ZN17BMESensor_Handler11init_BME280Ev>:

BME280_Stat BMESensor_Handler::init_BME280() {
 800195c:	b580      	push	{r7, lr}
 800195e:	b084      	sub	sp, #16
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
    BME280_Stat retStatus = SENSOR_OK;
 8001964:	2300      	movs	r3, #0
 8001966:	73fb      	strb	r3, [r7, #15]
    // read sensor ID
    uint8_t regAddr = BME280_CHIP_ID_ADDR;
 8001968:	23d0      	movs	r3, #208	; 0xd0
 800196a:	73bb      	strb	r3, [r7, #14]
    getRegData(regAddr, &dev_.chipID, 1);
 800196c:	687a      	ldr	r2, [r7, #4]
 800196e:	7bb9      	ldrb	r1, [r7, #14]
 8001970:	2301      	movs	r3, #1
 8001972:	6878      	ldr	r0, [r7, #4]
 8001974:	f000 f80b 	bl	800198e <_ZN17BMESensor_Handler10getRegDataEhPhm>
    if(BME280_CHIP_ID == dev_.chipID) {
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	781b      	ldrb	r3, [r3, #0]
 800197c:	2b60      	cmp	r3, #96	; 0x60
 800197e:	d001      	beq.n	8001984 <_ZN17BMESensor_Handler11init_BME280Ev+0x28>

    }
    else {
        retStatus = SENSOR_NOT_OK;
 8001980:	2301      	movs	r3, #1
 8001982:	73fb      	strb	r3, [r7, #15]
    }
    return retStatus;
 8001984:	7bfb      	ldrb	r3, [r7, #15]
}
 8001986:	4618      	mov	r0, r3
 8001988:	3710      	adds	r7, #16
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}

0800198e <_ZN17BMESensor_Handler10getRegDataEhPhm>:

BME280_Stat BMESensor_Handler::getRegData(u8 regAddr, u8 *regData, u32 len) {
 800198e:	b580      	push	{r7, lr}
 8001990:	b084      	sub	sp, #16
 8001992:	af00      	add	r7, sp, #0
 8001994:	60f8      	str	r0, [r7, #12]
 8001996:	607a      	str	r2, [r7, #4]
 8001998:	603b      	str	r3, [r7, #0]
 800199a:	460b      	mov	r3, r1
 800199c:	72fb      	strb	r3, [r7, #11]
    regAddr |= BME280_SPI_R;
 800199e:	7afb      	ldrb	r3, [r7, #11]
 80019a0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80019a4:	72fb      	strb	r3, [r7, #11]
    dev_.user_read(regAddr, &regData[0], len);
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	1d18      	adds	r0, r3, #4
 80019aa:	7af9      	ldrb	r1, [r7, #11]
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	687a      	ldr	r2, [r7, #4]
 80019b0:	f000 f877 	bl	8001aa2 <_ZNKSt8functionIFhhPhmEEclEhS0_m>
    return SENSOR_OK;
 80019b4:	2300      	movs	r3, #0
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	3710      	adds	r7, #16
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}

080019be <_ZN17BMESensor_Handler15testFunctionPtrEv>:

uint8_t BMESensor_Handler::getChipID() {
    return dev_.chipID;
}

uint8_t BMESensor_Handler::testFunctionPtr() {
 80019be:	b580      	push	{r7, lr}
 80019c0:	b084      	sub	sp, #16
 80019c2:	af00      	add	r7, sp, #0
 80019c4:	6078      	str	r0, [r7, #4]
    uint8_t data_reg = 0xD0;
 80019c6:	23d0      	movs	r3, #208	; 0xd0
 80019c8:	73fb      	strb	r3, [r7, #15]
    u8 data[1] = {0x00};
 80019ca:	2300      	movs	r3, #0
 80019cc:	733b      	strb	r3, [r7, #12]
    return dev_.user_read(data_reg, data, 1);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	1d18      	adds	r0, r3, #4
 80019d2:	f107 020c 	add.w	r2, r7, #12
 80019d6:	7bf9      	ldrb	r1, [r7, #15]
 80019d8:	2301      	movs	r3, #1
 80019da:	f000 f862 	bl	8001aa2 <_ZNKSt8functionIFhhPhmEEclEhS0_m>
 80019de:	4603      	mov	r3, r0
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	3710      	adds	r7, #16
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}

080019e8 <_ZNSt8functionIFhhPhmEEC1Ev>:
      function() noexcept
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b082      	sub	sp, #8
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
      : _Function_base() { }
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	4618      	mov	r0, r3
 80019f4:	f7ff f8c3 	bl	8000b7e <_ZNSt14_Function_baseC1Ev>
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	4618      	mov	r0, r3
 80019fc:	3708      	adds	r7, #8
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}

08001a02 <_ZNSt8functionIFhhPKhmEEC1Ev>:
      function() noexcept
 8001a02:	b580      	push	{r7, lr}
 8001a04:	b082      	sub	sp, #8
 8001a06:	af00      	add	r7, sp, #0
 8001a08:	6078      	str	r0, [r7, #4]
      : _Function_base() { }
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f7ff f8b6 	bl	8000b7e <_ZNSt14_Function_baseC1Ev>
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	4618      	mov	r0, r3
 8001a16:	3708      	adds	r7, #8
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}

08001a1c <_ZNSt8functionIFvmEEC1Ev>:
      function() noexcept
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b082      	sub	sp, #8
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
      : _Function_base() { }
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	4618      	mov	r0, r3
 8001a28:	f7ff f8a9 	bl	8000b7e <_ZNSt14_Function_baseC1Ev>
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	4618      	mov	r0, r3
 8001a30:	3708      	adds	r7, #8
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}

08001a36 <_ZNSt8functionIFhhPhmEEaSERKS2_>:
      operator=(const function& __x)
 8001a36:	b580      	push	{r7, lr}
 8001a38:	b086      	sub	sp, #24
 8001a3a:	af00      	add	r7, sp, #0
 8001a3c:	6078      	str	r0, [r7, #4]
 8001a3e:	6039      	str	r1, [r7, #0]
	function(__x).swap(*this);
 8001a40:	f107 0308 	add.w	r3, r7, #8
 8001a44:	6839      	ldr	r1, [r7, #0]
 8001a46:	4618      	mov	r0, r3
 8001a48:	f000 f85a 	bl	8001b00 <_ZNSt8functionIFhhPhmEEC1ERKS2_>
 8001a4c:	f107 0308 	add.w	r3, r7, #8
 8001a50:	6879      	ldr	r1, [r7, #4]
 8001a52:	4618      	mov	r0, r3
 8001a54:	f000 f876 	bl	8001b44 <_ZNSt8functionIFhhPhmEE4swapERS2_>
 8001a58:	f107 0308 	add.w	r3, r7, #8
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f7ff f8ae 	bl	8000bbe <_ZNSt8functionIFhhPhmEED1Ev>
	return *this;
 8001a62:	687b      	ldr	r3, [r7, #4]
      }
 8001a64:	4618      	mov	r0, r3
 8001a66:	3718      	adds	r7, #24
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}

08001a6c <_ZNSt8functionIFhhPKhmEEaSERKS3_>:
      operator=(const function& __x)
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b086      	sub	sp, #24
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
 8001a74:	6039      	str	r1, [r7, #0]
	function(__x).swap(*this);
 8001a76:	f107 0308 	add.w	r3, r7, #8
 8001a7a:	6839      	ldr	r1, [r7, #0]
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f000 f882 	bl	8001b86 <_ZNSt8functionIFhhPKhmEEC1ERKS3_>
 8001a82:	f107 0308 	add.w	r3, r7, #8
 8001a86:	6879      	ldr	r1, [r7, #4]
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f000 f89e 	bl	8001bca <_ZNSt8functionIFhhPKhmEE4swapERS3_>
 8001a8e:	f107 0308 	add.w	r3, r7, #8
 8001a92:	4618      	mov	r0, r3
 8001a94:	f7ff f8a0 	bl	8000bd8 <_ZNSt8functionIFhhPKhmEED1Ev>
	return *this;
 8001a98:	687b      	ldr	r3, [r7, #4]
      }
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	3718      	adds	r7, #24
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}

08001aa2 <_ZNKSt8functionIFhhPhmEEclEhS0_m>:

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 8001aa2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001aa6:	b084      	sub	sp, #16
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	60f8      	str	r0, [r7, #12]
 8001aac:	607a      	str	r2, [r7, #4]
 8001aae:	603b      	str	r3, [r7, #0]
 8001ab0:	460b      	mov	r3, r1
 8001ab2:	72fb      	strb	r3, [r7, #11]
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f7ff ff0b 	bl	80018d2 <_ZNKSt14_Function_base8_M_emptyEv>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d001      	beq.n	8001ac6 <_ZNKSt8functionIFhhPhmEEclEhS0_m+0x24>
	__throw_bad_function_call();
 8001ac2:	f001 fb42 	bl	800314a <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	68dc      	ldr	r4, [r3, #12]
 8001aca:	68fd      	ldr	r5, [r7, #12]
 8001acc:	f107 030b 	add.w	r3, r7, #11
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f7ff fc91 	bl	80013f8 <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 8001ad6:	4606      	mov	r6, r0
 8001ad8:	1d3b      	adds	r3, r7, #4
 8001ada:	4618      	mov	r0, r3
 8001adc:	f7ff fc96 	bl	800140c <_ZSt7forwardIPhEOT_RNSt16remove_referenceIS1_E4typeE>
 8001ae0:	4680      	mov	r8, r0
 8001ae2:	463b      	mov	r3, r7
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f7ff fc9b 	bl	8001420 <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
 8001aea:	4603      	mov	r3, r0
 8001aec:	4642      	mov	r2, r8
 8001aee:	4631      	mov	r1, r6
 8001af0:	4628      	mov	r0, r5
 8001af2:	47a0      	blx	r4
 8001af4:	4603      	mov	r3, r0
    }
 8001af6:	4618      	mov	r0, r3
 8001af8:	3710      	adds	r7, #16
 8001afa:	46bd      	mov	sp, r7
 8001afc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001b00 <_ZNSt8functionIFhhPhmEEC1ERKS2_>:
    function<_Res(_ArgTypes...)>::
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b082      	sub	sp, #8
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
 8001b08:	6039      	str	r1, [r7, #0]
    : _Function_base()
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f7ff f836 	bl	8000b7e <_ZNSt14_Function_baseC1Ev>
      if (static_cast<bool>(__x))
 8001b12:	6838      	ldr	r0, [r7, #0]
 8001b14:	f000 f87a 	bl	8001c0c <_ZNKSt8functionIFhhPhmEEcvbEv>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d00d      	beq.n	8001b3a <_ZNSt8functionIFhhPhmEEC1ERKS2_+0x3a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	689b      	ldr	r3, [r3, #8]
 8001b22:	6878      	ldr	r0, [r7, #4]
 8001b24:	6839      	ldr	r1, [r7, #0]
 8001b26:	2202      	movs	r2, #2
 8001b28:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	68da      	ldr	r2, [r3, #12]
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	60da      	str	r2, [r3, #12]
	  _M_manager = __x._M_manager;
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	689a      	ldr	r2, [r3, #8]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	609a      	str	r2, [r3, #8]
    }
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	3708      	adds	r7, #8
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}

08001b44 <_ZNSt8functionIFhhPhmEE4swapERS2_>:
      void swap(function& __x) noexcept
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b082      	sub	sp, #8
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
 8001b4c:	6039      	str	r1, [r7, #0]
	std::swap(_M_functor, __x._M_functor);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	683a      	ldr	r2, [r7, #0]
 8001b52:	4611      	mov	r1, r2
 8001b54:	4618      	mov	r0, r3
 8001b56:	f000 f873 	bl	8001c40 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
	std::swap(_M_manager, __x._M_manager);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	f103 0208 	add.w	r2, r3, #8
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	3308      	adds	r3, #8
 8001b64:	4619      	mov	r1, r3
 8001b66:	4610      	mov	r0, r2
 8001b68:	f000 f89b 	bl	8001ca2 <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>
	std::swap(_M_invoker, __x._M_invoker);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	f103 020c 	add.w	r2, r3, #12
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	330c      	adds	r3, #12
 8001b76:	4619      	mov	r1, r3
 8001b78:	4610      	mov	r0, r2
 8001b7a:	f000 f8bb 	bl	8001cf4 <_ZSt4swapIPFhRKSt9_Any_dataOhOPhOmEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISD_ESt18is_move_assignableISD_EEE5valueEvE4typeERSD_SN_>
      }
 8001b7e:	bf00      	nop
 8001b80:	3708      	adds	r7, #8
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}

08001b86 <_ZNSt8functionIFhhPKhmEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
 8001b86:	b580      	push	{r7, lr}
 8001b88:	b082      	sub	sp, #8
 8001b8a:	af00      	add	r7, sp, #0
 8001b8c:	6078      	str	r0, [r7, #4]
 8001b8e:	6039      	str	r1, [r7, #0]
    : _Function_base()
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	4618      	mov	r0, r3
 8001b94:	f7fe fff3 	bl	8000b7e <_ZNSt14_Function_baseC1Ev>
      if (static_cast<bool>(__x))
 8001b98:	6838      	ldr	r0, [r7, #0]
 8001b9a:	f000 f8ca 	bl	8001d32 <_ZNKSt8functionIFhhPKhmEEcvbEv>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d00d      	beq.n	8001bc0 <_ZNSt8functionIFhhPKhmEEC1ERKS3_+0x3a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	689b      	ldr	r3, [r3, #8]
 8001ba8:	6878      	ldr	r0, [r7, #4]
 8001baa:	6839      	ldr	r1, [r7, #0]
 8001bac:	2202      	movs	r2, #2
 8001bae:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	68da      	ldr	r2, [r3, #12]
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	60da      	str	r2, [r3, #12]
	  _M_manager = __x._M_manager;
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	689a      	ldr	r2, [r3, #8]
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	609a      	str	r2, [r3, #8]
    }
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	3708      	adds	r7, #8
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}

08001bca <_ZNSt8functionIFhhPKhmEE4swapERS3_>:
      void swap(function& __x) noexcept
 8001bca:	b580      	push	{r7, lr}
 8001bcc:	b082      	sub	sp, #8
 8001bce:	af00      	add	r7, sp, #0
 8001bd0:	6078      	str	r0, [r7, #4]
 8001bd2:	6039      	str	r1, [r7, #0]
	std::swap(_M_functor, __x._M_functor);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	683a      	ldr	r2, [r7, #0]
 8001bd8:	4611      	mov	r1, r2
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f000 f830 	bl	8001c40 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
	std::swap(_M_manager, __x._M_manager);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	f103 0208 	add.w	r2, r3, #8
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	3308      	adds	r3, #8
 8001bea:	4619      	mov	r1, r3
 8001bec:	4610      	mov	r0, r2
 8001bee:	f000 f858 	bl	8001ca2 <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>
	std::swap(_M_invoker, __x._M_invoker);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	f103 020c 	add.w	r2, r3, #12
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	330c      	adds	r3, #12
 8001bfc:	4619      	mov	r1, r3
 8001bfe:	4610      	mov	r0, r2
 8001c00:	f000 f8b1 	bl	8001d66 <_ZSt4swapIPFhRKSt9_Any_dataOhOPKhOmEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISE_ESt18is_move_assignableISE_EEE5valueEvE4typeERSE_SO_>
      }
 8001c04:	bf00      	nop
 8001c06:	3708      	adds	r7, #8
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}

08001c0c <_ZNKSt8functionIFhhPhmEEcvbEv>:
      explicit operator bool() const noexcept
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b082      	sub	sp, #8
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
      { return !_M_empty(); }
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	4618      	mov	r0, r3
 8001c18:	f7ff fe5b 	bl	80018d2 <_ZNKSt14_Function_base8_M_emptyEv>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	f083 0301 	eor.w	r3, r3, #1
 8001c22:	b2db      	uxtb	r3, r3
 8001c24:	4618      	mov	r0, r3
 8001c26:	3708      	adds	r7, #8
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}

08001c2c <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 8001c2c:	b480      	push	{r7}
 8001c2e:	b083      	sub	sp, #12
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	4618      	mov	r0, r3
 8001c38:	370c      	adds	r7, #12
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bc80      	pop	{r7}
 8001c3e:	4770      	bx	lr

08001c40 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    inline
#if __cplusplus >= 201103L
    typename enable_if<__and_<__not_<__is_tuple_like<_Tp>>,
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
    swap(_Tp& __a, _Tp& __b)
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b084      	sub	sp, #16
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
 8001c48:	6039      	str	r1, [r7, #0]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8001c4a:	6878      	ldr	r0, [r7, #4]
 8001c4c:	f7ff ffee 	bl	8001c2c <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 8001c50:	4602      	mov	r2, r0
 8001c52:	f107 0308 	add.w	r3, r7, #8
 8001c56:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001c5a:	e883 0003 	stmia.w	r3, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 8001c5e:	6838      	ldr	r0, [r7, #0]
 8001c60:	f7ff ffe4 	bl	8001c2c <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 8001c64:	4602      	mov	r2, r0
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001c6c:	e883 0003 	stmia.w	r3, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 8001c70:	f107 0308 	add.w	r3, r7, #8
 8001c74:	4618      	mov	r0, r3
 8001c76:	f7ff ffd9 	bl	8001c2c <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 8001c7a:	4602      	mov	r2, r0
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001c82:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8001c86:	bf00      	nop
 8001c88:	3710      	adds	r7, #16
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}

08001c8e <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>:
    move(_Tp&& __t) noexcept
 8001c8e:	b480      	push	{r7}
 8001c90:	b083      	sub	sp, #12
 8001c92:	af00      	add	r7, sp, #0
 8001c94:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	4618      	mov	r0, r3
 8001c9a:	370c      	adds	r7, #12
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bc80      	pop	{r7}
 8001ca0:	4770      	bx	lr

08001ca2 <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>:
    swap(_Tp& __a, _Tp& __b)
 8001ca2:	b580      	push	{r7, lr}
 8001ca4:	b084      	sub	sp, #16
 8001ca6:	af00      	add	r7, sp, #0
 8001ca8:	6078      	str	r0, [r7, #4]
 8001caa:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8001cac:	6878      	ldr	r0, [r7, #4]
 8001cae:	f7ff ffee 	bl	8001c8e <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 8001cb8:	6838      	ldr	r0, [r7, #0]
 8001cba:	f7ff ffe8 	bl	8001c8e <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	681a      	ldr	r2, [r3, #0]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8001cc6:	f107 030c 	add.w	r3, r7, #12
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f7ff ffdf 	bl	8001c8e <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	681a      	ldr	r2, [r3, #0]
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	601a      	str	r2, [r3, #0]
    }
 8001cd8:	bf00      	nop
 8001cda:	3710      	adds	r7, #16
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}

08001ce0 <_ZSt4moveIRPFhRKSt9_Any_dataOhOPhOmEEONSt16remove_referenceIT_E4typeEOSB_>:
    move(_Tp&& __t) noexcept
 8001ce0:	b480      	push	{r7}
 8001ce2:	b083      	sub	sp, #12
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	4618      	mov	r0, r3
 8001cec:	370c      	adds	r7, #12
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bc80      	pop	{r7}
 8001cf2:	4770      	bx	lr

08001cf4 <_ZSt4swapIPFhRKSt9_Any_dataOhOPhOmEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISD_ESt18is_move_assignableISD_EEE5valueEvE4typeERSD_SN_>:
    swap(_Tp& __a, _Tp& __b)
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b084      	sub	sp, #16
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
 8001cfc:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8001cfe:	6878      	ldr	r0, [r7, #4]
 8001d00:	f7ff ffee 	bl	8001ce0 <_ZSt4moveIRPFhRKSt9_Any_dataOhOPhOmEEONSt16remove_referenceIT_E4typeEOSB_>
 8001d04:	4603      	mov	r3, r0
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 8001d0a:	6838      	ldr	r0, [r7, #0]
 8001d0c:	f7ff ffe8 	bl	8001ce0 <_ZSt4moveIRPFhRKSt9_Any_dataOhOPhOmEEONSt16remove_referenceIT_E4typeEOSB_>
 8001d10:	4603      	mov	r3, r0
 8001d12:	681a      	ldr	r2, [r3, #0]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8001d18:	f107 030c 	add.w	r3, r7, #12
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f7ff ffdf 	bl	8001ce0 <_ZSt4moveIRPFhRKSt9_Any_dataOhOPhOmEEONSt16remove_referenceIT_E4typeEOSB_>
 8001d22:	4603      	mov	r3, r0
 8001d24:	681a      	ldr	r2, [r3, #0]
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	601a      	str	r2, [r3, #0]
    }
 8001d2a:	bf00      	nop
 8001d2c:	3710      	adds	r7, #16
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}

08001d32 <_ZNKSt8functionIFhhPKhmEEcvbEv>:
      explicit operator bool() const noexcept
 8001d32:	b580      	push	{r7, lr}
 8001d34:	b082      	sub	sp, #8
 8001d36:	af00      	add	r7, sp, #0
 8001d38:	6078      	str	r0, [r7, #4]
      { return !_M_empty(); }
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f7ff fdc8 	bl	80018d2 <_ZNKSt14_Function_base8_M_emptyEv>
 8001d42:	4603      	mov	r3, r0
 8001d44:	f083 0301 	eor.w	r3, r3, #1
 8001d48:	b2db      	uxtb	r3, r3
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	3708      	adds	r7, #8
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}

08001d52 <_ZSt4moveIRPFhRKSt9_Any_dataOhOPKhOmEEONSt16remove_referenceIT_E4typeEOSC_>:
    move(_Tp&& __t) noexcept
 8001d52:	b480      	push	{r7}
 8001d54:	b083      	sub	sp, #12
 8001d56:	af00      	add	r7, sp, #0
 8001d58:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	370c      	adds	r7, #12
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bc80      	pop	{r7}
 8001d64:	4770      	bx	lr

08001d66 <_ZSt4swapIPFhRKSt9_Any_dataOhOPKhOmEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISE_ESt18is_move_assignableISE_EEE5valueEvE4typeERSE_SO_>:
    swap(_Tp& __a, _Tp& __b)
 8001d66:	b580      	push	{r7, lr}
 8001d68:	b084      	sub	sp, #16
 8001d6a:	af00      	add	r7, sp, #0
 8001d6c:	6078      	str	r0, [r7, #4]
 8001d6e:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8001d70:	6878      	ldr	r0, [r7, #4]
 8001d72:	f7ff ffee 	bl	8001d52 <_ZSt4moveIRPFhRKSt9_Any_dataOhOPKhOmEEONSt16remove_referenceIT_E4typeEOSC_>
 8001d76:	4603      	mov	r3, r0
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 8001d7c:	6838      	ldr	r0, [r7, #0]
 8001d7e:	f7ff ffe8 	bl	8001d52 <_ZSt4moveIRPFhRKSt9_Any_dataOhOPKhOmEEONSt16remove_referenceIT_E4typeEOSC_>
 8001d82:	4603      	mov	r3, r0
 8001d84:	681a      	ldr	r2, [r3, #0]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8001d8a:	f107 030c 	add.w	r3, r7, #12
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f7ff ffdf 	bl	8001d52 <_ZSt4moveIRPFhRKSt9_Any_dataOhOPKhOmEEONSt16remove_referenceIT_E4typeEOSC_>
 8001d94:	4603      	mov	r3, r0
 8001d96:	681a      	ldr	r2, [r3, #0]
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	601a      	str	r2, [r3, #0]
    }
 8001d9c:	bf00      	nop
 8001d9e:	3710      	adds	r7, #16
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}

08001da4 <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t>:
#define SPI_SR_BSY                      7
#define SPI_SR_FRE                      8



inline uint8_t gpio_baseAddr_to_code(GPIO_RegDef_t *Port) {
 8001da4:	b480      	push	{r7}
 8001da6:	b083      	sub	sp, #12
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
			 (Port == GPIOC) ? 0x02 : \
			 (Port == GPIOD) ? 0x03 : \
			 (Port == GPIOE) ? 0x04 : \
			 (Port == GPIOF) ? 0x05 : \
			 (Port == GPIOG) ? 0x06 : \
			 (Port == GPIOH) ? 0x07 : 0x00 );
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	4a1a      	ldr	r2, [pc, #104]	; (8001e18 <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t+0x74>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d02b      	beq.n	8001e0c <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t+0x68>
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	4a19      	ldr	r2, [pc, #100]	; (8001e1c <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t+0x78>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d025      	beq.n	8001e08 <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t+0x64>
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	4a18      	ldr	r2, [pc, #96]	; (8001e20 <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t+0x7c>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d01f      	beq.n	8001e04 <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t+0x60>
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	4a17      	ldr	r2, [pc, #92]	; (8001e24 <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t+0x80>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d019      	beq.n	8001e00 <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t+0x5c>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	4a16      	ldr	r2, [pc, #88]	; (8001e28 <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t+0x84>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d013      	beq.n	8001dfc <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t+0x58>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	4a15      	ldr	r2, [pc, #84]	; (8001e2c <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t+0x88>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d00d      	beq.n	8001df8 <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t+0x54>
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	4a14      	ldr	r2, [pc, #80]	; (8001e30 <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t+0x8c>)
 8001de0:	4293      	cmp	r3, r2
 8001de2:	d007      	beq.n	8001df4 <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t+0x50>
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	4a13      	ldr	r2, [pc, #76]	; (8001e34 <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t+0x90>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d101      	bne.n	8001df0 <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t+0x4c>
 8001dec:	2307      	movs	r3, #7
 8001dee:	e00e      	b.n	8001e0e <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t+0x6a>
 8001df0:	2300      	movs	r3, #0
 8001df2:	e00c      	b.n	8001e0e <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t+0x6a>
 8001df4:	2306      	movs	r3, #6
 8001df6:	e00a      	b.n	8001e0e <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t+0x6a>
 8001df8:	2305      	movs	r3, #5
 8001dfa:	e008      	b.n	8001e0e <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t+0x6a>
 8001dfc:	2304      	movs	r3, #4
 8001dfe:	e006      	b.n	8001e0e <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t+0x6a>
 8001e00:	2303      	movs	r3, #3
 8001e02:	e004      	b.n	8001e0e <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t+0x6a>
 8001e04:	2302      	movs	r3, #2
 8001e06:	e002      	b.n	8001e0e <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t+0x6a>
 8001e08:	2301      	movs	r3, #1
 8001e0a:	e000      	b.n	8001e0e <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t+0x6a>
 8001e0c:	2300      	movs	r3, #0
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	370c      	adds	r7, #12
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bc80      	pop	{r7}
 8001e16:	4770      	bx	lr
 8001e18:	40020000 	.word	0x40020000
 8001e1c:	40020400 	.word	0x40020400
 8001e20:	40020800 	.word	0x40020800
 8001e24:	40020c00 	.word	0x40020c00
 8001e28:	40021000 	.word	0x40021000
 8001e2c:	40021400 	.word	0x40021400
 8001e30:	40021800 	.word	0x40021800
 8001e34:	40021c00 	.word	0x40021c00

08001e38 <_ZL14get_irq_pinNumh>:
	void GPIO_IRQInterruptConfig(const uint8_t IRQNumber, const uint8_t EnorDi);
	void GPIO_IRQPriorityConfig(const uint8_t IRQNumber, const uint8_t IRQPriority);

};

static inline uint8_t get_irq_pinNum(uint8_t PinNumber) {
 8001e38:	b480      	push	{r7}
 8001e3a:	b083      	sub	sp, #12
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	4603      	mov	r3, r0
 8001e40:	71fb      	strb	r3, [r7, #7]
    return (PinNumber < 5)  ? PinNumber + 6 : \
           (PinNumber < 10) ? IRQ_NO_EXTI9_5 : \
           (PinNumber < 16) ? IRQ_NO_EXTI15_10 : 0;
 8001e42:	79fb      	ldrb	r3, [r7, #7]
 8001e44:	2b04      	cmp	r3, #4
 8001e46:	d803      	bhi.n	8001e50 <_ZL14get_irq_pinNumh+0x18>
 8001e48:	79fb      	ldrb	r3, [r7, #7]
 8001e4a:	3306      	adds	r3, #6
 8001e4c:	b2db      	uxtb	r3, r3
 8001e4e:	e00a      	b.n	8001e66 <_ZL14get_irq_pinNumh+0x2e>
 8001e50:	79fb      	ldrb	r3, [r7, #7]
 8001e52:	2b09      	cmp	r3, #9
 8001e54:	d906      	bls.n	8001e64 <_ZL14get_irq_pinNumh+0x2c>
 8001e56:	79fb      	ldrb	r3, [r7, #7]
 8001e58:	2b0f      	cmp	r3, #15
 8001e5a:	d801      	bhi.n	8001e60 <_ZL14get_irq_pinNumh+0x28>
 8001e5c:	2328      	movs	r3, #40	; 0x28
 8001e5e:	e002      	b.n	8001e66 <_ZL14get_irq_pinNumh+0x2e>
 8001e60:	2300      	movs	r3, #0
 8001e62:	e000      	b.n	8001e66 <_ZL14get_irq_pinNumh+0x2e>
 8001e64:	2317      	movs	r3, #23
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	370c      	adds	r7, #12
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bc80      	pop	{r7}
 8001e6e:	4770      	bx	lr

08001e70 <_ZN12GPIO_HandlerC1EP13GPIO_RegDef_thhhhhhh>:
/*********************************************************************
 * @class      		  - GPIO_Handler
 *
 * @brief             - Constructor, initialize GPIO, clock, IRQ, Alt Function
 **********************************************************************/
GPIO_Handler::GPIO_Handler(
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b086      	sub	sp, #24
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	60f8      	str	r0, [r7, #12]
 8001e78:	60b9      	str	r1, [r7, #8]
 8001e7a:	4611      	mov	r1, r2
 8001e7c:	461a      	mov	r2, r3
 8001e7e:	460b      	mov	r3, r1
 8001e80:	71fb      	strb	r3, [r7, #7]
 8001e82:	4613      	mov	r3, r2
 8001e84:	71bb      	strb	r3, [r7, #6]
		uint8_t GPIO_PinMode,
		uint8_t GPIO_PinSpeed,
		uint8_t GPIO_IRQ_Priority,
		uint8_t GPIO_PinOPType,
		uint8_t GPIO_PinPuPdControl,
		uint8_t GPIO_PinAltFunMode) {
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	461a      	mov	r2, r3
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	6013      	str	r3, [r2, #0]
 8001e8e:	6053      	str	r3, [r2, #4]
 8001e90:	6093      	str	r3, [r2, #8]
	GPIOx_.pGPIOx = ((GPIO_RegDef_t *)(GPIOx_ADDR));
 8001e92:	68ba      	ldr	r2, [r7, #8]
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	601a      	str	r2, [r3, #0]
	GPIOx_.GPIO_PinConfig.GPIO_PinNumber = GPIO_PinNumber;
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	79fa      	ldrb	r2, [r7, #7]
 8001e9c:	711a      	strb	r2, [r3, #4]
	GPIOx_.GPIO_PinConfig.GPIO_PinMode = GPIO_PinMode;
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	79ba      	ldrb	r2, [r7, #6]
 8001ea2:	715a      	strb	r2, [r3, #5]
	GPIOx_.GPIO_PinConfig.GPIO_PinSpeed = GPIO_PinSpeed;
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001eaa:	719a      	strb	r2, [r3, #6]
	GPIOx_.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PinPuPdControl;
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8001eb2:	71da      	strb	r2, [r3, #7]
	GPIOx_.GPIO_PinConfig.GPIO_PinOPType = GPIO_PinOPType;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8001eba:	721a      	strb	r2, [r3, #8]
	GPIOx_.GPIO_PinConfig.GPIO_PinAltFunMode = GPIO_PinAltFunMode;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8001ec2:	725a      	strb	r2, [r3, #9]
	GPIO_PeriClockControl();
 8001ec4:	68f8      	ldr	r0, [r7, #12]
 8001ec6:	f000 f82b 	bl	8001f20 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv>
	GPIO_Init();
 8001eca:	68f8      	ldr	r0, [r7, #12]
 8001ecc:	f000 f8a2 	bl	8002014 <_ZN12GPIO_Handler9GPIO_InitEv>
	// Configure interrupt
	if(GPIO_PinMode >= GPIO_MODE_IT_FT) {
 8001ed0:	79bb      	ldrb	r3, [r7, #6]
 8001ed2:	2b03      	cmp	r3, #3
 8001ed4:	d912      	bls.n	8001efc <_ZN12GPIO_HandlerC1EP13GPIO_RegDef_thhhhhhh+0x8c>
		uint8_t IRQ_number = get_irq_pinNum(GPIO_PinNumber);
 8001ed6:	79fb      	ldrb	r3, [r7, #7]
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f7ff ffad 	bl	8001e38 <_ZL14get_irq_pinNumh>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	75fb      	strb	r3, [r7, #23]
		GPIO_IRQInterruptConfig(IRQ_number, ENABLE);
 8001ee2:	7dfb      	ldrb	r3, [r7, #23]
 8001ee4:	2201      	movs	r2, #1
 8001ee6:	4619      	mov	r1, r3
 8001ee8:	68f8      	ldr	r0, [r7, #12]
 8001eea:	f000 fabd 	bl	8002468 <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh>
		GPIO_IRQPriorityConfig(IRQ_number, GPIO_IRQ_Priority);
 8001eee:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001ef2:	7dfb      	ldrb	r3, [r7, #23]
 8001ef4:	4619      	mov	r1, r3
 8001ef6:	68f8      	ldr	r0, [r7, #12]
 8001ef8:	f000 fb3a 	bl	8002570 <_ZN12GPIO_Handler22GPIO_IRQPriorityConfigEhh>
	}
}
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	4618      	mov	r0, r3
 8001f00:	3718      	adds	r7, #24
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}

08001f06 <_ZN12GPIO_HandlerD1Ev>:
 *
 * @return None
 *
 * @Node: Be careful when using many Peripheral device in the same PORT
 **********************************************************************/
GPIO_Handler::~GPIO_Handler() {
 8001f06:	b580      	push	{r7, lr}
 8001f08:	b082      	sub	sp, #8
 8001f0a:	af00      	add	r7, sp, #0
 8001f0c:	6078      	str	r0, [r7, #4]
	GPIO_DeInit();
 8001f0e:	6878      	ldr	r0, [r7, #4]
 8001f10:	f000 f9d6 	bl	80022c0 <_ZN12GPIO_Handler11GPIO_DeInitEv>
}
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	4618      	mov	r0, r3
 8001f18:	3708      	adds	r7, #8
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}
	...

08001f20 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv>:

// peripheral clock setup
void GPIO_Handler::GPIO_PeriClockControl() {
 8001f20:	b480      	push	{r7}
 8001f22:	b083      	sub	sp, #12
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
	if (GPIOx_.pGPIOx == GPIOA) {
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a30      	ldr	r2, [pc, #192]	; (8001ff0 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xd0>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d106      	bne.n	8001f40 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0x20>
		GPIOA_PCLK_EN();
 8001f32:	4b30      	ldr	r3, [pc, #192]	; (8001ff4 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xd4>)
 8001f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f36:	4a2f      	ldr	r2, [pc, #188]	; (8001ff4 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xd4>)
 8001f38:	f043 0301 	orr.w	r3, r3, #1
 8001f3c:	6313      	str	r3, [r2, #48]	; 0x30
	} else if (GPIOx_.pGPIOx == GPIOG) {
		GPIOG_PCLK_EN();
	} else if (GPIOx_.pGPIOx == GPIOH) {
		GPIOH_PCLK_EN();
	}
}
 8001f3e:	e052      	b.n	8001fe6 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xc6>
	} else if (GPIOx_.pGPIOx == GPIOB) {
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a2c      	ldr	r2, [pc, #176]	; (8001ff8 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xd8>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d106      	bne.n	8001f58 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0x38>
		GPIOB_PCLK_EN();
 8001f4a:	4b2a      	ldr	r3, [pc, #168]	; (8001ff4 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xd4>)
 8001f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f4e:	4a29      	ldr	r2, [pc, #164]	; (8001ff4 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xd4>)
 8001f50:	f043 0302 	orr.w	r3, r3, #2
 8001f54:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001f56:	e046      	b.n	8001fe6 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xc6>
	} else if (GPIOx_.pGPIOx == GPIOC) {
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a27      	ldr	r2, [pc, #156]	; (8001ffc <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xdc>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d106      	bne.n	8001f70 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0x50>
		GPIOC_PCLK_EN();
 8001f62:	4b24      	ldr	r3, [pc, #144]	; (8001ff4 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xd4>)
 8001f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f66:	4a23      	ldr	r2, [pc, #140]	; (8001ff4 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xd4>)
 8001f68:	f043 0304 	orr.w	r3, r3, #4
 8001f6c:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001f6e:	e03a      	b.n	8001fe6 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xc6>
	} else if (GPIOx_.pGPIOx == GPIOD) {
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a22      	ldr	r2, [pc, #136]	; (8002000 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xe0>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d106      	bne.n	8001f88 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0x68>
		GPIOD_PCLK_EN();
 8001f7a:	4b1e      	ldr	r3, [pc, #120]	; (8001ff4 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xd4>)
 8001f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f7e:	4a1d      	ldr	r2, [pc, #116]	; (8001ff4 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xd4>)
 8001f80:	f043 0308 	orr.w	r3, r3, #8
 8001f84:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001f86:	e02e      	b.n	8001fe6 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xc6>
	} else if (GPIOx_.pGPIOx == GPIOE) {
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a1d      	ldr	r2, [pc, #116]	; (8002004 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xe4>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d106      	bne.n	8001fa0 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0x80>
		GPIOE_PCLK_EN();
 8001f92:	4b18      	ldr	r3, [pc, #96]	; (8001ff4 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xd4>)
 8001f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f96:	4a17      	ldr	r2, [pc, #92]	; (8001ff4 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xd4>)
 8001f98:	f043 0310 	orr.w	r3, r3, #16
 8001f9c:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001f9e:	e022      	b.n	8001fe6 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xc6>
	} else if (GPIOx_.pGPIOx == GPIOF) {
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a18      	ldr	r2, [pc, #96]	; (8002008 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xe8>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d106      	bne.n	8001fb8 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0x98>
		GPIOF_PCLK_EN();
 8001faa:	4b12      	ldr	r3, [pc, #72]	; (8001ff4 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xd4>)
 8001fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fae:	4a11      	ldr	r2, [pc, #68]	; (8001ff4 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xd4>)
 8001fb0:	f043 0320 	orr.w	r3, r3, #32
 8001fb4:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001fb6:	e016      	b.n	8001fe6 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xc6>
	} else if (GPIOx_.pGPIOx == GPIOG) {
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a13      	ldr	r2, [pc, #76]	; (800200c <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xec>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d106      	bne.n	8001fd0 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xb0>
		GPIOG_PCLK_EN();
 8001fc2:	4b0c      	ldr	r3, [pc, #48]	; (8001ff4 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xd4>)
 8001fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc6:	4a0b      	ldr	r2, [pc, #44]	; (8001ff4 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xd4>)
 8001fc8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001fcc:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001fce:	e00a      	b.n	8001fe6 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xc6>
	} else if (GPIOx_.pGPIOx == GPIOH) {
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a0e      	ldr	r2, [pc, #56]	; (8002010 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xf0>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d105      	bne.n	8001fe6 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xc6>
		GPIOH_PCLK_EN();
 8001fda:	4b06      	ldr	r3, [pc, #24]	; (8001ff4 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xd4>)
 8001fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fde:	4a05      	ldr	r2, [pc, #20]	; (8001ff4 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xd4>)
 8001fe0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001fe4:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001fe6:	bf00      	nop
 8001fe8:	370c      	adds	r7, #12
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bc80      	pop	{r7}
 8001fee:	4770      	bx	lr
 8001ff0:	40020000 	.word	0x40020000
 8001ff4:	40023800 	.word	0x40023800
 8001ff8:	40020400 	.word	0x40020400
 8001ffc:	40020800 	.word	0x40020800
 8002000:	40020c00 	.word	0x40020c00
 8002004:	40021000 	.word	0x40021000
 8002008:	40021400 	.word	0x40021400
 800200c:	40021800 	.word	0x40021800
 8002010:	40021c00 	.word	0x40021c00

08002014 <_ZN12GPIO_Handler9GPIO_InitEv>:
 *
 * @param None
 *
 * @return None
 **********************************************************************/
void GPIO_Handler::GPIO_Init() {
 8002014:	b580      	push	{r7, lr}
 8002016:	b086      	sub	sp, #24
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
	uint32_t temp = 0;
 800201c:	2300      	movs	r3, #0
 800201e:	617b      	str	r3, [r7, #20]
	// 1. configure the mode of gpio pin
	if(GPIOx_.GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG) {
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	795b      	ldrb	r3, [r3, #5]
 8002024:	2b03      	cmp	r3, #3
 8002026:	d820      	bhi.n	800206a <_ZN12GPIO_Handler9GPIO_InitEv+0x56>
		// the non interrupt mode
		temp = GPIOx_.GPIO_PinConfig.GPIO_PinMode << (2 * GPIOx_.GPIO_PinConfig.GPIO_PinNumber);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	795b      	ldrb	r3, [r3, #5]
 800202c:	461a      	mov	r2, r3
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	791b      	ldrb	r3, [r3, #4]
 8002032:	005b      	lsls	r3, r3, #1
 8002034:	fa02 f303 	lsl.w	r3, r2, r3
 8002038:	617b      	str	r3, [r7, #20]
		GPIOx_.pGPIOx->MODER &= ~(0x3 << (2 * GPIOx_.GPIO_PinConfig.GPIO_PinNumber)); // clearing
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	681a      	ldr	r2, [r3, #0]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	791b      	ldrb	r3, [r3, #4]
 8002044:	005b      	lsls	r3, r3, #1
 8002046:	2103      	movs	r1, #3
 8002048:	fa01 f303 	lsl.w	r3, r1, r3
 800204c:	43db      	mvns	r3, r3
 800204e:	4619      	mov	r1, r3
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	400a      	ands	r2, r1
 8002056:	601a      	str	r2, [r3, #0]
		GPIOx_.pGPIOx->MODER |= temp;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	6819      	ldr	r1, [r3, #0]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	697a      	ldr	r2, [r7, #20]
 8002064:	430a      	orrs	r2, r1
 8002066:	601a      	str	r2, [r3, #0]
 8002068:	e083      	b.n	8002172 <_ZN12GPIO_Handler9GPIO_InitEv+0x15e>
	}
	else {
		// interrupt mode
		if(GPIO_MODE_IT_FT == GPIOx_.GPIO_PinConfig.GPIO_PinMode) {
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	795b      	ldrb	r3, [r3, #5]
 800206e:	2b04      	cmp	r3, #4
 8002070:	d117      	bne.n	80020a2 <_ZN12GPIO_Handler9GPIO_InitEv+0x8e>
			// 1. configure the FTSR
			EXTI->FTSR |= (1 << GPIOx_.GPIO_PinConfig.GPIO_PinNumber);
 8002072:	4b90      	ldr	r3, [pc, #576]	; (80022b4 <_ZN12GPIO_Handler9GPIO_InitEv+0x2a0>)
 8002074:	68db      	ldr	r3, [r3, #12]
 8002076:	687a      	ldr	r2, [r7, #4]
 8002078:	7912      	ldrb	r2, [r2, #4]
 800207a:	4611      	mov	r1, r2
 800207c:	2201      	movs	r2, #1
 800207e:	408a      	lsls	r2, r1
 8002080:	4611      	mov	r1, r2
 8002082:	4a8c      	ldr	r2, [pc, #560]	; (80022b4 <_ZN12GPIO_Handler9GPIO_InitEv+0x2a0>)
 8002084:	430b      	orrs	r3, r1
 8002086:	60d3      	str	r3, [r2, #12]

			// clear the corresponding RTSR bit
			EXTI->RTSR &= ~(1 << GPIOx_.GPIO_PinConfig.GPIO_PinNumber);
 8002088:	4b8a      	ldr	r3, [pc, #552]	; (80022b4 <_ZN12GPIO_Handler9GPIO_InitEv+0x2a0>)
 800208a:	689b      	ldr	r3, [r3, #8]
 800208c:	687a      	ldr	r2, [r7, #4]
 800208e:	7912      	ldrb	r2, [r2, #4]
 8002090:	4611      	mov	r1, r2
 8002092:	2201      	movs	r2, #1
 8002094:	408a      	lsls	r2, r1
 8002096:	43d2      	mvns	r2, r2
 8002098:	4611      	mov	r1, r2
 800209a:	4a86      	ldr	r2, [pc, #536]	; (80022b4 <_ZN12GPIO_Handler9GPIO_InitEv+0x2a0>)
 800209c:	400b      	ands	r3, r1
 800209e:	6093      	str	r3, [r2, #8]
 80020a0:	e035      	b.n	800210e <_ZN12GPIO_Handler9GPIO_InitEv+0xfa>

		}
		else if (GPIO_MODE_IT_RT == GPIOx_.GPIO_PinConfig.GPIO_PinMode) {
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	795b      	ldrb	r3, [r3, #5]
 80020a6:	2b05      	cmp	r3, #5
 80020a8:	d117      	bne.n	80020da <_ZN12GPIO_Handler9GPIO_InitEv+0xc6>
			// 1. configure the RTSR
			EXTI->RTSR |= (1 << GPIOx_.GPIO_PinConfig.GPIO_PinNumber);
 80020aa:	4b82      	ldr	r3, [pc, #520]	; (80022b4 <_ZN12GPIO_Handler9GPIO_InitEv+0x2a0>)
 80020ac:	689b      	ldr	r3, [r3, #8]
 80020ae:	687a      	ldr	r2, [r7, #4]
 80020b0:	7912      	ldrb	r2, [r2, #4]
 80020b2:	4611      	mov	r1, r2
 80020b4:	2201      	movs	r2, #1
 80020b6:	408a      	lsls	r2, r1
 80020b8:	4611      	mov	r1, r2
 80020ba:	4a7e      	ldr	r2, [pc, #504]	; (80022b4 <_ZN12GPIO_Handler9GPIO_InitEv+0x2a0>)
 80020bc:	430b      	orrs	r3, r1
 80020be:	6093      	str	r3, [r2, #8]

			// clear the corresponding RTSR bit
			EXTI->FTSR &= ~(1 << GPIOx_.GPIO_PinConfig.GPIO_PinNumber);
 80020c0:	4b7c      	ldr	r3, [pc, #496]	; (80022b4 <_ZN12GPIO_Handler9GPIO_InitEv+0x2a0>)
 80020c2:	68db      	ldr	r3, [r3, #12]
 80020c4:	687a      	ldr	r2, [r7, #4]
 80020c6:	7912      	ldrb	r2, [r2, #4]
 80020c8:	4611      	mov	r1, r2
 80020ca:	2201      	movs	r2, #1
 80020cc:	408a      	lsls	r2, r1
 80020ce:	43d2      	mvns	r2, r2
 80020d0:	4611      	mov	r1, r2
 80020d2:	4a78      	ldr	r2, [pc, #480]	; (80022b4 <_ZN12GPIO_Handler9GPIO_InitEv+0x2a0>)
 80020d4:	400b      	ands	r3, r1
 80020d6:	60d3      	str	r3, [r2, #12]
 80020d8:	e019      	b.n	800210e <_ZN12GPIO_Handler9GPIO_InitEv+0xfa>
		}
		else if (GPIO_MODE_IT_RFT == GPIOx_.GPIO_PinConfig.GPIO_PinMode) {
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	795b      	ldrb	r3, [r3, #5]
 80020de:	2b06      	cmp	r3, #6
 80020e0:	d115      	bne.n	800210e <_ZN12GPIO_Handler9GPIO_InitEv+0xfa>
			// 1. configure both FTSR and RTSR
			EXTI->FTSR |= (1 << GPIOx_.GPIO_PinConfig.GPIO_PinNumber);
 80020e2:	4b74      	ldr	r3, [pc, #464]	; (80022b4 <_ZN12GPIO_Handler9GPIO_InitEv+0x2a0>)
 80020e4:	68db      	ldr	r3, [r3, #12]
 80020e6:	687a      	ldr	r2, [r7, #4]
 80020e8:	7912      	ldrb	r2, [r2, #4]
 80020ea:	4611      	mov	r1, r2
 80020ec:	2201      	movs	r2, #1
 80020ee:	408a      	lsls	r2, r1
 80020f0:	4611      	mov	r1, r2
 80020f2:	4a70      	ldr	r2, [pc, #448]	; (80022b4 <_ZN12GPIO_Handler9GPIO_InitEv+0x2a0>)
 80020f4:	430b      	orrs	r3, r1
 80020f6:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= (1 << GPIOx_.GPIO_PinConfig.GPIO_PinNumber);
 80020f8:	4b6e      	ldr	r3, [pc, #440]	; (80022b4 <_ZN12GPIO_Handler9GPIO_InitEv+0x2a0>)
 80020fa:	689b      	ldr	r3, [r3, #8]
 80020fc:	687a      	ldr	r2, [r7, #4]
 80020fe:	7912      	ldrb	r2, [r2, #4]
 8002100:	4611      	mov	r1, r2
 8002102:	2201      	movs	r2, #1
 8002104:	408a      	lsls	r2, r1
 8002106:	4611      	mov	r1, r2
 8002108:	4a6a      	ldr	r2, [pc, #424]	; (80022b4 <_ZN12GPIO_Handler9GPIO_InitEv+0x2a0>)
 800210a:	430b      	orrs	r3, r1
 800210c:	6093      	str	r3, [r2, #8]
		}

		// 2. configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 = GPIOx_.GPIO_PinConfig.GPIO_PinNumber >> 2;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	791b      	ldrb	r3, [r3, #4]
 8002112:	109b      	asrs	r3, r3, #2
 8002114:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = GPIOx_.GPIO_PinConfig.GPIO_PinNumber % 4;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	791b      	ldrb	r3, [r3, #4]
 800211a:	f003 0303 	and.w	r3, r3, #3
 800211e:	74bb      	strb	r3, [r7, #18]
		uint8_t portCode = gpio_baseAddr_to_code(GPIOx_.pGPIOx);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4618      	mov	r0, r3
 8002126:	f7ff fe3d 	bl	8001da4 <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t>
 800212a:	4603      	mov	r3, r0
 800212c:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 800212e:	4b62      	ldr	r3, [pc, #392]	; (80022b8 <_ZN12GPIO_Handler9GPIO_InitEv+0x2a4>)
 8002130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002132:	4a61      	ldr	r2, [pc, #388]	; (80022b8 <_ZN12GPIO_Handler9GPIO_InitEv+0x2a4>)
 8002134:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002138:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[temp1] |= (portCode << (4 * temp2));
 800213a:	4a60      	ldr	r2, [pc, #384]	; (80022bc <_ZN12GPIO_Handler9GPIO_InitEv+0x2a8>)
 800213c:	7cfb      	ldrb	r3, [r7, #19]
 800213e:	3302      	adds	r3, #2
 8002140:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002144:	7c79      	ldrb	r1, [r7, #17]
 8002146:	7cbb      	ldrb	r3, [r7, #18]
 8002148:	009b      	lsls	r3, r3, #2
 800214a:	fa01 f303 	lsl.w	r3, r1, r3
 800214e:	4618      	mov	r0, r3
 8002150:	495a      	ldr	r1, [pc, #360]	; (80022bc <_ZN12GPIO_Handler9GPIO_InitEv+0x2a8>)
 8002152:	7cfb      	ldrb	r3, [r7, #19]
 8002154:	4302      	orrs	r2, r0
 8002156:	3302      	adds	r3, #2
 8002158:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		// 3. Enable the exti interrupt delivery using IMR
		EXTI->IMR |= 1 << GPIOx_.GPIO_PinConfig.GPIO_PinNumber;
 800215c:	4b55      	ldr	r3, [pc, #340]	; (80022b4 <_ZN12GPIO_Handler9GPIO_InitEv+0x2a0>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	687a      	ldr	r2, [r7, #4]
 8002162:	7912      	ldrb	r2, [r2, #4]
 8002164:	4611      	mov	r1, r2
 8002166:	2201      	movs	r2, #1
 8002168:	408a      	lsls	r2, r1
 800216a:	4611      	mov	r1, r2
 800216c:	4a51      	ldr	r2, [pc, #324]	; (80022b4 <_ZN12GPIO_Handler9GPIO_InitEv+0x2a0>)
 800216e:	430b      	orrs	r3, r1
 8002170:	6013      	str	r3, [r2, #0]
	}

	temp = 0;
 8002172:	2300      	movs	r3, #0
 8002174:	617b      	str	r3, [r7, #20]
	// 2. configure the speed
	temp = GPIOx_.GPIO_PinConfig.GPIO_PinSpeed << (2 * GPIOx_.GPIO_PinConfig.GPIO_PinNumber);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	799b      	ldrb	r3, [r3, #6]
 800217a:	461a      	mov	r2, r3
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	791b      	ldrb	r3, [r3, #4]
 8002180:	005b      	lsls	r3, r3, #1
 8002182:	fa02 f303 	lsl.w	r3, r2, r3
 8002186:	617b      	str	r3, [r7, #20]
	GPIOx_.pGPIOx->OSPEEDR &= ~(0x3 << (2 * GPIOx_.GPIO_PinConfig.GPIO_PinNumber)); // clearing
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	689a      	ldr	r2, [r3, #8]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	791b      	ldrb	r3, [r3, #4]
 8002192:	005b      	lsls	r3, r3, #1
 8002194:	2103      	movs	r1, #3
 8002196:	fa01 f303 	lsl.w	r3, r1, r3
 800219a:	43db      	mvns	r3, r3
 800219c:	4619      	mov	r1, r3
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	400a      	ands	r2, r1
 80021a4:	609a      	str	r2, [r3, #8]
	GPIOx_.pGPIOx->OSPEEDR |= temp;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	6899      	ldr	r1, [r3, #8]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	697a      	ldr	r2, [r7, #20]
 80021b2:	430a      	orrs	r2, r1
 80021b4:	609a      	str	r2, [r3, #8]

	temp = 0;
 80021b6:	2300      	movs	r3, #0
 80021b8:	617b      	str	r3, [r7, #20]
	// 3. configure the pupd settings
	temp = GPIOx_.GPIO_PinConfig.GPIO_PinPuPdControl << (2 * GPIOx_.GPIO_PinConfig.GPIO_PinNumber);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	79db      	ldrb	r3, [r3, #7]
 80021be:	461a      	mov	r2, r3
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	791b      	ldrb	r3, [r3, #4]
 80021c4:	005b      	lsls	r3, r3, #1
 80021c6:	fa02 f303 	lsl.w	r3, r2, r3
 80021ca:	617b      	str	r3, [r7, #20]
	GPIOx_.pGPIOx->PUPDR &= ~(0x3 << (2 * GPIOx_.GPIO_PinConfig.GPIO_PinNumber));// clearing
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	68da      	ldr	r2, [r3, #12]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	791b      	ldrb	r3, [r3, #4]
 80021d6:	005b      	lsls	r3, r3, #1
 80021d8:	2103      	movs	r1, #3
 80021da:	fa01 f303 	lsl.w	r3, r1, r3
 80021de:	43db      	mvns	r3, r3
 80021e0:	4619      	mov	r1, r3
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	400a      	ands	r2, r1
 80021e8:	60da      	str	r2, [r3, #12]
	GPIOx_.pGPIOx->PUPDR |= temp;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	68d9      	ldr	r1, [r3, #12]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	697a      	ldr	r2, [r7, #20]
 80021f6:	430a      	orrs	r2, r1
 80021f8:	60da      	str	r2, [r3, #12]

	temp = 0;
 80021fa:	2300      	movs	r3, #0
 80021fc:	617b      	str	r3, [r7, #20]
	// 4. configure the optype
	temp = GPIOx_.GPIO_PinConfig.GPIO_PinOPType << GPIOx_.GPIO_PinConfig.GPIO_PinNumber;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	7a1b      	ldrb	r3, [r3, #8]
 8002202:	461a      	mov	r2, r3
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	791b      	ldrb	r3, [r3, #4]
 8002208:	fa02 f303 	lsl.w	r3, r2, r3
 800220c:	617b      	str	r3, [r7, #20]
	GPIOx_.pGPIOx->OTYPER &= ~(0x1 << GPIOx_.GPIO_PinConfig.GPIO_PinNumber); // clearing
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	685a      	ldr	r2, [r3, #4]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	791b      	ldrb	r3, [r3, #4]
 8002218:	4619      	mov	r1, r3
 800221a:	2301      	movs	r3, #1
 800221c:	408b      	lsls	r3, r1
 800221e:	43db      	mvns	r3, r3
 8002220:	4619      	mov	r1, r3
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	400a      	ands	r2, r1
 8002228:	605a      	str	r2, [r3, #4]
	GPIOx_.pGPIOx->OTYPER |= temp;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	6859      	ldr	r1, [r3, #4]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	697a      	ldr	r2, [r7, #20]
 8002236:	430a      	orrs	r2, r1
 8002238:	605a      	str	r2, [r3, #4]

	temp = 0;
 800223a:	2300      	movs	r3, #0
 800223c:	617b      	str	r3, [r7, #20]
	// 5. configure the alt functionality
	if(GPIOx_.GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN) {
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	795b      	ldrb	r3, [r3, #5]
 8002242:	2b02      	cmp	r3, #2
 8002244:	d131      	bne.n	80022aa <_ZN12GPIO_Handler9GPIO_InitEv+0x296>
		// configure alt function register
		uint8_t temp1, temp2;
		temp1 = GPIOx_.GPIO_PinConfig.GPIO_PinNumber / 8;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	791b      	ldrb	r3, [r3, #4]
 800224a:	08db      	lsrs	r3, r3, #3
 800224c:	743b      	strb	r3, [r7, #16]
		temp2 = GPIOx_.GPIO_PinConfig.GPIO_PinNumber % 8;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	791b      	ldrb	r3, [r3, #4]
 8002252:	f003 0307 	and.w	r3, r3, #7
 8002256:	73fb      	strb	r3, [r7, #15]
		GPIOx_.pGPIOx->AFR[temp1] &= ~(0xF << (4 * temp2));
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	7c3a      	ldrb	r2, [r7, #16]
 800225e:	3208      	adds	r2, #8
 8002260:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002264:	7bfb      	ldrb	r3, [r7, #15]
 8002266:	009b      	lsls	r3, r3, #2
 8002268:	220f      	movs	r2, #15
 800226a:	fa02 f303 	lsl.w	r3, r2, r3
 800226e:	43db      	mvns	r3, r3
 8002270:	4618      	mov	r0, r3
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	7c3a      	ldrb	r2, [r7, #16]
 8002278:	4001      	ands	r1, r0
 800227a:	3208      	adds	r2, #8
 800227c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		GPIOx_.pGPIOx->AFR[temp1] |= (GPIOx_.GPIO_PinConfig.GPIO_PinAltFunMode << (4 * temp2));
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	7c3a      	ldrb	r2, [r7, #16]
 8002286:	3208      	adds	r2, #8
 8002288:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	7a5b      	ldrb	r3, [r3, #9]
 8002290:	461a      	mov	r2, r3
 8002292:	7bfb      	ldrb	r3, [r7, #15]
 8002294:	009b      	lsls	r3, r3, #2
 8002296:	fa02 f303 	lsl.w	r3, r2, r3
 800229a:	4618      	mov	r0, r3
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	7c3a      	ldrb	r2, [r7, #16]
 80022a2:	4301      	orrs	r1, r0
 80022a4:	3208      	adds	r2, #8
 80022a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
 80022aa:	bf00      	nop
 80022ac:	3718      	adds	r7, #24
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	bf00      	nop
 80022b4:	40013c00 	.word	0x40013c00
 80022b8:	40023800 	.word	0x40023800
 80022bc:	40013800 	.word	0x40013800

080022c0 <_ZN12GPIO_Handler11GPIO_DeInitEv>:
 *
 * @brief - Reset GPIO Port
 *
 * @return uint8, b'0000_000x
 */
void GPIO_Handler::GPIO_DeInit() {
 80022c0:	b480      	push	{r7}
 80022c2:	b083      	sub	sp, #12
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
	if(GPIOx_.pGPIOx == GPIOA) {
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a48      	ldr	r2, [pc, #288]	; (80023f0 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x130>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d10c      	bne.n	80022ec <_ZN12GPIO_Handler11GPIO_DeInitEv+0x2c>
		GPIOA_REG_RESET();
 80022d2:	4b48      	ldr	r3, [pc, #288]	; (80023f4 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 80022d4:	691b      	ldr	r3, [r3, #16]
 80022d6:	4a47      	ldr	r2, [pc, #284]	; (80023f4 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 80022d8:	f043 0301 	orr.w	r3, r3, #1
 80022dc:	6113      	str	r3, [r2, #16]
 80022de:	4b45      	ldr	r3, [pc, #276]	; (80023f4 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 80022e0:	691b      	ldr	r3, [r3, #16]
 80022e2:	4a44      	ldr	r2, [pc, #272]	; (80023f4 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 80022e4:	f023 0301 	bic.w	r3, r3, #1
 80022e8:	6113      	str	r3, [r2, #16]
		GPIOG_REG_RESET();
	}
	else if (GPIOx_.pGPIOx == GPIOH) {
		GPIOH_REG_RESET();
	}
}
 80022ea:	e07c      	b.n	80023e6 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x126>
	else if (GPIOx_.pGPIOx == GPIOB) {
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a41      	ldr	r2, [pc, #260]	; (80023f8 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x138>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d10c      	bne.n	8002310 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x50>
		GPIOB_REG_RESET();
 80022f6:	4b3f      	ldr	r3, [pc, #252]	; (80023f4 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 80022f8:	691b      	ldr	r3, [r3, #16]
 80022fa:	4a3e      	ldr	r2, [pc, #248]	; (80023f4 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 80022fc:	f043 0302 	orr.w	r3, r3, #2
 8002300:	6113      	str	r3, [r2, #16]
 8002302:	4b3c      	ldr	r3, [pc, #240]	; (80023f4 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 8002304:	691b      	ldr	r3, [r3, #16]
 8002306:	4a3b      	ldr	r2, [pc, #236]	; (80023f4 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 8002308:	f023 0302 	bic.w	r3, r3, #2
 800230c:	6113      	str	r3, [r2, #16]
}
 800230e:	e06a      	b.n	80023e6 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x126>
	else if (GPIOx_.pGPIOx == GPIOC) {
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a39      	ldr	r2, [pc, #228]	; (80023fc <_ZN12GPIO_Handler11GPIO_DeInitEv+0x13c>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d10c      	bne.n	8002334 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x74>
		GPIOC_REG_RESET();
 800231a:	4b36      	ldr	r3, [pc, #216]	; (80023f4 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 800231c:	691b      	ldr	r3, [r3, #16]
 800231e:	4a35      	ldr	r2, [pc, #212]	; (80023f4 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 8002320:	f043 0304 	orr.w	r3, r3, #4
 8002324:	6113      	str	r3, [r2, #16]
 8002326:	4b33      	ldr	r3, [pc, #204]	; (80023f4 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 8002328:	691b      	ldr	r3, [r3, #16]
 800232a:	4a32      	ldr	r2, [pc, #200]	; (80023f4 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 800232c:	f023 0304 	bic.w	r3, r3, #4
 8002330:	6113      	str	r3, [r2, #16]
}
 8002332:	e058      	b.n	80023e6 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x126>
	else if (GPIOx_.pGPIOx == GPIOD) {
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a31      	ldr	r2, [pc, #196]	; (8002400 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x140>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d10c      	bne.n	8002358 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x98>
		GPIOD_REG_RESET();
 800233e:	4b2d      	ldr	r3, [pc, #180]	; (80023f4 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 8002340:	691b      	ldr	r3, [r3, #16]
 8002342:	4a2c      	ldr	r2, [pc, #176]	; (80023f4 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 8002344:	f043 0308 	orr.w	r3, r3, #8
 8002348:	6113      	str	r3, [r2, #16]
 800234a:	4b2a      	ldr	r3, [pc, #168]	; (80023f4 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 800234c:	691b      	ldr	r3, [r3, #16]
 800234e:	4a29      	ldr	r2, [pc, #164]	; (80023f4 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 8002350:	f023 0308 	bic.w	r3, r3, #8
 8002354:	6113      	str	r3, [r2, #16]
}
 8002356:	e046      	b.n	80023e6 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x126>
	else if (GPIOx_.pGPIOx == GPIOE) {
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a29      	ldr	r2, [pc, #164]	; (8002404 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x144>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d10c      	bne.n	800237c <_ZN12GPIO_Handler11GPIO_DeInitEv+0xbc>
		GPIOE_REG_RESET();
 8002362:	4b24      	ldr	r3, [pc, #144]	; (80023f4 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 8002364:	691b      	ldr	r3, [r3, #16]
 8002366:	4a23      	ldr	r2, [pc, #140]	; (80023f4 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 8002368:	f043 0310 	orr.w	r3, r3, #16
 800236c:	6113      	str	r3, [r2, #16]
 800236e:	4b21      	ldr	r3, [pc, #132]	; (80023f4 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 8002370:	691b      	ldr	r3, [r3, #16]
 8002372:	4a20      	ldr	r2, [pc, #128]	; (80023f4 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 8002374:	f023 0310 	bic.w	r3, r3, #16
 8002378:	6113      	str	r3, [r2, #16]
}
 800237a:	e034      	b.n	80023e6 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x126>
	else if (GPIOx_.pGPIOx == GPIOF) {
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a21      	ldr	r2, [pc, #132]	; (8002408 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x148>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d10c      	bne.n	80023a0 <_ZN12GPIO_Handler11GPIO_DeInitEv+0xe0>
		GPIOF_REG_RESET();
 8002386:	4b1b      	ldr	r3, [pc, #108]	; (80023f4 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 8002388:	691b      	ldr	r3, [r3, #16]
 800238a:	4a1a      	ldr	r2, [pc, #104]	; (80023f4 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 800238c:	f043 0320 	orr.w	r3, r3, #32
 8002390:	6113      	str	r3, [r2, #16]
 8002392:	4b18      	ldr	r3, [pc, #96]	; (80023f4 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 8002394:	691b      	ldr	r3, [r3, #16]
 8002396:	4a17      	ldr	r2, [pc, #92]	; (80023f4 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 8002398:	f023 0320 	bic.w	r3, r3, #32
 800239c:	6113      	str	r3, [r2, #16]
}
 800239e:	e022      	b.n	80023e6 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x126>
	else if (GPIOx_.pGPIOx == GPIOG) {
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a19      	ldr	r2, [pc, #100]	; (800240c <_ZN12GPIO_Handler11GPIO_DeInitEv+0x14c>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d10c      	bne.n	80023c4 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x104>
		GPIOG_REG_RESET();
 80023aa:	4b12      	ldr	r3, [pc, #72]	; (80023f4 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 80023ac:	691b      	ldr	r3, [r3, #16]
 80023ae:	4a11      	ldr	r2, [pc, #68]	; (80023f4 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 80023b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80023b4:	6113      	str	r3, [r2, #16]
 80023b6:	4b0f      	ldr	r3, [pc, #60]	; (80023f4 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 80023b8:	691b      	ldr	r3, [r3, #16]
 80023ba:	4a0e      	ldr	r2, [pc, #56]	; (80023f4 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 80023bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80023c0:	6113      	str	r3, [r2, #16]
}
 80023c2:	e010      	b.n	80023e6 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x126>
	else if (GPIOx_.pGPIOx == GPIOH) {
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a11      	ldr	r2, [pc, #68]	; (8002410 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x150>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d10b      	bne.n	80023e6 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x126>
		GPIOH_REG_RESET();
 80023ce:	4b09      	ldr	r3, [pc, #36]	; (80023f4 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 80023d0:	691b      	ldr	r3, [r3, #16]
 80023d2:	4a08      	ldr	r2, [pc, #32]	; (80023f4 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 80023d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023d8:	6113      	str	r3, [r2, #16]
 80023da:	4b06      	ldr	r3, [pc, #24]	; (80023f4 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 80023dc:	691b      	ldr	r3, [r3, #16]
 80023de:	4a05      	ldr	r2, [pc, #20]	; (80023f4 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 80023e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80023e4:	6113      	str	r3, [r2, #16]
}
 80023e6:	bf00      	nop
 80023e8:	370c      	adds	r7, #12
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bc80      	pop	{r7}
 80023ee:	4770      	bx	lr
 80023f0:	40020000 	.word	0x40020000
 80023f4:	40023800 	.word	0x40023800
 80023f8:	40020400 	.word	0x40020400
 80023fc:	40020800 	.word	0x40020800
 8002400:	40020c00 	.word	0x40020c00
 8002404:	40021000 	.word	0x40021000
 8002408:	40021400 	.word	0x40021400
 800240c:	40021800 	.word	0x40021800
 8002410:	40021c00 	.word	0x40021c00

08002414 <_ZN12GPIO_Handler21GPIO_WriteToOutputPinEh>:
 *
 * @brief - Write single bit to Pin
 * @Param[in] Value: write value
 * @return None
 */
void GPIO_Handler::GPIO_WriteToOutputPin(const uint8_t Value) {
 8002414:	b480      	push	{r7}
 8002416:	b083      	sub	sp, #12
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
 800241c:	460b      	mov	r3, r1
 800241e:	70fb      	strb	r3, [r7, #3]
	if(Value == SET) {
 8002420:	78fb      	ldrb	r3, [r7, #3]
 8002422:	2b01      	cmp	r3, #1
 8002424:	d10d      	bne.n	8002442 <_ZN12GPIO_Handler21GPIO_WriteToOutputPinEh+0x2e>
		GPIOx_.pGPIOx->ODR |= (0x1 << GPIOx_.GPIO_PinConfig.GPIO_PinNumber);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	695a      	ldr	r2, [r3, #20]
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	791b      	ldrb	r3, [r3, #4]
 8002430:	4619      	mov	r1, r3
 8002432:	2301      	movs	r3, #1
 8002434:	408b      	lsls	r3, r1
 8002436:	4619      	mov	r1, r3
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	430a      	orrs	r2, r1
 800243e:	615a      	str	r2, [r3, #20]
	}
	else {
		GPIOx_.pGPIOx->ODR &= ~(0x1 << GPIOx_.GPIO_PinConfig.GPIO_PinNumber);
	}
}
 8002440:	e00d      	b.n	800245e <_ZN12GPIO_Handler21GPIO_WriteToOutputPinEh+0x4a>
		GPIOx_.pGPIOx->ODR &= ~(0x1 << GPIOx_.GPIO_PinConfig.GPIO_PinNumber);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	695a      	ldr	r2, [r3, #20]
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	791b      	ldrb	r3, [r3, #4]
 800244c:	4619      	mov	r1, r3
 800244e:	2301      	movs	r3, #1
 8002450:	408b      	lsls	r3, r1
 8002452:	43db      	mvns	r3, r3
 8002454:	4619      	mov	r1, r3
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	400a      	ands	r2, r1
 800245c:	615a      	str	r2, [r3, #20]
}
 800245e:	bf00      	nop
 8002460:	370c      	adds	r7, #12
 8002462:	46bd      	mov	sp, r7
 8002464:	bc80      	pop	{r7}
 8002466:	4770      	bx	lr

08002468 <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh>:
 * @param[in] IRQNumber     - IRQNumber IRQ Position number
 * @param[in] EnorDi		- Enable/Disable Flag
 *
 * @return None
 */
void GPIO_Handler::GPIO_IRQInterruptConfig(const uint8_t IRQNumber, const uint8_t EnorDi) {
 8002468:	b480      	push	{r7}
 800246a:	b083      	sub	sp, #12
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
 8002470:	460b      	mov	r3, r1
 8002472:	70fb      	strb	r3, [r7, #3]
 8002474:	4613      	mov	r3, r2
 8002476:	70bb      	strb	r3, [r7, #2]
	if(EnorDi == ENABLE) {
 8002478:	78bb      	ldrb	r3, [r7, #2]
 800247a:	2b01      	cmp	r3, #1
 800247c:	d133      	bne.n	80024e6 <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0x7e>
		if (IRQNumber <= 31) {
 800247e:	78fb      	ldrb	r3, [r7, #3]
 8002480:	2b1f      	cmp	r3, #31
 8002482:	d80a      	bhi.n	800249a <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0x32>
			//	program ISER0 register
			*NVIC_ISER0 |= (1 << IRQNumber);
 8002484:	4b34      	ldr	r3, [pc, #208]	; (8002558 <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0xf0>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	78fa      	ldrb	r2, [r7, #3]
 800248a:	2101      	movs	r1, #1
 800248c:	fa01 f202 	lsl.w	r2, r1, r2
 8002490:	4611      	mov	r1, r2
 8002492:	4a31      	ldr	r2, [pc, #196]	; (8002558 <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0xf0>)
 8002494:	430b      	orrs	r3, r1
 8002496:	6013      	str	r3, [r2, #0]
			// program ICE2 register
			*NVIC_ICER2 |= (1 << (IRQNumber % 64));
		}
	}

}
 8002498:	e059      	b.n	800254e <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0xe6>
		} else if (IRQNumber > 31 && IRQNumber < 64) {
 800249a:	78fb      	ldrb	r3, [r7, #3]
 800249c:	2b1f      	cmp	r3, #31
 800249e:	d90f      	bls.n	80024c0 <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0x58>
 80024a0:	78fb      	ldrb	r3, [r7, #3]
 80024a2:	2b3f      	cmp	r3, #63	; 0x3f
 80024a4:	d80c      	bhi.n	80024c0 <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0x58>
			*NVIC_ISER1 |= (1 << (IRQNumber % 32));
 80024a6:	4b2d      	ldr	r3, [pc, #180]	; (800255c <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0xf4>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	78fa      	ldrb	r2, [r7, #3]
 80024ac:	f002 021f 	and.w	r2, r2, #31
 80024b0:	2101      	movs	r1, #1
 80024b2:	fa01 f202 	lsl.w	r2, r1, r2
 80024b6:	4611      	mov	r1, r2
 80024b8:	4a28      	ldr	r2, [pc, #160]	; (800255c <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0xf4>)
 80024ba:	430b      	orrs	r3, r1
 80024bc:	6013      	str	r3, [r2, #0]
 80024be:	e046      	b.n	800254e <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0xe6>
		} else if (IRQNumber >= 64 && IRQNumber < 96) {
 80024c0:	78fb      	ldrb	r3, [r7, #3]
 80024c2:	2b3f      	cmp	r3, #63	; 0x3f
 80024c4:	d943      	bls.n	800254e <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0xe6>
 80024c6:	78fb      	ldrb	r3, [r7, #3]
 80024c8:	2b5f      	cmp	r3, #95	; 0x5f
 80024ca:	d840      	bhi.n	800254e <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0xe6>
			*NVIC_ISER2 |= (1 << (IRQNumber % 64));
 80024cc:	4b24      	ldr	r3, [pc, #144]	; (8002560 <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0xf8>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	78fa      	ldrb	r2, [r7, #3]
 80024d2:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80024d6:	2101      	movs	r1, #1
 80024d8:	fa01 f202 	lsl.w	r2, r1, r2
 80024dc:	4611      	mov	r1, r2
 80024de:	4a20      	ldr	r2, [pc, #128]	; (8002560 <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0xf8>)
 80024e0:	430b      	orrs	r3, r1
 80024e2:	6013      	str	r3, [r2, #0]
}
 80024e4:	e033      	b.n	800254e <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0xe6>
		if (IRQNumber <= 31) {
 80024e6:	78fb      	ldrb	r3, [r7, #3]
 80024e8:	2b1f      	cmp	r3, #31
 80024ea:	d80a      	bhi.n	8002502 <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0x9a>
			*NVIC_ICER0 |= (1 << IRQNumber);
 80024ec:	4b1d      	ldr	r3, [pc, #116]	; (8002564 <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0xfc>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	78fa      	ldrb	r2, [r7, #3]
 80024f2:	2101      	movs	r1, #1
 80024f4:	fa01 f202 	lsl.w	r2, r1, r2
 80024f8:	4611      	mov	r1, r2
 80024fa:	4a1a      	ldr	r2, [pc, #104]	; (8002564 <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0xfc>)
 80024fc:	430b      	orrs	r3, r1
 80024fe:	6013      	str	r3, [r2, #0]
}
 8002500:	e025      	b.n	800254e <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0xe6>
		} else if (IRQNumber > 31 && IRQNumber < 64) {
 8002502:	78fb      	ldrb	r3, [r7, #3]
 8002504:	2b1f      	cmp	r3, #31
 8002506:	d90f      	bls.n	8002528 <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0xc0>
 8002508:	78fb      	ldrb	r3, [r7, #3]
 800250a:	2b3f      	cmp	r3, #63	; 0x3f
 800250c:	d80c      	bhi.n	8002528 <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0xc0>
			*NVIC_ICER1 |= (1 << (IRQNumber % 32));
 800250e:	4b16      	ldr	r3, [pc, #88]	; (8002568 <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0x100>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	78fa      	ldrb	r2, [r7, #3]
 8002514:	f002 021f 	and.w	r2, r2, #31
 8002518:	2101      	movs	r1, #1
 800251a:	fa01 f202 	lsl.w	r2, r1, r2
 800251e:	4611      	mov	r1, r2
 8002520:	4a11      	ldr	r2, [pc, #68]	; (8002568 <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0x100>)
 8002522:	430b      	orrs	r3, r1
 8002524:	6013      	str	r3, [r2, #0]
 8002526:	e012      	b.n	800254e <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0xe6>
		} else if (IRQNumber >= 64 && IRQNumber < 96) {
 8002528:	78fb      	ldrb	r3, [r7, #3]
 800252a:	2b3f      	cmp	r3, #63	; 0x3f
 800252c:	d90f      	bls.n	800254e <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0xe6>
 800252e:	78fb      	ldrb	r3, [r7, #3]
 8002530:	2b5f      	cmp	r3, #95	; 0x5f
 8002532:	d80c      	bhi.n	800254e <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0xe6>
			*NVIC_ICER2 |= (1 << (IRQNumber % 64));
 8002534:	4b0d      	ldr	r3, [pc, #52]	; (800256c <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0x104>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	78fa      	ldrb	r2, [r7, #3]
 800253a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800253e:	2101      	movs	r1, #1
 8002540:	fa01 f202 	lsl.w	r2, r1, r2
 8002544:	4611      	mov	r1, r2
 8002546:	4a09      	ldr	r2, [pc, #36]	; (800256c <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0x104>)
 8002548:	430b      	orrs	r3, r1
 800254a:	6013      	str	r3, [r2, #0]
}
 800254c:	e7ff      	b.n	800254e <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0xe6>
 800254e:	bf00      	nop
 8002550:	370c      	adds	r7, #12
 8002552:	46bd      	mov	sp, r7
 8002554:	bc80      	pop	{r7}
 8002556:	4770      	bx	lr
 8002558:	e000e100 	.word	0xe000e100
 800255c:	e000e104 	.word	0xe000e104
 8002560:	e000e108 	.word	0xe000e108
 8002564:	e000e180 	.word	0xe000e180
 8002568:	e000e184 	.word	0xe000e184
 800256c:	e000e188 	.word	0xe000e188

08002570 <_ZN12GPIO_Handler22GPIO_IRQPriorityConfigEhh>:
 *
 * @param[in] IRQNumber: IRQ position for EXIT
 * @param[in] IRPriority: 0->15
 * @return None
 */
void GPIO_Handler::GPIO_IRQPriorityConfig(const uint8_t IRQNumber, const uint8_t IRQPriority) {
 8002570:	b480      	push	{r7}
 8002572:	b085      	sub	sp, #20
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
 8002578:	460b      	mov	r3, r1
 800257a:	70fb      	strb	r3, [r7, #3]
 800257c:	4613      	mov	r3, r2
 800257e:	70bb      	strb	r3, [r7, #2]
	// 1. first lets find out the ipr register
	uint8_t iprx = IRQNumber >> 2;
 8002580:	78fb      	ldrb	r3, [r7, #3]
 8002582:	109b      	asrs	r3, r3, #2
 8002584:	73fb      	strb	r3, [r7, #15]
	uint8_t iprx_section = IRQNumber % 4;
 8002586:	78fb      	ldrb	r3, [r7, #3]
 8002588:	f003 0303 	and.w	r3, r3, #3
 800258c:	73bb      	strb	r3, [r7, #14]
	uint8_t shift_amount = (8 * iprx_section) + (8 - NO_PR_BITS_IMPLEMENTED);
 800258e:	7bbb      	ldrb	r3, [r7, #14]
 8002590:	00db      	lsls	r3, r3, #3
 8002592:	b2db      	uxtb	r3, r3
 8002594:	3304      	adds	r3, #4
 8002596:	737b      	strb	r3, [r7, #13]

	*(NVIC_PR_BASE_ADDR + iprx) |= (IRQPriority << shift_amount);
 8002598:	7bfb      	ldrb	r3, [r7, #15]
 800259a:	f103 5360 	add.w	r3, r3, #939524096	; 0x38000000
 800259e:	f503 5364 	add.w	r3, r3, #14592	; 0x3900
 80025a2:	009b      	lsls	r3, r3, #2
 80025a4:	681a      	ldr	r2, [r3, #0]
 80025a6:	78b9      	ldrb	r1, [r7, #2]
 80025a8:	7b7b      	ldrb	r3, [r7, #13]
 80025aa:	fa01 f303 	lsl.w	r3, r1, r3
 80025ae:	4618      	mov	r0, r3
 80025b0:	7bfb      	ldrb	r3, [r7, #15]
 80025b2:	f103 5360 	add.w	r3, r3, #939524096	; 0x38000000
 80025b6:	f503 5364 	add.w	r3, r3, #14592	; 0x3900
 80025ba:	009b      	lsls	r3, r3, #2
 80025bc:	4619      	mov	r1, r3
 80025be:	ea42 0300 	orr.w	r3, r2, r0
 80025c2:	600b      	str	r3, [r1, #0]
}
 80025c4:	bf00      	nop
 80025c6:	3714      	adds	r7, #20
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bc80      	pop	{r7}
 80025cc:	4770      	bx	lr

080025ce <_ZN11SPI_HandlerC1EP12SPI_RegDef_thhhhhhh>:
/*********************************************************************
 * @class      		  - GPIO_Handler Constructor
 *
 * @brief             - Initialize SPI, GPIOs, Interrupt, etc.
 **********************************************************************/
SPI_Handler::SPI_Handler(SPI_RegDef_t *SPIx_ADDR,
 80025ce:	b580      	push	{r7, lr}
 80025d0:	b084      	sub	sp, #16
 80025d2:	af00      	add	r7, sp, #0
 80025d4:	60f8      	str	r0, [r7, #12]
 80025d6:	60b9      	str	r1, [r7, #8]
 80025d8:	4611      	mov	r1, r2
 80025da:	461a      	mov	r2, r3
 80025dc:	460b      	mov	r3, r1
 80025de:	71fb      	strb	r3, [r7, #7]
 80025e0:	4613      	mov	r3, r2
 80025e2:	71bb      	strb	r3, [r7, #6]
                         uint8_t BusConfig,
                         uint8_t SclkSpeed,
                         uint8_t DFF,
                         uint8_t CPOL,
                         uint8_t CPHA,
                         uint8_t SSM) {
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	4618      	mov	r0, r3
 80025e8:	2320      	movs	r3, #32
 80025ea:	461a      	mov	r2, r3
 80025ec:	2100      	movs	r1, #0
 80025ee:	f000 fdfc 	bl	80031ea <memset>
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	3320      	adds	r3, #32
 80025f6:	4618      	mov	r0, r3
 80025f8:	f000 fc64 	bl	8002ec4 <_ZNSt10unique_ptrI12GPIO_HandlerSt14default_deleteIS0_EEC1IS2_vEEv>
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	3324      	adds	r3, #36	; 0x24
 8002600:	4618      	mov	r0, r3
 8002602:	f000 fc5f 	bl	8002ec4 <_ZNSt10unique_ptrI12GPIO_HandlerSt14default_deleteIS0_EEC1IS2_vEEv>
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	3328      	adds	r3, #40	; 0x28
 800260a:	4618      	mov	r0, r3
 800260c:	f000 fc5a 	bl	8002ec4 <_ZNSt10unique_ptrI12GPIO_HandlerSt14default_deleteIS0_EEC1IS2_vEEv>
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	332c      	adds	r3, #44	; 0x2c
 8002614:	4618      	mov	r0, r3
 8002616:	f000 fc55 	bl	8002ec4 <_ZNSt10unique_ptrI12GPIO_HandlerSt14default_deleteIS0_EEC1IS2_vEEv>
    SPIx_.pSPIx = SPIx_ADDR;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	68ba      	ldr	r2, [r7, #8]
 800261e:	601a      	str	r2, [r3, #0]
    SPIx_.SPIConfig.SPI_DeviceMode = DeviceMode;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	79fa      	ldrb	r2, [r7, #7]
 8002624:	711a      	strb	r2, [r3, #4]
    SPIx_.SPIConfig.SPI_BusConfig = BusConfig;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	79ba      	ldrb	r2, [r7, #6]
 800262a:	715a      	strb	r2, [r3, #5]
    SPIx_.SPIConfig.SPI_SclkSpeed = SclkSpeed;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	7e3a      	ldrb	r2, [r7, #24]
 8002630:	719a      	strb	r2, [r3, #6]
    SPIx_.SPIConfig.SPI_DFF = DFF;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	7f3a      	ldrb	r2, [r7, #28]
 8002636:	71da      	strb	r2, [r3, #7]
    SPIx_.SPIConfig.SPI_CPOL = CPOL;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	f897 2020 	ldrb.w	r2, [r7, #32]
 800263e:	721a      	strb	r2, [r3, #8]
    SPIx_.SPIConfig.SPI_CPHA = CPHA;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8002646:	725a      	strb	r2, [r3, #9]
    SPIx_.SPIConfig.SPI_SSM = SSM;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800264e:	729a      	strb	r2, [r3, #10]
    SPI_GPIOs_Init();
 8002650:	68f8      	ldr	r0, [r7, #12]
 8002652:	f000 f85f 	bl	8002714 <_ZN11SPI_Handler14SPI_GPIOs_InitEv>
    SPI_PeriClockControl();
 8002656:	68f8      	ldr	r0, [r7, #12]
 8002658:	f000 f81a 	bl	8002690 <_ZN11SPI_Handler20SPI_PeriClockControlEv>
    SPI_Init();
 800265c:	68f8      	ldr	r0, [r7, #12]
 800265e:	f000 f8df 	bl	8002820 <_ZN11SPI_Handler8SPI_InitEv>
    SPI_SSIConfig(ENABLE);
 8002662:	2101      	movs	r1, #1
 8002664:	68f8      	ldr	r0, [r7, #12]
 8002666:	f000 fa6e 	bl	8002b46 <_ZN11SPI_Handler13SPI_SSIConfigEh>
    if(SPI_SSM_EN == SPIx_.SPIConfig.SPI_SSM) {
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	7a9b      	ldrb	r3, [r3, #10]
 800266e:	2b01      	cmp	r3, #1
 8002670:	d104      	bne.n	800267c <_ZN11SPI_HandlerC1EP12SPI_RegDef_thhhhhhh+0xae>
    	SPI_SSOEConfig(DISABLE);
 8002672:	2100      	movs	r1, #0
 8002674:	68f8      	ldr	r0, [r7, #12]
 8002676:	f000 fa47 	bl	8002b08 <_ZN11SPI_Handler14SPI_SSOEConfigEh>
 800267a:	e003      	b.n	8002684 <_ZN11SPI_HandlerC1EP12SPI_RegDef_thhhhhhh+0xb6>
    }
    else {
    	SPI_SSOEConfig(ENABLE);
 800267c:	2101      	movs	r1, #1
 800267e:	68f8      	ldr	r0, [r7, #12]
 8002680:	f000 fa42 	bl	8002b08 <_ZN11SPI_Handler14SPI_SSOEConfigEh>
    }
}
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	4618      	mov	r0, r3
 8002688:	3710      	adds	r7, #16
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}
	...

08002690 <_ZN11SPI_Handler20SPI_PeriClockControlEv>:
 *
 * @return None
 *
 * @Node:
 **********************************************************************/
void SPI_Handler::SPI_PeriClockControl() {
 8002690:	b480      	push	{r7}
 8002692:	b083      	sub	sp, #12
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
	if (SPI1 == SPIx_.pSPIx) {
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a18      	ldr	r2, [pc, #96]	; (8002700 <_ZN11SPI_Handler20SPI_PeriClockControlEv+0x70>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d106      	bne.n	80026b0 <_ZN11SPI_Handler20SPI_PeriClockControlEv+0x20>
		SPI1_PCLK_EN();
 80026a2:	4b18      	ldr	r3, [pc, #96]	; (8002704 <_ZN11SPI_Handler20SPI_PeriClockControlEv+0x74>)
 80026a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026a6:	4a17      	ldr	r2, [pc, #92]	; (8002704 <_ZN11SPI_Handler20SPI_PeriClockControlEv+0x74>)
 80026a8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80026ac:	6453      	str	r3, [r2, #68]	; 0x44
		SPI3_PCLK_EN();
	}
	else if (SPI4 == SPIx_.pSPIx) {
		SPI4_PCLK_EN();
	}
}
 80026ae:	e022      	b.n	80026f6 <_ZN11SPI_Handler20SPI_PeriClockControlEv+0x66>
	else if (SPI2 == SPIx_.pSPIx) {
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a14      	ldr	r2, [pc, #80]	; (8002708 <_ZN11SPI_Handler20SPI_PeriClockControlEv+0x78>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d106      	bne.n	80026c8 <_ZN11SPI_Handler20SPI_PeriClockControlEv+0x38>
		SPI2_PCLK_EN();
 80026ba:	4b12      	ldr	r3, [pc, #72]	; (8002704 <_ZN11SPI_Handler20SPI_PeriClockControlEv+0x74>)
 80026bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026be:	4a11      	ldr	r2, [pc, #68]	; (8002704 <_ZN11SPI_Handler20SPI_PeriClockControlEv+0x74>)
 80026c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026c4:	6413      	str	r3, [r2, #64]	; 0x40
}
 80026c6:	e016      	b.n	80026f6 <_ZN11SPI_Handler20SPI_PeriClockControlEv+0x66>
	else if (SPI3 == SPIx_.pSPIx) {
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a0f      	ldr	r2, [pc, #60]	; (800270c <_ZN11SPI_Handler20SPI_PeriClockControlEv+0x7c>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d106      	bne.n	80026e0 <_ZN11SPI_Handler20SPI_PeriClockControlEv+0x50>
		SPI3_PCLK_EN();
 80026d2:	4b0c      	ldr	r3, [pc, #48]	; (8002704 <_ZN11SPI_Handler20SPI_PeriClockControlEv+0x74>)
 80026d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d6:	4a0b      	ldr	r2, [pc, #44]	; (8002704 <_ZN11SPI_Handler20SPI_PeriClockControlEv+0x74>)
 80026d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026dc:	6413      	str	r3, [r2, #64]	; 0x40
}
 80026de:	e00a      	b.n	80026f6 <_ZN11SPI_Handler20SPI_PeriClockControlEv+0x66>
	else if (SPI4 == SPIx_.pSPIx) {
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a0a      	ldr	r2, [pc, #40]	; (8002710 <_ZN11SPI_Handler20SPI_PeriClockControlEv+0x80>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d105      	bne.n	80026f6 <_ZN11SPI_Handler20SPI_PeriClockControlEv+0x66>
		SPI4_PCLK_EN();
 80026ea:	4b06      	ldr	r3, [pc, #24]	; (8002704 <_ZN11SPI_Handler20SPI_PeriClockControlEv+0x74>)
 80026ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ee:	4a05      	ldr	r2, [pc, #20]	; (8002704 <_ZN11SPI_Handler20SPI_PeriClockControlEv+0x74>)
 80026f0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80026f4:	6453      	str	r3, [r2, #68]	; 0x44
}
 80026f6:	bf00      	nop
 80026f8:	370c      	adds	r7, #12
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bc80      	pop	{r7}
 80026fe:	4770      	bx	lr
 8002700:	40013000 	.word	0x40013000
 8002704:	40023800 	.word	0x40023800
 8002708:	40003800 	.word	0x40003800
 800270c:	40003c00 	.word	0x40003c00
 8002710:	40013400 	.word	0x40013400

08002714 <_ZN11SPI_Handler14SPI_GPIOs_InitEv>:
 *
 * @param None
 *
 * @return None
 **********************************************************************/
void SPI_Handler::SPI_GPIOs_Init() {
 8002714:	b5b0      	push	{r4, r5, r7, lr}
 8002716:	b088      	sub	sp, #32
 8002718:	af06      	add	r7, sp, #24
 800271a:	6078      	str	r0, [r7, #4]
    if (SPIx_.pSPIx == SPI1) {
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a3d      	ldr	r2, [pc, #244]	; (8002818 <_ZN11SPI_Handler14SPI_GPIOs_InitEv+0x104>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d173      	bne.n	800280e <_ZN11SPI_Handler14SPI_GPIOs_InitEv+0xfa>
        SPI_Sck.reset( new GPIO_Handler(GPIOA,
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	f103 0420 	add.w	r4, r3, #32
                                        GPIO_MODE_ALTFN,
                                        GPIO_SPEED_HIGH,
                                        IRQ_Prio_NO_15,
                                        GPIO_OP_TYPE_PP,
                                        GPIO_NO_PUPD,
                                        5) );
 800272c:	200c      	movs	r0, #12
 800272e:	f000 fcee 	bl	800310e <_Znwj>
 8002732:	4603      	mov	r3, r0
 8002734:	461d      	mov	r5, r3
 8002736:	2305      	movs	r3, #5
 8002738:	9304      	str	r3, [sp, #16]
 800273a:	2300      	movs	r3, #0
 800273c:	9303      	str	r3, [sp, #12]
 800273e:	2300      	movs	r3, #0
 8002740:	9302      	str	r3, [sp, #8]
 8002742:	230f      	movs	r3, #15
 8002744:	9301      	str	r3, [sp, #4]
 8002746:	2303      	movs	r3, #3
 8002748:	9300      	str	r3, [sp, #0]
 800274a:	2302      	movs	r3, #2
 800274c:	2205      	movs	r2, #5
 800274e:	4933      	ldr	r1, [pc, #204]	; (800281c <_ZN11SPI_Handler14SPI_GPIOs_InitEv+0x108>)
 8002750:	4628      	mov	r0, r5
 8002752:	f7ff fb8d 	bl	8001e70 <_ZN12GPIO_HandlerC1EP13GPIO_RegDef_thhhhhhh>
        SPI_Sck.reset( new GPIO_Handler(GPIOA,
 8002756:	4629      	mov	r1, r5
 8002758:	4620      	mov	r0, r4
 800275a:	f000 fbc3 	bl	8002ee4 <_ZNSt10unique_ptrI12GPIO_HandlerSt14default_deleteIS0_EE5resetEPS0_>

        SPI_MOSI.reset( new GPIO_Handler(GPIOA,
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	f103 0424 	add.w	r4, r3, #36	; 0x24
                                        GPIO_MODE_ALTFN,
                                        GPIO_SPEED_HIGH,
                                        IRQ_Prio_NO_15,
                                        GPIO_OP_TYPE_PP,
                                        GPIO_NO_PUPD,
                                        5) );
 8002764:	200c      	movs	r0, #12
 8002766:	f000 fcd2 	bl	800310e <_Znwj>
 800276a:	4603      	mov	r3, r0
 800276c:	461d      	mov	r5, r3
 800276e:	2305      	movs	r3, #5
 8002770:	9304      	str	r3, [sp, #16]
 8002772:	2300      	movs	r3, #0
 8002774:	9303      	str	r3, [sp, #12]
 8002776:	2300      	movs	r3, #0
 8002778:	9302      	str	r3, [sp, #8]
 800277a:	230f      	movs	r3, #15
 800277c:	9301      	str	r3, [sp, #4]
 800277e:	2303      	movs	r3, #3
 8002780:	9300      	str	r3, [sp, #0]
 8002782:	2302      	movs	r3, #2
 8002784:	2207      	movs	r2, #7
 8002786:	4925      	ldr	r1, [pc, #148]	; (800281c <_ZN11SPI_Handler14SPI_GPIOs_InitEv+0x108>)
 8002788:	4628      	mov	r0, r5
 800278a:	f7ff fb71 	bl	8001e70 <_ZN12GPIO_HandlerC1EP13GPIO_RegDef_thhhhhhh>
        SPI_MOSI.reset( new GPIO_Handler(GPIOA,
 800278e:	4629      	mov	r1, r5
 8002790:	4620      	mov	r0, r4
 8002792:	f000 fba7 	bl	8002ee4 <_ZNSt10unique_ptrI12GPIO_HandlerSt14default_deleteIS0_EE5resetEPS0_>

        SPI_MISO.reset( new GPIO_Handler(GPIOA,
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	f103 0428 	add.w	r4, r3, #40	; 0x28
                                        GPIO_MODE_ALTFN,
                                        GPIO_SPEED_HIGH,
                                        IRQ_Prio_NO_15,
                                        GPIO_OP_TYPE_PP,
                                        GPIO_NO_PUPD,
                                        5) );
 800279c:	200c      	movs	r0, #12
 800279e:	f000 fcb6 	bl	800310e <_Znwj>
 80027a2:	4603      	mov	r3, r0
 80027a4:	461d      	mov	r5, r3
 80027a6:	2305      	movs	r3, #5
 80027a8:	9304      	str	r3, [sp, #16]
 80027aa:	2300      	movs	r3, #0
 80027ac:	9303      	str	r3, [sp, #12]
 80027ae:	2300      	movs	r3, #0
 80027b0:	9302      	str	r3, [sp, #8]
 80027b2:	230f      	movs	r3, #15
 80027b4:	9301      	str	r3, [sp, #4]
 80027b6:	2303      	movs	r3, #3
 80027b8:	9300      	str	r3, [sp, #0]
 80027ba:	2302      	movs	r3, #2
 80027bc:	2206      	movs	r2, #6
 80027be:	4917      	ldr	r1, [pc, #92]	; (800281c <_ZN11SPI_Handler14SPI_GPIOs_InitEv+0x108>)
 80027c0:	4628      	mov	r0, r5
 80027c2:	f7ff fb55 	bl	8001e70 <_ZN12GPIO_HandlerC1EP13GPIO_RegDef_thhhhhhh>
        SPI_MISO.reset( new GPIO_Handler(GPIOA,
 80027c6:	4629      	mov	r1, r5
 80027c8:	4620      	mov	r0, r4
 80027ca:	f000 fb8b 	bl	8002ee4 <_ZNSt10unique_ptrI12GPIO_HandlerSt14default_deleteIS0_EE5resetEPS0_>


        if(SPIx_.SPIConfig.SPI_SSM == SPI_SSM_DI) {
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	7a9b      	ldrb	r3, [r3, #10]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d11b      	bne.n	800280e <_ZN11SPI_Handler14SPI_GPIOs_InitEv+0xfa>
            // Hardware NSS enable, configure for PA4
            SPI_NSS.reset( new GPIO_Handler(GPIOA,
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	f103 042c 	add.w	r4, r3, #44	; 0x2c
                                            GPIO_MODE_ALTFN,
                                            GPIO_SPEED_HIGH,
                                            IRQ_Prio_NO_15,
                                            GPIO_OP_TYPE_PP,
                                            GPIO_NO_PUPD,
                                            5) );
 80027dc:	200c      	movs	r0, #12
 80027de:	f000 fc96 	bl	800310e <_Znwj>
 80027e2:	4603      	mov	r3, r0
 80027e4:	461d      	mov	r5, r3
 80027e6:	2305      	movs	r3, #5
 80027e8:	9304      	str	r3, [sp, #16]
 80027ea:	2300      	movs	r3, #0
 80027ec:	9303      	str	r3, [sp, #12]
 80027ee:	2300      	movs	r3, #0
 80027f0:	9302      	str	r3, [sp, #8]
 80027f2:	230f      	movs	r3, #15
 80027f4:	9301      	str	r3, [sp, #4]
 80027f6:	2303      	movs	r3, #3
 80027f8:	9300      	str	r3, [sp, #0]
 80027fa:	2302      	movs	r3, #2
 80027fc:	2204      	movs	r2, #4
 80027fe:	4907      	ldr	r1, [pc, #28]	; (800281c <_ZN11SPI_Handler14SPI_GPIOs_InitEv+0x108>)
 8002800:	4628      	mov	r0, r5
 8002802:	f7ff fb35 	bl	8001e70 <_ZN12GPIO_HandlerC1EP13GPIO_RegDef_thhhhhhh>
            SPI_NSS.reset( new GPIO_Handler(GPIOA,
 8002806:	4629      	mov	r1, r5
 8002808:	4620      	mov	r0, r4
 800280a:	f000 fb6b 	bl	8002ee4 <_ZNSt10unique_ptrI12GPIO_HandlerSt14default_deleteIS0_EE5resetEPS0_>
        }
    }
}
 800280e:	bf00      	nop
 8002810:	3708      	adds	r7, #8
 8002812:	46bd      	mov	sp, r7
 8002814:	bdb0      	pop	{r4, r5, r7, pc}
 8002816:	bf00      	nop
 8002818:	40013000 	.word	0x40013000
 800281c:	40020000 	.word	0x40020000

08002820 <_ZN11SPI_Handler8SPI_InitEv>:
 *
 * @param None
 *
 * @return None
 **********************************************************************/
void SPI_Handler::SPI_Init() {
 8002820:	b480      	push	{r7}
 8002822:	b085      	sub	sp, #20
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
    // Lets configure the SPI_CR1 register
    uint32_t tempReg = 0;
 8002828:	2300      	movs	r3, #0
 800282a:	60fb      	str	r3, [r7, #12]

    // 1. configure the device mode
    tempReg |= SPIx_.SPIConfig.SPI_DeviceMode << SPI_CR1_MSTR;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	791b      	ldrb	r3, [r3, #4]
 8002830:	009b      	lsls	r3, r3, #2
 8002832:	461a      	mov	r2, r3
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	4313      	orrs	r3, r2
 8002838:	60fb      	str	r3, [r7, #12]
    // 2. configure the bus config
    if(SPI_BUS_CONFIG_FD == SPIx_.SPIConfig.SPI_BusConfig) {
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	795b      	ldrb	r3, [r3, #5]
 800283e:	2b01      	cmp	r3, #1
 8002840:	d104      	bne.n	800284c <_ZN11SPI_Handler8SPI_InitEv+0x2c>
        // bidi mode should be cleared
        tempReg &= ~(1 << SPI_CR1_BIDIMODE);
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002848:	60fb      	str	r3, [r7, #12]
 800284a:	e018      	b.n	800287e <_ZN11SPI_Handler8SPI_InitEv+0x5e>
    }
    else if(SPI_BUS_CONFIG_HD == SPIx_.SPIConfig.SPI_BusConfig) {
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	795b      	ldrb	r3, [r3, #5]
 8002850:	2b02      	cmp	r3, #2
 8002852:	d108      	bne.n	8002866 <_ZN11SPI_Handler8SPI_InitEv+0x46>
        // bidi mode should be set
        tempReg |= (1 << SPI_CR1_BIDIMODE);
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800285a:	60fb      	str	r3, [r7, #12]
        // bidioe mode should be set
        tempReg |= (1 << SPI_CR1_BIDIOE);
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002862:	60fb      	str	r3, [r7, #12]
 8002864:	e00b      	b.n	800287e <_ZN11SPI_Handler8SPI_InitEv+0x5e>
    }
    else if(SPI_BUS_CONFIG_SIMPLEX_RXONLY == SPIx_.SPIConfig.SPI_BusConfig) {
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	795b      	ldrb	r3, [r3, #5]
 800286a:	2b03      	cmp	r3, #3
 800286c:	d107      	bne.n	800287e <_ZN11SPI_Handler8SPI_InitEv+0x5e>
        // bidi mode should be cleared, for active SCLK, because SLCK is only activate when MOSI is activate
        tempReg &= ~(1 << SPI_CR1_BIDIMODE);
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002874:	60fb      	str	r3, [r7, #12]
        // RXONLY should be set
        tempReg |= (1 << SPI_CR1_RXONLY);
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800287c:	60fb      	str	r3, [r7, #12]
    }

    // 3. configure for clock speed
    tempReg |= (SPIx_.SPIConfig.SPI_SclkSpeed << SPI_CR1_BR);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	799b      	ldrb	r3, [r3, #6]
 8002882:	00db      	lsls	r3, r3, #3
 8002884:	461a      	mov	r2, r3
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	4313      	orrs	r3, r2
 800288a:	60fb      	str	r3, [r7, #12]

    // 4. configure for data format
    tempReg |= (SPIx_.SPIConfig.SPI_DFF << SPI_CR1_DFF);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	79db      	ldrb	r3, [r3, #7]
 8002890:	02db      	lsls	r3, r3, #11
 8002892:	461a      	mov	r2, r3
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	4313      	orrs	r3, r2
 8002898:	60fb      	str	r3, [r7, #12]

    // 5. configure CPOL
    tempReg |= (SPIx_.SPIConfig.SPI_CPOL << SPI_CR1_CPOL);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	7a1b      	ldrb	r3, [r3, #8]
 800289e:	005b      	lsls	r3, r3, #1
 80028a0:	461a      	mov	r2, r3
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	4313      	orrs	r3, r2
 80028a6:	60fb      	str	r3, [r7, #12]

    // 6. configure CPOA
    tempReg |= (SPIx_.SPIConfig.SPI_CPHA << SPI_CR1_CPHA);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	7a5b      	ldrb	r3, [r3, #9]
 80028ac:	461a      	mov	r2, r3
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	4313      	orrs	r3, r2
 80028b2:	60fb      	str	r3, [r7, #12]

    tempReg |= (SPIx_.SPIConfig.SPI_SSM << SPI_CR1_SSM);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	7a9b      	ldrb	r3, [r3, #10]
 80028b8:	025b      	lsls	r3, r3, #9
 80028ba:	461a      	mov	r2, r3
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	4313      	orrs	r3, r2
 80028c0:	60fb      	str	r3, [r7, #12]

    SPIx_.pSPIx->CR1 = tempReg;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	68fa      	ldr	r2, [r7, #12]
 80028c8:	601a      	str	r2, [r3, #0]
}
 80028ca:	bf00      	nop
 80028cc:	3714      	adds	r7, #20
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bc80      	pop	{r7}
 80028d2:	4770      	bx	lr

080028d4 <_ZN11SPI_Handler21SPI_PeripheralControlEh>:
 *
 * @param None
 *
 * @return None
 **********************************************************************/
void SPI_Handler::SPI_PeripheralControl(uint8_t EnOrDi) {
 80028d4:	b480      	push	{r7}
 80028d6:	b083      	sub	sp, #12
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
 80028dc:	460b      	mov	r3, r1
 80028de:	70fb      	strb	r3, [r7, #3]
    if(ENABLE == EnOrDi) {
 80028e0:	78fb      	ldrb	r3, [r7, #3]
 80028e2:	2b01      	cmp	r3, #1
 80028e4:	d108      	bne.n	80028f8 <_ZN11SPI_Handler21SPI_PeripheralControlEh+0x24>
        SPIx_.pSPIx->CR1 |= (1 << SPI_CR1_SPE);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	681a      	ldr	r2, [r3, #0]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80028f4:	601a      	str	r2, [r3, #0]
    }
    else {
        SPIx_.pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
    }
}
 80028f6:	e007      	b.n	8002908 <_ZN11SPI_Handler21SPI_PeripheralControlEh+0x34>
        SPIx_.pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	681a      	ldr	r2, [r3, #0]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002906:	601a      	str	r2, [r3, #0]
}
 8002908:	bf00      	nop
 800290a:	370c      	adds	r7, #12
 800290c:	46bd      	mov	sp, r7
 800290e:	bc80      	pop	{r7}
 8002910:	4770      	bx	lr

08002912 <_ZN11SPI_Handler17SPI_GetFlagStatusEh>:
 *
 * @param[in]         - FlagName: check @FLAG_NAME_STATUS
 *
 * @return None
 **********************************************************************/
inline uint8_t SPI_Handler::SPI_GetFlagStatus(const uint8_t FlagName) {
 8002912:	b480      	push	{r7}
 8002914:	b083      	sub	sp, #12
 8002916:	af00      	add	r7, sp, #0
 8002918:	6078      	str	r0, [r7, #4]
 800291a:	460b      	mov	r3, r1
 800291c:	70fb      	strb	r3, [r7, #3]
    return (SPIx_.pSPIx->SR & FlagName) ? FLAG_SET : FLAG_RESET;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	689a      	ldr	r2, [r3, #8]
 8002924:	78fb      	ldrb	r3, [r7, #3]
 8002926:	4013      	ands	r3, r2
 8002928:	2b00      	cmp	r3, #0
 800292a:	d001      	beq.n	8002930 <_ZN11SPI_Handler17SPI_GetFlagStatusEh+0x1e>
 800292c:	2301      	movs	r3, #1
 800292e:	e000      	b.n	8002932 <_ZN11SPI_Handler17SPI_GetFlagStatusEh+0x20>
 8002930:	2300      	movs	r3, #0
}
 8002932:	4618      	mov	r0, r3
 8002934:	370c      	adds	r7, #12
 8002936:	46bd      	mov	sp, r7
 8002938:	bc80      	pop	{r7}
 800293a:	4770      	bx	lr

0800293c <_ZN11SPI_Handler12SPI_SendDataEPKhm>:
 * @param[in]: pTxBuffer: pointer to Tx buffer
 * @param[in]: Len: length of data transfer
 *
 * @return None
 **********************************************************************/
void SPI_Handler::SPI_SendData(const uint8_t *pTxBuffer, uint32_t Len) {
 800293c:	b580      	push	{r7, lr}
 800293e:	b084      	sub	sp, #16
 8002940:	af00      	add	r7, sp, #0
 8002942:	60f8      	str	r0, [r7, #12]
 8002944:	60b9      	str	r1, [r7, #8]
 8002946:	607a      	str	r2, [r7, #4]
	if ((SPIx_.pSPIx->CR1 & SPI_CR1_SPE_MSK) != SPI_CR1_SPE_MSK) {
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002952:	2b40      	cmp	r3, #64	; 0x40
 8002954:	bf14      	ite	ne
 8002956:	2301      	movne	r3, #1
 8002958:	2300      	moveq	r3, #0
 800295a:	b2db      	uxtb	r3, r3
 800295c:	2b00      	cmp	r3, #0
 800295e:	d003      	beq.n	8002968 <_ZN11SPI_Handler12SPI_SendDataEPKhm+0x2c>
		SPI_PeripheralControl(ENABLE);
 8002960:	2101      	movs	r1, #1
 8002962:	68f8      	ldr	r0, [r7, #12]
 8002964:	f7ff ffb6 	bl	80028d4 <_ZN11SPI_Handler21SPI_PeripheralControlEh>
	}

    while(Len > 0) {
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d030      	beq.n	80029d0 <_ZN11SPI_Handler12SPI_SendDataEPKhm+0x94>
        // 1. wait util tx buffer empty
        while(SPI_GetFlagStatus(SPI_TXE_FLAG) == FLAG_RESET);
 800296e:	2102      	movs	r1, #2
 8002970:	68f8      	ldr	r0, [r7, #12]
 8002972:	f7ff ffce 	bl	8002912 <_ZN11SPI_Handler17SPI_GetFlagStatusEh>
 8002976:	4603      	mov	r3, r0
 8002978:	2b00      	cmp	r3, #0
 800297a:	bf0c      	ite	eq
 800297c:	2301      	moveq	r3, #1
 800297e:	2300      	movne	r3, #0
 8002980:	b2db      	uxtb	r3, r3
 8002982:	2b00      	cmp	r3, #0
 8002984:	d000      	beq.n	8002988 <_ZN11SPI_Handler12SPI_SendDataEPKhm+0x4c>
 8002986:	e7f2      	b.n	800296e <_ZN11SPI_Handler12SPI_SendDataEPKhm+0x32>

        // 2. check the DFF bit in CR1
        if(SPIx_.pSPIx->CR1 & (1 << SPI_CR1_DFF)) {
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002992:	2b00      	cmp	r3, #0
 8002994:	bf14      	ite	ne
 8002996:	2301      	movne	r3, #1
 8002998:	2300      	moveq	r3, #0
 800299a:	b2db      	uxtb	r3, r3
 800299c:	2b00      	cmp	r3, #0
 800299e:	d00b      	beq.n	80029b8 <_ZN11SPI_Handler12SPI_SendDataEPKhm+0x7c>
            // 16 BIT DFF
            // 1. load the data into the DR
            SPIx_.pSPIx->DR = *((uint16_t *)pTxBuffer);
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	881a      	ldrh	r2, [r3, #0]
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	60da      	str	r2, [r3, #12]
            Len -= 2;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	3b02      	subs	r3, #2
 80029ae:	607b      	str	r3, [r7, #4]
            (uint16_t *)pTxBuffer++;
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	3301      	adds	r3, #1
 80029b4:	60bb      	str	r3, [r7, #8]
 80029b6:	e7d7      	b.n	8002968 <_ZN11SPI_Handler12SPI_SendDataEPKhm+0x2c>
        }
        else {
            SPIx_.pSPIx->DR = *pTxBuffer;
 80029b8:	68bb      	ldr	r3, [r7, #8]
 80029ba:	781a      	ldrb	r2, [r3, #0]
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	60da      	str	r2, [r3, #12]
            Len -= 1;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	3b01      	subs	r3, #1
 80029c6:	607b      	str	r3, [r7, #4]
            pTxBuffer++;
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	3301      	adds	r3, #1
 80029cc:	60bb      	str	r3, [r7, #8]
    while(Len > 0) {
 80029ce:	e7cb      	b.n	8002968 <_ZN11SPI_Handler12SPI_SendDataEPKhm+0x2c>
        }
    }
    while(SPI_GetFlagStatus(SPI_BSY_FLAG)); // w8 until SPI done
 80029d0:	2180      	movs	r1, #128	; 0x80
 80029d2:	68f8      	ldr	r0, [r7, #12]
 80029d4:	f7ff ff9d 	bl	8002912 <_ZN11SPI_Handler17SPI_GetFlagStatusEh>
 80029d8:	4603      	mov	r3, r0
 80029da:	2b00      	cmp	r3, #0
 80029dc:	bf14      	ite	ne
 80029de:	2301      	movne	r3, #1
 80029e0:	2300      	moveq	r3, #0
 80029e2:	b2db      	uxtb	r3, r3
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d000      	beq.n	80029ea <_ZN11SPI_Handler12SPI_SendDataEPKhm+0xae>
 80029e8:	e7f2      	b.n	80029d0 <_ZN11SPI_Handler12SPI_SendDataEPKhm+0x94>
    SPI_ClearOVRFlag(); // because in 2 lines mode, write data does not need to read
 80029ea:	68f8      	ldr	r0, [r7, #12]
 80029ec:	f000 f9ec 	bl	8002dc8 <_ZN11SPI_Handler16SPI_ClearOVRFlagEv>
}
 80029f0:	bf00      	nop
 80029f2:	3710      	adds	r7, #16
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}

080029f8 <_ZN11SPI_Handler22SPI_SendAndReceiveDataEPhS0_m>:
    }
    while(SPI_GetFlagStatus(SPI_BSY_FLAG)); // w8 until SPI done
}


void SPI_Handler::SPI_SendAndReceiveData(uint8_t *pTxBuffer, uint8_t *pRxBuffer, uint32_t len) {
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b084      	sub	sp, #16
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	60f8      	str	r0, [r7, #12]
 8002a00:	60b9      	str	r1, [r7, #8]
 8002a02:	607a      	str	r2, [r7, #4]
 8002a04:	603b      	str	r3, [r7, #0]
    if ((SPIx_.pSPIx->CR1 & SPI_CR1_SPE_MSK) != SPI_CR1_SPE_MSK) {
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a10:	2b40      	cmp	r3, #64	; 0x40
 8002a12:	bf14      	ite	ne
 8002a14:	2301      	movne	r3, #1
 8002a16:	2300      	moveq	r3, #0
 8002a18:	b2db      	uxtb	r3, r3
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d003      	beq.n	8002a26 <_ZN11SPI_Handler22SPI_SendAndReceiveDataEPhS0_m+0x2e>
        SPI_PeripheralControl(ENABLE);
 8002a1e:	2101      	movs	r1, #1
 8002a20:	68f8      	ldr	r0, [r7, #12]
 8002a22:	f7ff ff57 	bl	80028d4 <_ZN11SPI_Handler21SPI_PeripheralControlEh>
    }
    while(len > 0) {
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d05c      	beq.n	8002ae6 <_ZN11SPI_Handler22SPI_SendAndReceiveDataEPhS0_m+0xee>
        // 1. wait util tx buffer empty
        while(SPI_GetFlagStatus(SPI_TXE_FLAG) == FLAG_RESET);
 8002a2c:	2102      	movs	r1, #2
 8002a2e:	68f8      	ldr	r0, [r7, #12]
 8002a30:	f7ff ff6f 	bl	8002912 <_ZN11SPI_Handler17SPI_GetFlagStatusEh>
 8002a34:	4603      	mov	r3, r0
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	bf0c      	ite	eq
 8002a3a:	2301      	moveq	r3, #1
 8002a3c:	2300      	movne	r3, #0
 8002a3e:	b2db      	uxtb	r3, r3
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d000      	beq.n	8002a46 <_ZN11SPI_Handler22SPI_SendAndReceiveDataEPhS0_m+0x4e>
 8002a44:	e7f2      	b.n	8002a2c <_ZN11SPI_Handler22SPI_SendAndReceiveDataEPhS0_m+0x34>

        // 2. check the DFF bit in CR1
        if(SPIx_.pSPIx->CR1 & (1 << SPI_CR1_DFF)) {
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	bf14      	ite	ne
 8002a54:	2301      	movne	r3, #1
 8002a56:	2300      	moveq	r3, #0
 8002a58:	b2db      	uxtb	r3, r3
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d00b      	beq.n	8002a76 <_ZN11SPI_Handler22SPI_SendAndReceiveDataEPhS0_m+0x7e>
            // 16 BIT DFF
            // 1. load the data into the DR
            SPIx_.pSPIx->DR = *((uint16_t *)pTxBuffer);
 8002a5e:	68bb      	ldr	r3, [r7, #8]
 8002a60:	881a      	ldrh	r2, [r3, #0]
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	60da      	str	r2, [r3, #12]
            len -= 2;
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	3b02      	subs	r3, #2
 8002a6c:	603b      	str	r3, [r7, #0]
            (uint16_t *)pTxBuffer++;
 8002a6e:	68bb      	ldr	r3, [r7, #8]
 8002a70:	3301      	adds	r3, #1
 8002a72:	60bb      	str	r3, [r7, #8]
 8002a74:	e00a      	b.n	8002a8c <_ZN11SPI_Handler22SPI_SendAndReceiveDataEPhS0_m+0x94>
        }
        else {
            SPIx_.pSPIx->DR = *pTxBuffer;
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	781a      	ldrb	r2, [r3, #0]
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	60da      	str	r2, [r3, #12]
            len -= 1;
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	3b01      	subs	r3, #1
 8002a84:	603b      	str	r3, [r7, #0]
            pTxBuffer++;
 8002a86:	68bb      	ldr	r3, [r7, #8]
 8002a88:	3301      	adds	r3, #1
 8002a8a:	60bb      	str	r3, [r7, #8]
        }

        //1. wait until RXNE is set
        while (SPI_GetFlagStatus(SPI_RXNE_FLAG) == (uint8_t) FLAG_RESET);
 8002a8c:	2101      	movs	r1, #1
 8002a8e:	68f8      	ldr	r0, [r7, #12]
 8002a90:	f7ff ff3f 	bl	8002912 <_ZN11SPI_Handler17SPI_GetFlagStatusEh>
 8002a94:	4603      	mov	r3, r0
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	bf0c      	ite	eq
 8002a9a:	2301      	moveq	r3, #1
 8002a9c:	2300      	movne	r3, #0
 8002a9e:	b2db      	uxtb	r3, r3
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d000      	beq.n	8002aa6 <_ZN11SPI_Handler22SPI_SendAndReceiveDataEPhS0_m+0xae>
 8002aa4:	e7f2      	b.n	8002a8c <_ZN11SPI_Handler22SPI_SendAndReceiveDataEPhS0_m+0x94>

        //2. check the DFF bit in CR1
        if ((SPIx_.pSPIx->CR1 & (1 << SPI_CR1_DFF))) {
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	bf14      	ite	ne
 8002ab4:	2301      	movne	r3, #1
 8002ab6:	2300      	moveq	r3, #0
 8002ab8:	b2db      	uxtb	r3, r3
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d009      	beq.n	8002ad2 <_ZN11SPI_Handler22SPI_SendAndReceiveDataEPhS0_m+0xda>
            //16 bit DFF
            //1. load the data from DR to Rxbuffer address
            *((uint16_t*) pRxBuffer) = SPIx_.pSPIx->DR;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	68da      	ldr	r2, [r3, #12]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	b292      	uxth	r2, r2
 8002ac8:	801a      	strh	r2, [r3, #0]
            (uint16_t*) pRxBuffer++;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	3301      	adds	r3, #1
 8002ace:	607b      	str	r3, [r7, #4]
 8002ad0:	e7a9      	b.n	8002a26 <_ZN11SPI_Handler22SPI_SendAndReceiveDataEPhS0_m+0x2e>
        }
        else {
            //8 bit DFF
            *(pRxBuffer) = SPIx_.pSPIx->DR;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	68da      	ldr	r2, [r3, #12]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	b2d2      	uxtb	r2, r2
 8002adc:	701a      	strb	r2, [r3, #0]
            pRxBuffer++;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	3301      	adds	r3, #1
 8002ae2:	607b      	str	r3, [r7, #4]
    while(len > 0) {
 8002ae4:	e79f      	b.n	8002a26 <_ZN11SPI_Handler22SPI_SendAndReceiveDataEPhS0_m+0x2e>
        }
    }
    while(SPI_GetFlagStatus(SPI_BSY_FLAG)); // w8 until SPI done
 8002ae6:	2180      	movs	r1, #128	; 0x80
 8002ae8:	68f8      	ldr	r0, [r7, #12]
 8002aea:	f7ff ff12 	bl	8002912 <_ZN11SPI_Handler17SPI_GetFlagStatusEh>
 8002aee:	4603      	mov	r3, r0
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	bf14      	ite	ne
 8002af4:	2301      	movne	r3, #1
 8002af6:	2300      	moveq	r3, #0
 8002af8:	b2db      	uxtb	r3, r3
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d000      	beq.n	8002b00 <_ZN11SPI_Handler22SPI_SendAndReceiveDataEPhS0_m+0x108>
 8002afe:	e7f2      	b.n	8002ae6 <_ZN11SPI_Handler22SPI_SendAndReceiveDataEPhS0_m+0xee>
}
 8002b00:	bf00      	nop
 8002b02:	3710      	adds	r7, #16
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bd80      	pop	{r7, pc}

08002b08 <_ZN11SPI_Handler14SPI_SSOEConfigEh>:


void SPI_Handler::SPI_SSOEConfig(uint8_t EnOrDi) {
 8002b08:	b480      	push	{r7}
 8002b0a:	b083      	sub	sp, #12
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
 8002b10:	460b      	mov	r3, r1
 8002b12:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE) {
 8002b14:	78fb      	ldrb	r3, [r7, #3]
 8002b16:	2b01      	cmp	r3, #1
 8002b18:	d108      	bne.n	8002b2c <_ZN11SPI_Handler14SPI_SSOEConfigEh+0x24>
		SPIx_.pSPIx->CR2 |= (1 << SPI_CR2_SSOE);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	685a      	ldr	r2, [r3, #4]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f042 0204 	orr.w	r2, r2, #4
 8002b28:	605a      	str	r2, [r3, #4]
	}
	else {
		SPIx_.pSPIx->CR2 &= ~(1 << SPI_CR2_SSOE);
	}
}
 8002b2a:	e007      	b.n	8002b3c <_ZN11SPI_Handler14SPI_SSOEConfigEh+0x34>
		SPIx_.pSPIx->CR2 &= ~(1 << SPI_CR2_SSOE);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	685a      	ldr	r2, [r3, #4]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f022 0204 	bic.w	r2, r2, #4
 8002b3a:	605a      	str	r2, [r3, #4]
}
 8002b3c:	bf00      	nop
 8002b3e:	370c      	adds	r7, #12
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bc80      	pop	{r7}
 8002b44:	4770      	bx	lr

08002b46 <_ZN11SPI_Handler13SPI_SSIConfigEh>:
 *
 * @return            - None

 */
void SPI_Handler::SPI_SSIConfig(uint8_t EnOrDi)
{
 8002b46:	b480      	push	{r7}
 8002b48:	b083      	sub	sp, #12
 8002b4a:	af00      	add	r7, sp, #0
 8002b4c:	6078      	str	r0, [r7, #4]
 8002b4e:	460b      	mov	r3, r1
 8002b50:	70fb      	strb	r3, [r7, #3]
    if(EnOrDi == ENABLE)
 8002b52:	78fb      	ldrb	r3, [r7, #3]
 8002b54:	2b01      	cmp	r3, #1
 8002b56:	d108      	bne.n	8002b6a <_ZN11SPI_Handler13SPI_SSIConfigEh+0x24>
    {
        SPIx_.pSPIx->CR1 |=  (1 << SPI_CR1_SSI);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	681a      	ldr	r2, [r3, #0]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b66:	601a      	str	r2, [r3, #0]
    }else
    {
        SPIx_.pSPIx->CR1 &=  ~(1 << SPI_CR1_SSI);
    }
}
 8002b68:	e007      	b.n	8002b7a <_ZN11SPI_Handler13SPI_SSIConfigEh+0x34>
        SPIx_.pSPIx->CR1 &=  ~(1 << SPI_CR1_SSI);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	681a      	ldr	r2, [r3, #0]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002b78:	601a      	str	r2, [r3, #0]
}
 8002b7a:	bf00      	nop
 8002b7c:	370c      	adds	r7, #12
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bc80      	pop	{r7}
 8002b82:	4770      	bx	lr

08002b84 <_ZN11SPI_Handler15SPI_IRQHandlingEv>:
	SPIx_.pSPIx->CR2 |= (1 << SPI_CR2_RXNEIE | 1 << SPI_CR2_ERRIE | 1 << SPI_CR2_TXEIE);

    return SPIx_.TxState;
}

void SPI_Handler::SPI_IRQHandling() {
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b084      	sub	sp, #16
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
    volatile uint8_t temp1 = 0, temp2 = 0;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	73fb      	strb	r3, [r7, #15]
 8002b90:	2300      	movs	r3, #0
 8002b92:	73bb      	strb	r3, [r7, #14]
	// check for RXNE
	temp1 = SPIx_.pSPIx->SR & (1 << SPI_SR_RXNE);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	689b      	ldr	r3, [r3, #8]
 8002b9a:	b2db      	uxtb	r3, r3
 8002b9c:	f003 0301 	and.w	r3, r3, #1
 8002ba0:	b2db      	uxtb	r3, r3
 8002ba2:	73fb      	strb	r3, [r7, #15]
	temp2 = SPIx_.pSPIx->CR2 & (1 << SPI_CR2_RXNEIE);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	b2db      	uxtb	r3, r3
 8002bac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bb0:	b2db      	uxtb	r3, r3
 8002bb2:	73bb      	strb	r3, [r7, #14]
	if (temp1 && temp2) {
 8002bb4:	7bfb      	ldrb	r3, [r7, #15]
 8002bb6:	b2db      	uxtb	r3, r3
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d005      	beq.n	8002bc8 <_ZN11SPI_Handler15SPI_IRQHandlingEv+0x44>
 8002bbc:	7bbb      	ldrb	r3, [r7, #14]
 8002bbe:	b2db      	uxtb	r3, r3
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d001      	beq.n	8002bc8 <_ZN11SPI_Handler15SPI_IRQHandlingEv+0x44>
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	e000      	b.n	8002bca <_ZN11SPI_Handler15SPI_IRQHandlingEv+0x46>
 8002bc8:	2300      	movs	r3, #0
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d003      	beq.n	8002bd6 <_ZN11SPI_Handler15SPI_IRQHandlingEv+0x52>
		spi_rxne_interrupt_handle();
 8002bce:	6878      	ldr	r0, [r7, #4]
 8002bd0:	f000 f897 	bl	8002d02 <_ZN11SPI_Handler25spi_rxne_interrupt_handleEv>
		return;
 8002bd4:	e041      	b.n	8002c5a <_ZN11SPI_Handler15SPI_IRQHandlingEv+0xd6>
	}

    // First lets check for TXE
    temp1 = SPIx_.pSPIx->SR & (1 << SPI_SR_TXE);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	689b      	ldr	r3, [r3, #8]
 8002bdc:	b2db      	uxtb	r3, r3
 8002bde:	f003 0302 	and.w	r3, r3, #2
 8002be2:	b2db      	uxtb	r3, r3
 8002be4:	73fb      	strb	r3, [r7, #15]
    temp2 = SPIx_.pSPIx->CR2 & (1 << SPI_CR2_TXEIE);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	b2db      	uxtb	r3, r3
 8002bee:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002bf2:	b2db      	uxtb	r3, r3
 8002bf4:	73bb      	strb	r3, [r7, #14]
    if(temp1 && temp2) {
 8002bf6:	7bfb      	ldrb	r3, [r7, #15]
 8002bf8:	b2db      	uxtb	r3, r3
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d005      	beq.n	8002c0a <_ZN11SPI_Handler15SPI_IRQHandlingEv+0x86>
 8002bfe:	7bbb      	ldrb	r3, [r7, #14]
 8002c00:	b2db      	uxtb	r3, r3
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d001      	beq.n	8002c0a <_ZN11SPI_Handler15SPI_IRQHandlingEv+0x86>
 8002c06:	2301      	movs	r3, #1
 8002c08:	e000      	b.n	8002c0c <_ZN11SPI_Handler15SPI_IRQHandlingEv+0x88>
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d003      	beq.n	8002c18 <_ZN11SPI_Handler15SPI_IRQHandlingEv+0x94>
        // Handle TXE
        spi_txe_interrupt_handle();
 8002c10:	6878      	ldr	r0, [r7, #4]
 8002c12:	f000 f825 	bl	8002c60 <_ZN11SPI_Handler24spi_txe_interrupt_handleEv>
        return;
 8002c16:	e020      	b.n	8002c5a <_ZN11SPI_Handler15SPI_IRQHandlingEv+0xd6>
    }

	// check for ovr flag
	temp1 = SPIx_.pSPIx->SR & (1 << SPI_SR_OVR);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	689b      	ldr	r3, [r3, #8]
 8002c1e:	b2db      	uxtb	r3, r3
 8002c20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c24:	b2db      	uxtb	r3, r3
 8002c26:	73fb      	strb	r3, [r7, #15]
	temp2 = SPIx_.pSPIx->CR2 & (1 << SPI_CR2_ERRIE);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	b2db      	uxtb	r3, r3
 8002c30:	f003 0320 	and.w	r3, r3, #32
 8002c34:	b2db      	uxtb	r3, r3
 8002c36:	73bb      	strb	r3, [r7, #14]
	if (temp1 && temp2) {
 8002c38:	7bfb      	ldrb	r3, [r7, #15]
 8002c3a:	b2db      	uxtb	r3, r3
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d005      	beq.n	8002c4c <_ZN11SPI_Handler15SPI_IRQHandlingEv+0xc8>
 8002c40:	7bbb      	ldrb	r3, [r7, #14]
 8002c42:	b2db      	uxtb	r3, r3
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d001      	beq.n	8002c4c <_ZN11SPI_Handler15SPI_IRQHandlingEv+0xc8>
 8002c48:	2301      	movs	r3, #1
 8002c4a:	e000      	b.n	8002c4e <_ZN11SPI_Handler15SPI_IRQHandlingEv+0xca>
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d003      	beq.n	8002c5a <_ZN11SPI_Handler15SPI_IRQHandlingEv+0xd6>
		spi_ovr_err_interrupt_handle();
 8002c52:	6878      	ldr	r0, [r7, #4]
 8002c54:	f000 f8a8 	bl	8002da8 <_ZN11SPI_Handler28spi_ovr_err_interrupt_handleEv>
		return;
 8002c58:	bf00      	nop
	}




}
 8002c5a:	3710      	adds	r7, #16
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}

08002c60 <_ZN11SPI_Handler24spi_txe_interrupt_handleEv>:

void SPI_Handler::spi_txe_interrupt_handle() {
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b082      	sub	sp, #8
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
	if ((SPIx_.pSPIx->CR1 & SPI_CR1_SPE_MSK) != SPI_CR1_SPE_MSK) {
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c72:	2b40      	cmp	r3, #64	; 0x40
 8002c74:	bf14      	ite	ne
 8002c76:	2301      	movne	r3, #1
 8002c78:	2300      	moveq	r3, #0
 8002c7a:	b2db      	uxtb	r3, r3
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d003      	beq.n	8002c88 <_ZN11SPI_Handler24spi_txe_interrupt_handleEv+0x28>
        SPI_PeripheralControl(ENABLE);
 8002c80:	2101      	movs	r1, #1
 8002c82:	6878      	ldr	r0, [r7, #4]
 8002c84:	f7ff fe26 	bl	80028d4 <_ZN11SPI_Handler21SPI_PeripheralControlEh>
    }

    // 2. check the DFF bit in CR1
    if (SPIx_.pSPIx->CR1 & (1 << SPI_CR1_DFF)) {
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	bf14      	ite	ne
 8002c96:	2301      	movne	r3, #1
 8002c98:	2300      	moveq	r3, #0
 8002c9a:	b2db      	uxtb	r3, r3
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d010      	beq.n	8002cc2 <_ZN11SPI_Handler24spi_txe_interrupt_handleEv+0x62>
        // 16 BIT DFF
        // 1. load the data into the DR
        SPIx_.pSPIx->DR = *((uint16_t*) SPIx_.pTxBuffer);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	68db      	ldr	r3, [r3, #12]
 8002ca4:	881a      	ldrh	r2, [r3, #0]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	60da      	str	r2, [r3, #12]
        SPIx_.TxLen -= 2;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	695b      	ldr	r3, [r3, #20]
 8002cb0:	1e9a      	subs	r2, r3, #2
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	615a      	str	r2, [r3, #20]
        (uint16_t*) SPIx_.pTxBuffer++;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	68db      	ldr	r3, [r3, #12]
 8002cba:	1c5a      	adds	r2, r3, #1
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	60da      	str	r2, [r3, #12]
 8002cc0:	e00f      	b.n	8002ce2 <_ZN11SPI_Handler24spi_txe_interrupt_handleEv+0x82>
    } else {
        SPIx_.pSPIx->DR = *SPIx_.pTxBuffer;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	68db      	ldr	r3, [r3, #12]
 8002cc6:	781a      	ldrb	r2, [r3, #0]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	60da      	str	r2, [r3, #12]
        SPIx_.TxLen -= 1;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	695b      	ldr	r3, [r3, #20]
 8002cd2:	1e5a      	subs	r2, r3, #1
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	615a      	str	r2, [r3, #20]
        SPIx_.pTxBuffer++;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	68db      	ldr	r3, [r3, #12]
 8002cdc:	1c5a      	adds	r2, r3, #1
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	60da      	str	r2, [r3, #12]
    }

    if(!SPIx_.TxLen) {
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	695b      	ldr	r3, [r3, #20]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d107      	bne.n	8002cfa <_ZN11SPI_Handler24spi_txe_interrupt_handleEv+0x9a>
        // TxLen is zero, close the spi transmission and inform the application
        // Tx is over
        SPI_CloseTransmission();
 8002cea:	6878      	ldr	r0, [r7, #4]
 8002cec:	f000 f882 	bl	8002df4 <_ZN11SPI_Handler21SPI_CloseTransmissionEv>
        SPI_ApplicationEventCallback(&SPIx_, SPI_EVENT_TX_CMPLT);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2101      	movs	r1, #1
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	f000 f8c0 	bl	8002e7a <_Z28SPI_ApplicationEventCallbackP12SPI_Handle_th>
    }
}
 8002cfa:	bf00      	nop
 8002cfc:	3708      	adds	r7, #8
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}

08002d02 <_ZN11SPI_Handler25spi_rxne_interrupt_handleEv>:

void SPI_Handler::spi_rxne_interrupt_handle() {
 8002d02:	b580      	push	{r7, lr}
 8002d04:	b082      	sub	sp, #8
 8002d06:	af00      	add	r7, sp, #0
 8002d08:	6078      	str	r0, [r7, #4]
	if ((SPIx_.pSPIx->CR1 & SPI_CR1_SPE_MSK) != SPI_CR1_SPE_MSK) {
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d14:	2b40      	cmp	r3, #64	; 0x40
 8002d16:	bf14      	ite	ne
 8002d18:	2301      	movne	r3, #1
 8002d1a:	2300      	moveq	r3, #0
 8002d1c:	b2db      	uxtb	r3, r3
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d003      	beq.n	8002d2a <_ZN11SPI_Handler25spi_rxne_interrupt_handleEv+0x28>
        SPI_PeripheralControl(ENABLE);
 8002d22:	2101      	movs	r1, #1
 8002d24:	6878      	ldr	r0, [r7, #4]
 8002d26:	f7ff fdd5 	bl	80028d4 <_ZN11SPI_Handler21SPI_PeripheralControlEh>
    }


    //2. check the DFF bit in CR1
    if ((SPIx_.pSPIx->CR1 & (1 << SPI_CR1_DFF))) {
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	bf14      	ite	ne
 8002d38:	2301      	movne	r3, #1
 8002d3a:	2300      	moveq	r3, #0
 8002d3c:	b2db      	uxtb	r3, r3
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d011      	beq.n	8002d66 <_ZN11SPI_Handler25spi_rxne_interrupt_handleEv+0x64>
        //16 bit DFF
        //1. load the data from DR to Rxbuffer address
        *((uint16_t*) SPIx_.pRxBuffer) = SPIx_.pSPIx->DR;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	68da      	ldr	r2, [r3, #12]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	691b      	ldr	r3, [r3, #16]
 8002d4c:	b292      	uxth	r2, r2
 8002d4e:	801a      	strh	r2, [r3, #0]
        SPIx_.RxLen -= 2;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	699b      	ldr	r3, [r3, #24]
 8002d54:	1e9a      	subs	r2, r3, #2
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	619a      	str	r2, [r3, #24]
        (uint16_t*) SPIx_.pRxBuffer++;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	691b      	ldr	r3, [r3, #16]
 8002d5e:	1c5a      	adds	r2, r3, #1
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	611a      	str	r2, [r3, #16]
 8002d64:	e010      	b.n	8002d88 <_ZN11SPI_Handler25spi_rxne_interrupt_handleEv+0x86>
    } else {
        //8 bit DFF
        *(SPIx_.pRxBuffer) = SPIx_.pSPIx->DR;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	68da      	ldr	r2, [r3, #12]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	691b      	ldr	r3, [r3, #16]
 8002d70:	b2d2      	uxtb	r2, r2
 8002d72:	701a      	strb	r2, [r3, #0]
        SPIx_.RxLen--;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	699b      	ldr	r3, [r3, #24]
 8002d78:	1e5a      	subs	r2, r3, #1
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	619a      	str	r2, [r3, #24]
        SPIx_.pRxBuffer++;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	691b      	ldr	r3, [r3, #16]
 8002d82:	1c5a      	adds	r2, r3, #1
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	611a      	str	r2, [r3, #16]
    }

    if(!SPIx_.RxLen) {
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	699b      	ldr	r3, [r3, #24]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d107      	bne.n	8002da0 <_ZN11SPI_Handler25spi_rxne_interrupt_handleEv+0x9e>
        // TxLen is zero, close the spi transmission and inform the application
        // Tx is over
        SPI_CloseReception();
 8002d90:	6878      	ldr	r0, [r7, #4]
 8002d92:	f000 f858 	bl	8002e46 <_ZN11SPI_Handler18SPI_CloseReceptionEv>
        SPI_ApplicationEventCallback(&SPIx_, SPI_EVENT_RX_CMPLT);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2102      	movs	r1, #2
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f000 f86d 	bl	8002e7a <_Z28SPI_ApplicationEventCallbackP12SPI_Handle_th>
    }
}
 8002da0:	bf00      	nop
 8002da2:	3708      	adds	r7, #8
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bd80      	pop	{r7, pc}

08002da8 <_ZN11SPI_Handler28spi_ovr_err_interrupt_handleEv>:

void SPI_Handler::spi_ovr_err_interrupt_handle() {
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b082      	sub	sp, #8
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
    // 1. Clear the ovr flag
    SPI_ClearOVRFlag();
 8002db0:	6878      	ldr	r0, [r7, #4]
 8002db2:	f000 f809 	bl	8002dc8 <_ZN11SPI_Handler16SPI_ClearOVRFlagEv>
    // 2. Inform the application
    SPI_ApplicationEventCallback(&SPIx_, SPI_EVENT_OVR_ERR);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2103      	movs	r1, #3
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f000 f85d 	bl	8002e7a <_Z28SPI_ApplicationEventCallbackP12SPI_Handle_th>
}
 8002dc0:	bf00      	nop
 8002dc2:	3708      	adds	r7, #8
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bd80      	pop	{r7, pc}

08002dc8 <_ZN11SPI_Handler16SPI_ClearOVRFlagEv>:


void SPI_Handler::SPI_ClearOVRFlag() {
 8002dc8:	b480      	push	{r7}
 8002dca:	b085      	sub	sp, #20
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
    volatile uint8_t temp = 0;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	73fb      	strb	r3, [r7, #15]
    temp = SPIx_.pSPIx->DR;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	68db      	ldr	r3, [r3, #12]
 8002dda:	b2db      	uxtb	r3, r3
 8002ddc:	73fb      	strb	r3, [r7, #15]
    temp = SPIx_.pSPIx->SR;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	689b      	ldr	r3, [r3, #8]
 8002de4:	b2db      	uxtb	r3, r3
 8002de6:	73fb      	strb	r3, [r7, #15]
    static_cast<void>(temp);
 8002de8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dea:	bf00      	nop
 8002dec:	3714      	adds	r7, #20
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bc80      	pop	{r7}
 8002df2:	4770      	bx	lr

08002df4 <_ZN11SPI_Handler21SPI_CloseTransmissionEv>:

void SPI_Handler::SPI_CloseTransmission() {
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b082      	sub	sp, #8
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
	while((SPIx_.pSPIx->SR & (1 << SPI_SR_TXE)) == RESET);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	f003 0302 	and.w	r3, r3, #2
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	bf0c      	ite	eq
 8002e0a:	2301      	moveq	r3, #1
 8002e0c:	2300      	movne	r3, #0
 8002e0e:	b2db      	uxtb	r3, r3
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d000      	beq.n	8002e16 <_ZN11SPI_Handler21SPI_CloseTransmissionEv+0x22>
 8002e14:	e7f2      	b.n	8002dfc <_ZN11SPI_Handler21SPI_CloseTransmissionEv+0x8>
    SPIx_.pSPIx->CR2 &= ~(1 << SPI_CR2_TXEIE | 1 << SPI_CR2_ERRIE);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	685a      	ldr	r2, [r3, #4]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002e24:	605a      	str	r2, [r3, #4]
    SPIx_.pTxBuffer = nullptr;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2200      	movs	r2, #0
 8002e2a:	60da      	str	r2, [r3, #12]
    SPIx_.TxLen = 0;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2200      	movs	r2, #0
 8002e30:	615a      	str	r2, [r3, #20]
    SPIx_.TxState = SPI_READY;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2200      	movs	r2, #0
 8002e36:	771a      	strb	r2, [r3, #28]
    SPI_ClearOVRFlag(); // TODO: loi o day vi clear sau khi goi dummy
 8002e38:	6878      	ldr	r0, [r7, #4]
 8002e3a:	f7ff ffc5 	bl	8002dc8 <_ZN11SPI_Handler16SPI_ClearOVRFlagEv>
}
 8002e3e:	bf00      	nop
 8002e40:	3708      	adds	r7, #8
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}

08002e46 <_ZN11SPI_Handler18SPI_CloseReceptionEv>:

void SPI_Handler::SPI_CloseReception() {
 8002e46:	b480      	push	{r7}
 8002e48:	b083      	sub	sp, #12
 8002e4a:	af00      	add	r7, sp, #0
 8002e4c:	6078      	str	r0, [r7, #4]
    SPIx_.pSPIx->CR2 &= ~(1 << SPI_CR2_RXNEIE | 1 << SPI_CR2_ERRIE);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	685a      	ldr	r2, [r3, #4]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002e5c:	605a      	str	r2, [r3, #4]
    SPIx_.pRxBuffer = nullptr;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2200      	movs	r2, #0
 8002e62:	611a      	str	r2, [r3, #16]
    SPIx_.RxLen = 0;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2200      	movs	r2, #0
 8002e68:	619a      	str	r2, [r3, #24]
    SPIx_.RxState = SPI_READY;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	775a      	strb	r2, [r3, #29]
}
 8002e70:	bf00      	nop
 8002e72:	370c      	adds	r7, #12
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bc80      	pop	{r7}
 8002e78:	4770      	bx	lr

08002e7a <_Z28SPI_ApplicationEventCallbackP12SPI_Handle_th>:

__weak void SPI_ApplicationEventCallback(SPI_Handle_t *pSPIHandle, uint8_t AppEv) {
 8002e7a:	b480      	push	{r7}
 8002e7c:	b083      	sub	sp, #12
 8002e7e:	af00      	add	r7, sp, #0
 8002e80:	6078      	str	r0, [r7, #4]
 8002e82:	460b      	mov	r3, r1
 8002e84:	70fb      	strb	r3, [r7, #3]
    //This is a weak implementation . the user application may override this function.
}
 8002e86:	bf00      	nop
 8002e88:	370c      	adds	r7, #12
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bc80      	pop	{r7}
 8002e8e:	4770      	bx	lr

08002e90 <_ZNSt5tupleIJP12GPIO_HandlerSt14default_deleteIS0_EEEC1IS1_S3_Lb1EEEv>:
                typename enable_if<__and_<
                                     __is_implicitly_default_constructible<_U1>,
                                     __is_implicitly_default_constructible<_U2>>
                                   ::value, bool>::type = true>

      constexpr tuple()
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b082      	sub	sp, #8
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
      : _Inherited() { }
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f000 f841 	bl	8002f22 <_ZNSt11_Tuple_implILj0EJP12GPIO_HandlerSt14default_deleteIS0_EEEC1Ev>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	3708      	adds	r7, #8
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}

08002eaa <_ZNSt15__uniq_ptr_implI12GPIO_HandlerSt14default_deleteIS0_EEC1Ev>:
        __and_<__not_<is_pointer<_Dp>>,
	       is_default_constructible<_Dp>>::value>;

      using pointer = typename _Ptr<_Tp, _Dp>::type;

      __uniq_ptr_impl() = default;
 8002eaa:	b580      	push	{r7, lr}
 8002eac:	b082      	sub	sp, #8
 8002eae:	af00      	add	r7, sp, #0
 8002eb0:	6078      	str	r0, [r7, #4]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f7ff ffeb 	bl	8002e90 <_ZNSt5tupleIJP12GPIO_HandlerSt14default_deleteIS0_EEEC1IS1_S3_Lb1EEEv>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	3708      	adds	r7, #8
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}

08002ec4 <_ZNSt10unique_ptrI12GPIO_HandlerSt14default_deleteIS0_EEC1IS2_vEEv>:
      // Constructors.

      /// Default constructor, creates a unique_ptr that owns nothing.
      template <typename _Up = _Dp,
		typename = _DeleterConstraint<_Up>>
	constexpr unique_ptr() noexcept
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b082      	sub	sp, #8
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
	: _M_t()
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	601a      	str	r2, [r3, #0]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f7ff ffe8 	bl	8002eaa <_ZNSt15__uniq_ptr_implI12GPIO_HandlerSt14default_deleteIS0_EEC1Ev>
        { }
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	4618      	mov	r0, r3
 8002ede:	3708      	adds	r7, #8
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bd80      	pop	{r7, pc}

08002ee4 <_ZNSt10unique_ptrI12GPIO_HandlerSt14default_deleteIS0_EE5resetEPS0_>:
       * @param __p  The new pointer to store.
       *
       * The deleter will be invoked if a pointer is already owned.
       */
      void
      reset(pointer __p = pointer()) noexcept
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b082      	sub	sp, #8
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
 8002eec:	6039      	str	r1, [r7, #0]
      {
	using std::swap;
	swap(_M_t._M_ptr(), __p);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	f000 f826 	bl	8002f42 <_ZNSt15__uniq_ptr_implI12GPIO_HandlerSt14default_deleteIS0_EE6_M_ptrEv>
 8002ef6:	4602      	mov	r2, r0
 8002ef8:	463b      	mov	r3, r7
 8002efa:	4619      	mov	r1, r3
 8002efc:	4610      	mov	r0, r2
 8002efe:	f000 f857 	bl	8002fb0 <_ZSt4swapIP12GPIO_HandlerENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS6_ESt18is_move_assignableIS6_EEE5valueEvE4typeERS6_SG_>
	if (__p != pointer())
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d008      	beq.n	8002f1a <_ZNSt10unique_ptrI12GPIO_HandlerSt14default_deleteIS0_EE5resetEPS0_+0x36>
	  get_deleter()(__p);
 8002f08:	6878      	ldr	r0, [r7, #4]
 8002f0a:	f000 f827 	bl	8002f5c <_ZNSt10unique_ptrI12GPIO_HandlerSt14default_deleteIS0_EE11get_deleterEv>
 8002f0e:	4602      	mov	r2, r0
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	4619      	mov	r1, r3
 8002f14:	4610      	mov	r0, r2
 8002f16:	f000 f82e 	bl	8002f76 <_ZNKSt14default_deleteI12GPIO_HandlerEclEPS0_>
      }
 8002f1a:	bf00      	nop
 8002f1c:	3708      	adds	r7, #8
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd80      	pop	{r7, pc}

08002f22 <_ZNSt11_Tuple_implILj0EJP12GPIO_HandlerSt14default_deleteIS0_EEEC1Ev>:
      constexpr _Tuple_impl()
 8002f22:	b580      	push	{r7, lr}
 8002f24:	b082      	sub	sp, #8
 8002f26:	af00      	add	r7, sp, #0
 8002f28:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 8002f2a:	6878      	ldr	r0, [r7, #4]
 8002f2c:	f000 f85f 	bl	8002fee <_ZNSt11_Tuple_implILj1EJSt14default_deleteI12GPIO_HandlerEEEC1Ev>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	4618      	mov	r0, r3
 8002f34:	f000 f867 	bl	8003006 <_ZNSt10_Head_baseILj0EP12GPIO_HandlerLb0EEC1Ev>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	3708      	adds	r7, #8
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}

08002f42 <_ZNSt15__uniq_ptr_implI12GPIO_HandlerSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 8002f42:	b580      	push	{r7, lr}
 8002f44:	b082      	sub	sp, #8
 8002f46:	af00      	add	r7, sp, #0
 8002f48:	6078      	str	r0, [r7, #4]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	f000 f867 	bl	8003020 <_ZSt3getILj0EJP12GPIO_HandlerSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8002f52:	4603      	mov	r3, r0
 8002f54:	4618      	mov	r0, r3
 8002f56:	3708      	adds	r7, #8
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bd80      	pop	{r7, pc}

08002f5c <_ZNSt10unique_ptrI12GPIO_HandlerSt14default_deleteIS0_EE11get_deleterEv>:
      get_deleter() noexcept
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b082      	sub	sp, #8
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	4618      	mov	r0, r3
 8002f68:	f000 f867 	bl	800303a <_ZNSt15__uniq_ptr_implI12GPIO_HandlerSt14default_deleteIS0_EE10_M_deleterEv>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	4618      	mov	r0, r3
 8002f70:	3708      	adds	r7, #8
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd80      	pop	{r7, pc}

08002f76 <_ZNKSt14default_deleteI12GPIO_HandlerEclEPS0_>:
      operator()(_Tp* __ptr) const
 8002f76:	b590      	push	{r4, r7, lr}
 8002f78:	b083      	sub	sp, #12
 8002f7a:	af00      	add	r7, sp, #0
 8002f7c:	6078      	str	r0, [r7, #4]
 8002f7e:	6039      	str	r1, [r7, #0]
	delete __ptr;
 8002f80:	683c      	ldr	r4, [r7, #0]
 8002f82:	2c00      	cmp	r4, #0
 8002f84:	d006      	beq.n	8002f94 <_ZNKSt14default_deleteI12GPIO_HandlerEclEPS0_+0x1e>
 8002f86:	4620      	mov	r0, r4
 8002f88:	f7fe ffbd 	bl	8001f06 <_ZN12GPIO_HandlerD1Ev>
 8002f8c:	210c      	movs	r1, #12
 8002f8e:	4620      	mov	r0, r4
 8002f90:	f000 f8bb 	bl	800310a <_ZdlPvj>
      }
 8002f94:	bf00      	nop
 8002f96:	370c      	adds	r7, #12
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bd90      	pop	{r4, r7, pc}

08002f9c <_ZSt4moveIRP12GPIO_HandlerEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 8002f9c:	b480      	push	{r7}
 8002f9e:	b083      	sub	sp, #12
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	370c      	adds	r7, #12
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bc80      	pop	{r7}
 8002fae:	4770      	bx	lr

08002fb0 <_ZSt4swapIP12GPIO_HandlerENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS6_ESt18is_move_assignableIS6_EEE5valueEvE4typeERS6_SG_>:
    swap(_Tp& __a, _Tp& __b)
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b084      	sub	sp, #16
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
 8002fb8:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8002fba:	6878      	ldr	r0, [r7, #4]
 8002fbc:	f7ff ffee 	bl	8002f9c <_ZSt4moveIRP12GPIO_HandlerEONSt16remove_referenceIT_E4typeEOS4_>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 8002fc6:	6838      	ldr	r0, [r7, #0]
 8002fc8:	f7ff ffe8 	bl	8002f9c <_ZSt4moveIRP12GPIO_HandlerEONSt16remove_referenceIT_E4typeEOS4_>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	681a      	ldr	r2, [r3, #0]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8002fd4:	f107 030c 	add.w	r3, r7, #12
 8002fd8:	4618      	mov	r0, r3
 8002fda:	f7ff ffdf 	bl	8002f9c <_ZSt4moveIRP12GPIO_HandlerEONSt16remove_referenceIT_E4typeEOS4_>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	681a      	ldr	r2, [r3, #0]
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	601a      	str	r2, [r3, #0]
    }
 8002fe6:	bf00      	nop
 8002fe8:	3710      	adds	r7, #16
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}

08002fee <_ZNSt11_Tuple_implILj1EJSt14default_deleteI12GPIO_HandlerEEEC1Ev>:
      constexpr _Tuple_impl()
 8002fee:	b580      	push	{r7, lr}
 8002ff0:	b082      	sub	sp, #8
 8002ff2:	af00      	add	r7, sp, #0
 8002ff4:	6078      	str	r0, [r7, #4]
      : _Base() { }
 8002ff6:	6878      	ldr	r0, [r7, #4]
 8002ff8:	f000 f82c 	bl	8003054 <_ZNSt10_Head_baseILj1ESt14default_deleteI12GPIO_HandlerELb1EEC1Ev>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	4618      	mov	r0, r3
 8003000:	3708      	adds	r7, #8
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}

08003006 <_ZNSt10_Head_baseILj0EP12GPIO_HandlerLb0EEC1Ev>:
      constexpr _Head_base()
 8003006:	b480      	push	{r7}
 8003008:	b083      	sub	sp, #12
 800300a:	af00      	add	r7, sp, #0
 800300c:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2200      	movs	r2, #0
 8003012:	601a      	str	r2, [r3, #0]
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	4618      	mov	r0, r3
 8003018:	370c      	adds	r7, #12
 800301a:	46bd      	mov	sp, r7
 800301c:	bc80      	pop	{r7}
 800301e:	4770      	bx	lr

08003020 <_ZSt3getILj0EJP12GPIO_HandlerSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }

  /// Return a reference to the ith element of a tuple.
  template<std::size_t __i, typename... _Elements>
    constexpr __tuple_element_t<__i, tuple<_Elements...>>&
    get(tuple<_Elements...>& __t) noexcept
 8003020:	b580      	push	{r7, lr}
 8003022:	b082      	sub	sp, #8
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	4618      	mov	r0, r3
 800302c:	f000 f81c 	bl	8003068 <_ZSt12__get_helperILj0EP12GPIO_HandlerJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8003030:	4603      	mov	r3, r0
 8003032:	4618      	mov	r0, r3
 8003034:	3708      	adds	r7, #8
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}

0800303a <_ZNSt15__uniq_ptr_implI12GPIO_HandlerSt14default_deleteIS0_EE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 800303a:	b580      	push	{r7, lr}
 800303c:	b082      	sub	sp, #8
 800303e:	af00      	add	r7, sp, #0
 8003040:	6078      	str	r0, [r7, #4]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	4618      	mov	r0, r3
 8003046:	f000 f81b 	bl	8003080 <_ZSt3getILj1EJP12GPIO_HandlerSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 800304a:	4603      	mov	r3, r0
 800304c:	4618      	mov	r0, r3
 800304e:	3708      	adds	r7, #8
 8003050:	46bd      	mov	sp, r7
 8003052:	bd80      	pop	{r7, pc}

08003054 <_ZNSt10_Head_baseILj1ESt14default_deleteI12GPIO_HandlerELb1EEC1Ev>:
      constexpr _Head_base()
 8003054:	b480      	push	{r7}
 8003056:	b083      	sub	sp, #12
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
      : _Head() { }
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	4618      	mov	r0, r3
 8003060:	370c      	adds	r7, #12
 8003062:	46bd      	mov	sp, r7
 8003064:	bc80      	pop	{r7}
 8003066:	4770      	bx	lr

08003068 <_ZSt12__get_helperILj0EP12GPIO_HandlerJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8003068:	b580      	push	{r7, lr}
 800306a:	b082      	sub	sp, #8
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8003070:	6878      	ldr	r0, [r7, #4]
 8003072:	f000 f811 	bl	8003098 <_ZNSt11_Tuple_implILj0EJP12GPIO_HandlerSt14default_deleteIS0_EEE7_M_headERS4_>
 8003076:	4603      	mov	r3, r0
 8003078:	4618      	mov	r0, r3
 800307a:	3708      	adds	r7, #8
 800307c:	46bd      	mov	sp, r7
 800307e:	bd80      	pop	{r7, pc}

08003080 <_ZSt3getILj1EJP12GPIO_HandlerSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 8003080:	b580      	push	{r7, lr}
 8003082:	b082      	sub	sp, #8
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8003088:	6878      	ldr	r0, [r7, #4]
 800308a:	f000 f812 	bl	80030b2 <_ZSt12__get_helperILj1ESt14default_deleteI12GPIO_HandlerEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 800308e:	4603      	mov	r3, r0
 8003090:	4618      	mov	r0, r3
 8003092:	3708      	adds	r7, #8
 8003094:	46bd      	mov	sp, r7
 8003096:	bd80      	pop	{r7, pc}

08003098 <_ZNSt11_Tuple_implILj0EJP12GPIO_HandlerSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8003098:	b580      	push	{r7, lr}
 800309a:	b082      	sub	sp, #8
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	4618      	mov	r0, r3
 80030a4:	f000 f811 	bl	80030ca <_ZNSt10_Head_baseILj0EP12GPIO_HandlerLb0EE7_M_headERS2_>
 80030a8:	4603      	mov	r3, r0
 80030aa:	4618      	mov	r0, r3
 80030ac:	3708      	adds	r7, #8
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}

080030b2 <_ZSt12__get_helperILj1ESt14default_deleteI12GPIO_HandlerEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80030b2:	b580      	push	{r7, lr}
 80030b4:	b082      	sub	sp, #8
 80030b6:	af00      	add	r7, sp, #0
 80030b8:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80030ba:	6878      	ldr	r0, [r7, #4]
 80030bc:	f000 f80f 	bl	80030de <_ZNSt11_Tuple_implILj1EJSt14default_deleteI12GPIO_HandlerEEE7_M_headERS3_>
 80030c0:	4603      	mov	r3, r0
 80030c2:	4618      	mov	r0, r3
 80030c4:	3708      	adds	r7, #8
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}

080030ca <_ZNSt10_Head_baseILj0EP12GPIO_HandlerLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 80030ca:	b480      	push	{r7}
 80030cc:	b083      	sub	sp, #12
 80030ce:	af00      	add	r7, sp, #0
 80030d0:	6078      	str	r0, [r7, #4]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	4618      	mov	r0, r3
 80030d6:	370c      	adds	r7, #12
 80030d8:	46bd      	mov	sp, r7
 80030da:	bc80      	pop	{r7}
 80030dc:	4770      	bx	lr

080030de <_ZNSt11_Tuple_implILj1EJSt14default_deleteI12GPIO_HandlerEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80030de:	b580      	push	{r7, lr}
 80030e0:	b082      	sub	sp, #8
 80030e2:	af00      	add	r7, sp, #0
 80030e4:	6078      	str	r0, [r7, #4]
 80030e6:	6878      	ldr	r0, [r7, #4]
 80030e8:	f000 f805 	bl	80030f6 <_ZNSt10_Head_baseILj1ESt14default_deleteI12GPIO_HandlerELb1EE7_M_headERS3_>
 80030ec:	4603      	mov	r3, r0
 80030ee:	4618      	mov	r0, r3
 80030f0:	3708      	adds	r7, #8
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}

080030f6 <_ZNSt10_Head_baseILj1ESt14default_deleteI12GPIO_HandlerELb1EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b; }
 80030f6:	b480      	push	{r7}
 80030f8:	b083      	sub	sp, #12
 80030fa:	af00      	add	r7, sp, #0
 80030fc:	6078      	str	r0, [r7, #4]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	4618      	mov	r0, r3
 8003102:	370c      	adds	r7, #12
 8003104:	46bd      	mov	sp, r7
 8003106:	bc80      	pop	{r7}
 8003108:	4770      	bx	lr

0800310a <_ZdlPvj>:
 800310a:	f000 b819 	b.w	8003140 <_ZdlPv>

0800310e <_Znwj>:
 800310e:	b510      	push	{r4, lr}
 8003110:	2800      	cmp	r0, #0
 8003112:	bf14      	ite	ne
 8003114:	4604      	movne	r4, r0
 8003116:	2401      	moveq	r4, #1
 8003118:	4620      	mov	r0, r4
 800311a:	f000 f84b 	bl	80031b4 <malloc>
 800311e:	b930      	cbnz	r0, 800312e <_Znwj+0x20>
 8003120:	f000 f806 	bl	8003130 <_ZSt15get_new_handlerv>
 8003124:	b908      	cbnz	r0, 800312a <_Znwj+0x1c>
 8003126:	f000 f813 	bl	8003150 <abort>
 800312a:	4780      	blx	r0
 800312c:	e7f4      	b.n	8003118 <_Znwj+0xa>
 800312e:	bd10      	pop	{r4, pc}

08003130 <_ZSt15get_new_handlerv>:
 8003130:	4b02      	ldr	r3, [pc, #8]	; (800313c <_ZSt15get_new_handlerv+0xc>)
 8003132:	6818      	ldr	r0, [r3, #0]
 8003134:	f3bf 8f5b 	dmb	ish
 8003138:	4770      	bx	lr
 800313a:	bf00      	nop
 800313c:	200001fc 	.word	0x200001fc

08003140 <_ZdlPv>:
 8003140:	f000 b840 	b.w	80031c4 <free>

08003144 <_ZSt17__throw_bad_allocv>:
 8003144:	b508      	push	{r3, lr}
 8003146:	f000 f803 	bl	8003150 <abort>

0800314a <_ZSt25__throw_bad_function_callv>:
 800314a:	b508      	push	{r3, lr}
 800314c:	f000 f800 	bl	8003150 <abort>

08003150 <abort>:
 8003150:	b508      	push	{r3, lr}
 8003152:	2006      	movs	r0, #6
 8003154:	f000 fc6e 	bl	8003a34 <raise>
 8003158:	2001      	movs	r0, #1
 800315a:	f7fe fb5a 	bl	8001812 <_exit>
	...

08003160 <__errno>:
 8003160:	4b01      	ldr	r3, [pc, #4]	; (8003168 <__errno+0x8>)
 8003162:	6818      	ldr	r0, [r3, #0]
 8003164:	4770      	bx	lr
 8003166:	bf00      	nop
 8003168:	20000000 	.word	0x20000000

0800316c <__libc_init_array>:
 800316c:	b570      	push	{r4, r5, r6, lr}
 800316e:	4e0d      	ldr	r6, [pc, #52]	; (80031a4 <__libc_init_array+0x38>)
 8003170:	4c0d      	ldr	r4, [pc, #52]	; (80031a8 <__libc_init_array+0x3c>)
 8003172:	1ba4      	subs	r4, r4, r6
 8003174:	10a4      	asrs	r4, r4, #2
 8003176:	2500      	movs	r5, #0
 8003178:	42a5      	cmp	r5, r4
 800317a:	d109      	bne.n	8003190 <__libc_init_array+0x24>
 800317c:	4e0b      	ldr	r6, [pc, #44]	; (80031ac <__libc_init_array+0x40>)
 800317e:	4c0c      	ldr	r4, [pc, #48]	; (80031b0 <__libc_init_array+0x44>)
 8003180:	f001 fdd6 	bl	8004d30 <_init>
 8003184:	1ba4      	subs	r4, r4, r6
 8003186:	10a4      	asrs	r4, r4, #2
 8003188:	2500      	movs	r5, #0
 800318a:	42a5      	cmp	r5, r4
 800318c:	d105      	bne.n	800319a <__libc_init_array+0x2e>
 800318e:	bd70      	pop	{r4, r5, r6, pc}
 8003190:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003194:	4798      	blx	r3
 8003196:	3501      	adds	r5, #1
 8003198:	e7ee      	b.n	8003178 <__libc_init_array+0xc>
 800319a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800319e:	4798      	blx	r3
 80031a0:	3501      	adds	r5, #1
 80031a2:	e7f2      	b.n	800318a <__libc_init_array+0x1e>
 80031a4:	08004f70 	.word	0x08004f70
 80031a8:	08004f70 	.word	0x08004f70
 80031ac:	08004f70 	.word	0x08004f70
 80031b0:	08004f74 	.word	0x08004f74

080031b4 <malloc>:
 80031b4:	4b02      	ldr	r3, [pc, #8]	; (80031c0 <malloc+0xc>)
 80031b6:	4601      	mov	r1, r0
 80031b8:	6818      	ldr	r0, [r3, #0]
 80031ba:	f000 b86d 	b.w	8003298 <_malloc_r>
 80031be:	bf00      	nop
 80031c0:	20000000 	.word	0x20000000

080031c4 <free>:
 80031c4:	4b02      	ldr	r3, [pc, #8]	; (80031d0 <free+0xc>)
 80031c6:	4601      	mov	r1, r0
 80031c8:	6818      	ldr	r0, [r3, #0]
 80031ca:	f000 b817 	b.w	80031fc <_free_r>
 80031ce:	bf00      	nop
 80031d0:	20000000 	.word	0x20000000

080031d4 <memcpy>:
 80031d4:	b510      	push	{r4, lr}
 80031d6:	1e43      	subs	r3, r0, #1
 80031d8:	440a      	add	r2, r1
 80031da:	4291      	cmp	r1, r2
 80031dc:	d100      	bne.n	80031e0 <memcpy+0xc>
 80031de:	bd10      	pop	{r4, pc}
 80031e0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80031e4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80031e8:	e7f7      	b.n	80031da <memcpy+0x6>

080031ea <memset>:
 80031ea:	4402      	add	r2, r0
 80031ec:	4603      	mov	r3, r0
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d100      	bne.n	80031f4 <memset+0xa>
 80031f2:	4770      	bx	lr
 80031f4:	f803 1b01 	strb.w	r1, [r3], #1
 80031f8:	e7f9      	b.n	80031ee <memset+0x4>
	...

080031fc <_free_r>:
 80031fc:	b538      	push	{r3, r4, r5, lr}
 80031fe:	4605      	mov	r5, r0
 8003200:	2900      	cmp	r1, #0
 8003202:	d045      	beq.n	8003290 <_free_r+0x94>
 8003204:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003208:	1f0c      	subs	r4, r1, #4
 800320a:	2b00      	cmp	r3, #0
 800320c:	bfb8      	it	lt
 800320e:	18e4      	addlt	r4, r4, r3
 8003210:	f001 fa82 	bl	8004718 <__malloc_lock>
 8003214:	4a1f      	ldr	r2, [pc, #124]	; (8003294 <_free_r+0x98>)
 8003216:	6813      	ldr	r3, [r2, #0]
 8003218:	4610      	mov	r0, r2
 800321a:	b933      	cbnz	r3, 800322a <_free_r+0x2e>
 800321c:	6063      	str	r3, [r4, #4]
 800321e:	6014      	str	r4, [r2, #0]
 8003220:	4628      	mov	r0, r5
 8003222:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003226:	f001 ba78 	b.w	800471a <__malloc_unlock>
 800322a:	42a3      	cmp	r3, r4
 800322c:	d90c      	bls.n	8003248 <_free_r+0x4c>
 800322e:	6821      	ldr	r1, [r4, #0]
 8003230:	1862      	adds	r2, r4, r1
 8003232:	4293      	cmp	r3, r2
 8003234:	bf04      	itt	eq
 8003236:	681a      	ldreq	r2, [r3, #0]
 8003238:	685b      	ldreq	r3, [r3, #4]
 800323a:	6063      	str	r3, [r4, #4]
 800323c:	bf04      	itt	eq
 800323e:	1852      	addeq	r2, r2, r1
 8003240:	6022      	streq	r2, [r4, #0]
 8003242:	6004      	str	r4, [r0, #0]
 8003244:	e7ec      	b.n	8003220 <_free_r+0x24>
 8003246:	4613      	mov	r3, r2
 8003248:	685a      	ldr	r2, [r3, #4]
 800324a:	b10a      	cbz	r2, 8003250 <_free_r+0x54>
 800324c:	42a2      	cmp	r2, r4
 800324e:	d9fa      	bls.n	8003246 <_free_r+0x4a>
 8003250:	6819      	ldr	r1, [r3, #0]
 8003252:	1858      	adds	r0, r3, r1
 8003254:	42a0      	cmp	r0, r4
 8003256:	d10b      	bne.n	8003270 <_free_r+0x74>
 8003258:	6820      	ldr	r0, [r4, #0]
 800325a:	4401      	add	r1, r0
 800325c:	1858      	adds	r0, r3, r1
 800325e:	4282      	cmp	r2, r0
 8003260:	6019      	str	r1, [r3, #0]
 8003262:	d1dd      	bne.n	8003220 <_free_r+0x24>
 8003264:	6810      	ldr	r0, [r2, #0]
 8003266:	6852      	ldr	r2, [r2, #4]
 8003268:	605a      	str	r2, [r3, #4]
 800326a:	4401      	add	r1, r0
 800326c:	6019      	str	r1, [r3, #0]
 800326e:	e7d7      	b.n	8003220 <_free_r+0x24>
 8003270:	d902      	bls.n	8003278 <_free_r+0x7c>
 8003272:	230c      	movs	r3, #12
 8003274:	602b      	str	r3, [r5, #0]
 8003276:	e7d3      	b.n	8003220 <_free_r+0x24>
 8003278:	6820      	ldr	r0, [r4, #0]
 800327a:	1821      	adds	r1, r4, r0
 800327c:	428a      	cmp	r2, r1
 800327e:	bf04      	itt	eq
 8003280:	6811      	ldreq	r1, [r2, #0]
 8003282:	6852      	ldreq	r2, [r2, #4]
 8003284:	6062      	str	r2, [r4, #4]
 8003286:	bf04      	itt	eq
 8003288:	1809      	addeq	r1, r1, r0
 800328a:	6021      	streq	r1, [r4, #0]
 800328c:	605c      	str	r4, [r3, #4]
 800328e:	e7c7      	b.n	8003220 <_free_r+0x24>
 8003290:	bd38      	pop	{r3, r4, r5, pc}
 8003292:	bf00      	nop
 8003294:	20000200 	.word	0x20000200

08003298 <_malloc_r>:
 8003298:	b570      	push	{r4, r5, r6, lr}
 800329a:	1ccd      	adds	r5, r1, #3
 800329c:	f025 0503 	bic.w	r5, r5, #3
 80032a0:	3508      	adds	r5, #8
 80032a2:	2d0c      	cmp	r5, #12
 80032a4:	bf38      	it	cc
 80032a6:	250c      	movcc	r5, #12
 80032a8:	2d00      	cmp	r5, #0
 80032aa:	4606      	mov	r6, r0
 80032ac:	db01      	blt.n	80032b2 <_malloc_r+0x1a>
 80032ae:	42a9      	cmp	r1, r5
 80032b0:	d903      	bls.n	80032ba <_malloc_r+0x22>
 80032b2:	230c      	movs	r3, #12
 80032b4:	6033      	str	r3, [r6, #0]
 80032b6:	2000      	movs	r0, #0
 80032b8:	bd70      	pop	{r4, r5, r6, pc}
 80032ba:	f001 fa2d 	bl	8004718 <__malloc_lock>
 80032be:	4a21      	ldr	r2, [pc, #132]	; (8003344 <_malloc_r+0xac>)
 80032c0:	6814      	ldr	r4, [r2, #0]
 80032c2:	4621      	mov	r1, r4
 80032c4:	b991      	cbnz	r1, 80032ec <_malloc_r+0x54>
 80032c6:	4c20      	ldr	r4, [pc, #128]	; (8003348 <_malloc_r+0xb0>)
 80032c8:	6823      	ldr	r3, [r4, #0]
 80032ca:	b91b      	cbnz	r3, 80032d4 <_malloc_r+0x3c>
 80032cc:	4630      	mov	r0, r6
 80032ce:	f000 fb79 	bl	80039c4 <_sbrk_r>
 80032d2:	6020      	str	r0, [r4, #0]
 80032d4:	4629      	mov	r1, r5
 80032d6:	4630      	mov	r0, r6
 80032d8:	f000 fb74 	bl	80039c4 <_sbrk_r>
 80032dc:	1c43      	adds	r3, r0, #1
 80032de:	d124      	bne.n	800332a <_malloc_r+0x92>
 80032e0:	230c      	movs	r3, #12
 80032e2:	6033      	str	r3, [r6, #0]
 80032e4:	4630      	mov	r0, r6
 80032e6:	f001 fa18 	bl	800471a <__malloc_unlock>
 80032ea:	e7e4      	b.n	80032b6 <_malloc_r+0x1e>
 80032ec:	680b      	ldr	r3, [r1, #0]
 80032ee:	1b5b      	subs	r3, r3, r5
 80032f0:	d418      	bmi.n	8003324 <_malloc_r+0x8c>
 80032f2:	2b0b      	cmp	r3, #11
 80032f4:	d90f      	bls.n	8003316 <_malloc_r+0x7e>
 80032f6:	600b      	str	r3, [r1, #0]
 80032f8:	50cd      	str	r5, [r1, r3]
 80032fa:	18cc      	adds	r4, r1, r3
 80032fc:	4630      	mov	r0, r6
 80032fe:	f001 fa0c 	bl	800471a <__malloc_unlock>
 8003302:	f104 000b 	add.w	r0, r4, #11
 8003306:	1d23      	adds	r3, r4, #4
 8003308:	f020 0007 	bic.w	r0, r0, #7
 800330c:	1ac3      	subs	r3, r0, r3
 800330e:	d0d3      	beq.n	80032b8 <_malloc_r+0x20>
 8003310:	425a      	negs	r2, r3
 8003312:	50e2      	str	r2, [r4, r3]
 8003314:	e7d0      	b.n	80032b8 <_malloc_r+0x20>
 8003316:	428c      	cmp	r4, r1
 8003318:	684b      	ldr	r3, [r1, #4]
 800331a:	bf16      	itet	ne
 800331c:	6063      	strne	r3, [r4, #4]
 800331e:	6013      	streq	r3, [r2, #0]
 8003320:	460c      	movne	r4, r1
 8003322:	e7eb      	b.n	80032fc <_malloc_r+0x64>
 8003324:	460c      	mov	r4, r1
 8003326:	6849      	ldr	r1, [r1, #4]
 8003328:	e7cc      	b.n	80032c4 <_malloc_r+0x2c>
 800332a:	1cc4      	adds	r4, r0, #3
 800332c:	f024 0403 	bic.w	r4, r4, #3
 8003330:	42a0      	cmp	r0, r4
 8003332:	d005      	beq.n	8003340 <_malloc_r+0xa8>
 8003334:	1a21      	subs	r1, r4, r0
 8003336:	4630      	mov	r0, r6
 8003338:	f000 fb44 	bl	80039c4 <_sbrk_r>
 800333c:	3001      	adds	r0, #1
 800333e:	d0cf      	beq.n	80032e0 <_malloc_r+0x48>
 8003340:	6025      	str	r5, [r4, #0]
 8003342:	e7db      	b.n	80032fc <_malloc_r+0x64>
 8003344:	20000200 	.word	0x20000200
 8003348:	20000204 	.word	0x20000204

0800334c <__cvt>:
 800334c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003350:	b088      	sub	sp, #32
 8003352:	2b00      	cmp	r3, #0
 8003354:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8003356:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8003358:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 800335c:	461e      	mov	r6, r3
 800335e:	f027 0720 	bic.w	r7, r7, #32
 8003362:	bfbb      	ittet	lt
 8003364:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8003368:	461e      	movlt	r6, r3
 800336a:	2300      	movge	r3, #0
 800336c:	232d      	movlt	r3, #45	; 0x2d
 800336e:	2f46      	cmp	r7, #70	; 0x46
 8003370:	4614      	mov	r4, r2
 8003372:	700b      	strb	r3, [r1, #0]
 8003374:	d004      	beq.n	8003380 <__cvt+0x34>
 8003376:	2f45      	cmp	r7, #69	; 0x45
 8003378:	d100      	bne.n	800337c <__cvt+0x30>
 800337a:	3501      	adds	r5, #1
 800337c:	2302      	movs	r3, #2
 800337e:	e000      	b.n	8003382 <__cvt+0x36>
 8003380:	2303      	movs	r3, #3
 8003382:	aa07      	add	r2, sp, #28
 8003384:	9204      	str	r2, [sp, #16]
 8003386:	aa06      	add	r2, sp, #24
 8003388:	e9cd a202 	strd	sl, r2, [sp, #8]
 800338c:	e9cd 3500 	strd	r3, r5, [sp]
 8003390:	4622      	mov	r2, r4
 8003392:	4633      	mov	r3, r6
 8003394:	f000 fbf8 	bl	8003b88 <_dtoa_r>
 8003398:	2f47      	cmp	r7, #71	; 0x47
 800339a:	4680      	mov	r8, r0
 800339c:	d102      	bne.n	80033a4 <__cvt+0x58>
 800339e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80033a0:	07db      	lsls	r3, r3, #31
 80033a2:	d526      	bpl.n	80033f2 <__cvt+0xa6>
 80033a4:	2f46      	cmp	r7, #70	; 0x46
 80033a6:	eb08 0905 	add.w	r9, r8, r5
 80033aa:	d111      	bne.n	80033d0 <__cvt+0x84>
 80033ac:	f898 3000 	ldrb.w	r3, [r8]
 80033b0:	2b30      	cmp	r3, #48	; 0x30
 80033b2:	d10a      	bne.n	80033ca <__cvt+0x7e>
 80033b4:	2200      	movs	r2, #0
 80033b6:	2300      	movs	r3, #0
 80033b8:	4620      	mov	r0, r4
 80033ba:	4631      	mov	r1, r6
 80033bc:	f7fd fb50 	bl	8000a60 <__aeabi_dcmpeq>
 80033c0:	b918      	cbnz	r0, 80033ca <__cvt+0x7e>
 80033c2:	f1c5 0501 	rsb	r5, r5, #1
 80033c6:	f8ca 5000 	str.w	r5, [sl]
 80033ca:	f8da 3000 	ldr.w	r3, [sl]
 80033ce:	4499      	add	r9, r3
 80033d0:	2200      	movs	r2, #0
 80033d2:	2300      	movs	r3, #0
 80033d4:	4620      	mov	r0, r4
 80033d6:	4631      	mov	r1, r6
 80033d8:	f7fd fb42 	bl	8000a60 <__aeabi_dcmpeq>
 80033dc:	b938      	cbnz	r0, 80033ee <__cvt+0xa2>
 80033de:	2230      	movs	r2, #48	; 0x30
 80033e0:	9b07      	ldr	r3, [sp, #28]
 80033e2:	454b      	cmp	r3, r9
 80033e4:	d205      	bcs.n	80033f2 <__cvt+0xa6>
 80033e6:	1c59      	adds	r1, r3, #1
 80033e8:	9107      	str	r1, [sp, #28]
 80033ea:	701a      	strb	r2, [r3, #0]
 80033ec:	e7f8      	b.n	80033e0 <__cvt+0x94>
 80033ee:	f8cd 901c 	str.w	r9, [sp, #28]
 80033f2:	9b07      	ldr	r3, [sp, #28]
 80033f4:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80033f6:	eba3 0308 	sub.w	r3, r3, r8
 80033fa:	4640      	mov	r0, r8
 80033fc:	6013      	str	r3, [r2, #0]
 80033fe:	b008      	add	sp, #32
 8003400:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08003404 <__exponent>:
 8003404:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003406:	2900      	cmp	r1, #0
 8003408:	4604      	mov	r4, r0
 800340a:	bfba      	itte	lt
 800340c:	4249      	neglt	r1, r1
 800340e:	232d      	movlt	r3, #45	; 0x2d
 8003410:	232b      	movge	r3, #43	; 0x2b
 8003412:	2909      	cmp	r1, #9
 8003414:	f804 2b02 	strb.w	r2, [r4], #2
 8003418:	7043      	strb	r3, [r0, #1]
 800341a:	dd20      	ble.n	800345e <__exponent+0x5a>
 800341c:	f10d 0307 	add.w	r3, sp, #7
 8003420:	461f      	mov	r7, r3
 8003422:	260a      	movs	r6, #10
 8003424:	fb91 f5f6 	sdiv	r5, r1, r6
 8003428:	fb06 1115 	mls	r1, r6, r5, r1
 800342c:	3130      	adds	r1, #48	; 0x30
 800342e:	2d09      	cmp	r5, #9
 8003430:	f803 1c01 	strb.w	r1, [r3, #-1]
 8003434:	f103 32ff 	add.w	r2, r3, #4294967295
 8003438:	4629      	mov	r1, r5
 800343a:	dc09      	bgt.n	8003450 <__exponent+0x4c>
 800343c:	3130      	adds	r1, #48	; 0x30
 800343e:	3b02      	subs	r3, #2
 8003440:	f802 1c01 	strb.w	r1, [r2, #-1]
 8003444:	42bb      	cmp	r3, r7
 8003446:	4622      	mov	r2, r4
 8003448:	d304      	bcc.n	8003454 <__exponent+0x50>
 800344a:	1a10      	subs	r0, r2, r0
 800344c:	b003      	add	sp, #12
 800344e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003450:	4613      	mov	r3, r2
 8003452:	e7e7      	b.n	8003424 <__exponent+0x20>
 8003454:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003458:	f804 2b01 	strb.w	r2, [r4], #1
 800345c:	e7f2      	b.n	8003444 <__exponent+0x40>
 800345e:	2330      	movs	r3, #48	; 0x30
 8003460:	4419      	add	r1, r3
 8003462:	7083      	strb	r3, [r0, #2]
 8003464:	1d02      	adds	r2, r0, #4
 8003466:	70c1      	strb	r1, [r0, #3]
 8003468:	e7ef      	b.n	800344a <__exponent+0x46>
	...

0800346c <_printf_float>:
 800346c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003470:	b091      	sub	sp, #68	; 0x44
 8003472:	460c      	mov	r4, r1
 8003474:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8003476:	4693      	mov	fp, r2
 8003478:	461e      	mov	r6, r3
 800347a:	4605      	mov	r5, r0
 800347c:	f001 f93e 	bl	80046fc <_localeconv_r>
 8003480:	6803      	ldr	r3, [r0, #0]
 8003482:	9309      	str	r3, [sp, #36]	; 0x24
 8003484:	4618      	mov	r0, r3
 8003486:	f7fc febf 	bl	8000208 <strlen>
 800348a:	2300      	movs	r3, #0
 800348c:	930e      	str	r3, [sp, #56]	; 0x38
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	900a      	str	r0, [sp, #40]	; 0x28
 8003492:	3307      	adds	r3, #7
 8003494:	f023 0307 	bic.w	r3, r3, #7
 8003498:	f103 0208 	add.w	r2, r3, #8
 800349c:	f894 8018 	ldrb.w	r8, [r4, #24]
 80034a0:	f8d4 a000 	ldr.w	sl, [r4]
 80034a4:	603a      	str	r2, [r7, #0]
 80034a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034aa:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80034ae:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 80034b2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80034b6:	930b      	str	r3, [sp, #44]	; 0x2c
 80034b8:	f04f 32ff 	mov.w	r2, #4294967295
 80034bc:	4ba6      	ldr	r3, [pc, #664]	; (8003758 <_printf_float+0x2ec>)
 80034be:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80034c0:	4638      	mov	r0, r7
 80034c2:	f7fd faff 	bl	8000ac4 <__aeabi_dcmpun>
 80034c6:	bb68      	cbnz	r0, 8003524 <_printf_float+0xb8>
 80034c8:	f04f 32ff 	mov.w	r2, #4294967295
 80034cc:	4ba2      	ldr	r3, [pc, #648]	; (8003758 <_printf_float+0x2ec>)
 80034ce:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80034d0:	4638      	mov	r0, r7
 80034d2:	f7fd fad9 	bl	8000a88 <__aeabi_dcmple>
 80034d6:	bb28      	cbnz	r0, 8003524 <_printf_float+0xb8>
 80034d8:	2200      	movs	r2, #0
 80034da:	2300      	movs	r3, #0
 80034dc:	4638      	mov	r0, r7
 80034de:	4649      	mov	r1, r9
 80034e0:	f7fd fac8 	bl	8000a74 <__aeabi_dcmplt>
 80034e4:	b110      	cbz	r0, 80034ec <_printf_float+0x80>
 80034e6:	232d      	movs	r3, #45	; 0x2d
 80034e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80034ec:	4f9b      	ldr	r7, [pc, #620]	; (800375c <_printf_float+0x2f0>)
 80034ee:	4b9c      	ldr	r3, [pc, #624]	; (8003760 <_printf_float+0x2f4>)
 80034f0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80034f4:	bf98      	it	ls
 80034f6:	461f      	movls	r7, r3
 80034f8:	2303      	movs	r3, #3
 80034fa:	6123      	str	r3, [r4, #16]
 80034fc:	f02a 0304 	bic.w	r3, sl, #4
 8003500:	6023      	str	r3, [r4, #0]
 8003502:	f04f 0900 	mov.w	r9, #0
 8003506:	9600      	str	r6, [sp, #0]
 8003508:	465b      	mov	r3, fp
 800350a:	aa0f      	add	r2, sp, #60	; 0x3c
 800350c:	4621      	mov	r1, r4
 800350e:	4628      	mov	r0, r5
 8003510:	f000 f9e2 	bl	80038d8 <_printf_common>
 8003514:	3001      	adds	r0, #1
 8003516:	f040 8090 	bne.w	800363a <_printf_float+0x1ce>
 800351a:	f04f 30ff 	mov.w	r0, #4294967295
 800351e:	b011      	add	sp, #68	; 0x44
 8003520:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003524:	463a      	mov	r2, r7
 8003526:	464b      	mov	r3, r9
 8003528:	4638      	mov	r0, r7
 800352a:	4649      	mov	r1, r9
 800352c:	f7fd faca 	bl	8000ac4 <__aeabi_dcmpun>
 8003530:	b110      	cbz	r0, 8003538 <_printf_float+0xcc>
 8003532:	4f8c      	ldr	r7, [pc, #560]	; (8003764 <_printf_float+0x2f8>)
 8003534:	4b8c      	ldr	r3, [pc, #560]	; (8003768 <_printf_float+0x2fc>)
 8003536:	e7db      	b.n	80034f0 <_printf_float+0x84>
 8003538:	6863      	ldr	r3, [r4, #4]
 800353a:	1c59      	adds	r1, r3, #1
 800353c:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 8003540:	a90e      	add	r1, sp, #56	; 0x38
 8003542:	a80d      	add	r0, sp, #52	; 0x34
 8003544:	d140      	bne.n	80035c8 <_printf_float+0x15c>
 8003546:	2306      	movs	r3, #6
 8003548:	6063      	str	r3, [r4, #4]
 800354a:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 800354e:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8003552:	f04f 0c00 	mov.w	ip, #0
 8003556:	6863      	ldr	r3, [r4, #4]
 8003558:	6022      	str	r2, [r4, #0]
 800355a:	e9cd 0803 	strd	r0, r8, [sp, #12]
 800355e:	9300      	str	r3, [sp, #0]
 8003560:	463a      	mov	r2, r7
 8003562:	464b      	mov	r3, r9
 8003564:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8003568:	4628      	mov	r0, r5
 800356a:	f7ff feef 	bl	800334c <__cvt>
 800356e:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 8003572:	2b47      	cmp	r3, #71	; 0x47
 8003574:	4607      	mov	r7, r0
 8003576:	d109      	bne.n	800358c <_printf_float+0x120>
 8003578:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800357a:	1cd8      	adds	r0, r3, #3
 800357c:	db02      	blt.n	8003584 <_printf_float+0x118>
 800357e:	6862      	ldr	r2, [r4, #4]
 8003580:	4293      	cmp	r3, r2
 8003582:	dd47      	ble.n	8003614 <_printf_float+0x1a8>
 8003584:	f1a8 0802 	sub.w	r8, r8, #2
 8003588:	fa5f f888 	uxtb.w	r8, r8
 800358c:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8003590:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003592:	d824      	bhi.n	80035de <_printf_float+0x172>
 8003594:	3901      	subs	r1, #1
 8003596:	4642      	mov	r2, r8
 8003598:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800359c:	910d      	str	r1, [sp, #52]	; 0x34
 800359e:	f7ff ff31 	bl	8003404 <__exponent>
 80035a2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80035a4:	1813      	adds	r3, r2, r0
 80035a6:	2a01      	cmp	r2, #1
 80035a8:	4681      	mov	r9, r0
 80035aa:	6123      	str	r3, [r4, #16]
 80035ac:	dc02      	bgt.n	80035b4 <_printf_float+0x148>
 80035ae:	6822      	ldr	r2, [r4, #0]
 80035b0:	07d1      	lsls	r1, r2, #31
 80035b2:	d501      	bpl.n	80035b8 <_printf_float+0x14c>
 80035b4:	3301      	adds	r3, #1
 80035b6:	6123      	str	r3, [r4, #16]
 80035b8:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d0a2      	beq.n	8003506 <_printf_float+0x9a>
 80035c0:	232d      	movs	r3, #45	; 0x2d
 80035c2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80035c6:	e79e      	b.n	8003506 <_printf_float+0x9a>
 80035c8:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 80035cc:	f000 816e 	beq.w	80038ac <_printf_float+0x440>
 80035d0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80035d4:	d1b9      	bne.n	800354a <_printf_float+0xde>
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d1b7      	bne.n	800354a <_printf_float+0xde>
 80035da:	2301      	movs	r3, #1
 80035dc:	e7b4      	b.n	8003548 <_printf_float+0xdc>
 80035de:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 80035e2:	d119      	bne.n	8003618 <_printf_float+0x1ac>
 80035e4:	2900      	cmp	r1, #0
 80035e6:	6863      	ldr	r3, [r4, #4]
 80035e8:	dd0c      	ble.n	8003604 <_printf_float+0x198>
 80035ea:	6121      	str	r1, [r4, #16]
 80035ec:	b913      	cbnz	r3, 80035f4 <_printf_float+0x188>
 80035ee:	6822      	ldr	r2, [r4, #0]
 80035f0:	07d2      	lsls	r2, r2, #31
 80035f2:	d502      	bpl.n	80035fa <_printf_float+0x18e>
 80035f4:	3301      	adds	r3, #1
 80035f6:	440b      	add	r3, r1
 80035f8:	6123      	str	r3, [r4, #16]
 80035fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80035fc:	65a3      	str	r3, [r4, #88]	; 0x58
 80035fe:	f04f 0900 	mov.w	r9, #0
 8003602:	e7d9      	b.n	80035b8 <_printf_float+0x14c>
 8003604:	b913      	cbnz	r3, 800360c <_printf_float+0x1a0>
 8003606:	6822      	ldr	r2, [r4, #0]
 8003608:	07d0      	lsls	r0, r2, #31
 800360a:	d501      	bpl.n	8003610 <_printf_float+0x1a4>
 800360c:	3302      	adds	r3, #2
 800360e:	e7f3      	b.n	80035f8 <_printf_float+0x18c>
 8003610:	2301      	movs	r3, #1
 8003612:	e7f1      	b.n	80035f8 <_printf_float+0x18c>
 8003614:	f04f 0867 	mov.w	r8, #103	; 0x67
 8003618:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800361c:	4293      	cmp	r3, r2
 800361e:	db05      	blt.n	800362c <_printf_float+0x1c0>
 8003620:	6822      	ldr	r2, [r4, #0]
 8003622:	6123      	str	r3, [r4, #16]
 8003624:	07d1      	lsls	r1, r2, #31
 8003626:	d5e8      	bpl.n	80035fa <_printf_float+0x18e>
 8003628:	3301      	adds	r3, #1
 800362a:	e7e5      	b.n	80035f8 <_printf_float+0x18c>
 800362c:	2b00      	cmp	r3, #0
 800362e:	bfd4      	ite	le
 8003630:	f1c3 0302 	rsble	r3, r3, #2
 8003634:	2301      	movgt	r3, #1
 8003636:	4413      	add	r3, r2
 8003638:	e7de      	b.n	80035f8 <_printf_float+0x18c>
 800363a:	6823      	ldr	r3, [r4, #0]
 800363c:	055a      	lsls	r2, r3, #21
 800363e:	d407      	bmi.n	8003650 <_printf_float+0x1e4>
 8003640:	6923      	ldr	r3, [r4, #16]
 8003642:	463a      	mov	r2, r7
 8003644:	4659      	mov	r1, fp
 8003646:	4628      	mov	r0, r5
 8003648:	47b0      	blx	r6
 800364a:	3001      	adds	r0, #1
 800364c:	d129      	bne.n	80036a2 <_printf_float+0x236>
 800364e:	e764      	b.n	800351a <_printf_float+0xae>
 8003650:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8003654:	f240 80d7 	bls.w	8003806 <_printf_float+0x39a>
 8003658:	2200      	movs	r2, #0
 800365a:	2300      	movs	r3, #0
 800365c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003660:	f7fd f9fe 	bl	8000a60 <__aeabi_dcmpeq>
 8003664:	b388      	cbz	r0, 80036ca <_printf_float+0x25e>
 8003666:	2301      	movs	r3, #1
 8003668:	4a40      	ldr	r2, [pc, #256]	; (800376c <_printf_float+0x300>)
 800366a:	4659      	mov	r1, fp
 800366c:	4628      	mov	r0, r5
 800366e:	47b0      	blx	r6
 8003670:	3001      	adds	r0, #1
 8003672:	f43f af52 	beq.w	800351a <_printf_float+0xae>
 8003676:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800367a:	429a      	cmp	r2, r3
 800367c:	db02      	blt.n	8003684 <_printf_float+0x218>
 800367e:	6823      	ldr	r3, [r4, #0]
 8003680:	07d8      	lsls	r0, r3, #31
 8003682:	d50e      	bpl.n	80036a2 <_printf_float+0x236>
 8003684:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003688:	4659      	mov	r1, fp
 800368a:	4628      	mov	r0, r5
 800368c:	47b0      	blx	r6
 800368e:	3001      	adds	r0, #1
 8003690:	f43f af43 	beq.w	800351a <_printf_float+0xae>
 8003694:	2700      	movs	r7, #0
 8003696:	f104 081a 	add.w	r8, r4, #26
 800369a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800369c:	3b01      	subs	r3, #1
 800369e:	42bb      	cmp	r3, r7
 80036a0:	dc09      	bgt.n	80036b6 <_printf_float+0x24a>
 80036a2:	6823      	ldr	r3, [r4, #0]
 80036a4:	079f      	lsls	r7, r3, #30
 80036a6:	f100 80fd 	bmi.w	80038a4 <_printf_float+0x438>
 80036aa:	68e0      	ldr	r0, [r4, #12]
 80036ac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80036ae:	4298      	cmp	r0, r3
 80036b0:	bfb8      	it	lt
 80036b2:	4618      	movlt	r0, r3
 80036b4:	e733      	b.n	800351e <_printf_float+0xb2>
 80036b6:	2301      	movs	r3, #1
 80036b8:	4642      	mov	r2, r8
 80036ba:	4659      	mov	r1, fp
 80036bc:	4628      	mov	r0, r5
 80036be:	47b0      	blx	r6
 80036c0:	3001      	adds	r0, #1
 80036c2:	f43f af2a 	beq.w	800351a <_printf_float+0xae>
 80036c6:	3701      	adds	r7, #1
 80036c8:	e7e7      	b.n	800369a <_printf_float+0x22e>
 80036ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	dc2b      	bgt.n	8003728 <_printf_float+0x2bc>
 80036d0:	2301      	movs	r3, #1
 80036d2:	4a26      	ldr	r2, [pc, #152]	; (800376c <_printf_float+0x300>)
 80036d4:	4659      	mov	r1, fp
 80036d6:	4628      	mov	r0, r5
 80036d8:	47b0      	blx	r6
 80036da:	3001      	adds	r0, #1
 80036dc:	f43f af1d 	beq.w	800351a <_printf_float+0xae>
 80036e0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80036e2:	b923      	cbnz	r3, 80036ee <_printf_float+0x282>
 80036e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80036e6:	b913      	cbnz	r3, 80036ee <_printf_float+0x282>
 80036e8:	6823      	ldr	r3, [r4, #0]
 80036ea:	07d9      	lsls	r1, r3, #31
 80036ec:	d5d9      	bpl.n	80036a2 <_printf_float+0x236>
 80036ee:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80036f2:	4659      	mov	r1, fp
 80036f4:	4628      	mov	r0, r5
 80036f6:	47b0      	blx	r6
 80036f8:	3001      	adds	r0, #1
 80036fa:	f43f af0e 	beq.w	800351a <_printf_float+0xae>
 80036fe:	f04f 0800 	mov.w	r8, #0
 8003702:	f104 091a 	add.w	r9, r4, #26
 8003706:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003708:	425b      	negs	r3, r3
 800370a:	4543      	cmp	r3, r8
 800370c:	dc01      	bgt.n	8003712 <_printf_float+0x2a6>
 800370e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003710:	e797      	b.n	8003642 <_printf_float+0x1d6>
 8003712:	2301      	movs	r3, #1
 8003714:	464a      	mov	r2, r9
 8003716:	4659      	mov	r1, fp
 8003718:	4628      	mov	r0, r5
 800371a:	47b0      	blx	r6
 800371c:	3001      	adds	r0, #1
 800371e:	f43f aefc 	beq.w	800351a <_printf_float+0xae>
 8003722:	f108 0801 	add.w	r8, r8, #1
 8003726:	e7ee      	b.n	8003706 <_printf_float+0x29a>
 8003728:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800372a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800372c:	429a      	cmp	r2, r3
 800372e:	bfa8      	it	ge
 8003730:	461a      	movge	r2, r3
 8003732:	2a00      	cmp	r2, #0
 8003734:	4690      	mov	r8, r2
 8003736:	dd07      	ble.n	8003748 <_printf_float+0x2dc>
 8003738:	4613      	mov	r3, r2
 800373a:	4659      	mov	r1, fp
 800373c:	463a      	mov	r2, r7
 800373e:	4628      	mov	r0, r5
 8003740:	47b0      	blx	r6
 8003742:	3001      	adds	r0, #1
 8003744:	f43f aee9 	beq.w	800351a <_printf_float+0xae>
 8003748:	f104 031a 	add.w	r3, r4, #26
 800374c:	f04f 0a00 	mov.w	sl, #0
 8003750:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8003754:	930b      	str	r3, [sp, #44]	; 0x2c
 8003756:	e015      	b.n	8003784 <_printf_float+0x318>
 8003758:	7fefffff 	.word	0x7fefffff
 800375c:	08004d4c 	.word	0x08004d4c
 8003760:	08004d48 	.word	0x08004d48
 8003764:	08004d54 	.word	0x08004d54
 8003768:	08004d50 	.word	0x08004d50
 800376c:	08004d58 	.word	0x08004d58
 8003770:	2301      	movs	r3, #1
 8003772:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003774:	4659      	mov	r1, fp
 8003776:	4628      	mov	r0, r5
 8003778:	47b0      	blx	r6
 800377a:	3001      	adds	r0, #1
 800377c:	f43f aecd 	beq.w	800351a <_printf_float+0xae>
 8003780:	f10a 0a01 	add.w	sl, sl, #1
 8003784:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8003788:	eba9 0308 	sub.w	r3, r9, r8
 800378c:	4553      	cmp	r3, sl
 800378e:	dcef      	bgt.n	8003770 <_printf_float+0x304>
 8003790:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003794:	429a      	cmp	r2, r3
 8003796:	444f      	add	r7, r9
 8003798:	db14      	blt.n	80037c4 <_printf_float+0x358>
 800379a:	6823      	ldr	r3, [r4, #0]
 800379c:	07da      	lsls	r2, r3, #31
 800379e:	d411      	bmi.n	80037c4 <_printf_float+0x358>
 80037a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80037a2:	990d      	ldr	r1, [sp, #52]	; 0x34
 80037a4:	eba3 0209 	sub.w	r2, r3, r9
 80037a8:	eba3 0901 	sub.w	r9, r3, r1
 80037ac:	4591      	cmp	r9, r2
 80037ae:	bfa8      	it	ge
 80037b0:	4691      	movge	r9, r2
 80037b2:	f1b9 0f00 	cmp.w	r9, #0
 80037b6:	dc0d      	bgt.n	80037d4 <_printf_float+0x368>
 80037b8:	2700      	movs	r7, #0
 80037ba:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80037be:	f104 081a 	add.w	r8, r4, #26
 80037c2:	e018      	b.n	80037f6 <_printf_float+0x38a>
 80037c4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80037c8:	4659      	mov	r1, fp
 80037ca:	4628      	mov	r0, r5
 80037cc:	47b0      	blx	r6
 80037ce:	3001      	adds	r0, #1
 80037d0:	d1e6      	bne.n	80037a0 <_printf_float+0x334>
 80037d2:	e6a2      	b.n	800351a <_printf_float+0xae>
 80037d4:	464b      	mov	r3, r9
 80037d6:	463a      	mov	r2, r7
 80037d8:	4659      	mov	r1, fp
 80037da:	4628      	mov	r0, r5
 80037dc:	47b0      	blx	r6
 80037de:	3001      	adds	r0, #1
 80037e0:	d1ea      	bne.n	80037b8 <_printf_float+0x34c>
 80037e2:	e69a      	b.n	800351a <_printf_float+0xae>
 80037e4:	2301      	movs	r3, #1
 80037e6:	4642      	mov	r2, r8
 80037e8:	4659      	mov	r1, fp
 80037ea:	4628      	mov	r0, r5
 80037ec:	47b0      	blx	r6
 80037ee:	3001      	adds	r0, #1
 80037f0:	f43f ae93 	beq.w	800351a <_printf_float+0xae>
 80037f4:	3701      	adds	r7, #1
 80037f6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80037fa:	1a9b      	subs	r3, r3, r2
 80037fc:	eba3 0309 	sub.w	r3, r3, r9
 8003800:	42bb      	cmp	r3, r7
 8003802:	dcef      	bgt.n	80037e4 <_printf_float+0x378>
 8003804:	e74d      	b.n	80036a2 <_printf_float+0x236>
 8003806:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003808:	2a01      	cmp	r2, #1
 800380a:	dc01      	bgt.n	8003810 <_printf_float+0x3a4>
 800380c:	07db      	lsls	r3, r3, #31
 800380e:	d538      	bpl.n	8003882 <_printf_float+0x416>
 8003810:	2301      	movs	r3, #1
 8003812:	463a      	mov	r2, r7
 8003814:	4659      	mov	r1, fp
 8003816:	4628      	mov	r0, r5
 8003818:	47b0      	blx	r6
 800381a:	3001      	adds	r0, #1
 800381c:	f43f ae7d 	beq.w	800351a <_printf_float+0xae>
 8003820:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003824:	4659      	mov	r1, fp
 8003826:	4628      	mov	r0, r5
 8003828:	47b0      	blx	r6
 800382a:	3001      	adds	r0, #1
 800382c:	f107 0701 	add.w	r7, r7, #1
 8003830:	f43f ae73 	beq.w	800351a <_printf_float+0xae>
 8003834:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003836:	2200      	movs	r2, #0
 8003838:	f103 38ff 	add.w	r8, r3, #4294967295
 800383c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003840:	2300      	movs	r3, #0
 8003842:	f7fd f90d 	bl	8000a60 <__aeabi_dcmpeq>
 8003846:	b9c0      	cbnz	r0, 800387a <_printf_float+0x40e>
 8003848:	4643      	mov	r3, r8
 800384a:	463a      	mov	r2, r7
 800384c:	4659      	mov	r1, fp
 800384e:	4628      	mov	r0, r5
 8003850:	47b0      	blx	r6
 8003852:	3001      	adds	r0, #1
 8003854:	d10d      	bne.n	8003872 <_printf_float+0x406>
 8003856:	e660      	b.n	800351a <_printf_float+0xae>
 8003858:	2301      	movs	r3, #1
 800385a:	4642      	mov	r2, r8
 800385c:	4659      	mov	r1, fp
 800385e:	4628      	mov	r0, r5
 8003860:	47b0      	blx	r6
 8003862:	3001      	adds	r0, #1
 8003864:	f43f ae59 	beq.w	800351a <_printf_float+0xae>
 8003868:	3701      	adds	r7, #1
 800386a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800386c:	3b01      	subs	r3, #1
 800386e:	42bb      	cmp	r3, r7
 8003870:	dcf2      	bgt.n	8003858 <_printf_float+0x3ec>
 8003872:	464b      	mov	r3, r9
 8003874:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003878:	e6e4      	b.n	8003644 <_printf_float+0x1d8>
 800387a:	2700      	movs	r7, #0
 800387c:	f104 081a 	add.w	r8, r4, #26
 8003880:	e7f3      	b.n	800386a <_printf_float+0x3fe>
 8003882:	2301      	movs	r3, #1
 8003884:	e7e1      	b.n	800384a <_printf_float+0x3de>
 8003886:	2301      	movs	r3, #1
 8003888:	4642      	mov	r2, r8
 800388a:	4659      	mov	r1, fp
 800388c:	4628      	mov	r0, r5
 800388e:	47b0      	blx	r6
 8003890:	3001      	adds	r0, #1
 8003892:	f43f ae42 	beq.w	800351a <_printf_float+0xae>
 8003896:	3701      	adds	r7, #1
 8003898:	68e3      	ldr	r3, [r4, #12]
 800389a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800389c:	1a9b      	subs	r3, r3, r2
 800389e:	42bb      	cmp	r3, r7
 80038a0:	dcf1      	bgt.n	8003886 <_printf_float+0x41a>
 80038a2:	e702      	b.n	80036aa <_printf_float+0x23e>
 80038a4:	2700      	movs	r7, #0
 80038a6:	f104 0819 	add.w	r8, r4, #25
 80038aa:	e7f5      	b.n	8003898 <_printf_float+0x42c>
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	f43f ae94 	beq.w	80035da <_printf_float+0x16e>
 80038b2:	f04f 0c00 	mov.w	ip, #0
 80038b6:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 80038ba:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 80038be:	6022      	str	r2, [r4, #0]
 80038c0:	e9cd 0803 	strd	r0, r8, [sp, #12]
 80038c4:	e9cd 2101 	strd	r2, r1, [sp, #4]
 80038c8:	9300      	str	r3, [sp, #0]
 80038ca:	463a      	mov	r2, r7
 80038cc:	464b      	mov	r3, r9
 80038ce:	4628      	mov	r0, r5
 80038d0:	f7ff fd3c 	bl	800334c <__cvt>
 80038d4:	4607      	mov	r7, r0
 80038d6:	e64f      	b.n	8003578 <_printf_float+0x10c>

080038d8 <_printf_common>:
 80038d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80038dc:	4691      	mov	r9, r2
 80038de:	461f      	mov	r7, r3
 80038e0:	688a      	ldr	r2, [r1, #8]
 80038e2:	690b      	ldr	r3, [r1, #16]
 80038e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80038e8:	4293      	cmp	r3, r2
 80038ea:	bfb8      	it	lt
 80038ec:	4613      	movlt	r3, r2
 80038ee:	f8c9 3000 	str.w	r3, [r9]
 80038f2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80038f6:	4606      	mov	r6, r0
 80038f8:	460c      	mov	r4, r1
 80038fa:	b112      	cbz	r2, 8003902 <_printf_common+0x2a>
 80038fc:	3301      	adds	r3, #1
 80038fe:	f8c9 3000 	str.w	r3, [r9]
 8003902:	6823      	ldr	r3, [r4, #0]
 8003904:	0699      	lsls	r1, r3, #26
 8003906:	bf42      	ittt	mi
 8003908:	f8d9 3000 	ldrmi.w	r3, [r9]
 800390c:	3302      	addmi	r3, #2
 800390e:	f8c9 3000 	strmi.w	r3, [r9]
 8003912:	6825      	ldr	r5, [r4, #0]
 8003914:	f015 0506 	ands.w	r5, r5, #6
 8003918:	d107      	bne.n	800392a <_printf_common+0x52>
 800391a:	f104 0a19 	add.w	sl, r4, #25
 800391e:	68e3      	ldr	r3, [r4, #12]
 8003920:	f8d9 2000 	ldr.w	r2, [r9]
 8003924:	1a9b      	subs	r3, r3, r2
 8003926:	42ab      	cmp	r3, r5
 8003928:	dc28      	bgt.n	800397c <_printf_common+0xa4>
 800392a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800392e:	6822      	ldr	r2, [r4, #0]
 8003930:	3300      	adds	r3, #0
 8003932:	bf18      	it	ne
 8003934:	2301      	movne	r3, #1
 8003936:	0692      	lsls	r2, r2, #26
 8003938:	d42d      	bmi.n	8003996 <_printf_common+0xbe>
 800393a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800393e:	4639      	mov	r1, r7
 8003940:	4630      	mov	r0, r6
 8003942:	47c0      	blx	r8
 8003944:	3001      	adds	r0, #1
 8003946:	d020      	beq.n	800398a <_printf_common+0xb2>
 8003948:	6823      	ldr	r3, [r4, #0]
 800394a:	68e5      	ldr	r5, [r4, #12]
 800394c:	f8d9 2000 	ldr.w	r2, [r9]
 8003950:	f003 0306 	and.w	r3, r3, #6
 8003954:	2b04      	cmp	r3, #4
 8003956:	bf08      	it	eq
 8003958:	1aad      	subeq	r5, r5, r2
 800395a:	68a3      	ldr	r3, [r4, #8]
 800395c:	6922      	ldr	r2, [r4, #16]
 800395e:	bf0c      	ite	eq
 8003960:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003964:	2500      	movne	r5, #0
 8003966:	4293      	cmp	r3, r2
 8003968:	bfc4      	itt	gt
 800396a:	1a9b      	subgt	r3, r3, r2
 800396c:	18ed      	addgt	r5, r5, r3
 800396e:	f04f 0900 	mov.w	r9, #0
 8003972:	341a      	adds	r4, #26
 8003974:	454d      	cmp	r5, r9
 8003976:	d11a      	bne.n	80039ae <_printf_common+0xd6>
 8003978:	2000      	movs	r0, #0
 800397a:	e008      	b.n	800398e <_printf_common+0xb6>
 800397c:	2301      	movs	r3, #1
 800397e:	4652      	mov	r2, sl
 8003980:	4639      	mov	r1, r7
 8003982:	4630      	mov	r0, r6
 8003984:	47c0      	blx	r8
 8003986:	3001      	adds	r0, #1
 8003988:	d103      	bne.n	8003992 <_printf_common+0xba>
 800398a:	f04f 30ff 	mov.w	r0, #4294967295
 800398e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003992:	3501      	adds	r5, #1
 8003994:	e7c3      	b.n	800391e <_printf_common+0x46>
 8003996:	18e1      	adds	r1, r4, r3
 8003998:	1c5a      	adds	r2, r3, #1
 800399a:	2030      	movs	r0, #48	; 0x30
 800399c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80039a0:	4422      	add	r2, r4
 80039a2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80039a6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80039aa:	3302      	adds	r3, #2
 80039ac:	e7c5      	b.n	800393a <_printf_common+0x62>
 80039ae:	2301      	movs	r3, #1
 80039b0:	4622      	mov	r2, r4
 80039b2:	4639      	mov	r1, r7
 80039b4:	4630      	mov	r0, r6
 80039b6:	47c0      	blx	r8
 80039b8:	3001      	adds	r0, #1
 80039ba:	d0e6      	beq.n	800398a <_printf_common+0xb2>
 80039bc:	f109 0901 	add.w	r9, r9, #1
 80039c0:	e7d8      	b.n	8003974 <_printf_common+0x9c>
	...

080039c4 <_sbrk_r>:
 80039c4:	b538      	push	{r3, r4, r5, lr}
 80039c6:	4c06      	ldr	r4, [pc, #24]	; (80039e0 <_sbrk_r+0x1c>)
 80039c8:	2300      	movs	r3, #0
 80039ca:	4605      	mov	r5, r0
 80039cc:	4608      	mov	r0, r1
 80039ce:	6023      	str	r3, [r4, #0]
 80039d0:	f7fd ff2a 	bl	8001828 <_sbrk>
 80039d4:	1c43      	adds	r3, r0, #1
 80039d6:	d102      	bne.n	80039de <_sbrk_r+0x1a>
 80039d8:	6823      	ldr	r3, [r4, #0]
 80039da:	b103      	cbz	r3, 80039de <_sbrk_r+0x1a>
 80039dc:	602b      	str	r3, [r5, #0]
 80039de:	bd38      	pop	{r3, r4, r5, pc}
 80039e0:	20000208 	.word	0x20000208

080039e4 <_raise_r>:
 80039e4:	291f      	cmp	r1, #31
 80039e6:	b538      	push	{r3, r4, r5, lr}
 80039e8:	4604      	mov	r4, r0
 80039ea:	460d      	mov	r5, r1
 80039ec:	d904      	bls.n	80039f8 <_raise_r+0x14>
 80039ee:	2316      	movs	r3, #22
 80039f0:	6003      	str	r3, [r0, #0]
 80039f2:	f04f 30ff 	mov.w	r0, #4294967295
 80039f6:	bd38      	pop	{r3, r4, r5, pc}
 80039f8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80039fa:	b112      	cbz	r2, 8003a02 <_raise_r+0x1e>
 80039fc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8003a00:	b94b      	cbnz	r3, 8003a16 <_raise_r+0x32>
 8003a02:	4620      	mov	r0, r4
 8003a04:	f000 f830 	bl	8003a68 <_getpid_r>
 8003a08:	462a      	mov	r2, r5
 8003a0a:	4601      	mov	r1, r0
 8003a0c:	4620      	mov	r0, r4
 8003a0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003a12:	f000 b817 	b.w	8003a44 <_kill_r>
 8003a16:	2b01      	cmp	r3, #1
 8003a18:	d00a      	beq.n	8003a30 <_raise_r+0x4c>
 8003a1a:	1c59      	adds	r1, r3, #1
 8003a1c:	d103      	bne.n	8003a26 <_raise_r+0x42>
 8003a1e:	2316      	movs	r3, #22
 8003a20:	6003      	str	r3, [r0, #0]
 8003a22:	2001      	movs	r0, #1
 8003a24:	e7e7      	b.n	80039f6 <_raise_r+0x12>
 8003a26:	2400      	movs	r4, #0
 8003a28:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8003a2c:	4628      	mov	r0, r5
 8003a2e:	4798      	blx	r3
 8003a30:	2000      	movs	r0, #0
 8003a32:	e7e0      	b.n	80039f6 <_raise_r+0x12>

08003a34 <raise>:
 8003a34:	4b02      	ldr	r3, [pc, #8]	; (8003a40 <raise+0xc>)
 8003a36:	4601      	mov	r1, r0
 8003a38:	6818      	ldr	r0, [r3, #0]
 8003a3a:	f7ff bfd3 	b.w	80039e4 <_raise_r>
 8003a3e:	bf00      	nop
 8003a40:	20000000 	.word	0x20000000

08003a44 <_kill_r>:
 8003a44:	b538      	push	{r3, r4, r5, lr}
 8003a46:	4c07      	ldr	r4, [pc, #28]	; (8003a64 <_kill_r+0x20>)
 8003a48:	2300      	movs	r3, #0
 8003a4a:	4605      	mov	r5, r0
 8003a4c:	4608      	mov	r0, r1
 8003a4e:	4611      	mov	r1, r2
 8003a50:	6023      	str	r3, [r4, #0]
 8003a52:	f7fd fece 	bl	80017f2 <_kill>
 8003a56:	1c43      	adds	r3, r0, #1
 8003a58:	d102      	bne.n	8003a60 <_kill_r+0x1c>
 8003a5a:	6823      	ldr	r3, [r4, #0]
 8003a5c:	b103      	cbz	r3, 8003a60 <_kill_r+0x1c>
 8003a5e:	602b      	str	r3, [r5, #0]
 8003a60:	bd38      	pop	{r3, r4, r5, pc}
 8003a62:	bf00      	nop
 8003a64:	20000208 	.word	0x20000208

08003a68 <_getpid_r>:
 8003a68:	f7fd bebc 	b.w	80017e4 <_getpid>

08003a6c <quorem>:
 8003a6c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a70:	6903      	ldr	r3, [r0, #16]
 8003a72:	690c      	ldr	r4, [r1, #16]
 8003a74:	42a3      	cmp	r3, r4
 8003a76:	4680      	mov	r8, r0
 8003a78:	f2c0 8082 	blt.w	8003b80 <quorem+0x114>
 8003a7c:	3c01      	subs	r4, #1
 8003a7e:	f101 0714 	add.w	r7, r1, #20
 8003a82:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8003a86:	f100 0614 	add.w	r6, r0, #20
 8003a8a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8003a8e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8003a92:	eb06 030c 	add.w	r3, r6, ip
 8003a96:	3501      	adds	r5, #1
 8003a98:	eb07 090c 	add.w	r9, r7, ip
 8003a9c:	9301      	str	r3, [sp, #4]
 8003a9e:	fbb0 f5f5 	udiv	r5, r0, r5
 8003aa2:	b395      	cbz	r5, 8003b0a <quorem+0x9e>
 8003aa4:	f04f 0a00 	mov.w	sl, #0
 8003aa8:	4638      	mov	r0, r7
 8003aaa:	46b6      	mov	lr, r6
 8003aac:	46d3      	mov	fp, sl
 8003aae:	f850 2b04 	ldr.w	r2, [r0], #4
 8003ab2:	b293      	uxth	r3, r2
 8003ab4:	fb05 a303 	mla	r3, r5, r3, sl
 8003ab8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8003abc:	b29b      	uxth	r3, r3
 8003abe:	ebab 0303 	sub.w	r3, fp, r3
 8003ac2:	0c12      	lsrs	r2, r2, #16
 8003ac4:	f8de b000 	ldr.w	fp, [lr]
 8003ac8:	fb05 a202 	mla	r2, r5, r2, sl
 8003acc:	fa13 f38b 	uxtah	r3, r3, fp
 8003ad0:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8003ad4:	fa1f fb82 	uxth.w	fp, r2
 8003ad8:	f8de 2000 	ldr.w	r2, [lr]
 8003adc:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8003ae0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003ae4:	b29b      	uxth	r3, r3
 8003ae6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003aea:	4581      	cmp	r9, r0
 8003aec:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8003af0:	f84e 3b04 	str.w	r3, [lr], #4
 8003af4:	d2db      	bcs.n	8003aae <quorem+0x42>
 8003af6:	f856 300c 	ldr.w	r3, [r6, ip]
 8003afa:	b933      	cbnz	r3, 8003b0a <quorem+0x9e>
 8003afc:	9b01      	ldr	r3, [sp, #4]
 8003afe:	3b04      	subs	r3, #4
 8003b00:	429e      	cmp	r6, r3
 8003b02:	461a      	mov	r2, r3
 8003b04:	d330      	bcc.n	8003b68 <quorem+0xfc>
 8003b06:	f8c8 4010 	str.w	r4, [r8, #16]
 8003b0a:	4640      	mov	r0, r8
 8003b0c:	f001 f81c 	bl	8004b48 <__mcmp>
 8003b10:	2800      	cmp	r0, #0
 8003b12:	db25      	blt.n	8003b60 <quorem+0xf4>
 8003b14:	3501      	adds	r5, #1
 8003b16:	4630      	mov	r0, r6
 8003b18:	f04f 0c00 	mov.w	ip, #0
 8003b1c:	f857 2b04 	ldr.w	r2, [r7], #4
 8003b20:	f8d0 e000 	ldr.w	lr, [r0]
 8003b24:	b293      	uxth	r3, r2
 8003b26:	ebac 0303 	sub.w	r3, ip, r3
 8003b2a:	0c12      	lsrs	r2, r2, #16
 8003b2c:	fa13 f38e 	uxtah	r3, r3, lr
 8003b30:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8003b34:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003b38:	b29b      	uxth	r3, r3
 8003b3a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003b3e:	45b9      	cmp	r9, r7
 8003b40:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8003b44:	f840 3b04 	str.w	r3, [r0], #4
 8003b48:	d2e8      	bcs.n	8003b1c <quorem+0xb0>
 8003b4a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8003b4e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8003b52:	b92a      	cbnz	r2, 8003b60 <quorem+0xf4>
 8003b54:	3b04      	subs	r3, #4
 8003b56:	429e      	cmp	r6, r3
 8003b58:	461a      	mov	r2, r3
 8003b5a:	d30b      	bcc.n	8003b74 <quorem+0x108>
 8003b5c:	f8c8 4010 	str.w	r4, [r8, #16]
 8003b60:	4628      	mov	r0, r5
 8003b62:	b003      	add	sp, #12
 8003b64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b68:	6812      	ldr	r2, [r2, #0]
 8003b6a:	3b04      	subs	r3, #4
 8003b6c:	2a00      	cmp	r2, #0
 8003b6e:	d1ca      	bne.n	8003b06 <quorem+0x9a>
 8003b70:	3c01      	subs	r4, #1
 8003b72:	e7c5      	b.n	8003b00 <quorem+0x94>
 8003b74:	6812      	ldr	r2, [r2, #0]
 8003b76:	3b04      	subs	r3, #4
 8003b78:	2a00      	cmp	r2, #0
 8003b7a:	d1ef      	bne.n	8003b5c <quorem+0xf0>
 8003b7c:	3c01      	subs	r4, #1
 8003b7e:	e7ea      	b.n	8003b56 <quorem+0xea>
 8003b80:	2000      	movs	r0, #0
 8003b82:	e7ee      	b.n	8003b62 <quorem+0xf6>
 8003b84:	0000      	movs	r0, r0
	...

08003b88 <_dtoa_r>:
 8003b88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b8c:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8003b8e:	b095      	sub	sp, #84	; 0x54
 8003b90:	4616      	mov	r6, r2
 8003b92:	461f      	mov	r7, r3
 8003b94:	4604      	mov	r4, r0
 8003b96:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 8003b9a:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8003b9e:	b93d      	cbnz	r5, 8003bb0 <_dtoa_r+0x28>
 8003ba0:	2010      	movs	r0, #16
 8003ba2:	f7ff fb07 	bl	80031b4 <malloc>
 8003ba6:	6260      	str	r0, [r4, #36]	; 0x24
 8003ba8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8003bac:	6005      	str	r5, [r0, #0]
 8003bae:	60c5      	str	r5, [r0, #12]
 8003bb0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003bb2:	6819      	ldr	r1, [r3, #0]
 8003bb4:	b151      	cbz	r1, 8003bcc <_dtoa_r+0x44>
 8003bb6:	685a      	ldr	r2, [r3, #4]
 8003bb8:	604a      	str	r2, [r1, #4]
 8003bba:	2301      	movs	r3, #1
 8003bbc:	4093      	lsls	r3, r2
 8003bbe:	608b      	str	r3, [r1, #8]
 8003bc0:	4620      	mov	r0, r4
 8003bc2:	f000 fddf 	bl	8004784 <_Bfree>
 8003bc6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003bc8:	2200      	movs	r2, #0
 8003bca:	601a      	str	r2, [r3, #0]
 8003bcc:	1e3b      	subs	r3, r7, #0
 8003bce:	bfbb      	ittet	lt
 8003bd0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8003bd4:	9303      	strlt	r3, [sp, #12]
 8003bd6:	2300      	movge	r3, #0
 8003bd8:	2201      	movlt	r2, #1
 8003bda:	bfac      	ite	ge
 8003bdc:	f8c8 3000 	strge.w	r3, [r8]
 8003be0:	f8c8 2000 	strlt.w	r2, [r8]
 8003be4:	4bae      	ldr	r3, [pc, #696]	; (8003ea0 <_dtoa_r+0x318>)
 8003be6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8003bea:	ea33 0308 	bics.w	r3, r3, r8
 8003bee:	d11b      	bne.n	8003c28 <_dtoa_r+0xa0>
 8003bf0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8003bf2:	f242 730f 	movw	r3, #9999	; 0x270f
 8003bf6:	6013      	str	r3, [r2, #0]
 8003bf8:	9b02      	ldr	r3, [sp, #8]
 8003bfa:	b923      	cbnz	r3, 8003c06 <_dtoa_r+0x7e>
 8003bfc:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8003c00:	2800      	cmp	r0, #0
 8003c02:	f000 854b 	beq.w	800469c <_dtoa_r+0xb14>
 8003c06:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003c08:	b953      	cbnz	r3, 8003c20 <_dtoa_r+0x98>
 8003c0a:	4ba6      	ldr	r3, [pc, #664]	; (8003ea4 <_dtoa_r+0x31c>)
 8003c0c:	e021      	b.n	8003c52 <_dtoa_r+0xca>
 8003c0e:	4ba6      	ldr	r3, [pc, #664]	; (8003ea8 <_dtoa_r+0x320>)
 8003c10:	9306      	str	r3, [sp, #24]
 8003c12:	3308      	adds	r3, #8
 8003c14:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8003c16:	6013      	str	r3, [r2, #0]
 8003c18:	9806      	ldr	r0, [sp, #24]
 8003c1a:	b015      	add	sp, #84	; 0x54
 8003c1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c20:	4ba0      	ldr	r3, [pc, #640]	; (8003ea4 <_dtoa_r+0x31c>)
 8003c22:	9306      	str	r3, [sp, #24]
 8003c24:	3303      	adds	r3, #3
 8003c26:	e7f5      	b.n	8003c14 <_dtoa_r+0x8c>
 8003c28:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	2300      	movs	r3, #0
 8003c30:	4630      	mov	r0, r6
 8003c32:	4639      	mov	r1, r7
 8003c34:	f7fc ff14 	bl	8000a60 <__aeabi_dcmpeq>
 8003c38:	4682      	mov	sl, r0
 8003c3a:	b160      	cbz	r0, 8003c56 <_dtoa_r+0xce>
 8003c3c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8003c3e:	2301      	movs	r3, #1
 8003c40:	6013      	str	r3, [r2, #0]
 8003c42:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	f000 8526 	beq.w	8004696 <_dtoa_r+0xb0e>
 8003c4a:	4b98      	ldr	r3, [pc, #608]	; (8003eac <_dtoa_r+0x324>)
 8003c4c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8003c4e:	6013      	str	r3, [r2, #0]
 8003c50:	3b01      	subs	r3, #1
 8003c52:	9306      	str	r3, [sp, #24]
 8003c54:	e7e0      	b.n	8003c18 <_dtoa_r+0x90>
 8003c56:	ab12      	add	r3, sp, #72	; 0x48
 8003c58:	9301      	str	r3, [sp, #4]
 8003c5a:	ab13      	add	r3, sp, #76	; 0x4c
 8003c5c:	9300      	str	r3, [sp, #0]
 8003c5e:	4632      	mov	r2, r6
 8003c60:	463b      	mov	r3, r7
 8003c62:	4620      	mov	r0, r4
 8003c64:	f000 ffe7 	bl	8004c36 <__d2b>
 8003c68:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8003c6c:	4683      	mov	fp, r0
 8003c6e:	2d00      	cmp	r5, #0
 8003c70:	d07c      	beq.n	8003d6c <_dtoa_r+0x1e4>
 8003c72:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8003c76:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 8003c7a:	46b0      	mov	r8, r6
 8003c7c:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 8003c80:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8003c84:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8003c88:	2200      	movs	r2, #0
 8003c8a:	4b89      	ldr	r3, [pc, #548]	; (8003eb0 <_dtoa_r+0x328>)
 8003c8c:	4640      	mov	r0, r8
 8003c8e:	4649      	mov	r1, r9
 8003c90:	f7fc fac6 	bl	8000220 <__aeabi_dsub>
 8003c94:	a37c      	add	r3, pc, #496	; (adr r3, 8003e88 <_dtoa_r+0x300>)
 8003c96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c9a:	f7fc fc79 	bl	8000590 <__aeabi_dmul>
 8003c9e:	a37c      	add	r3, pc, #496	; (adr r3, 8003e90 <_dtoa_r+0x308>)
 8003ca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ca4:	f7fc fabe 	bl	8000224 <__adddf3>
 8003ca8:	4606      	mov	r6, r0
 8003caa:	4628      	mov	r0, r5
 8003cac:	460f      	mov	r7, r1
 8003cae:	f7fc fc05 	bl	80004bc <__aeabi_i2d>
 8003cb2:	a379      	add	r3, pc, #484	; (adr r3, 8003e98 <_dtoa_r+0x310>)
 8003cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cb8:	f7fc fc6a 	bl	8000590 <__aeabi_dmul>
 8003cbc:	4602      	mov	r2, r0
 8003cbe:	460b      	mov	r3, r1
 8003cc0:	4630      	mov	r0, r6
 8003cc2:	4639      	mov	r1, r7
 8003cc4:	f7fc faae 	bl	8000224 <__adddf3>
 8003cc8:	4606      	mov	r6, r0
 8003cca:	460f      	mov	r7, r1
 8003ccc:	f7fc ff10 	bl	8000af0 <__aeabi_d2iz>
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	4682      	mov	sl, r0
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	4630      	mov	r0, r6
 8003cd8:	4639      	mov	r1, r7
 8003cda:	f7fc fecb 	bl	8000a74 <__aeabi_dcmplt>
 8003cde:	b148      	cbz	r0, 8003cf4 <_dtoa_r+0x16c>
 8003ce0:	4650      	mov	r0, sl
 8003ce2:	f7fc fbeb 	bl	80004bc <__aeabi_i2d>
 8003ce6:	4632      	mov	r2, r6
 8003ce8:	463b      	mov	r3, r7
 8003cea:	f7fc feb9 	bl	8000a60 <__aeabi_dcmpeq>
 8003cee:	b908      	cbnz	r0, 8003cf4 <_dtoa_r+0x16c>
 8003cf0:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003cf4:	f1ba 0f16 	cmp.w	sl, #22
 8003cf8:	d859      	bhi.n	8003dae <_dtoa_r+0x226>
 8003cfa:	496e      	ldr	r1, [pc, #440]	; (8003eb4 <_dtoa_r+0x32c>)
 8003cfc:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8003d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003d04:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003d08:	f7fc fed2 	bl	8000ab0 <__aeabi_dcmpgt>
 8003d0c:	2800      	cmp	r0, #0
 8003d0e:	d050      	beq.n	8003db2 <_dtoa_r+0x22a>
 8003d10:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003d14:	2300      	movs	r3, #0
 8003d16:	930d      	str	r3, [sp, #52]	; 0x34
 8003d18:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003d1a:	1b5d      	subs	r5, r3, r5
 8003d1c:	1e6b      	subs	r3, r5, #1
 8003d1e:	9307      	str	r3, [sp, #28]
 8003d20:	bf43      	ittte	mi
 8003d22:	2300      	movmi	r3, #0
 8003d24:	f1c5 0901 	rsbmi	r9, r5, #1
 8003d28:	9307      	strmi	r3, [sp, #28]
 8003d2a:	f04f 0900 	movpl.w	r9, #0
 8003d2e:	f1ba 0f00 	cmp.w	sl, #0
 8003d32:	db40      	blt.n	8003db6 <_dtoa_r+0x22e>
 8003d34:	9b07      	ldr	r3, [sp, #28]
 8003d36:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8003d3a:	4453      	add	r3, sl
 8003d3c:	9307      	str	r3, [sp, #28]
 8003d3e:	2300      	movs	r3, #0
 8003d40:	9308      	str	r3, [sp, #32]
 8003d42:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8003d44:	2b09      	cmp	r3, #9
 8003d46:	f200 808e 	bhi.w	8003e66 <_dtoa_r+0x2de>
 8003d4a:	2b05      	cmp	r3, #5
 8003d4c:	bfc4      	itt	gt
 8003d4e:	3b04      	subgt	r3, #4
 8003d50:	931e      	strgt	r3, [sp, #120]	; 0x78
 8003d52:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8003d54:	f1a3 0302 	sub.w	r3, r3, #2
 8003d58:	bfcc      	ite	gt
 8003d5a:	2500      	movgt	r5, #0
 8003d5c:	2501      	movle	r5, #1
 8003d5e:	2b03      	cmp	r3, #3
 8003d60:	f200 808d 	bhi.w	8003e7e <_dtoa_r+0x2f6>
 8003d64:	e8df f003 	tbb	[pc, r3]
 8003d68:	6f2f7d7b 	.word	0x6f2f7d7b
 8003d6c:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8003d70:	441d      	add	r5, r3
 8003d72:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8003d76:	2820      	cmp	r0, #32
 8003d78:	dd13      	ble.n	8003da2 <_dtoa_r+0x21a>
 8003d7a:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8003d7e:	9b02      	ldr	r3, [sp, #8]
 8003d80:	fa08 f800 	lsl.w	r8, r8, r0
 8003d84:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8003d88:	fa23 f000 	lsr.w	r0, r3, r0
 8003d8c:	ea48 0000 	orr.w	r0, r8, r0
 8003d90:	f7fc fb84 	bl	800049c <__aeabi_ui2d>
 8003d94:	2301      	movs	r3, #1
 8003d96:	4680      	mov	r8, r0
 8003d98:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 8003d9c:	3d01      	subs	r5, #1
 8003d9e:	9310      	str	r3, [sp, #64]	; 0x40
 8003da0:	e772      	b.n	8003c88 <_dtoa_r+0x100>
 8003da2:	9b02      	ldr	r3, [sp, #8]
 8003da4:	f1c0 0020 	rsb	r0, r0, #32
 8003da8:	fa03 f000 	lsl.w	r0, r3, r0
 8003dac:	e7f0      	b.n	8003d90 <_dtoa_r+0x208>
 8003dae:	2301      	movs	r3, #1
 8003db0:	e7b1      	b.n	8003d16 <_dtoa_r+0x18e>
 8003db2:	900d      	str	r0, [sp, #52]	; 0x34
 8003db4:	e7b0      	b.n	8003d18 <_dtoa_r+0x190>
 8003db6:	f1ca 0300 	rsb	r3, sl, #0
 8003dba:	9308      	str	r3, [sp, #32]
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	eba9 090a 	sub.w	r9, r9, sl
 8003dc2:	930c      	str	r3, [sp, #48]	; 0x30
 8003dc4:	e7bd      	b.n	8003d42 <_dtoa_r+0x1ba>
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	9309      	str	r3, [sp, #36]	; 0x24
 8003dca:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	dd75      	ble.n	8003ebc <_dtoa_r+0x334>
 8003dd0:	9304      	str	r3, [sp, #16]
 8003dd2:	4698      	mov	r8, r3
 8003dd4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	6072      	str	r2, [r6, #4]
 8003dda:	2204      	movs	r2, #4
 8003ddc:	f102 0014 	add.w	r0, r2, #20
 8003de0:	4298      	cmp	r0, r3
 8003de2:	6871      	ldr	r1, [r6, #4]
 8003de4:	d96f      	bls.n	8003ec6 <_dtoa_r+0x33e>
 8003de6:	4620      	mov	r0, r4
 8003de8:	f000 fc98 	bl	800471c <_Balloc>
 8003dec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003dee:	6030      	str	r0, [r6, #0]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	9306      	str	r3, [sp, #24]
 8003df4:	f1b8 0f0e 	cmp.w	r8, #14
 8003df8:	f200 80ee 	bhi.w	8003fd8 <_dtoa_r+0x450>
 8003dfc:	2d00      	cmp	r5, #0
 8003dfe:	f000 80eb 	beq.w	8003fd8 <_dtoa_r+0x450>
 8003e02:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003e06:	f1ba 0f00 	cmp.w	sl, #0
 8003e0a:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8003e0e:	dd78      	ble.n	8003f02 <_dtoa_r+0x37a>
 8003e10:	4a28      	ldr	r2, [pc, #160]	; (8003eb4 <_dtoa_r+0x32c>)
 8003e12:	f00a 030f 	and.w	r3, sl, #15
 8003e16:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8003e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e1e:	ea4f 162a 	mov.w	r6, sl, asr #4
 8003e22:	06f0      	lsls	r0, r6, #27
 8003e24:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8003e28:	d569      	bpl.n	8003efe <_dtoa_r+0x376>
 8003e2a:	4b23      	ldr	r3, [pc, #140]	; (8003eb8 <_dtoa_r+0x330>)
 8003e2c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8003e30:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003e34:	f7fc fcd6 	bl	80007e4 <__aeabi_ddiv>
 8003e38:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003e3c:	f006 060f 	and.w	r6, r6, #15
 8003e40:	2503      	movs	r5, #3
 8003e42:	4f1d      	ldr	r7, [pc, #116]	; (8003eb8 <_dtoa_r+0x330>)
 8003e44:	e050      	b.n	8003ee8 <_dtoa_r+0x360>
 8003e46:	2301      	movs	r3, #1
 8003e48:	9309      	str	r3, [sp, #36]	; 0x24
 8003e4a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8003e4c:	4453      	add	r3, sl
 8003e4e:	f103 0801 	add.w	r8, r3, #1
 8003e52:	9304      	str	r3, [sp, #16]
 8003e54:	4643      	mov	r3, r8
 8003e56:	2b01      	cmp	r3, #1
 8003e58:	bfb8      	it	lt
 8003e5a:	2301      	movlt	r3, #1
 8003e5c:	e7ba      	b.n	8003dd4 <_dtoa_r+0x24c>
 8003e5e:	2300      	movs	r3, #0
 8003e60:	e7b2      	b.n	8003dc8 <_dtoa_r+0x240>
 8003e62:	2300      	movs	r3, #0
 8003e64:	e7f0      	b.n	8003e48 <_dtoa_r+0x2c0>
 8003e66:	2501      	movs	r5, #1
 8003e68:	2300      	movs	r3, #0
 8003e6a:	931e      	str	r3, [sp, #120]	; 0x78
 8003e6c:	9509      	str	r5, [sp, #36]	; 0x24
 8003e6e:	f04f 33ff 	mov.w	r3, #4294967295
 8003e72:	9304      	str	r3, [sp, #16]
 8003e74:	4698      	mov	r8, r3
 8003e76:	2200      	movs	r2, #0
 8003e78:	2312      	movs	r3, #18
 8003e7a:	921f      	str	r2, [sp, #124]	; 0x7c
 8003e7c:	e7aa      	b.n	8003dd4 <_dtoa_r+0x24c>
 8003e7e:	2301      	movs	r3, #1
 8003e80:	9309      	str	r3, [sp, #36]	; 0x24
 8003e82:	e7f4      	b.n	8003e6e <_dtoa_r+0x2e6>
 8003e84:	f3af 8000 	nop.w
 8003e88:	636f4361 	.word	0x636f4361
 8003e8c:	3fd287a7 	.word	0x3fd287a7
 8003e90:	8b60c8b3 	.word	0x8b60c8b3
 8003e94:	3fc68a28 	.word	0x3fc68a28
 8003e98:	509f79fb 	.word	0x509f79fb
 8003e9c:	3fd34413 	.word	0x3fd34413
 8003ea0:	7ff00000 	.word	0x7ff00000
 8003ea4:	08004d63 	.word	0x08004d63
 8003ea8:	08004d5a 	.word	0x08004d5a
 8003eac:	08004d59 	.word	0x08004d59
 8003eb0:	3ff80000 	.word	0x3ff80000
 8003eb4:	08004d90 	.word	0x08004d90
 8003eb8:	08004d68 	.word	0x08004d68
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	9304      	str	r3, [sp, #16]
 8003ec0:	4698      	mov	r8, r3
 8003ec2:	461a      	mov	r2, r3
 8003ec4:	e7d9      	b.n	8003e7a <_dtoa_r+0x2f2>
 8003ec6:	3101      	adds	r1, #1
 8003ec8:	6071      	str	r1, [r6, #4]
 8003eca:	0052      	lsls	r2, r2, #1
 8003ecc:	e786      	b.n	8003ddc <_dtoa_r+0x254>
 8003ece:	07f1      	lsls	r1, r6, #31
 8003ed0:	d508      	bpl.n	8003ee4 <_dtoa_r+0x35c>
 8003ed2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8003ed6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003eda:	f7fc fb59 	bl	8000590 <__aeabi_dmul>
 8003ede:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8003ee2:	3501      	adds	r5, #1
 8003ee4:	1076      	asrs	r6, r6, #1
 8003ee6:	3708      	adds	r7, #8
 8003ee8:	2e00      	cmp	r6, #0
 8003eea:	d1f0      	bne.n	8003ece <_dtoa_r+0x346>
 8003eec:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8003ef0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003ef4:	f7fc fc76 	bl	80007e4 <__aeabi_ddiv>
 8003ef8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003efc:	e01b      	b.n	8003f36 <_dtoa_r+0x3ae>
 8003efe:	2502      	movs	r5, #2
 8003f00:	e79f      	b.n	8003e42 <_dtoa_r+0x2ba>
 8003f02:	f000 80a4 	beq.w	800404e <_dtoa_r+0x4c6>
 8003f06:	f1ca 0600 	rsb	r6, sl, #0
 8003f0a:	4ba2      	ldr	r3, [pc, #648]	; (8004194 <_dtoa_r+0x60c>)
 8003f0c:	4fa2      	ldr	r7, [pc, #648]	; (8004198 <_dtoa_r+0x610>)
 8003f0e:	f006 020f 	and.w	r2, r6, #15
 8003f12:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003f16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f1a:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8003f1e:	f7fc fb37 	bl	8000590 <__aeabi_dmul>
 8003f22:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003f26:	1136      	asrs	r6, r6, #4
 8003f28:	2300      	movs	r3, #0
 8003f2a:	2502      	movs	r5, #2
 8003f2c:	2e00      	cmp	r6, #0
 8003f2e:	f040 8083 	bne.w	8004038 <_dtoa_r+0x4b0>
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d1e0      	bne.n	8003ef8 <_dtoa_r+0x370>
 8003f36:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	f000 808a 	beq.w	8004052 <_dtoa_r+0x4ca>
 8003f3e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003f42:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8003f46:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	4b93      	ldr	r3, [pc, #588]	; (800419c <_dtoa_r+0x614>)
 8003f4e:	f7fc fd91 	bl	8000a74 <__aeabi_dcmplt>
 8003f52:	2800      	cmp	r0, #0
 8003f54:	d07d      	beq.n	8004052 <_dtoa_r+0x4ca>
 8003f56:	f1b8 0f00 	cmp.w	r8, #0
 8003f5a:	d07a      	beq.n	8004052 <_dtoa_r+0x4ca>
 8003f5c:	9b04      	ldr	r3, [sp, #16]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	dd36      	ble.n	8003fd0 <_dtoa_r+0x448>
 8003f62:	2200      	movs	r2, #0
 8003f64:	4b8e      	ldr	r3, [pc, #568]	; (80041a0 <_dtoa_r+0x618>)
 8003f66:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8003f6a:	f7fc fb11 	bl	8000590 <__aeabi_dmul>
 8003f6e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003f72:	9e04      	ldr	r6, [sp, #16]
 8003f74:	f10a 37ff 	add.w	r7, sl, #4294967295
 8003f78:	3501      	adds	r5, #1
 8003f7a:	4628      	mov	r0, r5
 8003f7c:	f7fc fa9e 	bl	80004bc <__aeabi_i2d>
 8003f80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003f84:	f7fc fb04 	bl	8000590 <__aeabi_dmul>
 8003f88:	2200      	movs	r2, #0
 8003f8a:	4b86      	ldr	r3, [pc, #536]	; (80041a4 <_dtoa_r+0x61c>)
 8003f8c:	f7fc f94a 	bl	8000224 <__adddf3>
 8003f90:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8003f94:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8003f98:	950b      	str	r5, [sp, #44]	; 0x2c
 8003f9a:	2e00      	cmp	r6, #0
 8003f9c:	d15c      	bne.n	8004058 <_dtoa_r+0x4d0>
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	4b81      	ldr	r3, [pc, #516]	; (80041a8 <_dtoa_r+0x620>)
 8003fa2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003fa6:	f7fc f93b 	bl	8000220 <__aeabi_dsub>
 8003faa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003fac:	462b      	mov	r3, r5
 8003fae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003fb2:	f7fc fd7d 	bl	8000ab0 <__aeabi_dcmpgt>
 8003fb6:	2800      	cmp	r0, #0
 8003fb8:	f040 8284 	bne.w	80044c4 <_dtoa_r+0x93c>
 8003fbc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003fbe:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8003fc2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003fc6:	f7fc fd55 	bl	8000a74 <__aeabi_dcmplt>
 8003fca:	2800      	cmp	r0, #0
 8003fcc:	f040 8278 	bne.w	80044c0 <_dtoa_r+0x938>
 8003fd0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8003fd4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003fd8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	f2c0 814e 	blt.w	800427c <_dtoa_r+0x6f4>
 8003fe0:	f1ba 0f0e 	cmp.w	sl, #14
 8003fe4:	f300 814a 	bgt.w	800427c <_dtoa_r+0x6f4>
 8003fe8:	4b6a      	ldr	r3, [pc, #424]	; (8004194 <_dtoa_r+0x60c>)
 8003fea:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8003fee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ff2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003ff6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	f280 80d9 	bge.w	80041b0 <_dtoa_r+0x628>
 8003ffe:	f1b8 0f00 	cmp.w	r8, #0
 8004002:	f300 80d5 	bgt.w	80041b0 <_dtoa_r+0x628>
 8004006:	f040 825a 	bne.w	80044be <_dtoa_r+0x936>
 800400a:	2200      	movs	r2, #0
 800400c:	4b66      	ldr	r3, [pc, #408]	; (80041a8 <_dtoa_r+0x620>)
 800400e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004012:	f7fc fabd 	bl	8000590 <__aeabi_dmul>
 8004016:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800401a:	f7fc fd3f 	bl	8000a9c <__aeabi_dcmpge>
 800401e:	4646      	mov	r6, r8
 8004020:	4647      	mov	r7, r8
 8004022:	2800      	cmp	r0, #0
 8004024:	f040 8230 	bne.w	8004488 <_dtoa_r+0x900>
 8004028:	9b06      	ldr	r3, [sp, #24]
 800402a:	9a06      	ldr	r2, [sp, #24]
 800402c:	1c5d      	adds	r5, r3, #1
 800402e:	2331      	movs	r3, #49	; 0x31
 8004030:	7013      	strb	r3, [r2, #0]
 8004032:	f10a 0a01 	add.w	sl, sl, #1
 8004036:	e22b      	b.n	8004490 <_dtoa_r+0x908>
 8004038:	07f2      	lsls	r2, r6, #31
 800403a:	d505      	bpl.n	8004048 <_dtoa_r+0x4c0>
 800403c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004040:	f7fc faa6 	bl	8000590 <__aeabi_dmul>
 8004044:	3501      	adds	r5, #1
 8004046:	2301      	movs	r3, #1
 8004048:	1076      	asrs	r6, r6, #1
 800404a:	3708      	adds	r7, #8
 800404c:	e76e      	b.n	8003f2c <_dtoa_r+0x3a4>
 800404e:	2502      	movs	r5, #2
 8004050:	e771      	b.n	8003f36 <_dtoa_r+0x3ae>
 8004052:	4657      	mov	r7, sl
 8004054:	4646      	mov	r6, r8
 8004056:	e790      	b.n	8003f7a <_dtoa_r+0x3f2>
 8004058:	4b4e      	ldr	r3, [pc, #312]	; (8004194 <_dtoa_r+0x60c>)
 800405a:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800405e:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8004062:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004064:	2b00      	cmp	r3, #0
 8004066:	d048      	beq.n	80040fa <_dtoa_r+0x572>
 8004068:	4602      	mov	r2, r0
 800406a:	460b      	mov	r3, r1
 800406c:	2000      	movs	r0, #0
 800406e:	494f      	ldr	r1, [pc, #316]	; (80041ac <_dtoa_r+0x624>)
 8004070:	f7fc fbb8 	bl	80007e4 <__aeabi_ddiv>
 8004074:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004078:	f7fc f8d2 	bl	8000220 <__aeabi_dsub>
 800407c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004080:	9d06      	ldr	r5, [sp, #24]
 8004082:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004086:	f7fc fd33 	bl	8000af0 <__aeabi_d2iz>
 800408a:	9011      	str	r0, [sp, #68]	; 0x44
 800408c:	f7fc fa16 	bl	80004bc <__aeabi_i2d>
 8004090:	4602      	mov	r2, r0
 8004092:	460b      	mov	r3, r1
 8004094:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004098:	f7fc f8c2 	bl	8000220 <__aeabi_dsub>
 800409c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800409e:	3330      	adds	r3, #48	; 0x30
 80040a0:	f805 3b01 	strb.w	r3, [r5], #1
 80040a4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80040a8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80040ac:	f7fc fce2 	bl	8000a74 <__aeabi_dcmplt>
 80040b0:	2800      	cmp	r0, #0
 80040b2:	d164      	bne.n	800417e <_dtoa_r+0x5f6>
 80040b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80040b8:	2000      	movs	r0, #0
 80040ba:	4938      	ldr	r1, [pc, #224]	; (800419c <_dtoa_r+0x614>)
 80040bc:	f7fc f8b0 	bl	8000220 <__aeabi_dsub>
 80040c0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80040c4:	f7fc fcd6 	bl	8000a74 <__aeabi_dcmplt>
 80040c8:	2800      	cmp	r0, #0
 80040ca:	f040 80b7 	bne.w	800423c <_dtoa_r+0x6b4>
 80040ce:	9b06      	ldr	r3, [sp, #24]
 80040d0:	1aeb      	subs	r3, r5, r3
 80040d2:	429e      	cmp	r6, r3
 80040d4:	f77f af7c 	ble.w	8003fd0 <_dtoa_r+0x448>
 80040d8:	2200      	movs	r2, #0
 80040da:	4b31      	ldr	r3, [pc, #196]	; (80041a0 <_dtoa_r+0x618>)
 80040dc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80040e0:	f7fc fa56 	bl	8000590 <__aeabi_dmul>
 80040e4:	2200      	movs	r2, #0
 80040e6:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80040ea:	4b2d      	ldr	r3, [pc, #180]	; (80041a0 <_dtoa_r+0x618>)
 80040ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80040f0:	f7fc fa4e 	bl	8000590 <__aeabi_dmul>
 80040f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80040f8:	e7c3      	b.n	8004082 <_dtoa_r+0x4fa>
 80040fa:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80040fe:	f7fc fa47 	bl	8000590 <__aeabi_dmul>
 8004102:	9b06      	ldr	r3, [sp, #24]
 8004104:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004108:	199d      	adds	r5, r3, r6
 800410a:	461e      	mov	r6, r3
 800410c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004110:	f7fc fcee 	bl	8000af0 <__aeabi_d2iz>
 8004114:	9011      	str	r0, [sp, #68]	; 0x44
 8004116:	f7fc f9d1 	bl	80004bc <__aeabi_i2d>
 800411a:	4602      	mov	r2, r0
 800411c:	460b      	mov	r3, r1
 800411e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004122:	f7fc f87d 	bl	8000220 <__aeabi_dsub>
 8004126:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004128:	3330      	adds	r3, #48	; 0x30
 800412a:	f806 3b01 	strb.w	r3, [r6], #1
 800412e:	42ae      	cmp	r6, r5
 8004130:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004134:	f04f 0200 	mov.w	r2, #0
 8004138:	d125      	bne.n	8004186 <_dtoa_r+0x5fe>
 800413a:	4b1c      	ldr	r3, [pc, #112]	; (80041ac <_dtoa_r+0x624>)
 800413c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004140:	f7fc f870 	bl	8000224 <__adddf3>
 8004144:	4602      	mov	r2, r0
 8004146:	460b      	mov	r3, r1
 8004148:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800414c:	f7fc fcb0 	bl	8000ab0 <__aeabi_dcmpgt>
 8004150:	2800      	cmp	r0, #0
 8004152:	d173      	bne.n	800423c <_dtoa_r+0x6b4>
 8004154:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004158:	2000      	movs	r0, #0
 800415a:	4914      	ldr	r1, [pc, #80]	; (80041ac <_dtoa_r+0x624>)
 800415c:	f7fc f860 	bl	8000220 <__aeabi_dsub>
 8004160:	4602      	mov	r2, r0
 8004162:	460b      	mov	r3, r1
 8004164:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004168:	f7fc fc84 	bl	8000a74 <__aeabi_dcmplt>
 800416c:	2800      	cmp	r0, #0
 800416e:	f43f af2f 	beq.w	8003fd0 <_dtoa_r+0x448>
 8004172:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004176:	2b30      	cmp	r3, #48	; 0x30
 8004178:	f105 32ff 	add.w	r2, r5, #4294967295
 800417c:	d001      	beq.n	8004182 <_dtoa_r+0x5fa>
 800417e:	46ba      	mov	sl, r7
 8004180:	e04b      	b.n	800421a <_dtoa_r+0x692>
 8004182:	4615      	mov	r5, r2
 8004184:	e7f5      	b.n	8004172 <_dtoa_r+0x5ea>
 8004186:	4b06      	ldr	r3, [pc, #24]	; (80041a0 <_dtoa_r+0x618>)
 8004188:	f7fc fa02 	bl	8000590 <__aeabi_dmul>
 800418c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004190:	e7bc      	b.n	800410c <_dtoa_r+0x584>
 8004192:	bf00      	nop
 8004194:	08004d90 	.word	0x08004d90
 8004198:	08004d68 	.word	0x08004d68
 800419c:	3ff00000 	.word	0x3ff00000
 80041a0:	40240000 	.word	0x40240000
 80041a4:	401c0000 	.word	0x401c0000
 80041a8:	40140000 	.word	0x40140000
 80041ac:	3fe00000 	.word	0x3fe00000
 80041b0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80041b4:	9d06      	ldr	r5, [sp, #24]
 80041b6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80041ba:	4630      	mov	r0, r6
 80041bc:	4639      	mov	r1, r7
 80041be:	f7fc fb11 	bl	80007e4 <__aeabi_ddiv>
 80041c2:	f7fc fc95 	bl	8000af0 <__aeabi_d2iz>
 80041c6:	4681      	mov	r9, r0
 80041c8:	f7fc f978 	bl	80004bc <__aeabi_i2d>
 80041cc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80041d0:	f7fc f9de 	bl	8000590 <__aeabi_dmul>
 80041d4:	4602      	mov	r2, r0
 80041d6:	460b      	mov	r3, r1
 80041d8:	4630      	mov	r0, r6
 80041da:	4639      	mov	r1, r7
 80041dc:	f109 0630 	add.w	r6, r9, #48	; 0x30
 80041e0:	f7fc f81e 	bl	8000220 <__aeabi_dsub>
 80041e4:	f805 6b01 	strb.w	r6, [r5], #1
 80041e8:	9e06      	ldr	r6, [sp, #24]
 80041ea:	1bae      	subs	r6, r5, r6
 80041ec:	45b0      	cmp	r8, r6
 80041ee:	4602      	mov	r2, r0
 80041f0:	460b      	mov	r3, r1
 80041f2:	d136      	bne.n	8004262 <_dtoa_r+0x6da>
 80041f4:	f7fc f816 	bl	8000224 <__adddf3>
 80041f8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80041fc:	4606      	mov	r6, r0
 80041fe:	460f      	mov	r7, r1
 8004200:	f7fc fc56 	bl	8000ab0 <__aeabi_dcmpgt>
 8004204:	b9c8      	cbnz	r0, 800423a <_dtoa_r+0x6b2>
 8004206:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800420a:	4630      	mov	r0, r6
 800420c:	4639      	mov	r1, r7
 800420e:	f7fc fc27 	bl	8000a60 <__aeabi_dcmpeq>
 8004212:	b110      	cbz	r0, 800421a <_dtoa_r+0x692>
 8004214:	f019 0f01 	tst.w	r9, #1
 8004218:	d10f      	bne.n	800423a <_dtoa_r+0x6b2>
 800421a:	4659      	mov	r1, fp
 800421c:	4620      	mov	r0, r4
 800421e:	f000 fab1 	bl	8004784 <_Bfree>
 8004222:	2300      	movs	r3, #0
 8004224:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004226:	702b      	strb	r3, [r5, #0]
 8004228:	f10a 0301 	add.w	r3, sl, #1
 800422c:	6013      	str	r3, [r2, #0]
 800422e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004230:	2b00      	cmp	r3, #0
 8004232:	f43f acf1 	beq.w	8003c18 <_dtoa_r+0x90>
 8004236:	601d      	str	r5, [r3, #0]
 8004238:	e4ee      	b.n	8003c18 <_dtoa_r+0x90>
 800423a:	4657      	mov	r7, sl
 800423c:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8004240:	2a39      	cmp	r2, #57	; 0x39
 8004242:	f105 33ff 	add.w	r3, r5, #4294967295
 8004246:	d106      	bne.n	8004256 <_dtoa_r+0x6ce>
 8004248:	9a06      	ldr	r2, [sp, #24]
 800424a:	429a      	cmp	r2, r3
 800424c:	d107      	bne.n	800425e <_dtoa_r+0x6d6>
 800424e:	2330      	movs	r3, #48	; 0x30
 8004250:	7013      	strb	r3, [r2, #0]
 8004252:	3701      	adds	r7, #1
 8004254:	4613      	mov	r3, r2
 8004256:	781a      	ldrb	r2, [r3, #0]
 8004258:	3201      	adds	r2, #1
 800425a:	701a      	strb	r2, [r3, #0]
 800425c:	e78f      	b.n	800417e <_dtoa_r+0x5f6>
 800425e:	461d      	mov	r5, r3
 8004260:	e7ec      	b.n	800423c <_dtoa_r+0x6b4>
 8004262:	2200      	movs	r2, #0
 8004264:	4b99      	ldr	r3, [pc, #612]	; (80044cc <_dtoa_r+0x944>)
 8004266:	f7fc f993 	bl	8000590 <__aeabi_dmul>
 800426a:	2200      	movs	r2, #0
 800426c:	2300      	movs	r3, #0
 800426e:	4606      	mov	r6, r0
 8004270:	460f      	mov	r7, r1
 8004272:	f7fc fbf5 	bl	8000a60 <__aeabi_dcmpeq>
 8004276:	2800      	cmp	r0, #0
 8004278:	d09d      	beq.n	80041b6 <_dtoa_r+0x62e>
 800427a:	e7ce      	b.n	800421a <_dtoa_r+0x692>
 800427c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800427e:	2a00      	cmp	r2, #0
 8004280:	f000 8088 	beq.w	8004394 <_dtoa_r+0x80c>
 8004284:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8004286:	2a01      	cmp	r2, #1
 8004288:	dc6d      	bgt.n	8004366 <_dtoa_r+0x7de>
 800428a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800428c:	2a00      	cmp	r2, #0
 800428e:	d066      	beq.n	800435e <_dtoa_r+0x7d6>
 8004290:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8004294:	9e08      	ldr	r6, [sp, #32]
 8004296:	464d      	mov	r5, r9
 8004298:	9a07      	ldr	r2, [sp, #28]
 800429a:	2101      	movs	r1, #1
 800429c:	441a      	add	r2, r3
 800429e:	4620      	mov	r0, r4
 80042a0:	4499      	add	r9, r3
 80042a2:	9207      	str	r2, [sp, #28]
 80042a4:	f000 fb0e 	bl	80048c4 <__i2b>
 80042a8:	4607      	mov	r7, r0
 80042aa:	2d00      	cmp	r5, #0
 80042ac:	dd0b      	ble.n	80042c6 <_dtoa_r+0x73e>
 80042ae:	9b07      	ldr	r3, [sp, #28]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	dd08      	ble.n	80042c6 <_dtoa_r+0x73e>
 80042b4:	42ab      	cmp	r3, r5
 80042b6:	9a07      	ldr	r2, [sp, #28]
 80042b8:	bfa8      	it	ge
 80042ba:	462b      	movge	r3, r5
 80042bc:	eba9 0903 	sub.w	r9, r9, r3
 80042c0:	1aed      	subs	r5, r5, r3
 80042c2:	1ad3      	subs	r3, r2, r3
 80042c4:	9307      	str	r3, [sp, #28]
 80042c6:	9b08      	ldr	r3, [sp, #32]
 80042c8:	b1eb      	cbz	r3, 8004306 <_dtoa_r+0x77e>
 80042ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d065      	beq.n	800439c <_dtoa_r+0x814>
 80042d0:	b18e      	cbz	r6, 80042f6 <_dtoa_r+0x76e>
 80042d2:	4639      	mov	r1, r7
 80042d4:	4632      	mov	r2, r6
 80042d6:	4620      	mov	r0, r4
 80042d8:	f000 fb94 	bl	8004a04 <__pow5mult>
 80042dc:	465a      	mov	r2, fp
 80042de:	4601      	mov	r1, r0
 80042e0:	4607      	mov	r7, r0
 80042e2:	4620      	mov	r0, r4
 80042e4:	f000 faf7 	bl	80048d6 <__multiply>
 80042e8:	4659      	mov	r1, fp
 80042ea:	900a      	str	r0, [sp, #40]	; 0x28
 80042ec:	4620      	mov	r0, r4
 80042ee:	f000 fa49 	bl	8004784 <_Bfree>
 80042f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80042f4:	469b      	mov	fp, r3
 80042f6:	9b08      	ldr	r3, [sp, #32]
 80042f8:	1b9a      	subs	r2, r3, r6
 80042fa:	d004      	beq.n	8004306 <_dtoa_r+0x77e>
 80042fc:	4659      	mov	r1, fp
 80042fe:	4620      	mov	r0, r4
 8004300:	f000 fb80 	bl	8004a04 <__pow5mult>
 8004304:	4683      	mov	fp, r0
 8004306:	2101      	movs	r1, #1
 8004308:	4620      	mov	r0, r4
 800430a:	f000 fadb 	bl	80048c4 <__i2b>
 800430e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004310:	4606      	mov	r6, r0
 8004312:	2b00      	cmp	r3, #0
 8004314:	f000 81c9 	beq.w	80046aa <_dtoa_r+0xb22>
 8004318:	461a      	mov	r2, r3
 800431a:	4601      	mov	r1, r0
 800431c:	4620      	mov	r0, r4
 800431e:	f000 fb71 	bl	8004a04 <__pow5mult>
 8004322:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004324:	2b01      	cmp	r3, #1
 8004326:	4606      	mov	r6, r0
 8004328:	dc3e      	bgt.n	80043a8 <_dtoa_r+0x820>
 800432a:	9b02      	ldr	r3, [sp, #8]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d137      	bne.n	80043a0 <_dtoa_r+0x818>
 8004330:	9b03      	ldr	r3, [sp, #12]
 8004332:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004336:	2b00      	cmp	r3, #0
 8004338:	d134      	bne.n	80043a4 <_dtoa_r+0x81c>
 800433a:	9b03      	ldr	r3, [sp, #12]
 800433c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004340:	0d1b      	lsrs	r3, r3, #20
 8004342:	051b      	lsls	r3, r3, #20
 8004344:	b12b      	cbz	r3, 8004352 <_dtoa_r+0x7ca>
 8004346:	9b07      	ldr	r3, [sp, #28]
 8004348:	3301      	adds	r3, #1
 800434a:	9307      	str	r3, [sp, #28]
 800434c:	f109 0901 	add.w	r9, r9, #1
 8004350:	2301      	movs	r3, #1
 8004352:	9308      	str	r3, [sp, #32]
 8004354:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004356:	2b00      	cmp	r3, #0
 8004358:	d128      	bne.n	80043ac <_dtoa_r+0x824>
 800435a:	2001      	movs	r0, #1
 800435c:	e02e      	b.n	80043bc <_dtoa_r+0x834>
 800435e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004360:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8004364:	e796      	b.n	8004294 <_dtoa_r+0x70c>
 8004366:	9b08      	ldr	r3, [sp, #32]
 8004368:	f108 36ff 	add.w	r6, r8, #4294967295
 800436c:	42b3      	cmp	r3, r6
 800436e:	bfbf      	itttt	lt
 8004370:	9b08      	ldrlt	r3, [sp, #32]
 8004372:	9608      	strlt	r6, [sp, #32]
 8004374:	1af2      	sublt	r2, r6, r3
 8004376:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 8004378:	bfb7      	itett	lt
 800437a:	189b      	addlt	r3, r3, r2
 800437c:	1b9e      	subge	r6, r3, r6
 800437e:	930c      	strlt	r3, [sp, #48]	; 0x30
 8004380:	2600      	movlt	r6, #0
 8004382:	f1b8 0f00 	cmp.w	r8, #0
 8004386:	bfb9      	ittee	lt
 8004388:	eba9 0508 	sublt.w	r5, r9, r8
 800438c:	2300      	movlt	r3, #0
 800438e:	464d      	movge	r5, r9
 8004390:	4643      	movge	r3, r8
 8004392:	e781      	b.n	8004298 <_dtoa_r+0x710>
 8004394:	9e08      	ldr	r6, [sp, #32]
 8004396:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8004398:	464d      	mov	r5, r9
 800439a:	e786      	b.n	80042aa <_dtoa_r+0x722>
 800439c:	9a08      	ldr	r2, [sp, #32]
 800439e:	e7ad      	b.n	80042fc <_dtoa_r+0x774>
 80043a0:	2300      	movs	r3, #0
 80043a2:	e7d6      	b.n	8004352 <_dtoa_r+0x7ca>
 80043a4:	9b02      	ldr	r3, [sp, #8]
 80043a6:	e7d4      	b.n	8004352 <_dtoa_r+0x7ca>
 80043a8:	2300      	movs	r3, #0
 80043aa:	9308      	str	r3, [sp, #32]
 80043ac:	6933      	ldr	r3, [r6, #16]
 80043ae:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80043b2:	6918      	ldr	r0, [r3, #16]
 80043b4:	f000 fa38 	bl	8004828 <__hi0bits>
 80043b8:	f1c0 0020 	rsb	r0, r0, #32
 80043bc:	9b07      	ldr	r3, [sp, #28]
 80043be:	4418      	add	r0, r3
 80043c0:	f010 001f 	ands.w	r0, r0, #31
 80043c4:	d047      	beq.n	8004456 <_dtoa_r+0x8ce>
 80043c6:	f1c0 0320 	rsb	r3, r0, #32
 80043ca:	2b04      	cmp	r3, #4
 80043cc:	dd3b      	ble.n	8004446 <_dtoa_r+0x8be>
 80043ce:	9b07      	ldr	r3, [sp, #28]
 80043d0:	f1c0 001c 	rsb	r0, r0, #28
 80043d4:	4481      	add	r9, r0
 80043d6:	4405      	add	r5, r0
 80043d8:	4403      	add	r3, r0
 80043da:	9307      	str	r3, [sp, #28]
 80043dc:	f1b9 0f00 	cmp.w	r9, #0
 80043e0:	dd05      	ble.n	80043ee <_dtoa_r+0x866>
 80043e2:	4659      	mov	r1, fp
 80043e4:	464a      	mov	r2, r9
 80043e6:	4620      	mov	r0, r4
 80043e8:	f000 fb5a 	bl	8004aa0 <__lshift>
 80043ec:	4683      	mov	fp, r0
 80043ee:	9b07      	ldr	r3, [sp, #28]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	dd05      	ble.n	8004400 <_dtoa_r+0x878>
 80043f4:	4631      	mov	r1, r6
 80043f6:	461a      	mov	r2, r3
 80043f8:	4620      	mov	r0, r4
 80043fa:	f000 fb51 	bl	8004aa0 <__lshift>
 80043fe:	4606      	mov	r6, r0
 8004400:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004402:	b353      	cbz	r3, 800445a <_dtoa_r+0x8d2>
 8004404:	4631      	mov	r1, r6
 8004406:	4658      	mov	r0, fp
 8004408:	f000 fb9e 	bl	8004b48 <__mcmp>
 800440c:	2800      	cmp	r0, #0
 800440e:	da24      	bge.n	800445a <_dtoa_r+0x8d2>
 8004410:	2300      	movs	r3, #0
 8004412:	4659      	mov	r1, fp
 8004414:	220a      	movs	r2, #10
 8004416:	4620      	mov	r0, r4
 8004418:	f000 f9cb 	bl	80047b2 <__multadd>
 800441c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800441e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004422:	4683      	mov	fp, r0
 8004424:	2b00      	cmp	r3, #0
 8004426:	f000 8147 	beq.w	80046b8 <_dtoa_r+0xb30>
 800442a:	2300      	movs	r3, #0
 800442c:	4639      	mov	r1, r7
 800442e:	220a      	movs	r2, #10
 8004430:	4620      	mov	r0, r4
 8004432:	f000 f9be 	bl	80047b2 <__multadd>
 8004436:	9b04      	ldr	r3, [sp, #16]
 8004438:	2b00      	cmp	r3, #0
 800443a:	4607      	mov	r7, r0
 800443c:	dc4e      	bgt.n	80044dc <_dtoa_r+0x954>
 800443e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004440:	2b02      	cmp	r3, #2
 8004442:	dd4b      	ble.n	80044dc <_dtoa_r+0x954>
 8004444:	e011      	b.n	800446a <_dtoa_r+0x8e2>
 8004446:	d0c9      	beq.n	80043dc <_dtoa_r+0x854>
 8004448:	9a07      	ldr	r2, [sp, #28]
 800444a:	331c      	adds	r3, #28
 800444c:	441a      	add	r2, r3
 800444e:	4499      	add	r9, r3
 8004450:	441d      	add	r5, r3
 8004452:	4613      	mov	r3, r2
 8004454:	e7c1      	b.n	80043da <_dtoa_r+0x852>
 8004456:	4603      	mov	r3, r0
 8004458:	e7f6      	b.n	8004448 <_dtoa_r+0x8c0>
 800445a:	f1b8 0f00 	cmp.w	r8, #0
 800445e:	dc37      	bgt.n	80044d0 <_dtoa_r+0x948>
 8004460:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004462:	2b02      	cmp	r3, #2
 8004464:	dd34      	ble.n	80044d0 <_dtoa_r+0x948>
 8004466:	f8cd 8010 	str.w	r8, [sp, #16]
 800446a:	9b04      	ldr	r3, [sp, #16]
 800446c:	b963      	cbnz	r3, 8004488 <_dtoa_r+0x900>
 800446e:	4631      	mov	r1, r6
 8004470:	2205      	movs	r2, #5
 8004472:	4620      	mov	r0, r4
 8004474:	f000 f99d 	bl	80047b2 <__multadd>
 8004478:	4601      	mov	r1, r0
 800447a:	4606      	mov	r6, r0
 800447c:	4658      	mov	r0, fp
 800447e:	f000 fb63 	bl	8004b48 <__mcmp>
 8004482:	2800      	cmp	r0, #0
 8004484:	f73f add0 	bgt.w	8004028 <_dtoa_r+0x4a0>
 8004488:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800448a:	9d06      	ldr	r5, [sp, #24]
 800448c:	ea6f 0a03 	mvn.w	sl, r3
 8004490:	f04f 0900 	mov.w	r9, #0
 8004494:	4631      	mov	r1, r6
 8004496:	4620      	mov	r0, r4
 8004498:	f000 f974 	bl	8004784 <_Bfree>
 800449c:	2f00      	cmp	r7, #0
 800449e:	f43f aebc 	beq.w	800421a <_dtoa_r+0x692>
 80044a2:	f1b9 0f00 	cmp.w	r9, #0
 80044a6:	d005      	beq.n	80044b4 <_dtoa_r+0x92c>
 80044a8:	45b9      	cmp	r9, r7
 80044aa:	d003      	beq.n	80044b4 <_dtoa_r+0x92c>
 80044ac:	4649      	mov	r1, r9
 80044ae:	4620      	mov	r0, r4
 80044b0:	f000 f968 	bl	8004784 <_Bfree>
 80044b4:	4639      	mov	r1, r7
 80044b6:	4620      	mov	r0, r4
 80044b8:	f000 f964 	bl	8004784 <_Bfree>
 80044bc:	e6ad      	b.n	800421a <_dtoa_r+0x692>
 80044be:	2600      	movs	r6, #0
 80044c0:	4637      	mov	r7, r6
 80044c2:	e7e1      	b.n	8004488 <_dtoa_r+0x900>
 80044c4:	46ba      	mov	sl, r7
 80044c6:	4637      	mov	r7, r6
 80044c8:	e5ae      	b.n	8004028 <_dtoa_r+0x4a0>
 80044ca:	bf00      	nop
 80044cc:	40240000 	.word	0x40240000
 80044d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80044d2:	f8cd 8010 	str.w	r8, [sp, #16]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	f000 80f5 	beq.w	80046c6 <_dtoa_r+0xb3e>
 80044dc:	2d00      	cmp	r5, #0
 80044de:	dd05      	ble.n	80044ec <_dtoa_r+0x964>
 80044e0:	4639      	mov	r1, r7
 80044e2:	462a      	mov	r2, r5
 80044e4:	4620      	mov	r0, r4
 80044e6:	f000 fadb 	bl	8004aa0 <__lshift>
 80044ea:	4607      	mov	r7, r0
 80044ec:	9b08      	ldr	r3, [sp, #32]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d04c      	beq.n	800458c <_dtoa_r+0xa04>
 80044f2:	6879      	ldr	r1, [r7, #4]
 80044f4:	4620      	mov	r0, r4
 80044f6:	f000 f911 	bl	800471c <_Balloc>
 80044fa:	693a      	ldr	r2, [r7, #16]
 80044fc:	3202      	adds	r2, #2
 80044fe:	4605      	mov	r5, r0
 8004500:	0092      	lsls	r2, r2, #2
 8004502:	f107 010c 	add.w	r1, r7, #12
 8004506:	300c      	adds	r0, #12
 8004508:	f7fe fe64 	bl	80031d4 <memcpy>
 800450c:	2201      	movs	r2, #1
 800450e:	4629      	mov	r1, r5
 8004510:	4620      	mov	r0, r4
 8004512:	f000 fac5 	bl	8004aa0 <__lshift>
 8004516:	9b06      	ldr	r3, [sp, #24]
 8004518:	9307      	str	r3, [sp, #28]
 800451a:	9b02      	ldr	r3, [sp, #8]
 800451c:	f003 0301 	and.w	r3, r3, #1
 8004520:	46b9      	mov	r9, r7
 8004522:	9308      	str	r3, [sp, #32]
 8004524:	4607      	mov	r7, r0
 8004526:	4631      	mov	r1, r6
 8004528:	4658      	mov	r0, fp
 800452a:	f7ff fa9f 	bl	8003a6c <quorem>
 800452e:	4649      	mov	r1, r9
 8004530:	4605      	mov	r5, r0
 8004532:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8004536:	4658      	mov	r0, fp
 8004538:	f000 fb06 	bl	8004b48 <__mcmp>
 800453c:	463a      	mov	r2, r7
 800453e:	9002      	str	r0, [sp, #8]
 8004540:	4631      	mov	r1, r6
 8004542:	4620      	mov	r0, r4
 8004544:	f000 fb1a 	bl	8004b7c <__mdiff>
 8004548:	68c3      	ldr	r3, [r0, #12]
 800454a:	4602      	mov	r2, r0
 800454c:	bb03      	cbnz	r3, 8004590 <_dtoa_r+0xa08>
 800454e:	4601      	mov	r1, r0
 8004550:	9009      	str	r0, [sp, #36]	; 0x24
 8004552:	4658      	mov	r0, fp
 8004554:	f000 faf8 	bl	8004b48 <__mcmp>
 8004558:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800455a:	4603      	mov	r3, r0
 800455c:	4611      	mov	r1, r2
 800455e:	4620      	mov	r0, r4
 8004560:	9309      	str	r3, [sp, #36]	; 0x24
 8004562:	f000 f90f 	bl	8004784 <_Bfree>
 8004566:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004568:	b9a3      	cbnz	r3, 8004594 <_dtoa_r+0xa0c>
 800456a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800456c:	b992      	cbnz	r2, 8004594 <_dtoa_r+0xa0c>
 800456e:	9a08      	ldr	r2, [sp, #32]
 8004570:	b982      	cbnz	r2, 8004594 <_dtoa_r+0xa0c>
 8004572:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8004576:	d029      	beq.n	80045cc <_dtoa_r+0xa44>
 8004578:	9b02      	ldr	r3, [sp, #8]
 800457a:	2b00      	cmp	r3, #0
 800457c:	dd01      	ble.n	8004582 <_dtoa_r+0x9fa>
 800457e:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8004582:	9b07      	ldr	r3, [sp, #28]
 8004584:	1c5d      	adds	r5, r3, #1
 8004586:	f883 8000 	strb.w	r8, [r3]
 800458a:	e783      	b.n	8004494 <_dtoa_r+0x90c>
 800458c:	4638      	mov	r0, r7
 800458e:	e7c2      	b.n	8004516 <_dtoa_r+0x98e>
 8004590:	2301      	movs	r3, #1
 8004592:	e7e3      	b.n	800455c <_dtoa_r+0x9d4>
 8004594:	9a02      	ldr	r2, [sp, #8]
 8004596:	2a00      	cmp	r2, #0
 8004598:	db04      	blt.n	80045a4 <_dtoa_r+0xa1c>
 800459a:	d124      	bne.n	80045e6 <_dtoa_r+0xa5e>
 800459c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800459e:	bb12      	cbnz	r2, 80045e6 <_dtoa_r+0xa5e>
 80045a0:	9a08      	ldr	r2, [sp, #32]
 80045a2:	bb02      	cbnz	r2, 80045e6 <_dtoa_r+0xa5e>
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	ddec      	ble.n	8004582 <_dtoa_r+0x9fa>
 80045a8:	4659      	mov	r1, fp
 80045aa:	2201      	movs	r2, #1
 80045ac:	4620      	mov	r0, r4
 80045ae:	f000 fa77 	bl	8004aa0 <__lshift>
 80045b2:	4631      	mov	r1, r6
 80045b4:	4683      	mov	fp, r0
 80045b6:	f000 fac7 	bl	8004b48 <__mcmp>
 80045ba:	2800      	cmp	r0, #0
 80045bc:	dc03      	bgt.n	80045c6 <_dtoa_r+0xa3e>
 80045be:	d1e0      	bne.n	8004582 <_dtoa_r+0x9fa>
 80045c0:	f018 0f01 	tst.w	r8, #1
 80045c4:	d0dd      	beq.n	8004582 <_dtoa_r+0x9fa>
 80045c6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80045ca:	d1d8      	bne.n	800457e <_dtoa_r+0x9f6>
 80045cc:	9b07      	ldr	r3, [sp, #28]
 80045ce:	9a07      	ldr	r2, [sp, #28]
 80045d0:	1c5d      	adds	r5, r3, #1
 80045d2:	2339      	movs	r3, #57	; 0x39
 80045d4:	7013      	strb	r3, [r2, #0]
 80045d6:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80045da:	2b39      	cmp	r3, #57	; 0x39
 80045dc:	f105 32ff 	add.w	r2, r5, #4294967295
 80045e0:	d04e      	beq.n	8004680 <_dtoa_r+0xaf8>
 80045e2:	3301      	adds	r3, #1
 80045e4:	e053      	b.n	800468e <_dtoa_r+0xb06>
 80045e6:	9a07      	ldr	r2, [sp, #28]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	f102 0501 	add.w	r5, r2, #1
 80045ee:	dd06      	ble.n	80045fe <_dtoa_r+0xa76>
 80045f0:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80045f4:	d0ea      	beq.n	80045cc <_dtoa_r+0xa44>
 80045f6:	f108 0801 	add.w	r8, r8, #1
 80045fa:	9b07      	ldr	r3, [sp, #28]
 80045fc:	e7c3      	b.n	8004586 <_dtoa_r+0x9fe>
 80045fe:	9b06      	ldr	r3, [sp, #24]
 8004600:	9a04      	ldr	r2, [sp, #16]
 8004602:	f805 8c01 	strb.w	r8, [r5, #-1]
 8004606:	1aeb      	subs	r3, r5, r3
 8004608:	4293      	cmp	r3, r2
 800460a:	d021      	beq.n	8004650 <_dtoa_r+0xac8>
 800460c:	4659      	mov	r1, fp
 800460e:	2300      	movs	r3, #0
 8004610:	220a      	movs	r2, #10
 8004612:	4620      	mov	r0, r4
 8004614:	f000 f8cd 	bl	80047b2 <__multadd>
 8004618:	45b9      	cmp	r9, r7
 800461a:	4683      	mov	fp, r0
 800461c:	f04f 0300 	mov.w	r3, #0
 8004620:	f04f 020a 	mov.w	r2, #10
 8004624:	4649      	mov	r1, r9
 8004626:	4620      	mov	r0, r4
 8004628:	d105      	bne.n	8004636 <_dtoa_r+0xaae>
 800462a:	f000 f8c2 	bl	80047b2 <__multadd>
 800462e:	4681      	mov	r9, r0
 8004630:	4607      	mov	r7, r0
 8004632:	9507      	str	r5, [sp, #28]
 8004634:	e777      	b.n	8004526 <_dtoa_r+0x99e>
 8004636:	f000 f8bc 	bl	80047b2 <__multadd>
 800463a:	4639      	mov	r1, r7
 800463c:	4681      	mov	r9, r0
 800463e:	2300      	movs	r3, #0
 8004640:	220a      	movs	r2, #10
 8004642:	4620      	mov	r0, r4
 8004644:	f000 f8b5 	bl	80047b2 <__multadd>
 8004648:	4607      	mov	r7, r0
 800464a:	e7f2      	b.n	8004632 <_dtoa_r+0xaaa>
 800464c:	f04f 0900 	mov.w	r9, #0
 8004650:	4659      	mov	r1, fp
 8004652:	2201      	movs	r2, #1
 8004654:	4620      	mov	r0, r4
 8004656:	f000 fa23 	bl	8004aa0 <__lshift>
 800465a:	4631      	mov	r1, r6
 800465c:	4683      	mov	fp, r0
 800465e:	f000 fa73 	bl	8004b48 <__mcmp>
 8004662:	2800      	cmp	r0, #0
 8004664:	dcb7      	bgt.n	80045d6 <_dtoa_r+0xa4e>
 8004666:	d102      	bne.n	800466e <_dtoa_r+0xae6>
 8004668:	f018 0f01 	tst.w	r8, #1
 800466c:	d1b3      	bne.n	80045d6 <_dtoa_r+0xa4e>
 800466e:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004672:	2b30      	cmp	r3, #48	; 0x30
 8004674:	f105 32ff 	add.w	r2, r5, #4294967295
 8004678:	f47f af0c 	bne.w	8004494 <_dtoa_r+0x90c>
 800467c:	4615      	mov	r5, r2
 800467e:	e7f6      	b.n	800466e <_dtoa_r+0xae6>
 8004680:	9b06      	ldr	r3, [sp, #24]
 8004682:	4293      	cmp	r3, r2
 8004684:	d105      	bne.n	8004692 <_dtoa_r+0xb0a>
 8004686:	9a06      	ldr	r2, [sp, #24]
 8004688:	f10a 0a01 	add.w	sl, sl, #1
 800468c:	2331      	movs	r3, #49	; 0x31
 800468e:	7013      	strb	r3, [r2, #0]
 8004690:	e700      	b.n	8004494 <_dtoa_r+0x90c>
 8004692:	4615      	mov	r5, r2
 8004694:	e79f      	b.n	80045d6 <_dtoa_r+0xa4e>
 8004696:	4b17      	ldr	r3, [pc, #92]	; (80046f4 <_dtoa_r+0xb6c>)
 8004698:	f7ff badb 	b.w	8003c52 <_dtoa_r+0xca>
 800469c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800469e:	2b00      	cmp	r3, #0
 80046a0:	f47f aab5 	bne.w	8003c0e <_dtoa_r+0x86>
 80046a4:	4b14      	ldr	r3, [pc, #80]	; (80046f8 <_dtoa_r+0xb70>)
 80046a6:	f7ff bad4 	b.w	8003c52 <_dtoa_r+0xca>
 80046aa:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80046ac:	2b01      	cmp	r3, #1
 80046ae:	f77f ae3c 	ble.w	800432a <_dtoa_r+0x7a2>
 80046b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80046b4:	9308      	str	r3, [sp, #32]
 80046b6:	e650      	b.n	800435a <_dtoa_r+0x7d2>
 80046b8:	9b04      	ldr	r3, [sp, #16]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	dc03      	bgt.n	80046c6 <_dtoa_r+0xb3e>
 80046be:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80046c0:	2b02      	cmp	r3, #2
 80046c2:	f73f aed2 	bgt.w	800446a <_dtoa_r+0x8e2>
 80046c6:	9d06      	ldr	r5, [sp, #24]
 80046c8:	4631      	mov	r1, r6
 80046ca:	4658      	mov	r0, fp
 80046cc:	f7ff f9ce 	bl	8003a6c <quorem>
 80046d0:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80046d4:	f805 8b01 	strb.w	r8, [r5], #1
 80046d8:	9b06      	ldr	r3, [sp, #24]
 80046da:	9a04      	ldr	r2, [sp, #16]
 80046dc:	1aeb      	subs	r3, r5, r3
 80046de:	429a      	cmp	r2, r3
 80046e0:	ddb4      	ble.n	800464c <_dtoa_r+0xac4>
 80046e2:	4659      	mov	r1, fp
 80046e4:	2300      	movs	r3, #0
 80046e6:	220a      	movs	r2, #10
 80046e8:	4620      	mov	r0, r4
 80046ea:	f000 f862 	bl	80047b2 <__multadd>
 80046ee:	4683      	mov	fp, r0
 80046f0:	e7ea      	b.n	80046c8 <_dtoa_r+0xb40>
 80046f2:	bf00      	nop
 80046f4:	08004d58 	.word	0x08004d58
 80046f8:	08004d5a 	.word	0x08004d5a

080046fc <_localeconv_r>:
 80046fc:	4b04      	ldr	r3, [pc, #16]	; (8004710 <_localeconv_r+0x14>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	6a18      	ldr	r0, [r3, #32]
 8004702:	4b04      	ldr	r3, [pc, #16]	; (8004714 <_localeconv_r+0x18>)
 8004704:	2800      	cmp	r0, #0
 8004706:	bf08      	it	eq
 8004708:	4618      	moveq	r0, r3
 800470a:	30f0      	adds	r0, #240	; 0xf0
 800470c:	4770      	bx	lr
 800470e:	bf00      	nop
 8004710:	20000000 	.word	0x20000000
 8004714:	20000064 	.word	0x20000064

08004718 <__malloc_lock>:
 8004718:	4770      	bx	lr

0800471a <__malloc_unlock>:
 800471a:	4770      	bx	lr

0800471c <_Balloc>:
 800471c:	b570      	push	{r4, r5, r6, lr}
 800471e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004720:	4604      	mov	r4, r0
 8004722:	460e      	mov	r6, r1
 8004724:	b93d      	cbnz	r5, 8004736 <_Balloc+0x1a>
 8004726:	2010      	movs	r0, #16
 8004728:	f7fe fd44 	bl	80031b4 <malloc>
 800472c:	6260      	str	r0, [r4, #36]	; 0x24
 800472e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004732:	6005      	str	r5, [r0, #0]
 8004734:	60c5      	str	r5, [r0, #12]
 8004736:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8004738:	68eb      	ldr	r3, [r5, #12]
 800473a:	b183      	cbz	r3, 800475e <_Balloc+0x42>
 800473c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800473e:	68db      	ldr	r3, [r3, #12]
 8004740:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8004744:	b9b8      	cbnz	r0, 8004776 <_Balloc+0x5a>
 8004746:	2101      	movs	r1, #1
 8004748:	fa01 f506 	lsl.w	r5, r1, r6
 800474c:	1d6a      	adds	r2, r5, #5
 800474e:	0092      	lsls	r2, r2, #2
 8004750:	4620      	mov	r0, r4
 8004752:	f000 fabf 	bl	8004cd4 <_calloc_r>
 8004756:	b160      	cbz	r0, 8004772 <_Balloc+0x56>
 8004758:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800475c:	e00e      	b.n	800477c <_Balloc+0x60>
 800475e:	2221      	movs	r2, #33	; 0x21
 8004760:	2104      	movs	r1, #4
 8004762:	4620      	mov	r0, r4
 8004764:	f000 fab6 	bl	8004cd4 <_calloc_r>
 8004768:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800476a:	60e8      	str	r0, [r5, #12]
 800476c:	68db      	ldr	r3, [r3, #12]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d1e4      	bne.n	800473c <_Balloc+0x20>
 8004772:	2000      	movs	r0, #0
 8004774:	bd70      	pop	{r4, r5, r6, pc}
 8004776:	6802      	ldr	r2, [r0, #0]
 8004778:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800477c:	2300      	movs	r3, #0
 800477e:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004782:	e7f7      	b.n	8004774 <_Balloc+0x58>

08004784 <_Bfree>:
 8004784:	b570      	push	{r4, r5, r6, lr}
 8004786:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8004788:	4606      	mov	r6, r0
 800478a:	460d      	mov	r5, r1
 800478c:	b93c      	cbnz	r4, 800479e <_Bfree+0x1a>
 800478e:	2010      	movs	r0, #16
 8004790:	f7fe fd10 	bl	80031b4 <malloc>
 8004794:	6270      	str	r0, [r6, #36]	; 0x24
 8004796:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800479a:	6004      	str	r4, [r0, #0]
 800479c:	60c4      	str	r4, [r0, #12]
 800479e:	b13d      	cbz	r5, 80047b0 <_Bfree+0x2c>
 80047a0:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80047a2:	686a      	ldr	r2, [r5, #4]
 80047a4:	68db      	ldr	r3, [r3, #12]
 80047a6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80047aa:	6029      	str	r1, [r5, #0]
 80047ac:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80047b0:	bd70      	pop	{r4, r5, r6, pc}

080047b2 <__multadd>:
 80047b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80047b6:	690d      	ldr	r5, [r1, #16]
 80047b8:	461f      	mov	r7, r3
 80047ba:	4606      	mov	r6, r0
 80047bc:	460c      	mov	r4, r1
 80047be:	f101 0c14 	add.w	ip, r1, #20
 80047c2:	2300      	movs	r3, #0
 80047c4:	f8dc 0000 	ldr.w	r0, [ip]
 80047c8:	b281      	uxth	r1, r0
 80047ca:	fb02 7101 	mla	r1, r2, r1, r7
 80047ce:	0c0f      	lsrs	r7, r1, #16
 80047d0:	0c00      	lsrs	r0, r0, #16
 80047d2:	fb02 7000 	mla	r0, r2, r0, r7
 80047d6:	b289      	uxth	r1, r1
 80047d8:	3301      	adds	r3, #1
 80047da:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80047de:	429d      	cmp	r5, r3
 80047e0:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80047e4:	f84c 1b04 	str.w	r1, [ip], #4
 80047e8:	dcec      	bgt.n	80047c4 <__multadd+0x12>
 80047ea:	b1d7      	cbz	r7, 8004822 <__multadd+0x70>
 80047ec:	68a3      	ldr	r3, [r4, #8]
 80047ee:	42ab      	cmp	r3, r5
 80047f0:	dc12      	bgt.n	8004818 <__multadd+0x66>
 80047f2:	6861      	ldr	r1, [r4, #4]
 80047f4:	4630      	mov	r0, r6
 80047f6:	3101      	adds	r1, #1
 80047f8:	f7ff ff90 	bl	800471c <_Balloc>
 80047fc:	6922      	ldr	r2, [r4, #16]
 80047fe:	3202      	adds	r2, #2
 8004800:	f104 010c 	add.w	r1, r4, #12
 8004804:	4680      	mov	r8, r0
 8004806:	0092      	lsls	r2, r2, #2
 8004808:	300c      	adds	r0, #12
 800480a:	f7fe fce3 	bl	80031d4 <memcpy>
 800480e:	4621      	mov	r1, r4
 8004810:	4630      	mov	r0, r6
 8004812:	f7ff ffb7 	bl	8004784 <_Bfree>
 8004816:	4644      	mov	r4, r8
 8004818:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800481c:	3501      	adds	r5, #1
 800481e:	615f      	str	r7, [r3, #20]
 8004820:	6125      	str	r5, [r4, #16]
 8004822:	4620      	mov	r0, r4
 8004824:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004828 <__hi0bits>:
 8004828:	0c02      	lsrs	r2, r0, #16
 800482a:	0412      	lsls	r2, r2, #16
 800482c:	4603      	mov	r3, r0
 800482e:	b9b2      	cbnz	r2, 800485e <__hi0bits+0x36>
 8004830:	0403      	lsls	r3, r0, #16
 8004832:	2010      	movs	r0, #16
 8004834:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8004838:	bf04      	itt	eq
 800483a:	021b      	lsleq	r3, r3, #8
 800483c:	3008      	addeq	r0, #8
 800483e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8004842:	bf04      	itt	eq
 8004844:	011b      	lsleq	r3, r3, #4
 8004846:	3004      	addeq	r0, #4
 8004848:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800484c:	bf04      	itt	eq
 800484e:	009b      	lsleq	r3, r3, #2
 8004850:	3002      	addeq	r0, #2
 8004852:	2b00      	cmp	r3, #0
 8004854:	db06      	blt.n	8004864 <__hi0bits+0x3c>
 8004856:	005b      	lsls	r3, r3, #1
 8004858:	d503      	bpl.n	8004862 <__hi0bits+0x3a>
 800485a:	3001      	adds	r0, #1
 800485c:	4770      	bx	lr
 800485e:	2000      	movs	r0, #0
 8004860:	e7e8      	b.n	8004834 <__hi0bits+0xc>
 8004862:	2020      	movs	r0, #32
 8004864:	4770      	bx	lr

08004866 <__lo0bits>:
 8004866:	6803      	ldr	r3, [r0, #0]
 8004868:	f013 0207 	ands.w	r2, r3, #7
 800486c:	4601      	mov	r1, r0
 800486e:	d00b      	beq.n	8004888 <__lo0bits+0x22>
 8004870:	07da      	lsls	r2, r3, #31
 8004872:	d423      	bmi.n	80048bc <__lo0bits+0x56>
 8004874:	0798      	lsls	r0, r3, #30
 8004876:	bf49      	itett	mi
 8004878:	085b      	lsrmi	r3, r3, #1
 800487a:	089b      	lsrpl	r3, r3, #2
 800487c:	2001      	movmi	r0, #1
 800487e:	600b      	strmi	r3, [r1, #0]
 8004880:	bf5c      	itt	pl
 8004882:	600b      	strpl	r3, [r1, #0]
 8004884:	2002      	movpl	r0, #2
 8004886:	4770      	bx	lr
 8004888:	b298      	uxth	r0, r3
 800488a:	b9a8      	cbnz	r0, 80048b8 <__lo0bits+0x52>
 800488c:	0c1b      	lsrs	r3, r3, #16
 800488e:	2010      	movs	r0, #16
 8004890:	f013 0fff 	tst.w	r3, #255	; 0xff
 8004894:	bf04      	itt	eq
 8004896:	0a1b      	lsreq	r3, r3, #8
 8004898:	3008      	addeq	r0, #8
 800489a:	071a      	lsls	r2, r3, #28
 800489c:	bf04      	itt	eq
 800489e:	091b      	lsreq	r3, r3, #4
 80048a0:	3004      	addeq	r0, #4
 80048a2:	079a      	lsls	r2, r3, #30
 80048a4:	bf04      	itt	eq
 80048a6:	089b      	lsreq	r3, r3, #2
 80048a8:	3002      	addeq	r0, #2
 80048aa:	07da      	lsls	r2, r3, #31
 80048ac:	d402      	bmi.n	80048b4 <__lo0bits+0x4e>
 80048ae:	085b      	lsrs	r3, r3, #1
 80048b0:	d006      	beq.n	80048c0 <__lo0bits+0x5a>
 80048b2:	3001      	adds	r0, #1
 80048b4:	600b      	str	r3, [r1, #0]
 80048b6:	4770      	bx	lr
 80048b8:	4610      	mov	r0, r2
 80048ba:	e7e9      	b.n	8004890 <__lo0bits+0x2a>
 80048bc:	2000      	movs	r0, #0
 80048be:	4770      	bx	lr
 80048c0:	2020      	movs	r0, #32
 80048c2:	4770      	bx	lr

080048c4 <__i2b>:
 80048c4:	b510      	push	{r4, lr}
 80048c6:	460c      	mov	r4, r1
 80048c8:	2101      	movs	r1, #1
 80048ca:	f7ff ff27 	bl	800471c <_Balloc>
 80048ce:	2201      	movs	r2, #1
 80048d0:	6144      	str	r4, [r0, #20]
 80048d2:	6102      	str	r2, [r0, #16]
 80048d4:	bd10      	pop	{r4, pc}

080048d6 <__multiply>:
 80048d6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048da:	4614      	mov	r4, r2
 80048dc:	690a      	ldr	r2, [r1, #16]
 80048de:	6923      	ldr	r3, [r4, #16]
 80048e0:	429a      	cmp	r2, r3
 80048e2:	bfb8      	it	lt
 80048e4:	460b      	movlt	r3, r1
 80048e6:	4688      	mov	r8, r1
 80048e8:	bfbc      	itt	lt
 80048ea:	46a0      	movlt	r8, r4
 80048ec:	461c      	movlt	r4, r3
 80048ee:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80048f2:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80048f6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80048fa:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80048fe:	eb07 0609 	add.w	r6, r7, r9
 8004902:	42b3      	cmp	r3, r6
 8004904:	bfb8      	it	lt
 8004906:	3101      	addlt	r1, #1
 8004908:	f7ff ff08 	bl	800471c <_Balloc>
 800490c:	f100 0514 	add.w	r5, r0, #20
 8004910:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8004914:	462b      	mov	r3, r5
 8004916:	2200      	movs	r2, #0
 8004918:	4573      	cmp	r3, lr
 800491a:	d316      	bcc.n	800494a <__multiply+0x74>
 800491c:	f104 0214 	add.w	r2, r4, #20
 8004920:	f108 0114 	add.w	r1, r8, #20
 8004924:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8004928:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800492c:	9300      	str	r3, [sp, #0]
 800492e:	9b00      	ldr	r3, [sp, #0]
 8004930:	9201      	str	r2, [sp, #4]
 8004932:	4293      	cmp	r3, r2
 8004934:	d80c      	bhi.n	8004950 <__multiply+0x7a>
 8004936:	2e00      	cmp	r6, #0
 8004938:	dd03      	ble.n	8004942 <__multiply+0x6c>
 800493a:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800493e:	2b00      	cmp	r3, #0
 8004940:	d05d      	beq.n	80049fe <__multiply+0x128>
 8004942:	6106      	str	r6, [r0, #16]
 8004944:	b003      	add	sp, #12
 8004946:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800494a:	f843 2b04 	str.w	r2, [r3], #4
 800494e:	e7e3      	b.n	8004918 <__multiply+0x42>
 8004950:	f8b2 b000 	ldrh.w	fp, [r2]
 8004954:	f1bb 0f00 	cmp.w	fp, #0
 8004958:	d023      	beq.n	80049a2 <__multiply+0xcc>
 800495a:	4689      	mov	r9, r1
 800495c:	46ac      	mov	ip, r5
 800495e:	f04f 0800 	mov.w	r8, #0
 8004962:	f859 4b04 	ldr.w	r4, [r9], #4
 8004966:	f8dc a000 	ldr.w	sl, [ip]
 800496a:	b2a3      	uxth	r3, r4
 800496c:	fa1f fa8a 	uxth.w	sl, sl
 8004970:	fb0b a303 	mla	r3, fp, r3, sl
 8004974:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8004978:	f8dc 4000 	ldr.w	r4, [ip]
 800497c:	4443      	add	r3, r8
 800497e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8004982:	fb0b 840a 	mla	r4, fp, sl, r8
 8004986:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800498a:	46e2      	mov	sl, ip
 800498c:	b29b      	uxth	r3, r3
 800498e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8004992:	454f      	cmp	r7, r9
 8004994:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8004998:	f84a 3b04 	str.w	r3, [sl], #4
 800499c:	d82b      	bhi.n	80049f6 <__multiply+0x120>
 800499e:	f8cc 8004 	str.w	r8, [ip, #4]
 80049a2:	9b01      	ldr	r3, [sp, #4]
 80049a4:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80049a8:	3204      	adds	r2, #4
 80049aa:	f1ba 0f00 	cmp.w	sl, #0
 80049ae:	d020      	beq.n	80049f2 <__multiply+0x11c>
 80049b0:	682b      	ldr	r3, [r5, #0]
 80049b2:	4689      	mov	r9, r1
 80049b4:	46a8      	mov	r8, r5
 80049b6:	f04f 0b00 	mov.w	fp, #0
 80049ba:	f8b9 c000 	ldrh.w	ip, [r9]
 80049be:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80049c2:	fb0a 440c 	mla	r4, sl, ip, r4
 80049c6:	445c      	add	r4, fp
 80049c8:	46c4      	mov	ip, r8
 80049ca:	b29b      	uxth	r3, r3
 80049cc:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80049d0:	f84c 3b04 	str.w	r3, [ip], #4
 80049d4:	f859 3b04 	ldr.w	r3, [r9], #4
 80049d8:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80049dc:	0c1b      	lsrs	r3, r3, #16
 80049de:	fb0a b303 	mla	r3, sl, r3, fp
 80049e2:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80049e6:	454f      	cmp	r7, r9
 80049e8:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80049ec:	d805      	bhi.n	80049fa <__multiply+0x124>
 80049ee:	f8c8 3004 	str.w	r3, [r8, #4]
 80049f2:	3504      	adds	r5, #4
 80049f4:	e79b      	b.n	800492e <__multiply+0x58>
 80049f6:	46d4      	mov	ip, sl
 80049f8:	e7b3      	b.n	8004962 <__multiply+0x8c>
 80049fa:	46e0      	mov	r8, ip
 80049fc:	e7dd      	b.n	80049ba <__multiply+0xe4>
 80049fe:	3e01      	subs	r6, #1
 8004a00:	e799      	b.n	8004936 <__multiply+0x60>
	...

08004a04 <__pow5mult>:
 8004a04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004a08:	4615      	mov	r5, r2
 8004a0a:	f012 0203 	ands.w	r2, r2, #3
 8004a0e:	4606      	mov	r6, r0
 8004a10:	460f      	mov	r7, r1
 8004a12:	d007      	beq.n	8004a24 <__pow5mult+0x20>
 8004a14:	3a01      	subs	r2, #1
 8004a16:	4c21      	ldr	r4, [pc, #132]	; (8004a9c <__pow5mult+0x98>)
 8004a18:	2300      	movs	r3, #0
 8004a1a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8004a1e:	f7ff fec8 	bl	80047b2 <__multadd>
 8004a22:	4607      	mov	r7, r0
 8004a24:	10ad      	asrs	r5, r5, #2
 8004a26:	d035      	beq.n	8004a94 <__pow5mult+0x90>
 8004a28:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8004a2a:	b93c      	cbnz	r4, 8004a3c <__pow5mult+0x38>
 8004a2c:	2010      	movs	r0, #16
 8004a2e:	f7fe fbc1 	bl	80031b4 <malloc>
 8004a32:	6270      	str	r0, [r6, #36]	; 0x24
 8004a34:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004a38:	6004      	str	r4, [r0, #0]
 8004a3a:	60c4      	str	r4, [r0, #12]
 8004a3c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8004a40:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004a44:	b94c      	cbnz	r4, 8004a5a <__pow5mult+0x56>
 8004a46:	f240 2171 	movw	r1, #625	; 0x271
 8004a4a:	4630      	mov	r0, r6
 8004a4c:	f7ff ff3a 	bl	80048c4 <__i2b>
 8004a50:	2300      	movs	r3, #0
 8004a52:	f8c8 0008 	str.w	r0, [r8, #8]
 8004a56:	4604      	mov	r4, r0
 8004a58:	6003      	str	r3, [r0, #0]
 8004a5a:	f04f 0800 	mov.w	r8, #0
 8004a5e:	07eb      	lsls	r3, r5, #31
 8004a60:	d50a      	bpl.n	8004a78 <__pow5mult+0x74>
 8004a62:	4639      	mov	r1, r7
 8004a64:	4622      	mov	r2, r4
 8004a66:	4630      	mov	r0, r6
 8004a68:	f7ff ff35 	bl	80048d6 <__multiply>
 8004a6c:	4639      	mov	r1, r7
 8004a6e:	4681      	mov	r9, r0
 8004a70:	4630      	mov	r0, r6
 8004a72:	f7ff fe87 	bl	8004784 <_Bfree>
 8004a76:	464f      	mov	r7, r9
 8004a78:	106d      	asrs	r5, r5, #1
 8004a7a:	d00b      	beq.n	8004a94 <__pow5mult+0x90>
 8004a7c:	6820      	ldr	r0, [r4, #0]
 8004a7e:	b938      	cbnz	r0, 8004a90 <__pow5mult+0x8c>
 8004a80:	4622      	mov	r2, r4
 8004a82:	4621      	mov	r1, r4
 8004a84:	4630      	mov	r0, r6
 8004a86:	f7ff ff26 	bl	80048d6 <__multiply>
 8004a8a:	6020      	str	r0, [r4, #0]
 8004a8c:	f8c0 8000 	str.w	r8, [r0]
 8004a90:	4604      	mov	r4, r0
 8004a92:	e7e4      	b.n	8004a5e <__pow5mult+0x5a>
 8004a94:	4638      	mov	r0, r7
 8004a96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004a9a:	bf00      	nop
 8004a9c:	08004e58 	.word	0x08004e58

08004aa0 <__lshift>:
 8004aa0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004aa4:	460c      	mov	r4, r1
 8004aa6:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8004aaa:	6923      	ldr	r3, [r4, #16]
 8004aac:	6849      	ldr	r1, [r1, #4]
 8004aae:	eb0a 0903 	add.w	r9, sl, r3
 8004ab2:	68a3      	ldr	r3, [r4, #8]
 8004ab4:	4607      	mov	r7, r0
 8004ab6:	4616      	mov	r6, r2
 8004ab8:	f109 0501 	add.w	r5, r9, #1
 8004abc:	42ab      	cmp	r3, r5
 8004abe:	db32      	blt.n	8004b26 <__lshift+0x86>
 8004ac0:	4638      	mov	r0, r7
 8004ac2:	f7ff fe2b 	bl	800471c <_Balloc>
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	4680      	mov	r8, r0
 8004aca:	f100 0114 	add.w	r1, r0, #20
 8004ace:	461a      	mov	r2, r3
 8004ad0:	4553      	cmp	r3, sl
 8004ad2:	db2b      	blt.n	8004b2c <__lshift+0x8c>
 8004ad4:	6920      	ldr	r0, [r4, #16]
 8004ad6:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004ada:	f104 0314 	add.w	r3, r4, #20
 8004ade:	f016 021f 	ands.w	r2, r6, #31
 8004ae2:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8004ae6:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8004aea:	d025      	beq.n	8004b38 <__lshift+0x98>
 8004aec:	f1c2 0e20 	rsb	lr, r2, #32
 8004af0:	2000      	movs	r0, #0
 8004af2:	681e      	ldr	r6, [r3, #0]
 8004af4:	468a      	mov	sl, r1
 8004af6:	4096      	lsls	r6, r2
 8004af8:	4330      	orrs	r0, r6
 8004afa:	f84a 0b04 	str.w	r0, [sl], #4
 8004afe:	f853 0b04 	ldr.w	r0, [r3], #4
 8004b02:	459c      	cmp	ip, r3
 8004b04:	fa20 f00e 	lsr.w	r0, r0, lr
 8004b08:	d814      	bhi.n	8004b34 <__lshift+0x94>
 8004b0a:	6048      	str	r0, [r1, #4]
 8004b0c:	b108      	cbz	r0, 8004b12 <__lshift+0x72>
 8004b0e:	f109 0502 	add.w	r5, r9, #2
 8004b12:	3d01      	subs	r5, #1
 8004b14:	4638      	mov	r0, r7
 8004b16:	f8c8 5010 	str.w	r5, [r8, #16]
 8004b1a:	4621      	mov	r1, r4
 8004b1c:	f7ff fe32 	bl	8004784 <_Bfree>
 8004b20:	4640      	mov	r0, r8
 8004b22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b26:	3101      	adds	r1, #1
 8004b28:	005b      	lsls	r3, r3, #1
 8004b2a:	e7c7      	b.n	8004abc <__lshift+0x1c>
 8004b2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8004b30:	3301      	adds	r3, #1
 8004b32:	e7cd      	b.n	8004ad0 <__lshift+0x30>
 8004b34:	4651      	mov	r1, sl
 8004b36:	e7dc      	b.n	8004af2 <__lshift+0x52>
 8004b38:	3904      	subs	r1, #4
 8004b3a:	f853 2b04 	ldr.w	r2, [r3], #4
 8004b3e:	f841 2f04 	str.w	r2, [r1, #4]!
 8004b42:	459c      	cmp	ip, r3
 8004b44:	d8f9      	bhi.n	8004b3a <__lshift+0x9a>
 8004b46:	e7e4      	b.n	8004b12 <__lshift+0x72>

08004b48 <__mcmp>:
 8004b48:	6903      	ldr	r3, [r0, #16]
 8004b4a:	690a      	ldr	r2, [r1, #16]
 8004b4c:	1a9b      	subs	r3, r3, r2
 8004b4e:	b530      	push	{r4, r5, lr}
 8004b50:	d10c      	bne.n	8004b6c <__mcmp+0x24>
 8004b52:	0092      	lsls	r2, r2, #2
 8004b54:	3014      	adds	r0, #20
 8004b56:	3114      	adds	r1, #20
 8004b58:	1884      	adds	r4, r0, r2
 8004b5a:	4411      	add	r1, r2
 8004b5c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8004b60:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8004b64:	4295      	cmp	r5, r2
 8004b66:	d003      	beq.n	8004b70 <__mcmp+0x28>
 8004b68:	d305      	bcc.n	8004b76 <__mcmp+0x2e>
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	bd30      	pop	{r4, r5, pc}
 8004b70:	42a0      	cmp	r0, r4
 8004b72:	d3f3      	bcc.n	8004b5c <__mcmp+0x14>
 8004b74:	e7fa      	b.n	8004b6c <__mcmp+0x24>
 8004b76:	f04f 33ff 	mov.w	r3, #4294967295
 8004b7a:	e7f7      	b.n	8004b6c <__mcmp+0x24>

08004b7c <__mdiff>:
 8004b7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b80:	460d      	mov	r5, r1
 8004b82:	4607      	mov	r7, r0
 8004b84:	4611      	mov	r1, r2
 8004b86:	4628      	mov	r0, r5
 8004b88:	4614      	mov	r4, r2
 8004b8a:	f7ff ffdd 	bl	8004b48 <__mcmp>
 8004b8e:	1e06      	subs	r6, r0, #0
 8004b90:	d108      	bne.n	8004ba4 <__mdiff+0x28>
 8004b92:	4631      	mov	r1, r6
 8004b94:	4638      	mov	r0, r7
 8004b96:	f7ff fdc1 	bl	800471c <_Balloc>
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8004ba0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ba4:	bfa4      	itt	ge
 8004ba6:	4623      	movge	r3, r4
 8004ba8:	462c      	movge	r4, r5
 8004baa:	4638      	mov	r0, r7
 8004bac:	6861      	ldr	r1, [r4, #4]
 8004bae:	bfa6      	itte	ge
 8004bb0:	461d      	movge	r5, r3
 8004bb2:	2600      	movge	r6, #0
 8004bb4:	2601      	movlt	r6, #1
 8004bb6:	f7ff fdb1 	bl	800471c <_Balloc>
 8004bba:	692b      	ldr	r3, [r5, #16]
 8004bbc:	60c6      	str	r6, [r0, #12]
 8004bbe:	6926      	ldr	r6, [r4, #16]
 8004bc0:	f105 0914 	add.w	r9, r5, #20
 8004bc4:	f104 0214 	add.w	r2, r4, #20
 8004bc8:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8004bcc:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8004bd0:	f100 0514 	add.w	r5, r0, #20
 8004bd4:	f04f 0e00 	mov.w	lr, #0
 8004bd8:	f852 ab04 	ldr.w	sl, [r2], #4
 8004bdc:	f859 4b04 	ldr.w	r4, [r9], #4
 8004be0:	fa1e f18a 	uxtah	r1, lr, sl
 8004be4:	b2a3      	uxth	r3, r4
 8004be6:	1ac9      	subs	r1, r1, r3
 8004be8:	0c23      	lsrs	r3, r4, #16
 8004bea:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8004bee:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8004bf2:	b289      	uxth	r1, r1
 8004bf4:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8004bf8:	45c8      	cmp	r8, r9
 8004bfa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8004bfe:	4694      	mov	ip, r2
 8004c00:	f845 3b04 	str.w	r3, [r5], #4
 8004c04:	d8e8      	bhi.n	8004bd8 <__mdiff+0x5c>
 8004c06:	45bc      	cmp	ip, r7
 8004c08:	d304      	bcc.n	8004c14 <__mdiff+0x98>
 8004c0a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8004c0e:	b183      	cbz	r3, 8004c32 <__mdiff+0xb6>
 8004c10:	6106      	str	r6, [r0, #16]
 8004c12:	e7c5      	b.n	8004ba0 <__mdiff+0x24>
 8004c14:	f85c 1b04 	ldr.w	r1, [ip], #4
 8004c18:	fa1e f381 	uxtah	r3, lr, r1
 8004c1c:	141a      	asrs	r2, r3, #16
 8004c1e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8004c22:	b29b      	uxth	r3, r3
 8004c24:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004c28:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8004c2c:	f845 3b04 	str.w	r3, [r5], #4
 8004c30:	e7e9      	b.n	8004c06 <__mdiff+0x8a>
 8004c32:	3e01      	subs	r6, #1
 8004c34:	e7e9      	b.n	8004c0a <__mdiff+0x8e>

08004c36 <__d2b>:
 8004c36:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8004c3a:	2101      	movs	r1, #1
 8004c3c:	461c      	mov	r4, r3
 8004c3e:	4690      	mov	r8, r2
 8004c40:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 8004c44:	f7ff fd6a 	bl	800471c <_Balloc>
 8004c48:	f3c4 0213 	ubfx	r2, r4, #0, #20
 8004c4c:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8004c50:	4607      	mov	r7, r0
 8004c52:	bb34      	cbnz	r4, 8004ca2 <__d2b+0x6c>
 8004c54:	9201      	str	r2, [sp, #4]
 8004c56:	f1b8 0200 	subs.w	r2, r8, #0
 8004c5a:	d027      	beq.n	8004cac <__d2b+0x76>
 8004c5c:	a802      	add	r0, sp, #8
 8004c5e:	f840 2d08 	str.w	r2, [r0, #-8]!
 8004c62:	f7ff fe00 	bl	8004866 <__lo0bits>
 8004c66:	9900      	ldr	r1, [sp, #0]
 8004c68:	b1f0      	cbz	r0, 8004ca8 <__d2b+0x72>
 8004c6a:	9a01      	ldr	r2, [sp, #4]
 8004c6c:	f1c0 0320 	rsb	r3, r0, #32
 8004c70:	fa02 f303 	lsl.w	r3, r2, r3
 8004c74:	430b      	orrs	r3, r1
 8004c76:	40c2      	lsrs	r2, r0
 8004c78:	617b      	str	r3, [r7, #20]
 8004c7a:	9201      	str	r2, [sp, #4]
 8004c7c:	9b01      	ldr	r3, [sp, #4]
 8004c7e:	61bb      	str	r3, [r7, #24]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	bf14      	ite	ne
 8004c84:	2102      	movne	r1, #2
 8004c86:	2101      	moveq	r1, #1
 8004c88:	6139      	str	r1, [r7, #16]
 8004c8a:	b1c4      	cbz	r4, 8004cbe <__d2b+0x88>
 8004c8c:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8004c90:	4404      	add	r4, r0
 8004c92:	6034      	str	r4, [r6, #0]
 8004c94:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8004c98:	6028      	str	r0, [r5, #0]
 8004c9a:	4638      	mov	r0, r7
 8004c9c:	b002      	add	sp, #8
 8004c9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ca2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8004ca6:	e7d5      	b.n	8004c54 <__d2b+0x1e>
 8004ca8:	6179      	str	r1, [r7, #20]
 8004caa:	e7e7      	b.n	8004c7c <__d2b+0x46>
 8004cac:	a801      	add	r0, sp, #4
 8004cae:	f7ff fdda 	bl	8004866 <__lo0bits>
 8004cb2:	9b01      	ldr	r3, [sp, #4]
 8004cb4:	617b      	str	r3, [r7, #20]
 8004cb6:	2101      	movs	r1, #1
 8004cb8:	6139      	str	r1, [r7, #16]
 8004cba:	3020      	adds	r0, #32
 8004cbc:	e7e5      	b.n	8004c8a <__d2b+0x54>
 8004cbe:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8004cc2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8004cc6:	6030      	str	r0, [r6, #0]
 8004cc8:	6918      	ldr	r0, [r3, #16]
 8004cca:	f7ff fdad 	bl	8004828 <__hi0bits>
 8004cce:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8004cd2:	e7e1      	b.n	8004c98 <__d2b+0x62>

08004cd4 <_calloc_r>:
 8004cd4:	b538      	push	{r3, r4, r5, lr}
 8004cd6:	fb02 f401 	mul.w	r4, r2, r1
 8004cda:	4621      	mov	r1, r4
 8004cdc:	f7fe fadc 	bl	8003298 <_malloc_r>
 8004ce0:	4605      	mov	r5, r0
 8004ce2:	b118      	cbz	r0, 8004cec <_calloc_r+0x18>
 8004ce4:	4622      	mov	r2, r4
 8004ce6:	2100      	movs	r1, #0
 8004ce8:	f7fe fa7f 	bl	80031ea <memset>
 8004cec:	4628      	mov	r0, r5
 8004cee:	bd38      	pop	{r3, r4, r5, pc}

08004cf0 <__ascii_mbtowc>:
 8004cf0:	b082      	sub	sp, #8
 8004cf2:	b901      	cbnz	r1, 8004cf6 <__ascii_mbtowc+0x6>
 8004cf4:	a901      	add	r1, sp, #4
 8004cf6:	b142      	cbz	r2, 8004d0a <__ascii_mbtowc+0x1a>
 8004cf8:	b14b      	cbz	r3, 8004d0e <__ascii_mbtowc+0x1e>
 8004cfa:	7813      	ldrb	r3, [r2, #0]
 8004cfc:	600b      	str	r3, [r1, #0]
 8004cfe:	7812      	ldrb	r2, [r2, #0]
 8004d00:	1c10      	adds	r0, r2, #0
 8004d02:	bf18      	it	ne
 8004d04:	2001      	movne	r0, #1
 8004d06:	b002      	add	sp, #8
 8004d08:	4770      	bx	lr
 8004d0a:	4610      	mov	r0, r2
 8004d0c:	e7fb      	b.n	8004d06 <__ascii_mbtowc+0x16>
 8004d0e:	f06f 0001 	mvn.w	r0, #1
 8004d12:	e7f8      	b.n	8004d06 <__ascii_mbtowc+0x16>

08004d14 <__ascii_wctomb>:
 8004d14:	b149      	cbz	r1, 8004d2a <__ascii_wctomb+0x16>
 8004d16:	2aff      	cmp	r2, #255	; 0xff
 8004d18:	bf85      	ittet	hi
 8004d1a:	238a      	movhi	r3, #138	; 0x8a
 8004d1c:	6003      	strhi	r3, [r0, #0]
 8004d1e:	700a      	strbls	r2, [r1, #0]
 8004d20:	f04f 30ff 	movhi.w	r0, #4294967295
 8004d24:	bf98      	it	ls
 8004d26:	2001      	movls	r0, #1
 8004d28:	4770      	bx	lr
 8004d2a:	4608      	mov	r0, r1
 8004d2c:	4770      	bx	lr
	...

08004d30 <_init>:
 8004d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d32:	bf00      	nop
 8004d34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d36:	bc08      	pop	{r3}
 8004d38:	469e      	mov	lr, r3
 8004d3a:	4770      	bx	lr

08004d3c <_fini>:
 8004d3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d3e:	bf00      	nop
 8004d40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d42:	bc08      	pop	{r3}
 8004d44:	469e      	mov	lr, r3
 8004d46:	4770      	bx	lr
