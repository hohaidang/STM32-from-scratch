
004_SPI_driver_CPP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005068  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000228  08005230  08005230  00015230  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005458  08005458  000201d0  2**0
                  CONTENTS
  4 .ARM          00000000  08005458  08005458  000201d0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005458  08005458  000201d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005458  08005458  00015458  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800545c  0800545c  0001545c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d0  20000000  08005460  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000003c  200001d0  08005630  000201d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000020c  08005630  0002020c  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  000201d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014fda  00000000  00000000  000201fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000024b0  00000000  00000000  000351d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000007c8  00000000  00000000  00037688  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000760  00000000  00000000  00037e50  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00006887  00000000  00000000  000385b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00006792  00000000  00000000  0003ee37  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00017704  00000000  00000000  000455c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0005cccd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e58  00000000  00000000  0005cd48  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	200001d0 	.word	0x200001d0
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08005218 	.word	0x08005218

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	200001d4 	.word	0x200001d4
 8000204:	08005218 	.word	0x08005218

08000208 <strlen>:
 8000208:	4603      	mov	r3, r0
 800020a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020e:	2a00      	cmp	r2, #0
 8000210:	d1fb      	bne.n	800020a <strlen+0x2>
 8000212:	1a18      	subs	r0, r3, r0
 8000214:	3801      	subs	r0, #1
 8000216:	4770      	bx	lr

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000356:	f1a4 0401 	sub.w	r4, r4, #1
 800035a:	d1e9      	bne.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_dcmpun>:
 8000ac4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x10>
 8000ace:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad2:	d10a      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ad4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000adc:	d102      	bne.n	8000ae4 <__aeabi_dcmpun+0x20>
 8000ade:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae2:	d102      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	f04f 0001 	mov.w	r0, #1
 8000aee:	4770      	bx	lr

08000af0 <__aeabi_d2iz>:
 8000af0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000af8:	d215      	bcs.n	8000b26 <__aeabi_d2iz+0x36>
 8000afa:	d511      	bpl.n	8000b20 <__aeabi_d2iz+0x30>
 8000afc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b00:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b04:	d912      	bls.n	8000b2c <__aeabi_d2iz+0x3c>
 8000b06:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b0a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b0e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b12:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b16:	fa23 f002 	lsr.w	r0, r3, r2
 8000b1a:	bf18      	it	ne
 8000b1c:	4240      	negne	r0, r0
 8000b1e:	4770      	bx	lr
 8000b20:	f04f 0000 	mov.w	r0, #0
 8000b24:	4770      	bx	lr
 8000b26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b2a:	d105      	bne.n	8000b38 <__aeabi_d2iz+0x48>
 8000b2c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b30:	bf08      	it	eq
 8000b32:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop

08000b40 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8000b40:	b480      	push	{r7}
 8000b42:	b083      	sub	sp, #12
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
 8000b48:	6039      	str	r1, [r7, #0]
 8000b4a:	683b      	ldr	r3, [r7, #0]
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	370c      	adds	r7, #12
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bc80      	pop	{r7}
 8000b54:	4770      	bx	lr

08000b56 <_ZNSt9_Any_data9_M_accessEv>:
    void (_Undefined_class::*_M_member_pointer)();
  };

  union [[gnu::may_alias]] _Any_data
  {
    void*       _M_access()       { return &_M_pod_data[0]; }
 8000b56:	b480      	push	{r7}
 8000b58:	b083      	sub	sp, #12
 8000b5a:	af00      	add	r7, sp, #0
 8000b5c:	6078      	str	r0, [r7, #4]
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	4618      	mov	r0, r3
 8000b62:	370c      	adds	r7, #12
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bc80      	pop	{r7}
 8000b68:	4770      	bx	lr

08000b6a <_ZNKSt9_Any_data9_M_accessEv>:
    const void* _M_access() const { return &_M_pod_data[0]; }
 8000b6a:	b480      	push	{r7}
 8000b6c:	b083      	sub	sp, #12
 8000b6e:	af00      	add	r7, sp, #0
 8000b70:	6078      	str	r0, [r7, #4]
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	4618      	mov	r0, r3
 8000b76:	370c      	adds	r7, #12
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bc80      	pop	{r7}
 8000b7c:	4770      	bx	lr

08000b7e <_ZNSt14_Function_baseC1Ev>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
 8000b7e:	b480      	push	{r7}
 8000b80:	b083      	sub	sp, #12
 8000b82:	af00      	add	r7, sp, #0
 8000b84:	6078      	str	r0, [r7, #4]
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	2200      	movs	r2, #0
 8000b8a:	609a      	str	r2, [r3, #8]
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	4618      	mov	r0, r3
 8000b90:	370c      	adds	r7, #12
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bc80      	pop	{r7}
 8000b96:	4770      	bx	lr

08000b98 <_ZNSt14_Function_baseD1Ev>:

    ~_Function_base()
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b082      	sub	sp, #8
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
    {
      if (_M_manager)
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	689b      	ldr	r3, [r3, #8]
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d005      	beq.n	8000bb4 <_ZNSt14_Function_baseD1Ev+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	689b      	ldr	r3, [r3, #8]
 8000bac:	6878      	ldr	r0, [r7, #4]
 8000bae:	6879      	ldr	r1, [r7, #4]
 8000bb0:	2203      	movs	r2, #3
 8000bb2:	4798      	blx	r3
    }
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	3708      	adds	r7, #8
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}

08000bbe <_ZNSt8functionIFhhPhmEED1Ev>:
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8000bbe:	b580      	push	{r7, lr}
 8000bc0:	b082      	sub	sp, #8
 8000bc2:	af00      	add	r7, sp, #0
 8000bc4:	6078      	str	r0, [r7, #4]
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f7ff ffe5 	bl	8000b98 <_ZNSt14_Function_baseD1Ev>
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	3708      	adds	r7, #8
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}

08000bd8 <_ZNSt8functionIFhhPKhmEED1Ev>:
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b082      	sub	sp, #8
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	4618      	mov	r0, r3
 8000be4:	f7ff ffd8 	bl	8000b98 <_ZNSt14_Function_baseD1Ev>
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	4618      	mov	r0, r3
 8000bec:	3708      	adds	r7, #8
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}

08000bf2 <_ZNSt8functionIFvmEED1Ev>:
 8000bf2:	b580      	push	{r7, lr}
 8000bf4:	b082      	sub	sp, #8
 8000bf6:	af00      	add	r7, sp, #0
 8000bf8:	6078      	str	r0, [r7, #4]
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f7ff ffcb 	bl	8000b98 <_ZNSt14_Function_baseD1Ev>
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	4618      	mov	r0, r3
 8000c06:	3708      	adds	r7, #8
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}

08000c0c <_Z13user_delay_usm>:
BMESensor_Handler *bme280;

//struct bme280_dev dev;

void user_delay_us(u32 period)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b085      	sub	sp, #20
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
    // TODO: Design system tick in here
	for(int i = 0; i < 25000; ++i) {
 8000c14:	2300      	movs	r3, #0
 8000c16:	60fb      	str	r3, [r7, #12]
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	f246 12a7 	movw	r2, #24999	; 0x61a7
 8000c1e:	4293      	cmp	r3, r2
 8000c20:	dc03      	bgt.n	8000c2a <_Z13user_delay_usm+0x1e>
 8000c22:	68fb      	ldr	r3, [r7, #12]
 8000c24:	3301      	adds	r3, #1
 8000c26:	60fb      	str	r3, [r7, #12]
 8000c28:	e7f6      	b.n	8000c18 <_Z13user_delay_usm+0xc>

	}
}
 8000c2a:	bf00      	nop
 8000c2c:	3714      	adds	r7, #20
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bc80      	pop	{r7}
 8000c32:	4770      	bx	lr

08000c34 <_Z13user_spi_readhPhm>:

u8 user_spi_read (const u8 reg_addr, u8 *reg_data, u32 len) {
 8000c34:	b5b0      	push	{r4, r5, r7, lr}
 8000c36:	b08e      	sub	sp, #56	; 0x38
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	60b9      	str	r1, [r7, #8]
 8000c3e:	607a      	str	r2, [r7, #4]
 8000c40:	73fb      	strb	r3, [r7, #15]
    vector<u8> txBuffer(len + 1, 0);
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	1c5c      	adds	r4, r3, #1
 8000c46:	2300      	movs	r3, #0
 8000c48:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8000c4c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c50:	4618      	mov	r0, r3
 8000c52:	f000 f953 	bl	8000efc <_ZNSaIhEC1Ev>
 8000c56:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c5a:	f107 022b 	add.w	r2, r7, #43	; 0x2b
 8000c5e:	f107 001c 	add.w	r0, r7, #28
 8000c62:	4621      	mov	r1, r4
 8000c64:	f000 f962 	bl	8000f2c <_ZNSt6vectorIhSaIhEEC1EjRKhRKS0_>
 8000c68:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f000 f951 	bl	8000f14 <_ZNSaIhED1Ev>
    vector<u8> rxBuffer(len + 1, 0);
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	1c5c      	adds	r4, r3, #1
 8000c76:	2300      	movs	r3, #0
 8000c78:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8000c7c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000c80:	4618      	mov	r0, r3
 8000c82:	f000 f93b 	bl	8000efc <_ZNSaIhEC1Ev>
 8000c86:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000c8a:	f107 022f 	add.w	r2, r7, #47	; 0x2f
 8000c8e:	f107 0010 	add.w	r0, r7, #16
 8000c92:	4621      	mov	r1, r4
 8000c94:	f000 f94a 	bl	8000f2c <_ZNSt6vectorIhSaIhEEC1EjRKhRKS0_>
 8000c98:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f000 f939 	bl	8000f14 <_ZNSaIhED1Ev>
    txBuffer[0] = reg_addr;
 8000ca2:	f107 031c 	add.w	r3, r7, #28
 8000ca6:	2100      	movs	r1, #0
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f000 f971 	bl	8000f90 <_ZNSt6vectorIhSaIhEEixEj>
 8000cae:	4602      	mov	r2, r0
 8000cb0:	7bfb      	ldrb	r3, [r7, #15]
 8000cb2:	7013      	strb	r3, [r2, #0]

    PB6->GPIO_WriteToOutputPin(RESET);
 8000cb4:	4b24      	ldr	r3, [pc, #144]	; (8000d48 <_Z13user_spi_readhPhm+0x114>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	2100      	movs	r1, #0
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f001 fe20 	bl	8002900 <_ZN12GPIO_Handler21GPIO_WriteToOutputPinEh>

    SPI1_Handler->SPI_SendAndReceiveData(&txBuffer[0], &rxBuffer[0], len + 1);
 8000cc0:	4b22      	ldr	r3, [pc, #136]	; (8000d4c <_Z13user_spi_readhPhm+0x118>)
 8000cc2:	681c      	ldr	r4, [r3, #0]
 8000cc4:	f107 031c 	add.w	r3, r7, #28
 8000cc8:	2100      	movs	r1, #0
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f000 f960 	bl	8000f90 <_ZNSt6vectorIhSaIhEEixEj>
 8000cd0:	4605      	mov	r5, r0
 8000cd2:	f107 0310 	add.w	r3, r7, #16
 8000cd6:	2100      	movs	r1, #0
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f000 f959 	bl	8000f90 <_ZNSt6vectorIhSaIhEEixEj>
 8000cde:	4602      	mov	r2, r0
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	3301      	adds	r3, #1
 8000ce4:	4629      	mov	r1, r5
 8000ce6:	4620      	mov	r0, r4
 8000ce8:	f002 f8fc 	bl	8002ee4 <_ZN11SPI_Handler22SPI_SendAndReceiveDataEPhS0_m>

    PB6->GPIO_WriteToOutputPin(SET);
 8000cec:	4b16      	ldr	r3, [pc, #88]	; (8000d48 <_Z13user_spi_readhPhm+0x114>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	2101      	movs	r1, #1
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f001 fe04 	bl	8002900 <_ZN12GPIO_Handler21GPIO_WriteToOutputPinEh>

    // copy to reg_data
    for(u32 i = 0; i < len; ++i) {
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	637b      	str	r3, [r7, #52]	; 0x34
 8000cfc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	429a      	cmp	r2, r3
 8000d02:	d211      	bcs.n	8000d28 <_Z13user_spi_readhPhm+0xf4>
        reg_data[i] = rxBuffer[i + 1];
 8000d04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d06:	1c5a      	adds	r2, r3, #1
 8000d08:	f107 0310 	add.w	r3, r7, #16
 8000d0c:	4611      	mov	r1, r2
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f000 f93e 	bl	8000f90 <_ZNSt6vectorIhSaIhEEixEj>
 8000d14:	4601      	mov	r1, r0
 8000d16:	68ba      	ldr	r2, [r7, #8]
 8000d18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d1a:	4413      	add	r3, r2
 8000d1c:	780a      	ldrb	r2, [r1, #0]
 8000d1e:	701a      	strb	r2, [r3, #0]
    for(u32 i = 0; i < len; ++i) {
 8000d20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d22:	3301      	adds	r3, #1
 8000d24:	637b      	str	r3, [r7, #52]	; 0x34
 8000d26:	e7e9      	b.n	8000cfc <_Z13user_spi_readhPhm+0xc8>
    }
    return 0;
 8000d28:	2400      	movs	r4, #0
    vector<u8> rxBuffer(len + 1, 0);
 8000d2a:	f107 0310 	add.w	r3, r7, #16
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f000 f913 	bl	8000f5a <_ZNSt6vectorIhSaIhEED1Ev>
    vector<u8> txBuffer(len + 1, 0);
 8000d34:	f107 031c 	add.w	r3, r7, #28
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f000 f90e 	bl	8000f5a <_ZNSt6vectorIhSaIhEED1Ev>
    return 0;
 8000d3e:	4623      	mov	r3, r4
}
 8000d40:	4618      	mov	r0, r3
 8000d42:	3738      	adds	r7, #56	; 0x38
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bdb0      	pop	{r4, r5, r7, pc}
 8000d48:	200001f0 	.word	0x200001f0
 8000d4c:	200001ec 	.word	0x200001ec

08000d50 <_Z14user_spi_writehPKhm>:

u8 user_spi_write(const u8 reg_addr, const u8 *reg_data, u32 len) {
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b08c      	sub	sp, #48	; 0x30
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	4603      	mov	r3, r0
 8000d58:	60b9      	str	r1, [r7, #8]
 8000d5a:	607a      	str	r2, [r7, #4]
 8000d5c:	73fb      	strb	r3, [r7, #15]
    u8 txBuffer[28] = {};
 8000d5e:	f107 0310 	add.w	r3, r7, #16
 8000d62:	2200      	movs	r2, #0
 8000d64:	601a      	str	r2, [r3, #0]
 8000d66:	605a      	str	r2, [r3, #4]
 8000d68:	609a      	str	r2, [r3, #8]
 8000d6a:	60da      	str	r2, [r3, #12]
 8000d6c:	611a      	str	r2, [r3, #16]
 8000d6e:	615a      	str	r2, [r3, #20]
 8000d70:	619a      	str	r2, [r3, #24]
    txBuffer[0] = reg_addr;
 8000d72:	7bfb      	ldrb	r3, [r7, #15]
 8000d74:	743b      	strb	r3, [r7, #16]
    for(u32 i = 0; i < len; ++i) {
 8000d76:	2300      	movs	r3, #0
 8000d78:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000d7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	429a      	cmp	r2, r3
 8000d80:	d20e      	bcs.n	8000da0 <_Z14user_spi_writehPKhm+0x50>
        txBuffer[i + 1] = reg_data[i];
 8000d82:	68ba      	ldr	r2, [r7, #8]
 8000d84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d86:	441a      	add	r2, r3
 8000d88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d8a:	3301      	adds	r3, #1
 8000d8c:	7812      	ldrb	r2, [r2, #0]
 8000d8e:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8000d92:	440b      	add	r3, r1
 8000d94:	f803 2c20 	strb.w	r2, [r3, #-32]
    for(u32 i = 0; i < len; ++i) {
 8000d98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d9a:	3301      	adds	r3, #1
 8000d9c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000d9e:	e7ec      	b.n	8000d7a <_Z14user_spi_writehPKhm+0x2a>
    }

    PB6->GPIO_WriteToOutputPin(RESET);
 8000da0:	4b0c      	ldr	r3, [pc, #48]	; (8000dd4 <_Z14user_spi_writehPKhm+0x84>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	2100      	movs	r1, #0
 8000da6:	4618      	mov	r0, r3
 8000da8:	f001 fdaa 	bl	8002900 <_ZN12GPIO_Handler21GPIO_WriteToOutputPinEh>
    SPI1_Handler->SPI_SendData(&txBuffer[0], len + 1);
 8000dac:	4b0a      	ldr	r3, [pc, #40]	; (8000dd8 <_Z14user_spi_writehPKhm+0x88>)
 8000dae:	6818      	ldr	r0, [r3, #0]
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	1c5a      	adds	r2, r3, #1
 8000db4:	f107 0310 	add.w	r3, r7, #16
 8000db8:	4619      	mov	r1, r3
 8000dba:	f002 f835 	bl	8002e28 <_ZN11SPI_Handler12SPI_SendDataEPKhm>
    PB6->GPIO_WriteToOutputPin(SET);
 8000dbe:	4b05      	ldr	r3, [pc, #20]	; (8000dd4 <_Z14user_spi_writehPKhm+0x84>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	2101      	movs	r1, #1
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f001 fd9b 	bl	8002900 <_ZN12GPIO_Handler21GPIO_WriteToOutputPinEh>

    return 0;
 8000dca:	2300      	movs	r3, #0
}
 8000dcc:	4618      	mov	r0, r3
 8000dce:	3730      	adds	r7, #48	; 0x30
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	200001f0 	.word	0x200001f0
 8000dd8:	200001ec 	.word	0x200001ec

08000ddc <main>:
//    cout << fixed << setprecision(2) << temp << " deg C, " <<  pres << " hPa, " <<  hum << " % " << endl;
//#endif
//}

int main(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
    InitilizePeripheral();
 8000de0:	f000 f802 	bl	8000de8 <_Z19InitilizePeripheralv>
//
//
//
//    SPI1_Handler->SPI_PeripheralControl(DISABLE);
//    static_cast<void>(rslt);
    while(1);
 8000de4:	e7fe      	b.n	8000de4 <main+0x8>
	...

08000de8 <_Z19InitilizePeripheralv>:
    return 0;
}

void InitilizePeripheral(void) {
 8000de8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000dec:	b092      	sub	sp, #72	; 0x48
 8000dee:	af06      	add	r7, sp, #24
                                    SPI_BUS_CONFIG_FD,
                                    SPI_SCLK_SPEED_DIV32,
                                    SPI_DFF_8BITS,
                                    SPI_CPOL_LOW,
                                    SPI_CPHA_LOW,
                                    SPI_SSM_EN);
 8000df0:	2030      	movs	r0, #48	; 0x30
 8000df2:	f002 fc02 	bl	80035fa <_Znwj>
 8000df6:	4603      	mov	r3, r0
 8000df8:	461c      	mov	r4, r3
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	9304      	str	r3, [sp, #16]
 8000dfe:	2300      	movs	r3, #0
 8000e00:	9303      	str	r3, [sp, #12]
 8000e02:	2300      	movs	r3, #0
 8000e04:	9302      	str	r3, [sp, #8]
 8000e06:	2300      	movs	r3, #0
 8000e08:	9301      	str	r3, [sp, #4]
 8000e0a:	2304      	movs	r3, #4
 8000e0c:	9300      	str	r3, [sp, #0]
 8000e0e:	2301      	movs	r3, #1
 8000e10:	2201      	movs	r2, #1
 8000e12:	492c      	ldr	r1, [pc, #176]	; (8000ec4 <_Z19InitilizePeripheralv+0xdc>)
 8000e14:	4620      	mov	r0, r4
 8000e16:	f001 fe50 	bl	8002aba <_ZN11SPI_HandlerC1EP12SPI_RegDef_thhhhhhh>
    SPI1_Handler = new SPI_Handler(SPI1,
 8000e1a:	4b2b      	ldr	r3, [pc, #172]	; (8000ec8 <_Z19InitilizePeripheralv+0xe0>)
 8000e1c:	601c      	str	r4, [r3, #0]
    PB6 = new GPIO_Handler(GPIOB,
                           GPIO_PIN_NO_6,
                           GPIO_MODE_OUT,
                           GPIO_SPEED_FAST,
                           GPIO_OP_TYPE_PP,
                           GPIO_NO_PUPD);
 8000e1e:	200c      	movs	r0, #12
 8000e20:	f002 fbeb 	bl	80035fa <_Znwj>
 8000e24:	4603      	mov	r3, r0
 8000e26:	461c      	mov	r4, r3
 8000e28:	2300      	movs	r3, #0
 8000e2a:	9304      	str	r3, [sp, #16]
 8000e2c:	230f      	movs	r3, #15
 8000e2e:	9303      	str	r3, [sp, #12]
 8000e30:	2300      	movs	r3, #0
 8000e32:	9302      	str	r3, [sp, #8]
 8000e34:	2300      	movs	r3, #0
 8000e36:	9301      	str	r3, [sp, #4]
 8000e38:	2302      	movs	r3, #2
 8000e3a:	9300      	str	r3, [sp, #0]
 8000e3c:	2301      	movs	r3, #1
 8000e3e:	2206      	movs	r2, #6
 8000e40:	4922      	ldr	r1, [pc, #136]	; (8000ecc <_Z19InitilizePeripheralv+0xe4>)
 8000e42:	4620      	mov	r0, r4
 8000e44:	f001 fa8a 	bl	800235c <_ZN12GPIO_HandlerC1EP13GPIO_RegDef_thhhhhhh>
    PB6 = new GPIO_Handler(GPIOB,
 8000e48:	4b21      	ldr	r3, [pc, #132]	; (8000ed0 <_Z19InitilizePeripheralv+0xe8>)
 8000e4a:	601c      	str	r4, [r3, #0]
    PB6->GPIO_WriteToOutputPin(SET);
 8000e4c:	4b20      	ldr	r3, [pc, #128]	; (8000ed0 <_Z19InitilizePeripheralv+0xe8>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	2101      	movs	r1, #1
 8000e52:	4618      	mov	r0, r3
 8000e54:	f001 fd54 	bl	8002900 <_ZN12GPIO_Handler21GPIO_WriteToOutputPinEh>

    bme280 = new BMESensor_Handler(user_spi_read,
 8000e58:	463b      	mov	r3, r7
 8000e5a:	491e      	ldr	r1, [pc, #120]	; (8000ed4 <_Z19InitilizePeripheralv+0xec>)
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f000 f8af 	bl	8000fc0 <_ZNSt8functionIFhhPhmEEC1IPS1_vvEET_>
 8000e62:	463d      	mov	r5, r7
 8000e64:	f107 0310 	add.w	r3, r7, #16
 8000e68:	491b      	ldr	r1, [pc, #108]	; (8000ed8 <_Z19InitilizePeripheralv+0xf0>)
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f000 f8dc 	bl	8001028 <_ZNSt8functionIFhhPKhmEEC1IPS2_vvEET_>
 8000e70:	f107 0610 	add.w	r6, r7, #16
 8000e74:	f107 0320 	add.w	r3, r7, #32
 8000e78:	4918      	ldr	r1, [pc, #96]	; (8000edc <_Z19InitilizePeripheralv+0xf4>)
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f000 f908 	bl	8001090 <_ZNSt8functionIFvmEEC1IPS0_vvEET_>
 8000e80:	f107 0820 	add.w	r8, r7, #32
                                   user_spi_write,
                                   user_delay_us);
 8000e84:	2050      	movs	r0, #80	; 0x50
 8000e86:	f002 fbb8 	bl	80035fa <_Znwj>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	461c      	mov	r4, r3
 8000e8e:	4643      	mov	r3, r8
 8000e90:	4632      	mov	r2, r6
 8000e92:	4629      	mov	r1, r5
 8000e94:	4620      	mov	r0, r4
 8000e96:	f000 fe66 	bl	8001b66 <_ZN17BMESensor_HandlerC1ESt8functionIFhhPhmEES0_IFhhPKhmEES0_IFvmEE>
    bme280 = new BMESensor_Handler(user_spi_read,
 8000e9a:	4b11      	ldr	r3, [pc, #68]	; (8000ee0 <_Z19InitilizePeripheralv+0xf8>)
 8000e9c:	601c      	str	r4, [r3, #0]
 8000e9e:	f107 0320 	add.w	r3, r7, #32
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f7ff fea5 	bl	8000bf2 <_ZNSt8functionIFvmEED1Ev>
 8000ea8:	f107 0310 	add.w	r3, r7, #16
 8000eac:	4618      	mov	r0, r3
 8000eae:	f7ff fe93 	bl	8000bd8 <_ZNSt8functionIFhhPKhmEED1Ev>
 8000eb2:	463b      	mov	r3, r7
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f7ff fe82 	bl	8000bbe <_ZNSt8functionIFhhPhmEED1Ev>
}
 8000eba:	bf00      	nop
 8000ebc:	3730      	adds	r7, #48	; 0x30
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000ec4:	40013000 	.word	0x40013000
 8000ec8:	200001ec 	.word	0x200001ec
 8000ecc:	40020400 	.word	0x40020400
 8000ed0:	200001f0 	.word	0x200001f0
 8000ed4:	08000c35 	.word	0x08000c35
 8000ed8:	08000d51 	.word	0x08000d51
 8000edc:	08000c0d 	.word	0x08000c0d
 8000ee0:	200001f4 	.word	0x200001f4

08000ee4 <SPI1_IRQHandler>:

extern "C" {
    void SPI1_IRQHandler(void) {
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	af00      	add	r7, sp, #0
        // handle the interrupt
        SPI1_Handler->SPI_IRQHandling();
 8000ee8:	4b03      	ldr	r3, [pc, #12]	; (8000ef8 <SPI1_IRQHandler+0x14>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4618      	mov	r0, r3
 8000eee:	f002 f8bf 	bl	8003070 <_ZN11SPI_Handler15SPI_IRQHandlingEv>
    }
 8000ef2:	bf00      	nop
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	200001ec 	.word	0x200001ec

08000efc <_ZNSaIhEC1Ev>:
      typedef true_type propagate_on_container_move_assignment;

      typedef true_type is_always_equal;
#endif

      allocator() throw() { }
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
 8000f04:	6878      	ldr	r0, [r7, #4]
 8000f06:	f000 f8ed 	bl	80010e4 <_ZN9__gnu_cxx13new_allocatorIhEC1Ev>
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	3708      	adds	r7, #8
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}

08000f14 <_ZNSaIhED1Ev>:
      : __allocator_base<_Tp>(__a) { }

      template<typename _Tp1>
	allocator(const allocator<_Tp1>&) throw() { }

      ~allocator() throw() { }
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b082      	sub	sp, #8
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
 8000f1c:	6878      	ldr	r0, [r7, #4]
 8000f1e:	f000 f8eb 	bl	80010f8 <_ZN9__gnu_cxx13new_allocatorIhED1Ev>
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	4618      	mov	r0, r3
 8000f26:	3708      	adds	r7, #8
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}

08000f2c <_ZNSt6vectorIhSaIhEEC1EjRKhRKS0_>:
       *  @param  __value  An element to copy.
       *  @param  __a  An allocator.
       *
       *  This constructor fills the %vector with @a __n copies of @a __value.
       */
      vector(size_type __n, const value_type& __value,
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b084      	sub	sp, #16
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	60f8      	str	r0, [r7, #12]
 8000f34:	60b9      	str	r1, [r7, #8]
 8000f36:	607a      	str	r2, [r7, #4]
 8000f38:	603b      	str	r3, [r7, #0]
	     const allocator_type& __a = allocator_type())
      : _Base(__n, __a)
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	683a      	ldr	r2, [r7, #0]
 8000f3e:	68b9      	ldr	r1, [r7, #8]
 8000f40:	4618      	mov	r0, r3
 8000f42:	f000 f8ef 	bl	8001124 <_ZNSt12_Vector_baseIhSaIhEEC1EjRKS0_>
      { _M_fill_initialize(__n, __value); }
 8000f46:	687a      	ldr	r2, [r7, #4]
 8000f48:	68b9      	ldr	r1, [r7, #8]
 8000f4a:	68f8      	ldr	r0, [r7, #12]
 8000f4c:	f000 f917 	bl	800117e <_ZNSt6vectorIhSaIhEE18_M_fill_initializeEjRKh>
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	4618      	mov	r0, r3
 8000f54:	3710      	adds	r7, #16
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}

08000f5a <_ZNSt6vectorIhSaIhEED1Ev>:
       *  The dtor only erases the elements, and note that if the
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      ~vector() _GLIBCXX_NOEXCEPT
 8000f5a:	b5b0      	push	{r4, r5, r7, lr}
 8000f5c:	b082      	sub	sp, #8
 8000f5e:	af00      	add	r7, sp, #0
 8000f60:	6078      	str	r0, [r7, #4]
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681c      	ldr	r4, [r3, #0]
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator()); }
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f000 f91f 	bl	80011b0 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8000f72:	4603      	mov	r3, r0
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8000f74:	461a      	mov	r2, r3
 8000f76:	4629      	mov	r1, r5
 8000f78:	4620      	mov	r0, r4
 8000f7a:	f000 f923 	bl	80011c4 <_ZSt8_DestroyIPhhEvT_S1_RSaIT0_E>
		      _M_get_Tp_allocator()); }
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	4618      	mov	r0, r3
 8000f82:	f000 f8e3 	bl	800114c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	4618      	mov	r0, r3
 8000f8a:	3708      	adds	r7, #8
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bdb0      	pop	{r4, r5, r7, pc}

08000f90 <_ZNSt6vectorIhSaIhEEixEj>:
       *  Note that data access with this operator is unchecked and
       *  out_of_range lookups are not defined. (For checked lookups
       *  see at().)
       */
      reference
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 8000f90:	b480      	push	{r7}
 8000f92:	b083      	sub	sp, #12
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
 8000f98:	6039      	str	r1, [r7, #0]
      {
	__glibcxx_requires_subscript(__n);
	return *(this->_M_impl._M_start + __n);
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681a      	ldr	r2, [r3, #0]
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	4413      	add	r3, r2
      }
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	370c      	adds	r7, #12
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bc80      	pop	{r7}
 8000faa:	4770      	bx	lr

08000fac <_ZSt4moveIRPFhhPhmEEONSt16remove_referenceIT_E4typeEOS5_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8000fac:	b480      	push	{r7}
 8000fae:	b083      	sub	sp, #12
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	370c      	adds	r7, #12
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bc80      	pop	{r7}
 8000fbe:	4770      	bx	lr

08000fc0 <_ZNSt8functionIFhhPhmEEC1IPS1_vvEET_>:
	}
    }

  template<typename _Res, typename... _ArgTypes>
    template<typename _Functor, typename, typename>
      function<_Res(_ArgTypes...)>::
 8000fc0:	b590      	push	{r4, r7, lr}
 8000fc2:	b083      	sub	sp, #12
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
 8000fc8:	6039      	str	r1, [r7, #0]
      function(_Functor __f)
      : _Function_base()
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f7ff fdd6 	bl	8000b7e <_ZNSt14_Function_baseC1Ev>
      {
	typedef _Function_handler<_Res(_ArgTypes...), _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f000 f903 	bl	80011e0 <_ZNSt14_Function_base13_Base_managerIPFhhPhmEE21_M_not_empty_functionIS2_EEbPT_>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d00f      	beq.n	8001000 <_ZNSt8functionIFhhPhmEEC1IPS1_vvEET_+0x40>
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
 8000fe0:	687c      	ldr	r4, [r7, #4]
 8000fe2:	463b      	mov	r3, r7
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f7ff ffe1 	bl	8000fac <_ZSt4moveIRPFhhPhmEEONSt16remove_referenceIT_E4typeEOS5_>
 8000fea:	4603      	mov	r3, r0
 8000fec:	4619      	mov	r1, r3
 8000fee:	4620      	mov	r0, r4
 8000ff0:	f000 f905 	bl	80011fe <_ZNSt14_Function_base13_Base_managerIPFhhPhmEE15_M_init_functorERSt9_Any_dataOS3_>
	    _M_invoker = &_My_handler::_M_invoke;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	4a05      	ldr	r2, [pc, #20]	; (800100c <_ZNSt8functionIFhhPhmEEC1IPS1_vvEET_+0x4c>)
 8000ff8:	60da      	str	r2, [r3, #12]
	    _M_manager = &_My_handler::_M_manager;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	4a04      	ldr	r2, [pc, #16]	; (8001010 <_ZNSt8functionIFhhPhmEEC1IPS1_vvEET_+0x50>)
 8000ffe:	609a      	str	r2, [r3, #8]
	  }
      }
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	4618      	mov	r0, r3
 8001004:	370c      	adds	r7, #12
 8001006:	46bd      	mov	sp, r7
 8001008:	bd90      	pop	{r4, r7, pc}
 800100a:	bf00      	nop
 800100c:	08001223 	.word	0x08001223
 8001010:	0800126b 	.word	0x0800126b

08001014 <_ZSt4moveIRPFhhPKhmEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 8001014:	b480      	push	{r7}
 8001016:	b083      	sub	sp, #12
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	4618      	mov	r0, r3
 8001020:	370c      	adds	r7, #12
 8001022:	46bd      	mov	sp, r7
 8001024:	bc80      	pop	{r7}
 8001026:	4770      	bx	lr

08001028 <_ZNSt8functionIFhhPKhmEEC1IPS2_vvEET_>:
      function<_Res(_ArgTypes...)>::
 8001028:	b590      	push	{r4, r7, lr}
 800102a:	b083      	sub	sp, #12
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
 8001030:	6039      	str	r1, [r7, #0]
      : _Function_base()
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	4618      	mov	r0, r3
 8001036:	f7ff fda2 	bl	8000b7e <_ZNSt14_Function_baseC1Ev>
	if (_My_handler::_M_not_empty_function(__f))
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	4618      	mov	r0, r3
 800103e:	f000 f93c 	bl	80012ba <_ZNSt14_Function_base13_Base_managerIPFhhPKhmEE21_M_not_empty_functionIS3_EEbPT_>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	d00f      	beq.n	8001068 <_ZNSt8functionIFhhPKhmEEC1IPS2_vvEET_+0x40>
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
 8001048:	687c      	ldr	r4, [r7, #4]
 800104a:	463b      	mov	r3, r7
 800104c:	4618      	mov	r0, r3
 800104e:	f7ff ffe1 	bl	8001014 <_ZSt4moveIRPFhhPKhmEEONSt16remove_referenceIT_E4typeEOS6_>
 8001052:	4603      	mov	r3, r0
 8001054:	4619      	mov	r1, r3
 8001056:	4620      	mov	r0, r4
 8001058:	f000 f93e 	bl	80012d8 <_ZNSt14_Function_base13_Base_managerIPFhhPKhmEE15_M_init_functorERSt9_Any_dataOS4_>
	    _M_invoker = &_My_handler::_M_invoke;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	4a05      	ldr	r2, [pc, #20]	; (8001074 <_ZNSt8functionIFhhPKhmEEC1IPS2_vvEET_+0x4c>)
 8001060:	60da      	str	r2, [r3, #12]
	    _M_manager = &_My_handler::_M_manager;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	4a04      	ldr	r2, [pc, #16]	; (8001078 <_ZNSt8functionIFhhPKhmEEC1IPS2_vvEET_+0x50>)
 8001066:	609a      	str	r2, [r3, #8]
      }
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	4618      	mov	r0, r3
 800106c:	370c      	adds	r7, #12
 800106e:	46bd      	mov	sp, r7
 8001070:	bd90      	pop	{r4, r7, pc}
 8001072:	bf00      	nop
 8001074:	080012fd 	.word	0x080012fd
 8001078:	08001345 	.word	0x08001345

0800107c <_ZSt4moveIRPFvmEEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 800107c:	b480      	push	{r7}
 800107e:	b083      	sub	sp, #12
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	4618      	mov	r0, r3
 8001088:	370c      	adds	r7, #12
 800108a:	46bd      	mov	sp, r7
 800108c:	bc80      	pop	{r7}
 800108e:	4770      	bx	lr

08001090 <_ZNSt8functionIFvmEEC1IPS0_vvEET_>:
      function<_Res(_ArgTypes...)>::
 8001090:	b590      	push	{r4, r7, lr}
 8001092:	b083      	sub	sp, #12
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
 8001098:	6039      	str	r1, [r7, #0]
      : _Function_base()
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	4618      	mov	r0, r3
 800109e:	f7ff fd6e 	bl	8000b7e <_ZNSt14_Function_baseC1Ev>
	if (_My_handler::_M_not_empty_function(__f))
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	4618      	mov	r0, r3
 80010a6:	f000 f975 	bl	8001394 <_ZNSt14_Function_base13_Base_managerIPFvmEE21_M_not_empty_functionIS1_EEbPT_>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d00f      	beq.n	80010d0 <_ZNSt8functionIFvmEEC1IPS0_vvEET_+0x40>
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
 80010b0:	687c      	ldr	r4, [r7, #4]
 80010b2:	463b      	mov	r3, r7
 80010b4:	4618      	mov	r0, r3
 80010b6:	f7ff ffe1 	bl	800107c <_ZSt4moveIRPFvmEEONSt16remove_referenceIT_E4typeEOS4_>
 80010ba:	4603      	mov	r3, r0
 80010bc:	4619      	mov	r1, r3
 80010be:	4620      	mov	r0, r4
 80010c0:	f000 f977 	bl	80013b2 <_ZNSt14_Function_base13_Base_managerIPFvmEE15_M_init_functorERSt9_Any_dataOS2_>
	    _M_invoker = &_My_handler::_M_invoke;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	4a05      	ldr	r2, [pc, #20]	; (80010dc <_ZNSt8functionIFvmEEC1IPS0_vvEET_+0x4c>)
 80010c8:	60da      	str	r2, [r3, #12]
	    _M_manager = &_My_handler::_M_manager;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	4a04      	ldr	r2, [pc, #16]	; (80010e0 <_ZNSt8functionIFvmEEC1IPS0_vvEET_+0x50>)
 80010ce:	609a      	str	r2, [r3, #8]
      }
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	4618      	mov	r0, r3
 80010d4:	370c      	adds	r7, #12
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd90      	pop	{r4, r7, pc}
 80010da:	bf00      	nop
 80010dc:	080013d7 	.word	0x080013d7
 80010e0:	08001401 	.word	0x08001401

080010e4 <_ZN9__gnu_cxx13new_allocatorIhEC1Ev>:
      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 2103. propagate_on_container_move_assignment
      typedef std::true_type propagate_on_container_move_assignment;
#endif

      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80010e4:	b480      	push	{r7}
 80010e6:	b083      	sub	sp, #12
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	4618      	mov	r0, r3
 80010f0:	370c      	adds	r7, #12
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bc80      	pop	{r7}
 80010f6:	4770      	bx	lr

080010f8 <_ZN9__gnu_cxx13new_allocatorIhED1Ev>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }

      template<typename _Tp1>
	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80010f8:	b480      	push	{r7}
 80010fa:	b083      	sub	sp, #12
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	4618      	mov	r0, r3
 8001104:	370c      	adds	r7, #12
 8001106:	46bd      	mov	sp, r7
 8001108:	bc80      	pop	{r7}
 800110a:	4770      	bx	lr

0800110c <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implD1Ev>:
      struct _Vector_impl
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
 8001114:	6878      	ldr	r0, [r7, #4]
 8001116:	f7ff fefd 	bl	8000f14 <_ZNSaIhED1Ev>
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	4618      	mov	r0, r3
 800111e:	3708      	adds	r7, #8
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}

08001124 <_ZNSt12_Vector_baseIhSaIhEEC1EjRKS0_>:
      _Vector_base(size_t __n, const allocator_type& __a)
 8001124:	b580      	push	{r7, lr}
 8001126:	b084      	sub	sp, #16
 8001128:	af00      	add	r7, sp, #0
 800112a:	60f8      	str	r0, [r7, #12]
 800112c:	60b9      	str	r1, [r7, #8]
 800112e:	607a      	str	r2, [r7, #4]
      : _M_impl(__a)
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	6879      	ldr	r1, [r7, #4]
 8001134:	4618      	mov	r0, r3
 8001136:	f000 f98b 	bl	8001450 <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implC1ERKS0_>
      { _M_create_storage(__n); }
 800113a:	68b9      	ldr	r1, [r7, #8]
 800113c:	68f8      	ldr	r0, [r7, #12]
 800113e:	f000 f99e 	bl	800147e <_ZNSt12_Vector_baseIhSaIhEE17_M_create_storageEj>
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	4618      	mov	r0, r3
 8001146:	3710      	adds	r7, #16
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}

0800114c <_ZNSt12_Vector_baseIhSaIhEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	6819      	ldr	r1, [r3, #0]
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	689b      	ldr	r3, [r3, #8]
		      - this->_M_impl._M_start); }
 800115c:	461a      	mov	r2, r3
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	1ad3      	subs	r3, r2, r3
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 8001164:	461a      	mov	r2, r3
 8001166:	6878      	ldr	r0, [r7, #4]
 8001168:	f000 f9a3 	bl	80014b2 <_ZNSt12_Vector_baseIhSaIhEE13_M_deallocateEPhj>
		      - this->_M_impl._M_start); }
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	4618      	mov	r0, r3
 8001170:	f7ff ffcc 	bl	800110c <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implD1Ev>
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	4618      	mov	r0, r3
 8001178:	3708      	adds	r7, #8
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}

0800117e <_ZNSt6vectorIhSaIhEE18_M_fill_initializeEjRKh>:
	}

      // Called by the first initialize_dispatch above and by the
      // vector(n,value,a) constructor.
      void
      _M_fill_initialize(size_type __n, const value_type& __value)
 800117e:	b590      	push	{r4, r7, lr}
 8001180:	b085      	sub	sp, #20
 8001182:	af00      	add	r7, sp, #0
 8001184:	60f8      	str	r0, [r7, #12]
 8001186:	60b9      	str	r1, [r7, #8]
 8001188:	607a      	str	r2, [r7, #4]
      {
	this->_M_impl._M_finish =
	  std::__uninitialized_fill_n_a(this->_M_impl._M_start, __n, __value,
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	681c      	ldr	r4, [r3, #0]
					_M_get_Tp_allocator());
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	4618      	mov	r0, r3
 8001192:	f000 f80d 	bl	80011b0 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8001196:	4603      	mov	r3, r0
	  std::__uninitialized_fill_n_a(this->_M_impl._M_start, __n, __value,
 8001198:	687a      	ldr	r2, [r7, #4]
 800119a:	68b9      	ldr	r1, [r7, #8]
 800119c:	4620      	mov	r0, r4
 800119e:	f000 f99b 	bl	80014d8 <_ZSt24__uninitialized_fill_n_aIPhjhhET_S1_T0_RKT1_RSaIT2_E>
 80011a2:	4602      	mov	r2, r0
	this->_M_impl._M_finish =
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	605a      	str	r2, [r3, #4]
      }
 80011a8:	bf00      	nop
 80011aa:	3714      	adds	r7, #20
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd90      	pop	{r4, r7, pc}

080011b0 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 80011b0:	b480      	push	{r7}
 80011b2:	b083      	sub	sp, #12
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	4618      	mov	r0, r3
 80011bc:	370c      	adds	r7, #12
 80011be:	46bd      	mov	sp, r7
 80011c0:	bc80      	pop	{r7}
 80011c2:	4770      	bx	lr

080011c4 <_ZSt8_DestroyIPhhEvT_S1_RSaIT0_E>:
	__traits::destroy(__alloc, std::__addressof(*__first));
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b084      	sub	sp, #16
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	60f8      	str	r0, [r7, #12]
 80011cc:	60b9      	str	r1, [r7, #8]
 80011ce:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 80011d0:	68b9      	ldr	r1, [r7, #8]
 80011d2:	68f8      	ldr	r0, [r7, #12]
 80011d4:	f000 f991 	bl	80014fa <_ZSt8_DestroyIPhEvT_S1_>
    }
 80011d8:	bf00      	nop
 80011da:	3710      	adds	r7, #16
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}

080011e0 <_ZNSt14_Function_base13_Base_managerIPFhhPhmEE21_M_not_empty_functionIS2_EEbPT_>:
	  _M_not_empty_function(_Tp* __fp)
 80011e0:	b480      	push	{r7}
 80011e2:	b083      	sub	sp, #12
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
	  { return __fp != nullptr; }
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	bf14      	ite	ne
 80011ee:	2301      	movne	r3, #1
 80011f0:	2300      	moveq	r3, #0
 80011f2:	b2db      	uxtb	r3, r3
 80011f4:	4618      	mov	r0, r3
 80011f6:	370c      	adds	r7, #12
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bc80      	pop	{r7}
 80011fc:	4770      	bx	lr

080011fe <_ZNSt14_Function_base13_Base_managerIPFhhPhmEE15_M_init_functorERSt9_Any_dataOS3_>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f)
 80011fe:	b590      	push	{r4, r7, lr}
 8001200:	b085      	sub	sp, #20
 8001202:	af00      	add	r7, sp, #0
 8001204:	6078      	str	r0, [r7, #4]
 8001206:	6039      	str	r1, [r7, #0]
	{ _M_init_functor(__functor, std::move(__f), _Local_storage()); }
 8001208:	6838      	ldr	r0, [r7, #0]
 800120a:	f7ff fecf 	bl	8000fac <_ZSt4moveIRPFhhPhmEEONSt16remove_referenceIT_E4typeEOS5_>
 800120e:	4603      	mov	r3, r0
 8001210:	4622      	mov	r2, r4
 8001212:	4619      	mov	r1, r3
 8001214:	6878      	ldr	r0, [r7, #4]
 8001216:	f000 f97d 	bl	8001514 <_ZNSt14_Function_base13_Base_managerIPFhhPhmEE15_M_init_functorERSt9_Any_dataOS3_St17integral_constantIbLb1EE>
 800121a:	bf00      	nop
 800121c:	3714      	adds	r7, #20
 800121e:	46bd      	mov	sp, r7
 8001220:	bd90      	pop	{r4, r7, pc}

08001222 <_ZNSt17_Function_handlerIFhhPhmEPS1_E9_M_invokeERKSt9_Any_dataOhOS0_Om>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8001222:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001224:	b085      	sub	sp, #20
 8001226:	af00      	add	r7, sp, #0
 8001228:	60f8      	str	r0, [r7, #12]
 800122a:	60b9      	str	r1, [r7, #8]
 800122c:	607a      	str	r2, [r7, #4]
 800122e:	603b      	str	r3, [r7, #0]
	return (*_Base::_M_get_pointer(__functor))(
 8001230:	68f8      	ldr	r0, [r7, #12]
 8001232:	f000 f98a 	bl	800154a <_ZNSt14_Function_base13_Base_managerIPFhhPhmEE14_M_get_pointerERKSt9_Any_data>
 8001236:	4603      	mov	r3, r0
 8001238:	681c      	ldr	r4, [r3, #0]
	    std::forward<_ArgTypes>(__args)...);
 800123a:	68b8      	ldr	r0, [r7, #8]
 800123c:	f000 f996 	bl	800156c <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 8001240:	4603      	mov	r3, r0
	return (*_Base::_M_get_pointer(__functor))(
 8001242:	781d      	ldrb	r5, [r3, #0]
	    std::forward<_ArgTypes>(__args)...);
 8001244:	6878      	ldr	r0, [r7, #4]
 8001246:	f000 f99b 	bl	8001580 <_ZSt7forwardIPhEOT_RNSt16remove_referenceIS1_E4typeE>
 800124a:	4603      	mov	r3, r0
	return (*_Base::_M_get_pointer(__functor))(
 800124c:	681e      	ldr	r6, [r3, #0]
	    std::forward<_ArgTypes>(__args)...);
 800124e:	6838      	ldr	r0, [r7, #0]
 8001250:	f000 f9a0 	bl	8001594 <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
 8001254:	4603      	mov	r3, r0
	return (*_Base::_M_get_pointer(__functor))(
 8001256:	681b      	ldr	r3, [r3, #0]
	    std::forward<_ArgTypes>(__args)...);
 8001258:	461a      	mov	r2, r3
 800125a:	4631      	mov	r1, r6
 800125c:	4628      	mov	r0, r5
 800125e:	47a0      	blx	r4
 8001260:	4603      	mov	r3, r0
      }
 8001262:	4618      	mov	r0, r3
 8001264:	3714      	adds	r7, #20
 8001266:	46bd      	mov	sp, r7
 8001268:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800126a <_ZNSt14_Function_base13_Base_managerIPFhhPhmEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 800126a:	b5b0      	push	{r4, r5, r7, lr}
 800126c:	b086      	sub	sp, #24
 800126e:	af00      	add	r7, sp, #0
 8001270:	60f8      	str	r0, [r7, #12]
 8001272:	60b9      	str	r1, [r7, #8]
 8001274:	4613      	mov	r3, r2
 8001276:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 8001278:	79fb      	ldrb	r3, [r7, #7]
 800127a:	2b02      	cmp	r3, #2
 800127c:	d00d      	beq.n	800129a <_ZNSt14_Function_base13_Base_managerIPFhhPhmEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x30>
 800127e:	2b03      	cmp	r3, #3
 8001280:	d011      	beq.n	80012a6 <_ZNSt14_Function_base13_Base_managerIPFhhPhmEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x3c>
 8001282:	2b01      	cmp	r3, #1
 8001284:	d114      	bne.n	80012b0 <_ZNSt14_Function_base13_Base_managerIPFhhPhmEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x46>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8001286:	68f8      	ldr	r0, [r7, #12]
 8001288:	f000 f98e 	bl	80015a8 <_ZNSt9_Any_data9_M_accessIPPFhhPhmEEERT_v>
 800128c:	4604      	mov	r4, r0
 800128e:	68b8      	ldr	r0, [r7, #8]
 8001290:	f000 f95b 	bl	800154a <_ZNSt14_Function_base13_Base_managerIPFhhPhmEE14_M_get_pointerERKSt9_Any_data>
 8001294:	4603      	mov	r3, r0
 8001296:	6023      	str	r3, [r4, #0]
	      break;
 8001298:	e00a      	b.n	80012b0 <_ZNSt14_Function_base13_Base_managerIPFhhPhmEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x46>
	      _M_clone(__dest, __source, _Local_storage());
 800129a:	462a      	mov	r2, r5
 800129c:	68b9      	ldr	r1, [r7, #8]
 800129e:	68f8      	ldr	r0, [r7, #12]
 80012a0:	f000 f98e 	bl	80015c0 <_ZNSt14_Function_base13_Base_managerIPFhhPhmEE8_M_cloneERSt9_Any_dataRKS5_St17integral_constantIbLb1EE>
	      break;
 80012a4:	e004      	b.n	80012b0 <_ZNSt14_Function_base13_Base_managerIPFhhPhmEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x46>
	      _M_destroy(__dest, _Local_storage());
 80012a6:	4621      	mov	r1, r4
 80012a8:	68f8      	ldr	r0, [r7, #12]
 80012aa:	f000 f9a4 	bl	80015f6 <_ZNSt14_Function_base13_Base_managerIPFhhPhmEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 80012ae:	bf00      	nop
	  return false;
 80012b0:	2300      	movs	r3, #0
	}
 80012b2:	4618      	mov	r0, r3
 80012b4:	3718      	adds	r7, #24
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bdb0      	pop	{r4, r5, r7, pc}

080012ba <_ZNSt14_Function_base13_Base_managerIPFhhPKhmEE21_M_not_empty_functionIS3_EEbPT_>:
	  _M_not_empty_function(_Tp* __fp)
 80012ba:	b480      	push	{r7}
 80012bc:	b083      	sub	sp, #12
 80012be:	af00      	add	r7, sp, #0
 80012c0:	6078      	str	r0, [r7, #4]
	  { return __fp != nullptr; }
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	bf14      	ite	ne
 80012c8:	2301      	movne	r3, #1
 80012ca:	2300      	moveq	r3, #0
 80012cc:	b2db      	uxtb	r3, r3
 80012ce:	4618      	mov	r0, r3
 80012d0:	370c      	adds	r7, #12
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bc80      	pop	{r7}
 80012d6:	4770      	bx	lr

080012d8 <_ZNSt14_Function_base13_Base_managerIPFhhPKhmEE15_M_init_functorERSt9_Any_dataOS4_>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f)
 80012d8:	b590      	push	{r4, r7, lr}
 80012da:	b085      	sub	sp, #20
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
 80012e0:	6039      	str	r1, [r7, #0]
	{ _M_init_functor(__functor, std::move(__f), _Local_storage()); }
 80012e2:	6838      	ldr	r0, [r7, #0]
 80012e4:	f7ff fe96 	bl	8001014 <_ZSt4moveIRPFhhPKhmEEONSt16remove_referenceIT_E4typeEOS6_>
 80012e8:	4603      	mov	r3, r0
 80012ea:	4622      	mov	r2, r4
 80012ec:	4619      	mov	r1, r3
 80012ee:	6878      	ldr	r0, [r7, #4]
 80012f0:	f000 f98d 	bl	800160e <_ZNSt14_Function_base13_Base_managerIPFhhPKhmEE15_M_init_functorERSt9_Any_dataOS4_St17integral_constantIbLb1EE>
 80012f4:	bf00      	nop
 80012f6:	3714      	adds	r7, #20
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd90      	pop	{r4, r7, pc}

080012fc <_ZNSt17_Function_handlerIFhhPKhmEPS2_E9_M_invokeERKSt9_Any_dataOhOS1_Om>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80012fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012fe:	b085      	sub	sp, #20
 8001300:	af00      	add	r7, sp, #0
 8001302:	60f8      	str	r0, [r7, #12]
 8001304:	60b9      	str	r1, [r7, #8]
 8001306:	607a      	str	r2, [r7, #4]
 8001308:	603b      	str	r3, [r7, #0]
	return (*_Base::_M_get_pointer(__functor))(
 800130a:	68f8      	ldr	r0, [r7, #12]
 800130c:	f000 f99a 	bl	8001644 <_ZNSt14_Function_base13_Base_managerIPFhhPKhmEE14_M_get_pointerERKSt9_Any_data>
 8001310:	4603      	mov	r3, r0
 8001312:	681c      	ldr	r4, [r3, #0]
	    std::forward<_ArgTypes>(__args)...);
 8001314:	68b8      	ldr	r0, [r7, #8]
 8001316:	f000 f929 	bl	800156c <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 800131a:	4603      	mov	r3, r0
	return (*_Base::_M_get_pointer(__functor))(
 800131c:	781d      	ldrb	r5, [r3, #0]
	    std::forward<_ArgTypes>(__args)...);
 800131e:	6878      	ldr	r0, [r7, #4]
 8001320:	f000 f9a1 	bl	8001666 <_ZSt7forwardIPKhEOT_RNSt16remove_referenceIS2_E4typeE>
 8001324:	4603      	mov	r3, r0
	return (*_Base::_M_get_pointer(__functor))(
 8001326:	681e      	ldr	r6, [r3, #0]
	    std::forward<_ArgTypes>(__args)...);
 8001328:	6838      	ldr	r0, [r7, #0]
 800132a:	f000 f933 	bl	8001594 <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
 800132e:	4603      	mov	r3, r0
	return (*_Base::_M_get_pointer(__functor))(
 8001330:	681b      	ldr	r3, [r3, #0]
	    std::forward<_ArgTypes>(__args)...);
 8001332:	461a      	mov	r2, r3
 8001334:	4631      	mov	r1, r6
 8001336:	4628      	mov	r0, r5
 8001338:	47a0      	blx	r4
 800133a:	4603      	mov	r3, r0
      }
 800133c:	4618      	mov	r0, r3
 800133e:	3714      	adds	r7, #20
 8001340:	46bd      	mov	sp, r7
 8001342:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001344 <_ZNSt14_Function_base13_Base_managerIPFhhPKhmEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8001344:	b5b0      	push	{r4, r5, r7, lr}
 8001346:	b086      	sub	sp, #24
 8001348:	af00      	add	r7, sp, #0
 800134a:	60f8      	str	r0, [r7, #12]
 800134c:	60b9      	str	r1, [r7, #8]
 800134e:	4613      	mov	r3, r2
 8001350:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 8001352:	79fb      	ldrb	r3, [r7, #7]
 8001354:	2b02      	cmp	r3, #2
 8001356:	d00d      	beq.n	8001374 <_ZNSt14_Function_base13_Base_managerIPFhhPKhmEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x30>
 8001358:	2b03      	cmp	r3, #3
 800135a:	d011      	beq.n	8001380 <_ZNSt14_Function_base13_Base_managerIPFhhPKhmEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x3c>
 800135c:	2b01      	cmp	r3, #1
 800135e:	d114      	bne.n	800138a <_ZNSt14_Function_base13_Base_managerIPFhhPKhmEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x46>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8001360:	68f8      	ldr	r0, [r7, #12]
 8001362:	f000 f98a 	bl	800167a <_ZNSt9_Any_data9_M_accessIPPFhhPKhmEEERT_v>
 8001366:	4604      	mov	r4, r0
 8001368:	68b8      	ldr	r0, [r7, #8]
 800136a:	f000 f96b 	bl	8001644 <_ZNSt14_Function_base13_Base_managerIPFhhPKhmEE14_M_get_pointerERKSt9_Any_data>
 800136e:	4603      	mov	r3, r0
 8001370:	6023      	str	r3, [r4, #0]
	      break;
 8001372:	e00a      	b.n	800138a <_ZNSt14_Function_base13_Base_managerIPFhhPKhmEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x46>
	      _M_clone(__dest, __source, _Local_storage());
 8001374:	462a      	mov	r2, r5
 8001376:	68b9      	ldr	r1, [r7, #8]
 8001378:	68f8      	ldr	r0, [r7, #12]
 800137a:	f000 f98a 	bl	8001692 <_ZNSt14_Function_base13_Base_managerIPFhhPKhmEE8_M_cloneERSt9_Any_dataRKS6_St17integral_constantIbLb1EE>
	      break;
 800137e:	e004      	b.n	800138a <_ZNSt14_Function_base13_Base_managerIPFhhPKhmEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x46>
	      _M_destroy(__dest, _Local_storage());
 8001380:	4621      	mov	r1, r4
 8001382:	68f8      	ldr	r0, [r7, #12]
 8001384:	f000 f9a0 	bl	80016c8 <_ZNSt14_Function_base13_Base_managerIPFhhPKhmEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 8001388:	bf00      	nop
	  return false;
 800138a:	2300      	movs	r3, #0
	}
 800138c:	4618      	mov	r0, r3
 800138e:	3718      	adds	r7, #24
 8001390:	46bd      	mov	sp, r7
 8001392:	bdb0      	pop	{r4, r5, r7, pc}

08001394 <_ZNSt14_Function_base13_Base_managerIPFvmEE21_M_not_empty_functionIS1_EEbPT_>:
	  _M_not_empty_function(_Tp* __fp)
 8001394:	b480      	push	{r7}
 8001396:	b083      	sub	sp, #12
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
	  { return __fp != nullptr; }
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	bf14      	ite	ne
 80013a2:	2301      	movne	r3, #1
 80013a4:	2300      	moveq	r3, #0
 80013a6:	b2db      	uxtb	r3, r3
 80013a8:	4618      	mov	r0, r3
 80013aa:	370c      	adds	r7, #12
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bc80      	pop	{r7}
 80013b0:	4770      	bx	lr

080013b2 <_ZNSt14_Function_base13_Base_managerIPFvmEE15_M_init_functorERSt9_Any_dataOS2_>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f)
 80013b2:	b590      	push	{r4, r7, lr}
 80013b4:	b085      	sub	sp, #20
 80013b6:	af00      	add	r7, sp, #0
 80013b8:	6078      	str	r0, [r7, #4]
 80013ba:	6039      	str	r1, [r7, #0]
	{ _M_init_functor(__functor, std::move(__f), _Local_storage()); }
 80013bc:	6838      	ldr	r0, [r7, #0]
 80013be:	f7ff fe5d 	bl	800107c <_ZSt4moveIRPFvmEEONSt16remove_referenceIT_E4typeEOS4_>
 80013c2:	4603      	mov	r3, r0
 80013c4:	4622      	mov	r2, r4
 80013c6:	4619      	mov	r1, r3
 80013c8:	6878      	ldr	r0, [r7, #4]
 80013ca:	f000 f989 	bl	80016e0 <_ZNSt14_Function_base13_Base_managerIPFvmEE15_M_init_functorERSt9_Any_dataOS2_St17integral_constantIbLb1EE>
 80013ce:	bf00      	nop
 80013d0:	3714      	adds	r7, #20
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd90      	pop	{r4, r7, pc}

080013d6 <_ZNSt17_Function_handlerIFvmEPS0_E9_M_invokeERKSt9_Any_dataOm>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80013d6:	b590      	push	{r4, r7, lr}
 80013d8:	b083      	sub	sp, #12
 80013da:	af00      	add	r7, sp, #0
 80013dc:	6078      	str	r0, [r7, #4]
 80013de:	6039      	str	r1, [r7, #0]
	(*_Base::_M_get_pointer(__functor))(
 80013e0:	6878      	ldr	r0, [r7, #4]
 80013e2:	f000 f998 	bl	8001716 <_ZNSt14_Function_base13_Base_managerIPFvmEE14_M_get_pointerERKSt9_Any_data>
 80013e6:	4603      	mov	r3, r0
 80013e8:	681c      	ldr	r4, [r3, #0]
	    std::forward<_ArgTypes>(__args)...);
 80013ea:	6838      	ldr	r0, [r7, #0]
 80013ec:	f000 f8d2 	bl	8001594 <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
 80013f0:	4603      	mov	r3, r0
	(*_Base::_M_get_pointer(__functor))(
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4618      	mov	r0, r3
 80013f6:	47a0      	blx	r4
      }
 80013f8:	bf00      	nop
 80013fa:	370c      	adds	r7, #12
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd90      	pop	{r4, r7, pc}

08001400 <_ZNSt14_Function_base13_Base_managerIPFvmEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8001400:	b5b0      	push	{r4, r5, r7, lr}
 8001402:	b086      	sub	sp, #24
 8001404:	af00      	add	r7, sp, #0
 8001406:	60f8      	str	r0, [r7, #12]
 8001408:	60b9      	str	r1, [r7, #8]
 800140a:	4613      	mov	r3, r2
 800140c:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 800140e:	79fb      	ldrb	r3, [r7, #7]
 8001410:	2b02      	cmp	r3, #2
 8001412:	d00d      	beq.n	8001430 <_ZNSt14_Function_base13_Base_managerIPFvmEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x30>
 8001414:	2b03      	cmp	r3, #3
 8001416:	d011      	beq.n	800143c <_ZNSt14_Function_base13_Base_managerIPFvmEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x3c>
 8001418:	2b01      	cmp	r3, #1
 800141a:	d114      	bne.n	8001446 <_ZNSt14_Function_base13_Base_managerIPFvmEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x46>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 800141c:	68f8      	ldr	r0, [r7, #12]
 800141e:	f000 f98b 	bl	8001738 <_ZNSt9_Any_data9_M_accessIPPFvmEEERT_v>
 8001422:	4604      	mov	r4, r0
 8001424:	68b8      	ldr	r0, [r7, #8]
 8001426:	f000 f976 	bl	8001716 <_ZNSt14_Function_base13_Base_managerIPFvmEE14_M_get_pointerERKSt9_Any_data>
 800142a:	4603      	mov	r3, r0
 800142c:	6023      	str	r3, [r4, #0]
	      break;
 800142e:	e00a      	b.n	8001446 <_ZNSt14_Function_base13_Base_managerIPFvmEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x46>
	      _M_clone(__dest, __source, _Local_storage());
 8001430:	462a      	mov	r2, r5
 8001432:	68b9      	ldr	r1, [r7, #8]
 8001434:	68f8      	ldr	r0, [r7, #12]
 8001436:	f000 f98b 	bl	8001750 <_ZNSt14_Function_base13_Base_managerIPFvmEE8_M_cloneERSt9_Any_dataRKS4_St17integral_constantIbLb1EE>
	      break;
 800143a:	e004      	b.n	8001446 <_ZNSt14_Function_base13_Base_managerIPFvmEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x46>
	      _M_destroy(__dest, _Local_storage());
 800143c:	4621      	mov	r1, r4
 800143e:	68f8      	ldr	r0, [r7, #12]
 8001440:	f000 f9a1 	bl	8001786 <_ZNSt14_Function_base13_Base_managerIPFvmEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 8001444:	bf00      	nop
	  return false;
 8001446:	2300      	movs	r3, #0
	}
 8001448:	4618      	mov	r0, r3
 800144a:	3718      	adds	r7, #24
 800144c:	46bd      	mov	sp, r7
 800144e:	bdb0      	pop	{r4, r5, r7, pc}

08001450 <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implC1ERKS0_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
 8001450:	b580      	push	{r7, lr}
 8001452:	b082      	sub	sp, #8
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
 8001458:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(__a), _M_start(), _M_finish(), _M_end_of_storage()
 800145a:	6839      	ldr	r1, [r7, #0]
 800145c:	6878      	ldr	r0, [r7, #4]
 800145e:	f000 f99e 	bl	800179e <_ZNSaIhEC1ERKS_>
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	2200      	movs	r2, #0
 8001466:	601a      	str	r2, [r3, #0]
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2200      	movs	r2, #0
 800146c:	605a      	str	r2, [r3, #4]
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	2200      	movs	r2, #0
 8001472:	609a      	str	r2, [r3, #8]
	{ }
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	4618      	mov	r0, r3
 8001478:	3708      	adds	r7, #8
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}

0800147e <_ZNSt12_Vector_baseIhSaIhEE17_M_create_storageEj>:
      _M_create_storage(size_t __n)
 800147e:	b580      	push	{r7, lr}
 8001480:	b082      	sub	sp, #8
 8001482:	af00      	add	r7, sp, #0
 8001484:	6078      	str	r0, [r7, #4]
 8001486:	6039      	str	r1, [r7, #0]
	this->_M_impl._M_start = this->_M_allocate(__n);
 8001488:	6839      	ldr	r1, [r7, #0]
 800148a:	6878      	ldr	r0, [r7, #4]
 800148c:	f000 f995 	bl	80017ba <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj>
 8001490:	4602      	mov	r2, r0
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	601a      	str	r2, [r3, #0]
	this->_M_impl._M_finish = this->_M_impl._M_start;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681a      	ldr	r2, [r3, #0]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	605a      	str	r2, [r3, #4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681a      	ldr	r2, [r3, #0]
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	441a      	add	r2, r3
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	609a      	str	r2, [r3, #8]
      }
 80014aa:	bf00      	nop
 80014ac:	3708      	adds	r7, #8
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}

080014b2 <_ZNSt12_Vector_baseIhSaIhEE13_M_deallocateEPhj>:
      _M_deallocate(pointer __p, size_t __n)
 80014b2:	b580      	push	{r7, lr}
 80014b4:	b084      	sub	sp, #16
 80014b6:	af00      	add	r7, sp, #0
 80014b8:	60f8      	str	r0, [r7, #12]
 80014ba:	60b9      	str	r1, [r7, #8]
 80014bc:	607a      	str	r2, [r7, #4]
	if (__p)
 80014be:	68bb      	ldr	r3, [r7, #8]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d005      	beq.n	80014d0 <_ZNSt12_Vector_baseIhSaIhEE13_M_deallocateEPhj+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	687a      	ldr	r2, [r7, #4]
 80014c8:	68b9      	ldr	r1, [r7, #8]
 80014ca:	4618      	mov	r0, r3
 80014cc:	f000 f989 	bl	80017e2 <_ZNSt16allocator_traitsISaIhEE10deallocateERS0_Phj>
      }
 80014d0:	bf00      	nop
 80014d2:	3710      	adds	r7, #16
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}

080014d8 <_ZSt24__uninitialized_fill_n_aIPhjhhET_S1_T0_RKT1_RSaIT2_E>:
    }

  template<typename _ForwardIterator, typename _Size, typename _Tp,
	   typename _Tp2>
    inline _ForwardIterator
    __uninitialized_fill_n_a(_ForwardIterator __first, _Size __n, 
 80014d8:	b580      	push	{r7, lr}
 80014da:	b084      	sub	sp, #16
 80014dc:	af00      	add	r7, sp, #0
 80014de:	60f8      	str	r0, [r7, #12]
 80014e0:	60b9      	str	r1, [r7, #8]
 80014e2:	607a      	str	r2, [r7, #4]
 80014e4:	603b      	str	r3, [r7, #0]
			     const _Tp& __x, allocator<_Tp2>&)
    { return std::uninitialized_fill_n(__first, __n, __x); }
 80014e6:	687a      	ldr	r2, [r7, #4]
 80014e8:	68b9      	ldr	r1, [r7, #8]
 80014ea:	68f8      	ldr	r0, [r7, #12]
 80014ec:	f000 f988 	bl	8001800 <_ZSt20uninitialized_fill_nIPhjhET_S1_T0_RKT1_>
 80014f0:	4603      	mov	r3, r0
 80014f2:	4618      	mov	r0, r3
 80014f4:	3710      	adds	r7, #16
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}

080014fa <_ZSt8_DestroyIPhEvT_S1_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 80014fa:	b580      	push	{r7, lr}
 80014fc:	b082      	sub	sp, #8
 80014fe:	af00      	add	r7, sp, #0
 8001500:	6078      	str	r0, [r7, #4]
 8001502:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 8001504:	6839      	ldr	r1, [r7, #0]
 8001506:	6878      	ldr	r0, [r7, #4]
 8001508:	f000 f98c 	bl	8001824 <_ZNSt12_Destroy_auxILb1EE9__destroyIPhEEvT_S3_>
    }
 800150c:	bf00      	nop
 800150e:	3708      	adds	r7, #8
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}

08001514 <_ZNSt14_Function_base13_Base_managerIPFhhPhmEE15_M_init_functorERSt9_Any_dataOS3_St17integral_constantIbLb1EE>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
 8001514:	b590      	push	{r4, r7, lr}
 8001516:	b085      	sub	sp, #20
 8001518:	af00      	add	r7, sp, #0
 800151a:	60f8      	str	r0, [r7, #12]
 800151c:	60b9      	str	r1, [r7, #8]
 800151e:	713a      	strb	r2, [r7, #4]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 8001520:	68b8      	ldr	r0, [r7, #8]
 8001522:	f7ff fd43 	bl	8000fac <_ZSt4moveIRPFhhPhmEEONSt16remove_referenceIT_E4typeEOS5_>
 8001526:	4603      	mov	r3, r0
 8001528:	681c      	ldr	r4, [r3, #0]
 800152a:	68f8      	ldr	r0, [r7, #12]
 800152c:	f7ff fb13 	bl	8000b56 <_ZNSt9_Any_data9_M_accessEv>
 8001530:	4603      	mov	r3, r0
 8001532:	4619      	mov	r1, r3
 8001534:	2004      	movs	r0, #4
 8001536:	f7ff fb03 	bl	8000b40 <_ZnwjPv>
 800153a:	4603      	mov	r3, r0
 800153c:	2b00      	cmp	r3, #0
 800153e:	d000      	beq.n	8001542 <_ZNSt14_Function_base13_Base_managerIPFhhPhmEE15_M_init_functorERSt9_Any_dataOS3_St17integral_constantIbLb1EE+0x2e>
 8001540:	601c      	str	r4, [r3, #0]
 8001542:	bf00      	nop
 8001544:	3714      	adds	r7, #20
 8001546:	46bd      	mov	sp, r7
 8001548:	bd90      	pop	{r4, r7, pc}

0800154a <_ZNSt14_Function_base13_Base_managerIPFhhPhmEE14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
 800154a:	b580      	push	{r7, lr}
 800154c:	b084      	sub	sp, #16
 800154e:	af00      	add	r7, sp, #0
 8001550:	6078      	str	r0, [r7, #4]
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
 8001552:	6878      	ldr	r0, [r7, #4]
 8001554:	f000 f970 	bl	8001838 <_ZNKSt9_Any_data9_M_accessIPFhhPhmEEERKT_v>
 8001558:	4603      	mov	r3, r0
	  const _Functor* __ptr =
 800155a:	4618      	mov	r0, r3
 800155c:	f000 f978 	bl	8001850 <_ZSt11__addressofIKPFhhPhmEEPT_RS4_>
 8001560:	60f8      	str	r0, [r7, #12]
	  return const_cast<_Functor*>(__ptr);
 8001562:	68fb      	ldr	r3, [r7, #12]
	}
 8001564:	4618      	mov	r0, r3
 8001566:	3710      	adds	r7, #16
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}

0800156c <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800156c:	b480      	push	{r7}
 800156e:	b083      	sub	sp, #12
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	4618      	mov	r0, r3
 8001578:	370c      	adds	r7, #12
 800157a:	46bd      	mov	sp, r7
 800157c:	bc80      	pop	{r7}
 800157e:	4770      	bx	lr

08001580 <_ZSt7forwardIPhEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8001580:	b480      	push	{r7}
 8001582:	b083      	sub	sp, #12
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	4618      	mov	r0, r3
 800158c:	370c      	adds	r7, #12
 800158e:	46bd      	mov	sp, r7
 8001590:	bc80      	pop	{r7}
 8001592:	4770      	bx	lr

08001594 <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8001594:	b480      	push	{r7}
 8001596:	b083      	sub	sp, #12
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	4618      	mov	r0, r3
 80015a0:	370c      	adds	r7, #12
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bc80      	pop	{r7}
 80015a6:	4770      	bx	lr

080015a8 <_ZNSt9_Any_data9_M_accessIPPFhhPhmEEERT_v>:
      _M_access()
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b082      	sub	sp, #8
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 80015b0:	6878      	ldr	r0, [r7, #4]
 80015b2:	f7ff fad0 	bl	8000b56 <_ZNSt9_Any_data9_M_accessEv>
 80015b6:	4603      	mov	r3, r0
 80015b8:	4618      	mov	r0, r3
 80015ba:	3708      	adds	r7, #8
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}

080015c0 <_ZNSt14_Function_base13_Base_managerIPFhhPhmEE8_M_cloneERSt9_Any_dataRKS5_St17integral_constantIbLb1EE>:
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
 80015c0:	b590      	push	{r4, r7, lr}
 80015c2:	b085      	sub	sp, #20
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	60f8      	str	r0, [r7, #12]
 80015c8:	60b9      	str	r1, [r7, #8]
 80015ca:	713a      	strb	r2, [r7, #4]
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 80015cc:	68b8      	ldr	r0, [r7, #8]
 80015ce:	f000 f933 	bl	8001838 <_ZNKSt9_Any_data9_M_accessIPFhhPhmEEERKT_v>
 80015d2:	4603      	mov	r3, r0
 80015d4:	681c      	ldr	r4, [r3, #0]
 80015d6:	68f8      	ldr	r0, [r7, #12]
 80015d8:	f7ff fabd 	bl	8000b56 <_ZNSt9_Any_data9_M_accessEv>
 80015dc:	4603      	mov	r3, r0
 80015de:	4619      	mov	r1, r3
 80015e0:	2004      	movs	r0, #4
 80015e2:	f7ff faad 	bl	8000b40 <_ZnwjPv>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d000      	beq.n	80015ee <_ZNSt14_Function_base13_Base_managerIPFhhPhmEE8_M_cloneERSt9_Any_dataRKS5_St17integral_constantIbLb1EE+0x2e>
 80015ec:	601c      	str	r4, [r3, #0]
	}
 80015ee:	bf00      	nop
 80015f0:	3714      	adds	r7, #20
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd90      	pop	{r4, r7, pc}

080015f6 <_ZNSt14_Function_base13_Base_managerIPFhhPhmEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 80015f6:	b580      	push	{r7, lr}
 80015f8:	b082      	sub	sp, #8
 80015fa:	af00      	add	r7, sp, #0
 80015fc:	6078      	str	r0, [r7, #4]
 80015fe:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 8001600:	6878      	ldr	r0, [r7, #4]
 8001602:	f000 f92f 	bl	8001864 <_ZNSt9_Any_data9_M_accessIPFhhPhmEEERT_v>
	}
 8001606:	bf00      	nop
 8001608:	3708      	adds	r7, #8
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}

0800160e <_ZNSt14_Function_base13_Base_managerIPFhhPKhmEE15_M_init_functorERSt9_Any_dataOS4_St17integral_constantIbLb1EE>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
 800160e:	b590      	push	{r4, r7, lr}
 8001610:	b085      	sub	sp, #20
 8001612:	af00      	add	r7, sp, #0
 8001614:	60f8      	str	r0, [r7, #12]
 8001616:	60b9      	str	r1, [r7, #8]
 8001618:	713a      	strb	r2, [r7, #4]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 800161a:	68b8      	ldr	r0, [r7, #8]
 800161c:	f7ff fcfa 	bl	8001014 <_ZSt4moveIRPFhhPKhmEEONSt16remove_referenceIT_E4typeEOS6_>
 8001620:	4603      	mov	r3, r0
 8001622:	681c      	ldr	r4, [r3, #0]
 8001624:	68f8      	ldr	r0, [r7, #12]
 8001626:	f7ff fa96 	bl	8000b56 <_ZNSt9_Any_data9_M_accessEv>
 800162a:	4603      	mov	r3, r0
 800162c:	4619      	mov	r1, r3
 800162e:	2004      	movs	r0, #4
 8001630:	f7ff fa86 	bl	8000b40 <_ZnwjPv>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d000      	beq.n	800163c <_ZNSt14_Function_base13_Base_managerIPFhhPKhmEE15_M_init_functorERSt9_Any_dataOS4_St17integral_constantIbLb1EE+0x2e>
 800163a:	601c      	str	r4, [r3, #0]
 800163c:	bf00      	nop
 800163e:	3714      	adds	r7, #20
 8001640:	46bd      	mov	sp, r7
 8001642:	bd90      	pop	{r4, r7, pc}

08001644 <_ZNSt14_Function_base13_Base_managerIPFhhPKhmEE14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
 8001644:	b580      	push	{r7, lr}
 8001646:	b084      	sub	sp, #16
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
 800164c:	6878      	ldr	r0, [r7, #4]
 800164e:	f000 f915 	bl	800187c <_ZNKSt9_Any_data9_M_accessIPFhhPKhmEEERKT_v>
 8001652:	4603      	mov	r3, r0
	  const _Functor* __ptr =
 8001654:	4618      	mov	r0, r3
 8001656:	f000 f91d 	bl	8001894 <_ZSt11__addressofIKPFhhPKhmEEPT_RS5_>
 800165a:	60f8      	str	r0, [r7, #12]
	  return const_cast<_Functor*>(__ptr);
 800165c:	68fb      	ldr	r3, [r7, #12]
	}
 800165e:	4618      	mov	r0, r3
 8001660:	3710      	adds	r7, #16
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}

08001666 <_ZSt7forwardIPKhEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8001666:	b480      	push	{r7}
 8001668:	b083      	sub	sp, #12
 800166a:	af00      	add	r7, sp, #0
 800166c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	4618      	mov	r0, r3
 8001672:	370c      	adds	r7, #12
 8001674:	46bd      	mov	sp, r7
 8001676:	bc80      	pop	{r7}
 8001678:	4770      	bx	lr

0800167a <_ZNSt9_Any_data9_M_accessIPPFhhPKhmEEERT_v>:
      _M_access()
 800167a:	b580      	push	{r7, lr}
 800167c:	b082      	sub	sp, #8
 800167e:	af00      	add	r7, sp, #0
 8001680:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8001682:	6878      	ldr	r0, [r7, #4]
 8001684:	f7ff fa67 	bl	8000b56 <_ZNSt9_Any_data9_M_accessEv>
 8001688:	4603      	mov	r3, r0
 800168a:	4618      	mov	r0, r3
 800168c:	3708      	adds	r7, #8
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}

08001692 <_ZNSt14_Function_base13_Base_managerIPFhhPKhmEE8_M_cloneERSt9_Any_dataRKS6_St17integral_constantIbLb1EE>:
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
 8001692:	b590      	push	{r4, r7, lr}
 8001694:	b085      	sub	sp, #20
 8001696:	af00      	add	r7, sp, #0
 8001698:	60f8      	str	r0, [r7, #12]
 800169a:	60b9      	str	r1, [r7, #8]
 800169c:	713a      	strb	r2, [r7, #4]
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 800169e:	68b8      	ldr	r0, [r7, #8]
 80016a0:	f000 f8ec 	bl	800187c <_ZNKSt9_Any_data9_M_accessIPFhhPKhmEEERKT_v>
 80016a4:	4603      	mov	r3, r0
 80016a6:	681c      	ldr	r4, [r3, #0]
 80016a8:	68f8      	ldr	r0, [r7, #12]
 80016aa:	f7ff fa54 	bl	8000b56 <_ZNSt9_Any_data9_M_accessEv>
 80016ae:	4603      	mov	r3, r0
 80016b0:	4619      	mov	r1, r3
 80016b2:	2004      	movs	r0, #4
 80016b4:	f7ff fa44 	bl	8000b40 <_ZnwjPv>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d000      	beq.n	80016c0 <_ZNSt14_Function_base13_Base_managerIPFhhPKhmEE8_M_cloneERSt9_Any_dataRKS6_St17integral_constantIbLb1EE+0x2e>
 80016be:	601c      	str	r4, [r3, #0]
	}
 80016c0:	bf00      	nop
 80016c2:	3714      	adds	r7, #20
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd90      	pop	{r4, r7, pc}

080016c8 <_ZNSt14_Function_base13_Base_managerIPFhhPKhmEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b082      	sub	sp, #8
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
 80016d0:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 80016d2:	6878      	ldr	r0, [r7, #4]
 80016d4:	f000 f8e8 	bl	80018a8 <_ZNSt9_Any_data9_M_accessIPFhhPKhmEEERT_v>
	}
 80016d8:	bf00      	nop
 80016da:	3708      	adds	r7, #8
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}

080016e0 <_ZNSt14_Function_base13_Base_managerIPFvmEE15_M_init_functorERSt9_Any_dataOS2_St17integral_constantIbLb1EE>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
 80016e0:	b590      	push	{r4, r7, lr}
 80016e2:	b085      	sub	sp, #20
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	60f8      	str	r0, [r7, #12]
 80016e8:	60b9      	str	r1, [r7, #8]
 80016ea:	713a      	strb	r2, [r7, #4]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 80016ec:	68b8      	ldr	r0, [r7, #8]
 80016ee:	f7ff fcc5 	bl	800107c <_ZSt4moveIRPFvmEEONSt16remove_referenceIT_E4typeEOS4_>
 80016f2:	4603      	mov	r3, r0
 80016f4:	681c      	ldr	r4, [r3, #0]
 80016f6:	68f8      	ldr	r0, [r7, #12]
 80016f8:	f7ff fa2d 	bl	8000b56 <_ZNSt9_Any_data9_M_accessEv>
 80016fc:	4603      	mov	r3, r0
 80016fe:	4619      	mov	r1, r3
 8001700:	2004      	movs	r0, #4
 8001702:	f7ff fa1d 	bl	8000b40 <_ZnwjPv>
 8001706:	4603      	mov	r3, r0
 8001708:	2b00      	cmp	r3, #0
 800170a:	d000      	beq.n	800170e <_ZNSt14_Function_base13_Base_managerIPFvmEE15_M_init_functorERSt9_Any_dataOS2_St17integral_constantIbLb1EE+0x2e>
 800170c:	601c      	str	r4, [r3, #0]
 800170e:	bf00      	nop
 8001710:	3714      	adds	r7, #20
 8001712:	46bd      	mov	sp, r7
 8001714:	bd90      	pop	{r4, r7, pc}

08001716 <_ZNSt14_Function_base13_Base_managerIPFvmEE14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
 8001716:	b580      	push	{r7, lr}
 8001718:	b084      	sub	sp, #16
 800171a:	af00      	add	r7, sp, #0
 800171c:	6078      	str	r0, [r7, #4]
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
 800171e:	6878      	ldr	r0, [r7, #4]
 8001720:	f000 f8ce 	bl	80018c0 <_ZNKSt9_Any_data9_M_accessIPFvmEEERKT_v>
 8001724:	4603      	mov	r3, r0
	  const _Functor* __ptr =
 8001726:	4618      	mov	r0, r3
 8001728:	f000 f8d6 	bl	80018d8 <_ZSt11__addressofIKPFvmEEPT_RS3_>
 800172c:	60f8      	str	r0, [r7, #12]
	  return const_cast<_Functor*>(__ptr);
 800172e:	68fb      	ldr	r3, [r7, #12]
	}
 8001730:	4618      	mov	r0, r3
 8001732:	3710      	adds	r7, #16
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}

08001738 <_ZNSt9_Any_data9_M_accessIPPFvmEEERT_v>:
      _M_access()
 8001738:	b580      	push	{r7, lr}
 800173a:	b082      	sub	sp, #8
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8001740:	6878      	ldr	r0, [r7, #4]
 8001742:	f7ff fa08 	bl	8000b56 <_ZNSt9_Any_data9_M_accessEv>
 8001746:	4603      	mov	r3, r0
 8001748:	4618      	mov	r0, r3
 800174a:	3708      	adds	r7, #8
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}

08001750 <_ZNSt14_Function_base13_Base_managerIPFvmEE8_M_cloneERSt9_Any_dataRKS4_St17integral_constantIbLb1EE>:
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
 8001750:	b590      	push	{r4, r7, lr}
 8001752:	b085      	sub	sp, #20
 8001754:	af00      	add	r7, sp, #0
 8001756:	60f8      	str	r0, [r7, #12]
 8001758:	60b9      	str	r1, [r7, #8]
 800175a:	713a      	strb	r2, [r7, #4]
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 800175c:	68b8      	ldr	r0, [r7, #8]
 800175e:	f000 f8af 	bl	80018c0 <_ZNKSt9_Any_data9_M_accessIPFvmEEERKT_v>
 8001762:	4603      	mov	r3, r0
 8001764:	681c      	ldr	r4, [r3, #0]
 8001766:	68f8      	ldr	r0, [r7, #12]
 8001768:	f7ff f9f5 	bl	8000b56 <_ZNSt9_Any_data9_M_accessEv>
 800176c:	4603      	mov	r3, r0
 800176e:	4619      	mov	r1, r3
 8001770:	2004      	movs	r0, #4
 8001772:	f7ff f9e5 	bl	8000b40 <_ZnwjPv>
 8001776:	4603      	mov	r3, r0
 8001778:	2b00      	cmp	r3, #0
 800177a:	d000      	beq.n	800177e <_ZNSt14_Function_base13_Base_managerIPFvmEE8_M_cloneERSt9_Any_dataRKS4_St17integral_constantIbLb1EE+0x2e>
 800177c:	601c      	str	r4, [r3, #0]
	}
 800177e:	bf00      	nop
 8001780:	3714      	adds	r7, #20
 8001782:	46bd      	mov	sp, r7
 8001784:	bd90      	pop	{r4, r7, pc}

08001786 <_ZNSt14_Function_base13_Base_managerIPFvmEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 8001786:	b580      	push	{r7, lr}
 8001788:	b082      	sub	sp, #8
 800178a:	af00      	add	r7, sp, #0
 800178c:	6078      	str	r0, [r7, #4]
 800178e:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 8001790:	6878      	ldr	r0, [r7, #4]
 8001792:	f000 f8ab 	bl	80018ec <_ZNSt9_Any_data9_M_accessIPFvmEEERT_v>
	}
 8001796:	bf00      	nop
 8001798:	3708      	adds	r7, #8
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}

0800179e <_ZNSaIhEC1ERKS_>:
      allocator(const allocator& __a) throw()
 800179e:	b580      	push	{r7, lr}
 80017a0:	b082      	sub	sp, #8
 80017a2:	af00      	add	r7, sp, #0
 80017a4:	6078      	str	r0, [r7, #4]
 80017a6:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 80017a8:	6839      	ldr	r1, [r7, #0]
 80017aa:	6878      	ldr	r0, [r7, #4]
 80017ac:	f000 f8aa 	bl	8001904 <_ZN9__gnu_cxx13new_allocatorIhEC1ERKS1_>
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	4618      	mov	r0, r3
 80017b4:	3708      	adds	r7, #8
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}

080017ba <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj>:
      _M_allocate(size_t __n)
 80017ba:	b580      	push	{r7, lr}
 80017bc:	b082      	sub	sp, #8
 80017be:	af00      	add	r7, sp, #0
 80017c0:	6078      	str	r0, [r7, #4]
 80017c2:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d006      	beq.n	80017d8 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj+0x1e>
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6839      	ldr	r1, [r7, #0]
 80017ce:	4618      	mov	r0, r3
 80017d0:	f000 f8a3 	bl	800191a <_ZNSt16allocator_traitsISaIhEE8allocateERS0_j>
 80017d4:	4603      	mov	r3, r0
 80017d6:	e000      	b.n	80017da <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj+0x20>
 80017d8:	2300      	movs	r3, #0
      }
 80017da:	4618      	mov	r0, r3
 80017dc:	3708      	adds	r7, #8
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}

080017e2 <_ZNSt16allocator_traitsISaIhEE10deallocateERS0_Phj>:
       *  @param  __n  The number of objects space was allocated for.
       *
       *  Calls <tt> a.deallocate(p, n) </tt>
      */
      static void
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80017e2:	b580      	push	{r7, lr}
 80017e4:	b084      	sub	sp, #16
 80017e6:	af00      	add	r7, sp, #0
 80017e8:	60f8      	str	r0, [r7, #12]
 80017ea:	60b9      	str	r1, [r7, #8]
 80017ec:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 80017ee:	687a      	ldr	r2, [r7, #4]
 80017f0:	68b9      	ldr	r1, [r7, #8]
 80017f2:	68f8      	ldr	r0, [r7, #12]
 80017f4:	f000 f8a0 	bl	8001938 <_ZN9__gnu_cxx13new_allocatorIhE10deallocateEPhj>
 80017f8:	bf00      	nop
 80017fa:	3710      	adds	r7, #16
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}

08001800 <_ZSt20uninitialized_fill_nIPhjhET_S1_T0_RKT1_>:
    uninitialized_fill_n(_ForwardIterator __first, _Size __n, const _Tp& __x)
 8001800:	b580      	push	{r7, lr}
 8001802:	b086      	sub	sp, #24
 8001804:	af00      	add	r7, sp, #0
 8001806:	60f8      	str	r0, [r7, #12]
 8001808:	60b9      	str	r1, [r7, #8]
 800180a:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_copy_assignable<_ValueType>::value;
 800180c:	2301      	movs	r3, #1
 800180e:	75fb      	strb	r3, [r7, #23]
	__uninit_fill_n(__first, __n, __x);
 8001810:	687a      	ldr	r2, [r7, #4]
 8001812:	68b9      	ldr	r1, [r7, #8]
 8001814:	68f8      	ldr	r0, [r7, #12]
 8001816:	f000 f89c 	bl	8001952 <_ZNSt22__uninitialized_fill_nILb1EE15__uninit_fill_nIPhjhEET_S3_T0_RKT1_>
 800181a:	4603      	mov	r3, r0
    }
 800181c:	4618      	mov	r0, r3
 800181e:	3718      	adds	r7, #24
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}

08001824 <_ZNSt12_Destroy_auxILb1EE9__destroyIPhEEvT_S3_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 8001824:	b480      	push	{r7}
 8001826:	b083      	sub	sp, #12
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
 800182c:	6039      	str	r1, [r7, #0]
 800182e:	bf00      	nop
 8001830:	370c      	adds	r7, #12
 8001832:	46bd      	mov	sp, r7
 8001834:	bc80      	pop	{r7}
 8001836:	4770      	bx	lr

08001838 <_ZNKSt9_Any_data9_M_accessIPFhhPhmEEERKT_v>:
      _M_access() const
 8001838:	b580      	push	{r7, lr}
 800183a:	b082      	sub	sp, #8
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 8001840:	6878      	ldr	r0, [r7, #4]
 8001842:	f7ff f992 	bl	8000b6a <_ZNKSt9_Any_data9_M_accessEv>
 8001846:	4603      	mov	r3, r0
 8001848:	4618      	mov	r0, r3
 800184a:	3708      	adds	r7, #8
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}

08001850 <_ZSt11__addressofIKPFhhPhmEEPT_RS4_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8001850:	b480      	push	{r7}
 8001852:	b083      	sub	sp, #12
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	4618      	mov	r0, r3
 800185c:	370c      	adds	r7, #12
 800185e:	46bd      	mov	sp, r7
 8001860:	bc80      	pop	{r7}
 8001862:	4770      	bx	lr

08001864 <_ZNSt9_Any_data9_M_accessIPFhhPhmEEERT_v>:
      _M_access()
 8001864:	b580      	push	{r7, lr}
 8001866:	b082      	sub	sp, #8
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 800186c:	6878      	ldr	r0, [r7, #4]
 800186e:	f7ff f972 	bl	8000b56 <_ZNSt9_Any_data9_M_accessEv>
 8001872:	4603      	mov	r3, r0
 8001874:	4618      	mov	r0, r3
 8001876:	3708      	adds	r7, #8
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}

0800187c <_ZNKSt9_Any_data9_M_accessIPFhhPKhmEEERKT_v>:
      _M_access() const
 800187c:	b580      	push	{r7, lr}
 800187e:	b082      	sub	sp, #8
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 8001884:	6878      	ldr	r0, [r7, #4]
 8001886:	f7ff f970 	bl	8000b6a <_ZNKSt9_Any_data9_M_accessEv>
 800188a:	4603      	mov	r3, r0
 800188c:	4618      	mov	r0, r3
 800188e:	3708      	adds	r7, #8
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}

08001894 <_ZSt11__addressofIKPFhhPKhmEEPT_RS5_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8001894:	b480      	push	{r7}
 8001896:	b083      	sub	sp, #12
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	4618      	mov	r0, r3
 80018a0:	370c      	adds	r7, #12
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bc80      	pop	{r7}
 80018a6:	4770      	bx	lr

080018a8 <_ZNSt9_Any_data9_M_accessIPFhhPKhmEEERT_v>:
      _M_access()
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b082      	sub	sp, #8
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 80018b0:	6878      	ldr	r0, [r7, #4]
 80018b2:	f7ff f950 	bl	8000b56 <_ZNSt9_Any_data9_M_accessEv>
 80018b6:	4603      	mov	r3, r0
 80018b8:	4618      	mov	r0, r3
 80018ba:	3708      	adds	r7, #8
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}

080018c0 <_ZNKSt9_Any_data9_M_accessIPFvmEEERKT_v>:
      _M_access() const
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b082      	sub	sp, #8
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 80018c8:	6878      	ldr	r0, [r7, #4]
 80018ca:	f7ff f94e 	bl	8000b6a <_ZNKSt9_Any_data9_M_accessEv>
 80018ce:	4603      	mov	r3, r0
 80018d0:	4618      	mov	r0, r3
 80018d2:	3708      	adds	r7, #8
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}

080018d8 <_ZSt11__addressofIKPFvmEEPT_RS3_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 80018d8:	b480      	push	{r7}
 80018da:	b083      	sub	sp, #12
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	4618      	mov	r0, r3
 80018e4:	370c      	adds	r7, #12
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bc80      	pop	{r7}
 80018ea:	4770      	bx	lr

080018ec <_ZNSt9_Any_data9_M_accessIPFvmEEERT_v>:
      _M_access()
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b082      	sub	sp, #8
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 80018f4:	6878      	ldr	r0, [r7, #4]
 80018f6:	f7ff f92e 	bl	8000b56 <_ZNSt9_Any_data9_M_accessEv>
 80018fa:	4603      	mov	r3, r0
 80018fc:	4618      	mov	r0, r3
 80018fe:	3708      	adds	r7, #8
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}

08001904 <_ZN9__gnu_cxx13new_allocatorIhEC1ERKS1_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 8001904:	b480      	push	{r7}
 8001906:	b083      	sub	sp, #12
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
 800190c:	6039      	str	r1, [r7, #0]
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	4618      	mov	r0, r3
 8001912:	370c      	adds	r7, #12
 8001914:	46bd      	mov	sp, r7
 8001916:	bc80      	pop	{r7}
 8001918:	4770      	bx	lr

0800191a <_ZNSt16allocator_traitsISaIhEE8allocateERS0_j>:
      allocate(allocator_type& __a, size_type __n)
 800191a:	b580      	push	{r7, lr}
 800191c:	b082      	sub	sp, #8
 800191e:	af00      	add	r7, sp, #0
 8001920:	6078      	str	r0, [r7, #4]
 8001922:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8001924:	2200      	movs	r2, #0
 8001926:	6839      	ldr	r1, [r7, #0]
 8001928:	6878      	ldr	r0, [r7, #4]
 800192a:	f000 f822 	bl	8001972 <_ZN9__gnu_cxx13new_allocatorIhE8allocateEjPKv>
 800192e:	4603      	mov	r3, r0
 8001930:	4618      	mov	r0, r3
 8001932:	3708      	adds	r7, #8
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}

08001938 <_ZN9__gnu_cxx13new_allocatorIhE10deallocateEPhj>:
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
 8001938:	b580      	push	{r7, lr}
 800193a:	b084      	sub	sp, #16
 800193c:	af00      	add	r7, sp, #0
 800193e:	60f8      	str	r0, [r7, #12]
 8001940:	60b9      	str	r1, [r7, #8]
 8001942:	607a      	str	r2, [r7, #4]
	  {
	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p);
 8001944:	68b8      	ldr	r0, [r7, #8]
 8001946:	f001 fe71 	bl	800362c <_ZdlPv>
      }
 800194a:	bf00      	nop
 800194c:	3710      	adds	r7, #16
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}

08001952 <_ZNSt22__uninitialized_fill_nILb1EE15__uninit_fill_nIPhjhEET_S3_T0_RKT1_>:
        __uninit_fill_n(_ForwardIterator __first, _Size __n,
 8001952:	b580      	push	{r7, lr}
 8001954:	b084      	sub	sp, #16
 8001956:	af00      	add	r7, sp, #0
 8001958:	60f8      	str	r0, [r7, #12]
 800195a:	60b9      	str	r1, [r7, #8]
 800195c:	607a      	str	r2, [r7, #4]
        { return std::fill_n(__first, __n, __x); }
 800195e:	687a      	ldr	r2, [r7, #4]
 8001960:	68b9      	ldr	r1, [r7, #8]
 8001962:	68f8      	ldr	r0, [r7, #12]
 8001964:	f000 f821 	bl	80019aa <_ZSt6fill_nIPhjhET_S1_T0_RKT1_>
 8001968:	4603      	mov	r3, r0
 800196a:	4618      	mov	r0, r3
 800196c:	3710      	adds	r7, #16
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}

08001972 <_ZN9__gnu_cxx13new_allocatorIhE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8001972:	b580      	push	{r7, lr}
 8001974:	b084      	sub	sp, #16
 8001976:	af00      	add	r7, sp, #0
 8001978:	60f8      	str	r0, [r7, #12]
 800197a:	60b9      	str	r1, [r7, #8]
 800197c:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 800197e:	68f8      	ldr	r0, [r7, #12]
 8001980:	f000 f827 	bl	80019d2 <_ZNK9__gnu_cxx13new_allocatorIhE8max_sizeEv>
 8001984:	4602      	mov	r2, r0
 8001986:	68bb      	ldr	r3, [r7, #8]
 8001988:	4293      	cmp	r3, r2
 800198a:	bf8c      	ite	hi
 800198c:	2301      	movhi	r3, #1
 800198e:	2300      	movls	r3, #0
 8001990:	b2db      	uxtb	r3, r3
 8001992:	2b00      	cmp	r3, #0
 8001994:	d001      	beq.n	800199a <_ZN9__gnu_cxx13new_allocatorIhE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8001996:	f001 fe4b 	bl	8003630 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800199a:	68b8      	ldr	r0, [r7, #8]
 800199c:	f001 fe2d 	bl	80035fa <_Znwj>
 80019a0:	4603      	mov	r3, r0
      }
 80019a2:	4618      	mov	r0, r3
 80019a4:	3710      	adds	r7, #16
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}

080019aa <_ZSt6fill_nIPhjhET_S1_T0_RKT1_>:
   *  _GLIBCXX_RESOLVE_LIB_DEFECTS
   *  DR 865. More algorithms that throw away information
  */
  template<typename _OI, typename _Size, typename _Tp>
    inline _OI
    fill_n(_OI __first, _Size __n, const _Tp& __value)
 80019aa:	b580      	push	{r7, lr}
 80019ac:	b084      	sub	sp, #16
 80019ae:	af00      	add	r7, sp, #0
 80019b0:	60f8      	str	r0, [r7, #12]
 80019b2:	60b9      	str	r1, [r7, #8]
 80019b4:	607a      	str	r2, [r7, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_OutputIteratorConcept<_OI, _Tp>)

      return _OI(std::__fill_n_a(std::__niter_base(__first), __n, __value));
 80019b6:	68f8      	ldr	r0, [r7, #12]
 80019b8:	f000 f816 	bl	80019e8 <_ZSt12__niter_baseIPhET_S1_>
 80019bc:	4603      	mov	r3, r0
 80019be:	687a      	ldr	r2, [r7, #4]
 80019c0:	68b9      	ldr	r1, [r7, #8]
 80019c2:	4618      	mov	r0, r3
 80019c4:	f000 f81a 	bl	80019fc <_ZSt10__fill_n_aIjhEN9__gnu_cxx11__enable_ifIXsrSt9__is_byteIT0_E7__valueEPS3_E6__typeES5_T_RKS3_>
 80019c8:	4603      	mov	r3, r0
    }
 80019ca:	4618      	mov	r0, r3
 80019cc:	3710      	adds	r7, #16
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}

080019d2 <_ZNK9__gnu_cxx13new_allocatorIhE8max_sizeEv>:

      size_type
      max_size() const _GLIBCXX_USE_NOEXCEPT
 80019d2:	b480      	push	{r7}
 80019d4:	b083      	sub	sp, #12
 80019d6:	af00      	add	r7, sp, #0
 80019d8:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 80019da:	f04f 33ff 	mov.w	r3, #4294967295
 80019de:	4618      	mov	r0, r3
 80019e0:	370c      	adds	r7, #12
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bc80      	pop	{r7}
 80019e6:	4770      	bx	lr

080019e8 <_ZSt12__niter_baseIPhET_S1_>:
    __niter_base(_Iterator __it)
 80019e8:	b480      	push	{r7}
 80019ea:	b083      	sub	sp, #12
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
    { return __it; }
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	4618      	mov	r0, r3
 80019f4:	370c      	adds	r7, #12
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bc80      	pop	{r7}
 80019fa:	4770      	bx	lr

080019fc <_ZSt10__fill_n_aIjhEN9__gnu_cxx11__enable_ifIXsrSt9__is_byteIT0_E7__valueEPS3_E6__typeES5_T_RKS3_>:
    __fill_n_a(_Tp* __first, _Size __n, const _Tp& __c)
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b084      	sub	sp, #16
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	60f8      	str	r0, [r7, #12]
 8001a04:	60b9      	str	r1, [r7, #8]
 8001a06:	607a      	str	r2, [r7, #4]
      std::__fill_a(__first, __first + __n, __c);
 8001a08:	68fa      	ldr	r2, [r7, #12]
 8001a0a:	68bb      	ldr	r3, [r7, #8]
 8001a0c:	4413      	add	r3, r2
 8001a0e:	687a      	ldr	r2, [r7, #4]
 8001a10:	4619      	mov	r1, r3
 8001a12:	68f8      	ldr	r0, [r7, #12]
 8001a14:	f000 f807 	bl	8001a26 <_ZSt8__fill_aIhEN9__gnu_cxx11__enable_ifIXsrSt9__is_byteIT_E7__valueEvE6__typeEPS3_S7_RKS3_>
      return __first + __n;
 8001a18:	68fa      	ldr	r2, [r7, #12]
 8001a1a:	68bb      	ldr	r3, [r7, #8]
 8001a1c:	4413      	add	r3, r2
    }
 8001a1e:	4618      	mov	r0, r3
 8001a20:	3710      	adds	r7, #16
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}

08001a26 <_ZSt8__fill_aIhEN9__gnu_cxx11__enable_ifIXsrSt9__is_byteIT_E7__valueEvE6__typeEPS3_S7_RKS3_>:
    __fill_a(_Tp* __first, _Tp* __last, const _Tp& __c)
 8001a26:	b580      	push	{r7, lr}
 8001a28:	b086      	sub	sp, #24
 8001a2a:	af00      	add	r7, sp, #0
 8001a2c:	60f8      	str	r0, [r7, #12]
 8001a2e:	60b9      	str	r1, [r7, #8]
 8001a30:	607a      	str	r2, [r7, #4]
      const _Tp __tmp = __c;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	781b      	ldrb	r3, [r3, #0]
 8001a36:	75fb      	strb	r3, [r7, #23]
      if (const size_t __len = __last - __first)
 8001a38:	68ba      	ldr	r2, [r7, #8]
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	1ad3      	subs	r3, r2, r3
 8001a3e:	613b      	str	r3, [r7, #16]
 8001a40:	693b      	ldr	r3, [r7, #16]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d005      	beq.n	8001a52 <_ZSt8__fill_aIhEN9__gnu_cxx11__enable_ifIXsrSt9__is_byteIT_E7__valueEvE6__typeEPS3_S7_RKS3_+0x2c>
	__builtin_memset(__first, static_cast<unsigned char>(__tmp), __len);
 8001a46:	7dfb      	ldrb	r3, [r7, #23]
 8001a48:	693a      	ldr	r2, [r7, #16]
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	68f8      	ldr	r0, [r7, #12]
 8001a4e:	f001 fe42 	bl	80036d6 <memset>
    }
 8001a52:	bf00      	nop
 8001a54:	3718      	adds	r7, #24
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}

08001a5a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a5a:	b480      	push	{r7}
 8001a5c:	af00      	add	r7, sp, #0
	return 1;
 8001a5e:	2301      	movs	r3, #1
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bc80      	pop	{r7}
 8001a66:	4770      	bx	lr

08001a68 <_kill>:

int _kill(int pid, int sig)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b082      	sub	sp, #8
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
 8001a70:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001a72:	f001 fdeb 	bl	800364c <__errno>
 8001a76:	4602      	mov	r2, r0
 8001a78:	2316      	movs	r3, #22
 8001a7a:	6013      	str	r3, [r2, #0]
	return -1;
 8001a7c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	3708      	adds	r7, #8
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}

08001a88 <_exit>:

void _exit (int status)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b082      	sub	sp, #8
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001a90:	f04f 31ff 	mov.w	r1, #4294967295
 8001a94:	6878      	ldr	r0, [r7, #4]
 8001a96:	f7ff ffe7 	bl	8001a68 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001a9a:	e7fe      	b.n	8001a9a <_exit+0x12>

08001a9c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b084      	sub	sp, #16
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001aa4:	4b11      	ldr	r3, [pc, #68]	; (8001aec <_sbrk+0x50>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d102      	bne.n	8001ab2 <_sbrk+0x16>
		heap_end = &end;
 8001aac:	4b0f      	ldr	r3, [pc, #60]	; (8001aec <_sbrk+0x50>)
 8001aae:	4a10      	ldr	r2, [pc, #64]	; (8001af0 <_sbrk+0x54>)
 8001ab0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001ab2:	4b0e      	ldr	r3, [pc, #56]	; (8001aec <_sbrk+0x50>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001ab8:	4b0c      	ldr	r3, [pc, #48]	; (8001aec <_sbrk+0x50>)
 8001aba:	681a      	ldr	r2, [r3, #0]
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	4413      	add	r3, r2
 8001ac0:	466a      	mov	r2, sp
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d907      	bls.n	8001ad6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001ac6:	f001 fdc1 	bl	800364c <__errno>
 8001aca:	4602      	mov	r2, r0
 8001acc:	230c      	movs	r3, #12
 8001ace:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001ad0:	f04f 33ff 	mov.w	r3, #4294967295
 8001ad4:	e006      	b.n	8001ae4 <_sbrk+0x48>
	}

	heap_end += incr;
 8001ad6:	4b05      	ldr	r3, [pc, #20]	; (8001aec <_sbrk+0x50>)
 8001ad8:	681a      	ldr	r2, [r3, #0]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	4413      	add	r3, r2
 8001ade:	4a03      	ldr	r2, [pc, #12]	; (8001aec <_sbrk+0x50>)
 8001ae0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001ae2:	68fb      	ldr	r3, [r7, #12]
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	3710      	adds	r7, #16
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}
 8001aec:	200001f8 	.word	0x200001f8
 8001af0:	20000210 	.word	0x20000210

08001af4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001af4:	480d      	ldr	r0, [pc, #52]	; (8001b2c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001af6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001af8:	480d      	ldr	r0, [pc, #52]	; (8001b30 <LoopForever+0x6>)
  ldr r1, =_edata
 8001afa:	490e      	ldr	r1, [pc, #56]	; (8001b34 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001afc:	4a0e      	ldr	r2, [pc, #56]	; (8001b38 <LoopForever+0xe>)
  movs r3, #0
 8001afe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b00:	e002      	b.n	8001b08 <LoopCopyDataInit>

08001b02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b06:	3304      	adds	r3, #4

08001b08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b0c:	d3f9      	bcc.n	8001b02 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b0e:	4a0b      	ldr	r2, [pc, #44]	; (8001b3c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001b10:	4c0b      	ldr	r4, [pc, #44]	; (8001b40 <LoopForever+0x16>)
  movs r3, #0
 8001b12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b14:	e001      	b.n	8001b1a <LoopFillZerobss>

08001b16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b18:	3204      	adds	r2, #4

08001b1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b1c:	d3fb      	bcc.n	8001b16 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001b1e:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 8001b22:	f001 fd99 	bl	8003658 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001b26:	f7ff f959 	bl	8000ddc <main>

08001b2a <LoopForever>:

LoopForever:
    b LoopForever
 8001b2a:	e7fe      	b.n	8001b2a <LoopForever>
  ldr   r0, =_estack
 8001b2c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001b30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b34:	200001d0 	.word	0x200001d0
  ldr r2, =_sidata
 8001b38:	08005460 	.word	0x08005460
  ldr r2, =_sbss
 8001b3c:	200001d0 	.word	0x200001d0
  ldr r4, =_ebss
 8001b40:	2000020c 	.word	0x2000020c

08001b44 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001b44:	e7fe      	b.n	8001b44 <ADC_IRQHandler>

08001b46 <_ZNKSt14_Function_base8_M_emptyEv>:
    bool _M_empty() const { return !_M_manager; }
 8001b46:	b480      	push	{r7}
 8001b48:	b083      	sub	sp, #12
 8001b4a:	af00      	add	r7, sp, #0
 8001b4c:	6078      	str	r0, [r7, #4]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	689b      	ldr	r3, [r3, #8]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	bf0c      	ite	eq
 8001b56:	2301      	moveq	r3, #1
 8001b58:	2300      	movne	r3, #0
 8001b5a:	b2db      	uxtb	r3, r3
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	370c      	adds	r7, #12
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bc80      	pop	{r7}
 8001b64:	4770      	bx	lr

08001b66 <_ZN17BMESensor_HandlerC1ESt8functionIFhhPhmEES0_IFhhPKhmEES0_IFvmEE>:
#define SRC_BME280_C_
#include "../inc/bme280_driver.h"



BMESensor_Handler::BMESensor_Handler(read_fnc user_read,
 8001b66:	b580      	push	{r7, lr}
 8001b68:	b084      	sub	sp, #16
 8001b6a:	af00      	add	r7, sp, #0
 8001b6c:	60f8      	str	r0, [r7, #12]
 8001b6e:	60b9      	str	r1, [r7, #8]
 8001b70:	607a      	str	r2, [r7, #4]
 8001b72:	603b      	str	r3, [r7, #0]
                                     write_fnc user_write,
                                     delay_ms_fnc user_delay) {
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	4618      	mov	r0, r3
 8001b78:	2338      	movs	r3, #56	; 0x38
 8001b7a:	461a      	mov	r2, r3
 8001b7c:	2100      	movs	r1, #0
 8001b7e:	f001 fdaa 	bl	80036d6 <memset>
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	3304      	adds	r3, #4
 8001b86:	4618      	mov	r0, r3
 8001b88:	f000 f8c0 	bl	8001d0c <_ZNSt8functionIFhhPhmEEC1Ev>
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	3314      	adds	r3, #20
 8001b90:	4618      	mov	r0, r3
 8001b92:	f000 f8c8 	bl	8001d26 <_ZNSt8functionIFhhPKhmEEC1Ev>
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	3328      	adds	r3, #40	; 0x28
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f000 f8d0 	bl	8001d40 <_ZNSt8functionIFvmEEC1Ev>
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	3338      	adds	r3, #56	; 0x38
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	601a      	str	r2, [r3, #0]
 8001ba8:	605a      	str	r2, [r3, #4]
 8001baa:	609a      	str	r2, [r3, #8]
 8001bac:	60da      	str	r2, [r3, #12]
 8001bae:	611a      	str	r2, [r3, #16]
 8001bb0:	615a      	str	r2, [r3, #20]
    dev_.user_read = user_read;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	3304      	adds	r3, #4
 8001bb6:	68b9      	ldr	r1, [r7, #8]
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f000 f8ce 	bl	8001d5a <_ZNSt8functionIFhhPhmEEaSERKS2_>
    dev_.user_write = user_write;
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	3314      	adds	r3, #20
 8001bc2:	6879      	ldr	r1, [r7, #4]
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f000 f8e3 	bl	8001d90 <_ZNSt8functionIFhhPKhmEEaSERKS3_>
    dev_.delay_ms = user_delay;
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	3328      	adds	r3, #40	; 0x28
 8001bce:	6839      	ldr	r1, [r7, #0]
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f000 f8f8 	bl	8001dc6 <_ZNSt8functionIFvmEEaSERKS1_>
    dev_.status = init_BME280();
 8001bd6:	68f8      	ldr	r0, [r7, #12]
 8001bd8:	f000 f80a 	bl	8001bf0 <_ZN17BMESensor_Handler11init_BME280Ev>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	461a      	mov	r2, r3
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
}
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	4618      	mov	r0, r3
 8001bea:	3710      	adds	r7, #16
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}

08001bf0 <_ZN17BMESensor_Handler11init_BME280Ev>:

BME280_Stat BMESensor_Handler::init_BME280() {
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b084      	sub	sp, #16
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
    BME280_Stat retStatus = SENSOR_OK;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	73fb      	strb	r3, [r7, #15]
    // read sensor ID
    uint8_t regAddr = BME280_CHIP_ID_ADDR;
 8001bfc:	23d0      	movs	r3, #208	; 0xd0
 8001bfe:	73bb      	strb	r3, [r7, #14]
    getRegData(regAddr, &dev_.chipID, 1);
 8001c00:	687a      	ldr	r2, [r7, #4]
 8001c02:	7bb9      	ldrb	r1, [r7, #14]
 8001c04:	2301      	movs	r3, #1
 8001c06:	6878      	ldr	r0, [r7, #4]
 8001c08:	f000 f84f 	bl	8001caa <_ZN17BMESensor_Handler10getRegDataEhPhm>
    if(BME280_CHIP_ID == dev_.chipID) {
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	781b      	ldrb	r3, [r3, #0]
 8001c10:	2b60      	cmp	r3, #96	; 0x60
 8001c12:	d105      	bne.n	8001c20 <_ZN17BMESensor_Handler11init_BME280Ev+0x30>
        // soft reset sensor
        retStatus = softReset();
 8001c14:	6878      	ldr	r0, [r7, #4]
 8001c16:	f000 f80a 	bl	8001c2e <_ZN17BMESensor_Handler9softResetEv>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	73fb      	strb	r3, [r7, #15]
 8001c1e:	e001      	b.n	8001c24 <_ZN17BMESensor_Handler11init_BME280Ev+0x34>
    }
    else {
        retStatus = SENSOR_NOT_OK;
 8001c20:	2301      	movs	r3, #1
 8001c22:	73fb      	strb	r3, [r7, #15]
    }
    return retStatus;
 8001c24:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	3710      	adds	r7, #16
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}

08001c2e <_ZN17BMESensor_Handler9softResetEv>:

BME280_Stat BMESensor_Handler::softReset() {
 8001c2e:	b580      	push	{r7, lr}
 8001c30:	b084      	sub	sp, #16
 8001c32:	af00      	add	r7, sp, #0
 8001c34:	6078      	str	r0, [r7, #4]
    uint8_t regAddr = BME280_SOFT_RST_ADDR;
 8001c36:	23e0      	movs	r3, #224	; 0xe0
 8001c38:	737b      	strb	r3, [r7, #13]
    uint8_t softRstVal = BME280_RST_COMMAND;
 8001c3a:	23b6      	movs	r3, #182	; 0xb6
 8001c3c:	733b      	strb	r3, [r7, #12]
    uint8_t regStatus = 0, tryRun = 5;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	72fb      	strb	r3, [r7, #11]
 8001c42:	2305      	movs	r3, #5
 8001c44:	73fb      	strb	r3, [r7, #15]
    BME280_Stat retStatus = SENSOR_OK;
 8001c46:	2300      	movs	r3, #0
 8001c48:	73bb      	strb	r3, [r7, #14]
    /* write soft reset command into the sensor */
    setRegData(regAddr, &softRstVal, 1);
 8001c4a:	f107 020c 	add.w	r2, r7, #12
 8001c4e:	7b79      	ldrb	r1, [r7, #13]
 8001c50:	2301      	movs	r3, #1
 8001c52:	6878      	ldr	r0, [r7, #4]
 8001c54:	f000 f841 	bl	8001cda <_ZN17BMESensor_Handler10setRegDataEhPKhm>
    do
    {
        /* As per data sheet - Table 1, startup time is 2 ms. */
        dev_.delay_ms(2);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	3328      	adds	r3, #40	; 0x28
 8001c5c:	2102      	movs	r1, #2
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f000 f8cc 	bl	8001dfc <_ZNKSt8functionIFvmEEclEm>
        getRegData(BME280_STATUS_REG_ADDR, &regStatus, 1);
 8001c64:	f107 020b 	add.w	r2, r7, #11
 8001c68:	2301      	movs	r3, #1
 8001c6a:	21f3      	movs	r1, #243	; 0xf3
 8001c6c:	6878      	ldr	r0, [r7, #4]
 8001c6e:	f000 f81c 	bl	8001caa <_ZN17BMESensor_Handler10getRegDataEhPhm>

    } while ((tryRun--) && (regStatus & BME280_STATUS_IM_UPDATE));
 8001c72:	7bfb      	ldrb	r3, [r7, #15]
 8001c74:	1e5a      	subs	r2, r3, #1
 8001c76:	73fa      	strb	r2, [r7, #15]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d006      	beq.n	8001c8a <_ZN17BMESensor_Handler9softResetEv+0x5c>
 8001c7c:	7afb      	ldrb	r3, [r7, #11]
 8001c7e:	f003 0301 	and.w	r3, r3, #1
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d001      	beq.n	8001c8a <_ZN17BMESensor_Handler9softResetEv+0x5c>
 8001c86:	2301      	movs	r3, #1
 8001c88:	e000      	b.n	8001c8c <_ZN17BMESensor_Handler9softResetEv+0x5e>
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d000      	beq.n	8001c92 <_ZN17BMESensor_Handler9softResetEv+0x64>
    do
 8001c90:	e7e2      	b.n	8001c58 <_ZN17BMESensor_Handler9softResetEv+0x2a>

    if (regStatus & BME280_STATUS_IM_UPDATE)
 8001c92:	7afb      	ldrb	r3, [r7, #11]
 8001c94:	f003 0301 	and.w	r3, r3, #1
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d001      	beq.n	8001ca0 <_ZN17BMESensor_Handler9softResetEv+0x72>
    {
        retStatus = SENSOR_NOT_OK;
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	73bb      	strb	r3, [r7, #14]
    }
    return retStatus;
 8001ca0:	7bbb      	ldrb	r3, [r7, #14]
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	3710      	adds	r7, #16
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}

08001caa <_ZN17BMESensor_Handler10getRegDataEhPhm>:

BME280_Stat BMESensor_Handler::getSensorMode(uint8_t &mode) {
    return getRegData(BME280_CTRL_MEAS_ADDR, &mode, 1);
}

BME280_Stat BMESensor_Handler::getRegData(u8 regAddr, u8 *regData, const u32 len) {
 8001caa:	b580      	push	{r7, lr}
 8001cac:	b084      	sub	sp, #16
 8001cae:	af00      	add	r7, sp, #0
 8001cb0:	60f8      	str	r0, [r7, #12]
 8001cb2:	607a      	str	r2, [r7, #4]
 8001cb4:	603b      	str	r3, [r7, #0]
 8001cb6:	460b      	mov	r3, r1
 8001cb8:	72fb      	strb	r3, [r7, #11]
    regAddr |= BME280_SPI_R;
 8001cba:	7afb      	ldrb	r3, [r7, #11]
 8001cbc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001cc0:	72fb      	strb	r3, [r7, #11]
    dev_.user_read(regAddr, &regData[0], len);
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	1d18      	adds	r0, r3, #4
 8001cc6:	7af9      	ldrb	r1, [r7, #11]
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	687a      	ldr	r2, [r7, #4]
 8001ccc:	f000 f8b3 	bl	8001e36 <_ZNKSt8functionIFhhPhmEEclEhS0_m>
    return SENSOR_OK;
 8001cd0:	2300      	movs	r3, #0
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	3710      	adds	r7, #16
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}

08001cda <_ZN17BMESensor_Handler10setRegDataEhPKhm>:

BME280_Stat BMESensor_Handler::setRegData(u8 regAddr, const u8 *setData, const u32 len) {
 8001cda:	b580      	push	{r7, lr}
 8001cdc:	b084      	sub	sp, #16
 8001cde:	af00      	add	r7, sp, #0
 8001ce0:	60f8      	str	r0, [r7, #12]
 8001ce2:	607a      	str	r2, [r7, #4]
 8001ce4:	603b      	str	r3, [r7, #0]
 8001ce6:	460b      	mov	r3, r1
 8001ce8:	72fb      	strb	r3, [r7, #11]
    regAddr &= BME280_SPI_W;
 8001cea:	7afb      	ldrb	r3, [r7, #11]
 8001cec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001cf0:	72fb      	strb	r3, [r7, #11]
    dev_.user_write(regAddr, &setData[0], len);
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	f103 0014 	add.w	r0, r3, #20
 8001cf8:	7af9      	ldrb	r1, [r7, #11]
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	687a      	ldr	r2, [r7, #4]
 8001cfe:	f000 f8c9 	bl	8001e94 <_ZNKSt8functionIFhhPKhmEEclEhS1_m>
    return SENSOR_OK;
 8001d02:	2300      	movs	r3, #0
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	3710      	adds	r7, #16
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}

08001d0c <_ZNSt8functionIFhhPhmEEC1Ev>:
      function() noexcept
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b082      	sub	sp, #8
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
      : _Function_base() { }
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	4618      	mov	r0, r3
 8001d18:	f7fe ff31 	bl	8000b7e <_ZNSt14_Function_baseC1Ev>
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	4618      	mov	r0, r3
 8001d20:	3708      	adds	r7, #8
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}

08001d26 <_ZNSt8functionIFhhPKhmEEC1Ev>:
      function() noexcept
 8001d26:	b580      	push	{r7, lr}
 8001d28:	b082      	sub	sp, #8
 8001d2a:	af00      	add	r7, sp, #0
 8001d2c:	6078      	str	r0, [r7, #4]
      : _Function_base() { }
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	4618      	mov	r0, r3
 8001d32:	f7fe ff24 	bl	8000b7e <_ZNSt14_Function_baseC1Ev>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	4618      	mov	r0, r3
 8001d3a:	3708      	adds	r7, #8
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}

08001d40 <_ZNSt8functionIFvmEEC1Ev>:
      function() noexcept
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b082      	sub	sp, #8
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
      : _Function_base() { }
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f7fe ff17 	bl	8000b7e <_ZNSt14_Function_baseC1Ev>
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	4618      	mov	r0, r3
 8001d54:	3708      	adds	r7, #8
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}

08001d5a <_ZNSt8functionIFhhPhmEEaSERKS2_>:
      operator=(const function& __x)
 8001d5a:	b580      	push	{r7, lr}
 8001d5c:	b086      	sub	sp, #24
 8001d5e:	af00      	add	r7, sp, #0
 8001d60:	6078      	str	r0, [r7, #4]
 8001d62:	6039      	str	r1, [r7, #0]
	function(__x).swap(*this);
 8001d64:	f107 0308 	add.w	r3, r7, #8
 8001d68:	6839      	ldr	r1, [r7, #0]
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f000 f8c1 	bl	8001ef2 <_ZNSt8functionIFhhPhmEEC1ERKS2_>
 8001d70:	f107 0308 	add.w	r3, r7, #8
 8001d74:	6879      	ldr	r1, [r7, #4]
 8001d76:	4618      	mov	r0, r3
 8001d78:	f000 f8dd 	bl	8001f36 <_ZNSt8functionIFhhPhmEE4swapERS2_>
 8001d7c:	f107 0308 	add.w	r3, r7, #8
 8001d80:	4618      	mov	r0, r3
 8001d82:	f7fe ff1c 	bl	8000bbe <_ZNSt8functionIFhhPhmEED1Ev>
	return *this;
 8001d86:	687b      	ldr	r3, [r7, #4]
      }
 8001d88:	4618      	mov	r0, r3
 8001d8a:	3718      	adds	r7, #24
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}

08001d90 <_ZNSt8functionIFhhPKhmEEaSERKS3_>:
      operator=(const function& __x)
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b086      	sub	sp, #24
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
 8001d98:	6039      	str	r1, [r7, #0]
	function(__x).swap(*this);
 8001d9a:	f107 0308 	add.w	r3, r7, #8
 8001d9e:	6839      	ldr	r1, [r7, #0]
 8001da0:	4618      	mov	r0, r3
 8001da2:	f000 f8e9 	bl	8001f78 <_ZNSt8functionIFhhPKhmEEC1ERKS3_>
 8001da6:	f107 0308 	add.w	r3, r7, #8
 8001daa:	6879      	ldr	r1, [r7, #4]
 8001dac:	4618      	mov	r0, r3
 8001dae:	f000 f905 	bl	8001fbc <_ZNSt8functionIFhhPKhmEE4swapERS3_>
 8001db2:	f107 0308 	add.w	r3, r7, #8
 8001db6:	4618      	mov	r0, r3
 8001db8:	f7fe ff0e 	bl	8000bd8 <_ZNSt8functionIFhhPKhmEED1Ev>
	return *this;
 8001dbc:	687b      	ldr	r3, [r7, #4]
      }
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	3718      	adds	r7, #24
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}

08001dc6 <_ZNSt8functionIFvmEEaSERKS1_>:
      operator=(const function& __x)
 8001dc6:	b580      	push	{r7, lr}
 8001dc8:	b086      	sub	sp, #24
 8001dca:	af00      	add	r7, sp, #0
 8001dcc:	6078      	str	r0, [r7, #4]
 8001dce:	6039      	str	r1, [r7, #0]
	function(__x).swap(*this);
 8001dd0:	f107 0308 	add.w	r3, r7, #8
 8001dd4:	6839      	ldr	r1, [r7, #0]
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f000 f911 	bl	8001ffe <_ZNSt8functionIFvmEEC1ERKS1_>
 8001ddc:	f107 0308 	add.w	r3, r7, #8
 8001de0:	6879      	ldr	r1, [r7, #4]
 8001de2:	4618      	mov	r0, r3
 8001de4:	f000 f92d 	bl	8002042 <_ZNSt8functionIFvmEE4swapERS1_>
 8001de8:	f107 0308 	add.w	r3, r7, #8
 8001dec:	4618      	mov	r0, r3
 8001dee:	f7fe ff00 	bl	8000bf2 <_ZNSt8functionIFvmEED1Ev>
	return *this;
 8001df2:	687b      	ldr	r3, [r7, #4]
      }
 8001df4:	4618      	mov	r0, r3
 8001df6:	3718      	adds	r7, #24
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}

08001dfc <_ZNKSt8functionIFvmEEclEm>:

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 8001dfc:	b5b0      	push	{r4, r5, r7, lr}
 8001dfe:	b082      	sub	sp, #8
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
 8001e04:	6039      	str	r1, [r7, #0]
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f7ff fe9c 	bl	8001b46 <_ZNKSt14_Function_base8_M_emptyEv>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d001      	beq.n	8001e18 <_ZNKSt8functionIFvmEEclEm+0x1c>
	__throw_bad_function_call();
 8001e14:	f001 fc0f 	bl	8003636 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	68dc      	ldr	r4, [r3, #12]
 8001e1c:	687d      	ldr	r5, [r7, #4]
 8001e1e:	463b      	mov	r3, r7
 8001e20:	4618      	mov	r0, r3
 8001e22:	f7ff fbb7 	bl	8001594 <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
 8001e26:	4603      	mov	r3, r0
 8001e28:	4619      	mov	r1, r3
 8001e2a:	4628      	mov	r0, r5
 8001e2c:	47a0      	blx	r4
 8001e2e:	bf00      	nop
    }
 8001e30:	3708      	adds	r7, #8
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bdb0      	pop	{r4, r5, r7, pc}

08001e36 <_ZNKSt8functionIFhhPhmEEclEhS0_m>:
    function<_Res(_ArgTypes...)>::
 8001e36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001e3a:	b084      	sub	sp, #16
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	60f8      	str	r0, [r7, #12]
 8001e40:	607a      	str	r2, [r7, #4]
 8001e42:	603b      	str	r3, [r7, #0]
 8001e44:	460b      	mov	r3, r1
 8001e46:	72fb      	strb	r3, [r7, #11]
      if (_M_empty())
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f7ff fe7b 	bl	8001b46 <_ZNKSt14_Function_base8_M_emptyEv>
 8001e50:	4603      	mov	r3, r0
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d001      	beq.n	8001e5a <_ZNKSt8functionIFhhPhmEEclEhS0_m+0x24>
	__throw_bad_function_call();
 8001e56:	f001 fbee 	bl	8003636 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	68dc      	ldr	r4, [r3, #12]
 8001e5e:	68fd      	ldr	r5, [r7, #12]
 8001e60:	f107 030b 	add.w	r3, r7, #11
 8001e64:	4618      	mov	r0, r3
 8001e66:	f7ff fb81 	bl	800156c <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 8001e6a:	4606      	mov	r6, r0
 8001e6c:	1d3b      	adds	r3, r7, #4
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f7ff fb86 	bl	8001580 <_ZSt7forwardIPhEOT_RNSt16remove_referenceIS1_E4typeE>
 8001e74:	4680      	mov	r8, r0
 8001e76:	463b      	mov	r3, r7
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f7ff fb8b 	bl	8001594 <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	4642      	mov	r2, r8
 8001e82:	4631      	mov	r1, r6
 8001e84:	4628      	mov	r0, r5
 8001e86:	47a0      	blx	r4
 8001e88:	4603      	mov	r3, r0
    }
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	3710      	adds	r7, #16
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001e94 <_ZNKSt8functionIFhhPKhmEEclEhS1_m>:
    function<_Res(_ArgTypes...)>::
 8001e94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001e98:	b084      	sub	sp, #16
 8001e9a:	af00      	add	r7, sp, #0
 8001e9c:	60f8      	str	r0, [r7, #12]
 8001e9e:	607a      	str	r2, [r7, #4]
 8001ea0:	603b      	str	r3, [r7, #0]
 8001ea2:	460b      	mov	r3, r1
 8001ea4:	72fb      	strb	r3, [r7, #11]
      if (_M_empty())
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f7ff fe4c 	bl	8001b46 <_ZNKSt14_Function_base8_M_emptyEv>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d001      	beq.n	8001eb8 <_ZNKSt8functionIFhhPKhmEEclEhS1_m+0x24>
	__throw_bad_function_call();
 8001eb4:	f001 fbbf 	bl	8003636 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	68dc      	ldr	r4, [r3, #12]
 8001ebc:	68fd      	ldr	r5, [r7, #12]
 8001ebe:	f107 030b 	add.w	r3, r7, #11
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f7ff fb52 	bl	800156c <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 8001ec8:	4606      	mov	r6, r0
 8001eca:	1d3b      	adds	r3, r7, #4
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f7ff fbca 	bl	8001666 <_ZSt7forwardIPKhEOT_RNSt16remove_referenceIS2_E4typeE>
 8001ed2:	4680      	mov	r8, r0
 8001ed4:	463b      	mov	r3, r7
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f7ff fb5c 	bl	8001594 <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
 8001edc:	4603      	mov	r3, r0
 8001ede:	4642      	mov	r2, r8
 8001ee0:	4631      	mov	r1, r6
 8001ee2:	4628      	mov	r0, r5
 8001ee4:	47a0      	blx	r4
 8001ee6:	4603      	mov	r3, r0
    }
 8001ee8:	4618      	mov	r0, r3
 8001eea:	3710      	adds	r7, #16
 8001eec:	46bd      	mov	sp, r7
 8001eee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001ef2 <_ZNSt8functionIFhhPhmEEC1ERKS2_>:
    function<_Res(_ArgTypes...)>::
 8001ef2:	b580      	push	{r7, lr}
 8001ef4:	b082      	sub	sp, #8
 8001ef6:	af00      	add	r7, sp, #0
 8001ef8:	6078      	str	r0, [r7, #4]
 8001efa:	6039      	str	r1, [r7, #0]
    : _Function_base()
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	4618      	mov	r0, r3
 8001f00:	f7fe fe3d 	bl	8000b7e <_ZNSt14_Function_baseC1Ev>
      if (static_cast<bool>(__x))
 8001f04:	6838      	ldr	r0, [r7, #0]
 8001f06:	f000 f8bd 	bl	8002084 <_ZNKSt8functionIFhhPhmEEcvbEv>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d00d      	beq.n	8001f2c <_ZNSt8functionIFhhPhmEEC1ERKS2_+0x3a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	689b      	ldr	r3, [r3, #8]
 8001f14:	6878      	ldr	r0, [r7, #4]
 8001f16:	6839      	ldr	r1, [r7, #0]
 8001f18:	2202      	movs	r2, #2
 8001f1a:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	68da      	ldr	r2, [r3, #12]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	60da      	str	r2, [r3, #12]
	  _M_manager = __x._M_manager;
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	689a      	ldr	r2, [r3, #8]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	609a      	str	r2, [r3, #8]
    }
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	4618      	mov	r0, r3
 8001f30:	3708      	adds	r7, #8
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}

08001f36 <_ZNSt8functionIFhhPhmEE4swapERS2_>:
      void swap(function& __x) noexcept
 8001f36:	b580      	push	{r7, lr}
 8001f38:	b082      	sub	sp, #8
 8001f3a:	af00      	add	r7, sp, #0
 8001f3c:	6078      	str	r0, [r7, #4]
 8001f3e:	6039      	str	r1, [r7, #0]
	std::swap(_M_functor, __x._M_functor);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	683a      	ldr	r2, [r7, #0]
 8001f44:	4611      	mov	r1, r2
 8001f46:	4618      	mov	r0, r3
 8001f48:	f000 f8b6 	bl	80020b8 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
	std::swap(_M_manager, __x._M_manager);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	f103 0208 	add.w	r2, r3, #8
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	3308      	adds	r3, #8
 8001f56:	4619      	mov	r1, r3
 8001f58:	4610      	mov	r0, r2
 8001f5a:	f000 f8de 	bl	800211a <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>
	std::swap(_M_invoker, __x._M_invoker);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	f103 020c 	add.w	r2, r3, #12
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	330c      	adds	r3, #12
 8001f68:	4619      	mov	r1, r3
 8001f6a:	4610      	mov	r0, r2
 8001f6c:	f000 f8fe 	bl	800216c <_ZSt4swapIPFhRKSt9_Any_dataOhOPhOmEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISD_ESt18is_move_assignableISD_EEE5valueEvE4typeERSD_SN_>
      }
 8001f70:	bf00      	nop
 8001f72:	3708      	adds	r7, #8
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}

08001f78 <_ZNSt8functionIFhhPKhmEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b082      	sub	sp, #8
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
 8001f80:	6039      	str	r1, [r7, #0]
    : _Function_base()
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	4618      	mov	r0, r3
 8001f86:	f7fe fdfa 	bl	8000b7e <_ZNSt14_Function_baseC1Ev>
      if (static_cast<bool>(__x))
 8001f8a:	6838      	ldr	r0, [r7, #0]
 8001f8c:	f000 f90d 	bl	80021aa <_ZNKSt8functionIFhhPKhmEEcvbEv>
 8001f90:	4603      	mov	r3, r0
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d00d      	beq.n	8001fb2 <_ZNSt8functionIFhhPKhmEEC1ERKS3_+0x3a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	689b      	ldr	r3, [r3, #8]
 8001f9a:	6878      	ldr	r0, [r7, #4]
 8001f9c:	6839      	ldr	r1, [r7, #0]
 8001f9e:	2202      	movs	r2, #2
 8001fa0:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	68da      	ldr	r2, [r3, #12]
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	60da      	str	r2, [r3, #12]
	  _M_manager = __x._M_manager;
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	689a      	ldr	r2, [r3, #8]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	609a      	str	r2, [r3, #8]
    }
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	3708      	adds	r7, #8
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}

08001fbc <_ZNSt8functionIFhhPKhmEE4swapERS3_>:
      void swap(function& __x) noexcept
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b082      	sub	sp, #8
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
 8001fc4:	6039      	str	r1, [r7, #0]
	std::swap(_M_functor, __x._M_functor);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	683a      	ldr	r2, [r7, #0]
 8001fca:	4611      	mov	r1, r2
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f000 f873 	bl	80020b8 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
	std::swap(_M_manager, __x._M_manager);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	f103 0208 	add.w	r2, r3, #8
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	3308      	adds	r3, #8
 8001fdc:	4619      	mov	r1, r3
 8001fde:	4610      	mov	r0, r2
 8001fe0:	f000 f89b 	bl	800211a <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>
	std::swap(_M_invoker, __x._M_invoker);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	f103 020c 	add.w	r2, r3, #12
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	330c      	adds	r3, #12
 8001fee:	4619      	mov	r1, r3
 8001ff0:	4610      	mov	r0, r2
 8001ff2:	f000 f8f4 	bl	80021de <_ZSt4swapIPFhRKSt9_Any_dataOhOPKhOmEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISE_ESt18is_move_assignableISE_EEE5valueEvE4typeERSE_SO_>
      }
 8001ff6:	bf00      	nop
 8001ff8:	3708      	adds	r7, #8
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}

08001ffe <_ZNSt8functionIFvmEEC1ERKS1_>:
    function<_Res(_ArgTypes...)>::
 8001ffe:	b580      	push	{r7, lr}
 8002000:	b082      	sub	sp, #8
 8002002:	af00      	add	r7, sp, #0
 8002004:	6078      	str	r0, [r7, #4]
 8002006:	6039      	str	r1, [r7, #0]
    : _Function_base()
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	4618      	mov	r0, r3
 800200c:	f7fe fdb7 	bl	8000b7e <_ZNSt14_Function_baseC1Ev>
      if (static_cast<bool>(__x))
 8002010:	6838      	ldr	r0, [r7, #0]
 8002012:	f000 f903 	bl	800221c <_ZNKSt8functionIFvmEEcvbEv>
 8002016:	4603      	mov	r3, r0
 8002018:	2b00      	cmp	r3, #0
 800201a:	d00d      	beq.n	8002038 <_ZNSt8functionIFvmEEC1ERKS1_+0x3a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	689b      	ldr	r3, [r3, #8]
 8002020:	6878      	ldr	r0, [r7, #4]
 8002022:	6839      	ldr	r1, [r7, #0]
 8002024:	2202      	movs	r2, #2
 8002026:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	68da      	ldr	r2, [r3, #12]
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	60da      	str	r2, [r3, #12]
	  _M_manager = __x._M_manager;
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	689a      	ldr	r2, [r3, #8]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	609a      	str	r2, [r3, #8]
    }
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	4618      	mov	r0, r3
 800203c:	3708      	adds	r7, #8
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}

08002042 <_ZNSt8functionIFvmEE4swapERS1_>:
      void swap(function& __x) noexcept
 8002042:	b580      	push	{r7, lr}
 8002044:	b082      	sub	sp, #8
 8002046:	af00      	add	r7, sp, #0
 8002048:	6078      	str	r0, [r7, #4]
 800204a:	6039      	str	r1, [r7, #0]
	std::swap(_M_functor, __x._M_functor);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	683a      	ldr	r2, [r7, #0]
 8002050:	4611      	mov	r1, r2
 8002052:	4618      	mov	r0, r3
 8002054:	f000 f830 	bl	80020b8 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
	std::swap(_M_manager, __x._M_manager);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	f103 0208 	add.w	r2, r3, #8
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	3308      	adds	r3, #8
 8002062:	4619      	mov	r1, r3
 8002064:	4610      	mov	r0, r2
 8002066:	f000 f858 	bl	800211a <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>
	std::swap(_M_invoker, __x._M_invoker);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	f103 020c 	add.w	r2, r3, #12
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	330c      	adds	r3, #12
 8002074:	4619      	mov	r1, r3
 8002076:	4610      	mov	r0, r2
 8002078:	f000 f8ea 	bl	8002250 <_ZSt4swapIPFvRKSt9_Any_dataOmEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISA_ESt18is_move_assignableISA_EEE5valueEvE4typeERSA_SK_>
      }
 800207c:	bf00      	nop
 800207e:	3708      	adds	r7, #8
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}

08002084 <_ZNKSt8functionIFhhPhmEEcvbEv>:
      explicit operator bool() const noexcept
 8002084:	b580      	push	{r7, lr}
 8002086:	b082      	sub	sp, #8
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
      { return !_M_empty(); }
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	4618      	mov	r0, r3
 8002090:	f7ff fd59 	bl	8001b46 <_ZNKSt14_Function_base8_M_emptyEv>
 8002094:	4603      	mov	r3, r0
 8002096:	f083 0301 	eor.w	r3, r3, #1
 800209a:	b2db      	uxtb	r3, r3
 800209c:	4618      	mov	r0, r3
 800209e:	3708      	adds	r7, #8
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}

080020a4 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 80020a4:	b480      	push	{r7}
 80020a6:	b083      	sub	sp, #12
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	4618      	mov	r0, r3
 80020b0:	370c      	adds	r7, #12
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bc80      	pop	{r7}
 80020b6:	4770      	bx	lr

080020b8 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    inline
#if __cplusplus >= 201103L
    typename enable_if<__and_<__not_<__is_tuple_like<_Tp>>,
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
    swap(_Tp& __a, _Tp& __b)
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b084      	sub	sp, #16
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
 80020c0:	6039      	str	r1, [r7, #0]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80020c2:	6878      	ldr	r0, [r7, #4]
 80020c4:	f7ff ffee 	bl	80020a4 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 80020c8:	4602      	mov	r2, r0
 80020ca:	f107 0308 	add.w	r3, r7, #8
 80020ce:	e892 0003 	ldmia.w	r2, {r0, r1}
 80020d2:	e883 0003 	stmia.w	r3, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 80020d6:	6838      	ldr	r0, [r7, #0]
 80020d8:	f7ff ffe4 	bl	80020a4 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 80020dc:	4602      	mov	r2, r0
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80020e4:	e883 0003 	stmia.w	r3, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 80020e8:	f107 0308 	add.w	r3, r7, #8
 80020ec:	4618      	mov	r0, r3
 80020ee:	f7ff ffd9 	bl	80020a4 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 80020f2:	4602      	mov	r2, r0
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80020fa:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 80020fe:	bf00      	nop
 8002100:	3710      	adds	r7, #16
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}

08002106 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>:
    move(_Tp&& __t) noexcept
 8002106:	b480      	push	{r7}
 8002108:	b083      	sub	sp, #12
 800210a:	af00      	add	r7, sp, #0
 800210c:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	4618      	mov	r0, r3
 8002112:	370c      	adds	r7, #12
 8002114:	46bd      	mov	sp, r7
 8002116:	bc80      	pop	{r7}
 8002118:	4770      	bx	lr

0800211a <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>:
    swap(_Tp& __a, _Tp& __b)
 800211a:	b580      	push	{r7, lr}
 800211c:	b084      	sub	sp, #16
 800211e:	af00      	add	r7, sp, #0
 8002120:	6078      	str	r0, [r7, #4]
 8002122:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8002124:	6878      	ldr	r0, [r7, #4]
 8002126:	f7ff ffee 	bl	8002106 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 800212a:	4603      	mov	r3, r0
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 8002130:	6838      	ldr	r0, [r7, #0]
 8002132:	f7ff ffe8 	bl	8002106 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 8002136:	4603      	mov	r3, r0
 8002138:	681a      	ldr	r2, [r3, #0]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 800213e:	f107 030c 	add.w	r3, r7, #12
 8002142:	4618      	mov	r0, r3
 8002144:	f7ff ffdf 	bl	8002106 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 8002148:	4603      	mov	r3, r0
 800214a:	681a      	ldr	r2, [r3, #0]
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	601a      	str	r2, [r3, #0]
    }
 8002150:	bf00      	nop
 8002152:	3710      	adds	r7, #16
 8002154:	46bd      	mov	sp, r7
 8002156:	bd80      	pop	{r7, pc}

08002158 <_ZSt4moveIRPFhRKSt9_Any_dataOhOPhOmEEONSt16remove_referenceIT_E4typeEOSB_>:
    move(_Tp&& __t) noexcept
 8002158:	b480      	push	{r7}
 800215a:	b083      	sub	sp, #12
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	4618      	mov	r0, r3
 8002164:	370c      	adds	r7, #12
 8002166:	46bd      	mov	sp, r7
 8002168:	bc80      	pop	{r7}
 800216a:	4770      	bx	lr

0800216c <_ZSt4swapIPFhRKSt9_Any_dataOhOPhOmEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISD_ESt18is_move_assignableISD_EEE5valueEvE4typeERSD_SN_>:
    swap(_Tp& __a, _Tp& __b)
 800216c:	b580      	push	{r7, lr}
 800216e:	b084      	sub	sp, #16
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
 8002174:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8002176:	6878      	ldr	r0, [r7, #4]
 8002178:	f7ff ffee 	bl	8002158 <_ZSt4moveIRPFhRKSt9_Any_dataOhOPhOmEEONSt16remove_referenceIT_E4typeEOSB_>
 800217c:	4603      	mov	r3, r0
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 8002182:	6838      	ldr	r0, [r7, #0]
 8002184:	f7ff ffe8 	bl	8002158 <_ZSt4moveIRPFhRKSt9_Any_dataOhOPhOmEEONSt16remove_referenceIT_E4typeEOSB_>
 8002188:	4603      	mov	r3, r0
 800218a:	681a      	ldr	r2, [r3, #0]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8002190:	f107 030c 	add.w	r3, r7, #12
 8002194:	4618      	mov	r0, r3
 8002196:	f7ff ffdf 	bl	8002158 <_ZSt4moveIRPFhRKSt9_Any_dataOhOPhOmEEONSt16remove_referenceIT_E4typeEOSB_>
 800219a:	4603      	mov	r3, r0
 800219c:	681a      	ldr	r2, [r3, #0]
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	601a      	str	r2, [r3, #0]
    }
 80021a2:	bf00      	nop
 80021a4:	3710      	adds	r7, #16
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}

080021aa <_ZNKSt8functionIFhhPKhmEEcvbEv>:
      explicit operator bool() const noexcept
 80021aa:	b580      	push	{r7, lr}
 80021ac:	b082      	sub	sp, #8
 80021ae:	af00      	add	r7, sp, #0
 80021b0:	6078      	str	r0, [r7, #4]
      { return !_M_empty(); }
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	4618      	mov	r0, r3
 80021b6:	f7ff fcc6 	bl	8001b46 <_ZNKSt14_Function_base8_M_emptyEv>
 80021ba:	4603      	mov	r3, r0
 80021bc:	f083 0301 	eor.w	r3, r3, #1
 80021c0:	b2db      	uxtb	r3, r3
 80021c2:	4618      	mov	r0, r3
 80021c4:	3708      	adds	r7, #8
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}

080021ca <_ZSt4moveIRPFhRKSt9_Any_dataOhOPKhOmEEONSt16remove_referenceIT_E4typeEOSC_>:
    move(_Tp&& __t) noexcept
 80021ca:	b480      	push	{r7}
 80021cc:	b083      	sub	sp, #12
 80021ce:	af00      	add	r7, sp, #0
 80021d0:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	4618      	mov	r0, r3
 80021d6:	370c      	adds	r7, #12
 80021d8:	46bd      	mov	sp, r7
 80021da:	bc80      	pop	{r7}
 80021dc:	4770      	bx	lr

080021de <_ZSt4swapIPFhRKSt9_Any_dataOhOPKhOmEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISE_ESt18is_move_assignableISE_EEE5valueEvE4typeERSE_SO_>:
    swap(_Tp& __a, _Tp& __b)
 80021de:	b580      	push	{r7, lr}
 80021e0:	b084      	sub	sp, #16
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	6078      	str	r0, [r7, #4]
 80021e6:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80021e8:	6878      	ldr	r0, [r7, #4]
 80021ea:	f7ff ffee 	bl	80021ca <_ZSt4moveIRPFhRKSt9_Any_dataOhOPKhOmEEONSt16remove_referenceIT_E4typeEOSC_>
 80021ee:	4603      	mov	r3, r0
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 80021f4:	6838      	ldr	r0, [r7, #0]
 80021f6:	f7ff ffe8 	bl	80021ca <_ZSt4moveIRPFhRKSt9_Any_dataOhOPKhOmEEONSt16remove_referenceIT_E4typeEOSC_>
 80021fa:	4603      	mov	r3, r0
 80021fc:	681a      	ldr	r2, [r3, #0]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8002202:	f107 030c 	add.w	r3, r7, #12
 8002206:	4618      	mov	r0, r3
 8002208:	f7ff ffdf 	bl	80021ca <_ZSt4moveIRPFhRKSt9_Any_dataOhOPKhOmEEONSt16remove_referenceIT_E4typeEOSC_>
 800220c:	4603      	mov	r3, r0
 800220e:	681a      	ldr	r2, [r3, #0]
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	601a      	str	r2, [r3, #0]
    }
 8002214:	bf00      	nop
 8002216:	3710      	adds	r7, #16
 8002218:	46bd      	mov	sp, r7
 800221a:	bd80      	pop	{r7, pc}

0800221c <_ZNKSt8functionIFvmEEcvbEv>:
      explicit operator bool() const noexcept
 800221c:	b580      	push	{r7, lr}
 800221e:	b082      	sub	sp, #8
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
      { return !_M_empty(); }
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	4618      	mov	r0, r3
 8002228:	f7ff fc8d 	bl	8001b46 <_ZNKSt14_Function_base8_M_emptyEv>
 800222c:	4603      	mov	r3, r0
 800222e:	f083 0301 	eor.w	r3, r3, #1
 8002232:	b2db      	uxtb	r3, r3
 8002234:	4618      	mov	r0, r3
 8002236:	3708      	adds	r7, #8
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}

0800223c <_ZSt4moveIRPFvRKSt9_Any_dataOmEEONSt16remove_referenceIT_E4typeEOS8_>:
    move(_Tp&& __t) noexcept
 800223c:	b480      	push	{r7}
 800223e:	b083      	sub	sp, #12
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	4618      	mov	r0, r3
 8002248:	370c      	adds	r7, #12
 800224a:	46bd      	mov	sp, r7
 800224c:	bc80      	pop	{r7}
 800224e:	4770      	bx	lr

08002250 <_ZSt4swapIPFvRKSt9_Any_dataOmEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISA_ESt18is_move_assignableISA_EEE5valueEvE4typeERSA_SK_>:
    swap(_Tp& __a, _Tp& __b)
 8002250:	b580      	push	{r7, lr}
 8002252:	b084      	sub	sp, #16
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
 8002258:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 800225a:	6878      	ldr	r0, [r7, #4]
 800225c:	f7ff ffee 	bl	800223c <_ZSt4moveIRPFvRKSt9_Any_dataOmEEONSt16remove_referenceIT_E4typeEOS8_>
 8002260:	4603      	mov	r3, r0
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 8002266:	6838      	ldr	r0, [r7, #0]
 8002268:	f7ff ffe8 	bl	800223c <_ZSt4moveIRPFvRKSt9_Any_dataOmEEONSt16remove_referenceIT_E4typeEOS8_>
 800226c:	4603      	mov	r3, r0
 800226e:	681a      	ldr	r2, [r3, #0]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8002274:	f107 030c 	add.w	r3, r7, #12
 8002278:	4618      	mov	r0, r3
 800227a:	f7ff ffdf 	bl	800223c <_ZSt4moveIRPFvRKSt9_Any_dataOmEEONSt16remove_referenceIT_E4typeEOS8_>
 800227e:	4603      	mov	r3, r0
 8002280:	681a      	ldr	r2, [r3, #0]
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	601a      	str	r2, [r3, #0]
    }
 8002286:	bf00      	nop
 8002288:	3710      	adds	r7, #16
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}
	...

08002290 <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t>:
#define SPI_SR_BSY                      7
#define SPI_SR_FRE                      8



inline uint8_t gpio_baseAddr_to_code(GPIO_RegDef_t *Port) {
 8002290:	b480      	push	{r7}
 8002292:	b083      	sub	sp, #12
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
			 (Port == GPIOC) ? 0x02 : \
			 (Port == GPIOD) ? 0x03 : \
			 (Port == GPIOE) ? 0x04 : \
			 (Port == GPIOF) ? 0x05 : \
			 (Port == GPIOG) ? 0x06 : \
			 (Port == GPIOH) ? 0x07 : 0x00 );
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	4a1a      	ldr	r2, [pc, #104]	; (8002304 <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t+0x74>)
 800229c:	4293      	cmp	r3, r2
 800229e:	d02b      	beq.n	80022f8 <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t+0x68>
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	4a19      	ldr	r2, [pc, #100]	; (8002308 <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t+0x78>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d025      	beq.n	80022f4 <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t+0x64>
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	4a18      	ldr	r2, [pc, #96]	; (800230c <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t+0x7c>)
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d01f      	beq.n	80022f0 <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t+0x60>
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	4a17      	ldr	r2, [pc, #92]	; (8002310 <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t+0x80>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d019      	beq.n	80022ec <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t+0x5c>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	4a16      	ldr	r2, [pc, #88]	; (8002314 <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t+0x84>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d013      	beq.n	80022e8 <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t+0x58>
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	4a15      	ldr	r2, [pc, #84]	; (8002318 <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t+0x88>)
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d00d      	beq.n	80022e4 <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t+0x54>
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	4a14      	ldr	r2, [pc, #80]	; (800231c <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t+0x8c>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d007      	beq.n	80022e0 <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t+0x50>
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	4a13      	ldr	r2, [pc, #76]	; (8002320 <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t+0x90>)
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d101      	bne.n	80022dc <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t+0x4c>
 80022d8:	2307      	movs	r3, #7
 80022da:	e00e      	b.n	80022fa <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t+0x6a>
 80022dc:	2300      	movs	r3, #0
 80022de:	e00c      	b.n	80022fa <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t+0x6a>
 80022e0:	2306      	movs	r3, #6
 80022e2:	e00a      	b.n	80022fa <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t+0x6a>
 80022e4:	2305      	movs	r3, #5
 80022e6:	e008      	b.n	80022fa <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t+0x6a>
 80022e8:	2304      	movs	r3, #4
 80022ea:	e006      	b.n	80022fa <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t+0x6a>
 80022ec:	2303      	movs	r3, #3
 80022ee:	e004      	b.n	80022fa <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t+0x6a>
 80022f0:	2302      	movs	r3, #2
 80022f2:	e002      	b.n	80022fa <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t+0x6a>
 80022f4:	2301      	movs	r3, #1
 80022f6:	e000      	b.n	80022fa <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t+0x6a>
 80022f8:	2300      	movs	r3, #0
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	370c      	adds	r7, #12
 80022fe:	46bd      	mov	sp, r7
 8002300:	bc80      	pop	{r7}
 8002302:	4770      	bx	lr
 8002304:	40020000 	.word	0x40020000
 8002308:	40020400 	.word	0x40020400
 800230c:	40020800 	.word	0x40020800
 8002310:	40020c00 	.word	0x40020c00
 8002314:	40021000 	.word	0x40021000
 8002318:	40021400 	.word	0x40021400
 800231c:	40021800 	.word	0x40021800
 8002320:	40021c00 	.word	0x40021c00

08002324 <_ZL14get_irq_pinNumh>:
	void GPIO_IRQInterruptConfig(const uint8_t IRQNumber, const uint8_t EnorDi);
	void GPIO_IRQPriorityConfig(const uint8_t IRQNumber, const uint8_t IRQPriority);

};

static inline uint8_t get_irq_pinNum(uint8_t PinNumber) {
 8002324:	b480      	push	{r7}
 8002326:	b083      	sub	sp, #12
 8002328:	af00      	add	r7, sp, #0
 800232a:	4603      	mov	r3, r0
 800232c:	71fb      	strb	r3, [r7, #7]
    return (PinNumber < 5)  ? PinNumber + 6 : \
           (PinNumber < 10) ? IRQ_NO_EXTI9_5 : \
           (PinNumber < 16) ? IRQ_NO_EXTI15_10 : 0;
 800232e:	79fb      	ldrb	r3, [r7, #7]
 8002330:	2b04      	cmp	r3, #4
 8002332:	d803      	bhi.n	800233c <_ZL14get_irq_pinNumh+0x18>
 8002334:	79fb      	ldrb	r3, [r7, #7]
 8002336:	3306      	adds	r3, #6
 8002338:	b2db      	uxtb	r3, r3
 800233a:	e00a      	b.n	8002352 <_ZL14get_irq_pinNumh+0x2e>
 800233c:	79fb      	ldrb	r3, [r7, #7]
 800233e:	2b09      	cmp	r3, #9
 8002340:	d906      	bls.n	8002350 <_ZL14get_irq_pinNumh+0x2c>
 8002342:	79fb      	ldrb	r3, [r7, #7]
 8002344:	2b0f      	cmp	r3, #15
 8002346:	d801      	bhi.n	800234c <_ZL14get_irq_pinNumh+0x28>
 8002348:	2328      	movs	r3, #40	; 0x28
 800234a:	e002      	b.n	8002352 <_ZL14get_irq_pinNumh+0x2e>
 800234c:	2300      	movs	r3, #0
 800234e:	e000      	b.n	8002352 <_ZL14get_irq_pinNumh+0x2e>
 8002350:	2317      	movs	r3, #23
}
 8002352:	4618      	mov	r0, r3
 8002354:	370c      	adds	r7, #12
 8002356:	46bd      	mov	sp, r7
 8002358:	bc80      	pop	{r7}
 800235a:	4770      	bx	lr

0800235c <_ZN12GPIO_HandlerC1EP13GPIO_RegDef_thhhhhhh>:
/*********************************************************************
 * @class      		  - GPIO_Handler
 *
 * @brief             - Constructor, initialize GPIO, clock, IRQ, Alt Function
 **********************************************************************/
GPIO_Handler::GPIO_Handler(
 800235c:	b580      	push	{r7, lr}
 800235e:	b086      	sub	sp, #24
 8002360:	af00      	add	r7, sp, #0
 8002362:	60f8      	str	r0, [r7, #12]
 8002364:	60b9      	str	r1, [r7, #8]
 8002366:	4611      	mov	r1, r2
 8002368:	461a      	mov	r2, r3
 800236a:	460b      	mov	r3, r1
 800236c:	71fb      	strb	r3, [r7, #7]
 800236e:	4613      	mov	r3, r2
 8002370:	71bb      	strb	r3, [r7, #6]
		uint8_t GPIO_PinMode,
		uint8_t GPIO_PinSpeed,
		uint8_t GPIO_IRQ_Priority,
		uint8_t GPIO_PinOPType,
		uint8_t GPIO_PinPuPdControl,
		uint8_t GPIO_PinAltFunMode) {
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	461a      	mov	r2, r3
 8002376:	2300      	movs	r3, #0
 8002378:	6013      	str	r3, [r2, #0]
 800237a:	6053      	str	r3, [r2, #4]
 800237c:	6093      	str	r3, [r2, #8]
	GPIOx_.pGPIOx = ((GPIO_RegDef_t *)(GPIOx_ADDR));
 800237e:	68ba      	ldr	r2, [r7, #8]
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	601a      	str	r2, [r3, #0]
	GPIOx_.GPIO_PinConfig.GPIO_PinNumber = GPIO_PinNumber;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	79fa      	ldrb	r2, [r7, #7]
 8002388:	711a      	strb	r2, [r3, #4]
	GPIOx_.GPIO_PinConfig.GPIO_PinMode = GPIO_PinMode;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	79ba      	ldrb	r2, [r7, #6]
 800238e:	715a      	strb	r2, [r3, #5]
	GPIOx_.GPIO_PinConfig.GPIO_PinSpeed = GPIO_PinSpeed;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002396:	719a      	strb	r2, [r3, #6]
	GPIOx_.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PinPuPdControl;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800239e:	71da      	strb	r2, [r3, #7]
	GPIOx_.GPIO_PinConfig.GPIO_PinOPType = GPIO_PinOPType;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80023a6:	721a      	strb	r2, [r3, #8]
	GPIOx_.GPIO_PinConfig.GPIO_PinAltFunMode = GPIO_PinAltFunMode;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80023ae:	725a      	strb	r2, [r3, #9]
	GPIO_PeriClockControl();
 80023b0:	68f8      	ldr	r0, [r7, #12]
 80023b2:	f000 f82b 	bl	800240c <_ZN12GPIO_Handler21GPIO_PeriClockControlEv>
	GPIO_Init();
 80023b6:	68f8      	ldr	r0, [r7, #12]
 80023b8:	f000 f8a2 	bl	8002500 <_ZN12GPIO_Handler9GPIO_InitEv>
	// Configure interrupt
	if(GPIO_PinMode >= GPIO_MODE_IT_FT) {
 80023bc:	79bb      	ldrb	r3, [r7, #6]
 80023be:	2b03      	cmp	r3, #3
 80023c0:	d912      	bls.n	80023e8 <_ZN12GPIO_HandlerC1EP13GPIO_RegDef_thhhhhhh+0x8c>
		uint8_t IRQ_number = get_irq_pinNum(GPIO_PinNumber);
 80023c2:	79fb      	ldrb	r3, [r7, #7]
 80023c4:	4618      	mov	r0, r3
 80023c6:	f7ff ffad 	bl	8002324 <_ZL14get_irq_pinNumh>
 80023ca:	4603      	mov	r3, r0
 80023cc:	75fb      	strb	r3, [r7, #23]
		GPIO_IRQInterruptConfig(IRQ_number, ENABLE);
 80023ce:	7dfb      	ldrb	r3, [r7, #23]
 80023d0:	2201      	movs	r2, #1
 80023d2:	4619      	mov	r1, r3
 80023d4:	68f8      	ldr	r0, [r7, #12]
 80023d6:	f000 fabd 	bl	8002954 <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh>
		GPIO_IRQPriorityConfig(IRQ_number, GPIO_IRQ_Priority);
 80023da:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80023de:	7dfb      	ldrb	r3, [r7, #23]
 80023e0:	4619      	mov	r1, r3
 80023e2:	68f8      	ldr	r0, [r7, #12]
 80023e4:	f000 fb3a 	bl	8002a5c <_ZN12GPIO_Handler22GPIO_IRQPriorityConfigEhh>
	}
}
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	4618      	mov	r0, r3
 80023ec:	3718      	adds	r7, #24
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}

080023f2 <_ZN12GPIO_HandlerD1Ev>:
 *
 * @return None
 *
 * @Node: Be careful when using many Peripheral device in the same PORT
 **********************************************************************/
GPIO_Handler::~GPIO_Handler() {
 80023f2:	b580      	push	{r7, lr}
 80023f4:	b082      	sub	sp, #8
 80023f6:	af00      	add	r7, sp, #0
 80023f8:	6078      	str	r0, [r7, #4]
	GPIO_DeInit();
 80023fa:	6878      	ldr	r0, [r7, #4]
 80023fc:	f000 f9d6 	bl	80027ac <_ZN12GPIO_Handler11GPIO_DeInitEv>
}
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	4618      	mov	r0, r3
 8002404:	3708      	adds	r7, #8
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}
	...

0800240c <_ZN12GPIO_Handler21GPIO_PeriClockControlEv>:

// peripheral clock setup
void GPIO_Handler::GPIO_PeriClockControl() {
 800240c:	b480      	push	{r7}
 800240e:	b083      	sub	sp, #12
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
	if (GPIOx_.pGPIOx == GPIOA) {
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a30      	ldr	r2, [pc, #192]	; (80024dc <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xd0>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d106      	bne.n	800242c <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0x20>
		GPIOA_PCLK_EN();
 800241e:	4b30      	ldr	r3, [pc, #192]	; (80024e0 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xd4>)
 8002420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002422:	4a2f      	ldr	r2, [pc, #188]	; (80024e0 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xd4>)
 8002424:	f043 0301 	orr.w	r3, r3, #1
 8002428:	6313      	str	r3, [r2, #48]	; 0x30
	} else if (GPIOx_.pGPIOx == GPIOG) {
		GPIOG_PCLK_EN();
	} else if (GPIOx_.pGPIOx == GPIOH) {
		GPIOH_PCLK_EN();
	}
}
 800242a:	e052      	b.n	80024d2 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xc6>
	} else if (GPIOx_.pGPIOx == GPIOB) {
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a2c      	ldr	r2, [pc, #176]	; (80024e4 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xd8>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d106      	bne.n	8002444 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0x38>
		GPIOB_PCLK_EN();
 8002436:	4b2a      	ldr	r3, [pc, #168]	; (80024e0 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xd4>)
 8002438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800243a:	4a29      	ldr	r2, [pc, #164]	; (80024e0 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xd4>)
 800243c:	f043 0302 	orr.w	r3, r3, #2
 8002440:	6313      	str	r3, [r2, #48]	; 0x30
}
 8002442:	e046      	b.n	80024d2 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xc6>
	} else if (GPIOx_.pGPIOx == GPIOC) {
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a27      	ldr	r2, [pc, #156]	; (80024e8 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xdc>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d106      	bne.n	800245c <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0x50>
		GPIOC_PCLK_EN();
 800244e:	4b24      	ldr	r3, [pc, #144]	; (80024e0 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xd4>)
 8002450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002452:	4a23      	ldr	r2, [pc, #140]	; (80024e0 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xd4>)
 8002454:	f043 0304 	orr.w	r3, r3, #4
 8002458:	6313      	str	r3, [r2, #48]	; 0x30
}
 800245a:	e03a      	b.n	80024d2 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xc6>
	} else if (GPIOx_.pGPIOx == GPIOD) {
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a22      	ldr	r2, [pc, #136]	; (80024ec <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xe0>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d106      	bne.n	8002474 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0x68>
		GPIOD_PCLK_EN();
 8002466:	4b1e      	ldr	r3, [pc, #120]	; (80024e0 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xd4>)
 8002468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800246a:	4a1d      	ldr	r2, [pc, #116]	; (80024e0 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xd4>)
 800246c:	f043 0308 	orr.w	r3, r3, #8
 8002470:	6313      	str	r3, [r2, #48]	; 0x30
}
 8002472:	e02e      	b.n	80024d2 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xc6>
	} else if (GPIOx_.pGPIOx == GPIOE) {
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a1d      	ldr	r2, [pc, #116]	; (80024f0 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xe4>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d106      	bne.n	800248c <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0x80>
		GPIOE_PCLK_EN();
 800247e:	4b18      	ldr	r3, [pc, #96]	; (80024e0 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xd4>)
 8002480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002482:	4a17      	ldr	r2, [pc, #92]	; (80024e0 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xd4>)
 8002484:	f043 0310 	orr.w	r3, r3, #16
 8002488:	6313      	str	r3, [r2, #48]	; 0x30
}
 800248a:	e022      	b.n	80024d2 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xc6>
	} else if (GPIOx_.pGPIOx == GPIOF) {
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a18      	ldr	r2, [pc, #96]	; (80024f4 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xe8>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d106      	bne.n	80024a4 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0x98>
		GPIOF_PCLK_EN();
 8002496:	4b12      	ldr	r3, [pc, #72]	; (80024e0 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xd4>)
 8002498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800249a:	4a11      	ldr	r2, [pc, #68]	; (80024e0 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xd4>)
 800249c:	f043 0320 	orr.w	r3, r3, #32
 80024a0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80024a2:	e016      	b.n	80024d2 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xc6>
	} else if (GPIOx_.pGPIOx == GPIOG) {
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a13      	ldr	r2, [pc, #76]	; (80024f8 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xec>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d106      	bne.n	80024bc <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xb0>
		GPIOG_PCLK_EN();
 80024ae:	4b0c      	ldr	r3, [pc, #48]	; (80024e0 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xd4>)
 80024b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b2:	4a0b      	ldr	r2, [pc, #44]	; (80024e0 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xd4>)
 80024b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80024b8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80024ba:	e00a      	b.n	80024d2 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xc6>
	} else if (GPIOx_.pGPIOx == GPIOH) {
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a0e      	ldr	r2, [pc, #56]	; (80024fc <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xf0>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d105      	bne.n	80024d2 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xc6>
		GPIOH_PCLK_EN();
 80024c6:	4b06      	ldr	r3, [pc, #24]	; (80024e0 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xd4>)
 80024c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ca:	4a05      	ldr	r2, [pc, #20]	; (80024e0 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xd4>)
 80024cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024d0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80024d2:	bf00      	nop
 80024d4:	370c      	adds	r7, #12
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bc80      	pop	{r7}
 80024da:	4770      	bx	lr
 80024dc:	40020000 	.word	0x40020000
 80024e0:	40023800 	.word	0x40023800
 80024e4:	40020400 	.word	0x40020400
 80024e8:	40020800 	.word	0x40020800
 80024ec:	40020c00 	.word	0x40020c00
 80024f0:	40021000 	.word	0x40021000
 80024f4:	40021400 	.word	0x40021400
 80024f8:	40021800 	.word	0x40021800
 80024fc:	40021c00 	.word	0x40021c00

08002500 <_ZN12GPIO_Handler9GPIO_InitEv>:
 *
 * @param None
 *
 * @return None
 **********************************************************************/
void GPIO_Handler::GPIO_Init() {
 8002500:	b580      	push	{r7, lr}
 8002502:	b086      	sub	sp, #24
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
	uint32_t temp = 0;
 8002508:	2300      	movs	r3, #0
 800250a:	617b      	str	r3, [r7, #20]
	// 1. configure the mode of gpio pin
	if(GPIOx_.GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG) {
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	795b      	ldrb	r3, [r3, #5]
 8002510:	2b03      	cmp	r3, #3
 8002512:	d820      	bhi.n	8002556 <_ZN12GPIO_Handler9GPIO_InitEv+0x56>
		// the non interrupt mode
		temp = GPIOx_.GPIO_PinConfig.GPIO_PinMode << (2 * GPIOx_.GPIO_PinConfig.GPIO_PinNumber);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	795b      	ldrb	r3, [r3, #5]
 8002518:	461a      	mov	r2, r3
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	791b      	ldrb	r3, [r3, #4]
 800251e:	005b      	lsls	r3, r3, #1
 8002520:	fa02 f303 	lsl.w	r3, r2, r3
 8002524:	617b      	str	r3, [r7, #20]
		GPIOx_.pGPIOx->MODER &= ~(0x3 << (2 * GPIOx_.GPIO_PinConfig.GPIO_PinNumber)); // clearing
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	681a      	ldr	r2, [r3, #0]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	791b      	ldrb	r3, [r3, #4]
 8002530:	005b      	lsls	r3, r3, #1
 8002532:	2103      	movs	r1, #3
 8002534:	fa01 f303 	lsl.w	r3, r1, r3
 8002538:	43db      	mvns	r3, r3
 800253a:	4619      	mov	r1, r3
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	400a      	ands	r2, r1
 8002542:	601a      	str	r2, [r3, #0]
		GPIOx_.pGPIOx->MODER |= temp;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	6819      	ldr	r1, [r3, #0]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	697a      	ldr	r2, [r7, #20]
 8002550:	430a      	orrs	r2, r1
 8002552:	601a      	str	r2, [r3, #0]
 8002554:	e083      	b.n	800265e <_ZN12GPIO_Handler9GPIO_InitEv+0x15e>
	}
	else {
		// interrupt mode
		if(GPIO_MODE_IT_FT == GPIOx_.GPIO_PinConfig.GPIO_PinMode) {
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	795b      	ldrb	r3, [r3, #5]
 800255a:	2b04      	cmp	r3, #4
 800255c:	d117      	bne.n	800258e <_ZN12GPIO_Handler9GPIO_InitEv+0x8e>
			// 1. configure the FTSR
			EXTI->FTSR |= (1 << GPIOx_.GPIO_PinConfig.GPIO_PinNumber);
 800255e:	4b90      	ldr	r3, [pc, #576]	; (80027a0 <_ZN12GPIO_Handler9GPIO_InitEv+0x2a0>)
 8002560:	68db      	ldr	r3, [r3, #12]
 8002562:	687a      	ldr	r2, [r7, #4]
 8002564:	7912      	ldrb	r2, [r2, #4]
 8002566:	4611      	mov	r1, r2
 8002568:	2201      	movs	r2, #1
 800256a:	408a      	lsls	r2, r1
 800256c:	4611      	mov	r1, r2
 800256e:	4a8c      	ldr	r2, [pc, #560]	; (80027a0 <_ZN12GPIO_Handler9GPIO_InitEv+0x2a0>)
 8002570:	430b      	orrs	r3, r1
 8002572:	60d3      	str	r3, [r2, #12]

			// clear the corresponding RTSR bit
			EXTI->RTSR &= ~(1 << GPIOx_.GPIO_PinConfig.GPIO_PinNumber);
 8002574:	4b8a      	ldr	r3, [pc, #552]	; (80027a0 <_ZN12GPIO_Handler9GPIO_InitEv+0x2a0>)
 8002576:	689b      	ldr	r3, [r3, #8]
 8002578:	687a      	ldr	r2, [r7, #4]
 800257a:	7912      	ldrb	r2, [r2, #4]
 800257c:	4611      	mov	r1, r2
 800257e:	2201      	movs	r2, #1
 8002580:	408a      	lsls	r2, r1
 8002582:	43d2      	mvns	r2, r2
 8002584:	4611      	mov	r1, r2
 8002586:	4a86      	ldr	r2, [pc, #536]	; (80027a0 <_ZN12GPIO_Handler9GPIO_InitEv+0x2a0>)
 8002588:	400b      	ands	r3, r1
 800258a:	6093      	str	r3, [r2, #8]
 800258c:	e035      	b.n	80025fa <_ZN12GPIO_Handler9GPIO_InitEv+0xfa>

		}
		else if (GPIO_MODE_IT_RT == GPIOx_.GPIO_PinConfig.GPIO_PinMode) {
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	795b      	ldrb	r3, [r3, #5]
 8002592:	2b05      	cmp	r3, #5
 8002594:	d117      	bne.n	80025c6 <_ZN12GPIO_Handler9GPIO_InitEv+0xc6>
			// 1. configure the RTSR
			EXTI->RTSR |= (1 << GPIOx_.GPIO_PinConfig.GPIO_PinNumber);
 8002596:	4b82      	ldr	r3, [pc, #520]	; (80027a0 <_ZN12GPIO_Handler9GPIO_InitEv+0x2a0>)
 8002598:	689b      	ldr	r3, [r3, #8]
 800259a:	687a      	ldr	r2, [r7, #4]
 800259c:	7912      	ldrb	r2, [r2, #4]
 800259e:	4611      	mov	r1, r2
 80025a0:	2201      	movs	r2, #1
 80025a2:	408a      	lsls	r2, r1
 80025a4:	4611      	mov	r1, r2
 80025a6:	4a7e      	ldr	r2, [pc, #504]	; (80027a0 <_ZN12GPIO_Handler9GPIO_InitEv+0x2a0>)
 80025a8:	430b      	orrs	r3, r1
 80025aa:	6093      	str	r3, [r2, #8]

			// clear the corresponding RTSR bit
			EXTI->FTSR &= ~(1 << GPIOx_.GPIO_PinConfig.GPIO_PinNumber);
 80025ac:	4b7c      	ldr	r3, [pc, #496]	; (80027a0 <_ZN12GPIO_Handler9GPIO_InitEv+0x2a0>)
 80025ae:	68db      	ldr	r3, [r3, #12]
 80025b0:	687a      	ldr	r2, [r7, #4]
 80025b2:	7912      	ldrb	r2, [r2, #4]
 80025b4:	4611      	mov	r1, r2
 80025b6:	2201      	movs	r2, #1
 80025b8:	408a      	lsls	r2, r1
 80025ba:	43d2      	mvns	r2, r2
 80025bc:	4611      	mov	r1, r2
 80025be:	4a78      	ldr	r2, [pc, #480]	; (80027a0 <_ZN12GPIO_Handler9GPIO_InitEv+0x2a0>)
 80025c0:	400b      	ands	r3, r1
 80025c2:	60d3      	str	r3, [r2, #12]
 80025c4:	e019      	b.n	80025fa <_ZN12GPIO_Handler9GPIO_InitEv+0xfa>
		}
		else if (GPIO_MODE_IT_RFT == GPIOx_.GPIO_PinConfig.GPIO_PinMode) {
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	795b      	ldrb	r3, [r3, #5]
 80025ca:	2b06      	cmp	r3, #6
 80025cc:	d115      	bne.n	80025fa <_ZN12GPIO_Handler9GPIO_InitEv+0xfa>
			// 1. configure both FTSR and RTSR
			EXTI->FTSR |= (1 << GPIOx_.GPIO_PinConfig.GPIO_PinNumber);
 80025ce:	4b74      	ldr	r3, [pc, #464]	; (80027a0 <_ZN12GPIO_Handler9GPIO_InitEv+0x2a0>)
 80025d0:	68db      	ldr	r3, [r3, #12]
 80025d2:	687a      	ldr	r2, [r7, #4]
 80025d4:	7912      	ldrb	r2, [r2, #4]
 80025d6:	4611      	mov	r1, r2
 80025d8:	2201      	movs	r2, #1
 80025da:	408a      	lsls	r2, r1
 80025dc:	4611      	mov	r1, r2
 80025de:	4a70      	ldr	r2, [pc, #448]	; (80027a0 <_ZN12GPIO_Handler9GPIO_InitEv+0x2a0>)
 80025e0:	430b      	orrs	r3, r1
 80025e2:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= (1 << GPIOx_.GPIO_PinConfig.GPIO_PinNumber);
 80025e4:	4b6e      	ldr	r3, [pc, #440]	; (80027a0 <_ZN12GPIO_Handler9GPIO_InitEv+0x2a0>)
 80025e6:	689b      	ldr	r3, [r3, #8]
 80025e8:	687a      	ldr	r2, [r7, #4]
 80025ea:	7912      	ldrb	r2, [r2, #4]
 80025ec:	4611      	mov	r1, r2
 80025ee:	2201      	movs	r2, #1
 80025f0:	408a      	lsls	r2, r1
 80025f2:	4611      	mov	r1, r2
 80025f4:	4a6a      	ldr	r2, [pc, #424]	; (80027a0 <_ZN12GPIO_Handler9GPIO_InitEv+0x2a0>)
 80025f6:	430b      	orrs	r3, r1
 80025f8:	6093      	str	r3, [r2, #8]
		}

		// 2. configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 = GPIOx_.GPIO_PinConfig.GPIO_PinNumber >> 2;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	791b      	ldrb	r3, [r3, #4]
 80025fe:	109b      	asrs	r3, r3, #2
 8002600:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = GPIOx_.GPIO_PinConfig.GPIO_PinNumber % 4;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	791b      	ldrb	r3, [r3, #4]
 8002606:	f003 0303 	and.w	r3, r3, #3
 800260a:	74bb      	strb	r3, [r7, #18]
		uint8_t portCode = gpio_baseAddr_to_code(GPIOx_.pGPIOx);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4618      	mov	r0, r3
 8002612:	f7ff fe3d 	bl	8002290 <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t>
 8002616:	4603      	mov	r3, r0
 8002618:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 800261a:	4b62      	ldr	r3, [pc, #392]	; (80027a4 <_ZN12GPIO_Handler9GPIO_InitEv+0x2a4>)
 800261c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800261e:	4a61      	ldr	r2, [pc, #388]	; (80027a4 <_ZN12GPIO_Handler9GPIO_InitEv+0x2a4>)
 8002620:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002624:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[temp1] |= (portCode << (4 * temp2));
 8002626:	4a60      	ldr	r2, [pc, #384]	; (80027a8 <_ZN12GPIO_Handler9GPIO_InitEv+0x2a8>)
 8002628:	7cfb      	ldrb	r3, [r7, #19]
 800262a:	3302      	adds	r3, #2
 800262c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002630:	7c79      	ldrb	r1, [r7, #17]
 8002632:	7cbb      	ldrb	r3, [r7, #18]
 8002634:	009b      	lsls	r3, r3, #2
 8002636:	fa01 f303 	lsl.w	r3, r1, r3
 800263a:	4618      	mov	r0, r3
 800263c:	495a      	ldr	r1, [pc, #360]	; (80027a8 <_ZN12GPIO_Handler9GPIO_InitEv+0x2a8>)
 800263e:	7cfb      	ldrb	r3, [r7, #19]
 8002640:	4302      	orrs	r2, r0
 8002642:	3302      	adds	r3, #2
 8002644:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		// 3. Enable the exti interrupt delivery using IMR
		EXTI->IMR |= 1 << GPIOx_.GPIO_PinConfig.GPIO_PinNumber;
 8002648:	4b55      	ldr	r3, [pc, #340]	; (80027a0 <_ZN12GPIO_Handler9GPIO_InitEv+0x2a0>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	687a      	ldr	r2, [r7, #4]
 800264e:	7912      	ldrb	r2, [r2, #4]
 8002650:	4611      	mov	r1, r2
 8002652:	2201      	movs	r2, #1
 8002654:	408a      	lsls	r2, r1
 8002656:	4611      	mov	r1, r2
 8002658:	4a51      	ldr	r2, [pc, #324]	; (80027a0 <_ZN12GPIO_Handler9GPIO_InitEv+0x2a0>)
 800265a:	430b      	orrs	r3, r1
 800265c:	6013      	str	r3, [r2, #0]
	}

	temp = 0;
 800265e:	2300      	movs	r3, #0
 8002660:	617b      	str	r3, [r7, #20]
	// 2. configure the speed
	temp = GPIOx_.GPIO_PinConfig.GPIO_PinSpeed << (2 * GPIOx_.GPIO_PinConfig.GPIO_PinNumber);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	799b      	ldrb	r3, [r3, #6]
 8002666:	461a      	mov	r2, r3
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	791b      	ldrb	r3, [r3, #4]
 800266c:	005b      	lsls	r3, r3, #1
 800266e:	fa02 f303 	lsl.w	r3, r2, r3
 8002672:	617b      	str	r3, [r7, #20]
	GPIOx_.pGPIOx->OSPEEDR &= ~(0x3 << (2 * GPIOx_.GPIO_PinConfig.GPIO_PinNumber)); // clearing
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	689a      	ldr	r2, [r3, #8]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	791b      	ldrb	r3, [r3, #4]
 800267e:	005b      	lsls	r3, r3, #1
 8002680:	2103      	movs	r1, #3
 8002682:	fa01 f303 	lsl.w	r3, r1, r3
 8002686:	43db      	mvns	r3, r3
 8002688:	4619      	mov	r1, r3
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	400a      	ands	r2, r1
 8002690:	609a      	str	r2, [r3, #8]
	GPIOx_.pGPIOx->OSPEEDR |= temp;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	6899      	ldr	r1, [r3, #8]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	697a      	ldr	r2, [r7, #20]
 800269e:	430a      	orrs	r2, r1
 80026a0:	609a      	str	r2, [r3, #8]

	temp = 0;
 80026a2:	2300      	movs	r3, #0
 80026a4:	617b      	str	r3, [r7, #20]
	// 3. configure the pupd settings
	temp = GPIOx_.GPIO_PinConfig.GPIO_PinPuPdControl << (2 * GPIOx_.GPIO_PinConfig.GPIO_PinNumber);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	79db      	ldrb	r3, [r3, #7]
 80026aa:	461a      	mov	r2, r3
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	791b      	ldrb	r3, [r3, #4]
 80026b0:	005b      	lsls	r3, r3, #1
 80026b2:	fa02 f303 	lsl.w	r3, r2, r3
 80026b6:	617b      	str	r3, [r7, #20]
	GPIOx_.pGPIOx->PUPDR &= ~(0x3 << (2 * GPIOx_.GPIO_PinConfig.GPIO_PinNumber));// clearing
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	68da      	ldr	r2, [r3, #12]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	791b      	ldrb	r3, [r3, #4]
 80026c2:	005b      	lsls	r3, r3, #1
 80026c4:	2103      	movs	r1, #3
 80026c6:	fa01 f303 	lsl.w	r3, r1, r3
 80026ca:	43db      	mvns	r3, r3
 80026cc:	4619      	mov	r1, r3
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	400a      	ands	r2, r1
 80026d4:	60da      	str	r2, [r3, #12]
	GPIOx_.pGPIOx->PUPDR |= temp;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	68d9      	ldr	r1, [r3, #12]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	697a      	ldr	r2, [r7, #20]
 80026e2:	430a      	orrs	r2, r1
 80026e4:	60da      	str	r2, [r3, #12]

	temp = 0;
 80026e6:	2300      	movs	r3, #0
 80026e8:	617b      	str	r3, [r7, #20]
	// 4. configure the optype
	temp = GPIOx_.GPIO_PinConfig.GPIO_PinOPType << GPIOx_.GPIO_PinConfig.GPIO_PinNumber;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	7a1b      	ldrb	r3, [r3, #8]
 80026ee:	461a      	mov	r2, r3
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	791b      	ldrb	r3, [r3, #4]
 80026f4:	fa02 f303 	lsl.w	r3, r2, r3
 80026f8:	617b      	str	r3, [r7, #20]
	GPIOx_.pGPIOx->OTYPER &= ~(0x1 << GPIOx_.GPIO_PinConfig.GPIO_PinNumber); // clearing
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	685a      	ldr	r2, [r3, #4]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	791b      	ldrb	r3, [r3, #4]
 8002704:	4619      	mov	r1, r3
 8002706:	2301      	movs	r3, #1
 8002708:	408b      	lsls	r3, r1
 800270a:	43db      	mvns	r3, r3
 800270c:	4619      	mov	r1, r3
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	400a      	ands	r2, r1
 8002714:	605a      	str	r2, [r3, #4]
	GPIOx_.pGPIOx->OTYPER |= temp;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	6859      	ldr	r1, [r3, #4]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	697a      	ldr	r2, [r7, #20]
 8002722:	430a      	orrs	r2, r1
 8002724:	605a      	str	r2, [r3, #4]

	temp = 0;
 8002726:	2300      	movs	r3, #0
 8002728:	617b      	str	r3, [r7, #20]
	// 5. configure the alt functionality
	if(GPIOx_.GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN) {
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	795b      	ldrb	r3, [r3, #5]
 800272e:	2b02      	cmp	r3, #2
 8002730:	d131      	bne.n	8002796 <_ZN12GPIO_Handler9GPIO_InitEv+0x296>
		// configure alt function register
		uint8_t temp1, temp2;
		temp1 = GPIOx_.GPIO_PinConfig.GPIO_PinNumber / 8;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	791b      	ldrb	r3, [r3, #4]
 8002736:	08db      	lsrs	r3, r3, #3
 8002738:	743b      	strb	r3, [r7, #16]
		temp2 = GPIOx_.GPIO_PinConfig.GPIO_PinNumber % 8;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	791b      	ldrb	r3, [r3, #4]
 800273e:	f003 0307 	and.w	r3, r3, #7
 8002742:	73fb      	strb	r3, [r7, #15]
		GPIOx_.pGPIOx->AFR[temp1] &= ~(0xF << (4 * temp2));
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	7c3a      	ldrb	r2, [r7, #16]
 800274a:	3208      	adds	r2, #8
 800274c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002750:	7bfb      	ldrb	r3, [r7, #15]
 8002752:	009b      	lsls	r3, r3, #2
 8002754:	220f      	movs	r2, #15
 8002756:	fa02 f303 	lsl.w	r3, r2, r3
 800275a:	43db      	mvns	r3, r3
 800275c:	4618      	mov	r0, r3
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	7c3a      	ldrb	r2, [r7, #16]
 8002764:	4001      	ands	r1, r0
 8002766:	3208      	adds	r2, #8
 8002768:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		GPIOx_.pGPIOx->AFR[temp1] |= (GPIOx_.GPIO_PinConfig.GPIO_PinAltFunMode << (4 * temp2));
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	7c3a      	ldrb	r2, [r7, #16]
 8002772:	3208      	adds	r2, #8
 8002774:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	7a5b      	ldrb	r3, [r3, #9]
 800277c:	461a      	mov	r2, r3
 800277e:	7bfb      	ldrb	r3, [r7, #15]
 8002780:	009b      	lsls	r3, r3, #2
 8002782:	fa02 f303 	lsl.w	r3, r2, r3
 8002786:	4618      	mov	r0, r3
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	7c3a      	ldrb	r2, [r7, #16]
 800278e:	4301      	orrs	r1, r0
 8002790:	3208      	adds	r2, #8
 8002792:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
 8002796:	bf00      	nop
 8002798:	3718      	adds	r7, #24
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}
 800279e:	bf00      	nop
 80027a0:	40013c00 	.word	0x40013c00
 80027a4:	40023800 	.word	0x40023800
 80027a8:	40013800 	.word	0x40013800

080027ac <_ZN12GPIO_Handler11GPIO_DeInitEv>:
 *
 * @brief - Reset GPIO Port
 *
 * @return uint8, b'0000_000x
 */
void GPIO_Handler::GPIO_DeInit() {
 80027ac:	b480      	push	{r7}
 80027ae:	b083      	sub	sp, #12
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
	if(GPIOx_.pGPIOx == GPIOA) {
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a48      	ldr	r2, [pc, #288]	; (80028dc <_ZN12GPIO_Handler11GPIO_DeInitEv+0x130>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d10c      	bne.n	80027d8 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x2c>
		GPIOA_REG_RESET();
 80027be:	4b48      	ldr	r3, [pc, #288]	; (80028e0 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 80027c0:	691b      	ldr	r3, [r3, #16]
 80027c2:	4a47      	ldr	r2, [pc, #284]	; (80028e0 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 80027c4:	f043 0301 	orr.w	r3, r3, #1
 80027c8:	6113      	str	r3, [r2, #16]
 80027ca:	4b45      	ldr	r3, [pc, #276]	; (80028e0 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 80027cc:	691b      	ldr	r3, [r3, #16]
 80027ce:	4a44      	ldr	r2, [pc, #272]	; (80028e0 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 80027d0:	f023 0301 	bic.w	r3, r3, #1
 80027d4:	6113      	str	r3, [r2, #16]
		GPIOG_REG_RESET();
	}
	else if (GPIOx_.pGPIOx == GPIOH) {
		GPIOH_REG_RESET();
	}
}
 80027d6:	e07c      	b.n	80028d2 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x126>
	else if (GPIOx_.pGPIOx == GPIOB) {
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a41      	ldr	r2, [pc, #260]	; (80028e4 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x138>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d10c      	bne.n	80027fc <_ZN12GPIO_Handler11GPIO_DeInitEv+0x50>
		GPIOB_REG_RESET();
 80027e2:	4b3f      	ldr	r3, [pc, #252]	; (80028e0 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 80027e4:	691b      	ldr	r3, [r3, #16]
 80027e6:	4a3e      	ldr	r2, [pc, #248]	; (80028e0 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 80027e8:	f043 0302 	orr.w	r3, r3, #2
 80027ec:	6113      	str	r3, [r2, #16]
 80027ee:	4b3c      	ldr	r3, [pc, #240]	; (80028e0 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 80027f0:	691b      	ldr	r3, [r3, #16]
 80027f2:	4a3b      	ldr	r2, [pc, #236]	; (80028e0 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 80027f4:	f023 0302 	bic.w	r3, r3, #2
 80027f8:	6113      	str	r3, [r2, #16]
}
 80027fa:	e06a      	b.n	80028d2 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x126>
	else if (GPIOx_.pGPIOx == GPIOC) {
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a39      	ldr	r2, [pc, #228]	; (80028e8 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x13c>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d10c      	bne.n	8002820 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x74>
		GPIOC_REG_RESET();
 8002806:	4b36      	ldr	r3, [pc, #216]	; (80028e0 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 8002808:	691b      	ldr	r3, [r3, #16]
 800280a:	4a35      	ldr	r2, [pc, #212]	; (80028e0 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 800280c:	f043 0304 	orr.w	r3, r3, #4
 8002810:	6113      	str	r3, [r2, #16]
 8002812:	4b33      	ldr	r3, [pc, #204]	; (80028e0 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 8002814:	691b      	ldr	r3, [r3, #16]
 8002816:	4a32      	ldr	r2, [pc, #200]	; (80028e0 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 8002818:	f023 0304 	bic.w	r3, r3, #4
 800281c:	6113      	str	r3, [r2, #16]
}
 800281e:	e058      	b.n	80028d2 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x126>
	else if (GPIOx_.pGPIOx == GPIOD) {
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a31      	ldr	r2, [pc, #196]	; (80028ec <_ZN12GPIO_Handler11GPIO_DeInitEv+0x140>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d10c      	bne.n	8002844 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x98>
		GPIOD_REG_RESET();
 800282a:	4b2d      	ldr	r3, [pc, #180]	; (80028e0 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 800282c:	691b      	ldr	r3, [r3, #16]
 800282e:	4a2c      	ldr	r2, [pc, #176]	; (80028e0 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 8002830:	f043 0308 	orr.w	r3, r3, #8
 8002834:	6113      	str	r3, [r2, #16]
 8002836:	4b2a      	ldr	r3, [pc, #168]	; (80028e0 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 8002838:	691b      	ldr	r3, [r3, #16]
 800283a:	4a29      	ldr	r2, [pc, #164]	; (80028e0 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 800283c:	f023 0308 	bic.w	r3, r3, #8
 8002840:	6113      	str	r3, [r2, #16]
}
 8002842:	e046      	b.n	80028d2 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x126>
	else if (GPIOx_.pGPIOx == GPIOE) {
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a29      	ldr	r2, [pc, #164]	; (80028f0 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x144>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d10c      	bne.n	8002868 <_ZN12GPIO_Handler11GPIO_DeInitEv+0xbc>
		GPIOE_REG_RESET();
 800284e:	4b24      	ldr	r3, [pc, #144]	; (80028e0 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 8002850:	691b      	ldr	r3, [r3, #16]
 8002852:	4a23      	ldr	r2, [pc, #140]	; (80028e0 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 8002854:	f043 0310 	orr.w	r3, r3, #16
 8002858:	6113      	str	r3, [r2, #16]
 800285a:	4b21      	ldr	r3, [pc, #132]	; (80028e0 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 800285c:	691b      	ldr	r3, [r3, #16]
 800285e:	4a20      	ldr	r2, [pc, #128]	; (80028e0 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 8002860:	f023 0310 	bic.w	r3, r3, #16
 8002864:	6113      	str	r3, [r2, #16]
}
 8002866:	e034      	b.n	80028d2 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x126>
	else if (GPIOx_.pGPIOx == GPIOF) {
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a21      	ldr	r2, [pc, #132]	; (80028f4 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x148>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d10c      	bne.n	800288c <_ZN12GPIO_Handler11GPIO_DeInitEv+0xe0>
		GPIOF_REG_RESET();
 8002872:	4b1b      	ldr	r3, [pc, #108]	; (80028e0 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 8002874:	691b      	ldr	r3, [r3, #16]
 8002876:	4a1a      	ldr	r2, [pc, #104]	; (80028e0 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 8002878:	f043 0320 	orr.w	r3, r3, #32
 800287c:	6113      	str	r3, [r2, #16]
 800287e:	4b18      	ldr	r3, [pc, #96]	; (80028e0 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 8002880:	691b      	ldr	r3, [r3, #16]
 8002882:	4a17      	ldr	r2, [pc, #92]	; (80028e0 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 8002884:	f023 0320 	bic.w	r3, r3, #32
 8002888:	6113      	str	r3, [r2, #16]
}
 800288a:	e022      	b.n	80028d2 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x126>
	else if (GPIOx_.pGPIOx == GPIOG) {
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a19      	ldr	r2, [pc, #100]	; (80028f8 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x14c>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d10c      	bne.n	80028b0 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x104>
		GPIOG_REG_RESET();
 8002896:	4b12      	ldr	r3, [pc, #72]	; (80028e0 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 8002898:	691b      	ldr	r3, [r3, #16]
 800289a:	4a11      	ldr	r2, [pc, #68]	; (80028e0 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 800289c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80028a0:	6113      	str	r3, [r2, #16]
 80028a2:	4b0f      	ldr	r3, [pc, #60]	; (80028e0 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 80028a4:	691b      	ldr	r3, [r3, #16]
 80028a6:	4a0e      	ldr	r2, [pc, #56]	; (80028e0 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 80028a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80028ac:	6113      	str	r3, [r2, #16]
}
 80028ae:	e010      	b.n	80028d2 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x126>
	else if (GPIOx_.pGPIOx == GPIOH) {
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a11      	ldr	r2, [pc, #68]	; (80028fc <_ZN12GPIO_Handler11GPIO_DeInitEv+0x150>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d10b      	bne.n	80028d2 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x126>
		GPIOH_REG_RESET();
 80028ba:	4b09      	ldr	r3, [pc, #36]	; (80028e0 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 80028bc:	691b      	ldr	r3, [r3, #16]
 80028be:	4a08      	ldr	r2, [pc, #32]	; (80028e0 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 80028c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028c4:	6113      	str	r3, [r2, #16]
 80028c6:	4b06      	ldr	r3, [pc, #24]	; (80028e0 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 80028c8:	691b      	ldr	r3, [r3, #16]
 80028ca:	4a05      	ldr	r2, [pc, #20]	; (80028e0 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 80028cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80028d0:	6113      	str	r3, [r2, #16]
}
 80028d2:	bf00      	nop
 80028d4:	370c      	adds	r7, #12
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bc80      	pop	{r7}
 80028da:	4770      	bx	lr
 80028dc:	40020000 	.word	0x40020000
 80028e0:	40023800 	.word	0x40023800
 80028e4:	40020400 	.word	0x40020400
 80028e8:	40020800 	.word	0x40020800
 80028ec:	40020c00 	.word	0x40020c00
 80028f0:	40021000 	.word	0x40021000
 80028f4:	40021400 	.word	0x40021400
 80028f8:	40021800 	.word	0x40021800
 80028fc:	40021c00 	.word	0x40021c00

08002900 <_ZN12GPIO_Handler21GPIO_WriteToOutputPinEh>:
 *
 * @brief - Write single bit to Pin
 * @Param[in] Value: write value
 * @return None
 */
void GPIO_Handler::GPIO_WriteToOutputPin(const uint8_t Value) {
 8002900:	b480      	push	{r7}
 8002902:	b083      	sub	sp, #12
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
 8002908:	460b      	mov	r3, r1
 800290a:	70fb      	strb	r3, [r7, #3]
	if(Value == SET) {
 800290c:	78fb      	ldrb	r3, [r7, #3]
 800290e:	2b01      	cmp	r3, #1
 8002910:	d10d      	bne.n	800292e <_ZN12GPIO_Handler21GPIO_WriteToOutputPinEh+0x2e>
		GPIOx_.pGPIOx->ODR |= (0x1 << GPIOx_.GPIO_PinConfig.GPIO_PinNumber);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	695a      	ldr	r2, [r3, #20]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	791b      	ldrb	r3, [r3, #4]
 800291c:	4619      	mov	r1, r3
 800291e:	2301      	movs	r3, #1
 8002920:	408b      	lsls	r3, r1
 8002922:	4619      	mov	r1, r3
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	430a      	orrs	r2, r1
 800292a:	615a      	str	r2, [r3, #20]
	}
	else {
		GPIOx_.pGPIOx->ODR &= ~(0x1 << GPIOx_.GPIO_PinConfig.GPIO_PinNumber);
	}
}
 800292c:	e00d      	b.n	800294a <_ZN12GPIO_Handler21GPIO_WriteToOutputPinEh+0x4a>
		GPIOx_.pGPIOx->ODR &= ~(0x1 << GPIOx_.GPIO_PinConfig.GPIO_PinNumber);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	695a      	ldr	r2, [r3, #20]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	791b      	ldrb	r3, [r3, #4]
 8002938:	4619      	mov	r1, r3
 800293a:	2301      	movs	r3, #1
 800293c:	408b      	lsls	r3, r1
 800293e:	43db      	mvns	r3, r3
 8002940:	4619      	mov	r1, r3
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	400a      	ands	r2, r1
 8002948:	615a      	str	r2, [r3, #20]
}
 800294a:	bf00      	nop
 800294c:	370c      	adds	r7, #12
 800294e:	46bd      	mov	sp, r7
 8002950:	bc80      	pop	{r7}
 8002952:	4770      	bx	lr

08002954 <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh>:
 * @param[in] IRQNumber     - IRQNumber IRQ Position number
 * @param[in] EnorDi		- Enable/Disable Flag
 *
 * @return None
 */
void GPIO_Handler::GPIO_IRQInterruptConfig(const uint8_t IRQNumber, const uint8_t EnorDi) {
 8002954:	b480      	push	{r7}
 8002956:	b083      	sub	sp, #12
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
 800295c:	460b      	mov	r3, r1
 800295e:	70fb      	strb	r3, [r7, #3]
 8002960:	4613      	mov	r3, r2
 8002962:	70bb      	strb	r3, [r7, #2]
	if(EnorDi == ENABLE) {
 8002964:	78bb      	ldrb	r3, [r7, #2]
 8002966:	2b01      	cmp	r3, #1
 8002968:	d133      	bne.n	80029d2 <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0x7e>
		if (IRQNumber <= 31) {
 800296a:	78fb      	ldrb	r3, [r7, #3]
 800296c:	2b1f      	cmp	r3, #31
 800296e:	d80a      	bhi.n	8002986 <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0x32>
			//	program ISER0 register
			*NVIC_ISER0 |= (1 << IRQNumber);
 8002970:	4b34      	ldr	r3, [pc, #208]	; (8002a44 <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0xf0>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	78fa      	ldrb	r2, [r7, #3]
 8002976:	2101      	movs	r1, #1
 8002978:	fa01 f202 	lsl.w	r2, r1, r2
 800297c:	4611      	mov	r1, r2
 800297e:	4a31      	ldr	r2, [pc, #196]	; (8002a44 <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0xf0>)
 8002980:	430b      	orrs	r3, r1
 8002982:	6013      	str	r3, [r2, #0]
			// program ICE2 register
			*NVIC_ICER2 |= (1 << (IRQNumber % 64));
		}
	}

}
 8002984:	e059      	b.n	8002a3a <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0xe6>
		} else if (IRQNumber > 31 && IRQNumber < 64) {
 8002986:	78fb      	ldrb	r3, [r7, #3]
 8002988:	2b1f      	cmp	r3, #31
 800298a:	d90f      	bls.n	80029ac <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0x58>
 800298c:	78fb      	ldrb	r3, [r7, #3]
 800298e:	2b3f      	cmp	r3, #63	; 0x3f
 8002990:	d80c      	bhi.n	80029ac <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0x58>
			*NVIC_ISER1 |= (1 << (IRQNumber % 32));
 8002992:	4b2d      	ldr	r3, [pc, #180]	; (8002a48 <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0xf4>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	78fa      	ldrb	r2, [r7, #3]
 8002998:	f002 021f 	and.w	r2, r2, #31
 800299c:	2101      	movs	r1, #1
 800299e:	fa01 f202 	lsl.w	r2, r1, r2
 80029a2:	4611      	mov	r1, r2
 80029a4:	4a28      	ldr	r2, [pc, #160]	; (8002a48 <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0xf4>)
 80029a6:	430b      	orrs	r3, r1
 80029a8:	6013      	str	r3, [r2, #0]
 80029aa:	e046      	b.n	8002a3a <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0xe6>
		} else if (IRQNumber >= 64 && IRQNumber < 96) {
 80029ac:	78fb      	ldrb	r3, [r7, #3]
 80029ae:	2b3f      	cmp	r3, #63	; 0x3f
 80029b0:	d943      	bls.n	8002a3a <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0xe6>
 80029b2:	78fb      	ldrb	r3, [r7, #3]
 80029b4:	2b5f      	cmp	r3, #95	; 0x5f
 80029b6:	d840      	bhi.n	8002a3a <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0xe6>
			*NVIC_ISER2 |= (1 << (IRQNumber % 64));
 80029b8:	4b24      	ldr	r3, [pc, #144]	; (8002a4c <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0xf8>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	78fa      	ldrb	r2, [r7, #3]
 80029be:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80029c2:	2101      	movs	r1, #1
 80029c4:	fa01 f202 	lsl.w	r2, r1, r2
 80029c8:	4611      	mov	r1, r2
 80029ca:	4a20      	ldr	r2, [pc, #128]	; (8002a4c <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0xf8>)
 80029cc:	430b      	orrs	r3, r1
 80029ce:	6013      	str	r3, [r2, #0]
}
 80029d0:	e033      	b.n	8002a3a <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0xe6>
		if (IRQNumber <= 31) {
 80029d2:	78fb      	ldrb	r3, [r7, #3]
 80029d4:	2b1f      	cmp	r3, #31
 80029d6:	d80a      	bhi.n	80029ee <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0x9a>
			*NVIC_ICER0 |= (1 << IRQNumber);
 80029d8:	4b1d      	ldr	r3, [pc, #116]	; (8002a50 <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0xfc>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	78fa      	ldrb	r2, [r7, #3]
 80029de:	2101      	movs	r1, #1
 80029e0:	fa01 f202 	lsl.w	r2, r1, r2
 80029e4:	4611      	mov	r1, r2
 80029e6:	4a1a      	ldr	r2, [pc, #104]	; (8002a50 <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0xfc>)
 80029e8:	430b      	orrs	r3, r1
 80029ea:	6013      	str	r3, [r2, #0]
}
 80029ec:	e025      	b.n	8002a3a <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0xe6>
		} else if (IRQNumber > 31 && IRQNumber < 64) {
 80029ee:	78fb      	ldrb	r3, [r7, #3]
 80029f0:	2b1f      	cmp	r3, #31
 80029f2:	d90f      	bls.n	8002a14 <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0xc0>
 80029f4:	78fb      	ldrb	r3, [r7, #3]
 80029f6:	2b3f      	cmp	r3, #63	; 0x3f
 80029f8:	d80c      	bhi.n	8002a14 <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0xc0>
			*NVIC_ICER1 |= (1 << (IRQNumber % 32));
 80029fa:	4b16      	ldr	r3, [pc, #88]	; (8002a54 <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0x100>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	78fa      	ldrb	r2, [r7, #3]
 8002a00:	f002 021f 	and.w	r2, r2, #31
 8002a04:	2101      	movs	r1, #1
 8002a06:	fa01 f202 	lsl.w	r2, r1, r2
 8002a0a:	4611      	mov	r1, r2
 8002a0c:	4a11      	ldr	r2, [pc, #68]	; (8002a54 <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0x100>)
 8002a0e:	430b      	orrs	r3, r1
 8002a10:	6013      	str	r3, [r2, #0]
 8002a12:	e012      	b.n	8002a3a <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0xe6>
		} else if (IRQNumber >= 64 && IRQNumber < 96) {
 8002a14:	78fb      	ldrb	r3, [r7, #3]
 8002a16:	2b3f      	cmp	r3, #63	; 0x3f
 8002a18:	d90f      	bls.n	8002a3a <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0xe6>
 8002a1a:	78fb      	ldrb	r3, [r7, #3]
 8002a1c:	2b5f      	cmp	r3, #95	; 0x5f
 8002a1e:	d80c      	bhi.n	8002a3a <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0xe6>
			*NVIC_ICER2 |= (1 << (IRQNumber % 64));
 8002a20:	4b0d      	ldr	r3, [pc, #52]	; (8002a58 <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0x104>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	78fa      	ldrb	r2, [r7, #3]
 8002a26:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8002a2a:	2101      	movs	r1, #1
 8002a2c:	fa01 f202 	lsl.w	r2, r1, r2
 8002a30:	4611      	mov	r1, r2
 8002a32:	4a09      	ldr	r2, [pc, #36]	; (8002a58 <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0x104>)
 8002a34:	430b      	orrs	r3, r1
 8002a36:	6013      	str	r3, [r2, #0]
}
 8002a38:	e7ff      	b.n	8002a3a <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0xe6>
 8002a3a:	bf00      	nop
 8002a3c:	370c      	adds	r7, #12
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bc80      	pop	{r7}
 8002a42:	4770      	bx	lr
 8002a44:	e000e100 	.word	0xe000e100
 8002a48:	e000e104 	.word	0xe000e104
 8002a4c:	e000e108 	.word	0xe000e108
 8002a50:	e000e180 	.word	0xe000e180
 8002a54:	e000e184 	.word	0xe000e184
 8002a58:	e000e188 	.word	0xe000e188

08002a5c <_ZN12GPIO_Handler22GPIO_IRQPriorityConfigEhh>:
 *
 * @param[in] IRQNumber: IRQ position for EXIT
 * @param[in] IRPriority: 0->15
 * @return None
 */
void GPIO_Handler::GPIO_IRQPriorityConfig(const uint8_t IRQNumber, const uint8_t IRQPriority) {
 8002a5c:	b480      	push	{r7}
 8002a5e:	b085      	sub	sp, #20
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
 8002a64:	460b      	mov	r3, r1
 8002a66:	70fb      	strb	r3, [r7, #3]
 8002a68:	4613      	mov	r3, r2
 8002a6a:	70bb      	strb	r3, [r7, #2]
	// 1. first lets find out the ipr register
	uint8_t iprx = IRQNumber >> 2;
 8002a6c:	78fb      	ldrb	r3, [r7, #3]
 8002a6e:	109b      	asrs	r3, r3, #2
 8002a70:	73fb      	strb	r3, [r7, #15]
	uint8_t iprx_section = IRQNumber % 4;
 8002a72:	78fb      	ldrb	r3, [r7, #3]
 8002a74:	f003 0303 	and.w	r3, r3, #3
 8002a78:	73bb      	strb	r3, [r7, #14]
	uint8_t shift_amount = (8 * iprx_section) + (8 - NO_PR_BITS_IMPLEMENTED);
 8002a7a:	7bbb      	ldrb	r3, [r7, #14]
 8002a7c:	00db      	lsls	r3, r3, #3
 8002a7e:	b2db      	uxtb	r3, r3
 8002a80:	3304      	adds	r3, #4
 8002a82:	737b      	strb	r3, [r7, #13]

	*(NVIC_PR_BASE_ADDR + iprx) |= (IRQPriority << shift_amount);
 8002a84:	7bfb      	ldrb	r3, [r7, #15]
 8002a86:	f103 5360 	add.w	r3, r3, #939524096	; 0x38000000
 8002a8a:	f503 5364 	add.w	r3, r3, #14592	; 0x3900
 8002a8e:	009b      	lsls	r3, r3, #2
 8002a90:	681a      	ldr	r2, [r3, #0]
 8002a92:	78b9      	ldrb	r1, [r7, #2]
 8002a94:	7b7b      	ldrb	r3, [r7, #13]
 8002a96:	fa01 f303 	lsl.w	r3, r1, r3
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	7bfb      	ldrb	r3, [r7, #15]
 8002a9e:	f103 5360 	add.w	r3, r3, #939524096	; 0x38000000
 8002aa2:	f503 5364 	add.w	r3, r3, #14592	; 0x3900
 8002aa6:	009b      	lsls	r3, r3, #2
 8002aa8:	4619      	mov	r1, r3
 8002aaa:	ea42 0300 	orr.w	r3, r2, r0
 8002aae:	600b      	str	r3, [r1, #0]
}
 8002ab0:	bf00      	nop
 8002ab2:	3714      	adds	r7, #20
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bc80      	pop	{r7}
 8002ab8:	4770      	bx	lr

08002aba <_ZN11SPI_HandlerC1EP12SPI_RegDef_thhhhhhh>:
/*********************************************************************
 * @class      		  - GPIO_Handler Constructor
 *
 * @brief             - Initialize SPI, GPIOs, Interrupt, etc.
 **********************************************************************/
SPI_Handler::SPI_Handler(SPI_RegDef_t *SPIx_ADDR,
 8002aba:	b580      	push	{r7, lr}
 8002abc:	b084      	sub	sp, #16
 8002abe:	af00      	add	r7, sp, #0
 8002ac0:	60f8      	str	r0, [r7, #12]
 8002ac2:	60b9      	str	r1, [r7, #8]
 8002ac4:	4611      	mov	r1, r2
 8002ac6:	461a      	mov	r2, r3
 8002ac8:	460b      	mov	r3, r1
 8002aca:	71fb      	strb	r3, [r7, #7]
 8002acc:	4613      	mov	r3, r2
 8002ace:	71bb      	strb	r3, [r7, #6]
                         uint8_t BusConfig,
                         uint8_t SclkSpeed,
                         uint8_t DFF,
                         uint8_t CPOL,
                         uint8_t CPHA,
                         uint8_t SSM) {
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	2320      	movs	r3, #32
 8002ad6:	461a      	mov	r2, r3
 8002ad8:	2100      	movs	r1, #0
 8002ada:	f000 fdfc 	bl	80036d6 <memset>
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	3320      	adds	r3, #32
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f000 fc64 	bl	80033b0 <_ZNSt10unique_ptrI12GPIO_HandlerSt14default_deleteIS0_EEC1IS2_vEEv>
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	3324      	adds	r3, #36	; 0x24
 8002aec:	4618      	mov	r0, r3
 8002aee:	f000 fc5f 	bl	80033b0 <_ZNSt10unique_ptrI12GPIO_HandlerSt14default_deleteIS0_EEC1IS2_vEEv>
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	3328      	adds	r3, #40	; 0x28
 8002af6:	4618      	mov	r0, r3
 8002af8:	f000 fc5a 	bl	80033b0 <_ZNSt10unique_ptrI12GPIO_HandlerSt14default_deleteIS0_EEC1IS2_vEEv>
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	332c      	adds	r3, #44	; 0x2c
 8002b00:	4618      	mov	r0, r3
 8002b02:	f000 fc55 	bl	80033b0 <_ZNSt10unique_ptrI12GPIO_HandlerSt14default_deleteIS0_EEC1IS2_vEEv>
    SPIx_.pSPIx = SPIx_ADDR;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	68ba      	ldr	r2, [r7, #8]
 8002b0a:	601a      	str	r2, [r3, #0]
    SPIx_.SPIConfig.SPI_DeviceMode = DeviceMode;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	79fa      	ldrb	r2, [r7, #7]
 8002b10:	711a      	strb	r2, [r3, #4]
    SPIx_.SPIConfig.SPI_BusConfig = BusConfig;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	79ba      	ldrb	r2, [r7, #6]
 8002b16:	715a      	strb	r2, [r3, #5]
    SPIx_.SPIConfig.SPI_SclkSpeed = SclkSpeed;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	7e3a      	ldrb	r2, [r7, #24]
 8002b1c:	719a      	strb	r2, [r3, #6]
    SPIx_.SPIConfig.SPI_DFF = DFF;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	7f3a      	ldrb	r2, [r7, #28]
 8002b22:	71da      	strb	r2, [r3, #7]
    SPIx_.SPIConfig.SPI_CPOL = CPOL;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002b2a:	721a      	strb	r2, [r3, #8]
    SPIx_.SPIConfig.SPI_CPHA = CPHA;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8002b32:	725a      	strb	r2, [r3, #9]
    SPIx_.SPIConfig.SPI_SSM = SSM;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8002b3a:	729a      	strb	r2, [r3, #10]
    SPI_GPIOs_Init();
 8002b3c:	68f8      	ldr	r0, [r7, #12]
 8002b3e:	f000 f85f 	bl	8002c00 <_ZN11SPI_Handler14SPI_GPIOs_InitEv>
    SPI_PeriClockControl();
 8002b42:	68f8      	ldr	r0, [r7, #12]
 8002b44:	f000 f81a 	bl	8002b7c <_ZN11SPI_Handler20SPI_PeriClockControlEv>
    SPI_Init();
 8002b48:	68f8      	ldr	r0, [r7, #12]
 8002b4a:	f000 f8df 	bl	8002d0c <_ZN11SPI_Handler8SPI_InitEv>
    SPI_SSIConfig(ENABLE);
 8002b4e:	2101      	movs	r1, #1
 8002b50:	68f8      	ldr	r0, [r7, #12]
 8002b52:	f000 fa6e 	bl	8003032 <_ZN11SPI_Handler13SPI_SSIConfigEh>
    if(SPI_SSM_EN == SPIx_.SPIConfig.SPI_SSM) {
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	7a9b      	ldrb	r3, [r3, #10]
 8002b5a:	2b01      	cmp	r3, #1
 8002b5c:	d104      	bne.n	8002b68 <_ZN11SPI_HandlerC1EP12SPI_RegDef_thhhhhhh+0xae>
    	SPI_SSOEConfig(DISABLE);
 8002b5e:	2100      	movs	r1, #0
 8002b60:	68f8      	ldr	r0, [r7, #12]
 8002b62:	f000 fa47 	bl	8002ff4 <_ZN11SPI_Handler14SPI_SSOEConfigEh>
 8002b66:	e003      	b.n	8002b70 <_ZN11SPI_HandlerC1EP12SPI_RegDef_thhhhhhh+0xb6>
    }
    else {
    	SPI_SSOEConfig(ENABLE);
 8002b68:	2101      	movs	r1, #1
 8002b6a:	68f8      	ldr	r0, [r7, #12]
 8002b6c:	f000 fa42 	bl	8002ff4 <_ZN11SPI_Handler14SPI_SSOEConfigEh>
    }
}
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	4618      	mov	r0, r3
 8002b74:	3710      	adds	r7, #16
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}
	...

08002b7c <_ZN11SPI_Handler20SPI_PeriClockControlEv>:
 *
 * @return None
 *
 * @Node:
 **********************************************************************/
void SPI_Handler::SPI_PeriClockControl() {
 8002b7c:	b480      	push	{r7}
 8002b7e:	b083      	sub	sp, #12
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
	if (SPI1 == SPIx_.pSPIx) {
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a18      	ldr	r2, [pc, #96]	; (8002bec <_ZN11SPI_Handler20SPI_PeriClockControlEv+0x70>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d106      	bne.n	8002b9c <_ZN11SPI_Handler20SPI_PeriClockControlEv+0x20>
		SPI1_PCLK_EN();
 8002b8e:	4b18      	ldr	r3, [pc, #96]	; (8002bf0 <_ZN11SPI_Handler20SPI_PeriClockControlEv+0x74>)
 8002b90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b92:	4a17      	ldr	r2, [pc, #92]	; (8002bf0 <_ZN11SPI_Handler20SPI_PeriClockControlEv+0x74>)
 8002b94:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002b98:	6453      	str	r3, [r2, #68]	; 0x44
		SPI3_PCLK_EN();
	}
	else if (SPI4 == SPIx_.pSPIx) {
		SPI4_PCLK_EN();
	}
}
 8002b9a:	e022      	b.n	8002be2 <_ZN11SPI_Handler20SPI_PeriClockControlEv+0x66>
	else if (SPI2 == SPIx_.pSPIx) {
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a14      	ldr	r2, [pc, #80]	; (8002bf4 <_ZN11SPI_Handler20SPI_PeriClockControlEv+0x78>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d106      	bne.n	8002bb4 <_ZN11SPI_Handler20SPI_PeriClockControlEv+0x38>
		SPI2_PCLK_EN();
 8002ba6:	4b12      	ldr	r3, [pc, #72]	; (8002bf0 <_ZN11SPI_Handler20SPI_PeriClockControlEv+0x74>)
 8002ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002baa:	4a11      	ldr	r2, [pc, #68]	; (8002bf0 <_ZN11SPI_Handler20SPI_PeriClockControlEv+0x74>)
 8002bac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002bb0:	6413      	str	r3, [r2, #64]	; 0x40
}
 8002bb2:	e016      	b.n	8002be2 <_ZN11SPI_Handler20SPI_PeriClockControlEv+0x66>
	else if (SPI3 == SPIx_.pSPIx) {
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a0f      	ldr	r2, [pc, #60]	; (8002bf8 <_ZN11SPI_Handler20SPI_PeriClockControlEv+0x7c>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d106      	bne.n	8002bcc <_ZN11SPI_Handler20SPI_PeriClockControlEv+0x50>
		SPI3_PCLK_EN();
 8002bbe:	4b0c      	ldr	r3, [pc, #48]	; (8002bf0 <_ZN11SPI_Handler20SPI_PeriClockControlEv+0x74>)
 8002bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc2:	4a0b      	ldr	r2, [pc, #44]	; (8002bf0 <_ZN11SPI_Handler20SPI_PeriClockControlEv+0x74>)
 8002bc4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002bc8:	6413      	str	r3, [r2, #64]	; 0x40
}
 8002bca:	e00a      	b.n	8002be2 <_ZN11SPI_Handler20SPI_PeriClockControlEv+0x66>
	else if (SPI4 == SPIx_.pSPIx) {
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a0a      	ldr	r2, [pc, #40]	; (8002bfc <_ZN11SPI_Handler20SPI_PeriClockControlEv+0x80>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d105      	bne.n	8002be2 <_ZN11SPI_Handler20SPI_PeriClockControlEv+0x66>
		SPI4_PCLK_EN();
 8002bd6:	4b06      	ldr	r3, [pc, #24]	; (8002bf0 <_ZN11SPI_Handler20SPI_PeriClockControlEv+0x74>)
 8002bd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bda:	4a05      	ldr	r2, [pc, #20]	; (8002bf0 <_ZN11SPI_Handler20SPI_PeriClockControlEv+0x74>)
 8002bdc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002be0:	6453      	str	r3, [r2, #68]	; 0x44
}
 8002be2:	bf00      	nop
 8002be4:	370c      	adds	r7, #12
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bc80      	pop	{r7}
 8002bea:	4770      	bx	lr
 8002bec:	40013000 	.word	0x40013000
 8002bf0:	40023800 	.word	0x40023800
 8002bf4:	40003800 	.word	0x40003800
 8002bf8:	40003c00 	.word	0x40003c00
 8002bfc:	40013400 	.word	0x40013400

08002c00 <_ZN11SPI_Handler14SPI_GPIOs_InitEv>:
 *
 * @param None
 *
 * @return None
 **********************************************************************/
void SPI_Handler::SPI_GPIOs_Init() {
 8002c00:	b5b0      	push	{r4, r5, r7, lr}
 8002c02:	b088      	sub	sp, #32
 8002c04:	af06      	add	r7, sp, #24
 8002c06:	6078      	str	r0, [r7, #4]
    if (SPIx_.pSPIx == SPI1) {
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a3d      	ldr	r2, [pc, #244]	; (8002d04 <_ZN11SPI_Handler14SPI_GPIOs_InitEv+0x104>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d173      	bne.n	8002cfa <_ZN11SPI_Handler14SPI_GPIOs_InitEv+0xfa>
        SPI_Sck.reset( new GPIO_Handler(GPIOA,
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	f103 0420 	add.w	r4, r3, #32
                                        GPIO_MODE_ALTFN,
                                        GPIO_SPEED_HIGH,
                                        IRQ_Prio_NO_15,
                                        GPIO_OP_TYPE_PP,
                                        GPIO_NO_PUPD,
                                        5) );
 8002c18:	200c      	movs	r0, #12
 8002c1a:	f000 fcee 	bl	80035fa <_Znwj>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	461d      	mov	r5, r3
 8002c22:	2305      	movs	r3, #5
 8002c24:	9304      	str	r3, [sp, #16]
 8002c26:	2300      	movs	r3, #0
 8002c28:	9303      	str	r3, [sp, #12]
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	9302      	str	r3, [sp, #8]
 8002c2e:	230f      	movs	r3, #15
 8002c30:	9301      	str	r3, [sp, #4]
 8002c32:	2303      	movs	r3, #3
 8002c34:	9300      	str	r3, [sp, #0]
 8002c36:	2302      	movs	r3, #2
 8002c38:	2205      	movs	r2, #5
 8002c3a:	4933      	ldr	r1, [pc, #204]	; (8002d08 <_ZN11SPI_Handler14SPI_GPIOs_InitEv+0x108>)
 8002c3c:	4628      	mov	r0, r5
 8002c3e:	f7ff fb8d 	bl	800235c <_ZN12GPIO_HandlerC1EP13GPIO_RegDef_thhhhhhh>
        SPI_Sck.reset( new GPIO_Handler(GPIOA,
 8002c42:	4629      	mov	r1, r5
 8002c44:	4620      	mov	r0, r4
 8002c46:	f000 fbc3 	bl	80033d0 <_ZNSt10unique_ptrI12GPIO_HandlerSt14default_deleteIS0_EE5resetEPS0_>

        SPI_MOSI.reset( new GPIO_Handler(GPIOA,
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	f103 0424 	add.w	r4, r3, #36	; 0x24
                                        GPIO_MODE_ALTFN,
                                        GPIO_SPEED_HIGH,
                                        IRQ_Prio_NO_15,
                                        GPIO_OP_TYPE_PP,
                                        GPIO_NO_PUPD,
                                        5) );
 8002c50:	200c      	movs	r0, #12
 8002c52:	f000 fcd2 	bl	80035fa <_Znwj>
 8002c56:	4603      	mov	r3, r0
 8002c58:	461d      	mov	r5, r3
 8002c5a:	2305      	movs	r3, #5
 8002c5c:	9304      	str	r3, [sp, #16]
 8002c5e:	2300      	movs	r3, #0
 8002c60:	9303      	str	r3, [sp, #12]
 8002c62:	2300      	movs	r3, #0
 8002c64:	9302      	str	r3, [sp, #8]
 8002c66:	230f      	movs	r3, #15
 8002c68:	9301      	str	r3, [sp, #4]
 8002c6a:	2303      	movs	r3, #3
 8002c6c:	9300      	str	r3, [sp, #0]
 8002c6e:	2302      	movs	r3, #2
 8002c70:	2207      	movs	r2, #7
 8002c72:	4925      	ldr	r1, [pc, #148]	; (8002d08 <_ZN11SPI_Handler14SPI_GPIOs_InitEv+0x108>)
 8002c74:	4628      	mov	r0, r5
 8002c76:	f7ff fb71 	bl	800235c <_ZN12GPIO_HandlerC1EP13GPIO_RegDef_thhhhhhh>
        SPI_MOSI.reset( new GPIO_Handler(GPIOA,
 8002c7a:	4629      	mov	r1, r5
 8002c7c:	4620      	mov	r0, r4
 8002c7e:	f000 fba7 	bl	80033d0 <_ZNSt10unique_ptrI12GPIO_HandlerSt14default_deleteIS0_EE5resetEPS0_>

        SPI_MISO.reset( new GPIO_Handler(GPIOA,
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	f103 0428 	add.w	r4, r3, #40	; 0x28
                                        GPIO_MODE_ALTFN,
                                        GPIO_SPEED_HIGH,
                                        IRQ_Prio_NO_15,
                                        GPIO_OP_TYPE_PP,
                                        GPIO_NO_PUPD,
                                        5) );
 8002c88:	200c      	movs	r0, #12
 8002c8a:	f000 fcb6 	bl	80035fa <_Znwj>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	461d      	mov	r5, r3
 8002c92:	2305      	movs	r3, #5
 8002c94:	9304      	str	r3, [sp, #16]
 8002c96:	2300      	movs	r3, #0
 8002c98:	9303      	str	r3, [sp, #12]
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	9302      	str	r3, [sp, #8]
 8002c9e:	230f      	movs	r3, #15
 8002ca0:	9301      	str	r3, [sp, #4]
 8002ca2:	2303      	movs	r3, #3
 8002ca4:	9300      	str	r3, [sp, #0]
 8002ca6:	2302      	movs	r3, #2
 8002ca8:	2206      	movs	r2, #6
 8002caa:	4917      	ldr	r1, [pc, #92]	; (8002d08 <_ZN11SPI_Handler14SPI_GPIOs_InitEv+0x108>)
 8002cac:	4628      	mov	r0, r5
 8002cae:	f7ff fb55 	bl	800235c <_ZN12GPIO_HandlerC1EP13GPIO_RegDef_thhhhhhh>
        SPI_MISO.reset( new GPIO_Handler(GPIOA,
 8002cb2:	4629      	mov	r1, r5
 8002cb4:	4620      	mov	r0, r4
 8002cb6:	f000 fb8b 	bl	80033d0 <_ZNSt10unique_ptrI12GPIO_HandlerSt14default_deleteIS0_EE5resetEPS0_>


        if(SPIx_.SPIConfig.SPI_SSM == SPI_SSM_DI) {
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	7a9b      	ldrb	r3, [r3, #10]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d11b      	bne.n	8002cfa <_ZN11SPI_Handler14SPI_GPIOs_InitEv+0xfa>
            // Hardware NSS enable, configure for PA4
            SPI_NSS.reset( new GPIO_Handler(GPIOA,
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	f103 042c 	add.w	r4, r3, #44	; 0x2c
                                            GPIO_MODE_ALTFN,
                                            GPIO_SPEED_HIGH,
                                            IRQ_Prio_NO_15,
                                            GPIO_OP_TYPE_PP,
                                            GPIO_NO_PUPD,
                                            5) );
 8002cc8:	200c      	movs	r0, #12
 8002cca:	f000 fc96 	bl	80035fa <_Znwj>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	461d      	mov	r5, r3
 8002cd2:	2305      	movs	r3, #5
 8002cd4:	9304      	str	r3, [sp, #16]
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	9303      	str	r3, [sp, #12]
 8002cda:	2300      	movs	r3, #0
 8002cdc:	9302      	str	r3, [sp, #8]
 8002cde:	230f      	movs	r3, #15
 8002ce0:	9301      	str	r3, [sp, #4]
 8002ce2:	2303      	movs	r3, #3
 8002ce4:	9300      	str	r3, [sp, #0]
 8002ce6:	2302      	movs	r3, #2
 8002ce8:	2204      	movs	r2, #4
 8002cea:	4907      	ldr	r1, [pc, #28]	; (8002d08 <_ZN11SPI_Handler14SPI_GPIOs_InitEv+0x108>)
 8002cec:	4628      	mov	r0, r5
 8002cee:	f7ff fb35 	bl	800235c <_ZN12GPIO_HandlerC1EP13GPIO_RegDef_thhhhhhh>
            SPI_NSS.reset( new GPIO_Handler(GPIOA,
 8002cf2:	4629      	mov	r1, r5
 8002cf4:	4620      	mov	r0, r4
 8002cf6:	f000 fb6b 	bl	80033d0 <_ZNSt10unique_ptrI12GPIO_HandlerSt14default_deleteIS0_EE5resetEPS0_>
        }
    }
}
 8002cfa:	bf00      	nop
 8002cfc:	3708      	adds	r7, #8
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bdb0      	pop	{r4, r5, r7, pc}
 8002d02:	bf00      	nop
 8002d04:	40013000 	.word	0x40013000
 8002d08:	40020000 	.word	0x40020000

08002d0c <_ZN11SPI_Handler8SPI_InitEv>:
 *
 * @param None
 *
 * @return None
 **********************************************************************/
void SPI_Handler::SPI_Init() {
 8002d0c:	b480      	push	{r7}
 8002d0e:	b085      	sub	sp, #20
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
    // Lets configure the SPI_CR1 register
    uint32_t tempReg = 0;
 8002d14:	2300      	movs	r3, #0
 8002d16:	60fb      	str	r3, [r7, #12]

    // 1. configure the device mode
    tempReg |= SPIx_.SPIConfig.SPI_DeviceMode << SPI_CR1_MSTR;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	791b      	ldrb	r3, [r3, #4]
 8002d1c:	009b      	lsls	r3, r3, #2
 8002d1e:	461a      	mov	r2, r3
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	4313      	orrs	r3, r2
 8002d24:	60fb      	str	r3, [r7, #12]
    // 2. configure the bus config
    if(SPI_BUS_CONFIG_FD == SPIx_.SPIConfig.SPI_BusConfig) {
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	795b      	ldrb	r3, [r3, #5]
 8002d2a:	2b01      	cmp	r3, #1
 8002d2c:	d104      	bne.n	8002d38 <_ZN11SPI_Handler8SPI_InitEv+0x2c>
        // bidi mode should be cleared
        tempReg &= ~(1 << SPI_CR1_BIDIMODE);
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002d34:	60fb      	str	r3, [r7, #12]
 8002d36:	e018      	b.n	8002d6a <_ZN11SPI_Handler8SPI_InitEv+0x5e>
    }
    else if(SPI_BUS_CONFIG_HD == SPIx_.SPIConfig.SPI_BusConfig) {
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	795b      	ldrb	r3, [r3, #5]
 8002d3c:	2b02      	cmp	r3, #2
 8002d3e:	d108      	bne.n	8002d52 <_ZN11SPI_Handler8SPI_InitEv+0x46>
        // bidi mode should be set
        tempReg |= (1 << SPI_CR1_BIDIMODE);
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d46:	60fb      	str	r3, [r7, #12]
        // bidioe mode should be set
        tempReg |= (1 << SPI_CR1_BIDIOE);
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d4e:	60fb      	str	r3, [r7, #12]
 8002d50:	e00b      	b.n	8002d6a <_ZN11SPI_Handler8SPI_InitEv+0x5e>
    }
    else if(SPI_BUS_CONFIG_SIMPLEX_RXONLY == SPIx_.SPIConfig.SPI_BusConfig) {
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	795b      	ldrb	r3, [r3, #5]
 8002d56:	2b03      	cmp	r3, #3
 8002d58:	d107      	bne.n	8002d6a <_ZN11SPI_Handler8SPI_InitEv+0x5e>
        // bidi mode should be cleared, for active SCLK, because SLCK is only activate when MOSI is activate
        tempReg &= ~(1 << SPI_CR1_BIDIMODE);
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002d60:	60fb      	str	r3, [r7, #12]
        // RXONLY should be set
        tempReg |= (1 << SPI_CR1_RXONLY);
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d68:	60fb      	str	r3, [r7, #12]
    }

    // 3. configure for clock speed
    tempReg |= (SPIx_.SPIConfig.SPI_SclkSpeed << SPI_CR1_BR);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	799b      	ldrb	r3, [r3, #6]
 8002d6e:	00db      	lsls	r3, r3, #3
 8002d70:	461a      	mov	r2, r3
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	4313      	orrs	r3, r2
 8002d76:	60fb      	str	r3, [r7, #12]

    // 4. configure for data format
    tempReg |= (SPIx_.SPIConfig.SPI_DFF << SPI_CR1_DFF);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	79db      	ldrb	r3, [r3, #7]
 8002d7c:	02db      	lsls	r3, r3, #11
 8002d7e:	461a      	mov	r2, r3
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	4313      	orrs	r3, r2
 8002d84:	60fb      	str	r3, [r7, #12]

    // 5. configure CPOL
    tempReg |= (SPIx_.SPIConfig.SPI_CPOL << SPI_CR1_CPOL);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	7a1b      	ldrb	r3, [r3, #8]
 8002d8a:	005b      	lsls	r3, r3, #1
 8002d8c:	461a      	mov	r2, r3
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	4313      	orrs	r3, r2
 8002d92:	60fb      	str	r3, [r7, #12]

    // 6. configure CPOA
    tempReg |= (SPIx_.SPIConfig.SPI_CPHA << SPI_CR1_CPHA);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	7a5b      	ldrb	r3, [r3, #9]
 8002d98:	461a      	mov	r2, r3
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	60fb      	str	r3, [r7, #12]

    tempReg |= (SPIx_.SPIConfig.SPI_SSM << SPI_CR1_SSM);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	7a9b      	ldrb	r3, [r3, #10]
 8002da4:	025b      	lsls	r3, r3, #9
 8002da6:	461a      	mov	r2, r3
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	4313      	orrs	r3, r2
 8002dac:	60fb      	str	r3, [r7, #12]

    SPIx_.pSPIx->CR1 = tempReg;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	68fa      	ldr	r2, [r7, #12]
 8002db4:	601a      	str	r2, [r3, #0]
}
 8002db6:	bf00      	nop
 8002db8:	3714      	adds	r7, #20
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bc80      	pop	{r7}
 8002dbe:	4770      	bx	lr

08002dc0 <_ZN11SPI_Handler21SPI_PeripheralControlEh>:
 *
 * @param None
 *
 * @return None
 **********************************************************************/
void SPI_Handler::SPI_PeripheralControl(uint8_t EnOrDi) {
 8002dc0:	b480      	push	{r7}
 8002dc2:	b083      	sub	sp, #12
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
 8002dc8:	460b      	mov	r3, r1
 8002dca:	70fb      	strb	r3, [r7, #3]
    if(ENABLE == EnOrDi) {
 8002dcc:	78fb      	ldrb	r3, [r7, #3]
 8002dce:	2b01      	cmp	r3, #1
 8002dd0:	d108      	bne.n	8002de4 <_ZN11SPI_Handler21SPI_PeripheralControlEh+0x24>
        SPIx_.pSPIx->CR1 |= (1 << SPI_CR1_SPE);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	681a      	ldr	r2, [r3, #0]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002de0:	601a      	str	r2, [r3, #0]
    }
    else {
        SPIx_.pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
    }
}
 8002de2:	e007      	b.n	8002df4 <_ZN11SPI_Handler21SPI_PeripheralControlEh+0x34>
        SPIx_.pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	681a      	ldr	r2, [r3, #0]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002df2:	601a      	str	r2, [r3, #0]
}
 8002df4:	bf00      	nop
 8002df6:	370c      	adds	r7, #12
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bc80      	pop	{r7}
 8002dfc:	4770      	bx	lr

08002dfe <_ZN11SPI_Handler17SPI_GetFlagStatusEh>:
 *
 * @param[in]         - FlagName: check @FLAG_NAME_STATUS
 *
 * @return None
 **********************************************************************/
inline uint8_t SPI_Handler::SPI_GetFlagStatus(const uint8_t FlagName) {
 8002dfe:	b480      	push	{r7}
 8002e00:	b083      	sub	sp, #12
 8002e02:	af00      	add	r7, sp, #0
 8002e04:	6078      	str	r0, [r7, #4]
 8002e06:	460b      	mov	r3, r1
 8002e08:	70fb      	strb	r3, [r7, #3]
    return (SPIx_.pSPIx->SR & FlagName) ? FLAG_SET : FLAG_RESET;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	689a      	ldr	r2, [r3, #8]
 8002e10:	78fb      	ldrb	r3, [r7, #3]
 8002e12:	4013      	ands	r3, r2
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d001      	beq.n	8002e1c <_ZN11SPI_Handler17SPI_GetFlagStatusEh+0x1e>
 8002e18:	2301      	movs	r3, #1
 8002e1a:	e000      	b.n	8002e1e <_ZN11SPI_Handler17SPI_GetFlagStatusEh+0x20>
 8002e1c:	2300      	movs	r3, #0
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	370c      	adds	r7, #12
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bc80      	pop	{r7}
 8002e26:	4770      	bx	lr

08002e28 <_ZN11SPI_Handler12SPI_SendDataEPKhm>:
 * @param[in]: pTxBuffer: pointer to Tx buffer
 * @param[in]: Len: length of data transfer
 *
 * @return None
 **********************************************************************/
void SPI_Handler::SPI_SendData(const uint8_t *pTxBuffer, uint32_t Len) {
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b084      	sub	sp, #16
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	60f8      	str	r0, [r7, #12]
 8002e30:	60b9      	str	r1, [r7, #8]
 8002e32:	607a      	str	r2, [r7, #4]
	if ((SPIx_.pSPIx->CR1 & SPI_CR1_SPE_MSK) != SPI_CR1_SPE_MSK) {
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e3e:	2b40      	cmp	r3, #64	; 0x40
 8002e40:	bf14      	ite	ne
 8002e42:	2301      	movne	r3, #1
 8002e44:	2300      	moveq	r3, #0
 8002e46:	b2db      	uxtb	r3, r3
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d003      	beq.n	8002e54 <_ZN11SPI_Handler12SPI_SendDataEPKhm+0x2c>
		SPI_PeripheralControl(ENABLE);
 8002e4c:	2101      	movs	r1, #1
 8002e4e:	68f8      	ldr	r0, [r7, #12]
 8002e50:	f7ff ffb6 	bl	8002dc0 <_ZN11SPI_Handler21SPI_PeripheralControlEh>
	}

    while(Len > 0) {
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d030      	beq.n	8002ebc <_ZN11SPI_Handler12SPI_SendDataEPKhm+0x94>
        // 1. wait util tx buffer empty
        while(SPI_GetFlagStatus(SPI_TXE_FLAG) == FLAG_RESET);
 8002e5a:	2102      	movs	r1, #2
 8002e5c:	68f8      	ldr	r0, [r7, #12]
 8002e5e:	f7ff ffce 	bl	8002dfe <_ZN11SPI_Handler17SPI_GetFlagStatusEh>
 8002e62:	4603      	mov	r3, r0
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	bf0c      	ite	eq
 8002e68:	2301      	moveq	r3, #1
 8002e6a:	2300      	movne	r3, #0
 8002e6c:	b2db      	uxtb	r3, r3
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d000      	beq.n	8002e74 <_ZN11SPI_Handler12SPI_SendDataEPKhm+0x4c>
 8002e72:	e7f2      	b.n	8002e5a <_ZN11SPI_Handler12SPI_SendDataEPKhm+0x32>

        // 2. check the DFF bit in CR1
        if(SPIx_.pSPIx->CR1 & (1 << SPI_CR1_DFF)) {
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	bf14      	ite	ne
 8002e82:	2301      	movne	r3, #1
 8002e84:	2300      	moveq	r3, #0
 8002e86:	b2db      	uxtb	r3, r3
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d00b      	beq.n	8002ea4 <_ZN11SPI_Handler12SPI_SendDataEPKhm+0x7c>
            // 16 BIT DFF
            // 1. load the data into the DR
            SPIx_.pSPIx->DR = *((uint16_t *)pTxBuffer);
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	881a      	ldrh	r2, [r3, #0]
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	60da      	str	r2, [r3, #12]
            Len -= 2;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	3b02      	subs	r3, #2
 8002e9a:	607b      	str	r3, [r7, #4]
            (uint16_t *)pTxBuffer++;
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	3301      	adds	r3, #1
 8002ea0:	60bb      	str	r3, [r7, #8]
 8002ea2:	e7d7      	b.n	8002e54 <_ZN11SPI_Handler12SPI_SendDataEPKhm+0x2c>
        }
        else {
            SPIx_.pSPIx->DR = *pTxBuffer;
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	781a      	ldrb	r2, [r3, #0]
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	60da      	str	r2, [r3, #12]
            Len -= 1;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	3b01      	subs	r3, #1
 8002eb2:	607b      	str	r3, [r7, #4]
            pTxBuffer++;
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	3301      	adds	r3, #1
 8002eb8:	60bb      	str	r3, [r7, #8]
    while(Len > 0) {
 8002eba:	e7cb      	b.n	8002e54 <_ZN11SPI_Handler12SPI_SendDataEPKhm+0x2c>
        }
    }
    while(SPI_GetFlagStatus(SPI_BSY_FLAG)); // w8 until SPI done
 8002ebc:	2180      	movs	r1, #128	; 0x80
 8002ebe:	68f8      	ldr	r0, [r7, #12]
 8002ec0:	f7ff ff9d 	bl	8002dfe <_ZN11SPI_Handler17SPI_GetFlagStatusEh>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	bf14      	ite	ne
 8002eca:	2301      	movne	r3, #1
 8002ecc:	2300      	moveq	r3, #0
 8002ece:	b2db      	uxtb	r3, r3
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d000      	beq.n	8002ed6 <_ZN11SPI_Handler12SPI_SendDataEPKhm+0xae>
 8002ed4:	e7f2      	b.n	8002ebc <_ZN11SPI_Handler12SPI_SendDataEPKhm+0x94>
    SPI_ClearOVRFlag(); // because in 2 lines mode, write data does not need to read
 8002ed6:	68f8      	ldr	r0, [r7, #12]
 8002ed8:	f000 f9ec 	bl	80032b4 <_ZN11SPI_Handler16SPI_ClearOVRFlagEv>
}
 8002edc:	bf00      	nop
 8002ede:	3710      	adds	r7, #16
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bd80      	pop	{r7, pc}

08002ee4 <_ZN11SPI_Handler22SPI_SendAndReceiveDataEPhS0_m>:
    }
    while(SPI_GetFlagStatus(SPI_BSY_FLAG)); // w8 until SPI done
}


void SPI_Handler::SPI_SendAndReceiveData(uint8_t *pTxBuffer, uint8_t *pRxBuffer, uint32_t len) {
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b084      	sub	sp, #16
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	60f8      	str	r0, [r7, #12]
 8002eec:	60b9      	str	r1, [r7, #8]
 8002eee:	607a      	str	r2, [r7, #4]
 8002ef0:	603b      	str	r3, [r7, #0]
    if ((SPIx_.pSPIx->CR1 & SPI_CR1_SPE_MSK) != SPI_CR1_SPE_MSK) {
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002efc:	2b40      	cmp	r3, #64	; 0x40
 8002efe:	bf14      	ite	ne
 8002f00:	2301      	movne	r3, #1
 8002f02:	2300      	moveq	r3, #0
 8002f04:	b2db      	uxtb	r3, r3
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d003      	beq.n	8002f12 <_ZN11SPI_Handler22SPI_SendAndReceiveDataEPhS0_m+0x2e>
        SPI_PeripheralControl(ENABLE);
 8002f0a:	2101      	movs	r1, #1
 8002f0c:	68f8      	ldr	r0, [r7, #12]
 8002f0e:	f7ff ff57 	bl	8002dc0 <_ZN11SPI_Handler21SPI_PeripheralControlEh>
    }
    while(len > 0) {
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d05c      	beq.n	8002fd2 <_ZN11SPI_Handler22SPI_SendAndReceiveDataEPhS0_m+0xee>
        // 1. wait util tx buffer empty
        while(SPI_GetFlagStatus(SPI_TXE_FLAG) == FLAG_RESET);
 8002f18:	2102      	movs	r1, #2
 8002f1a:	68f8      	ldr	r0, [r7, #12]
 8002f1c:	f7ff ff6f 	bl	8002dfe <_ZN11SPI_Handler17SPI_GetFlagStatusEh>
 8002f20:	4603      	mov	r3, r0
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	bf0c      	ite	eq
 8002f26:	2301      	moveq	r3, #1
 8002f28:	2300      	movne	r3, #0
 8002f2a:	b2db      	uxtb	r3, r3
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d000      	beq.n	8002f32 <_ZN11SPI_Handler22SPI_SendAndReceiveDataEPhS0_m+0x4e>
 8002f30:	e7f2      	b.n	8002f18 <_ZN11SPI_Handler22SPI_SendAndReceiveDataEPhS0_m+0x34>

        // 2. check the DFF bit in CR1
        if(SPIx_.pSPIx->CR1 & (1 << SPI_CR1_DFF)) {
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	bf14      	ite	ne
 8002f40:	2301      	movne	r3, #1
 8002f42:	2300      	moveq	r3, #0
 8002f44:	b2db      	uxtb	r3, r3
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d00b      	beq.n	8002f62 <_ZN11SPI_Handler22SPI_SendAndReceiveDataEPhS0_m+0x7e>
            // 16 BIT DFF
            // 1. load the data into the DR
            SPIx_.pSPIx->DR = *((uint16_t *)pTxBuffer);
 8002f4a:	68bb      	ldr	r3, [r7, #8]
 8002f4c:	881a      	ldrh	r2, [r3, #0]
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	60da      	str	r2, [r3, #12]
            len -= 2;
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	3b02      	subs	r3, #2
 8002f58:	603b      	str	r3, [r7, #0]
            (uint16_t *)pTxBuffer++;
 8002f5a:	68bb      	ldr	r3, [r7, #8]
 8002f5c:	3301      	adds	r3, #1
 8002f5e:	60bb      	str	r3, [r7, #8]
 8002f60:	e00a      	b.n	8002f78 <_ZN11SPI_Handler22SPI_SendAndReceiveDataEPhS0_m+0x94>
        }
        else {
            SPIx_.pSPIx->DR = *pTxBuffer;
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	781a      	ldrb	r2, [r3, #0]
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	60da      	str	r2, [r3, #12]
            len -= 1;
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	3b01      	subs	r3, #1
 8002f70:	603b      	str	r3, [r7, #0]
            pTxBuffer++;
 8002f72:	68bb      	ldr	r3, [r7, #8]
 8002f74:	3301      	adds	r3, #1
 8002f76:	60bb      	str	r3, [r7, #8]
        }

        //1. wait until RXNE is set
        while (SPI_GetFlagStatus(SPI_RXNE_FLAG) == (uint8_t) FLAG_RESET);
 8002f78:	2101      	movs	r1, #1
 8002f7a:	68f8      	ldr	r0, [r7, #12]
 8002f7c:	f7ff ff3f 	bl	8002dfe <_ZN11SPI_Handler17SPI_GetFlagStatusEh>
 8002f80:	4603      	mov	r3, r0
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	bf0c      	ite	eq
 8002f86:	2301      	moveq	r3, #1
 8002f88:	2300      	movne	r3, #0
 8002f8a:	b2db      	uxtb	r3, r3
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d000      	beq.n	8002f92 <_ZN11SPI_Handler22SPI_SendAndReceiveDataEPhS0_m+0xae>
 8002f90:	e7f2      	b.n	8002f78 <_ZN11SPI_Handler22SPI_SendAndReceiveDataEPhS0_m+0x94>

        //2. check the DFF bit in CR1
        if ((SPIx_.pSPIx->CR1 & (1 << SPI_CR1_DFF))) {
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	bf14      	ite	ne
 8002fa0:	2301      	movne	r3, #1
 8002fa2:	2300      	moveq	r3, #0
 8002fa4:	b2db      	uxtb	r3, r3
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d009      	beq.n	8002fbe <_ZN11SPI_Handler22SPI_SendAndReceiveDataEPhS0_m+0xda>
            //16 bit DFF
            //1. load the data from DR to Rxbuffer address
            *((uint16_t*) pRxBuffer) = SPIx_.pSPIx->DR;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	68da      	ldr	r2, [r3, #12]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	b292      	uxth	r2, r2
 8002fb4:	801a      	strh	r2, [r3, #0]
            (uint16_t*) pRxBuffer++;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	3301      	adds	r3, #1
 8002fba:	607b      	str	r3, [r7, #4]
 8002fbc:	e7a9      	b.n	8002f12 <_ZN11SPI_Handler22SPI_SendAndReceiveDataEPhS0_m+0x2e>
        }
        else {
            //8 bit DFF
            *(pRxBuffer) = SPIx_.pSPIx->DR;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	68da      	ldr	r2, [r3, #12]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	b2d2      	uxtb	r2, r2
 8002fc8:	701a      	strb	r2, [r3, #0]
            pRxBuffer++;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	3301      	adds	r3, #1
 8002fce:	607b      	str	r3, [r7, #4]
    while(len > 0) {
 8002fd0:	e79f      	b.n	8002f12 <_ZN11SPI_Handler22SPI_SendAndReceiveDataEPhS0_m+0x2e>
        }
    }
    while(SPI_GetFlagStatus(SPI_BSY_FLAG)); // w8 until SPI done
 8002fd2:	2180      	movs	r1, #128	; 0x80
 8002fd4:	68f8      	ldr	r0, [r7, #12]
 8002fd6:	f7ff ff12 	bl	8002dfe <_ZN11SPI_Handler17SPI_GetFlagStatusEh>
 8002fda:	4603      	mov	r3, r0
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	bf14      	ite	ne
 8002fe0:	2301      	movne	r3, #1
 8002fe2:	2300      	moveq	r3, #0
 8002fe4:	b2db      	uxtb	r3, r3
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d000      	beq.n	8002fec <_ZN11SPI_Handler22SPI_SendAndReceiveDataEPhS0_m+0x108>
 8002fea:	e7f2      	b.n	8002fd2 <_ZN11SPI_Handler22SPI_SendAndReceiveDataEPhS0_m+0xee>
}
 8002fec:	bf00      	nop
 8002fee:	3710      	adds	r7, #16
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bd80      	pop	{r7, pc}

08002ff4 <_ZN11SPI_Handler14SPI_SSOEConfigEh>:


void SPI_Handler::SPI_SSOEConfig(uint8_t EnOrDi) {
 8002ff4:	b480      	push	{r7}
 8002ff6:	b083      	sub	sp, #12
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
 8002ffc:	460b      	mov	r3, r1
 8002ffe:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE) {
 8003000:	78fb      	ldrb	r3, [r7, #3]
 8003002:	2b01      	cmp	r3, #1
 8003004:	d108      	bne.n	8003018 <_ZN11SPI_Handler14SPI_SSOEConfigEh+0x24>
		SPIx_.pSPIx->CR2 |= (1 << SPI_CR2_SSOE);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	685a      	ldr	r2, [r3, #4]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f042 0204 	orr.w	r2, r2, #4
 8003014:	605a      	str	r2, [r3, #4]
	}
	else {
		SPIx_.pSPIx->CR2 &= ~(1 << SPI_CR2_SSOE);
	}
}
 8003016:	e007      	b.n	8003028 <_ZN11SPI_Handler14SPI_SSOEConfigEh+0x34>
		SPIx_.pSPIx->CR2 &= ~(1 << SPI_CR2_SSOE);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	685a      	ldr	r2, [r3, #4]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f022 0204 	bic.w	r2, r2, #4
 8003026:	605a      	str	r2, [r3, #4]
}
 8003028:	bf00      	nop
 800302a:	370c      	adds	r7, #12
 800302c:	46bd      	mov	sp, r7
 800302e:	bc80      	pop	{r7}
 8003030:	4770      	bx	lr

08003032 <_ZN11SPI_Handler13SPI_SSIConfigEh>:
 *
 * @return            - None

 */
void SPI_Handler::SPI_SSIConfig(uint8_t EnOrDi)
{
 8003032:	b480      	push	{r7}
 8003034:	b083      	sub	sp, #12
 8003036:	af00      	add	r7, sp, #0
 8003038:	6078      	str	r0, [r7, #4]
 800303a:	460b      	mov	r3, r1
 800303c:	70fb      	strb	r3, [r7, #3]
    if(EnOrDi == ENABLE)
 800303e:	78fb      	ldrb	r3, [r7, #3]
 8003040:	2b01      	cmp	r3, #1
 8003042:	d108      	bne.n	8003056 <_ZN11SPI_Handler13SPI_SSIConfigEh+0x24>
    {
        SPIx_.pSPIx->CR1 |=  (1 << SPI_CR1_SSI);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	681a      	ldr	r2, [r3, #0]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003052:	601a      	str	r2, [r3, #0]
    }else
    {
        SPIx_.pSPIx->CR1 &=  ~(1 << SPI_CR1_SSI);
    }
}
 8003054:	e007      	b.n	8003066 <_ZN11SPI_Handler13SPI_SSIConfigEh+0x34>
        SPIx_.pSPIx->CR1 &=  ~(1 << SPI_CR1_SSI);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	681a      	ldr	r2, [r3, #0]
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003064:	601a      	str	r2, [r3, #0]
}
 8003066:	bf00      	nop
 8003068:	370c      	adds	r7, #12
 800306a:	46bd      	mov	sp, r7
 800306c:	bc80      	pop	{r7}
 800306e:	4770      	bx	lr

08003070 <_ZN11SPI_Handler15SPI_IRQHandlingEv>:
	SPIx_.pSPIx->CR2 |= (1 << SPI_CR2_RXNEIE | 1 << SPI_CR2_ERRIE | 1 << SPI_CR2_TXEIE);

    return SPIx_.TxState;
}

void SPI_Handler::SPI_IRQHandling() {
 8003070:	b580      	push	{r7, lr}
 8003072:	b084      	sub	sp, #16
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
    volatile uint8_t temp1 = 0, temp2 = 0;
 8003078:	2300      	movs	r3, #0
 800307a:	73fb      	strb	r3, [r7, #15]
 800307c:	2300      	movs	r3, #0
 800307e:	73bb      	strb	r3, [r7, #14]
	// check for RXNE
	temp1 = SPIx_.pSPIx->SR & (1 << SPI_SR_RXNE);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	689b      	ldr	r3, [r3, #8]
 8003086:	b2db      	uxtb	r3, r3
 8003088:	f003 0301 	and.w	r3, r3, #1
 800308c:	b2db      	uxtb	r3, r3
 800308e:	73fb      	strb	r3, [r7, #15]
	temp2 = SPIx_.pSPIx->CR2 & (1 << SPI_CR2_RXNEIE);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	b2db      	uxtb	r3, r3
 8003098:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800309c:	b2db      	uxtb	r3, r3
 800309e:	73bb      	strb	r3, [r7, #14]
	if (temp1 && temp2) {
 80030a0:	7bfb      	ldrb	r3, [r7, #15]
 80030a2:	b2db      	uxtb	r3, r3
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d005      	beq.n	80030b4 <_ZN11SPI_Handler15SPI_IRQHandlingEv+0x44>
 80030a8:	7bbb      	ldrb	r3, [r7, #14]
 80030aa:	b2db      	uxtb	r3, r3
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d001      	beq.n	80030b4 <_ZN11SPI_Handler15SPI_IRQHandlingEv+0x44>
 80030b0:	2301      	movs	r3, #1
 80030b2:	e000      	b.n	80030b6 <_ZN11SPI_Handler15SPI_IRQHandlingEv+0x46>
 80030b4:	2300      	movs	r3, #0
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d003      	beq.n	80030c2 <_ZN11SPI_Handler15SPI_IRQHandlingEv+0x52>
		spi_rxne_interrupt_handle();
 80030ba:	6878      	ldr	r0, [r7, #4]
 80030bc:	f000 f897 	bl	80031ee <_ZN11SPI_Handler25spi_rxne_interrupt_handleEv>
		return;
 80030c0:	e041      	b.n	8003146 <_ZN11SPI_Handler15SPI_IRQHandlingEv+0xd6>
	}

    // First lets check for TXE
    temp1 = SPIx_.pSPIx->SR & (1 << SPI_SR_TXE);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	689b      	ldr	r3, [r3, #8]
 80030c8:	b2db      	uxtb	r3, r3
 80030ca:	f003 0302 	and.w	r3, r3, #2
 80030ce:	b2db      	uxtb	r3, r3
 80030d0:	73fb      	strb	r3, [r7, #15]
    temp2 = SPIx_.pSPIx->CR2 & (1 << SPI_CR2_TXEIE);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	b2db      	uxtb	r3, r3
 80030da:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80030de:	b2db      	uxtb	r3, r3
 80030e0:	73bb      	strb	r3, [r7, #14]
    if(temp1 && temp2) {
 80030e2:	7bfb      	ldrb	r3, [r7, #15]
 80030e4:	b2db      	uxtb	r3, r3
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d005      	beq.n	80030f6 <_ZN11SPI_Handler15SPI_IRQHandlingEv+0x86>
 80030ea:	7bbb      	ldrb	r3, [r7, #14]
 80030ec:	b2db      	uxtb	r3, r3
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d001      	beq.n	80030f6 <_ZN11SPI_Handler15SPI_IRQHandlingEv+0x86>
 80030f2:	2301      	movs	r3, #1
 80030f4:	e000      	b.n	80030f8 <_ZN11SPI_Handler15SPI_IRQHandlingEv+0x88>
 80030f6:	2300      	movs	r3, #0
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d003      	beq.n	8003104 <_ZN11SPI_Handler15SPI_IRQHandlingEv+0x94>
        // Handle TXE
        spi_txe_interrupt_handle();
 80030fc:	6878      	ldr	r0, [r7, #4]
 80030fe:	f000 f825 	bl	800314c <_ZN11SPI_Handler24spi_txe_interrupt_handleEv>
        return;
 8003102:	e020      	b.n	8003146 <_ZN11SPI_Handler15SPI_IRQHandlingEv+0xd6>
    }

	// check for ovr flag
	temp1 = SPIx_.pSPIx->SR & (1 << SPI_SR_OVR);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	b2db      	uxtb	r3, r3
 800310c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003110:	b2db      	uxtb	r3, r3
 8003112:	73fb      	strb	r3, [r7, #15]
	temp2 = SPIx_.pSPIx->CR2 & (1 << SPI_CR2_ERRIE);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	b2db      	uxtb	r3, r3
 800311c:	f003 0320 	and.w	r3, r3, #32
 8003120:	b2db      	uxtb	r3, r3
 8003122:	73bb      	strb	r3, [r7, #14]
	if (temp1 && temp2) {
 8003124:	7bfb      	ldrb	r3, [r7, #15]
 8003126:	b2db      	uxtb	r3, r3
 8003128:	2b00      	cmp	r3, #0
 800312a:	d005      	beq.n	8003138 <_ZN11SPI_Handler15SPI_IRQHandlingEv+0xc8>
 800312c:	7bbb      	ldrb	r3, [r7, #14]
 800312e:	b2db      	uxtb	r3, r3
 8003130:	2b00      	cmp	r3, #0
 8003132:	d001      	beq.n	8003138 <_ZN11SPI_Handler15SPI_IRQHandlingEv+0xc8>
 8003134:	2301      	movs	r3, #1
 8003136:	e000      	b.n	800313a <_ZN11SPI_Handler15SPI_IRQHandlingEv+0xca>
 8003138:	2300      	movs	r3, #0
 800313a:	2b00      	cmp	r3, #0
 800313c:	d003      	beq.n	8003146 <_ZN11SPI_Handler15SPI_IRQHandlingEv+0xd6>
		spi_ovr_err_interrupt_handle();
 800313e:	6878      	ldr	r0, [r7, #4]
 8003140:	f000 f8a8 	bl	8003294 <_ZN11SPI_Handler28spi_ovr_err_interrupt_handleEv>
		return;
 8003144:	bf00      	nop
	}




}
 8003146:	3710      	adds	r7, #16
 8003148:	46bd      	mov	sp, r7
 800314a:	bd80      	pop	{r7, pc}

0800314c <_ZN11SPI_Handler24spi_txe_interrupt_handleEv>:

void SPI_Handler::spi_txe_interrupt_handle() {
 800314c:	b580      	push	{r7, lr}
 800314e:	b082      	sub	sp, #8
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
	if ((SPIx_.pSPIx->CR1 & SPI_CR1_SPE_MSK) != SPI_CR1_SPE_MSK) {
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800315e:	2b40      	cmp	r3, #64	; 0x40
 8003160:	bf14      	ite	ne
 8003162:	2301      	movne	r3, #1
 8003164:	2300      	moveq	r3, #0
 8003166:	b2db      	uxtb	r3, r3
 8003168:	2b00      	cmp	r3, #0
 800316a:	d003      	beq.n	8003174 <_ZN11SPI_Handler24spi_txe_interrupt_handleEv+0x28>
        SPI_PeripheralControl(ENABLE);
 800316c:	2101      	movs	r1, #1
 800316e:	6878      	ldr	r0, [r7, #4]
 8003170:	f7ff fe26 	bl	8002dc0 <_ZN11SPI_Handler21SPI_PeripheralControlEh>
    }

    // 2. check the DFF bit in CR1
    if (SPIx_.pSPIx->CR1 & (1 << SPI_CR1_DFF)) {
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800317e:	2b00      	cmp	r3, #0
 8003180:	bf14      	ite	ne
 8003182:	2301      	movne	r3, #1
 8003184:	2300      	moveq	r3, #0
 8003186:	b2db      	uxtb	r3, r3
 8003188:	2b00      	cmp	r3, #0
 800318a:	d010      	beq.n	80031ae <_ZN11SPI_Handler24spi_txe_interrupt_handleEv+0x62>
        // 16 BIT DFF
        // 1. load the data into the DR
        SPIx_.pSPIx->DR = *((uint16_t*) SPIx_.pTxBuffer);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	68db      	ldr	r3, [r3, #12]
 8003190:	881a      	ldrh	r2, [r3, #0]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	60da      	str	r2, [r3, #12]
        SPIx_.TxLen -= 2;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	695b      	ldr	r3, [r3, #20]
 800319c:	1e9a      	subs	r2, r3, #2
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	615a      	str	r2, [r3, #20]
        (uint16_t*) SPIx_.pTxBuffer++;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	68db      	ldr	r3, [r3, #12]
 80031a6:	1c5a      	adds	r2, r3, #1
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	60da      	str	r2, [r3, #12]
 80031ac:	e00f      	b.n	80031ce <_ZN11SPI_Handler24spi_txe_interrupt_handleEv+0x82>
    } else {
        SPIx_.pSPIx->DR = *SPIx_.pTxBuffer;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	68db      	ldr	r3, [r3, #12]
 80031b2:	781a      	ldrb	r2, [r3, #0]
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	60da      	str	r2, [r3, #12]
        SPIx_.TxLen -= 1;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	695b      	ldr	r3, [r3, #20]
 80031be:	1e5a      	subs	r2, r3, #1
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	615a      	str	r2, [r3, #20]
        SPIx_.pTxBuffer++;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	68db      	ldr	r3, [r3, #12]
 80031c8:	1c5a      	adds	r2, r3, #1
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	60da      	str	r2, [r3, #12]
    }

    if(!SPIx_.TxLen) {
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	695b      	ldr	r3, [r3, #20]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d107      	bne.n	80031e6 <_ZN11SPI_Handler24spi_txe_interrupt_handleEv+0x9a>
        // TxLen is zero, close the spi transmission and inform the application
        // Tx is over
        SPI_CloseTransmission();
 80031d6:	6878      	ldr	r0, [r7, #4]
 80031d8:	f000 f882 	bl	80032e0 <_ZN11SPI_Handler21SPI_CloseTransmissionEv>
        SPI_ApplicationEventCallback(&SPIx_, SPI_EVENT_TX_CMPLT);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2101      	movs	r1, #1
 80031e0:	4618      	mov	r0, r3
 80031e2:	f000 f8c0 	bl	8003366 <_Z28SPI_ApplicationEventCallbackP12SPI_Handle_th>
    }
}
 80031e6:	bf00      	nop
 80031e8:	3708      	adds	r7, #8
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}

080031ee <_ZN11SPI_Handler25spi_rxne_interrupt_handleEv>:

void SPI_Handler::spi_rxne_interrupt_handle() {
 80031ee:	b580      	push	{r7, lr}
 80031f0:	b082      	sub	sp, #8
 80031f2:	af00      	add	r7, sp, #0
 80031f4:	6078      	str	r0, [r7, #4]
	if ((SPIx_.pSPIx->CR1 & SPI_CR1_SPE_MSK) != SPI_CR1_SPE_MSK) {
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003200:	2b40      	cmp	r3, #64	; 0x40
 8003202:	bf14      	ite	ne
 8003204:	2301      	movne	r3, #1
 8003206:	2300      	moveq	r3, #0
 8003208:	b2db      	uxtb	r3, r3
 800320a:	2b00      	cmp	r3, #0
 800320c:	d003      	beq.n	8003216 <_ZN11SPI_Handler25spi_rxne_interrupt_handleEv+0x28>
        SPI_PeripheralControl(ENABLE);
 800320e:	2101      	movs	r1, #1
 8003210:	6878      	ldr	r0, [r7, #4]
 8003212:	f7ff fdd5 	bl	8002dc0 <_ZN11SPI_Handler21SPI_PeripheralControlEh>
    }


    //2. check the DFF bit in CR1
    if ((SPIx_.pSPIx->CR1 & (1 << SPI_CR1_DFF))) {
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003220:	2b00      	cmp	r3, #0
 8003222:	bf14      	ite	ne
 8003224:	2301      	movne	r3, #1
 8003226:	2300      	moveq	r3, #0
 8003228:	b2db      	uxtb	r3, r3
 800322a:	2b00      	cmp	r3, #0
 800322c:	d011      	beq.n	8003252 <_ZN11SPI_Handler25spi_rxne_interrupt_handleEv+0x64>
        //16 bit DFF
        //1. load the data from DR to Rxbuffer address
        *((uint16_t*) SPIx_.pRxBuffer) = SPIx_.pSPIx->DR;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	68da      	ldr	r2, [r3, #12]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	691b      	ldr	r3, [r3, #16]
 8003238:	b292      	uxth	r2, r2
 800323a:	801a      	strh	r2, [r3, #0]
        SPIx_.RxLen -= 2;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	699b      	ldr	r3, [r3, #24]
 8003240:	1e9a      	subs	r2, r3, #2
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	619a      	str	r2, [r3, #24]
        (uint16_t*) SPIx_.pRxBuffer++;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	691b      	ldr	r3, [r3, #16]
 800324a:	1c5a      	adds	r2, r3, #1
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	611a      	str	r2, [r3, #16]
 8003250:	e010      	b.n	8003274 <_ZN11SPI_Handler25spi_rxne_interrupt_handleEv+0x86>
    } else {
        //8 bit DFF
        *(SPIx_.pRxBuffer) = SPIx_.pSPIx->DR;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	68da      	ldr	r2, [r3, #12]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	691b      	ldr	r3, [r3, #16]
 800325c:	b2d2      	uxtb	r2, r2
 800325e:	701a      	strb	r2, [r3, #0]
        SPIx_.RxLen--;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	699b      	ldr	r3, [r3, #24]
 8003264:	1e5a      	subs	r2, r3, #1
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	619a      	str	r2, [r3, #24]
        SPIx_.pRxBuffer++;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	691b      	ldr	r3, [r3, #16]
 800326e:	1c5a      	adds	r2, r3, #1
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	611a      	str	r2, [r3, #16]
    }

    if(!SPIx_.RxLen) {
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	699b      	ldr	r3, [r3, #24]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d107      	bne.n	800328c <_ZN11SPI_Handler25spi_rxne_interrupt_handleEv+0x9e>
        // TxLen is zero, close the spi transmission and inform the application
        // Tx is over
        SPI_CloseReception();
 800327c:	6878      	ldr	r0, [r7, #4]
 800327e:	f000 f858 	bl	8003332 <_ZN11SPI_Handler18SPI_CloseReceptionEv>
        SPI_ApplicationEventCallback(&SPIx_, SPI_EVENT_RX_CMPLT);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2102      	movs	r1, #2
 8003286:	4618      	mov	r0, r3
 8003288:	f000 f86d 	bl	8003366 <_Z28SPI_ApplicationEventCallbackP12SPI_Handle_th>
    }
}
 800328c:	bf00      	nop
 800328e:	3708      	adds	r7, #8
 8003290:	46bd      	mov	sp, r7
 8003292:	bd80      	pop	{r7, pc}

08003294 <_ZN11SPI_Handler28spi_ovr_err_interrupt_handleEv>:

void SPI_Handler::spi_ovr_err_interrupt_handle() {
 8003294:	b580      	push	{r7, lr}
 8003296:	b082      	sub	sp, #8
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
    // 1. Clear the ovr flag
    SPI_ClearOVRFlag();
 800329c:	6878      	ldr	r0, [r7, #4]
 800329e:	f000 f809 	bl	80032b4 <_ZN11SPI_Handler16SPI_ClearOVRFlagEv>
    // 2. Inform the application
    SPI_ApplicationEventCallback(&SPIx_, SPI_EVENT_OVR_ERR);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2103      	movs	r1, #3
 80032a6:	4618      	mov	r0, r3
 80032a8:	f000 f85d 	bl	8003366 <_Z28SPI_ApplicationEventCallbackP12SPI_Handle_th>
}
 80032ac:	bf00      	nop
 80032ae:	3708      	adds	r7, #8
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bd80      	pop	{r7, pc}

080032b4 <_ZN11SPI_Handler16SPI_ClearOVRFlagEv>:


void SPI_Handler::SPI_ClearOVRFlag() {
 80032b4:	b480      	push	{r7}
 80032b6:	b085      	sub	sp, #20
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
    volatile uint8_t temp = 0;
 80032bc:	2300      	movs	r3, #0
 80032be:	73fb      	strb	r3, [r7, #15]
    temp = SPIx_.pSPIx->DR;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	68db      	ldr	r3, [r3, #12]
 80032c6:	b2db      	uxtb	r3, r3
 80032c8:	73fb      	strb	r3, [r7, #15]
    temp = SPIx_.pSPIx->SR;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	689b      	ldr	r3, [r3, #8]
 80032d0:	b2db      	uxtb	r3, r3
 80032d2:	73fb      	strb	r3, [r7, #15]
    static_cast<void>(temp);
 80032d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80032d6:	bf00      	nop
 80032d8:	3714      	adds	r7, #20
 80032da:	46bd      	mov	sp, r7
 80032dc:	bc80      	pop	{r7}
 80032de:	4770      	bx	lr

080032e0 <_ZN11SPI_Handler21SPI_CloseTransmissionEv>:

void SPI_Handler::SPI_CloseTransmission() {
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b082      	sub	sp, #8
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
	while((SPIx_.pSPIx->SR & (1 << SPI_SR_TXE)) == RESET);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	689b      	ldr	r3, [r3, #8]
 80032ee:	f003 0302 	and.w	r3, r3, #2
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	bf0c      	ite	eq
 80032f6:	2301      	moveq	r3, #1
 80032f8:	2300      	movne	r3, #0
 80032fa:	b2db      	uxtb	r3, r3
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d000      	beq.n	8003302 <_ZN11SPI_Handler21SPI_CloseTransmissionEv+0x22>
 8003300:	e7f2      	b.n	80032e8 <_ZN11SPI_Handler21SPI_CloseTransmissionEv+0x8>
    SPIx_.pSPIx->CR2 &= ~(1 << SPI_CR2_TXEIE | 1 << SPI_CR2_ERRIE);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	685a      	ldr	r2, [r3, #4]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003310:	605a      	str	r2, [r3, #4]
    SPIx_.pTxBuffer = nullptr;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2200      	movs	r2, #0
 8003316:	60da      	str	r2, [r3, #12]
    SPIx_.TxLen = 0;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2200      	movs	r2, #0
 800331c:	615a      	str	r2, [r3, #20]
    SPIx_.TxState = SPI_READY;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2200      	movs	r2, #0
 8003322:	771a      	strb	r2, [r3, #28]
    SPI_ClearOVRFlag(); // TODO: loi o day vi clear sau khi goi dummy
 8003324:	6878      	ldr	r0, [r7, #4]
 8003326:	f7ff ffc5 	bl	80032b4 <_ZN11SPI_Handler16SPI_ClearOVRFlagEv>
}
 800332a:	bf00      	nop
 800332c:	3708      	adds	r7, #8
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}

08003332 <_ZN11SPI_Handler18SPI_CloseReceptionEv>:

void SPI_Handler::SPI_CloseReception() {
 8003332:	b480      	push	{r7}
 8003334:	b083      	sub	sp, #12
 8003336:	af00      	add	r7, sp, #0
 8003338:	6078      	str	r0, [r7, #4]
    SPIx_.pSPIx->CR2 &= ~(1 << SPI_CR2_RXNEIE | 1 << SPI_CR2_ERRIE);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	685a      	ldr	r2, [r3, #4]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003348:	605a      	str	r2, [r3, #4]
    SPIx_.pRxBuffer = nullptr;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2200      	movs	r2, #0
 800334e:	611a      	str	r2, [r3, #16]
    SPIx_.RxLen = 0;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2200      	movs	r2, #0
 8003354:	619a      	str	r2, [r3, #24]
    SPIx_.RxState = SPI_READY;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2200      	movs	r2, #0
 800335a:	775a      	strb	r2, [r3, #29]
}
 800335c:	bf00      	nop
 800335e:	370c      	adds	r7, #12
 8003360:	46bd      	mov	sp, r7
 8003362:	bc80      	pop	{r7}
 8003364:	4770      	bx	lr

08003366 <_Z28SPI_ApplicationEventCallbackP12SPI_Handle_th>:

__weak void SPI_ApplicationEventCallback(SPI_Handle_t *pSPIHandle, uint8_t AppEv) {
 8003366:	b480      	push	{r7}
 8003368:	b083      	sub	sp, #12
 800336a:	af00      	add	r7, sp, #0
 800336c:	6078      	str	r0, [r7, #4]
 800336e:	460b      	mov	r3, r1
 8003370:	70fb      	strb	r3, [r7, #3]
    //This is a weak implementation . the user application may override this function.
}
 8003372:	bf00      	nop
 8003374:	370c      	adds	r7, #12
 8003376:	46bd      	mov	sp, r7
 8003378:	bc80      	pop	{r7}
 800337a:	4770      	bx	lr

0800337c <_ZNSt5tupleIJP12GPIO_HandlerSt14default_deleteIS0_EEEC1IS1_S3_Lb1EEEv>:
                typename enable_if<__and_<
                                     __is_implicitly_default_constructible<_U1>,
                                     __is_implicitly_default_constructible<_U2>>
                                   ::value, bool>::type = true>

      constexpr tuple()
 800337c:	b580      	push	{r7, lr}
 800337e:	b082      	sub	sp, #8
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
      : _Inherited() { }
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	4618      	mov	r0, r3
 8003388:	f000 f841 	bl	800340e <_ZNSt11_Tuple_implILj0EJP12GPIO_HandlerSt14default_deleteIS0_EEEC1Ev>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	4618      	mov	r0, r3
 8003390:	3708      	adds	r7, #8
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}

08003396 <_ZNSt15__uniq_ptr_implI12GPIO_HandlerSt14default_deleteIS0_EEC1Ev>:
        __and_<__not_<is_pointer<_Dp>>,
	       is_default_constructible<_Dp>>::value>;

      using pointer = typename _Ptr<_Tp, _Dp>::type;

      __uniq_ptr_impl() = default;
 8003396:	b580      	push	{r7, lr}
 8003398:	b082      	sub	sp, #8
 800339a:	af00      	add	r7, sp, #0
 800339c:	6078      	str	r0, [r7, #4]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	4618      	mov	r0, r3
 80033a2:	f7ff ffeb 	bl	800337c <_ZNSt5tupleIJP12GPIO_HandlerSt14default_deleteIS0_EEEC1IS1_S3_Lb1EEEv>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	4618      	mov	r0, r3
 80033aa:	3708      	adds	r7, #8
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bd80      	pop	{r7, pc}

080033b0 <_ZNSt10unique_ptrI12GPIO_HandlerSt14default_deleteIS0_EEC1IS2_vEEv>:
      // Constructors.

      /// Default constructor, creates a unique_ptr that owns nothing.
      template <typename _Up = _Dp,
		typename = _DeleterConstraint<_Up>>
	constexpr unique_ptr() noexcept
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b082      	sub	sp, #8
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
	: _M_t()
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2200      	movs	r2, #0
 80033bc:	601a      	str	r2, [r3, #0]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	4618      	mov	r0, r3
 80033c2:	f7ff ffe8 	bl	8003396 <_ZNSt15__uniq_ptr_implI12GPIO_HandlerSt14default_deleteIS0_EEC1Ev>
        { }
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	4618      	mov	r0, r3
 80033ca:	3708      	adds	r7, #8
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}

080033d0 <_ZNSt10unique_ptrI12GPIO_HandlerSt14default_deleteIS0_EE5resetEPS0_>:
       * @param __p  The new pointer to store.
       *
       * The deleter will be invoked if a pointer is already owned.
       */
      void
      reset(pointer __p = pointer()) noexcept
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b082      	sub	sp, #8
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
 80033d8:	6039      	str	r1, [r7, #0]
      {
	using std::swap;
	swap(_M_t._M_ptr(), __p);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	4618      	mov	r0, r3
 80033de:	f000 f826 	bl	800342e <_ZNSt15__uniq_ptr_implI12GPIO_HandlerSt14default_deleteIS0_EE6_M_ptrEv>
 80033e2:	4602      	mov	r2, r0
 80033e4:	463b      	mov	r3, r7
 80033e6:	4619      	mov	r1, r3
 80033e8:	4610      	mov	r0, r2
 80033ea:	f000 f857 	bl	800349c <_ZSt4swapIP12GPIO_HandlerENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS6_ESt18is_move_assignableIS6_EEE5valueEvE4typeERS6_SG_>
	if (__p != pointer())
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d008      	beq.n	8003406 <_ZNSt10unique_ptrI12GPIO_HandlerSt14default_deleteIS0_EE5resetEPS0_+0x36>
	  get_deleter()(__p);
 80033f4:	6878      	ldr	r0, [r7, #4]
 80033f6:	f000 f827 	bl	8003448 <_ZNSt10unique_ptrI12GPIO_HandlerSt14default_deleteIS0_EE11get_deleterEv>
 80033fa:	4602      	mov	r2, r0
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	4619      	mov	r1, r3
 8003400:	4610      	mov	r0, r2
 8003402:	f000 f82e 	bl	8003462 <_ZNKSt14default_deleteI12GPIO_HandlerEclEPS0_>
      }
 8003406:	bf00      	nop
 8003408:	3708      	adds	r7, #8
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}

0800340e <_ZNSt11_Tuple_implILj0EJP12GPIO_HandlerSt14default_deleteIS0_EEEC1Ev>:
      constexpr _Tuple_impl()
 800340e:	b580      	push	{r7, lr}
 8003410:	b082      	sub	sp, #8
 8003412:	af00      	add	r7, sp, #0
 8003414:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 8003416:	6878      	ldr	r0, [r7, #4]
 8003418:	f000 f85f 	bl	80034da <_ZNSt11_Tuple_implILj1EJSt14default_deleteI12GPIO_HandlerEEEC1Ev>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	4618      	mov	r0, r3
 8003420:	f000 f867 	bl	80034f2 <_ZNSt10_Head_baseILj0EP12GPIO_HandlerLb0EEC1Ev>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	4618      	mov	r0, r3
 8003428:	3708      	adds	r7, #8
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}

0800342e <_ZNSt15__uniq_ptr_implI12GPIO_HandlerSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 800342e:	b580      	push	{r7, lr}
 8003430:	b082      	sub	sp, #8
 8003432:	af00      	add	r7, sp, #0
 8003434:	6078      	str	r0, [r7, #4]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	4618      	mov	r0, r3
 800343a:	f000 f867 	bl	800350c <_ZSt3getILj0EJP12GPIO_HandlerSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 800343e:	4603      	mov	r3, r0
 8003440:	4618      	mov	r0, r3
 8003442:	3708      	adds	r7, #8
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}

08003448 <_ZNSt10unique_ptrI12GPIO_HandlerSt14default_deleteIS0_EE11get_deleterEv>:
      get_deleter() noexcept
 8003448:	b580      	push	{r7, lr}
 800344a:	b082      	sub	sp, #8
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	4618      	mov	r0, r3
 8003454:	f000 f867 	bl	8003526 <_ZNSt15__uniq_ptr_implI12GPIO_HandlerSt14default_deleteIS0_EE10_M_deleterEv>
 8003458:	4603      	mov	r3, r0
 800345a:	4618      	mov	r0, r3
 800345c:	3708      	adds	r7, #8
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}

08003462 <_ZNKSt14default_deleteI12GPIO_HandlerEclEPS0_>:
      operator()(_Tp* __ptr) const
 8003462:	b590      	push	{r4, r7, lr}
 8003464:	b083      	sub	sp, #12
 8003466:	af00      	add	r7, sp, #0
 8003468:	6078      	str	r0, [r7, #4]
 800346a:	6039      	str	r1, [r7, #0]
	delete __ptr;
 800346c:	683c      	ldr	r4, [r7, #0]
 800346e:	2c00      	cmp	r4, #0
 8003470:	d006      	beq.n	8003480 <_ZNKSt14default_deleteI12GPIO_HandlerEclEPS0_+0x1e>
 8003472:	4620      	mov	r0, r4
 8003474:	f7fe ffbd 	bl	80023f2 <_ZN12GPIO_HandlerD1Ev>
 8003478:	210c      	movs	r1, #12
 800347a:	4620      	mov	r0, r4
 800347c:	f000 f8bb 	bl	80035f6 <_ZdlPvj>
      }
 8003480:	bf00      	nop
 8003482:	370c      	adds	r7, #12
 8003484:	46bd      	mov	sp, r7
 8003486:	bd90      	pop	{r4, r7, pc}

08003488 <_ZSt4moveIRP12GPIO_HandlerEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 8003488:	b480      	push	{r7}
 800348a:	b083      	sub	sp, #12
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	4618      	mov	r0, r3
 8003494:	370c      	adds	r7, #12
 8003496:	46bd      	mov	sp, r7
 8003498:	bc80      	pop	{r7}
 800349a:	4770      	bx	lr

0800349c <_ZSt4swapIP12GPIO_HandlerENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS6_ESt18is_move_assignableIS6_EEE5valueEvE4typeERS6_SG_>:
    swap(_Tp& __a, _Tp& __b)
 800349c:	b580      	push	{r7, lr}
 800349e:	b084      	sub	sp, #16
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
 80034a4:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80034a6:	6878      	ldr	r0, [r7, #4]
 80034a8:	f7ff ffee 	bl	8003488 <_ZSt4moveIRP12GPIO_HandlerEONSt16remove_referenceIT_E4typeEOS4_>
 80034ac:	4603      	mov	r3, r0
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 80034b2:	6838      	ldr	r0, [r7, #0]
 80034b4:	f7ff ffe8 	bl	8003488 <_ZSt4moveIRP12GPIO_HandlerEONSt16remove_referenceIT_E4typeEOS4_>
 80034b8:	4603      	mov	r3, r0
 80034ba:	681a      	ldr	r2, [r3, #0]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80034c0:	f107 030c 	add.w	r3, r7, #12
 80034c4:	4618      	mov	r0, r3
 80034c6:	f7ff ffdf 	bl	8003488 <_ZSt4moveIRP12GPIO_HandlerEONSt16remove_referenceIT_E4typeEOS4_>
 80034ca:	4603      	mov	r3, r0
 80034cc:	681a      	ldr	r2, [r3, #0]
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	601a      	str	r2, [r3, #0]
    }
 80034d2:	bf00      	nop
 80034d4:	3710      	adds	r7, #16
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}

080034da <_ZNSt11_Tuple_implILj1EJSt14default_deleteI12GPIO_HandlerEEEC1Ev>:
      constexpr _Tuple_impl()
 80034da:	b580      	push	{r7, lr}
 80034dc:	b082      	sub	sp, #8
 80034de:	af00      	add	r7, sp, #0
 80034e0:	6078      	str	r0, [r7, #4]
      : _Base() { }
 80034e2:	6878      	ldr	r0, [r7, #4]
 80034e4:	f000 f82c 	bl	8003540 <_ZNSt10_Head_baseILj1ESt14default_deleteI12GPIO_HandlerELb1EEC1Ev>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	4618      	mov	r0, r3
 80034ec:	3708      	adds	r7, #8
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}

080034f2 <_ZNSt10_Head_baseILj0EP12GPIO_HandlerLb0EEC1Ev>:
      constexpr _Head_base()
 80034f2:	b480      	push	{r7}
 80034f4:	b083      	sub	sp, #12
 80034f6:	af00      	add	r7, sp, #0
 80034f8:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2200      	movs	r2, #0
 80034fe:	601a      	str	r2, [r3, #0]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	4618      	mov	r0, r3
 8003504:	370c      	adds	r7, #12
 8003506:	46bd      	mov	sp, r7
 8003508:	bc80      	pop	{r7}
 800350a:	4770      	bx	lr

0800350c <_ZSt3getILj0EJP12GPIO_HandlerSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }

  /// Return a reference to the ith element of a tuple.
  template<std::size_t __i, typename... _Elements>
    constexpr __tuple_element_t<__i, tuple<_Elements...>>&
    get(tuple<_Elements...>& __t) noexcept
 800350c:	b580      	push	{r7, lr}
 800350e:	b082      	sub	sp, #8
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	4618      	mov	r0, r3
 8003518:	f000 f81c 	bl	8003554 <_ZSt12__get_helperILj0EP12GPIO_HandlerJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800351c:	4603      	mov	r3, r0
 800351e:	4618      	mov	r0, r3
 8003520:	3708      	adds	r7, #8
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}

08003526 <_ZNSt15__uniq_ptr_implI12GPIO_HandlerSt14default_deleteIS0_EE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 8003526:	b580      	push	{r7, lr}
 8003528:	b082      	sub	sp, #8
 800352a:	af00      	add	r7, sp, #0
 800352c:	6078      	str	r0, [r7, #4]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	4618      	mov	r0, r3
 8003532:	f000 f81b 	bl	800356c <_ZSt3getILj1EJP12GPIO_HandlerSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8003536:	4603      	mov	r3, r0
 8003538:	4618      	mov	r0, r3
 800353a:	3708      	adds	r7, #8
 800353c:	46bd      	mov	sp, r7
 800353e:	bd80      	pop	{r7, pc}

08003540 <_ZNSt10_Head_baseILj1ESt14default_deleteI12GPIO_HandlerELb1EEC1Ev>:
      constexpr _Head_base()
 8003540:	b480      	push	{r7}
 8003542:	b083      	sub	sp, #12
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
      : _Head() { }
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	4618      	mov	r0, r3
 800354c:	370c      	adds	r7, #12
 800354e:	46bd      	mov	sp, r7
 8003550:	bc80      	pop	{r7}
 8003552:	4770      	bx	lr

08003554 <_ZSt12__get_helperILj0EP12GPIO_HandlerJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8003554:	b580      	push	{r7, lr}
 8003556:	b082      	sub	sp, #8
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800355c:	6878      	ldr	r0, [r7, #4]
 800355e:	f000 f811 	bl	8003584 <_ZNSt11_Tuple_implILj0EJP12GPIO_HandlerSt14default_deleteIS0_EEE7_M_headERS4_>
 8003562:	4603      	mov	r3, r0
 8003564:	4618      	mov	r0, r3
 8003566:	3708      	adds	r7, #8
 8003568:	46bd      	mov	sp, r7
 800356a:	bd80      	pop	{r7, pc}

0800356c <_ZSt3getILj1EJP12GPIO_HandlerSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 800356c:	b580      	push	{r7, lr}
 800356e:	b082      	sub	sp, #8
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8003574:	6878      	ldr	r0, [r7, #4]
 8003576:	f000 f812 	bl	800359e <_ZSt12__get_helperILj1ESt14default_deleteI12GPIO_HandlerEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 800357a:	4603      	mov	r3, r0
 800357c:	4618      	mov	r0, r3
 800357e:	3708      	adds	r7, #8
 8003580:	46bd      	mov	sp, r7
 8003582:	bd80      	pop	{r7, pc}

08003584 <_ZNSt11_Tuple_implILj0EJP12GPIO_HandlerSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8003584:	b580      	push	{r7, lr}
 8003586:	b082      	sub	sp, #8
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	4618      	mov	r0, r3
 8003590:	f000 f811 	bl	80035b6 <_ZNSt10_Head_baseILj0EP12GPIO_HandlerLb0EE7_M_headERS2_>
 8003594:	4603      	mov	r3, r0
 8003596:	4618      	mov	r0, r3
 8003598:	3708      	adds	r7, #8
 800359a:	46bd      	mov	sp, r7
 800359c:	bd80      	pop	{r7, pc}

0800359e <_ZSt12__get_helperILj1ESt14default_deleteI12GPIO_HandlerEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800359e:	b580      	push	{r7, lr}
 80035a0:	b082      	sub	sp, #8
 80035a2:	af00      	add	r7, sp, #0
 80035a4:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80035a6:	6878      	ldr	r0, [r7, #4]
 80035a8:	f000 f80f 	bl	80035ca <_ZNSt11_Tuple_implILj1EJSt14default_deleteI12GPIO_HandlerEEE7_M_headERS3_>
 80035ac:	4603      	mov	r3, r0
 80035ae:	4618      	mov	r0, r3
 80035b0:	3708      	adds	r7, #8
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}

080035b6 <_ZNSt10_Head_baseILj0EP12GPIO_HandlerLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 80035b6:	b480      	push	{r7}
 80035b8:	b083      	sub	sp, #12
 80035ba:	af00      	add	r7, sp, #0
 80035bc:	6078      	str	r0, [r7, #4]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	4618      	mov	r0, r3
 80035c2:	370c      	adds	r7, #12
 80035c4:	46bd      	mov	sp, r7
 80035c6:	bc80      	pop	{r7}
 80035c8:	4770      	bx	lr

080035ca <_ZNSt11_Tuple_implILj1EJSt14default_deleteI12GPIO_HandlerEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80035ca:	b580      	push	{r7, lr}
 80035cc:	b082      	sub	sp, #8
 80035ce:	af00      	add	r7, sp, #0
 80035d0:	6078      	str	r0, [r7, #4]
 80035d2:	6878      	ldr	r0, [r7, #4]
 80035d4:	f000 f805 	bl	80035e2 <_ZNSt10_Head_baseILj1ESt14default_deleteI12GPIO_HandlerELb1EE7_M_headERS3_>
 80035d8:	4603      	mov	r3, r0
 80035da:	4618      	mov	r0, r3
 80035dc:	3708      	adds	r7, #8
 80035de:	46bd      	mov	sp, r7
 80035e0:	bd80      	pop	{r7, pc}

080035e2 <_ZNSt10_Head_baseILj1ESt14default_deleteI12GPIO_HandlerELb1EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b; }
 80035e2:	b480      	push	{r7}
 80035e4:	b083      	sub	sp, #12
 80035e6:	af00      	add	r7, sp, #0
 80035e8:	6078      	str	r0, [r7, #4]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	4618      	mov	r0, r3
 80035ee:	370c      	adds	r7, #12
 80035f0:	46bd      	mov	sp, r7
 80035f2:	bc80      	pop	{r7}
 80035f4:	4770      	bx	lr

080035f6 <_ZdlPvj>:
 80035f6:	f000 b819 	b.w	800362c <_ZdlPv>

080035fa <_Znwj>:
 80035fa:	b510      	push	{r4, lr}
 80035fc:	2800      	cmp	r0, #0
 80035fe:	bf14      	ite	ne
 8003600:	4604      	movne	r4, r0
 8003602:	2401      	moveq	r4, #1
 8003604:	4620      	mov	r0, r4
 8003606:	f000 f84b 	bl	80036a0 <malloc>
 800360a:	b930      	cbnz	r0, 800361a <_Znwj+0x20>
 800360c:	f000 f806 	bl	800361c <_ZSt15get_new_handlerv>
 8003610:	b908      	cbnz	r0, 8003616 <_Znwj+0x1c>
 8003612:	f000 f813 	bl	800363c <abort>
 8003616:	4780      	blx	r0
 8003618:	e7f4      	b.n	8003604 <_Znwj+0xa>
 800361a:	bd10      	pop	{r4, pc}

0800361c <_ZSt15get_new_handlerv>:
 800361c:	4b02      	ldr	r3, [pc, #8]	; (8003628 <_ZSt15get_new_handlerv+0xc>)
 800361e:	6818      	ldr	r0, [r3, #0]
 8003620:	f3bf 8f5b 	dmb	ish
 8003624:	4770      	bx	lr
 8003626:	bf00      	nop
 8003628:	200001fc 	.word	0x200001fc

0800362c <_ZdlPv>:
 800362c:	f000 b840 	b.w	80036b0 <free>

08003630 <_ZSt17__throw_bad_allocv>:
 8003630:	b508      	push	{r3, lr}
 8003632:	f000 f803 	bl	800363c <abort>

08003636 <_ZSt25__throw_bad_function_callv>:
 8003636:	b508      	push	{r3, lr}
 8003638:	f000 f800 	bl	800363c <abort>

0800363c <abort>:
 800363c:	b508      	push	{r3, lr}
 800363e:	2006      	movs	r0, #6
 8003640:	f000 fc6e 	bl	8003f20 <raise>
 8003644:	2001      	movs	r0, #1
 8003646:	f7fe fa1f 	bl	8001a88 <_exit>
	...

0800364c <__errno>:
 800364c:	4b01      	ldr	r3, [pc, #4]	; (8003654 <__errno+0x8>)
 800364e:	6818      	ldr	r0, [r3, #0]
 8003650:	4770      	bx	lr
 8003652:	bf00      	nop
 8003654:	20000000 	.word	0x20000000

08003658 <__libc_init_array>:
 8003658:	b570      	push	{r4, r5, r6, lr}
 800365a:	4e0d      	ldr	r6, [pc, #52]	; (8003690 <__libc_init_array+0x38>)
 800365c:	4c0d      	ldr	r4, [pc, #52]	; (8003694 <__libc_init_array+0x3c>)
 800365e:	1ba4      	subs	r4, r4, r6
 8003660:	10a4      	asrs	r4, r4, #2
 8003662:	2500      	movs	r5, #0
 8003664:	42a5      	cmp	r5, r4
 8003666:	d109      	bne.n	800367c <__libc_init_array+0x24>
 8003668:	4e0b      	ldr	r6, [pc, #44]	; (8003698 <__libc_init_array+0x40>)
 800366a:	4c0c      	ldr	r4, [pc, #48]	; (800369c <__libc_init_array+0x44>)
 800366c:	f001 fdd4 	bl	8005218 <_init>
 8003670:	1ba4      	subs	r4, r4, r6
 8003672:	10a4      	asrs	r4, r4, #2
 8003674:	2500      	movs	r5, #0
 8003676:	42a5      	cmp	r5, r4
 8003678:	d105      	bne.n	8003686 <__libc_init_array+0x2e>
 800367a:	bd70      	pop	{r4, r5, r6, pc}
 800367c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003680:	4798      	blx	r3
 8003682:	3501      	adds	r5, #1
 8003684:	e7ee      	b.n	8003664 <__libc_init_array+0xc>
 8003686:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800368a:	4798      	blx	r3
 800368c:	3501      	adds	r5, #1
 800368e:	e7f2      	b.n	8003676 <__libc_init_array+0x1e>
 8003690:	08005458 	.word	0x08005458
 8003694:	08005458 	.word	0x08005458
 8003698:	08005458 	.word	0x08005458
 800369c:	0800545c 	.word	0x0800545c

080036a0 <malloc>:
 80036a0:	4b02      	ldr	r3, [pc, #8]	; (80036ac <malloc+0xc>)
 80036a2:	4601      	mov	r1, r0
 80036a4:	6818      	ldr	r0, [r3, #0]
 80036a6:	f000 b86d 	b.w	8003784 <_malloc_r>
 80036aa:	bf00      	nop
 80036ac:	20000000 	.word	0x20000000

080036b0 <free>:
 80036b0:	4b02      	ldr	r3, [pc, #8]	; (80036bc <free+0xc>)
 80036b2:	4601      	mov	r1, r0
 80036b4:	6818      	ldr	r0, [r3, #0]
 80036b6:	f000 b817 	b.w	80036e8 <_free_r>
 80036ba:	bf00      	nop
 80036bc:	20000000 	.word	0x20000000

080036c0 <memcpy>:
 80036c0:	b510      	push	{r4, lr}
 80036c2:	1e43      	subs	r3, r0, #1
 80036c4:	440a      	add	r2, r1
 80036c6:	4291      	cmp	r1, r2
 80036c8:	d100      	bne.n	80036cc <memcpy+0xc>
 80036ca:	bd10      	pop	{r4, pc}
 80036cc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80036d0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80036d4:	e7f7      	b.n	80036c6 <memcpy+0x6>

080036d6 <memset>:
 80036d6:	4402      	add	r2, r0
 80036d8:	4603      	mov	r3, r0
 80036da:	4293      	cmp	r3, r2
 80036dc:	d100      	bne.n	80036e0 <memset+0xa>
 80036de:	4770      	bx	lr
 80036e0:	f803 1b01 	strb.w	r1, [r3], #1
 80036e4:	e7f9      	b.n	80036da <memset+0x4>
	...

080036e8 <_free_r>:
 80036e8:	b538      	push	{r3, r4, r5, lr}
 80036ea:	4605      	mov	r5, r0
 80036ec:	2900      	cmp	r1, #0
 80036ee:	d045      	beq.n	800377c <_free_r+0x94>
 80036f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80036f4:	1f0c      	subs	r4, r1, #4
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	bfb8      	it	lt
 80036fa:	18e4      	addlt	r4, r4, r3
 80036fc:	f001 fa80 	bl	8004c00 <__malloc_lock>
 8003700:	4a1f      	ldr	r2, [pc, #124]	; (8003780 <_free_r+0x98>)
 8003702:	6813      	ldr	r3, [r2, #0]
 8003704:	4610      	mov	r0, r2
 8003706:	b933      	cbnz	r3, 8003716 <_free_r+0x2e>
 8003708:	6063      	str	r3, [r4, #4]
 800370a:	6014      	str	r4, [r2, #0]
 800370c:	4628      	mov	r0, r5
 800370e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003712:	f001 ba76 	b.w	8004c02 <__malloc_unlock>
 8003716:	42a3      	cmp	r3, r4
 8003718:	d90c      	bls.n	8003734 <_free_r+0x4c>
 800371a:	6821      	ldr	r1, [r4, #0]
 800371c:	1862      	adds	r2, r4, r1
 800371e:	4293      	cmp	r3, r2
 8003720:	bf04      	itt	eq
 8003722:	681a      	ldreq	r2, [r3, #0]
 8003724:	685b      	ldreq	r3, [r3, #4]
 8003726:	6063      	str	r3, [r4, #4]
 8003728:	bf04      	itt	eq
 800372a:	1852      	addeq	r2, r2, r1
 800372c:	6022      	streq	r2, [r4, #0]
 800372e:	6004      	str	r4, [r0, #0]
 8003730:	e7ec      	b.n	800370c <_free_r+0x24>
 8003732:	4613      	mov	r3, r2
 8003734:	685a      	ldr	r2, [r3, #4]
 8003736:	b10a      	cbz	r2, 800373c <_free_r+0x54>
 8003738:	42a2      	cmp	r2, r4
 800373a:	d9fa      	bls.n	8003732 <_free_r+0x4a>
 800373c:	6819      	ldr	r1, [r3, #0]
 800373e:	1858      	adds	r0, r3, r1
 8003740:	42a0      	cmp	r0, r4
 8003742:	d10b      	bne.n	800375c <_free_r+0x74>
 8003744:	6820      	ldr	r0, [r4, #0]
 8003746:	4401      	add	r1, r0
 8003748:	1858      	adds	r0, r3, r1
 800374a:	4282      	cmp	r2, r0
 800374c:	6019      	str	r1, [r3, #0]
 800374e:	d1dd      	bne.n	800370c <_free_r+0x24>
 8003750:	6810      	ldr	r0, [r2, #0]
 8003752:	6852      	ldr	r2, [r2, #4]
 8003754:	605a      	str	r2, [r3, #4]
 8003756:	4401      	add	r1, r0
 8003758:	6019      	str	r1, [r3, #0]
 800375a:	e7d7      	b.n	800370c <_free_r+0x24>
 800375c:	d902      	bls.n	8003764 <_free_r+0x7c>
 800375e:	230c      	movs	r3, #12
 8003760:	602b      	str	r3, [r5, #0]
 8003762:	e7d3      	b.n	800370c <_free_r+0x24>
 8003764:	6820      	ldr	r0, [r4, #0]
 8003766:	1821      	adds	r1, r4, r0
 8003768:	428a      	cmp	r2, r1
 800376a:	bf04      	itt	eq
 800376c:	6811      	ldreq	r1, [r2, #0]
 800376e:	6852      	ldreq	r2, [r2, #4]
 8003770:	6062      	str	r2, [r4, #4]
 8003772:	bf04      	itt	eq
 8003774:	1809      	addeq	r1, r1, r0
 8003776:	6021      	streq	r1, [r4, #0]
 8003778:	605c      	str	r4, [r3, #4]
 800377a:	e7c7      	b.n	800370c <_free_r+0x24>
 800377c:	bd38      	pop	{r3, r4, r5, pc}
 800377e:	bf00      	nop
 8003780:	20000200 	.word	0x20000200

08003784 <_malloc_r>:
 8003784:	b570      	push	{r4, r5, r6, lr}
 8003786:	1ccd      	adds	r5, r1, #3
 8003788:	f025 0503 	bic.w	r5, r5, #3
 800378c:	3508      	adds	r5, #8
 800378e:	2d0c      	cmp	r5, #12
 8003790:	bf38      	it	cc
 8003792:	250c      	movcc	r5, #12
 8003794:	2d00      	cmp	r5, #0
 8003796:	4606      	mov	r6, r0
 8003798:	db01      	blt.n	800379e <_malloc_r+0x1a>
 800379a:	42a9      	cmp	r1, r5
 800379c:	d903      	bls.n	80037a6 <_malloc_r+0x22>
 800379e:	230c      	movs	r3, #12
 80037a0:	6033      	str	r3, [r6, #0]
 80037a2:	2000      	movs	r0, #0
 80037a4:	bd70      	pop	{r4, r5, r6, pc}
 80037a6:	f001 fa2b 	bl	8004c00 <__malloc_lock>
 80037aa:	4a21      	ldr	r2, [pc, #132]	; (8003830 <_malloc_r+0xac>)
 80037ac:	6814      	ldr	r4, [r2, #0]
 80037ae:	4621      	mov	r1, r4
 80037b0:	b991      	cbnz	r1, 80037d8 <_malloc_r+0x54>
 80037b2:	4c20      	ldr	r4, [pc, #128]	; (8003834 <_malloc_r+0xb0>)
 80037b4:	6823      	ldr	r3, [r4, #0]
 80037b6:	b91b      	cbnz	r3, 80037c0 <_malloc_r+0x3c>
 80037b8:	4630      	mov	r0, r6
 80037ba:	f000 fb79 	bl	8003eb0 <_sbrk_r>
 80037be:	6020      	str	r0, [r4, #0]
 80037c0:	4629      	mov	r1, r5
 80037c2:	4630      	mov	r0, r6
 80037c4:	f000 fb74 	bl	8003eb0 <_sbrk_r>
 80037c8:	1c43      	adds	r3, r0, #1
 80037ca:	d124      	bne.n	8003816 <_malloc_r+0x92>
 80037cc:	230c      	movs	r3, #12
 80037ce:	6033      	str	r3, [r6, #0]
 80037d0:	4630      	mov	r0, r6
 80037d2:	f001 fa16 	bl	8004c02 <__malloc_unlock>
 80037d6:	e7e4      	b.n	80037a2 <_malloc_r+0x1e>
 80037d8:	680b      	ldr	r3, [r1, #0]
 80037da:	1b5b      	subs	r3, r3, r5
 80037dc:	d418      	bmi.n	8003810 <_malloc_r+0x8c>
 80037de:	2b0b      	cmp	r3, #11
 80037e0:	d90f      	bls.n	8003802 <_malloc_r+0x7e>
 80037e2:	600b      	str	r3, [r1, #0]
 80037e4:	50cd      	str	r5, [r1, r3]
 80037e6:	18cc      	adds	r4, r1, r3
 80037e8:	4630      	mov	r0, r6
 80037ea:	f001 fa0a 	bl	8004c02 <__malloc_unlock>
 80037ee:	f104 000b 	add.w	r0, r4, #11
 80037f2:	1d23      	adds	r3, r4, #4
 80037f4:	f020 0007 	bic.w	r0, r0, #7
 80037f8:	1ac3      	subs	r3, r0, r3
 80037fa:	d0d3      	beq.n	80037a4 <_malloc_r+0x20>
 80037fc:	425a      	negs	r2, r3
 80037fe:	50e2      	str	r2, [r4, r3]
 8003800:	e7d0      	b.n	80037a4 <_malloc_r+0x20>
 8003802:	428c      	cmp	r4, r1
 8003804:	684b      	ldr	r3, [r1, #4]
 8003806:	bf16      	itet	ne
 8003808:	6063      	strne	r3, [r4, #4]
 800380a:	6013      	streq	r3, [r2, #0]
 800380c:	460c      	movne	r4, r1
 800380e:	e7eb      	b.n	80037e8 <_malloc_r+0x64>
 8003810:	460c      	mov	r4, r1
 8003812:	6849      	ldr	r1, [r1, #4]
 8003814:	e7cc      	b.n	80037b0 <_malloc_r+0x2c>
 8003816:	1cc4      	adds	r4, r0, #3
 8003818:	f024 0403 	bic.w	r4, r4, #3
 800381c:	42a0      	cmp	r0, r4
 800381e:	d005      	beq.n	800382c <_malloc_r+0xa8>
 8003820:	1a21      	subs	r1, r4, r0
 8003822:	4630      	mov	r0, r6
 8003824:	f000 fb44 	bl	8003eb0 <_sbrk_r>
 8003828:	3001      	adds	r0, #1
 800382a:	d0cf      	beq.n	80037cc <_malloc_r+0x48>
 800382c:	6025      	str	r5, [r4, #0]
 800382e:	e7db      	b.n	80037e8 <_malloc_r+0x64>
 8003830:	20000200 	.word	0x20000200
 8003834:	20000204 	.word	0x20000204

08003838 <__cvt>:
 8003838:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800383c:	b088      	sub	sp, #32
 800383e:	2b00      	cmp	r3, #0
 8003840:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8003842:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8003844:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 8003848:	461e      	mov	r6, r3
 800384a:	f027 0720 	bic.w	r7, r7, #32
 800384e:	bfbb      	ittet	lt
 8003850:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8003854:	461e      	movlt	r6, r3
 8003856:	2300      	movge	r3, #0
 8003858:	232d      	movlt	r3, #45	; 0x2d
 800385a:	2f46      	cmp	r7, #70	; 0x46
 800385c:	4614      	mov	r4, r2
 800385e:	700b      	strb	r3, [r1, #0]
 8003860:	d004      	beq.n	800386c <__cvt+0x34>
 8003862:	2f45      	cmp	r7, #69	; 0x45
 8003864:	d100      	bne.n	8003868 <__cvt+0x30>
 8003866:	3501      	adds	r5, #1
 8003868:	2302      	movs	r3, #2
 800386a:	e000      	b.n	800386e <__cvt+0x36>
 800386c:	2303      	movs	r3, #3
 800386e:	aa07      	add	r2, sp, #28
 8003870:	9204      	str	r2, [sp, #16]
 8003872:	aa06      	add	r2, sp, #24
 8003874:	e9cd a202 	strd	sl, r2, [sp, #8]
 8003878:	e9cd 3500 	strd	r3, r5, [sp]
 800387c:	4622      	mov	r2, r4
 800387e:	4633      	mov	r3, r6
 8003880:	f000 fbf6 	bl	8004070 <_dtoa_r>
 8003884:	2f47      	cmp	r7, #71	; 0x47
 8003886:	4680      	mov	r8, r0
 8003888:	d102      	bne.n	8003890 <__cvt+0x58>
 800388a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800388c:	07db      	lsls	r3, r3, #31
 800388e:	d526      	bpl.n	80038de <__cvt+0xa6>
 8003890:	2f46      	cmp	r7, #70	; 0x46
 8003892:	eb08 0905 	add.w	r9, r8, r5
 8003896:	d111      	bne.n	80038bc <__cvt+0x84>
 8003898:	f898 3000 	ldrb.w	r3, [r8]
 800389c:	2b30      	cmp	r3, #48	; 0x30
 800389e:	d10a      	bne.n	80038b6 <__cvt+0x7e>
 80038a0:	2200      	movs	r2, #0
 80038a2:	2300      	movs	r3, #0
 80038a4:	4620      	mov	r0, r4
 80038a6:	4631      	mov	r1, r6
 80038a8:	f7fd f8da 	bl	8000a60 <__aeabi_dcmpeq>
 80038ac:	b918      	cbnz	r0, 80038b6 <__cvt+0x7e>
 80038ae:	f1c5 0501 	rsb	r5, r5, #1
 80038b2:	f8ca 5000 	str.w	r5, [sl]
 80038b6:	f8da 3000 	ldr.w	r3, [sl]
 80038ba:	4499      	add	r9, r3
 80038bc:	2200      	movs	r2, #0
 80038be:	2300      	movs	r3, #0
 80038c0:	4620      	mov	r0, r4
 80038c2:	4631      	mov	r1, r6
 80038c4:	f7fd f8cc 	bl	8000a60 <__aeabi_dcmpeq>
 80038c8:	b938      	cbnz	r0, 80038da <__cvt+0xa2>
 80038ca:	2230      	movs	r2, #48	; 0x30
 80038cc:	9b07      	ldr	r3, [sp, #28]
 80038ce:	454b      	cmp	r3, r9
 80038d0:	d205      	bcs.n	80038de <__cvt+0xa6>
 80038d2:	1c59      	adds	r1, r3, #1
 80038d4:	9107      	str	r1, [sp, #28]
 80038d6:	701a      	strb	r2, [r3, #0]
 80038d8:	e7f8      	b.n	80038cc <__cvt+0x94>
 80038da:	f8cd 901c 	str.w	r9, [sp, #28]
 80038de:	9b07      	ldr	r3, [sp, #28]
 80038e0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80038e2:	eba3 0308 	sub.w	r3, r3, r8
 80038e6:	4640      	mov	r0, r8
 80038e8:	6013      	str	r3, [r2, #0]
 80038ea:	b008      	add	sp, #32
 80038ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080038f0 <__exponent>:
 80038f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80038f2:	2900      	cmp	r1, #0
 80038f4:	4604      	mov	r4, r0
 80038f6:	bfba      	itte	lt
 80038f8:	4249      	neglt	r1, r1
 80038fa:	232d      	movlt	r3, #45	; 0x2d
 80038fc:	232b      	movge	r3, #43	; 0x2b
 80038fe:	2909      	cmp	r1, #9
 8003900:	f804 2b02 	strb.w	r2, [r4], #2
 8003904:	7043      	strb	r3, [r0, #1]
 8003906:	dd20      	ble.n	800394a <__exponent+0x5a>
 8003908:	f10d 0307 	add.w	r3, sp, #7
 800390c:	461f      	mov	r7, r3
 800390e:	260a      	movs	r6, #10
 8003910:	fb91 f5f6 	sdiv	r5, r1, r6
 8003914:	fb06 1115 	mls	r1, r6, r5, r1
 8003918:	3130      	adds	r1, #48	; 0x30
 800391a:	2d09      	cmp	r5, #9
 800391c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8003920:	f103 32ff 	add.w	r2, r3, #4294967295
 8003924:	4629      	mov	r1, r5
 8003926:	dc09      	bgt.n	800393c <__exponent+0x4c>
 8003928:	3130      	adds	r1, #48	; 0x30
 800392a:	3b02      	subs	r3, #2
 800392c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8003930:	42bb      	cmp	r3, r7
 8003932:	4622      	mov	r2, r4
 8003934:	d304      	bcc.n	8003940 <__exponent+0x50>
 8003936:	1a10      	subs	r0, r2, r0
 8003938:	b003      	add	sp, #12
 800393a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800393c:	4613      	mov	r3, r2
 800393e:	e7e7      	b.n	8003910 <__exponent+0x20>
 8003940:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003944:	f804 2b01 	strb.w	r2, [r4], #1
 8003948:	e7f2      	b.n	8003930 <__exponent+0x40>
 800394a:	2330      	movs	r3, #48	; 0x30
 800394c:	4419      	add	r1, r3
 800394e:	7083      	strb	r3, [r0, #2]
 8003950:	1d02      	adds	r2, r0, #4
 8003952:	70c1      	strb	r1, [r0, #3]
 8003954:	e7ef      	b.n	8003936 <__exponent+0x46>
	...

08003958 <_printf_float>:
 8003958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800395c:	b091      	sub	sp, #68	; 0x44
 800395e:	460c      	mov	r4, r1
 8003960:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8003962:	4693      	mov	fp, r2
 8003964:	461e      	mov	r6, r3
 8003966:	4605      	mov	r5, r0
 8003968:	f001 f93c 	bl	8004be4 <_localeconv_r>
 800396c:	6803      	ldr	r3, [r0, #0]
 800396e:	9309      	str	r3, [sp, #36]	; 0x24
 8003970:	4618      	mov	r0, r3
 8003972:	f7fc fc49 	bl	8000208 <strlen>
 8003976:	2300      	movs	r3, #0
 8003978:	930e      	str	r3, [sp, #56]	; 0x38
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	900a      	str	r0, [sp, #40]	; 0x28
 800397e:	3307      	adds	r3, #7
 8003980:	f023 0307 	bic.w	r3, r3, #7
 8003984:	f103 0208 	add.w	r2, r3, #8
 8003988:	f894 8018 	ldrb.w	r8, [r4, #24]
 800398c:	f8d4 a000 	ldr.w	sl, [r4]
 8003990:	603a      	str	r2, [r7, #0]
 8003992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003996:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800399a:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 800399e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80039a2:	930b      	str	r3, [sp, #44]	; 0x2c
 80039a4:	f04f 32ff 	mov.w	r2, #4294967295
 80039a8:	4ba6      	ldr	r3, [pc, #664]	; (8003c44 <_printf_float+0x2ec>)
 80039aa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80039ac:	4638      	mov	r0, r7
 80039ae:	f7fd f889 	bl	8000ac4 <__aeabi_dcmpun>
 80039b2:	bb68      	cbnz	r0, 8003a10 <_printf_float+0xb8>
 80039b4:	f04f 32ff 	mov.w	r2, #4294967295
 80039b8:	4ba2      	ldr	r3, [pc, #648]	; (8003c44 <_printf_float+0x2ec>)
 80039ba:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80039bc:	4638      	mov	r0, r7
 80039be:	f7fd f863 	bl	8000a88 <__aeabi_dcmple>
 80039c2:	bb28      	cbnz	r0, 8003a10 <_printf_float+0xb8>
 80039c4:	2200      	movs	r2, #0
 80039c6:	2300      	movs	r3, #0
 80039c8:	4638      	mov	r0, r7
 80039ca:	4649      	mov	r1, r9
 80039cc:	f7fd f852 	bl	8000a74 <__aeabi_dcmplt>
 80039d0:	b110      	cbz	r0, 80039d8 <_printf_float+0x80>
 80039d2:	232d      	movs	r3, #45	; 0x2d
 80039d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80039d8:	4f9b      	ldr	r7, [pc, #620]	; (8003c48 <_printf_float+0x2f0>)
 80039da:	4b9c      	ldr	r3, [pc, #624]	; (8003c4c <_printf_float+0x2f4>)
 80039dc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80039e0:	bf98      	it	ls
 80039e2:	461f      	movls	r7, r3
 80039e4:	2303      	movs	r3, #3
 80039e6:	6123      	str	r3, [r4, #16]
 80039e8:	f02a 0304 	bic.w	r3, sl, #4
 80039ec:	6023      	str	r3, [r4, #0]
 80039ee:	f04f 0900 	mov.w	r9, #0
 80039f2:	9600      	str	r6, [sp, #0]
 80039f4:	465b      	mov	r3, fp
 80039f6:	aa0f      	add	r2, sp, #60	; 0x3c
 80039f8:	4621      	mov	r1, r4
 80039fa:	4628      	mov	r0, r5
 80039fc:	f000 f9e2 	bl	8003dc4 <_printf_common>
 8003a00:	3001      	adds	r0, #1
 8003a02:	f040 8090 	bne.w	8003b26 <_printf_float+0x1ce>
 8003a06:	f04f 30ff 	mov.w	r0, #4294967295
 8003a0a:	b011      	add	sp, #68	; 0x44
 8003a0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a10:	463a      	mov	r2, r7
 8003a12:	464b      	mov	r3, r9
 8003a14:	4638      	mov	r0, r7
 8003a16:	4649      	mov	r1, r9
 8003a18:	f7fd f854 	bl	8000ac4 <__aeabi_dcmpun>
 8003a1c:	b110      	cbz	r0, 8003a24 <_printf_float+0xcc>
 8003a1e:	4f8c      	ldr	r7, [pc, #560]	; (8003c50 <_printf_float+0x2f8>)
 8003a20:	4b8c      	ldr	r3, [pc, #560]	; (8003c54 <_printf_float+0x2fc>)
 8003a22:	e7db      	b.n	80039dc <_printf_float+0x84>
 8003a24:	6863      	ldr	r3, [r4, #4]
 8003a26:	1c59      	adds	r1, r3, #1
 8003a28:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 8003a2c:	a90e      	add	r1, sp, #56	; 0x38
 8003a2e:	a80d      	add	r0, sp, #52	; 0x34
 8003a30:	d140      	bne.n	8003ab4 <_printf_float+0x15c>
 8003a32:	2306      	movs	r3, #6
 8003a34:	6063      	str	r3, [r4, #4]
 8003a36:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 8003a3a:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8003a3e:	f04f 0c00 	mov.w	ip, #0
 8003a42:	6863      	ldr	r3, [r4, #4]
 8003a44:	6022      	str	r2, [r4, #0]
 8003a46:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8003a4a:	9300      	str	r3, [sp, #0]
 8003a4c:	463a      	mov	r2, r7
 8003a4e:	464b      	mov	r3, r9
 8003a50:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8003a54:	4628      	mov	r0, r5
 8003a56:	f7ff feef 	bl	8003838 <__cvt>
 8003a5a:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 8003a5e:	2b47      	cmp	r3, #71	; 0x47
 8003a60:	4607      	mov	r7, r0
 8003a62:	d109      	bne.n	8003a78 <_printf_float+0x120>
 8003a64:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003a66:	1cd8      	adds	r0, r3, #3
 8003a68:	db02      	blt.n	8003a70 <_printf_float+0x118>
 8003a6a:	6862      	ldr	r2, [r4, #4]
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	dd47      	ble.n	8003b00 <_printf_float+0x1a8>
 8003a70:	f1a8 0802 	sub.w	r8, r8, #2
 8003a74:	fa5f f888 	uxtb.w	r8, r8
 8003a78:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8003a7c:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003a7e:	d824      	bhi.n	8003aca <_printf_float+0x172>
 8003a80:	3901      	subs	r1, #1
 8003a82:	4642      	mov	r2, r8
 8003a84:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003a88:	910d      	str	r1, [sp, #52]	; 0x34
 8003a8a:	f7ff ff31 	bl	80038f0 <__exponent>
 8003a8e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003a90:	1813      	adds	r3, r2, r0
 8003a92:	2a01      	cmp	r2, #1
 8003a94:	4681      	mov	r9, r0
 8003a96:	6123      	str	r3, [r4, #16]
 8003a98:	dc02      	bgt.n	8003aa0 <_printf_float+0x148>
 8003a9a:	6822      	ldr	r2, [r4, #0]
 8003a9c:	07d1      	lsls	r1, r2, #31
 8003a9e:	d501      	bpl.n	8003aa4 <_printf_float+0x14c>
 8003aa0:	3301      	adds	r3, #1
 8003aa2:	6123      	str	r3, [r4, #16]
 8003aa4:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d0a2      	beq.n	80039f2 <_printf_float+0x9a>
 8003aac:	232d      	movs	r3, #45	; 0x2d
 8003aae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003ab2:	e79e      	b.n	80039f2 <_printf_float+0x9a>
 8003ab4:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 8003ab8:	f000 816e 	beq.w	8003d98 <_printf_float+0x440>
 8003abc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003ac0:	d1b9      	bne.n	8003a36 <_printf_float+0xde>
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d1b7      	bne.n	8003a36 <_printf_float+0xde>
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	e7b4      	b.n	8003a34 <_printf_float+0xdc>
 8003aca:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 8003ace:	d119      	bne.n	8003b04 <_printf_float+0x1ac>
 8003ad0:	2900      	cmp	r1, #0
 8003ad2:	6863      	ldr	r3, [r4, #4]
 8003ad4:	dd0c      	ble.n	8003af0 <_printf_float+0x198>
 8003ad6:	6121      	str	r1, [r4, #16]
 8003ad8:	b913      	cbnz	r3, 8003ae0 <_printf_float+0x188>
 8003ada:	6822      	ldr	r2, [r4, #0]
 8003adc:	07d2      	lsls	r2, r2, #31
 8003ade:	d502      	bpl.n	8003ae6 <_printf_float+0x18e>
 8003ae0:	3301      	adds	r3, #1
 8003ae2:	440b      	add	r3, r1
 8003ae4:	6123      	str	r3, [r4, #16]
 8003ae6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003ae8:	65a3      	str	r3, [r4, #88]	; 0x58
 8003aea:	f04f 0900 	mov.w	r9, #0
 8003aee:	e7d9      	b.n	8003aa4 <_printf_float+0x14c>
 8003af0:	b913      	cbnz	r3, 8003af8 <_printf_float+0x1a0>
 8003af2:	6822      	ldr	r2, [r4, #0]
 8003af4:	07d0      	lsls	r0, r2, #31
 8003af6:	d501      	bpl.n	8003afc <_printf_float+0x1a4>
 8003af8:	3302      	adds	r3, #2
 8003afa:	e7f3      	b.n	8003ae4 <_printf_float+0x18c>
 8003afc:	2301      	movs	r3, #1
 8003afe:	e7f1      	b.n	8003ae4 <_printf_float+0x18c>
 8003b00:	f04f 0867 	mov.w	r8, #103	; 0x67
 8003b04:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	db05      	blt.n	8003b18 <_printf_float+0x1c0>
 8003b0c:	6822      	ldr	r2, [r4, #0]
 8003b0e:	6123      	str	r3, [r4, #16]
 8003b10:	07d1      	lsls	r1, r2, #31
 8003b12:	d5e8      	bpl.n	8003ae6 <_printf_float+0x18e>
 8003b14:	3301      	adds	r3, #1
 8003b16:	e7e5      	b.n	8003ae4 <_printf_float+0x18c>
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	bfd4      	ite	le
 8003b1c:	f1c3 0302 	rsble	r3, r3, #2
 8003b20:	2301      	movgt	r3, #1
 8003b22:	4413      	add	r3, r2
 8003b24:	e7de      	b.n	8003ae4 <_printf_float+0x18c>
 8003b26:	6823      	ldr	r3, [r4, #0]
 8003b28:	055a      	lsls	r2, r3, #21
 8003b2a:	d407      	bmi.n	8003b3c <_printf_float+0x1e4>
 8003b2c:	6923      	ldr	r3, [r4, #16]
 8003b2e:	463a      	mov	r2, r7
 8003b30:	4659      	mov	r1, fp
 8003b32:	4628      	mov	r0, r5
 8003b34:	47b0      	blx	r6
 8003b36:	3001      	adds	r0, #1
 8003b38:	d129      	bne.n	8003b8e <_printf_float+0x236>
 8003b3a:	e764      	b.n	8003a06 <_printf_float+0xae>
 8003b3c:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8003b40:	f240 80d7 	bls.w	8003cf2 <_printf_float+0x39a>
 8003b44:	2200      	movs	r2, #0
 8003b46:	2300      	movs	r3, #0
 8003b48:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003b4c:	f7fc ff88 	bl	8000a60 <__aeabi_dcmpeq>
 8003b50:	b388      	cbz	r0, 8003bb6 <_printf_float+0x25e>
 8003b52:	2301      	movs	r3, #1
 8003b54:	4a40      	ldr	r2, [pc, #256]	; (8003c58 <_printf_float+0x300>)
 8003b56:	4659      	mov	r1, fp
 8003b58:	4628      	mov	r0, r5
 8003b5a:	47b0      	blx	r6
 8003b5c:	3001      	adds	r0, #1
 8003b5e:	f43f af52 	beq.w	8003a06 <_printf_float+0xae>
 8003b62:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003b66:	429a      	cmp	r2, r3
 8003b68:	db02      	blt.n	8003b70 <_printf_float+0x218>
 8003b6a:	6823      	ldr	r3, [r4, #0]
 8003b6c:	07d8      	lsls	r0, r3, #31
 8003b6e:	d50e      	bpl.n	8003b8e <_printf_float+0x236>
 8003b70:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003b74:	4659      	mov	r1, fp
 8003b76:	4628      	mov	r0, r5
 8003b78:	47b0      	blx	r6
 8003b7a:	3001      	adds	r0, #1
 8003b7c:	f43f af43 	beq.w	8003a06 <_printf_float+0xae>
 8003b80:	2700      	movs	r7, #0
 8003b82:	f104 081a 	add.w	r8, r4, #26
 8003b86:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003b88:	3b01      	subs	r3, #1
 8003b8a:	42bb      	cmp	r3, r7
 8003b8c:	dc09      	bgt.n	8003ba2 <_printf_float+0x24a>
 8003b8e:	6823      	ldr	r3, [r4, #0]
 8003b90:	079f      	lsls	r7, r3, #30
 8003b92:	f100 80fd 	bmi.w	8003d90 <_printf_float+0x438>
 8003b96:	68e0      	ldr	r0, [r4, #12]
 8003b98:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003b9a:	4298      	cmp	r0, r3
 8003b9c:	bfb8      	it	lt
 8003b9e:	4618      	movlt	r0, r3
 8003ba0:	e733      	b.n	8003a0a <_printf_float+0xb2>
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	4642      	mov	r2, r8
 8003ba6:	4659      	mov	r1, fp
 8003ba8:	4628      	mov	r0, r5
 8003baa:	47b0      	blx	r6
 8003bac:	3001      	adds	r0, #1
 8003bae:	f43f af2a 	beq.w	8003a06 <_printf_float+0xae>
 8003bb2:	3701      	adds	r7, #1
 8003bb4:	e7e7      	b.n	8003b86 <_printf_float+0x22e>
 8003bb6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	dc2b      	bgt.n	8003c14 <_printf_float+0x2bc>
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	4a26      	ldr	r2, [pc, #152]	; (8003c58 <_printf_float+0x300>)
 8003bc0:	4659      	mov	r1, fp
 8003bc2:	4628      	mov	r0, r5
 8003bc4:	47b0      	blx	r6
 8003bc6:	3001      	adds	r0, #1
 8003bc8:	f43f af1d 	beq.w	8003a06 <_printf_float+0xae>
 8003bcc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003bce:	b923      	cbnz	r3, 8003bda <_printf_float+0x282>
 8003bd0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003bd2:	b913      	cbnz	r3, 8003bda <_printf_float+0x282>
 8003bd4:	6823      	ldr	r3, [r4, #0]
 8003bd6:	07d9      	lsls	r1, r3, #31
 8003bd8:	d5d9      	bpl.n	8003b8e <_printf_float+0x236>
 8003bda:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003bde:	4659      	mov	r1, fp
 8003be0:	4628      	mov	r0, r5
 8003be2:	47b0      	blx	r6
 8003be4:	3001      	adds	r0, #1
 8003be6:	f43f af0e 	beq.w	8003a06 <_printf_float+0xae>
 8003bea:	f04f 0800 	mov.w	r8, #0
 8003bee:	f104 091a 	add.w	r9, r4, #26
 8003bf2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003bf4:	425b      	negs	r3, r3
 8003bf6:	4543      	cmp	r3, r8
 8003bf8:	dc01      	bgt.n	8003bfe <_printf_float+0x2a6>
 8003bfa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003bfc:	e797      	b.n	8003b2e <_printf_float+0x1d6>
 8003bfe:	2301      	movs	r3, #1
 8003c00:	464a      	mov	r2, r9
 8003c02:	4659      	mov	r1, fp
 8003c04:	4628      	mov	r0, r5
 8003c06:	47b0      	blx	r6
 8003c08:	3001      	adds	r0, #1
 8003c0a:	f43f aefc 	beq.w	8003a06 <_printf_float+0xae>
 8003c0e:	f108 0801 	add.w	r8, r8, #1
 8003c12:	e7ee      	b.n	8003bf2 <_printf_float+0x29a>
 8003c14:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003c16:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003c18:	429a      	cmp	r2, r3
 8003c1a:	bfa8      	it	ge
 8003c1c:	461a      	movge	r2, r3
 8003c1e:	2a00      	cmp	r2, #0
 8003c20:	4690      	mov	r8, r2
 8003c22:	dd07      	ble.n	8003c34 <_printf_float+0x2dc>
 8003c24:	4613      	mov	r3, r2
 8003c26:	4659      	mov	r1, fp
 8003c28:	463a      	mov	r2, r7
 8003c2a:	4628      	mov	r0, r5
 8003c2c:	47b0      	blx	r6
 8003c2e:	3001      	adds	r0, #1
 8003c30:	f43f aee9 	beq.w	8003a06 <_printf_float+0xae>
 8003c34:	f104 031a 	add.w	r3, r4, #26
 8003c38:	f04f 0a00 	mov.w	sl, #0
 8003c3c:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8003c40:	930b      	str	r3, [sp, #44]	; 0x2c
 8003c42:	e015      	b.n	8003c70 <_printf_float+0x318>
 8003c44:	7fefffff 	.word	0x7fefffff
 8003c48:	08005234 	.word	0x08005234
 8003c4c:	08005230 	.word	0x08005230
 8003c50:	0800523c 	.word	0x0800523c
 8003c54:	08005238 	.word	0x08005238
 8003c58:	08005240 	.word	0x08005240
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003c60:	4659      	mov	r1, fp
 8003c62:	4628      	mov	r0, r5
 8003c64:	47b0      	blx	r6
 8003c66:	3001      	adds	r0, #1
 8003c68:	f43f aecd 	beq.w	8003a06 <_printf_float+0xae>
 8003c6c:	f10a 0a01 	add.w	sl, sl, #1
 8003c70:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8003c74:	eba9 0308 	sub.w	r3, r9, r8
 8003c78:	4553      	cmp	r3, sl
 8003c7a:	dcef      	bgt.n	8003c5c <_printf_float+0x304>
 8003c7c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003c80:	429a      	cmp	r2, r3
 8003c82:	444f      	add	r7, r9
 8003c84:	db14      	blt.n	8003cb0 <_printf_float+0x358>
 8003c86:	6823      	ldr	r3, [r4, #0]
 8003c88:	07da      	lsls	r2, r3, #31
 8003c8a:	d411      	bmi.n	8003cb0 <_printf_float+0x358>
 8003c8c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003c8e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003c90:	eba3 0209 	sub.w	r2, r3, r9
 8003c94:	eba3 0901 	sub.w	r9, r3, r1
 8003c98:	4591      	cmp	r9, r2
 8003c9a:	bfa8      	it	ge
 8003c9c:	4691      	movge	r9, r2
 8003c9e:	f1b9 0f00 	cmp.w	r9, #0
 8003ca2:	dc0d      	bgt.n	8003cc0 <_printf_float+0x368>
 8003ca4:	2700      	movs	r7, #0
 8003ca6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003caa:	f104 081a 	add.w	r8, r4, #26
 8003cae:	e018      	b.n	8003ce2 <_printf_float+0x38a>
 8003cb0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003cb4:	4659      	mov	r1, fp
 8003cb6:	4628      	mov	r0, r5
 8003cb8:	47b0      	blx	r6
 8003cba:	3001      	adds	r0, #1
 8003cbc:	d1e6      	bne.n	8003c8c <_printf_float+0x334>
 8003cbe:	e6a2      	b.n	8003a06 <_printf_float+0xae>
 8003cc0:	464b      	mov	r3, r9
 8003cc2:	463a      	mov	r2, r7
 8003cc4:	4659      	mov	r1, fp
 8003cc6:	4628      	mov	r0, r5
 8003cc8:	47b0      	blx	r6
 8003cca:	3001      	adds	r0, #1
 8003ccc:	d1ea      	bne.n	8003ca4 <_printf_float+0x34c>
 8003cce:	e69a      	b.n	8003a06 <_printf_float+0xae>
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	4642      	mov	r2, r8
 8003cd4:	4659      	mov	r1, fp
 8003cd6:	4628      	mov	r0, r5
 8003cd8:	47b0      	blx	r6
 8003cda:	3001      	adds	r0, #1
 8003cdc:	f43f ae93 	beq.w	8003a06 <_printf_float+0xae>
 8003ce0:	3701      	adds	r7, #1
 8003ce2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003ce6:	1a9b      	subs	r3, r3, r2
 8003ce8:	eba3 0309 	sub.w	r3, r3, r9
 8003cec:	42bb      	cmp	r3, r7
 8003cee:	dcef      	bgt.n	8003cd0 <_printf_float+0x378>
 8003cf0:	e74d      	b.n	8003b8e <_printf_float+0x236>
 8003cf2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003cf4:	2a01      	cmp	r2, #1
 8003cf6:	dc01      	bgt.n	8003cfc <_printf_float+0x3a4>
 8003cf8:	07db      	lsls	r3, r3, #31
 8003cfa:	d538      	bpl.n	8003d6e <_printf_float+0x416>
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	463a      	mov	r2, r7
 8003d00:	4659      	mov	r1, fp
 8003d02:	4628      	mov	r0, r5
 8003d04:	47b0      	blx	r6
 8003d06:	3001      	adds	r0, #1
 8003d08:	f43f ae7d 	beq.w	8003a06 <_printf_float+0xae>
 8003d0c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003d10:	4659      	mov	r1, fp
 8003d12:	4628      	mov	r0, r5
 8003d14:	47b0      	blx	r6
 8003d16:	3001      	adds	r0, #1
 8003d18:	f107 0701 	add.w	r7, r7, #1
 8003d1c:	f43f ae73 	beq.w	8003a06 <_printf_float+0xae>
 8003d20:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003d22:	2200      	movs	r2, #0
 8003d24:	f103 38ff 	add.w	r8, r3, #4294967295
 8003d28:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	f7fc fe97 	bl	8000a60 <__aeabi_dcmpeq>
 8003d32:	b9c0      	cbnz	r0, 8003d66 <_printf_float+0x40e>
 8003d34:	4643      	mov	r3, r8
 8003d36:	463a      	mov	r2, r7
 8003d38:	4659      	mov	r1, fp
 8003d3a:	4628      	mov	r0, r5
 8003d3c:	47b0      	blx	r6
 8003d3e:	3001      	adds	r0, #1
 8003d40:	d10d      	bne.n	8003d5e <_printf_float+0x406>
 8003d42:	e660      	b.n	8003a06 <_printf_float+0xae>
 8003d44:	2301      	movs	r3, #1
 8003d46:	4642      	mov	r2, r8
 8003d48:	4659      	mov	r1, fp
 8003d4a:	4628      	mov	r0, r5
 8003d4c:	47b0      	blx	r6
 8003d4e:	3001      	adds	r0, #1
 8003d50:	f43f ae59 	beq.w	8003a06 <_printf_float+0xae>
 8003d54:	3701      	adds	r7, #1
 8003d56:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003d58:	3b01      	subs	r3, #1
 8003d5a:	42bb      	cmp	r3, r7
 8003d5c:	dcf2      	bgt.n	8003d44 <_printf_float+0x3ec>
 8003d5e:	464b      	mov	r3, r9
 8003d60:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003d64:	e6e4      	b.n	8003b30 <_printf_float+0x1d8>
 8003d66:	2700      	movs	r7, #0
 8003d68:	f104 081a 	add.w	r8, r4, #26
 8003d6c:	e7f3      	b.n	8003d56 <_printf_float+0x3fe>
 8003d6e:	2301      	movs	r3, #1
 8003d70:	e7e1      	b.n	8003d36 <_printf_float+0x3de>
 8003d72:	2301      	movs	r3, #1
 8003d74:	4642      	mov	r2, r8
 8003d76:	4659      	mov	r1, fp
 8003d78:	4628      	mov	r0, r5
 8003d7a:	47b0      	blx	r6
 8003d7c:	3001      	adds	r0, #1
 8003d7e:	f43f ae42 	beq.w	8003a06 <_printf_float+0xae>
 8003d82:	3701      	adds	r7, #1
 8003d84:	68e3      	ldr	r3, [r4, #12]
 8003d86:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8003d88:	1a9b      	subs	r3, r3, r2
 8003d8a:	42bb      	cmp	r3, r7
 8003d8c:	dcf1      	bgt.n	8003d72 <_printf_float+0x41a>
 8003d8e:	e702      	b.n	8003b96 <_printf_float+0x23e>
 8003d90:	2700      	movs	r7, #0
 8003d92:	f104 0819 	add.w	r8, r4, #25
 8003d96:	e7f5      	b.n	8003d84 <_printf_float+0x42c>
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	f43f ae94 	beq.w	8003ac6 <_printf_float+0x16e>
 8003d9e:	f04f 0c00 	mov.w	ip, #0
 8003da2:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8003da6:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 8003daa:	6022      	str	r2, [r4, #0]
 8003dac:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8003db0:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8003db4:	9300      	str	r3, [sp, #0]
 8003db6:	463a      	mov	r2, r7
 8003db8:	464b      	mov	r3, r9
 8003dba:	4628      	mov	r0, r5
 8003dbc:	f7ff fd3c 	bl	8003838 <__cvt>
 8003dc0:	4607      	mov	r7, r0
 8003dc2:	e64f      	b.n	8003a64 <_printf_float+0x10c>

08003dc4 <_printf_common>:
 8003dc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003dc8:	4691      	mov	r9, r2
 8003dca:	461f      	mov	r7, r3
 8003dcc:	688a      	ldr	r2, [r1, #8]
 8003dce:	690b      	ldr	r3, [r1, #16]
 8003dd0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	bfb8      	it	lt
 8003dd8:	4613      	movlt	r3, r2
 8003dda:	f8c9 3000 	str.w	r3, [r9]
 8003dde:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003de2:	4606      	mov	r6, r0
 8003de4:	460c      	mov	r4, r1
 8003de6:	b112      	cbz	r2, 8003dee <_printf_common+0x2a>
 8003de8:	3301      	adds	r3, #1
 8003dea:	f8c9 3000 	str.w	r3, [r9]
 8003dee:	6823      	ldr	r3, [r4, #0]
 8003df0:	0699      	lsls	r1, r3, #26
 8003df2:	bf42      	ittt	mi
 8003df4:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003df8:	3302      	addmi	r3, #2
 8003dfa:	f8c9 3000 	strmi.w	r3, [r9]
 8003dfe:	6825      	ldr	r5, [r4, #0]
 8003e00:	f015 0506 	ands.w	r5, r5, #6
 8003e04:	d107      	bne.n	8003e16 <_printf_common+0x52>
 8003e06:	f104 0a19 	add.w	sl, r4, #25
 8003e0a:	68e3      	ldr	r3, [r4, #12]
 8003e0c:	f8d9 2000 	ldr.w	r2, [r9]
 8003e10:	1a9b      	subs	r3, r3, r2
 8003e12:	42ab      	cmp	r3, r5
 8003e14:	dc28      	bgt.n	8003e68 <_printf_common+0xa4>
 8003e16:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003e1a:	6822      	ldr	r2, [r4, #0]
 8003e1c:	3300      	adds	r3, #0
 8003e1e:	bf18      	it	ne
 8003e20:	2301      	movne	r3, #1
 8003e22:	0692      	lsls	r2, r2, #26
 8003e24:	d42d      	bmi.n	8003e82 <_printf_common+0xbe>
 8003e26:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003e2a:	4639      	mov	r1, r7
 8003e2c:	4630      	mov	r0, r6
 8003e2e:	47c0      	blx	r8
 8003e30:	3001      	adds	r0, #1
 8003e32:	d020      	beq.n	8003e76 <_printf_common+0xb2>
 8003e34:	6823      	ldr	r3, [r4, #0]
 8003e36:	68e5      	ldr	r5, [r4, #12]
 8003e38:	f8d9 2000 	ldr.w	r2, [r9]
 8003e3c:	f003 0306 	and.w	r3, r3, #6
 8003e40:	2b04      	cmp	r3, #4
 8003e42:	bf08      	it	eq
 8003e44:	1aad      	subeq	r5, r5, r2
 8003e46:	68a3      	ldr	r3, [r4, #8]
 8003e48:	6922      	ldr	r2, [r4, #16]
 8003e4a:	bf0c      	ite	eq
 8003e4c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003e50:	2500      	movne	r5, #0
 8003e52:	4293      	cmp	r3, r2
 8003e54:	bfc4      	itt	gt
 8003e56:	1a9b      	subgt	r3, r3, r2
 8003e58:	18ed      	addgt	r5, r5, r3
 8003e5a:	f04f 0900 	mov.w	r9, #0
 8003e5e:	341a      	adds	r4, #26
 8003e60:	454d      	cmp	r5, r9
 8003e62:	d11a      	bne.n	8003e9a <_printf_common+0xd6>
 8003e64:	2000      	movs	r0, #0
 8003e66:	e008      	b.n	8003e7a <_printf_common+0xb6>
 8003e68:	2301      	movs	r3, #1
 8003e6a:	4652      	mov	r2, sl
 8003e6c:	4639      	mov	r1, r7
 8003e6e:	4630      	mov	r0, r6
 8003e70:	47c0      	blx	r8
 8003e72:	3001      	adds	r0, #1
 8003e74:	d103      	bne.n	8003e7e <_printf_common+0xba>
 8003e76:	f04f 30ff 	mov.w	r0, #4294967295
 8003e7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e7e:	3501      	adds	r5, #1
 8003e80:	e7c3      	b.n	8003e0a <_printf_common+0x46>
 8003e82:	18e1      	adds	r1, r4, r3
 8003e84:	1c5a      	adds	r2, r3, #1
 8003e86:	2030      	movs	r0, #48	; 0x30
 8003e88:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003e8c:	4422      	add	r2, r4
 8003e8e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003e92:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003e96:	3302      	adds	r3, #2
 8003e98:	e7c5      	b.n	8003e26 <_printf_common+0x62>
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	4622      	mov	r2, r4
 8003e9e:	4639      	mov	r1, r7
 8003ea0:	4630      	mov	r0, r6
 8003ea2:	47c0      	blx	r8
 8003ea4:	3001      	adds	r0, #1
 8003ea6:	d0e6      	beq.n	8003e76 <_printf_common+0xb2>
 8003ea8:	f109 0901 	add.w	r9, r9, #1
 8003eac:	e7d8      	b.n	8003e60 <_printf_common+0x9c>
	...

08003eb0 <_sbrk_r>:
 8003eb0:	b538      	push	{r3, r4, r5, lr}
 8003eb2:	4c06      	ldr	r4, [pc, #24]	; (8003ecc <_sbrk_r+0x1c>)
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	4605      	mov	r5, r0
 8003eb8:	4608      	mov	r0, r1
 8003eba:	6023      	str	r3, [r4, #0]
 8003ebc:	f7fd fdee 	bl	8001a9c <_sbrk>
 8003ec0:	1c43      	adds	r3, r0, #1
 8003ec2:	d102      	bne.n	8003eca <_sbrk_r+0x1a>
 8003ec4:	6823      	ldr	r3, [r4, #0]
 8003ec6:	b103      	cbz	r3, 8003eca <_sbrk_r+0x1a>
 8003ec8:	602b      	str	r3, [r5, #0]
 8003eca:	bd38      	pop	{r3, r4, r5, pc}
 8003ecc:	20000208 	.word	0x20000208

08003ed0 <_raise_r>:
 8003ed0:	291f      	cmp	r1, #31
 8003ed2:	b538      	push	{r3, r4, r5, lr}
 8003ed4:	4604      	mov	r4, r0
 8003ed6:	460d      	mov	r5, r1
 8003ed8:	d904      	bls.n	8003ee4 <_raise_r+0x14>
 8003eda:	2316      	movs	r3, #22
 8003edc:	6003      	str	r3, [r0, #0]
 8003ede:	f04f 30ff 	mov.w	r0, #4294967295
 8003ee2:	bd38      	pop	{r3, r4, r5, pc}
 8003ee4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8003ee6:	b112      	cbz	r2, 8003eee <_raise_r+0x1e>
 8003ee8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8003eec:	b94b      	cbnz	r3, 8003f02 <_raise_r+0x32>
 8003eee:	4620      	mov	r0, r4
 8003ef0:	f000 f830 	bl	8003f54 <_getpid_r>
 8003ef4:	462a      	mov	r2, r5
 8003ef6:	4601      	mov	r1, r0
 8003ef8:	4620      	mov	r0, r4
 8003efa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003efe:	f000 b817 	b.w	8003f30 <_kill_r>
 8003f02:	2b01      	cmp	r3, #1
 8003f04:	d00a      	beq.n	8003f1c <_raise_r+0x4c>
 8003f06:	1c59      	adds	r1, r3, #1
 8003f08:	d103      	bne.n	8003f12 <_raise_r+0x42>
 8003f0a:	2316      	movs	r3, #22
 8003f0c:	6003      	str	r3, [r0, #0]
 8003f0e:	2001      	movs	r0, #1
 8003f10:	e7e7      	b.n	8003ee2 <_raise_r+0x12>
 8003f12:	2400      	movs	r4, #0
 8003f14:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8003f18:	4628      	mov	r0, r5
 8003f1a:	4798      	blx	r3
 8003f1c:	2000      	movs	r0, #0
 8003f1e:	e7e0      	b.n	8003ee2 <_raise_r+0x12>

08003f20 <raise>:
 8003f20:	4b02      	ldr	r3, [pc, #8]	; (8003f2c <raise+0xc>)
 8003f22:	4601      	mov	r1, r0
 8003f24:	6818      	ldr	r0, [r3, #0]
 8003f26:	f7ff bfd3 	b.w	8003ed0 <_raise_r>
 8003f2a:	bf00      	nop
 8003f2c:	20000000 	.word	0x20000000

08003f30 <_kill_r>:
 8003f30:	b538      	push	{r3, r4, r5, lr}
 8003f32:	4c07      	ldr	r4, [pc, #28]	; (8003f50 <_kill_r+0x20>)
 8003f34:	2300      	movs	r3, #0
 8003f36:	4605      	mov	r5, r0
 8003f38:	4608      	mov	r0, r1
 8003f3a:	4611      	mov	r1, r2
 8003f3c:	6023      	str	r3, [r4, #0]
 8003f3e:	f7fd fd93 	bl	8001a68 <_kill>
 8003f42:	1c43      	adds	r3, r0, #1
 8003f44:	d102      	bne.n	8003f4c <_kill_r+0x1c>
 8003f46:	6823      	ldr	r3, [r4, #0]
 8003f48:	b103      	cbz	r3, 8003f4c <_kill_r+0x1c>
 8003f4a:	602b      	str	r3, [r5, #0]
 8003f4c:	bd38      	pop	{r3, r4, r5, pc}
 8003f4e:	bf00      	nop
 8003f50:	20000208 	.word	0x20000208

08003f54 <_getpid_r>:
 8003f54:	f7fd bd81 	b.w	8001a5a <_getpid>

08003f58 <quorem>:
 8003f58:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f5c:	6903      	ldr	r3, [r0, #16]
 8003f5e:	690c      	ldr	r4, [r1, #16]
 8003f60:	42a3      	cmp	r3, r4
 8003f62:	4680      	mov	r8, r0
 8003f64:	f2c0 8082 	blt.w	800406c <quorem+0x114>
 8003f68:	3c01      	subs	r4, #1
 8003f6a:	f101 0714 	add.w	r7, r1, #20
 8003f6e:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8003f72:	f100 0614 	add.w	r6, r0, #20
 8003f76:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8003f7a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8003f7e:	eb06 030c 	add.w	r3, r6, ip
 8003f82:	3501      	adds	r5, #1
 8003f84:	eb07 090c 	add.w	r9, r7, ip
 8003f88:	9301      	str	r3, [sp, #4]
 8003f8a:	fbb0 f5f5 	udiv	r5, r0, r5
 8003f8e:	b395      	cbz	r5, 8003ff6 <quorem+0x9e>
 8003f90:	f04f 0a00 	mov.w	sl, #0
 8003f94:	4638      	mov	r0, r7
 8003f96:	46b6      	mov	lr, r6
 8003f98:	46d3      	mov	fp, sl
 8003f9a:	f850 2b04 	ldr.w	r2, [r0], #4
 8003f9e:	b293      	uxth	r3, r2
 8003fa0:	fb05 a303 	mla	r3, r5, r3, sl
 8003fa4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8003fa8:	b29b      	uxth	r3, r3
 8003faa:	ebab 0303 	sub.w	r3, fp, r3
 8003fae:	0c12      	lsrs	r2, r2, #16
 8003fb0:	f8de b000 	ldr.w	fp, [lr]
 8003fb4:	fb05 a202 	mla	r2, r5, r2, sl
 8003fb8:	fa13 f38b 	uxtah	r3, r3, fp
 8003fbc:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8003fc0:	fa1f fb82 	uxth.w	fp, r2
 8003fc4:	f8de 2000 	ldr.w	r2, [lr]
 8003fc8:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8003fcc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003fd0:	b29b      	uxth	r3, r3
 8003fd2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003fd6:	4581      	cmp	r9, r0
 8003fd8:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8003fdc:	f84e 3b04 	str.w	r3, [lr], #4
 8003fe0:	d2db      	bcs.n	8003f9a <quorem+0x42>
 8003fe2:	f856 300c 	ldr.w	r3, [r6, ip]
 8003fe6:	b933      	cbnz	r3, 8003ff6 <quorem+0x9e>
 8003fe8:	9b01      	ldr	r3, [sp, #4]
 8003fea:	3b04      	subs	r3, #4
 8003fec:	429e      	cmp	r6, r3
 8003fee:	461a      	mov	r2, r3
 8003ff0:	d330      	bcc.n	8004054 <quorem+0xfc>
 8003ff2:	f8c8 4010 	str.w	r4, [r8, #16]
 8003ff6:	4640      	mov	r0, r8
 8003ff8:	f001 f81a 	bl	8005030 <__mcmp>
 8003ffc:	2800      	cmp	r0, #0
 8003ffe:	db25      	blt.n	800404c <quorem+0xf4>
 8004000:	3501      	adds	r5, #1
 8004002:	4630      	mov	r0, r6
 8004004:	f04f 0c00 	mov.w	ip, #0
 8004008:	f857 2b04 	ldr.w	r2, [r7], #4
 800400c:	f8d0 e000 	ldr.w	lr, [r0]
 8004010:	b293      	uxth	r3, r2
 8004012:	ebac 0303 	sub.w	r3, ip, r3
 8004016:	0c12      	lsrs	r2, r2, #16
 8004018:	fa13 f38e 	uxtah	r3, r3, lr
 800401c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004020:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004024:	b29b      	uxth	r3, r3
 8004026:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800402a:	45b9      	cmp	r9, r7
 800402c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004030:	f840 3b04 	str.w	r3, [r0], #4
 8004034:	d2e8      	bcs.n	8004008 <quorem+0xb0>
 8004036:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800403a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800403e:	b92a      	cbnz	r2, 800404c <quorem+0xf4>
 8004040:	3b04      	subs	r3, #4
 8004042:	429e      	cmp	r6, r3
 8004044:	461a      	mov	r2, r3
 8004046:	d30b      	bcc.n	8004060 <quorem+0x108>
 8004048:	f8c8 4010 	str.w	r4, [r8, #16]
 800404c:	4628      	mov	r0, r5
 800404e:	b003      	add	sp, #12
 8004050:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004054:	6812      	ldr	r2, [r2, #0]
 8004056:	3b04      	subs	r3, #4
 8004058:	2a00      	cmp	r2, #0
 800405a:	d1ca      	bne.n	8003ff2 <quorem+0x9a>
 800405c:	3c01      	subs	r4, #1
 800405e:	e7c5      	b.n	8003fec <quorem+0x94>
 8004060:	6812      	ldr	r2, [r2, #0]
 8004062:	3b04      	subs	r3, #4
 8004064:	2a00      	cmp	r2, #0
 8004066:	d1ef      	bne.n	8004048 <quorem+0xf0>
 8004068:	3c01      	subs	r4, #1
 800406a:	e7ea      	b.n	8004042 <quorem+0xea>
 800406c:	2000      	movs	r0, #0
 800406e:	e7ee      	b.n	800404e <quorem+0xf6>

08004070 <_dtoa_r>:
 8004070:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004074:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004076:	b095      	sub	sp, #84	; 0x54
 8004078:	4616      	mov	r6, r2
 800407a:	461f      	mov	r7, r3
 800407c:	4604      	mov	r4, r0
 800407e:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 8004082:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8004086:	b93d      	cbnz	r5, 8004098 <_dtoa_r+0x28>
 8004088:	2010      	movs	r0, #16
 800408a:	f7ff fb09 	bl	80036a0 <malloc>
 800408e:	6260      	str	r0, [r4, #36]	; 0x24
 8004090:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004094:	6005      	str	r5, [r0, #0]
 8004096:	60c5      	str	r5, [r0, #12]
 8004098:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800409a:	6819      	ldr	r1, [r3, #0]
 800409c:	b151      	cbz	r1, 80040b4 <_dtoa_r+0x44>
 800409e:	685a      	ldr	r2, [r3, #4]
 80040a0:	604a      	str	r2, [r1, #4]
 80040a2:	2301      	movs	r3, #1
 80040a4:	4093      	lsls	r3, r2
 80040a6:	608b      	str	r3, [r1, #8]
 80040a8:	4620      	mov	r0, r4
 80040aa:	f000 fddf 	bl	8004c6c <_Bfree>
 80040ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80040b0:	2200      	movs	r2, #0
 80040b2:	601a      	str	r2, [r3, #0]
 80040b4:	1e3b      	subs	r3, r7, #0
 80040b6:	bfbb      	ittet	lt
 80040b8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80040bc:	9303      	strlt	r3, [sp, #12]
 80040be:	2300      	movge	r3, #0
 80040c0:	2201      	movlt	r2, #1
 80040c2:	bfac      	ite	ge
 80040c4:	f8c8 3000 	strge.w	r3, [r8]
 80040c8:	f8c8 2000 	strlt.w	r2, [r8]
 80040cc:	4bae      	ldr	r3, [pc, #696]	; (8004388 <_dtoa_r+0x318>)
 80040ce:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80040d2:	ea33 0308 	bics.w	r3, r3, r8
 80040d6:	d11b      	bne.n	8004110 <_dtoa_r+0xa0>
 80040d8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80040da:	f242 730f 	movw	r3, #9999	; 0x270f
 80040de:	6013      	str	r3, [r2, #0]
 80040e0:	9b02      	ldr	r3, [sp, #8]
 80040e2:	b923      	cbnz	r3, 80040ee <_dtoa_r+0x7e>
 80040e4:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80040e8:	2800      	cmp	r0, #0
 80040ea:	f000 854b 	beq.w	8004b84 <_dtoa_r+0xb14>
 80040ee:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80040f0:	b953      	cbnz	r3, 8004108 <_dtoa_r+0x98>
 80040f2:	4ba6      	ldr	r3, [pc, #664]	; (800438c <_dtoa_r+0x31c>)
 80040f4:	e021      	b.n	800413a <_dtoa_r+0xca>
 80040f6:	4ba6      	ldr	r3, [pc, #664]	; (8004390 <_dtoa_r+0x320>)
 80040f8:	9306      	str	r3, [sp, #24]
 80040fa:	3308      	adds	r3, #8
 80040fc:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80040fe:	6013      	str	r3, [r2, #0]
 8004100:	9806      	ldr	r0, [sp, #24]
 8004102:	b015      	add	sp, #84	; 0x54
 8004104:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004108:	4ba0      	ldr	r3, [pc, #640]	; (800438c <_dtoa_r+0x31c>)
 800410a:	9306      	str	r3, [sp, #24]
 800410c:	3303      	adds	r3, #3
 800410e:	e7f5      	b.n	80040fc <_dtoa_r+0x8c>
 8004110:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8004114:	2200      	movs	r2, #0
 8004116:	2300      	movs	r3, #0
 8004118:	4630      	mov	r0, r6
 800411a:	4639      	mov	r1, r7
 800411c:	f7fc fca0 	bl	8000a60 <__aeabi_dcmpeq>
 8004120:	4682      	mov	sl, r0
 8004122:	b160      	cbz	r0, 800413e <_dtoa_r+0xce>
 8004124:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004126:	2301      	movs	r3, #1
 8004128:	6013      	str	r3, [r2, #0]
 800412a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800412c:	2b00      	cmp	r3, #0
 800412e:	f000 8526 	beq.w	8004b7e <_dtoa_r+0xb0e>
 8004132:	4b98      	ldr	r3, [pc, #608]	; (8004394 <_dtoa_r+0x324>)
 8004134:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8004136:	6013      	str	r3, [r2, #0]
 8004138:	3b01      	subs	r3, #1
 800413a:	9306      	str	r3, [sp, #24]
 800413c:	e7e0      	b.n	8004100 <_dtoa_r+0x90>
 800413e:	ab12      	add	r3, sp, #72	; 0x48
 8004140:	9301      	str	r3, [sp, #4]
 8004142:	ab13      	add	r3, sp, #76	; 0x4c
 8004144:	9300      	str	r3, [sp, #0]
 8004146:	4632      	mov	r2, r6
 8004148:	463b      	mov	r3, r7
 800414a:	4620      	mov	r0, r4
 800414c:	f000 ffe7 	bl	800511e <__d2b>
 8004150:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8004154:	4683      	mov	fp, r0
 8004156:	2d00      	cmp	r5, #0
 8004158:	d07c      	beq.n	8004254 <_dtoa_r+0x1e4>
 800415a:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800415e:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 8004162:	46b0      	mov	r8, r6
 8004164:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 8004168:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800416c:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8004170:	2200      	movs	r2, #0
 8004172:	4b89      	ldr	r3, [pc, #548]	; (8004398 <_dtoa_r+0x328>)
 8004174:	4640      	mov	r0, r8
 8004176:	4649      	mov	r1, r9
 8004178:	f7fc f852 	bl	8000220 <__aeabi_dsub>
 800417c:	a37c      	add	r3, pc, #496	; (adr r3, 8004370 <_dtoa_r+0x300>)
 800417e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004182:	f7fc fa05 	bl	8000590 <__aeabi_dmul>
 8004186:	a37c      	add	r3, pc, #496	; (adr r3, 8004378 <_dtoa_r+0x308>)
 8004188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800418c:	f7fc f84a 	bl	8000224 <__adddf3>
 8004190:	4606      	mov	r6, r0
 8004192:	4628      	mov	r0, r5
 8004194:	460f      	mov	r7, r1
 8004196:	f7fc f991 	bl	80004bc <__aeabi_i2d>
 800419a:	a379      	add	r3, pc, #484	; (adr r3, 8004380 <_dtoa_r+0x310>)
 800419c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041a0:	f7fc f9f6 	bl	8000590 <__aeabi_dmul>
 80041a4:	4602      	mov	r2, r0
 80041a6:	460b      	mov	r3, r1
 80041a8:	4630      	mov	r0, r6
 80041aa:	4639      	mov	r1, r7
 80041ac:	f7fc f83a 	bl	8000224 <__adddf3>
 80041b0:	4606      	mov	r6, r0
 80041b2:	460f      	mov	r7, r1
 80041b4:	f7fc fc9c 	bl	8000af0 <__aeabi_d2iz>
 80041b8:	2200      	movs	r2, #0
 80041ba:	4682      	mov	sl, r0
 80041bc:	2300      	movs	r3, #0
 80041be:	4630      	mov	r0, r6
 80041c0:	4639      	mov	r1, r7
 80041c2:	f7fc fc57 	bl	8000a74 <__aeabi_dcmplt>
 80041c6:	b148      	cbz	r0, 80041dc <_dtoa_r+0x16c>
 80041c8:	4650      	mov	r0, sl
 80041ca:	f7fc f977 	bl	80004bc <__aeabi_i2d>
 80041ce:	4632      	mov	r2, r6
 80041d0:	463b      	mov	r3, r7
 80041d2:	f7fc fc45 	bl	8000a60 <__aeabi_dcmpeq>
 80041d6:	b908      	cbnz	r0, 80041dc <_dtoa_r+0x16c>
 80041d8:	f10a 3aff 	add.w	sl, sl, #4294967295
 80041dc:	f1ba 0f16 	cmp.w	sl, #22
 80041e0:	d859      	bhi.n	8004296 <_dtoa_r+0x226>
 80041e2:	496e      	ldr	r1, [pc, #440]	; (800439c <_dtoa_r+0x32c>)
 80041e4:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80041e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80041ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 80041f0:	f7fc fc5e 	bl	8000ab0 <__aeabi_dcmpgt>
 80041f4:	2800      	cmp	r0, #0
 80041f6:	d050      	beq.n	800429a <_dtoa_r+0x22a>
 80041f8:	f10a 3aff 	add.w	sl, sl, #4294967295
 80041fc:	2300      	movs	r3, #0
 80041fe:	930d      	str	r3, [sp, #52]	; 0x34
 8004200:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004202:	1b5d      	subs	r5, r3, r5
 8004204:	1e6b      	subs	r3, r5, #1
 8004206:	9307      	str	r3, [sp, #28]
 8004208:	bf43      	ittte	mi
 800420a:	2300      	movmi	r3, #0
 800420c:	f1c5 0901 	rsbmi	r9, r5, #1
 8004210:	9307      	strmi	r3, [sp, #28]
 8004212:	f04f 0900 	movpl.w	r9, #0
 8004216:	f1ba 0f00 	cmp.w	sl, #0
 800421a:	db40      	blt.n	800429e <_dtoa_r+0x22e>
 800421c:	9b07      	ldr	r3, [sp, #28]
 800421e:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8004222:	4453      	add	r3, sl
 8004224:	9307      	str	r3, [sp, #28]
 8004226:	2300      	movs	r3, #0
 8004228:	9308      	str	r3, [sp, #32]
 800422a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800422c:	2b09      	cmp	r3, #9
 800422e:	f200 808e 	bhi.w	800434e <_dtoa_r+0x2de>
 8004232:	2b05      	cmp	r3, #5
 8004234:	bfc4      	itt	gt
 8004236:	3b04      	subgt	r3, #4
 8004238:	931e      	strgt	r3, [sp, #120]	; 0x78
 800423a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800423c:	f1a3 0302 	sub.w	r3, r3, #2
 8004240:	bfcc      	ite	gt
 8004242:	2500      	movgt	r5, #0
 8004244:	2501      	movle	r5, #1
 8004246:	2b03      	cmp	r3, #3
 8004248:	f200 808d 	bhi.w	8004366 <_dtoa_r+0x2f6>
 800424c:	e8df f003 	tbb	[pc, r3]
 8004250:	6f2f7d7b 	.word	0x6f2f7d7b
 8004254:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8004258:	441d      	add	r5, r3
 800425a:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800425e:	2820      	cmp	r0, #32
 8004260:	dd13      	ble.n	800428a <_dtoa_r+0x21a>
 8004262:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8004266:	9b02      	ldr	r3, [sp, #8]
 8004268:	fa08 f800 	lsl.w	r8, r8, r0
 800426c:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8004270:	fa23 f000 	lsr.w	r0, r3, r0
 8004274:	ea48 0000 	orr.w	r0, r8, r0
 8004278:	f7fc f910 	bl	800049c <__aeabi_ui2d>
 800427c:	2301      	movs	r3, #1
 800427e:	4680      	mov	r8, r0
 8004280:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 8004284:	3d01      	subs	r5, #1
 8004286:	9310      	str	r3, [sp, #64]	; 0x40
 8004288:	e772      	b.n	8004170 <_dtoa_r+0x100>
 800428a:	9b02      	ldr	r3, [sp, #8]
 800428c:	f1c0 0020 	rsb	r0, r0, #32
 8004290:	fa03 f000 	lsl.w	r0, r3, r0
 8004294:	e7f0      	b.n	8004278 <_dtoa_r+0x208>
 8004296:	2301      	movs	r3, #1
 8004298:	e7b1      	b.n	80041fe <_dtoa_r+0x18e>
 800429a:	900d      	str	r0, [sp, #52]	; 0x34
 800429c:	e7b0      	b.n	8004200 <_dtoa_r+0x190>
 800429e:	f1ca 0300 	rsb	r3, sl, #0
 80042a2:	9308      	str	r3, [sp, #32]
 80042a4:	2300      	movs	r3, #0
 80042a6:	eba9 090a 	sub.w	r9, r9, sl
 80042aa:	930c      	str	r3, [sp, #48]	; 0x30
 80042ac:	e7bd      	b.n	800422a <_dtoa_r+0x1ba>
 80042ae:	2301      	movs	r3, #1
 80042b0:	9309      	str	r3, [sp, #36]	; 0x24
 80042b2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	dd75      	ble.n	80043a4 <_dtoa_r+0x334>
 80042b8:	9304      	str	r3, [sp, #16]
 80042ba:	4698      	mov	r8, r3
 80042bc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80042be:	2200      	movs	r2, #0
 80042c0:	6072      	str	r2, [r6, #4]
 80042c2:	2204      	movs	r2, #4
 80042c4:	f102 0014 	add.w	r0, r2, #20
 80042c8:	4298      	cmp	r0, r3
 80042ca:	6871      	ldr	r1, [r6, #4]
 80042cc:	d96f      	bls.n	80043ae <_dtoa_r+0x33e>
 80042ce:	4620      	mov	r0, r4
 80042d0:	f000 fc98 	bl	8004c04 <_Balloc>
 80042d4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80042d6:	6030      	str	r0, [r6, #0]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	9306      	str	r3, [sp, #24]
 80042dc:	f1b8 0f0e 	cmp.w	r8, #14
 80042e0:	f200 80ee 	bhi.w	80044c0 <_dtoa_r+0x450>
 80042e4:	2d00      	cmp	r5, #0
 80042e6:	f000 80eb 	beq.w	80044c0 <_dtoa_r+0x450>
 80042ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80042ee:	f1ba 0f00 	cmp.w	sl, #0
 80042f2:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80042f6:	dd78      	ble.n	80043ea <_dtoa_r+0x37a>
 80042f8:	4a28      	ldr	r2, [pc, #160]	; (800439c <_dtoa_r+0x32c>)
 80042fa:	f00a 030f 	and.w	r3, sl, #15
 80042fe:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004306:	ea4f 162a 	mov.w	r6, sl, asr #4
 800430a:	06f0      	lsls	r0, r6, #27
 800430c:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8004310:	d569      	bpl.n	80043e6 <_dtoa_r+0x376>
 8004312:	4b23      	ldr	r3, [pc, #140]	; (80043a0 <_dtoa_r+0x330>)
 8004314:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8004318:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800431c:	f7fc fa62 	bl	80007e4 <__aeabi_ddiv>
 8004320:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004324:	f006 060f 	and.w	r6, r6, #15
 8004328:	2503      	movs	r5, #3
 800432a:	4f1d      	ldr	r7, [pc, #116]	; (80043a0 <_dtoa_r+0x330>)
 800432c:	e050      	b.n	80043d0 <_dtoa_r+0x360>
 800432e:	2301      	movs	r3, #1
 8004330:	9309      	str	r3, [sp, #36]	; 0x24
 8004332:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004334:	4453      	add	r3, sl
 8004336:	f103 0801 	add.w	r8, r3, #1
 800433a:	9304      	str	r3, [sp, #16]
 800433c:	4643      	mov	r3, r8
 800433e:	2b01      	cmp	r3, #1
 8004340:	bfb8      	it	lt
 8004342:	2301      	movlt	r3, #1
 8004344:	e7ba      	b.n	80042bc <_dtoa_r+0x24c>
 8004346:	2300      	movs	r3, #0
 8004348:	e7b2      	b.n	80042b0 <_dtoa_r+0x240>
 800434a:	2300      	movs	r3, #0
 800434c:	e7f0      	b.n	8004330 <_dtoa_r+0x2c0>
 800434e:	2501      	movs	r5, #1
 8004350:	2300      	movs	r3, #0
 8004352:	931e      	str	r3, [sp, #120]	; 0x78
 8004354:	9509      	str	r5, [sp, #36]	; 0x24
 8004356:	f04f 33ff 	mov.w	r3, #4294967295
 800435a:	9304      	str	r3, [sp, #16]
 800435c:	4698      	mov	r8, r3
 800435e:	2200      	movs	r2, #0
 8004360:	2312      	movs	r3, #18
 8004362:	921f      	str	r2, [sp, #124]	; 0x7c
 8004364:	e7aa      	b.n	80042bc <_dtoa_r+0x24c>
 8004366:	2301      	movs	r3, #1
 8004368:	9309      	str	r3, [sp, #36]	; 0x24
 800436a:	e7f4      	b.n	8004356 <_dtoa_r+0x2e6>
 800436c:	f3af 8000 	nop.w
 8004370:	636f4361 	.word	0x636f4361
 8004374:	3fd287a7 	.word	0x3fd287a7
 8004378:	8b60c8b3 	.word	0x8b60c8b3
 800437c:	3fc68a28 	.word	0x3fc68a28
 8004380:	509f79fb 	.word	0x509f79fb
 8004384:	3fd34413 	.word	0x3fd34413
 8004388:	7ff00000 	.word	0x7ff00000
 800438c:	0800524b 	.word	0x0800524b
 8004390:	08005242 	.word	0x08005242
 8004394:	08005241 	.word	0x08005241
 8004398:	3ff80000 	.word	0x3ff80000
 800439c:	08005278 	.word	0x08005278
 80043a0:	08005250 	.word	0x08005250
 80043a4:	2301      	movs	r3, #1
 80043a6:	9304      	str	r3, [sp, #16]
 80043a8:	4698      	mov	r8, r3
 80043aa:	461a      	mov	r2, r3
 80043ac:	e7d9      	b.n	8004362 <_dtoa_r+0x2f2>
 80043ae:	3101      	adds	r1, #1
 80043b0:	6071      	str	r1, [r6, #4]
 80043b2:	0052      	lsls	r2, r2, #1
 80043b4:	e786      	b.n	80042c4 <_dtoa_r+0x254>
 80043b6:	07f1      	lsls	r1, r6, #31
 80043b8:	d508      	bpl.n	80043cc <_dtoa_r+0x35c>
 80043ba:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80043be:	e9d7 2300 	ldrd	r2, r3, [r7]
 80043c2:	f7fc f8e5 	bl	8000590 <__aeabi_dmul>
 80043c6:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80043ca:	3501      	adds	r5, #1
 80043cc:	1076      	asrs	r6, r6, #1
 80043ce:	3708      	adds	r7, #8
 80043d0:	2e00      	cmp	r6, #0
 80043d2:	d1f0      	bne.n	80043b6 <_dtoa_r+0x346>
 80043d4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80043d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80043dc:	f7fc fa02 	bl	80007e4 <__aeabi_ddiv>
 80043e0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80043e4:	e01b      	b.n	800441e <_dtoa_r+0x3ae>
 80043e6:	2502      	movs	r5, #2
 80043e8:	e79f      	b.n	800432a <_dtoa_r+0x2ba>
 80043ea:	f000 80a4 	beq.w	8004536 <_dtoa_r+0x4c6>
 80043ee:	f1ca 0600 	rsb	r6, sl, #0
 80043f2:	4ba2      	ldr	r3, [pc, #648]	; (800467c <_dtoa_r+0x60c>)
 80043f4:	4fa2      	ldr	r7, [pc, #648]	; (8004680 <_dtoa_r+0x610>)
 80043f6:	f006 020f 	and.w	r2, r6, #15
 80043fa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80043fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004402:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8004406:	f7fc f8c3 	bl	8000590 <__aeabi_dmul>
 800440a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800440e:	1136      	asrs	r6, r6, #4
 8004410:	2300      	movs	r3, #0
 8004412:	2502      	movs	r5, #2
 8004414:	2e00      	cmp	r6, #0
 8004416:	f040 8083 	bne.w	8004520 <_dtoa_r+0x4b0>
 800441a:	2b00      	cmp	r3, #0
 800441c:	d1e0      	bne.n	80043e0 <_dtoa_r+0x370>
 800441e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004420:	2b00      	cmp	r3, #0
 8004422:	f000 808a 	beq.w	800453a <_dtoa_r+0x4ca>
 8004426:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800442a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800442e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004432:	2200      	movs	r2, #0
 8004434:	4b93      	ldr	r3, [pc, #588]	; (8004684 <_dtoa_r+0x614>)
 8004436:	f7fc fb1d 	bl	8000a74 <__aeabi_dcmplt>
 800443a:	2800      	cmp	r0, #0
 800443c:	d07d      	beq.n	800453a <_dtoa_r+0x4ca>
 800443e:	f1b8 0f00 	cmp.w	r8, #0
 8004442:	d07a      	beq.n	800453a <_dtoa_r+0x4ca>
 8004444:	9b04      	ldr	r3, [sp, #16]
 8004446:	2b00      	cmp	r3, #0
 8004448:	dd36      	ble.n	80044b8 <_dtoa_r+0x448>
 800444a:	2200      	movs	r2, #0
 800444c:	4b8e      	ldr	r3, [pc, #568]	; (8004688 <_dtoa_r+0x618>)
 800444e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004452:	f7fc f89d 	bl	8000590 <__aeabi_dmul>
 8004456:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800445a:	9e04      	ldr	r6, [sp, #16]
 800445c:	f10a 37ff 	add.w	r7, sl, #4294967295
 8004460:	3501      	adds	r5, #1
 8004462:	4628      	mov	r0, r5
 8004464:	f7fc f82a 	bl	80004bc <__aeabi_i2d>
 8004468:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800446c:	f7fc f890 	bl	8000590 <__aeabi_dmul>
 8004470:	2200      	movs	r2, #0
 8004472:	4b86      	ldr	r3, [pc, #536]	; (800468c <_dtoa_r+0x61c>)
 8004474:	f7fb fed6 	bl	8000224 <__adddf3>
 8004478:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 800447c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004480:	950b      	str	r5, [sp, #44]	; 0x2c
 8004482:	2e00      	cmp	r6, #0
 8004484:	d15c      	bne.n	8004540 <_dtoa_r+0x4d0>
 8004486:	2200      	movs	r2, #0
 8004488:	4b81      	ldr	r3, [pc, #516]	; (8004690 <_dtoa_r+0x620>)
 800448a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800448e:	f7fb fec7 	bl	8000220 <__aeabi_dsub>
 8004492:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004494:	462b      	mov	r3, r5
 8004496:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800449a:	f7fc fb09 	bl	8000ab0 <__aeabi_dcmpgt>
 800449e:	2800      	cmp	r0, #0
 80044a0:	f040 8284 	bne.w	80049ac <_dtoa_r+0x93c>
 80044a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80044a6:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80044aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80044ae:	f7fc fae1 	bl	8000a74 <__aeabi_dcmplt>
 80044b2:	2800      	cmp	r0, #0
 80044b4:	f040 8278 	bne.w	80049a8 <_dtoa_r+0x938>
 80044b8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80044bc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80044c0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	f2c0 814e 	blt.w	8004764 <_dtoa_r+0x6f4>
 80044c8:	f1ba 0f0e 	cmp.w	sl, #14
 80044cc:	f300 814a 	bgt.w	8004764 <_dtoa_r+0x6f4>
 80044d0:	4b6a      	ldr	r3, [pc, #424]	; (800467c <_dtoa_r+0x60c>)
 80044d2:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80044d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044da:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80044de:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	f280 80d9 	bge.w	8004698 <_dtoa_r+0x628>
 80044e6:	f1b8 0f00 	cmp.w	r8, #0
 80044ea:	f300 80d5 	bgt.w	8004698 <_dtoa_r+0x628>
 80044ee:	f040 825a 	bne.w	80049a6 <_dtoa_r+0x936>
 80044f2:	2200      	movs	r2, #0
 80044f4:	4b66      	ldr	r3, [pc, #408]	; (8004690 <_dtoa_r+0x620>)
 80044f6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80044fa:	f7fc f849 	bl	8000590 <__aeabi_dmul>
 80044fe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004502:	f7fc facb 	bl	8000a9c <__aeabi_dcmpge>
 8004506:	4646      	mov	r6, r8
 8004508:	4647      	mov	r7, r8
 800450a:	2800      	cmp	r0, #0
 800450c:	f040 8230 	bne.w	8004970 <_dtoa_r+0x900>
 8004510:	9b06      	ldr	r3, [sp, #24]
 8004512:	9a06      	ldr	r2, [sp, #24]
 8004514:	1c5d      	adds	r5, r3, #1
 8004516:	2331      	movs	r3, #49	; 0x31
 8004518:	7013      	strb	r3, [r2, #0]
 800451a:	f10a 0a01 	add.w	sl, sl, #1
 800451e:	e22b      	b.n	8004978 <_dtoa_r+0x908>
 8004520:	07f2      	lsls	r2, r6, #31
 8004522:	d505      	bpl.n	8004530 <_dtoa_r+0x4c0>
 8004524:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004528:	f7fc f832 	bl	8000590 <__aeabi_dmul>
 800452c:	3501      	adds	r5, #1
 800452e:	2301      	movs	r3, #1
 8004530:	1076      	asrs	r6, r6, #1
 8004532:	3708      	adds	r7, #8
 8004534:	e76e      	b.n	8004414 <_dtoa_r+0x3a4>
 8004536:	2502      	movs	r5, #2
 8004538:	e771      	b.n	800441e <_dtoa_r+0x3ae>
 800453a:	4657      	mov	r7, sl
 800453c:	4646      	mov	r6, r8
 800453e:	e790      	b.n	8004462 <_dtoa_r+0x3f2>
 8004540:	4b4e      	ldr	r3, [pc, #312]	; (800467c <_dtoa_r+0x60c>)
 8004542:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8004546:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800454a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800454c:	2b00      	cmp	r3, #0
 800454e:	d048      	beq.n	80045e2 <_dtoa_r+0x572>
 8004550:	4602      	mov	r2, r0
 8004552:	460b      	mov	r3, r1
 8004554:	2000      	movs	r0, #0
 8004556:	494f      	ldr	r1, [pc, #316]	; (8004694 <_dtoa_r+0x624>)
 8004558:	f7fc f944 	bl	80007e4 <__aeabi_ddiv>
 800455c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004560:	f7fb fe5e 	bl	8000220 <__aeabi_dsub>
 8004564:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004568:	9d06      	ldr	r5, [sp, #24]
 800456a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800456e:	f7fc fabf 	bl	8000af0 <__aeabi_d2iz>
 8004572:	9011      	str	r0, [sp, #68]	; 0x44
 8004574:	f7fb ffa2 	bl	80004bc <__aeabi_i2d>
 8004578:	4602      	mov	r2, r0
 800457a:	460b      	mov	r3, r1
 800457c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004580:	f7fb fe4e 	bl	8000220 <__aeabi_dsub>
 8004584:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004586:	3330      	adds	r3, #48	; 0x30
 8004588:	f805 3b01 	strb.w	r3, [r5], #1
 800458c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004590:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004594:	f7fc fa6e 	bl	8000a74 <__aeabi_dcmplt>
 8004598:	2800      	cmp	r0, #0
 800459a:	d164      	bne.n	8004666 <_dtoa_r+0x5f6>
 800459c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80045a0:	2000      	movs	r0, #0
 80045a2:	4938      	ldr	r1, [pc, #224]	; (8004684 <_dtoa_r+0x614>)
 80045a4:	f7fb fe3c 	bl	8000220 <__aeabi_dsub>
 80045a8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80045ac:	f7fc fa62 	bl	8000a74 <__aeabi_dcmplt>
 80045b0:	2800      	cmp	r0, #0
 80045b2:	f040 80b7 	bne.w	8004724 <_dtoa_r+0x6b4>
 80045b6:	9b06      	ldr	r3, [sp, #24]
 80045b8:	1aeb      	subs	r3, r5, r3
 80045ba:	429e      	cmp	r6, r3
 80045bc:	f77f af7c 	ble.w	80044b8 <_dtoa_r+0x448>
 80045c0:	2200      	movs	r2, #0
 80045c2:	4b31      	ldr	r3, [pc, #196]	; (8004688 <_dtoa_r+0x618>)
 80045c4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80045c8:	f7fb ffe2 	bl	8000590 <__aeabi_dmul>
 80045cc:	2200      	movs	r2, #0
 80045ce:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80045d2:	4b2d      	ldr	r3, [pc, #180]	; (8004688 <_dtoa_r+0x618>)
 80045d4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80045d8:	f7fb ffda 	bl	8000590 <__aeabi_dmul>
 80045dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80045e0:	e7c3      	b.n	800456a <_dtoa_r+0x4fa>
 80045e2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80045e6:	f7fb ffd3 	bl	8000590 <__aeabi_dmul>
 80045ea:	9b06      	ldr	r3, [sp, #24]
 80045ec:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80045f0:	199d      	adds	r5, r3, r6
 80045f2:	461e      	mov	r6, r3
 80045f4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80045f8:	f7fc fa7a 	bl	8000af0 <__aeabi_d2iz>
 80045fc:	9011      	str	r0, [sp, #68]	; 0x44
 80045fe:	f7fb ff5d 	bl	80004bc <__aeabi_i2d>
 8004602:	4602      	mov	r2, r0
 8004604:	460b      	mov	r3, r1
 8004606:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800460a:	f7fb fe09 	bl	8000220 <__aeabi_dsub>
 800460e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004610:	3330      	adds	r3, #48	; 0x30
 8004612:	f806 3b01 	strb.w	r3, [r6], #1
 8004616:	42ae      	cmp	r6, r5
 8004618:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800461c:	f04f 0200 	mov.w	r2, #0
 8004620:	d125      	bne.n	800466e <_dtoa_r+0x5fe>
 8004622:	4b1c      	ldr	r3, [pc, #112]	; (8004694 <_dtoa_r+0x624>)
 8004624:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004628:	f7fb fdfc 	bl	8000224 <__adddf3>
 800462c:	4602      	mov	r2, r0
 800462e:	460b      	mov	r3, r1
 8004630:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004634:	f7fc fa3c 	bl	8000ab0 <__aeabi_dcmpgt>
 8004638:	2800      	cmp	r0, #0
 800463a:	d173      	bne.n	8004724 <_dtoa_r+0x6b4>
 800463c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004640:	2000      	movs	r0, #0
 8004642:	4914      	ldr	r1, [pc, #80]	; (8004694 <_dtoa_r+0x624>)
 8004644:	f7fb fdec 	bl	8000220 <__aeabi_dsub>
 8004648:	4602      	mov	r2, r0
 800464a:	460b      	mov	r3, r1
 800464c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004650:	f7fc fa10 	bl	8000a74 <__aeabi_dcmplt>
 8004654:	2800      	cmp	r0, #0
 8004656:	f43f af2f 	beq.w	80044b8 <_dtoa_r+0x448>
 800465a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800465e:	2b30      	cmp	r3, #48	; 0x30
 8004660:	f105 32ff 	add.w	r2, r5, #4294967295
 8004664:	d001      	beq.n	800466a <_dtoa_r+0x5fa>
 8004666:	46ba      	mov	sl, r7
 8004668:	e04b      	b.n	8004702 <_dtoa_r+0x692>
 800466a:	4615      	mov	r5, r2
 800466c:	e7f5      	b.n	800465a <_dtoa_r+0x5ea>
 800466e:	4b06      	ldr	r3, [pc, #24]	; (8004688 <_dtoa_r+0x618>)
 8004670:	f7fb ff8e 	bl	8000590 <__aeabi_dmul>
 8004674:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004678:	e7bc      	b.n	80045f4 <_dtoa_r+0x584>
 800467a:	bf00      	nop
 800467c:	08005278 	.word	0x08005278
 8004680:	08005250 	.word	0x08005250
 8004684:	3ff00000 	.word	0x3ff00000
 8004688:	40240000 	.word	0x40240000
 800468c:	401c0000 	.word	0x401c0000
 8004690:	40140000 	.word	0x40140000
 8004694:	3fe00000 	.word	0x3fe00000
 8004698:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800469c:	9d06      	ldr	r5, [sp, #24]
 800469e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80046a2:	4630      	mov	r0, r6
 80046a4:	4639      	mov	r1, r7
 80046a6:	f7fc f89d 	bl	80007e4 <__aeabi_ddiv>
 80046aa:	f7fc fa21 	bl	8000af0 <__aeabi_d2iz>
 80046ae:	4681      	mov	r9, r0
 80046b0:	f7fb ff04 	bl	80004bc <__aeabi_i2d>
 80046b4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80046b8:	f7fb ff6a 	bl	8000590 <__aeabi_dmul>
 80046bc:	4602      	mov	r2, r0
 80046be:	460b      	mov	r3, r1
 80046c0:	4630      	mov	r0, r6
 80046c2:	4639      	mov	r1, r7
 80046c4:	f109 0630 	add.w	r6, r9, #48	; 0x30
 80046c8:	f7fb fdaa 	bl	8000220 <__aeabi_dsub>
 80046cc:	f805 6b01 	strb.w	r6, [r5], #1
 80046d0:	9e06      	ldr	r6, [sp, #24]
 80046d2:	1bae      	subs	r6, r5, r6
 80046d4:	45b0      	cmp	r8, r6
 80046d6:	4602      	mov	r2, r0
 80046d8:	460b      	mov	r3, r1
 80046da:	d136      	bne.n	800474a <_dtoa_r+0x6da>
 80046dc:	f7fb fda2 	bl	8000224 <__adddf3>
 80046e0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80046e4:	4606      	mov	r6, r0
 80046e6:	460f      	mov	r7, r1
 80046e8:	f7fc f9e2 	bl	8000ab0 <__aeabi_dcmpgt>
 80046ec:	b9c8      	cbnz	r0, 8004722 <_dtoa_r+0x6b2>
 80046ee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80046f2:	4630      	mov	r0, r6
 80046f4:	4639      	mov	r1, r7
 80046f6:	f7fc f9b3 	bl	8000a60 <__aeabi_dcmpeq>
 80046fa:	b110      	cbz	r0, 8004702 <_dtoa_r+0x692>
 80046fc:	f019 0f01 	tst.w	r9, #1
 8004700:	d10f      	bne.n	8004722 <_dtoa_r+0x6b2>
 8004702:	4659      	mov	r1, fp
 8004704:	4620      	mov	r0, r4
 8004706:	f000 fab1 	bl	8004c6c <_Bfree>
 800470a:	2300      	movs	r3, #0
 800470c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800470e:	702b      	strb	r3, [r5, #0]
 8004710:	f10a 0301 	add.w	r3, sl, #1
 8004714:	6013      	str	r3, [r2, #0]
 8004716:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004718:	2b00      	cmp	r3, #0
 800471a:	f43f acf1 	beq.w	8004100 <_dtoa_r+0x90>
 800471e:	601d      	str	r5, [r3, #0]
 8004720:	e4ee      	b.n	8004100 <_dtoa_r+0x90>
 8004722:	4657      	mov	r7, sl
 8004724:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8004728:	2a39      	cmp	r2, #57	; 0x39
 800472a:	f105 33ff 	add.w	r3, r5, #4294967295
 800472e:	d106      	bne.n	800473e <_dtoa_r+0x6ce>
 8004730:	9a06      	ldr	r2, [sp, #24]
 8004732:	429a      	cmp	r2, r3
 8004734:	d107      	bne.n	8004746 <_dtoa_r+0x6d6>
 8004736:	2330      	movs	r3, #48	; 0x30
 8004738:	7013      	strb	r3, [r2, #0]
 800473a:	3701      	adds	r7, #1
 800473c:	4613      	mov	r3, r2
 800473e:	781a      	ldrb	r2, [r3, #0]
 8004740:	3201      	adds	r2, #1
 8004742:	701a      	strb	r2, [r3, #0]
 8004744:	e78f      	b.n	8004666 <_dtoa_r+0x5f6>
 8004746:	461d      	mov	r5, r3
 8004748:	e7ec      	b.n	8004724 <_dtoa_r+0x6b4>
 800474a:	2200      	movs	r2, #0
 800474c:	4b99      	ldr	r3, [pc, #612]	; (80049b4 <_dtoa_r+0x944>)
 800474e:	f7fb ff1f 	bl	8000590 <__aeabi_dmul>
 8004752:	2200      	movs	r2, #0
 8004754:	2300      	movs	r3, #0
 8004756:	4606      	mov	r6, r0
 8004758:	460f      	mov	r7, r1
 800475a:	f7fc f981 	bl	8000a60 <__aeabi_dcmpeq>
 800475e:	2800      	cmp	r0, #0
 8004760:	d09d      	beq.n	800469e <_dtoa_r+0x62e>
 8004762:	e7ce      	b.n	8004702 <_dtoa_r+0x692>
 8004764:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004766:	2a00      	cmp	r2, #0
 8004768:	f000 8088 	beq.w	800487c <_dtoa_r+0x80c>
 800476c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800476e:	2a01      	cmp	r2, #1
 8004770:	dc6d      	bgt.n	800484e <_dtoa_r+0x7de>
 8004772:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004774:	2a00      	cmp	r2, #0
 8004776:	d066      	beq.n	8004846 <_dtoa_r+0x7d6>
 8004778:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800477c:	9e08      	ldr	r6, [sp, #32]
 800477e:	464d      	mov	r5, r9
 8004780:	9a07      	ldr	r2, [sp, #28]
 8004782:	2101      	movs	r1, #1
 8004784:	441a      	add	r2, r3
 8004786:	4620      	mov	r0, r4
 8004788:	4499      	add	r9, r3
 800478a:	9207      	str	r2, [sp, #28]
 800478c:	f000 fb0e 	bl	8004dac <__i2b>
 8004790:	4607      	mov	r7, r0
 8004792:	2d00      	cmp	r5, #0
 8004794:	dd0b      	ble.n	80047ae <_dtoa_r+0x73e>
 8004796:	9b07      	ldr	r3, [sp, #28]
 8004798:	2b00      	cmp	r3, #0
 800479a:	dd08      	ble.n	80047ae <_dtoa_r+0x73e>
 800479c:	42ab      	cmp	r3, r5
 800479e:	9a07      	ldr	r2, [sp, #28]
 80047a0:	bfa8      	it	ge
 80047a2:	462b      	movge	r3, r5
 80047a4:	eba9 0903 	sub.w	r9, r9, r3
 80047a8:	1aed      	subs	r5, r5, r3
 80047aa:	1ad3      	subs	r3, r2, r3
 80047ac:	9307      	str	r3, [sp, #28]
 80047ae:	9b08      	ldr	r3, [sp, #32]
 80047b0:	b1eb      	cbz	r3, 80047ee <_dtoa_r+0x77e>
 80047b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d065      	beq.n	8004884 <_dtoa_r+0x814>
 80047b8:	b18e      	cbz	r6, 80047de <_dtoa_r+0x76e>
 80047ba:	4639      	mov	r1, r7
 80047bc:	4632      	mov	r2, r6
 80047be:	4620      	mov	r0, r4
 80047c0:	f000 fb94 	bl	8004eec <__pow5mult>
 80047c4:	465a      	mov	r2, fp
 80047c6:	4601      	mov	r1, r0
 80047c8:	4607      	mov	r7, r0
 80047ca:	4620      	mov	r0, r4
 80047cc:	f000 faf7 	bl	8004dbe <__multiply>
 80047d0:	4659      	mov	r1, fp
 80047d2:	900a      	str	r0, [sp, #40]	; 0x28
 80047d4:	4620      	mov	r0, r4
 80047d6:	f000 fa49 	bl	8004c6c <_Bfree>
 80047da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80047dc:	469b      	mov	fp, r3
 80047de:	9b08      	ldr	r3, [sp, #32]
 80047e0:	1b9a      	subs	r2, r3, r6
 80047e2:	d004      	beq.n	80047ee <_dtoa_r+0x77e>
 80047e4:	4659      	mov	r1, fp
 80047e6:	4620      	mov	r0, r4
 80047e8:	f000 fb80 	bl	8004eec <__pow5mult>
 80047ec:	4683      	mov	fp, r0
 80047ee:	2101      	movs	r1, #1
 80047f0:	4620      	mov	r0, r4
 80047f2:	f000 fadb 	bl	8004dac <__i2b>
 80047f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80047f8:	4606      	mov	r6, r0
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	f000 81c9 	beq.w	8004b92 <_dtoa_r+0xb22>
 8004800:	461a      	mov	r2, r3
 8004802:	4601      	mov	r1, r0
 8004804:	4620      	mov	r0, r4
 8004806:	f000 fb71 	bl	8004eec <__pow5mult>
 800480a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800480c:	2b01      	cmp	r3, #1
 800480e:	4606      	mov	r6, r0
 8004810:	dc3e      	bgt.n	8004890 <_dtoa_r+0x820>
 8004812:	9b02      	ldr	r3, [sp, #8]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d137      	bne.n	8004888 <_dtoa_r+0x818>
 8004818:	9b03      	ldr	r3, [sp, #12]
 800481a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800481e:	2b00      	cmp	r3, #0
 8004820:	d134      	bne.n	800488c <_dtoa_r+0x81c>
 8004822:	9b03      	ldr	r3, [sp, #12]
 8004824:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004828:	0d1b      	lsrs	r3, r3, #20
 800482a:	051b      	lsls	r3, r3, #20
 800482c:	b12b      	cbz	r3, 800483a <_dtoa_r+0x7ca>
 800482e:	9b07      	ldr	r3, [sp, #28]
 8004830:	3301      	adds	r3, #1
 8004832:	9307      	str	r3, [sp, #28]
 8004834:	f109 0901 	add.w	r9, r9, #1
 8004838:	2301      	movs	r3, #1
 800483a:	9308      	str	r3, [sp, #32]
 800483c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800483e:	2b00      	cmp	r3, #0
 8004840:	d128      	bne.n	8004894 <_dtoa_r+0x824>
 8004842:	2001      	movs	r0, #1
 8004844:	e02e      	b.n	80048a4 <_dtoa_r+0x834>
 8004846:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004848:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800484c:	e796      	b.n	800477c <_dtoa_r+0x70c>
 800484e:	9b08      	ldr	r3, [sp, #32]
 8004850:	f108 36ff 	add.w	r6, r8, #4294967295
 8004854:	42b3      	cmp	r3, r6
 8004856:	bfbf      	itttt	lt
 8004858:	9b08      	ldrlt	r3, [sp, #32]
 800485a:	9608      	strlt	r6, [sp, #32]
 800485c:	1af2      	sublt	r2, r6, r3
 800485e:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 8004860:	bfb7      	itett	lt
 8004862:	189b      	addlt	r3, r3, r2
 8004864:	1b9e      	subge	r6, r3, r6
 8004866:	930c      	strlt	r3, [sp, #48]	; 0x30
 8004868:	2600      	movlt	r6, #0
 800486a:	f1b8 0f00 	cmp.w	r8, #0
 800486e:	bfb9      	ittee	lt
 8004870:	eba9 0508 	sublt.w	r5, r9, r8
 8004874:	2300      	movlt	r3, #0
 8004876:	464d      	movge	r5, r9
 8004878:	4643      	movge	r3, r8
 800487a:	e781      	b.n	8004780 <_dtoa_r+0x710>
 800487c:	9e08      	ldr	r6, [sp, #32]
 800487e:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8004880:	464d      	mov	r5, r9
 8004882:	e786      	b.n	8004792 <_dtoa_r+0x722>
 8004884:	9a08      	ldr	r2, [sp, #32]
 8004886:	e7ad      	b.n	80047e4 <_dtoa_r+0x774>
 8004888:	2300      	movs	r3, #0
 800488a:	e7d6      	b.n	800483a <_dtoa_r+0x7ca>
 800488c:	9b02      	ldr	r3, [sp, #8]
 800488e:	e7d4      	b.n	800483a <_dtoa_r+0x7ca>
 8004890:	2300      	movs	r3, #0
 8004892:	9308      	str	r3, [sp, #32]
 8004894:	6933      	ldr	r3, [r6, #16]
 8004896:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800489a:	6918      	ldr	r0, [r3, #16]
 800489c:	f000 fa38 	bl	8004d10 <__hi0bits>
 80048a0:	f1c0 0020 	rsb	r0, r0, #32
 80048a4:	9b07      	ldr	r3, [sp, #28]
 80048a6:	4418      	add	r0, r3
 80048a8:	f010 001f 	ands.w	r0, r0, #31
 80048ac:	d047      	beq.n	800493e <_dtoa_r+0x8ce>
 80048ae:	f1c0 0320 	rsb	r3, r0, #32
 80048b2:	2b04      	cmp	r3, #4
 80048b4:	dd3b      	ble.n	800492e <_dtoa_r+0x8be>
 80048b6:	9b07      	ldr	r3, [sp, #28]
 80048b8:	f1c0 001c 	rsb	r0, r0, #28
 80048bc:	4481      	add	r9, r0
 80048be:	4405      	add	r5, r0
 80048c0:	4403      	add	r3, r0
 80048c2:	9307      	str	r3, [sp, #28]
 80048c4:	f1b9 0f00 	cmp.w	r9, #0
 80048c8:	dd05      	ble.n	80048d6 <_dtoa_r+0x866>
 80048ca:	4659      	mov	r1, fp
 80048cc:	464a      	mov	r2, r9
 80048ce:	4620      	mov	r0, r4
 80048d0:	f000 fb5a 	bl	8004f88 <__lshift>
 80048d4:	4683      	mov	fp, r0
 80048d6:	9b07      	ldr	r3, [sp, #28]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	dd05      	ble.n	80048e8 <_dtoa_r+0x878>
 80048dc:	4631      	mov	r1, r6
 80048de:	461a      	mov	r2, r3
 80048e0:	4620      	mov	r0, r4
 80048e2:	f000 fb51 	bl	8004f88 <__lshift>
 80048e6:	4606      	mov	r6, r0
 80048e8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80048ea:	b353      	cbz	r3, 8004942 <_dtoa_r+0x8d2>
 80048ec:	4631      	mov	r1, r6
 80048ee:	4658      	mov	r0, fp
 80048f0:	f000 fb9e 	bl	8005030 <__mcmp>
 80048f4:	2800      	cmp	r0, #0
 80048f6:	da24      	bge.n	8004942 <_dtoa_r+0x8d2>
 80048f8:	2300      	movs	r3, #0
 80048fa:	4659      	mov	r1, fp
 80048fc:	220a      	movs	r2, #10
 80048fe:	4620      	mov	r0, r4
 8004900:	f000 f9cb 	bl	8004c9a <__multadd>
 8004904:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004906:	f10a 3aff 	add.w	sl, sl, #4294967295
 800490a:	4683      	mov	fp, r0
 800490c:	2b00      	cmp	r3, #0
 800490e:	f000 8147 	beq.w	8004ba0 <_dtoa_r+0xb30>
 8004912:	2300      	movs	r3, #0
 8004914:	4639      	mov	r1, r7
 8004916:	220a      	movs	r2, #10
 8004918:	4620      	mov	r0, r4
 800491a:	f000 f9be 	bl	8004c9a <__multadd>
 800491e:	9b04      	ldr	r3, [sp, #16]
 8004920:	2b00      	cmp	r3, #0
 8004922:	4607      	mov	r7, r0
 8004924:	dc4e      	bgt.n	80049c4 <_dtoa_r+0x954>
 8004926:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004928:	2b02      	cmp	r3, #2
 800492a:	dd4b      	ble.n	80049c4 <_dtoa_r+0x954>
 800492c:	e011      	b.n	8004952 <_dtoa_r+0x8e2>
 800492e:	d0c9      	beq.n	80048c4 <_dtoa_r+0x854>
 8004930:	9a07      	ldr	r2, [sp, #28]
 8004932:	331c      	adds	r3, #28
 8004934:	441a      	add	r2, r3
 8004936:	4499      	add	r9, r3
 8004938:	441d      	add	r5, r3
 800493a:	4613      	mov	r3, r2
 800493c:	e7c1      	b.n	80048c2 <_dtoa_r+0x852>
 800493e:	4603      	mov	r3, r0
 8004940:	e7f6      	b.n	8004930 <_dtoa_r+0x8c0>
 8004942:	f1b8 0f00 	cmp.w	r8, #0
 8004946:	dc37      	bgt.n	80049b8 <_dtoa_r+0x948>
 8004948:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800494a:	2b02      	cmp	r3, #2
 800494c:	dd34      	ble.n	80049b8 <_dtoa_r+0x948>
 800494e:	f8cd 8010 	str.w	r8, [sp, #16]
 8004952:	9b04      	ldr	r3, [sp, #16]
 8004954:	b963      	cbnz	r3, 8004970 <_dtoa_r+0x900>
 8004956:	4631      	mov	r1, r6
 8004958:	2205      	movs	r2, #5
 800495a:	4620      	mov	r0, r4
 800495c:	f000 f99d 	bl	8004c9a <__multadd>
 8004960:	4601      	mov	r1, r0
 8004962:	4606      	mov	r6, r0
 8004964:	4658      	mov	r0, fp
 8004966:	f000 fb63 	bl	8005030 <__mcmp>
 800496a:	2800      	cmp	r0, #0
 800496c:	f73f add0 	bgt.w	8004510 <_dtoa_r+0x4a0>
 8004970:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004972:	9d06      	ldr	r5, [sp, #24]
 8004974:	ea6f 0a03 	mvn.w	sl, r3
 8004978:	f04f 0900 	mov.w	r9, #0
 800497c:	4631      	mov	r1, r6
 800497e:	4620      	mov	r0, r4
 8004980:	f000 f974 	bl	8004c6c <_Bfree>
 8004984:	2f00      	cmp	r7, #0
 8004986:	f43f aebc 	beq.w	8004702 <_dtoa_r+0x692>
 800498a:	f1b9 0f00 	cmp.w	r9, #0
 800498e:	d005      	beq.n	800499c <_dtoa_r+0x92c>
 8004990:	45b9      	cmp	r9, r7
 8004992:	d003      	beq.n	800499c <_dtoa_r+0x92c>
 8004994:	4649      	mov	r1, r9
 8004996:	4620      	mov	r0, r4
 8004998:	f000 f968 	bl	8004c6c <_Bfree>
 800499c:	4639      	mov	r1, r7
 800499e:	4620      	mov	r0, r4
 80049a0:	f000 f964 	bl	8004c6c <_Bfree>
 80049a4:	e6ad      	b.n	8004702 <_dtoa_r+0x692>
 80049a6:	2600      	movs	r6, #0
 80049a8:	4637      	mov	r7, r6
 80049aa:	e7e1      	b.n	8004970 <_dtoa_r+0x900>
 80049ac:	46ba      	mov	sl, r7
 80049ae:	4637      	mov	r7, r6
 80049b0:	e5ae      	b.n	8004510 <_dtoa_r+0x4a0>
 80049b2:	bf00      	nop
 80049b4:	40240000 	.word	0x40240000
 80049b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80049ba:	f8cd 8010 	str.w	r8, [sp, #16]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	f000 80f5 	beq.w	8004bae <_dtoa_r+0xb3e>
 80049c4:	2d00      	cmp	r5, #0
 80049c6:	dd05      	ble.n	80049d4 <_dtoa_r+0x964>
 80049c8:	4639      	mov	r1, r7
 80049ca:	462a      	mov	r2, r5
 80049cc:	4620      	mov	r0, r4
 80049ce:	f000 fadb 	bl	8004f88 <__lshift>
 80049d2:	4607      	mov	r7, r0
 80049d4:	9b08      	ldr	r3, [sp, #32]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d04c      	beq.n	8004a74 <_dtoa_r+0xa04>
 80049da:	6879      	ldr	r1, [r7, #4]
 80049dc:	4620      	mov	r0, r4
 80049de:	f000 f911 	bl	8004c04 <_Balloc>
 80049e2:	693a      	ldr	r2, [r7, #16]
 80049e4:	3202      	adds	r2, #2
 80049e6:	4605      	mov	r5, r0
 80049e8:	0092      	lsls	r2, r2, #2
 80049ea:	f107 010c 	add.w	r1, r7, #12
 80049ee:	300c      	adds	r0, #12
 80049f0:	f7fe fe66 	bl	80036c0 <memcpy>
 80049f4:	2201      	movs	r2, #1
 80049f6:	4629      	mov	r1, r5
 80049f8:	4620      	mov	r0, r4
 80049fa:	f000 fac5 	bl	8004f88 <__lshift>
 80049fe:	9b06      	ldr	r3, [sp, #24]
 8004a00:	9307      	str	r3, [sp, #28]
 8004a02:	9b02      	ldr	r3, [sp, #8]
 8004a04:	f003 0301 	and.w	r3, r3, #1
 8004a08:	46b9      	mov	r9, r7
 8004a0a:	9308      	str	r3, [sp, #32]
 8004a0c:	4607      	mov	r7, r0
 8004a0e:	4631      	mov	r1, r6
 8004a10:	4658      	mov	r0, fp
 8004a12:	f7ff faa1 	bl	8003f58 <quorem>
 8004a16:	4649      	mov	r1, r9
 8004a18:	4605      	mov	r5, r0
 8004a1a:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8004a1e:	4658      	mov	r0, fp
 8004a20:	f000 fb06 	bl	8005030 <__mcmp>
 8004a24:	463a      	mov	r2, r7
 8004a26:	9002      	str	r0, [sp, #8]
 8004a28:	4631      	mov	r1, r6
 8004a2a:	4620      	mov	r0, r4
 8004a2c:	f000 fb1a 	bl	8005064 <__mdiff>
 8004a30:	68c3      	ldr	r3, [r0, #12]
 8004a32:	4602      	mov	r2, r0
 8004a34:	bb03      	cbnz	r3, 8004a78 <_dtoa_r+0xa08>
 8004a36:	4601      	mov	r1, r0
 8004a38:	9009      	str	r0, [sp, #36]	; 0x24
 8004a3a:	4658      	mov	r0, fp
 8004a3c:	f000 faf8 	bl	8005030 <__mcmp>
 8004a40:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004a42:	4603      	mov	r3, r0
 8004a44:	4611      	mov	r1, r2
 8004a46:	4620      	mov	r0, r4
 8004a48:	9309      	str	r3, [sp, #36]	; 0x24
 8004a4a:	f000 f90f 	bl	8004c6c <_Bfree>
 8004a4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a50:	b9a3      	cbnz	r3, 8004a7c <_dtoa_r+0xa0c>
 8004a52:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8004a54:	b992      	cbnz	r2, 8004a7c <_dtoa_r+0xa0c>
 8004a56:	9a08      	ldr	r2, [sp, #32]
 8004a58:	b982      	cbnz	r2, 8004a7c <_dtoa_r+0xa0c>
 8004a5a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8004a5e:	d029      	beq.n	8004ab4 <_dtoa_r+0xa44>
 8004a60:	9b02      	ldr	r3, [sp, #8]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	dd01      	ble.n	8004a6a <_dtoa_r+0x9fa>
 8004a66:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8004a6a:	9b07      	ldr	r3, [sp, #28]
 8004a6c:	1c5d      	adds	r5, r3, #1
 8004a6e:	f883 8000 	strb.w	r8, [r3]
 8004a72:	e783      	b.n	800497c <_dtoa_r+0x90c>
 8004a74:	4638      	mov	r0, r7
 8004a76:	e7c2      	b.n	80049fe <_dtoa_r+0x98e>
 8004a78:	2301      	movs	r3, #1
 8004a7a:	e7e3      	b.n	8004a44 <_dtoa_r+0x9d4>
 8004a7c:	9a02      	ldr	r2, [sp, #8]
 8004a7e:	2a00      	cmp	r2, #0
 8004a80:	db04      	blt.n	8004a8c <_dtoa_r+0xa1c>
 8004a82:	d124      	bne.n	8004ace <_dtoa_r+0xa5e>
 8004a84:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8004a86:	bb12      	cbnz	r2, 8004ace <_dtoa_r+0xa5e>
 8004a88:	9a08      	ldr	r2, [sp, #32]
 8004a8a:	bb02      	cbnz	r2, 8004ace <_dtoa_r+0xa5e>
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	ddec      	ble.n	8004a6a <_dtoa_r+0x9fa>
 8004a90:	4659      	mov	r1, fp
 8004a92:	2201      	movs	r2, #1
 8004a94:	4620      	mov	r0, r4
 8004a96:	f000 fa77 	bl	8004f88 <__lshift>
 8004a9a:	4631      	mov	r1, r6
 8004a9c:	4683      	mov	fp, r0
 8004a9e:	f000 fac7 	bl	8005030 <__mcmp>
 8004aa2:	2800      	cmp	r0, #0
 8004aa4:	dc03      	bgt.n	8004aae <_dtoa_r+0xa3e>
 8004aa6:	d1e0      	bne.n	8004a6a <_dtoa_r+0x9fa>
 8004aa8:	f018 0f01 	tst.w	r8, #1
 8004aac:	d0dd      	beq.n	8004a6a <_dtoa_r+0x9fa>
 8004aae:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8004ab2:	d1d8      	bne.n	8004a66 <_dtoa_r+0x9f6>
 8004ab4:	9b07      	ldr	r3, [sp, #28]
 8004ab6:	9a07      	ldr	r2, [sp, #28]
 8004ab8:	1c5d      	adds	r5, r3, #1
 8004aba:	2339      	movs	r3, #57	; 0x39
 8004abc:	7013      	strb	r3, [r2, #0]
 8004abe:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004ac2:	2b39      	cmp	r3, #57	; 0x39
 8004ac4:	f105 32ff 	add.w	r2, r5, #4294967295
 8004ac8:	d04e      	beq.n	8004b68 <_dtoa_r+0xaf8>
 8004aca:	3301      	adds	r3, #1
 8004acc:	e053      	b.n	8004b76 <_dtoa_r+0xb06>
 8004ace:	9a07      	ldr	r2, [sp, #28]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	f102 0501 	add.w	r5, r2, #1
 8004ad6:	dd06      	ble.n	8004ae6 <_dtoa_r+0xa76>
 8004ad8:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8004adc:	d0ea      	beq.n	8004ab4 <_dtoa_r+0xa44>
 8004ade:	f108 0801 	add.w	r8, r8, #1
 8004ae2:	9b07      	ldr	r3, [sp, #28]
 8004ae4:	e7c3      	b.n	8004a6e <_dtoa_r+0x9fe>
 8004ae6:	9b06      	ldr	r3, [sp, #24]
 8004ae8:	9a04      	ldr	r2, [sp, #16]
 8004aea:	f805 8c01 	strb.w	r8, [r5, #-1]
 8004aee:	1aeb      	subs	r3, r5, r3
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d021      	beq.n	8004b38 <_dtoa_r+0xac8>
 8004af4:	4659      	mov	r1, fp
 8004af6:	2300      	movs	r3, #0
 8004af8:	220a      	movs	r2, #10
 8004afa:	4620      	mov	r0, r4
 8004afc:	f000 f8cd 	bl	8004c9a <__multadd>
 8004b00:	45b9      	cmp	r9, r7
 8004b02:	4683      	mov	fp, r0
 8004b04:	f04f 0300 	mov.w	r3, #0
 8004b08:	f04f 020a 	mov.w	r2, #10
 8004b0c:	4649      	mov	r1, r9
 8004b0e:	4620      	mov	r0, r4
 8004b10:	d105      	bne.n	8004b1e <_dtoa_r+0xaae>
 8004b12:	f000 f8c2 	bl	8004c9a <__multadd>
 8004b16:	4681      	mov	r9, r0
 8004b18:	4607      	mov	r7, r0
 8004b1a:	9507      	str	r5, [sp, #28]
 8004b1c:	e777      	b.n	8004a0e <_dtoa_r+0x99e>
 8004b1e:	f000 f8bc 	bl	8004c9a <__multadd>
 8004b22:	4639      	mov	r1, r7
 8004b24:	4681      	mov	r9, r0
 8004b26:	2300      	movs	r3, #0
 8004b28:	220a      	movs	r2, #10
 8004b2a:	4620      	mov	r0, r4
 8004b2c:	f000 f8b5 	bl	8004c9a <__multadd>
 8004b30:	4607      	mov	r7, r0
 8004b32:	e7f2      	b.n	8004b1a <_dtoa_r+0xaaa>
 8004b34:	f04f 0900 	mov.w	r9, #0
 8004b38:	4659      	mov	r1, fp
 8004b3a:	2201      	movs	r2, #1
 8004b3c:	4620      	mov	r0, r4
 8004b3e:	f000 fa23 	bl	8004f88 <__lshift>
 8004b42:	4631      	mov	r1, r6
 8004b44:	4683      	mov	fp, r0
 8004b46:	f000 fa73 	bl	8005030 <__mcmp>
 8004b4a:	2800      	cmp	r0, #0
 8004b4c:	dcb7      	bgt.n	8004abe <_dtoa_r+0xa4e>
 8004b4e:	d102      	bne.n	8004b56 <_dtoa_r+0xae6>
 8004b50:	f018 0f01 	tst.w	r8, #1
 8004b54:	d1b3      	bne.n	8004abe <_dtoa_r+0xa4e>
 8004b56:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004b5a:	2b30      	cmp	r3, #48	; 0x30
 8004b5c:	f105 32ff 	add.w	r2, r5, #4294967295
 8004b60:	f47f af0c 	bne.w	800497c <_dtoa_r+0x90c>
 8004b64:	4615      	mov	r5, r2
 8004b66:	e7f6      	b.n	8004b56 <_dtoa_r+0xae6>
 8004b68:	9b06      	ldr	r3, [sp, #24]
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d105      	bne.n	8004b7a <_dtoa_r+0xb0a>
 8004b6e:	9a06      	ldr	r2, [sp, #24]
 8004b70:	f10a 0a01 	add.w	sl, sl, #1
 8004b74:	2331      	movs	r3, #49	; 0x31
 8004b76:	7013      	strb	r3, [r2, #0]
 8004b78:	e700      	b.n	800497c <_dtoa_r+0x90c>
 8004b7a:	4615      	mov	r5, r2
 8004b7c:	e79f      	b.n	8004abe <_dtoa_r+0xa4e>
 8004b7e:	4b17      	ldr	r3, [pc, #92]	; (8004bdc <_dtoa_r+0xb6c>)
 8004b80:	f7ff badb 	b.w	800413a <_dtoa_r+0xca>
 8004b84:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	f47f aab5 	bne.w	80040f6 <_dtoa_r+0x86>
 8004b8c:	4b14      	ldr	r3, [pc, #80]	; (8004be0 <_dtoa_r+0xb70>)
 8004b8e:	f7ff bad4 	b.w	800413a <_dtoa_r+0xca>
 8004b92:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004b94:	2b01      	cmp	r3, #1
 8004b96:	f77f ae3c 	ble.w	8004812 <_dtoa_r+0x7a2>
 8004b9a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004b9c:	9308      	str	r3, [sp, #32]
 8004b9e:	e650      	b.n	8004842 <_dtoa_r+0x7d2>
 8004ba0:	9b04      	ldr	r3, [sp, #16]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	dc03      	bgt.n	8004bae <_dtoa_r+0xb3e>
 8004ba6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004ba8:	2b02      	cmp	r3, #2
 8004baa:	f73f aed2 	bgt.w	8004952 <_dtoa_r+0x8e2>
 8004bae:	9d06      	ldr	r5, [sp, #24]
 8004bb0:	4631      	mov	r1, r6
 8004bb2:	4658      	mov	r0, fp
 8004bb4:	f7ff f9d0 	bl	8003f58 <quorem>
 8004bb8:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8004bbc:	f805 8b01 	strb.w	r8, [r5], #1
 8004bc0:	9b06      	ldr	r3, [sp, #24]
 8004bc2:	9a04      	ldr	r2, [sp, #16]
 8004bc4:	1aeb      	subs	r3, r5, r3
 8004bc6:	429a      	cmp	r2, r3
 8004bc8:	ddb4      	ble.n	8004b34 <_dtoa_r+0xac4>
 8004bca:	4659      	mov	r1, fp
 8004bcc:	2300      	movs	r3, #0
 8004bce:	220a      	movs	r2, #10
 8004bd0:	4620      	mov	r0, r4
 8004bd2:	f000 f862 	bl	8004c9a <__multadd>
 8004bd6:	4683      	mov	fp, r0
 8004bd8:	e7ea      	b.n	8004bb0 <_dtoa_r+0xb40>
 8004bda:	bf00      	nop
 8004bdc:	08005240 	.word	0x08005240
 8004be0:	08005242 	.word	0x08005242

08004be4 <_localeconv_r>:
 8004be4:	4b04      	ldr	r3, [pc, #16]	; (8004bf8 <_localeconv_r+0x14>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	6a18      	ldr	r0, [r3, #32]
 8004bea:	4b04      	ldr	r3, [pc, #16]	; (8004bfc <_localeconv_r+0x18>)
 8004bec:	2800      	cmp	r0, #0
 8004bee:	bf08      	it	eq
 8004bf0:	4618      	moveq	r0, r3
 8004bf2:	30f0      	adds	r0, #240	; 0xf0
 8004bf4:	4770      	bx	lr
 8004bf6:	bf00      	nop
 8004bf8:	20000000 	.word	0x20000000
 8004bfc:	20000064 	.word	0x20000064

08004c00 <__malloc_lock>:
 8004c00:	4770      	bx	lr

08004c02 <__malloc_unlock>:
 8004c02:	4770      	bx	lr

08004c04 <_Balloc>:
 8004c04:	b570      	push	{r4, r5, r6, lr}
 8004c06:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004c08:	4604      	mov	r4, r0
 8004c0a:	460e      	mov	r6, r1
 8004c0c:	b93d      	cbnz	r5, 8004c1e <_Balloc+0x1a>
 8004c0e:	2010      	movs	r0, #16
 8004c10:	f7fe fd46 	bl	80036a0 <malloc>
 8004c14:	6260      	str	r0, [r4, #36]	; 0x24
 8004c16:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004c1a:	6005      	str	r5, [r0, #0]
 8004c1c:	60c5      	str	r5, [r0, #12]
 8004c1e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8004c20:	68eb      	ldr	r3, [r5, #12]
 8004c22:	b183      	cbz	r3, 8004c46 <_Balloc+0x42>
 8004c24:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004c26:	68db      	ldr	r3, [r3, #12]
 8004c28:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8004c2c:	b9b8      	cbnz	r0, 8004c5e <_Balloc+0x5a>
 8004c2e:	2101      	movs	r1, #1
 8004c30:	fa01 f506 	lsl.w	r5, r1, r6
 8004c34:	1d6a      	adds	r2, r5, #5
 8004c36:	0092      	lsls	r2, r2, #2
 8004c38:	4620      	mov	r0, r4
 8004c3a:	f000 fabf 	bl	80051bc <_calloc_r>
 8004c3e:	b160      	cbz	r0, 8004c5a <_Balloc+0x56>
 8004c40:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8004c44:	e00e      	b.n	8004c64 <_Balloc+0x60>
 8004c46:	2221      	movs	r2, #33	; 0x21
 8004c48:	2104      	movs	r1, #4
 8004c4a:	4620      	mov	r0, r4
 8004c4c:	f000 fab6 	bl	80051bc <_calloc_r>
 8004c50:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004c52:	60e8      	str	r0, [r5, #12]
 8004c54:	68db      	ldr	r3, [r3, #12]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d1e4      	bne.n	8004c24 <_Balloc+0x20>
 8004c5a:	2000      	movs	r0, #0
 8004c5c:	bd70      	pop	{r4, r5, r6, pc}
 8004c5e:	6802      	ldr	r2, [r0, #0]
 8004c60:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8004c64:	2300      	movs	r3, #0
 8004c66:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004c6a:	e7f7      	b.n	8004c5c <_Balloc+0x58>

08004c6c <_Bfree>:
 8004c6c:	b570      	push	{r4, r5, r6, lr}
 8004c6e:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8004c70:	4606      	mov	r6, r0
 8004c72:	460d      	mov	r5, r1
 8004c74:	b93c      	cbnz	r4, 8004c86 <_Bfree+0x1a>
 8004c76:	2010      	movs	r0, #16
 8004c78:	f7fe fd12 	bl	80036a0 <malloc>
 8004c7c:	6270      	str	r0, [r6, #36]	; 0x24
 8004c7e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004c82:	6004      	str	r4, [r0, #0]
 8004c84:	60c4      	str	r4, [r0, #12]
 8004c86:	b13d      	cbz	r5, 8004c98 <_Bfree+0x2c>
 8004c88:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8004c8a:	686a      	ldr	r2, [r5, #4]
 8004c8c:	68db      	ldr	r3, [r3, #12]
 8004c8e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004c92:	6029      	str	r1, [r5, #0]
 8004c94:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8004c98:	bd70      	pop	{r4, r5, r6, pc}

08004c9a <__multadd>:
 8004c9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c9e:	690d      	ldr	r5, [r1, #16]
 8004ca0:	461f      	mov	r7, r3
 8004ca2:	4606      	mov	r6, r0
 8004ca4:	460c      	mov	r4, r1
 8004ca6:	f101 0c14 	add.w	ip, r1, #20
 8004caa:	2300      	movs	r3, #0
 8004cac:	f8dc 0000 	ldr.w	r0, [ip]
 8004cb0:	b281      	uxth	r1, r0
 8004cb2:	fb02 7101 	mla	r1, r2, r1, r7
 8004cb6:	0c0f      	lsrs	r7, r1, #16
 8004cb8:	0c00      	lsrs	r0, r0, #16
 8004cba:	fb02 7000 	mla	r0, r2, r0, r7
 8004cbe:	b289      	uxth	r1, r1
 8004cc0:	3301      	adds	r3, #1
 8004cc2:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8004cc6:	429d      	cmp	r5, r3
 8004cc8:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8004ccc:	f84c 1b04 	str.w	r1, [ip], #4
 8004cd0:	dcec      	bgt.n	8004cac <__multadd+0x12>
 8004cd2:	b1d7      	cbz	r7, 8004d0a <__multadd+0x70>
 8004cd4:	68a3      	ldr	r3, [r4, #8]
 8004cd6:	42ab      	cmp	r3, r5
 8004cd8:	dc12      	bgt.n	8004d00 <__multadd+0x66>
 8004cda:	6861      	ldr	r1, [r4, #4]
 8004cdc:	4630      	mov	r0, r6
 8004cde:	3101      	adds	r1, #1
 8004ce0:	f7ff ff90 	bl	8004c04 <_Balloc>
 8004ce4:	6922      	ldr	r2, [r4, #16]
 8004ce6:	3202      	adds	r2, #2
 8004ce8:	f104 010c 	add.w	r1, r4, #12
 8004cec:	4680      	mov	r8, r0
 8004cee:	0092      	lsls	r2, r2, #2
 8004cf0:	300c      	adds	r0, #12
 8004cf2:	f7fe fce5 	bl	80036c0 <memcpy>
 8004cf6:	4621      	mov	r1, r4
 8004cf8:	4630      	mov	r0, r6
 8004cfa:	f7ff ffb7 	bl	8004c6c <_Bfree>
 8004cfe:	4644      	mov	r4, r8
 8004d00:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8004d04:	3501      	adds	r5, #1
 8004d06:	615f      	str	r7, [r3, #20]
 8004d08:	6125      	str	r5, [r4, #16]
 8004d0a:	4620      	mov	r0, r4
 8004d0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004d10 <__hi0bits>:
 8004d10:	0c02      	lsrs	r2, r0, #16
 8004d12:	0412      	lsls	r2, r2, #16
 8004d14:	4603      	mov	r3, r0
 8004d16:	b9b2      	cbnz	r2, 8004d46 <__hi0bits+0x36>
 8004d18:	0403      	lsls	r3, r0, #16
 8004d1a:	2010      	movs	r0, #16
 8004d1c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8004d20:	bf04      	itt	eq
 8004d22:	021b      	lsleq	r3, r3, #8
 8004d24:	3008      	addeq	r0, #8
 8004d26:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8004d2a:	bf04      	itt	eq
 8004d2c:	011b      	lsleq	r3, r3, #4
 8004d2e:	3004      	addeq	r0, #4
 8004d30:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8004d34:	bf04      	itt	eq
 8004d36:	009b      	lsleq	r3, r3, #2
 8004d38:	3002      	addeq	r0, #2
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	db06      	blt.n	8004d4c <__hi0bits+0x3c>
 8004d3e:	005b      	lsls	r3, r3, #1
 8004d40:	d503      	bpl.n	8004d4a <__hi0bits+0x3a>
 8004d42:	3001      	adds	r0, #1
 8004d44:	4770      	bx	lr
 8004d46:	2000      	movs	r0, #0
 8004d48:	e7e8      	b.n	8004d1c <__hi0bits+0xc>
 8004d4a:	2020      	movs	r0, #32
 8004d4c:	4770      	bx	lr

08004d4e <__lo0bits>:
 8004d4e:	6803      	ldr	r3, [r0, #0]
 8004d50:	f013 0207 	ands.w	r2, r3, #7
 8004d54:	4601      	mov	r1, r0
 8004d56:	d00b      	beq.n	8004d70 <__lo0bits+0x22>
 8004d58:	07da      	lsls	r2, r3, #31
 8004d5a:	d423      	bmi.n	8004da4 <__lo0bits+0x56>
 8004d5c:	0798      	lsls	r0, r3, #30
 8004d5e:	bf49      	itett	mi
 8004d60:	085b      	lsrmi	r3, r3, #1
 8004d62:	089b      	lsrpl	r3, r3, #2
 8004d64:	2001      	movmi	r0, #1
 8004d66:	600b      	strmi	r3, [r1, #0]
 8004d68:	bf5c      	itt	pl
 8004d6a:	600b      	strpl	r3, [r1, #0]
 8004d6c:	2002      	movpl	r0, #2
 8004d6e:	4770      	bx	lr
 8004d70:	b298      	uxth	r0, r3
 8004d72:	b9a8      	cbnz	r0, 8004da0 <__lo0bits+0x52>
 8004d74:	0c1b      	lsrs	r3, r3, #16
 8004d76:	2010      	movs	r0, #16
 8004d78:	f013 0fff 	tst.w	r3, #255	; 0xff
 8004d7c:	bf04      	itt	eq
 8004d7e:	0a1b      	lsreq	r3, r3, #8
 8004d80:	3008      	addeq	r0, #8
 8004d82:	071a      	lsls	r2, r3, #28
 8004d84:	bf04      	itt	eq
 8004d86:	091b      	lsreq	r3, r3, #4
 8004d88:	3004      	addeq	r0, #4
 8004d8a:	079a      	lsls	r2, r3, #30
 8004d8c:	bf04      	itt	eq
 8004d8e:	089b      	lsreq	r3, r3, #2
 8004d90:	3002      	addeq	r0, #2
 8004d92:	07da      	lsls	r2, r3, #31
 8004d94:	d402      	bmi.n	8004d9c <__lo0bits+0x4e>
 8004d96:	085b      	lsrs	r3, r3, #1
 8004d98:	d006      	beq.n	8004da8 <__lo0bits+0x5a>
 8004d9a:	3001      	adds	r0, #1
 8004d9c:	600b      	str	r3, [r1, #0]
 8004d9e:	4770      	bx	lr
 8004da0:	4610      	mov	r0, r2
 8004da2:	e7e9      	b.n	8004d78 <__lo0bits+0x2a>
 8004da4:	2000      	movs	r0, #0
 8004da6:	4770      	bx	lr
 8004da8:	2020      	movs	r0, #32
 8004daa:	4770      	bx	lr

08004dac <__i2b>:
 8004dac:	b510      	push	{r4, lr}
 8004dae:	460c      	mov	r4, r1
 8004db0:	2101      	movs	r1, #1
 8004db2:	f7ff ff27 	bl	8004c04 <_Balloc>
 8004db6:	2201      	movs	r2, #1
 8004db8:	6144      	str	r4, [r0, #20]
 8004dba:	6102      	str	r2, [r0, #16]
 8004dbc:	bd10      	pop	{r4, pc}

08004dbe <__multiply>:
 8004dbe:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004dc2:	4614      	mov	r4, r2
 8004dc4:	690a      	ldr	r2, [r1, #16]
 8004dc6:	6923      	ldr	r3, [r4, #16]
 8004dc8:	429a      	cmp	r2, r3
 8004dca:	bfb8      	it	lt
 8004dcc:	460b      	movlt	r3, r1
 8004dce:	4688      	mov	r8, r1
 8004dd0:	bfbc      	itt	lt
 8004dd2:	46a0      	movlt	r8, r4
 8004dd4:	461c      	movlt	r4, r3
 8004dd6:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8004dda:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8004dde:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8004de2:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8004de6:	eb07 0609 	add.w	r6, r7, r9
 8004dea:	42b3      	cmp	r3, r6
 8004dec:	bfb8      	it	lt
 8004dee:	3101      	addlt	r1, #1
 8004df0:	f7ff ff08 	bl	8004c04 <_Balloc>
 8004df4:	f100 0514 	add.w	r5, r0, #20
 8004df8:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8004dfc:	462b      	mov	r3, r5
 8004dfe:	2200      	movs	r2, #0
 8004e00:	4573      	cmp	r3, lr
 8004e02:	d316      	bcc.n	8004e32 <__multiply+0x74>
 8004e04:	f104 0214 	add.w	r2, r4, #20
 8004e08:	f108 0114 	add.w	r1, r8, #20
 8004e0c:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8004e10:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8004e14:	9300      	str	r3, [sp, #0]
 8004e16:	9b00      	ldr	r3, [sp, #0]
 8004e18:	9201      	str	r2, [sp, #4]
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d80c      	bhi.n	8004e38 <__multiply+0x7a>
 8004e1e:	2e00      	cmp	r6, #0
 8004e20:	dd03      	ble.n	8004e2a <__multiply+0x6c>
 8004e22:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d05d      	beq.n	8004ee6 <__multiply+0x128>
 8004e2a:	6106      	str	r6, [r0, #16]
 8004e2c:	b003      	add	sp, #12
 8004e2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e32:	f843 2b04 	str.w	r2, [r3], #4
 8004e36:	e7e3      	b.n	8004e00 <__multiply+0x42>
 8004e38:	f8b2 b000 	ldrh.w	fp, [r2]
 8004e3c:	f1bb 0f00 	cmp.w	fp, #0
 8004e40:	d023      	beq.n	8004e8a <__multiply+0xcc>
 8004e42:	4689      	mov	r9, r1
 8004e44:	46ac      	mov	ip, r5
 8004e46:	f04f 0800 	mov.w	r8, #0
 8004e4a:	f859 4b04 	ldr.w	r4, [r9], #4
 8004e4e:	f8dc a000 	ldr.w	sl, [ip]
 8004e52:	b2a3      	uxth	r3, r4
 8004e54:	fa1f fa8a 	uxth.w	sl, sl
 8004e58:	fb0b a303 	mla	r3, fp, r3, sl
 8004e5c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8004e60:	f8dc 4000 	ldr.w	r4, [ip]
 8004e64:	4443      	add	r3, r8
 8004e66:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8004e6a:	fb0b 840a 	mla	r4, fp, sl, r8
 8004e6e:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8004e72:	46e2      	mov	sl, ip
 8004e74:	b29b      	uxth	r3, r3
 8004e76:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8004e7a:	454f      	cmp	r7, r9
 8004e7c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8004e80:	f84a 3b04 	str.w	r3, [sl], #4
 8004e84:	d82b      	bhi.n	8004ede <__multiply+0x120>
 8004e86:	f8cc 8004 	str.w	r8, [ip, #4]
 8004e8a:	9b01      	ldr	r3, [sp, #4]
 8004e8c:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8004e90:	3204      	adds	r2, #4
 8004e92:	f1ba 0f00 	cmp.w	sl, #0
 8004e96:	d020      	beq.n	8004eda <__multiply+0x11c>
 8004e98:	682b      	ldr	r3, [r5, #0]
 8004e9a:	4689      	mov	r9, r1
 8004e9c:	46a8      	mov	r8, r5
 8004e9e:	f04f 0b00 	mov.w	fp, #0
 8004ea2:	f8b9 c000 	ldrh.w	ip, [r9]
 8004ea6:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8004eaa:	fb0a 440c 	mla	r4, sl, ip, r4
 8004eae:	445c      	add	r4, fp
 8004eb0:	46c4      	mov	ip, r8
 8004eb2:	b29b      	uxth	r3, r3
 8004eb4:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8004eb8:	f84c 3b04 	str.w	r3, [ip], #4
 8004ebc:	f859 3b04 	ldr.w	r3, [r9], #4
 8004ec0:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8004ec4:	0c1b      	lsrs	r3, r3, #16
 8004ec6:	fb0a b303 	mla	r3, sl, r3, fp
 8004eca:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8004ece:	454f      	cmp	r7, r9
 8004ed0:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8004ed4:	d805      	bhi.n	8004ee2 <__multiply+0x124>
 8004ed6:	f8c8 3004 	str.w	r3, [r8, #4]
 8004eda:	3504      	adds	r5, #4
 8004edc:	e79b      	b.n	8004e16 <__multiply+0x58>
 8004ede:	46d4      	mov	ip, sl
 8004ee0:	e7b3      	b.n	8004e4a <__multiply+0x8c>
 8004ee2:	46e0      	mov	r8, ip
 8004ee4:	e7dd      	b.n	8004ea2 <__multiply+0xe4>
 8004ee6:	3e01      	subs	r6, #1
 8004ee8:	e799      	b.n	8004e1e <__multiply+0x60>
	...

08004eec <__pow5mult>:
 8004eec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004ef0:	4615      	mov	r5, r2
 8004ef2:	f012 0203 	ands.w	r2, r2, #3
 8004ef6:	4606      	mov	r6, r0
 8004ef8:	460f      	mov	r7, r1
 8004efa:	d007      	beq.n	8004f0c <__pow5mult+0x20>
 8004efc:	3a01      	subs	r2, #1
 8004efe:	4c21      	ldr	r4, [pc, #132]	; (8004f84 <__pow5mult+0x98>)
 8004f00:	2300      	movs	r3, #0
 8004f02:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8004f06:	f7ff fec8 	bl	8004c9a <__multadd>
 8004f0a:	4607      	mov	r7, r0
 8004f0c:	10ad      	asrs	r5, r5, #2
 8004f0e:	d035      	beq.n	8004f7c <__pow5mult+0x90>
 8004f10:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8004f12:	b93c      	cbnz	r4, 8004f24 <__pow5mult+0x38>
 8004f14:	2010      	movs	r0, #16
 8004f16:	f7fe fbc3 	bl	80036a0 <malloc>
 8004f1a:	6270      	str	r0, [r6, #36]	; 0x24
 8004f1c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004f20:	6004      	str	r4, [r0, #0]
 8004f22:	60c4      	str	r4, [r0, #12]
 8004f24:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8004f28:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004f2c:	b94c      	cbnz	r4, 8004f42 <__pow5mult+0x56>
 8004f2e:	f240 2171 	movw	r1, #625	; 0x271
 8004f32:	4630      	mov	r0, r6
 8004f34:	f7ff ff3a 	bl	8004dac <__i2b>
 8004f38:	2300      	movs	r3, #0
 8004f3a:	f8c8 0008 	str.w	r0, [r8, #8]
 8004f3e:	4604      	mov	r4, r0
 8004f40:	6003      	str	r3, [r0, #0]
 8004f42:	f04f 0800 	mov.w	r8, #0
 8004f46:	07eb      	lsls	r3, r5, #31
 8004f48:	d50a      	bpl.n	8004f60 <__pow5mult+0x74>
 8004f4a:	4639      	mov	r1, r7
 8004f4c:	4622      	mov	r2, r4
 8004f4e:	4630      	mov	r0, r6
 8004f50:	f7ff ff35 	bl	8004dbe <__multiply>
 8004f54:	4639      	mov	r1, r7
 8004f56:	4681      	mov	r9, r0
 8004f58:	4630      	mov	r0, r6
 8004f5a:	f7ff fe87 	bl	8004c6c <_Bfree>
 8004f5e:	464f      	mov	r7, r9
 8004f60:	106d      	asrs	r5, r5, #1
 8004f62:	d00b      	beq.n	8004f7c <__pow5mult+0x90>
 8004f64:	6820      	ldr	r0, [r4, #0]
 8004f66:	b938      	cbnz	r0, 8004f78 <__pow5mult+0x8c>
 8004f68:	4622      	mov	r2, r4
 8004f6a:	4621      	mov	r1, r4
 8004f6c:	4630      	mov	r0, r6
 8004f6e:	f7ff ff26 	bl	8004dbe <__multiply>
 8004f72:	6020      	str	r0, [r4, #0]
 8004f74:	f8c0 8000 	str.w	r8, [r0]
 8004f78:	4604      	mov	r4, r0
 8004f7a:	e7e4      	b.n	8004f46 <__pow5mult+0x5a>
 8004f7c:	4638      	mov	r0, r7
 8004f7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004f82:	bf00      	nop
 8004f84:	08005340 	.word	0x08005340

08004f88 <__lshift>:
 8004f88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f8c:	460c      	mov	r4, r1
 8004f8e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8004f92:	6923      	ldr	r3, [r4, #16]
 8004f94:	6849      	ldr	r1, [r1, #4]
 8004f96:	eb0a 0903 	add.w	r9, sl, r3
 8004f9a:	68a3      	ldr	r3, [r4, #8]
 8004f9c:	4607      	mov	r7, r0
 8004f9e:	4616      	mov	r6, r2
 8004fa0:	f109 0501 	add.w	r5, r9, #1
 8004fa4:	42ab      	cmp	r3, r5
 8004fa6:	db32      	blt.n	800500e <__lshift+0x86>
 8004fa8:	4638      	mov	r0, r7
 8004faa:	f7ff fe2b 	bl	8004c04 <_Balloc>
 8004fae:	2300      	movs	r3, #0
 8004fb0:	4680      	mov	r8, r0
 8004fb2:	f100 0114 	add.w	r1, r0, #20
 8004fb6:	461a      	mov	r2, r3
 8004fb8:	4553      	cmp	r3, sl
 8004fba:	db2b      	blt.n	8005014 <__lshift+0x8c>
 8004fbc:	6920      	ldr	r0, [r4, #16]
 8004fbe:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004fc2:	f104 0314 	add.w	r3, r4, #20
 8004fc6:	f016 021f 	ands.w	r2, r6, #31
 8004fca:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8004fce:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8004fd2:	d025      	beq.n	8005020 <__lshift+0x98>
 8004fd4:	f1c2 0e20 	rsb	lr, r2, #32
 8004fd8:	2000      	movs	r0, #0
 8004fda:	681e      	ldr	r6, [r3, #0]
 8004fdc:	468a      	mov	sl, r1
 8004fde:	4096      	lsls	r6, r2
 8004fe0:	4330      	orrs	r0, r6
 8004fe2:	f84a 0b04 	str.w	r0, [sl], #4
 8004fe6:	f853 0b04 	ldr.w	r0, [r3], #4
 8004fea:	459c      	cmp	ip, r3
 8004fec:	fa20 f00e 	lsr.w	r0, r0, lr
 8004ff0:	d814      	bhi.n	800501c <__lshift+0x94>
 8004ff2:	6048      	str	r0, [r1, #4]
 8004ff4:	b108      	cbz	r0, 8004ffa <__lshift+0x72>
 8004ff6:	f109 0502 	add.w	r5, r9, #2
 8004ffa:	3d01      	subs	r5, #1
 8004ffc:	4638      	mov	r0, r7
 8004ffe:	f8c8 5010 	str.w	r5, [r8, #16]
 8005002:	4621      	mov	r1, r4
 8005004:	f7ff fe32 	bl	8004c6c <_Bfree>
 8005008:	4640      	mov	r0, r8
 800500a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800500e:	3101      	adds	r1, #1
 8005010:	005b      	lsls	r3, r3, #1
 8005012:	e7c7      	b.n	8004fa4 <__lshift+0x1c>
 8005014:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8005018:	3301      	adds	r3, #1
 800501a:	e7cd      	b.n	8004fb8 <__lshift+0x30>
 800501c:	4651      	mov	r1, sl
 800501e:	e7dc      	b.n	8004fda <__lshift+0x52>
 8005020:	3904      	subs	r1, #4
 8005022:	f853 2b04 	ldr.w	r2, [r3], #4
 8005026:	f841 2f04 	str.w	r2, [r1, #4]!
 800502a:	459c      	cmp	ip, r3
 800502c:	d8f9      	bhi.n	8005022 <__lshift+0x9a>
 800502e:	e7e4      	b.n	8004ffa <__lshift+0x72>

08005030 <__mcmp>:
 8005030:	6903      	ldr	r3, [r0, #16]
 8005032:	690a      	ldr	r2, [r1, #16]
 8005034:	1a9b      	subs	r3, r3, r2
 8005036:	b530      	push	{r4, r5, lr}
 8005038:	d10c      	bne.n	8005054 <__mcmp+0x24>
 800503a:	0092      	lsls	r2, r2, #2
 800503c:	3014      	adds	r0, #20
 800503e:	3114      	adds	r1, #20
 8005040:	1884      	adds	r4, r0, r2
 8005042:	4411      	add	r1, r2
 8005044:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005048:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800504c:	4295      	cmp	r5, r2
 800504e:	d003      	beq.n	8005058 <__mcmp+0x28>
 8005050:	d305      	bcc.n	800505e <__mcmp+0x2e>
 8005052:	2301      	movs	r3, #1
 8005054:	4618      	mov	r0, r3
 8005056:	bd30      	pop	{r4, r5, pc}
 8005058:	42a0      	cmp	r0, r4
 800505a:	d3f3      	bcc.n	8005044 <__mcmp+0x14>
 800505c:	e7fa      	b.n	8005054 <__mcmp+0x24>
 800505e:	f04f 33ff 	mov.w	r3, #4294967295
 8005062:	e7f7      	b.n	8005054 <__mcmp+0x24>

08005064 <__mdiff>:
 8005064:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005068:	460d      	mov	r5, r1
 800506a:	4607      	mov	r7, r0
 800506c:	4611      	mov	r1, r2
 800506e:	4628      	mov	r0, r5
 8005070:	4614      	mov	r4, r2
 8005072:	f7ff ffdd 	bl	8005030 <__mcmp>
 8005076:	1e06      	subs	r6, r0, #0
 8005078:	d108      	bne.n	800508c <__mdiff+0x28>
 800507a:	4631      	mov	r1, r6
 800507c:	4638      	mov	r0, r7
 800507e:	f7ff fdc1 	bl	8004c04 <_Balloc>
 8005082:	2301      	movs	r3, #1
 8005084:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8005088:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800508c:	bfa4      	itt	ge
 800508e:	4623      	movge	r3, r4
 8005090:	462c      	movge	r4, r5
 8005092:	4638      	mov	r0, r7
 8005094:	6861      	ldr	r1, [r4, #4]
 8005096:	bfa6      	itte	ge
 8005098:	461d      	movge	r5, r3
 800509a:	2600      	movge	r6, #0
 800509c:	2601      	movlt	r6, #1
 800509e:	f7ff fdb1 	bl	8004c04 <_Balloc>
 80050a2:	692b      	ldr	r3, [r5, #16]
 80050a4:	60c6      	str	r6, [r0, #12]
 80050a6:	6926      	ldr	r6, [r4, #16]
 80050a8:	f105 0914 	add.w	r9, r5, #20
 80050ac:	f104 0214 	add.w	r2, r4, #20
 80050b0:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80050b4:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80050b8:	f100 0514 	add.w	r5, r0, #20
 80050bc:	f04f 0e00 	mov.w	lr, #0
 80050c0:	f852 ab04 	ldr.w	sl, [r2], #4
 80050c4:	f859 4b04 	ldr.w	r4, [r9], #4
 80050c8:	fa1e f18a 	uxtah	r1, lr, sl
 80050cc:	b2a3      	uxth	r3, r4
 80050ce:	1ac9      	subs	r1, r1, r3
 80050d0:	0c23      	lsrs	r3, r4, #16
 80050d2:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 80050d6:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80050da:	b289      	uxth	r1, r1
 80050dc:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80050e0:	45c8      	cmp	r8, r9
 80050e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80050e6:	4694      	mov	ip, r2
 80050e8:	f845 3b04 	str.w	r3, [r5], #4
 80050ec:	d8e8      	bhi.n	80050c0 <__mdiff+0x5c>
 80050ee:	45bc      	cmp	ip, r7
 80050f0:	d304      	bcc.n	80050fc <__mdiff+0x98>
 80050f2:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80050f6:	b183      	cbz	r3, 800511a <__mdiff+0xb6>
 80050f8:	6106      	str	r6, [r0, #16]
 80050fa:	e7c5      	b.n	8005088 <__mdiff+0x24>
 80050fc:	f85c 1b04 	ldr.w	r1, [ip], #4
 8005100:	fa1e f381 	uxtah	r3, lr, r1
 8005104:	141a      	asrs	r2, r3, #16
 8005106:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800510a:	b29b      	uxth	r3, r3
 800510c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005110:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8005114:	f845 3b04 	str.w	r3, [r5], #4
 8005118:	e7e9      	b.n	80050ee <__mdiff+0x8a>
 800511a:	3e01      	subs	r6, #1
 800511c:	e7e9      	b.n	80050f2 <__mdiff+0x8e>

0800511e <__d2b>:
 800511e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8005122:	2101      	movs	r1, #1
 8005124:	461c      	mov	r4, r3
 8005126:	4690      	mov	r8, r2
 8005128:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 800512c:	f7ff fd6a 	bl	8004c04 <_Balloc>
 8005130:	f3c4 0213 	ubfx	r2, r4, #0, #20
 8005134:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8005138:	4607      	mov	r7, r0
 800513a:	bb34      	cbnz	r4, 800518a <__d2b+0x6c>
 800513c:	9201      	str	r2, [sp, #4]
 800513e:	f1b8 0200 	subs.w	r2, r8, #0
 8005142:	d027      	beq.n	8005194 <__d2b+0x76>
 8005144:	a802      	add	r0, sp, #8
 8005146:	f840 2d08 	str.w	r2, [r0, #-8]!
 800514a:	f7ff fe00 	bl	8004d4e <__lo0bits>
 800514e:	9900      	ldr	r1, [sp, #0]
 8005150:	b1f0      	cbz	r0, 8005190 <__d2b+0x72>
 8005152:	9a01      	ldr	r2, [sp, #4]
 8005154:	f1c0 0320 	rsb	r3, r0, #32
 8005158:	fa02 f303 	lsl.w	r3, r2, r3
 800515c:	430b      	orrs	r3, r1
 800515e:	40c2      	lsrs	r2, r0
 8005160:	617b      	str	r3, [r7, #20]
 8005162:	9201      	str	r2, [sp, #4]
 8005164:	9b01      	ldr	r3, [sp, #4]
 8005166:	61bb      	str	r3, [r7, #24]
 8005168:	2b00      	cmp	r3, #0
 800516a:	bf14      	ite	ne
 800516c:	2102      	movne	r1, #2
 800516e:	2101      	moveq	r1, #1
 8005170:	6139      	str	r1, [r7, #16]
 8005172:	b1c4      	cbz	r4, 80051a6 <__d2b+0x88>
 8005174:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8005178:	4404      	add	r4, r0
 800517a:	6034      	str	r4, [r6, #0]
 800517c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005180:	6028      	str	r0, [r5, #0]
 8005182:	4638      	mov	r0, r7
 8005184:	b002      	add	sp, #8
 8005186:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800518a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800518e:	e7d5      	b.n	800513c <__d2b+0x1e>
 8005190:	6179      	str	r1, [r7, #20]
 8005192:	e7e7      	b.n	8005164 <__d2b+0x46>
 8005194:	a801      	add	r0, sp, #4
 8005196:	f7ff fdda 	bl	8004d4e <__lo0bits>
 800519a:	9b01      	ldr	r3, [sp, #4]
 800519c:	617b      	str	r3, [r7, #20]
 800519e:	2101      	movs	r1, #1
 80051a0:	6139      	str	r1, [r7, #16]
 80051a2:	3020      	adds	r0, #32
 80051a4:	e7e5      	b.n	8005172 <__d2b+0x54>
 80051a6:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80051aa:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80051ae:	6030      	str	r0, [r6, #0]
 80051b0:	6918      	ldr	r0, [r3, #16]
 80051b2:	f7ff fdad 	bl	8004d10 <__hi0bits>
 80051b6:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80051ba:	e7e1      	b.n	8005180 <__d2b+0x62>

080051bc <_calloc_r>:
 80051bc:	b538      	push	{r3, r4, r5, lr}
 80051be:	fb02 f401 	mul.w	r4, r2, r1
 80051c2:	4621      	mov	r1, r4
 80051c4:	f7fe fade 	bl	8003784 <_malloc_r>
 80051c8:	4605      	mov	r5, r0
 80051ca:	b118      	cbz	r0, 80051d4 <_calloc_r+0x18>
 80051cc:	4622      	mov	r2, r4
 80051ce:	2100      	movs	r1, #0
 80051d0:	f7fe fa81 	bl	80036d6 <memset>
 80051d4:	4628      	mov	r0, r5
 80051d6:	bd38      	pop	{r3, r4, r5, pc}

080051d8 <__ascii_mbtowc>:
 80051d8:	b082      	sub	sp, #8
 80051da:	b901      	cbnz	r1, 80051de <__ascii_mbtowc+0x6>
 80051dc:	a901      	add	r1, sp, #4
 80051de:	b142      	cbz	r2, 80051f2 <__ascii_mbtowc+0x1a>
 80051e0:	b14b      	cbz	r3, 80051f6 <__ascii_mbtowc+0x1e>
 80051e2:	7813      	ldrb	r3, [r2, #0]
 80051e4:	600b      	str	r3, [r1, #0]
 80051e6:	7812      	ldrb	r2, [r2, #0]
 80051e8:	1c10      	adds	r0, r2, #0
 80051ea:	bf18      	it	ne
 80051ec:	2001      	movne	r0, #1
 80051ee:	b002      	add	sp, #8
 80051f0:	4770      	bx	lr
 80051f2:	4610      	mov	r0, r2
 80051f4:	e7fb      	b.n	80051ee <__ascii_mbtowc+0x16>
 80051f6:	f06f 0001 	mvn.w	r0, #1
 80051fa:	e7f8      	b.n	80051ee <__ascii_mbtowc+0x16>

080051fc <__ascii_wctomb>:
 80051fc:	b149      	cbz	r1, 8005212 <__ascii_wctomb+0x16>
 80051fe:	2aff      	cmp	r2, #255	; 0xff
 8005200:	bf85      	ittet	hi
 8005202:	238a      	movhi	r3, #138	; 0x8a
 8005204:	6003      	strhi	r3, [r0, #0]
 8005206:	700a      	strbls	r2, [r1, #0]
 8005208:	f04f 30ff 	movhi.w	r0, #4294967295
 800520c:	bf98      	it	ls
 800520e:	2001      	movls	r0, #1
 8005210:	4770      	bx	lr
 8005212:	4608      	mov	r0, r1
 8005214:	4770      	bx	lr
	...

08005218 <_init>:
 8005218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800521a:	bf00      	nop
 800521c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800521e:	bc08      	pop	{r3}
 8005220:	469e      	mov	lr, r3
 8005222:	4770      	bx	lr

08005224 <_fini>:
 8005224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005226:	bf00      	nop
 8005228:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800522a:	bc08      	pop	{r3}
 800522c:	469e      	mov	lr, r3
 800522e:	4770      	bx	lr
