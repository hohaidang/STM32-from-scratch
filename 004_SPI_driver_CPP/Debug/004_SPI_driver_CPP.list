
004_SPI_driver_CPP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001084  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08001248  08001248  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08001248  08001248  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  08001248  08001248  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001248  08001248  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001248  08001248  00011248  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800124c  0800124c  0001124c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08001250  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000034  20000064  080012b4  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000098  080012b4  00020098  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003cae  00000000  00000000  0002008e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000b69  00000000  00000000  00023d3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000220  00000000  00000000  000248a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000001c8  00000000  00000000  00024ac8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00004142  00000000  00000000  00024c90  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00001f52  00000000  00000000  00028dd2  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0000b8c0  00000000  00000000  0002ad24  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000365e4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000a80  00000000  00000000  00036660  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000064 	.word	0x20000064
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08001230 	.word	0x08001230

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000068 	.word	0x20000068
 8000200:	08001230 	.word	0x08001230

08000204 <_Z11small_delayv>:
//PA6 - SPI1_MISO
//PA7 - SPI1_MOSI
//PA4 - slave select
// Alternate function 5

void small_delay(void) {
 8000204:	b480      	push	{r7}
 8000206:	b083      	sub	sp, #12
 8000208:	af00      	add	r7, sp, #0
	for(uint32_t i = 0; i < 250000; ++i){};
 800020a:	2300      	movs	r3, #0
 800020c:	607b      	str	r3, [r7, #4]
 800020e:	687b      	ldr	r3, [r7, #4]
 8000210:	4a05      	ldr	r2, [pc, #20]	; (8000228 <_Z11small_delayv+0x24>)
 8000212:	4293      	cmp	r3, r2
 8000214:	d803      	bhi.n	800021e <_Z11small_delayv+0x1a>
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	3301      	adds	r3, #1
 800021a:	607b      	str	r3, [r7, #4]
 800021c:	e7f7      	b.n	800020e <_Z11small_delayv+0xa>
}
 800021e:	bf00      	nop
 8000220:	370c      	adds	r7, #12
 8000222:	46bd      	mov	sp, r7
 8000224:	bc80      	pop	{r7}
 8000226:	4770      	bx	lr
 8000228:	0003d08f 	.word	0x0003d08f

0800022c <_Z14SPI1_GPIOInitsv>:
SPI_Handler *SPI1_Handler;
GPIO_Handler *GPIO_CheckSCLK;

volatile int data = 0;

void SPI1_GPIOInits(void) {
 800022c:	b580      	push	{r7, lr}
 800022e:	b092      	sub	sp, #72	; 0x48
 8000230:	af06      	add	r7, sp, #24
                                         GPIO_MODE_ALTFN,
                                         GPIO_SPEED_HIGH,
                                         IRQ_Prio_NO_15,
                                         GPIO_OP_TYPE_PP,
										 GPIO_PIN_PU,
                                         5);
 8000232:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8000236:	2305      	movs	r3, #5
 8000238:	9304      	str	r3, [sp, #16]
 800023a:	2301      	movs	r3, #1
 800023c:	9303      	str	r3, [sp, #12]
 800023e:	2300      	movs	r3, #0
 8000240:	9302      	str	r3, [sp, #8]
 8000242:	230f      	movs	r3, #15
 8000244:	9301      	str	r3, [sp, #4]
 8000246:	2303      	movs	r3, #3
 8000248:	9300      	str	r3, [sp, #0]
 800024a:	2302      	movs	r3, #2
 800024c:	2205      	movs	r2, #5
 800024e:	4926      	ldr	r1, [pc, #152]	; (80002e8 <_Z14SPI1_GPIOInitsv+0xbc>)
 8000250:	f000 f97c 	bl	800054c <_ZN12GPIO_HandlerC1EP13GPIO_RegDef_thhhhhhh>
                                          GPIO_MODE_ALTFN,
                                          GPIO_SPEED_HIGH,
                                          IRQ_Prio_NO_15,
                                          GPIO_OP_TYPE_PP,
										  GPIO_PIN_PU,
                                          5);
 8000254:	f107 0018 	add.w	r0, r7, #24
 8000258:	2305      	movs	r3, #5
 800025a:	9304      	str	r3, [sp, #16]
 800025c:	2301      	movs	r3, #1
 800025e:	9303      	str	r3, [sp, #12]
 8000260:	2300      	movs	r3, #0
 8000262:	9302      	str	r3, [sp, #8]
 8000264:	230f      	movs	r3, #15
 8000266:	9301      	str	r3, [sp, #4]
 8000268:	2303      	movs	r3, #3
 800026a:	9300      	str	r3, [sp, #0]
 800026c:	2302      	movs	r3, #2
 800026e:	2207      	movs	r2, #7
 8000270:	491d      	ldr	r1, [pc, #116]	; (80002e8 <_Z14SPI1_GPIOInitsv+0xbc>)
 8000272:	f000 f96b 	bl	800054c <_ZN12GPIO_HandlerC1EP13GPIO_RegDef_thhhhhhh>
                                          GPIO_MODE_ALTFN,
                                          GPIO_SPEED_HIGH,
                                          IRQ_Prio_NO_15,
                                          GPIO_OP_TYPE_PP,
										  GPIO_PIN_PU,
                                          5);
 8000276:	f107 000c 	add.w	r0, r7, #12
 800027a:	2305      	movs	r3, #5
 800027c:	9304      	str	r3, [sp, #16]
 800027e:	2301      	movs	r3, #1
 8000280:	9303      	str	r3, [sp, #12]
 8000282:	2300      	movs	r3, #0
 8000284:	9302      	str	r3, [sp, #8]
 8000286:	230f      	movs	r3, #15
 8000288:	9301      	str	r3, [sp, #4]
 800028a:	2303      	movs	r3, #3
 800028c:	9300      	str	r3, [sp, #0]
 800028e:	2302      	movs	r3, #2
 8000290:	2206      	movs	r2, #6
 8000292:	4915      	ldr	r1, [pc, #84]	; (80002e8 <_Z14SPI1_GPIOInitsv+0xbc>)
 8000294:	f000 f95a 	bl	800054c <_ZN12GPIO_HandlerC1EP13GPIO_RegDef_thhhhhhh>
                                         GPIO_MODE_ALTFN,
                                         GPIO_SPEED_HIGH,
                                         IRQ_Prio_NO_15,
                                         GPIO_OP_TYPE_PP,
										 GPIO_PIN_PU,
                                         5);
 8000298:	4638      	mov	r0, r7
 800029a:	2305      	movs	r3, #5
 800029c:	9304      	str	r3, [sp, #16]
 800029e:	2301      	movs	r3, #1
 80002a0:	9303      	str	r3, [sp, #12]
 80002a2:	2300      	movs	r3, #0
 80002a4:	9302      	str	r3, [sp, #8]
 80002a6:	230f      	movs	r3, #15
 80002a8:	9301      	str	r3, [sp, #4]
 80002aa:	2303      	movs	r3, #3
 80002ac:	9300      	str	r3, [sp, #0]
 80002ae:	2302      	movs	r3, #2
 80002b0:	2204      	movs	r2, #4
 80002b2:	490d      	ldr	r1, [pc, #52]	; (80002e8 <_Z14SPI1_GPIOInitsv+0xbc>)
 80002b4:	f000 f94a 	bl	800054c <_ZN12GPIO_HandlerC1EP13GPIO_RegDef_thhhhhhh>
 80002b8:	463b      	mov	r3, r7
 80002ba:	4618      	mov	r0, r3
 80002bc:	f000 f991 	bl	80005e2 <_ZN12GPIO_HandlerD1Ev>
                                          5);
 80002c0:	f107 030c 	add.w	r3, r7, #12
 80002c4:	4618      	mov	r0, r3
 80002c6:	f000 f98c 	bl	80005e2 <_ZN12GPIO_HandlerD1Ev>
                                          5);
 80002ca:	f107 0318 	add.w	r3, r7, #24
 80002ce:	4618      	mov	r0, r3
 80002d0:	f000 f987 	bl	80005e2 <_ZN12GPIO_HandlerD1Ev>
                                         5);
 80002d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80002d8:	4618      	mov	r0, r3
 80002da:	f000 f982 	bl	80005e2 <_ZN12GPIO_HandlerD1Ev>
}
 80002de:	bf00      	nop
 80002e0:	3730      	adds	r7, #48	; 0x30
 80002e2:	46bd      	mov	sp, r7
 80002e4:	bd80      	pop	{r7, pc}
 80002e6:	bf00      	nop
 80002e8:	40020000 	.word	0x40020000

080002ec <main>:

int main(void)
{
 80002ec:	b590      	push	{r4, r7, lr}
 80002ee:	b08b      	sub	sp, #44	; 0x2c
 80002f0:	af06      	add	r7, sp, #24
	// GPIO Button Init
	GPIO_Handler user_button = GPIO_Handler(GPIOC, GPIO_PIN_NO_13, GPIO_MODE_IN, GPIO_SPEED_LOW);
 80002f2:	1d38      	adds	r0, r7, #4
 80002f4:	2300      	movs	r3, #0
 80002f6:	9304      	str	r3, [sp, #16]
 80002f8:	2300      	movs	r3, #0
 80002fa:	9303      	str	r3, [sp, #12]
 80002fc:	2300      	movs	r3, #0
 80002fe:	9302      	str	r3, [sp, #8]
 8000300:	230f      	movs	r3, #15
 8000302:	9301      	str	r3, [sp, #4]
 8000304:	2300      	movs	r3, #0
 8000306:	9300      	str	r3, [sp, #0]
 8000308:	2300      	movs	r3, #0
 800030a:	220d      	movs	r2, #13
 800030c:	492b      	ldr	r1, [pc, #172]	; (80003bc <main+0xd0>)
 800030e:	f000 f91d 	bl	800054c <_ZN12GPIO_HandlerC1EP13GPIO_RegDef_thhhhhhh>


    SPI1_GPIOInits();
 8000312:	f7ff ff8b 	bl	800022c <_Z14SPI1_GPIOInitsv>
                                   SPI_BUS_CONFIG_FD,
                                   SPI_SCLK_SPEED_DIV2,
                                   SPI_DFF_8BITS,
                                   SPI_CPOL_HIGH,
                                   SPI_CPHA_HIGH,
								   SPI_SSM_DI);
 8000316:	2020      	movs	r0, #32
 8000318:	f000 fe7f 	bl	800101a <_Znwj>
 800031c:	4603      	mov	r3, r0
 800031e:	461c      	mov	r4, r3
 8000320:	2300      	movs	r3, #0
 8000322:	9304      	str	r3, [sp, #16]
 8000324:	2301      	movs	r3, #1
 8000326:	9303      	str	r3, [sp, #12]
 8000328:	2301      	movs	r3, #1
 800032a:	9302      	str	r3, [sp, #8]
 800032c:	2300      	movs	r3, #0
 800032e:	9301      	str	r3, [sp, #4]
 8000330:	2300      	movs	r3, #0
 8000332:	9300      	str	r3, [sp, #0]
 8000334:	2301      	movs	r3, #1
 8000336:	2201      	movs	r2, #1
 8000338:	4921      	ldr	r1, [pc, #132]	; (80003c0 <main+0xd4>)
 800033a:	4620      	mov	r0, r4
 800033c:	f000 fcbb 	bl	8000cb6 <_ZN11SPI_HandlerC1EP12SPI_RegDef_thhhhhhh>
    SPI1_Handler = new SPI_Handler(SPI1,
 8000340:	4b20      	ldr	r3, [pc, #128]	; (80003c4 <main+0xd8>)
 8000342:	601c      	str	r4, [r3, #0]
//    								GPIO_PIN_NO_6,
//									GPIO_MODE_OUT,
//									GPIO_SPEED_LOW);
//    PB6.GPIO_WriteToOutputPin(0);
//
    uint8_t tempCode = 0xF6;
 8000344:	23f6      	movs	r3, #246	; 0xf6
 8000346:	70fb      	strb	r3, [r7, #3]


    uint8_t RxBuffer[3];

    for(;;) {
    	while(user_button.GPIO_ReadFromInputPin());
 8000348:	1d3b      	adds	r3, r7, #4
 800034a:	4618      	mov	r0, r3
 800034c:	f000 fbd0 	bl	8000af0 <_ZNK12GPIO_Handler21GPIO_ReadFromInputPinEv>
 8000350:	4603      	mov	r3, r0
 8000352:	2b00      	cmp	r3, #0
 8000354:	bf14      	ite	ne
 8000356:	2301      	movne	r3, #1
 8000358:	2300      	moveq	r3, #0
 800035a:	b2db      	uxtb	r3, r3
 800035c:	2b00      	cmp	r3, #0
 800035e:	d000      	beq.n	8000362 <main+0x76>
 8000360:	e7f2      	b.n	8000348 <main+0x5c>
    	small_delay();
 8000362:	f7ff ff4f 	bl	8000204 <_Z11small_delayv>
    	SPI1_Handler->SPI_PeripheralControl(ENABLE);
 8000366:	4b17      	ldr	r3, [pc, #92]	; (80003c4 <main+0xd8>)
 8000368:	681b      	ldr	r3, [r3, #0]
 800036a:	2101      	movs	r1, #1
 800036c:	4618      	mov	r0, r3
 800036e:	f000 fd7b 	bl	8000e68 <_ZN11SPI_Handler21SPI_PeripheralControlEh>
    	SPI1_Handler->SPI_SendData((uint8_t*) &tempCode, 1);
 8000372:	4b14      	ldr	r3, [pc, #80]	; (80003c4 <main+0xd8>)
 8000374:	681b      	ldr	r3, [r3, #0]
 8000376:	1cf9      	adds	r1, r7, #3
 8000378:	2201      	movs	r2, #1
 800037a:	4618      	mov	r0, r3
 800037c:	f000 fdad 	bl	8000eda <_ZN11SPI_Handler12SPI_SendDataEPhm>
    	SPI1_Handler->SPI_ReceiveData(&RxBuffer[0], 1);
 8000380:	4b10      	ldr	r3, [pc, #64]	; (80003c4 <main+0xd8>)
 8000382:	681b      	ldr	r3, [r3, #0]
 8000384:	4639      	mov	r1, r7
 8000386:	2201      	movs	r2, #1
 8000388:	4618      	mov	r0, r3
 800038a:	f000 fe03 	bl	8000f94 <_ZN11SPI_Handler15SPI_ReceiveDataEPhm>

    	// Disable the SPI2 peripheral
    	while(SPI1_Handler->SPI_GetFlagStatus(SPI_BSY_FLAG));
 800038e:	4b0d      	ldr	r3, [pc, #52]	; (80003c4 <main+0xd8>)
 8000390:	681b      	ldr	r3, [r3, #0]
 8000392:	2180      	movs	r1, #128	; 0x80
 8000394:	4618      	mov	r0, r3
 8000396:	f000 fd86 	bl	8000ea6 <_ZN11SPI_Handler17SPI_GetFlagStatusEh>
 800039a:	4603      	mov	r3, r0
 800039c:	2b00      	cmp	r3, #0
 800039e:	bf14      	ite	ne
 80003a0:	2301      	movne	r3, #1
 80003a2:	2300      	moveq	r3, #0
 80003a4:	b2db      	uxtb	r3, r3
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	d000      	beq.n	80003ac <main+0xc0>
 80003aa:	e7f0      	b.n	800038e <main+0xa2>
    	SPI1_Handler->SPI_PeripheralControl(DISABLE);
 80003ac:	4b05      	ldr	r3, [pc, #20]	; (80003c4 <main+0xd8>)
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	2100      	movs	r1, #0
 80003b2:	4618      	mov	r0, r3
 80003b4:	f000 fd58 	bl	8000e68 <_ZN11SPI_Handler21SPI_PeripheralControlEh>
    for(;;) {
 80003b8:	e7c6      	b.n	8000348 <main+0x5c>
 80003ba:	bf00      	nop
 80003bc:	40020800 	.word	0x40020800
 80003c0:	40013000 	.word	0x40013000
 80003c4:	20000080 	.word	0x20000080

080003c8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80003c8:	b480      	push	{r7}
 80003ca:	af00      	add	r7, sp, #0
	return 1;
 80003cc:	2301      	movs	r3, #1
}
 80003ce:	4618      	mov	r0, r3
 80003d0:	46bd      	mov	sp, r7
 80003d2:	bc80      	pop	{r7}
 80003d4:	4770      	bx	lr

080003d6 <_kill>:

int _kill(int pid, int sig)
{
 80003d6:	b580      	push	{r7, lr}
 80003d8:	b082      	sub	sp, #8
 80003da:	af00      	add	r7, sp, #0
 80003dc:	6078      	str	r0, [r7, #4]
 80003de:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80003e0:	f000 fe3c 	bl	800105c <__errno>
 80003e4:	4602      	mov	r2, r0
 80003e6:	2316      	movs	r3, #22
 80003e8:	6013      	str	r3, [r2, #0]
	return -1;
 80003ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80003ee:	4618      	mov	r0, r3
 80003f0:	3708      	adds	r7, #8
 80003f2:	46bd      	mov	sp, r7
 80003f4:	bd80      	pop	{r7, pc}

080003f6 <_exit>:

void _exit (int status)
{
 80003f6:	b580      	push	{r7, lr}
 80003f8:	b082      	sub	sp, #8
 80003fa:	af00      	add	r7, sp, #0
 80003fc:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80003fe:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000402:	6878      	ldr	r0, [r7, #4]
 8000404:	f7ff ffe7 	bl	80003d6 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000408:	e7fe      	b.n	8000408 <_exit+0x12>
	...

0800040c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	b084      	sub	sp, #16
 8000410:	af00      	add	r7, sp, #0
 8000412:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000414:	4b11      	ldr	r3, [pc, #68]	; (800045c <_sbrk+0x50>)
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	2b00      	cmp	r3, #0
 800041a:	d102      	bne.n	8000422 <_sbrk+0x16>
		heap_end = &end;
 800041c:	4b0f      	ldr	r3, [pc, #60]	; (800045c <_sbrk+0x50>)
 800041e:	4a10      	ldr	r2, [pc, #64]	; (8000460 <_sbrk+0x54>)
 8000420:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000422:	4b0e      	ldr	r3, [pc, #56]	; (800045c <_sbrk+0x50>)
 8000424:	681b      	ldr	r3, [r3, #0]
 8000426:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000428:	4b0c      	ldr	r3, [pc, #48]	; (800045c <_sbrk+0x50>)
 800042a:	681a      	ldr	r2, [r3, #0]
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	4413      	add	r3, r2
 8000430:	466a      	mov	r2, sp
 8000432:	4293      	cmp	r3, r2
 8000434:	d907      	bls.n	8000446 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000436:	f000 fe11 	bl	800105c <__errno>
 800043a:	4602      	mov	r2, r0
 800043c:	230c      	movs	r3, #12
 800043e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000440:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000444:	e006      	b.n	8000454 <_sbrk+0x48>
	}

	heap_end += incr;
 8000446:	4b05      	ldr	r3, [pc, #20]	; (800045c <_sbrk+0x50>)
 8000448:	681a      	ldr	r2, [r3, #0]
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	4413      	add	r3, r2
 800044e:	4a03      	ldr	r2, [pc, #12]	; (800045c <_sbrk+0x50>)
 8000450:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000452:	68fb      	ldr	r3, [r7, #12]
}
 8000454:	4618      	mov	r0, r3
 8000456:	3710      	adds	r7, #16
 8000458:	46bd      	mov	sp, r7
 800045a:	bd80      	pop	{r7, pc}
 800045c:	20000084 	.word	0x20000084
 8000460:	20000098 	.word	0x20000098

08000464 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000464:	480d      	ldr	r0, [pc, #52]	; (800049c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000466:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000468:	480d      	ldr	r0, [pc, #52]	; (80004a0 <LoopForever+0x6>)
  ldr r1, =_edata
 800046a:	490e      	ldr	r1, [pc, #56]	; (80004a4 <LoopForever+0xa>)
  ldr r2, =_sidata
 800046c:	4a0e      	ldr	r2, [pc, #56]	; (80004a8 <LoopForever+0xe>)
  movs r3, #0
 800046e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000470:	e002      	b.n	8000478 <LoopCopyDataInit>

08000472 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000472:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000474:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000476:	3304      	adds	r3, #4

08000478 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000478:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800047a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800047c:	d3f9      	bcc.n	8000472 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800047e:	4a0b      	ldr	r2, [pc, #44]	; (80004ac <LoopForever+0x12>)
  ldr r4, =_ebss
 8000480:	4c0b      	ldr	r4, [pc, #44]	; (80004b0 <LoopForever+0x16>)
  movs r3, #0
 8000482:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000484:	e001      	b.n	800048a <LoopFillZerobss>

08000486 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000486:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000488:	3204      	adds	r2, #4

0800048a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800048a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800048c:	d3fb      	bcc.n	8000486 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800048e:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 8000492:	f000 fde9 	bl	8001068 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000496:	f7ff ff29 	bl	80002ec <main>

0800049a <LoopForever>:

LoopForever:
    b LoopForever
 800049a:	e7fe      	b.n	800049a <LoopForever>
  ldr   r0, =_estack
 800049c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80004a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004a4:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 80004a8:	08001250 	.word	0x08001250
  ldr r2, =_sbss
 80004ac:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 80004b0:	20000098 	.word	0x20000098

080004b4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80004b4:	e7fe      	b.n	80004b4 <ADC_IRQHandler>
	...

080004b8 <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t>:
#define SPI_SR_BSY                      7
#define SPI_SR_FRE                      8



inline uint8_t gpio_baseAddr_to_code(GPIO_RegDef_t *Port) {
 80004b8:	b480      	push	{r7}
 80004ba:	b083      	sub	sp, #12
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]
			 (Port == GPIOC) ? 0x02 : \
			 (Port == GPIOD) ? 0x03 : \
			 (Port == GPIOE) ? 0x04 : \
			 (Port == GPIOF) ? 0x05 : \
			 (Port == GPIOG) ? 0x06 : \
			 (Port == GPIOH) ? 0x07 : 0x00 );
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	4a1a      	ldr	r2, [pc, #104]	; (800052c <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t+0x74>)
 80004c4:	4293      	cmp	r3, r2
 80004c6:	d02b      	beq.n	8000520 <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t+0x68>
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	4a19      	ldr	r2, [pc, #100]	; (8000530 <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t+0x78>)
 80004cc:	4293      	cmp	r3, r2
 80004ce:	d025      	beq.n	800051c <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t+0x64>
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	4a18      	ldr	r2, [pc, #96]	; (8000534 <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t+0x7c>)
 80004d4:	4293      	cmp	r3, r2
 80004d6:	d01f      	beq.n	8000518 <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t+0x60>
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	4a17      	ldr	r2, [pc, #92]	; (8000538 <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t+0x80>)
 80004dc:	4293      	cmp	r3, r2
 80004de:	d019      	beq.n	8000514 <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t+0x5c>
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	4a16      	ldr	r2, [pc, #88]	; (800053c <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t+0x84>)
 80004e4:	4293      	cmp	r3, r2
 80004e6:	d013      	beq.n	8000510 <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t+0x58>
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	4a15      	ldr	r2, [pc, #84]	; (8000540 <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t+0x88>)
 80004ec:	4293      	cmp	r3, r2
 80004ee:	d00d      	beq.n	800050c <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t+0x54>
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	4a14      	ldr	r2, [pc, #80]	; (8000544 <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t+0x8c>)
 80004f4:	4293      	cmp	r3, r2
 80004f6:	d007      	beq.n	8000508 <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t+0x50>
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	4a13      	ldr	r2, [pc, #76]	; (8000548 <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t+0x90>)
 80004fc:	4293      	cmp	r3, r2
 80004fe:	d101      	bne.n	8000504 <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t+0x4c>
 8000500:	2307      	movs	r3, #7
 8000502:	e00e      	b.n	8000522 <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t+0x6a>
 8000504:	2300      	movs	r3, #0
 8000506:	e00c      	b.n	8000522 <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t+0x6a>
 8000508:	2306      	movs	r3, #6
 800050a:	e00a      	b.n	8000522 <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t+0x6a>
 800050c:	2305      	movs	r3, #5
 800050e:	e008      	b.n	8000522 <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t+0x6a>
 8000510:	2304      	movs	r3, #4
 8000512:	e006      	b.n	8000522 <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t+0x6a>
 8000514:	2303      	movs	r3, #3
 8000516:	e004      	b.n	8000522 <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t+0x6a>
 8000518:	2302      	movs	r3, #2
 800051a:	e002      	b.n	8000522 <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t+0x6a>
 800051c:	2301      	movs	r3, #1
 800051e:	e000      	b.n	8000522 <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t+0x6a>
 8000520:	2300      	movs	r3, #0
}
 8000522:	4618      	mov	r0, r3
 8000524:	370c      	adds	r7, #12
 8000526:	46bd      	mov	sp, r7
 8000528:	bc80      	pop	{r7}
 800052a:	4770      	bx	lr
 800052c:	40020000 	.word	0x40020000
 8000530:	40020400 	.word	0x40020400
 8000534:	40020800 	.word	0x40020800
 8000538:	40020c00 	.word	0x40020c00
 800053c:	40021000 	.word	0x40021000
 8000540:	40021400 	.word	0x40021400
 8000544:	40021800 	.word	0x40021800
 8000548:	40021c00 	.word	0x40021c00

0800054c <_ZN12GPIO_HandlerC1EP13GPIO_RegDef_thhhhhhh>:
/*********************************************************************
 * @class      		  - GPIO_Handler
 *
 * @brief             - Constructor, initialize GPIO, clock, IRQ, Alt Function
 **********************************************************************/
GPIO_Handler::GPIO_Handler(
 800054c:	b580      	push	{r7, lr}
 800054e:	b086      	sub	sp, #24
 8000550:	af00      	add	r7, sp, #0
 8000552:	60f8      	str	r0, [r7, #12]
 8000554:	60b9      	str	r1, [r7, #8]
 8000556:	4611      	mov	r1, r2
 8000558:	461a      	mov	r2, r3
 800055a:	460b      	mov	r3, r1
 800055c:	71fb      	strb	r3, [r7, #7]
 800055e:	4613      	mov	r3, r2
 8000560:	71bb      	strb	r3, [r7, #6]
		uint8_t GPIO_PinMode,
		uint8_t GPIO_PinSpeed,
		uint8_t GPIO_IRQ_Priority,
		uint8_t GPIO_PinOPType,
		uint8_t GPIO_PinPuPdControl,
		uint8_t GPIO_PinAltFunMode) {
 8000562:	68fb      	ldr	r3, [r7, #12]
 8000564:	461a      	mov	r2, r3
 8000566:	2300      	movs	r3, #0
 8000568:	6013      	str	r3, [r2, #0]
 800056a:	6053      	str	r3, [r2, #4]
 800056c:	6093      	str	r3, [r2, #8]
	GPIOx_.pGPIOx = ((GPIO_RegDef_t *)(GPIOx_ADDR));
 800056e:	68ba      	ldr	r2, [r7, #8]
 8000570:	68fb      	ldr	r3, [r7, #12]
 8000572:	601a      	str	r2, [r3, #0]
	GPIOx_.GPIO_PinConfig.GPIO_PinNumber = GPIO_PinNumber;
 8000574:	68fb      	ldr	r3, [r7, #12]
 8000576:	79fa      	ldrb	r2, [r7, #7]
 8000578:	711a      	strb	r2, [r3, #4]
	GPIOx_.GPIO_PinConfig.GPIO_PinMode = GPIO_PinMode;
 800057a:	68fb      	ldr	r3, [r7, #12]
 800057c:	79ba      	ldrb	r2, [r7, #6]
 800057e:	715a      	strb	r2, [r3, #5]
	GPIOx_.GPIO_PinConfig.GPIO_PinSpeed = GPIO_PinSpeed;
 8000580:	68fb      	ldr	r3, [r7, #12]
 8000582:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000586:	719a      	strb	r2, [r3, #6]
	GPIOx_.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PinPuPdControl;
 8000588:	68fb      	ldr	r3, [r7, #12]
 800058a:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800058e:	71da      	strb	r2, [r3, #7]
	GPIOx_.GPIO_PinConfig.GPIO_PinOPType = GPIO_PinOPType;
 8000590:	68fb      	ldr	r3, [r7, #12]
 8000592:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8000596:	721a      	strb	r2, [r3, #8]
	GPIOx_.GPIO_PinConfig.GPIO_PinAltFunMode = GPIO_PinAltFunMode;
 8000598:	68fb      	ldr	r3, [r7, #12]
 800059a:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800059e:	725a      	strb	r2, [r3, #9]
	GPIO_PeriClockControl();
 80005a0:	68f8      	ldr	r0, [r7, #12]
 80005a2:	f000 f82b 	bl	80005fc <_ZN12GPIO_Handler21GPIO_PeriClockControlEv>
	GPIO_Init();
 80005a6:	68f8      	ldr	r0, [r7, #12]
 80005a8:	f000 f8a2 	bl	80006f0 <_ZN12GPIO_Handler9GPIO_InitEv>
	// Configure interrupt
	if(GPIO_PinMode >= GPIO_MODE_IT_FT) {
 80005ac:	79bb      	ldrb	r3, [r7, #6]
 80005ae:	2b03      	cmp	r3, #3
 80005b0:	d912      	bls.n	80005d8 <_ZN12GPIO_HandlerC1EP13GPIO_RegDef_thhhhhhh+0x8c>
		uint8_t IRQ_number = get_irq_pinNum(GPIO_PinNumber);
 80005b2:	79fb      	ldrb	r3, [r7, #7]
 80005b4:	4618      	mov	r0, r3
 80005b6:	f000 fb62 	bl	8000c7e <_ZL14get_irq_pinNumh>
 80005ba:	4603      	mov	r3, r0
 80005bc:	75fb      	strb	r3, [r7, #23]
		GPIO_IRQInterruptConfig(IRQ_number, ENABLE);
 80005be:	7dfb      	ldrb	r3, [r7, #23]
 80005c0:	2201      	movs	r2, #1
 80005c2:	4619      	mov	r1, r3
 80005c4:	68f8      	ldr	r0, [r7, #12]
 80005c6:	f000 faa7 	bl	8000b18 <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh>
		GPIO_IRQPriorityConfig(IRQ_number, GPIO_IRQ_Priority);
 80005ca:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80005ce:	7dfb      	ldrb	r3, [r7, #23]
 80005d0:	4619      	mov	r1, r3
 80005d2:	68f8      	ldr	r0, [r7, #12]
 80005d4:	f000 fb24 	bl	8000c20 <_ZN12GPIO_Handler22GPIO_IRQPriorityConfigEhh>
	}
}
 80005d8:	68fb      	ldr	r3, [r7, #12]
 80005da:	4618      	mov	r0, r3
 80005dc:	3718      	adds	r7, #24
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}

080005e2 <_ZN12GPIO_HandlerD1Ev>:
 *
 * @return None
 *
 * @Node: Be careful when using many Peripheral device in the same PORT
 **********************************************************************/
GPIO_Handler::~GPIO_Handler() {
 80005e2:	b580      	push	{r7, lr}
 80005e4:	b082      	sub	sp, #8
 80005e6:	af00      	add	r7, sp, #0
 80005e8:	6078      	str	r0, [r7, #4]
	GPIO_DeInit();
 80005ea:	6878      	ldr	r0, [r7, #4]
 80005ec:	f000 f9d6 	bl	800099c <_ZN12GPIO_Handler11GPIO_DeInitEv>
}
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	4618      	mov	r0, r3
 80005f4:	3708      	adds	r7, #8
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}
	...

080005fc <_ZN12GPIO_Handler21GPIO_PeriClockControlEv>:

// peripheral clock setup
void GPIO_Handler::GPIO_PeriClockControl() {
 80005fc:	b480      	push	{r7}
 80005fe:	b083      	sub	sp, #12
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
	if (GPIOx_.pGPIOx == GPIOA) {
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	4a30      	ldr	r2, [pc, #192]	; (80006cc <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xd0>)
 800060a:	4293      	cmp	r3, r2
 800060c:	d106      	bne.n	800061c <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0x20>
		GPIOA_PCLK_EN();
 800060e:	4b30      	ldr	r3, [pc, #192]	; (80006d0 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xd4>)
 8000610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000612:	4a2f      	ldr	r2, [pc, #188]	; (80006d0 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xd4>)
 8000614:	f043 0301 	orr.w	r3, r3, #1
 8000618:	6313      	str	r3, [r2, #48]	; 0x30
	} else if (GPIOx_.pGPIOx == GPIOG) {
		GPIOG_PCLK_EN();
	} else if (GPIOx_.pGPIOx == GPIOH) {
		GPIOH_PCLK_EN();
	}
}
 800061a:	e052      	b.n	80006c2 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xc6>
	} else if (GPIOx_.pGPIOx == GPIOB) {
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	4a2c      	ldr	r2, [pc, #176]	; (80006d4 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xd8>)
 8000622:	4293      	cmp	r3, r2
 8000624:	d106      	bne.n	8000634 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0x38>
		GPIOB_PCLK_EN();
 8000626:	4b2a      	ldr	r3, [pc, #168]	; (80006d0 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xd4>)
 8000628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062a:	4a29      	ldr	r2, [pc, #164]	; (80006d0 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xd4>)
 800062c:	f043 0302 	orr.w	r3, r3, #2
 8000630:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000632:	e046      	b.n	80006c2 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xc6>
	} else if (GPIOx_.pGPIOx == GPIOC) {
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	4a27      	ldr	r2, [pc, #156]	; (80006d8 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xdc>)
 800063a:	4293      	cmp	r3, r2
 800063c:	d106      	bne.n	800064c <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0x50>
		GPIOC_PCLK_EN();
 800063e:	4b24      	ldr	r3, [pc, #144]	; (80006d0 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xd4>)
 8000640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000642:	4a23      	ldr	r2, [pc, #140]	; (80006d0 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xd4>)
 8000644:	f043 0304 	orr.w	r3, r3, #4
 8000648:	6313      	str	r3, [r2, #48]	; 0x30
}
 800064a:	e03a      	b.n	80006c2 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xc6>
	} else if (GPIOx_.pGPIOx == GPIOD) {
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	4a22      	ldr	r2, [pc, #136]	; (80006dc <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xe0>)
 8000652:	4293      	cmp	r3, r2
 8000654:	d106      	bne.n	8000664 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0x68>
		GPIOD_PCLK_EN();
 8000656:	4b1e      	ldr	r3, [pc, #120]	; (80006d0 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xd4>)
 8000658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065a:	4a1d      	ldr	r2, [pc, #116]	; (80006d0 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xd4>)
 800065c:	f043 0308 	orr.w	r3, r3, #8
 8000660:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000662:	e02e      	b.n	80006c2 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xc6>
	} else if (GPIOx_.pGPIOx == GPIOE) {
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	4a1d      	ldr	r2, [pc, #116]	; (80006e0 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xe4>)
 800066a:	4293      	cmp	r3, r2
 800066c:	d106      	bne.n	800067c <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0x80>
		GPIOE_PCLK_EN();
 800066e:	4b18      	ldr	r3, [pc, #96]	; (80006d0 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xd4>)
 8000670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000672:	4a17      	ldr	r2, [pc, #92]	; (80006d0 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xd4>)
 8000674:	f043 0310 	orr.w	r3, r3, #16
 8000678:	6313      	str	r3, [r2, #48]	; 0x30
}
 800067a:	e022      	b.n	80006c2 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xc6>
	} else if (GPIOx_.pGPIOx == GPIOF) {
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	4a18      	ldr	r2, [pc, #96]	; (80006e4 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xe8>)
 8000682:	4293      	cmp	r3, r2
 8000684:	d106      	bne.n	8000694 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0x98>
		GPIOF_PCLK_EN();
 8000686:	4b12      	ldr	r3, [pc, #72]	; (80006d0 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xd4>)
 8000688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068a:	4a11      	ldr	r2, [pc, #68]	; (80006d0 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xd4>)
 800068c:	f043 0320 	orr.w	r3, r3, #32
 8000690:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000692:	e016      	b.n	80006c2 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xc6>
	} else if (GPIOx_.pGPIOx == GPIOG) {
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a13      	ldr	r2, [pc, #76]	; (80006e8 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xec>)
 800069a:	4293      	cmp	r3, r2
 800069c:	d106      	bne.n	80006ac <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xb0>
		GPIOG_PCLK_EN();
 800069e:	4b0c      	ldr	r3, [pc, #48]	; (80006d0 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xd4>)
 80006a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a2:	4a0b      	ldr	r2, [pc, #44]	; (80006d0 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xd4>)
 80006a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006a8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80006aa:	e00a      	b.n	80006c2 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xc6>
	} else if (GPIOx_.pGPIOx == GPIOH) {
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	4a0e      	ldr	r2, [pc, #56]	; (80006ec <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xf0>)
 80006b2:	4293      	cmp	r3, r2
 80006b4:	d105      	bne.n	80006c2 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xc6>
		GPIOH_PCLK_EN();
 80006b6:	4b06      	ldr	r3, [pc, #24]	; (80006d0 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xd4>)
 80006b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ba:	4a05      	ldr	r2, [pc, #20]	; (80006d0 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xd4>)
 80006bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006c0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80006c2:	bf00      	nop
 80006c4:	370c      	adds	r7, #12
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bc80      	pop	{r7}
 80006ca:	4770      	bx	lr
 80006cc:	40020000 	.word	0x40020000
 80006d0:	40023800 	.word	0x40023800
 80006d4:	40020400 	.word	0x40020400
 80006d8:	40020800 	.word	0x40020800
 80006dc:	40020c00 	.word	0x40020c00
 80006e0:	40021000 	.word	0x40021000
 80006e4:	40021400 	.word	0x40021400
 80006e8:	40021800 	.word	0x40021800
 80006ec:	40021c00 	.word	0x40021c00

080006f0 <_ZN12GPIO_Handler9GPIO_InitEv>:
 *
 * @param None
 *
 * @return None
 **********************************************************************/
void GPIO_Handler::GPIO_Init() {
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b086      	sub	sp, #24
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
	uint32_t temp = 0;
 80006f8:	2300      	movs	r3, #0
 80006fa:	617b      	str	r3, [r7, #20]
	// 1. configure the mode of gpio pin
	if(GPIOx_.GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG) {
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	795b      	ldrb	r3, [r3, #5]
 8000700:	2b03      	cmp	r3, #3
 8000702:	d820      	bhi.n	8000746 <_ZN12GPIO_Handler9GPIO_InitEv+0x56>
		// the non interrupt mode
		temp = GPIOx_.GPIO_PinConfig.GPIO_PinMode << (2 * GPIOx_.GPIO_PinConfig.GPIO_PinNumber);
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	795b      	ldrb	r3, [r3, #5]
 8000708:	461a      	mov	r2, r3
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	791b      	ldrb	r3, [r3, #4]
 800070e:	005b      	lsls	r3, r3, #1
 8000710:	fa02 f303 	lsl.w	r3, r2, r3
 8000714:	617b      	str	r3, [r7, #20]
		GPIOx_.pGPIOx->MODER &= ~(0x3 << (2 * GPIOx_.GPIO_PinConfig.GPIO_PinNumber)); // clearing
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	681a      	ldr	r2, [r3, #0]
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	791b      	ldrb	r3, [r3, #4]
 8000720:	005b      	lsls	r3, r3, #1
 8000722:	2103      	movs	r1, #3
 8000724:	fa01 f303 	lsl.w	r3, r1, r3
 8000728:	43db      	mvns	r3, r3
 800072a:	4619      	mov	r1, r3
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	400a      	ands	r2, r1
 8000732:	601a      	str	r2, [r3, #0]
		GPIOx_.pGPIOx->MODER |= temp;
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	6819      	ldr	r1, [r3, #0]
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	697a      	ldr	r2, [r7, #20]
 8000740:	430a      	orrs	r2, r1
 8000742:	601a      	str	r2, [r3, #0]
 8000744:	e083      	b.n	800084e <_ZN12GPIO_Handler9GPIO_InitEv+0x15e>
	}
	else {
		// interrupt mode
		if(GPIO_MODE_IT_FT == GPIOx_.GPIO_PinConfig.GPIO_PinMode) {
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	795b      	ldrb	r3, [r3, #5]
 800074a:	2b04      	cmp	r3, #4
 800074c:	d117      	bne.n	800077e <_ZN12GPIO_Handler9GPIO_InitEv+0x8e>
			// 1. configure the FTSR
			EXTI->FTSR |= (1 << GPIOx_.GPIO_PinConfig.GPIO_PinNumber);
 800074e:	4b90      	ldr	r3, [pc, #576]	; (8000990 <_ZN12GPIO_Handler9GPIO_InitEv+0x2a0>)
 8000750:	68db      	ldr	r3, [r3, #12]
 8000752:	687a      	ldr	r2, [r7, #4]
 8000754:	7912      	ldrb	r2, [r2, #4]
 8000756:	4611      	mov	r1, r2
 8000758:	2201      	movs	r2, #1
 800075a:	408a      	lsls	r2, r1
 800075c:	4611      	mov	r1, r2
 800075e:	4a8c      	ldr	r2, [pc, #560]	; (8000990 <_ZN12GPIO_Handler9GPIO_InitEv+0x2a0>)
 8000760:	430b      	orrs	r3, r1
 8000762:	60d3      	str	r3, [r2, #12]

			// clear the corresponding RTSR bit
			EXTI->RTSR &= ~(1 << GPIOx_.GPIO_PinConfig.GPIO_PinNumber);
 8000764:	4b8a      	ldr	r3, [pc, #552]	; (8000990 <_ZN12GPIO_Handler9GPIO_InitEv+0x2a0>)
 8000766:	689b      	ldr	r3, [r3, #8]
 8000768:	687a      	ldr	r2, [r7, #4]
 800076a:	7912      	ldrb	r2, [r2, #4]
 800076c:	4611      	mov	r1, r2
 800076e:	2201      	movs	r2, #1
 8000770:	408a      	lsls	r2, r1
 8000772:	43d2      	mvns	r2, r2
 8000774:	4611      	mov	r1, r2
 8000776:	4a86      	ldr	r2, [pc, #536]	; (8000990 <_ZN12GPIO_Handler9GPIO_InitEv+0x2a0>)
 8000778:	400b      	ands	r3, r1
 800077a:	6093      	str	r3, [r2, #8]
 800077c:	e035      	b.n	80007ea <_ZN12GPIO_Handler9GPIO_InitEv+0xfa>

		}
		else if (GPIO_MODE_IT_RT == GPIOx_.GPIO_PinConfig.GPIO_PinMode) {
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	795b      	ldrb	r3, [r3, #5]
 8000782:	2b05      	cmp	r3, #5
 8000784:	d117      	bne.n	80007b6 <_ZN12GPIO_Handler9GPIO_InitEv+0xc6>
			// 1. configure the RTSR
			EXTI->RTSR |= (1 << GPIOx_.GPIO_PinConfig.GPIO_PinNumber);
 8000786:	4b82      	ldr	r3, [pc, #520]	; (8000990 <_ZN12GPIO_Handler9GPIO_InitEv+0x2a0>)
 8000788:	689b      	ldr	r3, [r3, #8]
 800078a:	687a      	ldr	r2, [r7, #4]
 800078c:	7912      	ldrb	r2, [r2, #4]
 800078e:	4611      	mov	r1, r2
 8000790:	2201      	movs	r2, #1
 8000792:	408a      	lsls	r2, r1
 8000794:	4611      	mov	r1, r2
 8000796:	4a7e      	ldr	r2, [pc, #504]	; (8000990 <_ZN12GPIO_Handler9GPIO_InitEv+0x2a0>)
 8000798:	430b      	orrs	r3, r1
 800079a:	6093      	str	r3, [r2, #8]

			// clear the corresponding RTSR bit
			EXTI->FTSR &= ~(1 << GPIOx_.GPIO_PinConfig.GPIO_PinNumber);
 800079c:	4b7c      	ldr	r3, [pc, #496]	; (8000990 <_ZN12GPIO_Handler9GPIO_InitEv+0x2a0>)
 800079e:	68db      	ldr	r3, [r3, #12]
 80007a0:	687a      	ldr	r2, [r7, #4]
 80007a2:	7912      	ldrb	r2, [r2, #4]
 80007a4:	4611      	mov	r1, r2
 80007a6:	2201      	movs	r2, #1
 80007a8:	408a      	lsls	r2, r1
 80007aa:	43d2      	mvns	r2, r2
 80007ac:	4611      	mov	r1, r2
 80007ae:	4a78      	ldr	r2, [pc, #480]	; (8000990 <_ZN12GPIO_Handler9GPIO_InitEv+0x2a0>)
 80007b0:	400b      	ands	r3, r1
 80007b2:	60d3      	str	r3, [r2, #12]
 80007b4:	e019      	b.n	80007ea <_ZN12GPIO_Handler9GPIO_InitEv+0xfa>
		}
		else if (GPIO_MODE_IT_RFT == GPIOx_.GPIO_PinConfig.GPIO_PinMode) {
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	795b      	ldrb	r3, [r3, #5]
 80007ba:	2b06      	cmp	r3, #6
 80007bc:	d115      	bne.n	80007ea <_ZN12GPIO_Handler9GPIO_InitEv+0xfa>
			// 1. configure both FTSR and RTSR
			EXTI->FTSR |= (1 << GPIOx_.GPIO_PinConfig.GPIO_PinNumber);
 80007be:	4b74      	ldr	r3, [pc, #464]	; (8000990 <_ZN12GPIO_Handler9GPIO_InitEv+0x2a0>)
 80007c0:	68db      	ldr	r3, [r3, #12]
 80007c2:	687a      	ldr	r2, [r7, #4]
 80007c4:	7912      	ldrb	r2, [r2, #4]
 80007c6:	4611      	mov	r1, r2
 80007c8:	2201      	movs	r2, #1
 80007ca:	408a      	lsls	r2, r1
 80007cc:	4611      	mov	r1, r2
 80007ce:	4a70      	ldr	r2, [pc, #448]	; (8000990 <_ZN12GPIO_Handler9GPIO_InitEv+0x2a0>)
 80007d0:	430b      	orrs	r3, r1
 80007d2:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= (1 << GPIOx_.GPIO_PinConfig.GPIO_PinNumber);
 80007d4:	4b6e      	ldr	r3, [pc, #440]	; (8000990 <_ZN12GPIO_Handler9GPIO_InitEv+0x2a0>)
 80007d6:	689b      	ldr	r3, [r3, #8]
 80007d8:	687a      	ldr	r2, [r7, #4]
 80007da:	7912      	ldrb	r2, [r2, #4]
 80007dc:	4611      	mov	r1, r2
 80007de:	2201      	movs	r2, #1
 80007e0:	408a      	lsls	r2, r1
 80007e2:	4611      	mov	r1, r2
 80007e4:	4a6a      	ldr	r2, [pc, #424]	; (8000990 <_ZN12GPIO_Handler9GPIO_InitEv+0x2a0>)
 80007e6:	430b      	orrs	r3, r1
 80007e8:	6093      	str	r3, [r2, #8]
		}

		// 2. configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 = GPIOx_.GPIO_PinConfig.GPIO_PinNumber >> 2;
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	791b      	ldrb	r3, [r3, #4]
 80007ee:	109b      	asrs	r3, r3, #2
 80007f0:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = GPIOx_.GPIO_PinConfig.GPIO_PinNumber % 4;
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	791b      	ldrb	r3, [r3, #4]
 80007f6:	f003 0303 	and.w	r3, r3, #3
 80007fa:	74bb      	strb	r3, [r7, #18]
		uint8_t portCode = gpio_baseAddr_to_code(GPIOx_.pGPIOx);
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	4618      	mov	r0, r3
 8000802:	f7ff fe59 	bl	80004b8 <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t>
 8000806:	4603      	mov	r3, r0
 8000808:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 800080a:	4b62      	ldr	r3, [pc, #392]	; (8000994 <_ZN12GPIO_Handler9GPIO_InitEv+0x2a4>)
 800080c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800080e:	4a61      	ldr	r2, [pc, #388]	; (8000994 <_ZN12GPIO_Handler9GPIO_InitEv+0x2a4>)
 8000810:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000814:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[temp1] |= (portCode << (4 * temp2));
 8000816:	4a60      	ldr	r2, [pc, #384]	; (8000998 <_ZN12GPIO_Handler9GPIO_InitEv+0x2a8>)
 8000818:	7cfb      	ldrb	r3, [r7, #19]
 800081a:	3302      	adds	r3, #2
 800081c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000820:	7c79      	ldrb	r1, [r7, #17]
 8000822:	7cbb      	ldrb	r3, [r7, #18]
 8000824:	009b      	lsls	r3, r3, #2
 8000826:	fa01 f303 	lsl.w	r3, r1, r3
 800082a:	4618      	mov	r0, r3
 800082c:	495a      	ldr	r1, [pc, #360]	; (8000998 <_ZN12GPIO_Handler9GPIO_InitEv+0x2a8>)
 800082e:	7cfb      	ldrb	r3, [r7, #19]
 8000830:	4302      	orrs	r2, r0
 8000832:	3302      	adds	r3, #2
 8000834:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		// 3. Enable the exti interrupt delivery using IMR
		EXTI->IMR |= 1 << GPIOx_.GPIO_PinConfig.GPIO_PinNumber;
 8000838:	4b55      	ldr	r3, [pc, #340]	; (8000990 <_ZN12GPIO_Handler9GPIO_InitEv+0x2a0>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	687a      	ldr	r2, [r7, #4]
 800083e:	7912      	ldrb	r2, [r2, #4]
 8000840:	4611      	mov	r1, r2
 8000842:	2201      	movs	r2, #1
 8000844:	408a      	lsls	r2, r1
 8000846:	4611      	mov	r1, r2
 8000848:	4a51      	ldr	r2, [pc, #324]	; (8000990 <_ZN12GPIO_Handler9GPIO_InitEv+0x2a0>)
 800084a:	430b      	orrs	r3, r1
 800084c:	6013      	str	r3, [r2, #0]
	}

	temp = 0;
 800084e:	2300      	movs	r3, #0
 8000850:	617b      	str	r3, [r7, #20]
	// 2. configure the speed
	temp = GPIOx_.GPIO_PinConfig.GPIO_PinSpeed << (2 * GPIOx_.GPIO_PinConfig.GPIO_PinNumber);
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	799b      	ldrb	r3, [r3, #6]
 8000856:	461a      	mov	r2, r3
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	791b      	ldrb	r3, [r3, #4]
 800085c:	005b      	lsls	r3, r3, #1
 800085e:	fa02 f303 	lsl.w	r3, r2, r3
 8000862:	617b      	str	r3, [r7, #20]
	GPIOx_.pGPIOx->OSPEEDR &= ~(0x3 << (2 * GPIOx_.GPIO_PinConfig.GPIO_PinNumber)); // clearing
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	689a      	ldr	r2, [r3, #8]
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	791b      	ldrb	r3, [r3, #4]
 800086e:	005b      	lsls	r3, r3, #1
 8000870:	2103      	movs	r1, #3
 8000872:	fa01 f303 	lsl.w	r3, r1, r3
 8000876:	43db      	mvns	r3, r3
 8000878:	4619      	mov	r1, r3
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	400a      	ands	r2, r1
 8000880:	609a      	str	r2, [r3, #8]
	GPIOx_.pGPIOx->OSPEEDR |= temp;
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	6899      	ldr	r1, [r3, #8]
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	697a      	ldr	r2, [r7, #20]
 800088e:	430a      	orrs	r2, r1
 8000890:	609a      	str	r2, [r3, #8]

	temp = 0;
 8000892:	2300      	movs	r3, #0
 8000894:	617b      	str	r3, [r7, #20]
	// 3. configure the pupd settings
	temp = GPIOx_.GPIO_PinConfig.GPIO_PinPuPdControl << (2 * GPIOx_.GPIO_PinConfig.GPIO_PinNumber);
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	79db      	ldrb	r3, [r3, #7]
 800089a:	461a      	mov	r2, r3
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	791b      	ldrb	r3, [r3, #4]
 80008a0:	005b      	lsls	r3, r3, #1
 80008a2:	fa02 f303 	lsl.w	r3, r2, r3
 80008a6:	617b      	str	r3, [r7, #20]
	GPIOx_.pGPIOx->PUPDR &= ~(0x3 << (2 * GPIOx_.GPIO_PinConfig.GPIO_PinNumber));// clearing
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	68da      	ldr	r2, [r3, #12]
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	791b      	ldrb	r3, [r3, #4]
 80008b2:	005b      	lsls	r3, r3, #1
 80008b4:	2103      	movs	r1, #3
 80008b6:	fa01 f303 	lsl.w	r3, r1, r3
 80008ba:	43db      	mvns	r3, r3
 80008bc:	4619      	mov	r1, r3
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	400a      	ands	r2, r1
 80008c4:	60da      	str	r2, [r3, #12]
	GPIOx_.pGPIOx->PUPDR |= temp;
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	68d9      	ldr	r1, [r3, #12]
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	697a      	ldr	r2, [r7, #20]
 80008d2:	430a      	orrs	r2, r1
 80008d4:	60da      	str	r2, [r3, #12]

	temp = 0;
 80008d6:	2300      	movs	r3, #0
 80008d8:	617b      	str	r3, [r7, #20]
	// 4. configure the optype
	temp = GPIOx_.GPIO_PinConfig.GPIO_PinOPType << GPIOx_.GPIO_PinConfig.GPIO_PinNumber;
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	7a1b      	ldrb	r3, [r3, #8]
 80008de:	461a      	mov	r2, r3
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	791b      	ldrb	r3, [r3, #4]
 80008e4:	fa02 f303 	lsl.w	r3, r2, r3
 80008e8:	617b      	str	r3, [r7, #20]
	GPIOx_.pGPIOx->OTYPER &= ~(0x1 << GPIOx_.GPIO_PinConfig.GPIO_PinNumber); // clearing
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	685a      	ldr	r2, [r3, #4]
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	791b      	ldrb	r3, [r3, #4]
 80008f4:	4619      	mov	r1, r3
 80008f6:	2301      	movs	r3, #1
 80008f8:	408b      	lsls	r3, r1
 80008fa:	43db      	mvns	r3, r3
 80008fc:	4619      	mov	r1, r3
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	400a      	ands	r2, r1
 8000904:	605a      	str	r2, [r3, #4]
	GPIOx_.pGPIOx->OTYPER |= temp;
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	6859      	ldr	r1, [r3, #4]
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	697a      	ldr	r2, [r7, #20]
 8000912:	430a      	orrs	r2, r1
 8000914:	605a      	str	r2, [r3, #4]

	temp = 0;
 8000916:	2300      	movs	r3, #0
 8000918:	617b      	str	r3, [r7, #20]
	// 5. configure the alt functionality
	if(GPIOx_.GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN) {
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	795b      	ldrb	r3, [r3, #5]
 800091e:	2b02      	cmp	r3, #2
 8000920:	d131      	bne.n	8000986 <_ZN12GPIO_Handler9GPIO_InitEv+0x296>
		// configure alt function register
		uint8_t temp1, temp2;
		temp1 = GPIOx_.GPIO_PinConfig.GPIO_PinNumber / 8;
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	791b      	ldrb	r3, [r3, #4]
 8000926:	08db      	lsrs	r3, r3, #3
 8000928:	743b      	strb	r3, [r7, #16]
		temp2 = GPIOx_.GPIO_PinConfig.GPIO_PinNumber % 8;
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	791b      	ldrb	r3, [r3, #4]
 800092e:	f003 0307 	and.w	r3, r3, #7
 8000932:	73fb      	strb	r3, [r7, #15]
		GPIOx_.pGPIOx->AFR[temp1] &= ~(0xF << (4 * temp2));
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	7c3a      	ldrb	r2, [r7, #16]
 800093a:	3208      	adds	r2, #8
 800093c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000940:	7bfb      	ldrb	r3, [r7, #15]
 8000942:	009b      	lsls	r3, r3, #2
 8000944:	220f      	movs	r2, #15
 8000946:	fa02 f303 	lsl.w	r3, r2, r3
 800094a:	43db      	mvns	r3, r3
 800094c:	4618      	mov	r0, r3
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	7c3a      	ldrb	r2, [r7, #16]
 8000954:	4001      	ands	r1, r0
 8000956:	3208      	adds	r2, #8
 8000958:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		GPIOx_.pGPIOx->AFR[temp1] |= (GPIOx_.GPIO_PinConfig.GPIO_PinAltFunMode << (4 * temp2));
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	7c3a      	ldrb	r2, [r7, #16]
 8000962:	3208      	adds	r2, #8
 8000964:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	7a5b      	ldrb	r3, [r3, #9]
 800096c:	461a      	mov	r2, r3
 800096e:	7bfb      	ldrb	r3, [r7, #15]
 8000970:	009b      	lsls	r3, r3, #2
 8000972:	fa02 f303 	lsl.w	r3, r2, r3
 8000976:	4618      	mov	r0, r3
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	7c3a      	ldrb	r2, [r7, #16]
 800097e:	4301      	orrs	r1, r0
 8000980:	3208      	adds	r2, #8
 8000982:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
 8000986:	bf00      	nop
 8000988:	3718      	adds	r7, #24
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	40013c00 	.word	0x40013c00
 8000994:	40023800 	.word	0x40023800
 8000998:	40013800 	.word	0x40013800

0800099c <_ZN12GPIO_Handler11GPIO_DeInitEv>:
 *
 * @brief - Reset GPIO Port
 *
 * @return uint8, b'0000_000x
 */
void GPIO_Handler::GPIO_DeInit() {
 800099c:	b480      	push	{r7}
 800099e:	b083      	sub	sp, #12
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
	if(GPIOx_.pGPIOx == GPIOA) {
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	4a48      	ldr	r2, [pc, #288]	; (8000acc <_ZN12GPIO_Handler11GPIO_DeInitEv+0x130>)
 80009aa:	4293      	cmp	r3, r2
 80009ac:	d10c      	bne.n	80009c8 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x2c>
		GPIOA_REG_RESET();
 80009ae:	4b48      	ldr	r3, [pc, #288]	; (8000ad0 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 80009b0:	691b      	ldr	r3, [r3, #16]
 80009b2:	4a47      	ldr	r2, [pc, #284]	; (8000ad0 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 80009b4:	f043 0301 	orr.w	r3, r3, #1
 80009b8:	6113      	str	r3, [r2, #16]
 80009ba:	4b45      	ldr	r3, [pc, #276]	; (8000ad0 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 80009bc:	691b      	ldr	r3, [r3, #16]
 80009be:	4a44      	ldr	r2, [pc, #272]	; (8000ad0 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 80009c0:	f023 0301 	bic.w	r3, r3, #1
 80009c4:	6113      	str	r3, [r2, #16]
		GPIOG_REG_RESET();
	}
	else if (GPIOx_.pGPIOx == GPIOH) {
		GPIOH_REG_RESET();
	}
}
 80009c6:	e07c      	b.n	8000ac2 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x126>
	else if (GPIOx_.pGPIOx == GPIOB) {
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	4a41      	ldr	r2, [pc, #260]	; (8000ad4 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x138>)
 80009ce:	4293      	cmp	r3, r2
 80009d0:	d10c      	bne.n	80009ec <_ZN12GPIO_Handler11GPIO_DeInitEv+0x50>
		GPIOB_REG_RESET();
 80009d2:	4b3f      	ldr	r3, [pc, #252]	; (8000ad0 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 80009d4:	691b      	ldr	r3, [r3, #16]
 80009d6:	4a3e      	ldr	r2, [pc, #248]	; (8000ad0 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 80009d8:	f043 0302 	orr.w	r3, r3, #2
 80009dc:	6113      	str	r3, [r2, #16]
 80009de:	4b3c      	ldr	r3, [pc, #240]	; (8000ad0 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 80009e0:	691b      	ldr	r3, [r3, #16]
 80009e2:	4a3b      	ldr	r2, [pc, #236]	; (8000ad0 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 80009e4:	f023 0302 	bic.w	r3, r3, #2
 80009e8:	6113      	str	r3, [r2, #16]
}
 80009ea:	e06a      	b.n	8000ac2 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x126>
	else if (GPIOx_.pGPIOx == GPIOC) {
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	4a39      	ldr	r2, [pc, #228]	; (8000ad8 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x13c>)
 80009f2:	4293      	cmp	r3, r2
 80009f4:	d10c      	bne.n	8000a10 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x74>
		GPIOC_REG_RESET();
 80009f6:	4b36      	ldr	r3, [pc, #216]	; (8000ad0 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 80009f8:	691b      	ldr	r3, [r3, #16]
 80009fa:	4a35      	ldr	r2, [pc, #212]	; (8000ad0 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 80009fc:	f043 0304 	orr.w	r3, r3, #4
 8000a00:	6113      	str	r3, [r2, #16]
 8000a02:	4b33      	ldr	r3, [pc, #204]	; (8000ad0 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 8000a04:	691b      	ldr	r3, [r3, #16]
 8000a06:	4a32      	ldr	r2, [pc, #200]	; (8000ad0 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 8000a08:	f023 0304 	bic.w	r3, r3, #4
 8000a0c:	6113      	str	r3, [r2, #16]
}
 8000a0e:	e058      	b.n	8000ac2 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x126>
	else if (GPIOx_.pGPIOx == GPIOD) {
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	4a31      	ldr	r2, [pc, #196]	; (8000adc <_ZN12GPIO_Handler11GPIO_DeInitEv+0x140>)
 8000a16:	4293      	cmp	r3, r2
 8000a18:	d10c      	bne.n	8000a34 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x98>
		GPIOD_REG_RESET();
 8000a1a:	4b2d      	ldr	r3, [pc, #180]	; (8000ad0 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 8000a1c:	691b      	ldr	r3, [r3, #16]
 8000a1e:	4a2c      	ldr	r2, [pc, #176]	; (8000ad0 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 8000a20:	f043 0308 	orr.w	r3, r3, #8
 8000a24:	6113      	str	r3, [r2, #16]
 8000a26:	4b2a      	ldr	r3, [pc, #168]	; (8000ad0 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 8000a28:	691b      	ldr	r3, [r3, #16]
 8000a2a:	4a29      	ldr	r2, [pc, #164]	; (8000ad0 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 8000a2c:	f023 0308 	bic.w	r3, r3, #8
 8000a30:	6113      	str	r3, [r2, #16]
}
 8000a32:	e046      	b.n	8000ac2 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x126>
	else if (GPIOx_.pGPIOx == GPIOE) {
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	4a29      	ldr	r2, [pc, #164]	; (8000ae0 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x144>)
 8000a3a:	4293      	cmp	r3, r2
 8000a3c:	d10c      	bne.n	8000a58 <_ZN12GPIO_Handler11GPIO_DeInitEv+0xbc>
		GPIOE_REG_RESET();
 8000a3e:	4b24      	ldr	r3, [pc, #144]	; (8000ad0 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 8000a40:	691b      	ldr	r3, [r3, #16]
 8000a42:	4a23      	ldr	r2, [pc, #140]	; (8000ad0 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 8000a44:	f043 0310 	orr.w	r3, r3, #16
 8000a48:	6113      	str	r3, [r2, #16]
 8000a4a:	4b21      	ldr	r3, [pc, #132]	; (8000ad0 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 8000a4c:	691b      	ldr	r3, [r3, #16]
 8000a4e:	4a20      	ldr	r2, [pc, #128]	; (8000ad0 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 8000a50:	f023 0310 	bic.w	r3, r3, #16
 8000a54:	6113      	str	r3, [r2, #16]
}
 8000a56:	e034      	b.n	8000ac2 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x126>
	else if (GPIOx_.pGPIOx == GPIOF) {
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	4a21      	ldr	r2, [pc, #132]	; (8000ae4 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x148>)
 8000a5e:	4293      	cmp	r3, r2
 8000a60:	d10c      	bne.n	8000a7c <_ZN12GPIO_Handler11GPIO_DeInitEv+0xe0>
		GPIOF_REG_RESET();
 8000a62:	4b1b      	ldr	r3, [pc, #108]	; (8000ad0 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 8000a64:	691b      	ldr	r3, [r3, #16]
 8000a66:	4a1a      	ldr	r2, [pc, #104]	; (8000ad0 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 8000a68:	f043 0320 	orr.w	r3, r3, #32
 8000a6c:	6113      	str	r3, [r2, #16]
 8000a6e:	4b18      	ldr	r3, [pc, #96]	; (8000ad0 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 8000a70:	691b      	ldr	r3, [r3, #16]
 8000a72:	4a17      	ldr	r2, [pc, #92]	; (8000ad0 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 8000a74:	f023 0320 	bic.w	r3, r3, #32
 8000a78:	6113      	str	r3, [r2, #16]
}
 8000a7a:	e022      	b.n	8000ac2 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x126>
	else if (GPIOx_.pGPIOx == GPIOG) {
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	4a19      	ldr	r2, [pc, #100]	; (8000ae8 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x14c>)
 8000a82:	4293      	cmp	r3, r2
 8000a84:	d10c      	bne.n	8000aa0 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x104>
		GPIOG_REG_RESET();
 8000a86:	4b12      	ldr	r3, [pc, #72]	; (8000ad0 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 8000a88:	691b      	ldr	r3, [r3, #16]
 8000a8a:	4a11      	ldr	r2, [pc, #68]	; (8000ad0 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 8000a8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a90:	6113      	str	r3, [r2, #16]
 8000a92:	4b0f      	ldr	r3, [pc, #60]	; (8000ad0 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 8000a94:	691b      	ldr	r3, [r3, #16]
 8000a96:	4a0e      	ldr	r2, [pc, #56]	; (8000ad0 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 8000a98:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000a9c:	6113      	str	r3, [r2, #16]
}
 8000a9e:	e010      	b.n	8000ac2 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x126>
	else if (GPIOx_.pGPIOx == GPIOH) {
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	4a11      	ldr	r2, [pc, #68]	; (8000aec <_ZN12GPIO_Handler11GPIO_DeInitEv+0x150>)
 8000aa6:	4293      	cmp	r3, r2
 8000aa8:	d10b      	bne.n	8000ac2 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x126>
		GPIOH_REG_RESET();
 8000aaa:	4b09      	ldr	r3, [pc, #36]	; (8000ad0 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 8000aac:	691b      	ldr	r3, [r3, #16]
 8000aae:	4a08      	ldr	r2, [pc, #32]	; (8000ad0 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 8000ab0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ab4:	6113      	str	r3, [r2, #16]
 8000ab6:	4b06      	ldr	r3, [pc, #24]	; (8000ad0 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 8000ab8:	691b      	ldr	r3, [r3, #16]
 8000aba:	4a05      	ldr	r2, [pc, #20]	; (8000ad0 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 8000abc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000ac0:	6113      	str	r3, [r2, #16]
}
 8000ac2:	bf00      	nop
 8000ac4:	370c      	adds	r7, #12
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bc80      	pop	{r7}
 8000aca:	4770      	bx	lr
 8000acc:	40020000 	.word	0x40020000
 8000ad0:	40023800 	.word	0x40023800
 8000ad4:	40020400 	.word	0x40020400
 8000ad8:	40020800 	.word	0x40020800
 8000adc:	40020c00 	.word	0x40020c00
 8000ae0:	40021000 	.word	0x40021000
 8000ae4:	40021400 	.word	0x40021400
 8000ae8:	40021800 	.word	0x40021800
 8000aec:	40021c00 	.word	0x40021c00

08000af0 <_ZNK12GPIO_Handler21GPIO_ReadFromInputPinEv>:
 *
 * @brief - Read single bit in Pin
 *
 * @return uint8, b'0000_000x
 */
uint8_t GPIO_Handler::GPIO_ReadFromInputPin() const {
 8000af0:	b480      	push	{r7}
 8000af2:	b085      	sub	sp, #20
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
	uint8_t value;
	value = (uint8_t)((GPIOx_.pGPIOx->IDR >> GPIOx_.GPIO_PinConfig.GPIO_PinNumber) & 0x00000001);
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	691b      	ldr	r3, [r3, #16]
 8000afe:	687a      	ldr	r2, [r7, #4]
 8000b00:	7912      	ldrb	r2, [r2, #4]
 8000b02:	40d3      	lsrs	r3, r2
 8000b04:	b2db      	uxtb	r3, r3
 8000b06:	f003 0301 	and.w	r3, r3, #1
 8000b0a:	73fb      	strb	r3, [r7, #15]
	return value;
 8000b0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b0e:	4618      	mov	r0, r3
 8000b10:	3714      	adds	r7, #20
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bc80      	pop	{r7}
 8000b16:	4770      	bx	lr

08000b18 <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh>:
 * @param[in] IRQNumber     - IRQNumber IRQ Position number
 * @param[in] EnorDi		- Enable/Disable Flag
 *
 * @return None
 */
void GPIO_Handler::GPIO_IRQInterruptConfig(const uint8_t IRQNumber, const uint8_t EnorDi) {
 8000b18:	b480      	push	{r7}
 8000b1a:	b083      	sub	sp, #12
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
 8000b20:	460b      	mov	r3, r1
 8000b22:	70fb      	strb	r3, [r7, #3]
 8000b24:	4613      	mov	r3, r2
 8000b26:	70bb      	strb	r3, [r7, #2]
	if(EnorDi == ENABLE) {
 8000b28:	78bb      	ldrb	r3, [r7, #2]
 8000b2a:	2b01      	cmp	r3, #1
 8000b2c:	d133      	bne.n	8000b96 <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0x7e>
		if (IRQNumber <= 31) {
 8000b2e:	78fb      	ldrb	r3, [r7, #3]
 8000b30:	2b1f      	cmp	r3, #31
 8000b32:	d80a      	bhi.n	8000b4a <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0x32>
			//	program ISER0 register
			*NVIC_ISER0 |= (1 << IRQNumber);
 8000b34:	4b34      	ldr	r3, [pc, #208]	; (8000c08 <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0xf0>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	78fa      	ldrb	r2, [r7, #3]
 8000b3a:	2101      	movs	r1, #1
 8000b3c:	fa01 f202 	lsl.w	r2, r1, r2
 8000b40:	4611      	mov	r1, r2
 8000b42:	4a31      	ldr	r2, [pc, #196]	; (8000c08 <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0xf0>)
 8000b44:	430b      	orrs	r3, r1
 8000b46:	6013      	str	r3, [r2, #0]
			// program ICE2 register
			*NVIC_ICER2 |= (1 << (IRQNumber % 64));
		}
	}

}
 8000b48:	e059      	b.n	8000bfe <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0xe6>
		} else if (IRQNumber > 31 && IRQNumber < 64) {
 8000b4a:	78fb      	ldrb	r3, [r7, #3]
 8000b4c:	2b1f      	cmp	r3, #31
 8000b4e:	d90f      	bls.n	8000b70 <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0x58>
 8000b50:	78fb      	ldrb	r3, [r7, #3]
 8000b52:	2b3f      	cmp	r3, #63	; 0x3f
 8000b54:	d80c      	bhi.n	8000b70 <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0x58>
			*NVIC_ISER1 |= (1 << (IRQNumber % 32));
 8000b56:	4b2d      	ldr	r3, [pc, #180]	; (8000c0c <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0xf4>)
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	78fa      	ldrb	r2, [r7, #3]
 8000b5c:	f002 021f 	and.w	r2, r2, #31
 8000b60:	2101      	movs	r1, #1
 8000b62:	fa01 f202 	lsl.w	r2, r1, r2
 8000b66:	4611      	mov	r1, r2
 8000b68:	4a28      	ldr	r2, [pc, #160]	; (8000c0c <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0xf4>)
 8000b6a:	430b      	orrs	r3, r1
 8000b6c:	6013      	str	r3, [r2, #0]
 8000b6e:	e046      	b.n	8000bfe <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0xe6>
		} else if (IRQNumber >= 64 && IRQNumber < 96) {
 8000b70:	78fb      	ldrb	r3, [r7, #3]
 8000b72:	2b3f      	cmp	r3, #63	; 0x3f
 8000b74:	d943      	bls.n	8000bfe <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0xe6>
 8000b76:	78fb      	ldrb	r3, [r7, #3]
 8000b78:	2b5f      	cmp	r3, #95	; 0x5f
 8000b7a:	d840      	bhi.n	8000bfe <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0xe6>
			*NVIC_ISER2 |= (1 << (IRQNumber % 64));
 8000b7c:	4b24      	ldr	r3, [pc, #144]	; (8000c10 <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0xf8>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	78fa      	ldrb	r2, [r7, #3]
 8000b82:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000b86:	2101      	movs	r1, #1
 8000b88:	fa01 f202 	lsl.w	r2, r1, r2
 8000b8c:	4611      	mov	r1, r2
 8000b8e:	4a20      	ldr	r2, [pc, #128]	; (8000c10 <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0xf8>)
 8000b90:	430b      	orrs	r3, r1
 8000b92:	6013      	str	r3, [r2, #0]
}
 8000b94:	e033      	b.n	8000bfe <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0xe6>
		if (IRQNumber <= 31) {
 8000b96:	78fb      	ldrb	r3, [r7, #3]
 8000b98:	2b1f      	cmp	r3, #31
 8000b9a:	d80a      	bhi.n	8000bb2 <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0x9a>
			*NVIC_ICER0 |= (1 << IRQNumber);
 8000b9c:	4b1d      	ldr	r3, [pc, #116]	; (8000c14 <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0xfc>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	78fa      	ldrb	r2, [r7, #3]
 8000ba2:	2101      	movs	r1, #1
 8000ba4:	fa01 f202 	lsl.w	r2, r1, r2
 8000ba8:	4611      	mov	r1, r2
 8000baa:	4a1a      	ldr	r2, [pc, #104]	; (8000c14 <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0xfc>)
 8000bac:	430b      	orrs	r3, r1
 8000bae:	6013      	str	r3, [r2, #0]
}
 8000bb0:	e025      	b.n	8000bfe <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0xe6>
		} else if (IRQNumber > 31 && IRQNumber < 64) {
 8000bb2:	78fb      	ldrb	r3, [r7, #3]
 8000bb4:	2b1f      	cmp	r3, #31
 8000bb6:	d90f      	bls.n	8000bd8 <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0xc0>
 8000bb8:	78fb      	ldrb	r3, [r7, #3]
 8000bba:	2b3f      	cmp	r3, #63	; 0x3f
 8000bbc:	d80c      	bhi.n	8000bd8 <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0xc0>
			*NVIC_ICER1 |= (1 << (IRQNumber % 32));
 8000bbe:	4b16      	ldr	r3, [pc, #88]	; (8000c18 <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0x100>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	78fa      	ldrb	r2, [r7, #3]
 8000bc4:	f002 021f 	and.w	r2, r2, #31
 8000bc8:	2101      	movs	r1, #1
 8000bca:	fa01 f202 	lsl.w	r2, r1, r2
 8000bce:	4611      	mov	r1, r2
 8000bd0:	4a11      	ldr	r2, [pc, #68]	; (8000c18 <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0x100>)
 8000bd2:	430b      	orrs	r3, r1
 8000bd4:	6013      	str	r3, [r2, #0]
 8000bd6:	e012      	b.n	8000bfe <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0xe6>
		} else if (IRQNumber >= 64 && IRQNumber < 96) {
 8000bd8:	78fb      	ldrb	r3, [r7, #3]
 8000bda:	2b3f      	cmp	r3, #63	; 0x3f
 8000bdc:	d90f      	bls.n	8000bfe <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0xe6>
 8000bde:	78fb      	ldrb	r3, [r7, #3]
 8000be0:	2b5f      	cmp	r3, #95	; 0x5f
 8000be2:	d80c      	bhi.n	8000bfe <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0xe6>
			*NVIC_ICER2 |= (1 << (IRQNumber % 64));
 8000be4:	4b0d      	ldr	r3, [pc, #52]	; (8000c1c <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0x104>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	78fa      	ldrb	r2, [r7, #3]
 8000bea:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000bee:	2101      	movs	r1, #1
 8000bf0:	fa01 f202 	lsl.w	r2, r1, r2
 8000bf4:	4611      	mov	r1, r2
 8000bf6:	4a09      	ldr	r2, [pc, #36]	; (8000c1c <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0x104>)
 8000bf8:	430b      	orrs	r3, r1
 8000bfa:	6013      	str	r3, [r2, #0]
}
 8000bfc:	e7ff      	b.n	8000bfe <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0xe6>
 8000bfe:	bf00      	nop
 8000c00:	370c      	adds	r7, #12
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bc80      	pop	{r7}
 8000c06:	4770      	bx	lr
 8000c08:	e000e100 	.word	0xe000e100
 8000c0c:	e000e104 	.word	0xe000e104
 8000c10:	e000e108 	.word	0xe000e108
 8000c14:	e000e180 	.word	0xe000e180
 8000c18:	e000e184 	.word	0xe000e184
 8000c1c:	e000e188 	.word	0xe000e188

08000c20 <_ZN12GPIO_Handler22GPIO_IRQPriorityConfigEhh>:
 *
 * @param[in] IRQNumber: IRQ position for EXIT
 * @param[in] IRPriority: 0->15
 * @return None
 */
void GPIO_Handler::GPIO_IRQPriorityConfig(const uint8_t IRQNumber, const uint8_t IRQPriority) {
 8000c20:	b480      	push	{r7}
 8000c22:	b085      	sub	sp, #20
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
 8000c28:	460b      	mov	r3, r1
 8000c2a:	70fb      	strb	r3, [r7, #3]
 8000c2c:	4613      	mov	r3, r2
 8000c2e:	70bb      	strb	r3, [r7, #2]
	// 1. first lets find out the ipr register
	uint8_t iprx = IRQNumber >> 2;
 8000c30:	78fb      	ldrb	r3, [r7, #3]
 8000c32:	109b      	asrs	r3, r3, #2
 8000c34:	73fb      	strb	r3, [r7, #15]
	uint8_t iprx_section = IRQNumber % 4;
 8000c36:	78fb      	ldrb	r3, [r7, #3]
 8000c38:	f003 0303 	and.w	r3, r3, #3
 8000c3c:	73bb      	strb	r3, [r7, #14]
	uint8_t shift_amount = (8 * iprx_section) + (8 - NO_PR_BITS_IMPLEMENTED);
 8000c3e:	7bbb      	ldrb	r3, [r7, #14]
 8000c40:	00db      	lsls	r3, r3, #3
 8000c42:	b2db      	uxtb	r3, r3
 8000c44:	3304      	adds	r3, #4
 8000c46:	737b      	strb	r3, [r7, #13]

	*(NVIC_PR_BASE_ADDR + iprx) |= (IRQPriority << shift_amount);
 8000c48:	7bfb      	ldrb	r3, [r7, #15]
 8000c4a:	f103 5360 	add.w	r3, r3, #939524096	; 0x38000000
 8000c4e:	f503 5364 	add.w	r3, r3, #14592	; 0x3900
 8000c52:	009b      	lsls	r3, r3, #2
 8000c54:	681a      	ldr	r2, [r3, #0]
 8000c56:	78b9      	ldrb	r1, [r7, #2]
 8000c58:	7b7b      	ldrb	r3, [r7, #13]
 8000c5a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c5e:	4618      	mov	r0, r3
 8000c60:	7bfb      	ldrb	r3, [r7, #15]
 8000c62:	f103 5360 	add.w	r3, r3, #939524096	; 0x38000000
 8000c66:	f503 5364 	add.w	r3, r3, #14592	; 0x3900
 8000c6a:	009b      	lsls	r3, r3, #2
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	ea42 0300 	orr.w	r3, r2, r0
 8000c72:	600b      	str	r3, [r1, #0]
}
 8000c74:	bf00      	nop
 8000c76:	3714      	adds	r7, #20
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bc80      	pop	{r7}
 8000c7c:	4770      	bx	lr

08000c7e <_ZL14get_irq_pinNumh>:
    }

}


static inline uint8_t get_irq_pinNum(uint8_t PinNumber) {
 8000c7e:	b480      	push	{r7}
 8000c80:	b083      	sub	sp, #12
 8000c82:	af00      	add	r7, sp, #0
 8000c84:	4603      	mov	r3, r0
 8000c86:	71fb      	strb	r3, [r7, #7]
	return (PinNumber < 5) 	? PinNumber + 6 : \
		   (PinNumber < 10)	? IRQ_NO_EXTI9_5 : \
		   (PinNumber < 16) ? IRQ_NO_EXTI15_10 : 0;
 8000c88:	79fb      	ldrb	r3, [r7, #7]
 8000c8a:	2b04      	cmp	r3, #4
 8000c8c:	d803      	bhi.n	8000c96 <_ZL14get_irq_pinNumh+0x18>
 8000c8e:	79fb      	ldrb	r3, [r7, #7]
 8000c90:	3306      	adds	r3, #6
 8000c92:	b2db      	uxtb	r3, r3
 8000c94:	e00a      	b.n	8000cac <_ZL14get_irq_pinNumh+0x2e>
 8000c96:	79fb      	ldrb	r3, [r7, #7]
 8000c98:	2b09      	cmp	r3, #9
 8000c9a:	d906      	bls.n	8000caa <_ZL14get_irq_pinNumh+0x2c>
 8000c9c:	79fb      	ldrb	r3, [r7, #7]
 8000c9e:	2b0f      	cmp	r3, #15
 8000ca0:	d801      	bhi.n	8000ca6 <_ZL14get_irq_pinNumh+0x28>
 8000ca2:	2328      	movs	r3, #40	; 0x28
 8000ca4:	e002      	b.n	8000cac <_ZL14get_irq_pinNumh+0x2e>
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	e000      	b.n	8000cac <_ZL14get_irq_pinNumh+0x2e>
 8000caa:	2317      	movs	r3, #23
}
 8000cac:	4618      	mov	r0, r3
 8000cae:	370c      	adds	r7, #12
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bc80      	pop	{r7}
 8000cb4:	4770      	bx	lr

08000cb6 <_ZN11SPI_HandlerC1EP12SPI_RegDef_thhhhhhh>:
/*********************************************************************
 * @class      		  - GPIO_Handler Constructor
 *
 * @brief             -
 **********************************************************************/
SPI_Handler::SPI_Handler(SPI_RegDef_t *SPIx_ADDR,
 8000cb6:	b580      	push	{r7, lr}
 8000cb8:	b084      	sub	sp, #16
 8000cba:	af00      	add	r7, sp, #0
 8000cbc:	60f8      	str	r0, [r7, #12]
 8000cbe:	60b9      	str	r1, [r7, #8]
 8000cc0:	4611      	mov	r1, r2
 8000cc2:	461a      	mov	r2, r3
 8000cc4:	460b      	mov	r3, r1
 8000cc6:	71fb      	strb	r3, [r7, #7]
 8000cc8:	4613      	mov	r3, r2
 8000cca:	71bb      	strb	r3, [r7, #6]
                         uint8_t BusConfig,
                         uint8_t SclkSpeed,
                         uint8_t DFF,
                         uint8_t CPOL,
                         uint8_t CPHA,
                         uint8_t SSM) {
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	4618      	mov	r0, r3
 8000cd0:	2320      	movs	r3, #32
 8000cd2:	461a      	mov	r2, r3
 8000cd4:	2100      	movs	r1, #0
 8000cd6:	f000 f9f3 	bl	80010c0 <memset>
    SPIx_.pSPIx = SPIx_ADDR;
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	68ba      	ldr	r2, [r7, #8]
 8000cde:	601a      	str	r2, [r3, #0]
    SPIx_.SPIConfig.SPI_DeviceMode = DeviceMode;
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	79fa      	ldrb	r2, [r7, #7]
 8000ce4:	711a      	strb	r2, [r3, #4]
    SPIx_.SPIConfig.SPI_BusConfig = BusConfig;
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	79ba      	ldrb	r2, [r7, #6]
 8000cea:	715a      	strb	r2, [r3, #5]
    SPIx_.SPIConfig.SPI_SclkSpeed = SclkSpeed;
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	7e3a      	ldrb	r2, [r7, #24]
 8000cf0:	719a      	strb	r2, [r3, #6]
    SPIx_.SPIConfig.SPI_DFF = DFF;
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	7f3a      	ldrb	r2, [r7, #28]
 8000cf6:	71da      	strb	r2, [r3, #7]
    SPIx_.SPIConfig.SPI_CPOL = CPOL;
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000cfe:	721a      	strb	r2, [r3, #8]
    SPIx_.SPIConfig.SPI_CPHA = CPHA;
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8000d06:	725a      	strb	r2, [r3, #9]
    SPIx_.SPIConfig.SPI_SSM = SSM;
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8000d0e:	729a      	strb	r2, [r3, #10]
    SPI_PeriClockControl();
 8000d10:	68f8      	ldr	r0, [r7, #12]
 8000d12:	f000 f80d 	bl	8000d30 <_ZN11SPI_Handler20SPI_PeriClockControlEv>
    SPI_Init();
 8000d16:	68f8      	ldr	r0, [r7, #12]
 8000d18:	f000 f84c 	bl	8000db4 <_ZN11SPI_Handler8SPI_InitEv>
//    SPI_SSIConfig(ENABLE);
    SPI_SSOEConfig(ENABLE);
 8000d1c:	2101      	movs	r1, #1
 8000d1e:	68f8      	ldr	r0, [r7, #12]
 8000d20:	f000 f919 	bl	8000f56 <_ZN11SPI_Handler14SPI_SSOEConfigEh>
    // Enable SPI peripheral
    //SPI_PeripheralControl(ENABLE);
}
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	4618      	mov	r0, r3
 8000d28:	3710      	adds	r7, #16
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
	...

08000d30 <_ZN11SPI_Handler20SPI_PeriClockControlEv>:
SPI_Handler::~SPI_Handler(){
	SPI_DeInit();
}

// peripheral clock setup
void SPI_Handler::SPI_PeriClockControl() {
 8000d30:	b480      	push	{r7}
 8000d32:	b083      	sub	sp, #12
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
	if (SPI1 == SPIx_.pSPIx) {
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	4a18      	ldr	r2, [pc, #96]	; (8000da0 <_ZN11SPI_Handler20SPI_PeriClockControlEv+0x70>)
 8000d3e:	4293      	cmp	r3, r2
 8000d40:	d106      	bne.n	8000d50 <_ZN11SPI_Handler20SPI_PeriClockControlEv+0x20>
		SPI1_PCLK_EN();
 8000d42:	4b18      	ldr	r3, [pc, #96]	; (8000da4 <_ZN11SPI_Handler20SPI_PeriClockControlEv+0x74>)
 8000d44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d46:	4a17      	ldr	r2, [pc, #92]	; (8000da4 <_ZN11SPI_Handler20SPI_PeriClockControlEv+0x74>)
 8000d48:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d4c:	6453      	str	r3, [r2, #68]	; 0x44
		SPI3_PCLK_EN();
	}
	else if (SPI4 == SPIx_.pSPIx) {
		SPI4_PCLK_EN();
	}
}
 8000d4e:	e022      	b.n	8000d96 <_ZN11SPI_Handler20SPI_PeriClockControlEv+0x66>
	else if (SPI2 == SPIx_.pSPIx) {
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	4a14      	ldr	r2, [pc, #80]	; (8000da8 <_ZN11SPI_Handler20SPI_PeriClockControlEv+0x78>)
 8000d56:	4293      	cmp	r3, r2
 8000d58:	d106      	bne.n	8000d68 <_ZN11SPI_Handler20SPI_PeriClockControlEv+0x38>
		SPI2_PCLK_EN();
 8000d5a:	4b12      	ldr	r3, [pc, #72]	; (8000da4 <_ZN11SPI_Handler20SPI_PeriClockControlEv+0x74>)
 8000d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d5e:	4a11      	ldr	r2, [pc, #68]	; (8000da4 <_ZN11SPI_Handler20SPI_PeriClockControlEv+0x74>)
 8000d60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d64:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000d66:	e016      	b.n	8000d96 <_ZN11SPI_Handler20SPI_PeriClockControlEv+0x66>
	else if (SPI3 == SPIx_.pSPIx) {
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	4a0f      	ldr	r2, [pc, #60]	; (8000dac <_ZN11SPI_Handler20SPI_PeriClockControlEv+0x7c>)
 8000d6e:	4293      	cmp	r3, r2
 8000d70:	d106      	bne.n	8000d80 <_ZN11SPI_Handler20SPI_PeriClockControlEv+0x50>
		SPI3_PCLK_EN();
 8000d72:	4b0c      	ldr	r3, [pc, #48]	; (8000da4 <_ZN11SPI_Handler20SPI_PeriClockControlEv+0x74>)
 8000d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d76:	4a0b      	ldr	r2, [pc, #44]	; (8000da4 <_ZN11SPI_Handler20SPI_PeriClockControlEv+0x74>)
 8000d78:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d7c:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000d7e:	e00a      	b.n	8000d96 <_ZN11SPI_Handler20SPI_PeriClockControlEv+0x66>
	else if (SPI4 == SPIx_.pSPIx) {
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	4a0a      	ldr	r2, [pc, #40]	; (8000db0 <_ZN11SPI_Handler20SPI_PeriClockControlEv+0x80>)
 8000d86:	4293      	cmp	r3, r2
 8000d88:	d105      	bne.n	8000d96 <_ZN11SPI_Handler20SPI_PeriClockControlEv+0x66>
		SPI4_PCLK_EN();
 8000d8a:	4b06      	ldr	r3, [pc, #24]	; (8000da4 <_ZN11SPI_Handler20SPI_PeriClockControlEv+0x74>)
 8000d8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d8e:	4a05      	ldr	r2, [pc, #20]	; (8000da4 <_ZN11SPI_Handler20SPI_PeriClockControlEv+0x74>)
 8000d90:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000d94:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000d96:	bf00      	nop
 8000d98:	370c      	adds	r7, #12
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bc80      	pop	{r7}
 8000d9e:	4770      	bx	lr
 8000da0:	40013000 	.word	0x40013000
 8000da4:	40023800 	.word	0x40023800
 8000da8:	40003800 	.word	0x40003800
 8000dac:	40003c00 	.word	0x40003c00
 8000db0:	40013400 	.word	0x40013400

08000db4 <_ZN11SPI_Handler8SPI_InitEv>:
 *
 * @param None
 *
 * @return None
 **********************************************************************/
void SPI_Handler::SPI_Init() {
 8000db4:	b480      	push	{r7}
 8000db6:	b085      	sub	sp, #20
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
    // Lets configure the SPI_CR1 register
    uint32_t tempReg = 0;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	60fb      	str	r3, [r7, #12]

    // 1. configure the deivce mode
    tempReg |= SPIx_.SPIConfig.SPI_DeviceMode << SPI_CR1_MSTR;
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	791b      	ldrb	r3, [r3, #4]
 8000dc4:	009b      	lsls	r3, r3, #2
 8000dc6:	461a      	mov	r2, r3
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	4313      	orrs	r3, r2
 8000dcc:	60fb      	str	r3, [r7, #12]
    // 2. configure the bus config
    if(SPI_BUS_CONFIG_FD == SPIx_.SPIConfig.SPI_BusConfig) {
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	795b      	ldrb	r3, [r3, #5]
 8000dd2:	2b01      	cmp	r3, #1
 8000dd4:	d104      	bne.n	8000de0 <_ZN11SPI_Handler8SPI_InitEv+0x2c>
        // bidi mode should be cleared
        tempReg &= ~(1 << SPI_CR1_BIDIMODE);
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000ddc:	60fb      	str	r3, [r7, #12]
 8000dde:	e018      	b.n	8000e12 <_ZN11SPI_Handler8SPI_InitEv+0x5e>
    }
    else if(SPI_BUS_CONFIG_HD == SPIx_.SPIConfig.SPI_BusConfig) {
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	795b      	ldrb	r3, [r3, #5]
 8000de4:	2b02      	cmp	r3, #2
 8000de6:	d108      	bne.n	8000dfa <_ZN11SPI_Handler8SPI_InitEv+0x46>
        // bidi mode should be set
        tempReg |= (1 << SPI_CR1_BIDIMODE);
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000dee:	60fb      	str	r3, [r7, #12]
        // bidioe mode should be set
        tempReg |= (1 << SPI_CR1_BIDIOE);
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000df6:	60fb      	str	r3, [r7, #12]
 8000df8:	e00b      	b.n	8000e12 <_ZN11SPI_Handler8SPI_InitEv+0x5e>
    }
    else if(SPI_BUS_CONFIG_SIMPLEX_RXONLY == SPIx_.SPIConfig.SPI_BusConfig) {
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	795b      	ldrb	r3, [r3, #5]
 8000dfe:	2b03      	cmp	r3, #3
 8000e00:	d107      	bne.n	8000e12 <_ZN11SPI_Handler8SPI_InitEv+0x5e>
        // bidi mode should be cleared, for active SCLK, because SLCK is only activate when MOSI is activate
        tempReg &= ~(1 << SPI_CR1_BIDIMODE);
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000e08:	60fb      	str	r3, [r7, #12]
        // RXONLY should be set
        tempReg |= (1 << SPI_CR1_RXONLY);
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e10:	60fb      	str	r3, [r7, #12]
    }

    // 3. configure for clock speed
    tempReg |= (SPIx_.SPIConfig.SPI_SclkSpeed << SPI_CR1_BR);
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	799b      	ldrb	r3, [r3, #6]
 8000e16:	00db      	lsls	r3, r3, #3
 8000e18:	461a      	mov	r2, r3
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	4313      	orrs	r3, r2
 8000e1e:	60fb      	str	r3, [r7, #12]

    // 4. configure for data format
    tempReg |= (SPIx_.SPIConfig.SPI_DFF << SPI_CR1_DFF);
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	79db      	ldrb	r3, [r3, #7]
 8000e24:	02db      	lsls	r3, r3, #11
 8000e26:	461a      	mov	r2, r3
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	4313      	orrs	r3, r2
 8000e2c:	60fb      	str	r3, [r7, #12]

    // 5. configure CPOL
    tempReg |= (SPIx_.SPIConfig.SPI_CPOL << SPI_CR1_CPOL);
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	7a1b      	ldrb	r3, [r3, #8]
 8000e32:	005b      	lsls	r3, r3, #1
 8000e34:	461a      	mov	r2, r3
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	4313      	orrs	r3, r2
 8000e3a:	60fb      	str	r3, [r7, #12]

    // 6. configure CPOA
    tempReg |= (SPIx_.SPIConfig.SPI_CPHA << SPI_CR1_CPHA);
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	7a5b      	ldrb	r3, [r3, #9]
 8000e40:	461a      	mov	r2, r3
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	4313      	orrs	r3, r2
 8000e46:	60fb      	str	r3, [r7, #12]

    tempReg |= (SPIx_.SPIConfig.SPI_SSM << SPI_CR1_SSM);
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	7a9b      	ldrb	r3, [r3, #10]
 8000e4c:	025b      	lsls	r3, r3, #9
 8000e4e:	461a      	mov	r2, r3
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	4313      	orrs	r3, r2
 8000e54:	60fb      	str	r3, [r7, #12]

    SPIx_.pSPIx->CR1 = tempReg;
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	68fa      	ldr	r2, [r7, #12]
 8000e5c:	601a      	str	r2, [r3, #0]
}
 8000e5e:	bf00      	nop
 8000e60:	3714      	adds	r7, #20
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bc80      	pop	{r7}
 8000e66:	4770      	bx	lr

08000e68 <_ZN11SPI_Handler21SPI_PeripheralControlEh>:
 *
 * @param None
 *
 * @return None
 **********************************************************************/
void SPI_Handler::SPI_PeripheralControl(uint8_t EnOrDi) {
 8000e68:	b480      	push	{r7}
 8000e6a:	b083      	sub	sp, #12
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
 8000e70:	460b      	mov	r3, r1
 8000e72:	70fb      	strb	r3, [r7, #3]
    if(ENABLE == EnOrDi) {
 8000e74:	78fb      	ldrb	r3, [r7, #3]
 8000e76:	2b01      	cmp	r3, #1
 8000e78:	d108      	bne.n	8000e8c <_ZN11SPI_Handler21SPI_PeripheralControlEh+0x24>
        SPIx_.pSPIx->CR1 |= (1 << SPI_CR1_SPE);
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	681a      	ldr	r2, [r3, #0]
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000e88:	601a      	str	r2, [r3, #0]
    }
    else {
        SPIx_.pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
    }
}
 8000e8a:	e007      	b.n	8000e9c <_ZN11SPI_Handler21SPI_PeripheralControlEh+0x34>
        SPIx_.pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	681a      	ldr	r2, [r3, #0]
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000e9a:	601a      	str	r2, [r3, #0]
}
 8000e9c:	bf00      	nop
 8000e9e:	370c      	adds	r7, #12
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bc80      	pop	{r7}
 8000ea4:	4770      	bx	lr

08000ea6 <_ZN11SPI_Handler17SPI_GetFlagStatusEh>:
 *
 * @param None
 *
 * @return None
 **********************************************************************/
uint8_t SPI_Handler::SPI_GetFlagStatus(uint8_t FlagName) {
 8000ea6:	b480      	push	{r7}
 8000ea8:	b083      	sub	sp, #12
 8000eaa:	af00      	add	r7, sp, #0
 8000eac:	6078      	str	r0, [r7, #4]
 8000eae:	460b      	mov	r3, r1
 8000eb0:	70fb      	strb	r3, [r7, #3]
    if(SPIx_.pSPIx->SR & FlagName) {
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	689a      	ldr	r2, [r3, #8]
 8000eb8:	78fb      	ldrb	r3, [r7, #3]
 8000eba:	4013      	ands	r3, r2
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	bf14      	ite	ne
 8000ec0:	2301      	movne	r3, #1
 8000ec2:	2300      	moveq	r3, #0
 8000ec4:	b2db      	uxtb	r3, r3
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d001      	beq.n	8000ece <_ZN11SPI_Handler17SPI_GetFlagStatusEh+0x28>
        return FLAG_SET;
 8000eca:	2301      	movs	r3, #1
 8000ecc:	e000      	b.n	8000ed0 <_ZN11SPI_Handler17SPI_GetFlagStatusEh+0x2a>
    }
    return FLAG_RESET;
 8000ece:	2300      	movs	r3, #0
}
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	370c      	adds	r7, #12
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bc80      	pop	{r7}
 8000ed8:	4770      	bx	lr

08000eda <_ZN11SPI_Handler12SPI_SendDataEPhm>:
 * @param None
 * @Node              - This is blocking call
 *
 * @return None
 **********************************************************************/
void SPI_Handler::SPI_SendData(uint8_t *pTxBuffer, uint32_t Len) {
 8000eda:	b580      	push	{r7, lr}
 8000edc:	b084      	sub	sp, #16
 8000ede:	af00      	add	r7, sp, #0
 8000ee0:	60f8      	str	r0, [r7, #12]
 8000ee2:	60b9      	str	r1, [r7, #8]
 8000ee4:	607a      	str	r2, [r7, #4]
    while(Len > 0) {
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d030      	beq.n	8000f4e <_ZN11SPI_Handler12SPI_SendDataEPhm+0x74>
        // 1. wait util tx buffer empty
        while(SPI_GetFlagStatus(SPI_TXE_FLAG) == FLAG_RESET);
 8000eec:	2102      	movs	r1, #2
 8000eee:	68f8      	ldr	r0, [r7, #12]
 8000ef0:	f7ff ffd9 	bl	8000ea6 <_ZN11SPI_Handler17SPI_GetFlagStatusEh>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	bf0c      	ite	eq
 8000efa:	2301      	moveq	r3, #1
 8000efc:	2300      	movne	r3, #0
 8000efe:	b2db      	uxtb	r3, r3
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d000      	beq.n	8000f06 <_ZN11SPI_Handler12SPI_SendDataEPhm+0x2c>
 8000f04:	e7f2      	b.n	8000eec <_ZN11SPI_Handler12SPI_SendDataEPhm+0x12>

        // 2. check the DFF bit in CR1
        if(SPIx_.pSPIx->CR1 & (1 << SPI_CR1_DFF)) {
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	bf14      	ite	ne
 8000f14:	2301      	movne	r3, #1
 8000f16:	2300      	moveq	r3, #0
 8000f18:	b2db      	uxtb	r3, r3
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d00b      	beq.n	8000f36 <_ZN11SPI_Handler12SPI_SendDataEPhm+0x5c>
            // 16 BIT DFF
            // 1. load the data into the DR
            SPIx_.pSPIx->DR = *((uint16_t *) pTxBuffer);
 8000f1e:	68bb      	ldr	r3, [r7, #8]
 8000f20:	881a      	ldrh	r2, [r3, #0]
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	60da      	str	r2, [r3, #12]
            Len -= 2;
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	3b02      	subs	r3, #2
 8000f2c:	607b      	str	r3, [r7, #4]
            (uint16_t *)pTxBuffer++;
 8000f2e:	68bb      	ldr	r3, [r7, #8]
 8000f30:	3301      	adds	r3, #1
 8000f32:	60bb      	str	r3, [r7, #8]
 8000f34:	e7d7      	b.n	8000ee6 <_ZN11SPI_Handler12SPI_SendDataEPhm+0xc>
        }
        else {
            SPIx_.pSPIx->DR = *pTxBuffer;
 8000f36:	68bb      	ldr	r3, [r7, #8]
 8000f38:	781a      	ldrb	r2, [r3, #0]
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	60da      	str	r2, [r3, #12]
            Len -= 1;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	3b01      	subs	r3, #1
 8000f44:	607b      	str	r3, [r7, #4]
            pTxBuffer++;
 8000f46:	68bb      	ldr	r3, [r7, #8]
 8000f48:	3301      	adds	r3, #1
 8000f4a:	60bb      	str	r3, [r7, #8]
    while(Len > 0) {
 8000f4c:	e7cb      	b.n	8000ee6 <_ZN11SPI_Handler12SPI_SendDataEPhm+0xc>
        }
    }
}
 8000f4e:	bf00      	nop
 8000f50:	3710      	adds	r7, #16
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}

08000f56 <_ZN11SPI_Handler14SPI_SSOEConfigEh>:
//	answer = SPIx_.pSPIx->DR;
//	return answer;
//}


void SPI_Handler::SPI_SSOEConfig(uint8_t EnOrDi) {
 8000f56:	b480      	push	{r7}
 8000f58:	b083      	sub	sp, #12
 8000f5a:	af00      	add	r7, sp, #0
 8000f5c:	6078      	str	r0, [r7, #4]
 8000f5e:	460b      	mov	r3, r1
 8000f60:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE) {
 8000f62:	78fb      	ldrb	r3, [r7, #3]
 8000f64:	2b01      	cmp	r3, #1
 8000f66:	d108      	bne.n	8000f7a <_ZN11SPI_Handler14SPI_SSOEConfigEh+0x24>
		SPIx_.pSPIx->CR2 |= (1 << SPI_CR2_SSOE);
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	685a      	ldr	r2, [r3, #4]
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	f042 0204 	orr.w	r2, r2, #4
 8000f76:	605a      	str	r2, [r3, #4]
	}
	else {
		SPIx_.pSPIx->CR2 &= ~(1 << SPI_CR2_SSOE);
	}
}
 8000f78:	e007      	b.n	8000f8a <_ZN11SPI_Handler14SPI_SSOEConfigEh+0x34>
		SPIx_.pSPIx->CR2 &= ~(1 << SPI_CR2_SSOE);
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	685a      	ldr	r2, [r3, #4]
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	f022 0204 	bic.w	r2, r2, #4
 8000f88:	605a      	str	r2, [r3, #4]
}
 8000f8a:	bf00      	nop
 8000f8c:	370c      	adds	r7, #12
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bc80      	pop	{r7}
 8000f92:	4770      	bx	lr

08000f94 <_ZN11SPI_Handler15SPI_ReceiveDataEPhm>:
    }
}


void SPI_Handler::SPI_ReceiveData(uint8_t *pRxBuffer, uint32_t Len)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b084      	sub	sp, #16
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	60f8      	str	r0, [r7, #12]
 8000f9c:	60b9      	str	r1, [r7, #8]
 8000f9e:	607a      	str	r2, [r7, #4]
	while(Len > 0)
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d035      	beq.n	8001012 <_ZN11SPI_Handler15SPI_ReceiveDataEPhm+0x7e>
		{
			//1. wait until RXNE is set
			while(SPI_GetFlagStatus(SPI_RXNE_FLAG)  == (uint8_t)FLAG_RESET );
 8000fa6:	2101      	movs	r1, #1
 8000fa8:	68f8      	ldr	r0, [r7, #12]
 8000faa:	f7ff ff7c 	bl	8000ea6 <_ZN11SPI_Handler17SPI_GetFlagStatusEh>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	bf0c      	ite	eq
 8000fb4:	2301      	moveq	r3, #1
 8000fb6:	2300      	movne	r3, #0
 8000fb8:	b2db      	uxtb	r3, r3
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d000      	beq.n	8000fc0 <_ZN11SPI_Handler15SPI_ReceiveDataEPhm+0x2c>
 8000fbe:	e7f2      	b.n	8000fa6 <_ZN11SPI_Handler15SPI_ReceiveDataEPhm+0x12>

			//2. check the DFF bit in CR1
			if( (SPIx_.pSPIx->CR1 & ( 1 << SPI_CR1_DFF) ) )
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	bf14      	ite	ne
 8000fce:	2301      	movne	r3, #1
 8000fd0:	2300      	moveq	r3, #0
 8000fd2:	b2db      	uxtb	r3, r3
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d00f      	beq.n	8000ff8 <_ZN11SPI_Handler15SPI_ReceiveDataEPhm+0x64>
			{
				//16 bit DFF
				//1. load the data from DR to Rxbuffer address
				 *((uint16_t*)pRxBuffer) = SPIx_.pSPIx->DR ;
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	68da      	ldr	r2, [r3, #12]
 8000fde:	68bb      	ldr	r3, [r7, #8]
 8000fe0:	b292      	uxth	r2, r2
 8000fe2:	801a      	strh	r2, [r3, #0]
				Len--;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	3b01      	subs	r3, #1
 8000fe8:	607b      	str	r3, [r7, #4]
				Len--;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	3b01      	subs	r3, #1
 8000fee:	607b      	str	r3, [r7, #4]
				(uint16_t*)pRxBuffer++;
 8000ff0:	68bb      	ldr	r3, [r7, #8]
 8000ff2:	3301      	adds	r3, #1
 8000ff4:	60bb      	str	r3, [r7, #8]
 8000ff6:	e7d3      	b.n	8000fa0 <_ZN11SPI_Handler15SPI_ReceiveDataEPhm+0xc>
			}else
			{
				//8 bit DFF
				*(pRxBuffer) = SPIx_.pSPIx->DR ;
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	68da      	ldr	r2, [r3, #12]
 8000ffe:	68bb      	ldr	r3, [r7, #8]
 8001000:	b2d2      	uxtb	r2, r2
 8001002:	701a      	strb	r2, [r3, #0]
				Len--;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	3b01      	subs	r3, #1
 8001008:	607b      	str	r3, [r7, #4]
				pRxBuffer++;
 800100a:	68bb      	ldr	r3, [r7, #8]
 800100c:	3301      	adds	r3, #1
 800100e:	60bb      	str	r3, [r7, #8]
	while(Len > 0)
 8001010:	e7c6      	b.n	8000fa0 <_ZN11SPI_Handler15SPI_ReceiveDataEPhm+0xc>
			}
		}

}
 8001012:	bf00      	nop
 8001014:	3710      	adds	r7, #16
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}

0800101a <_Znwj>:
 800101a:	b510      	push	{r4, lr}
 800101c:	2800      	cmp	r0, #0
 800101e:	bf14      	ite	ne
 8001020:	4604      	movne	r4, r0
 8001022:	2401      	moveq	r4, #1
 8001024:	4620      	mov	r0, r4
 8001026:	f000 f843 	bl	80010b0 <malloc>
 800102a:	b930      	cbnz	r0, 800103a <_Znwj+0x20>
 800102c:	f000 f806 	bl	800103c <_ZSt15get_new_handlerv>
 8001030:	b908      	cbnz	r0, 8001036 <_Znwj+0x1c>
 8001032:	f000 f80b 	bl	800104c <abort>
 8001036:	4780      	blx	r0
 8001038:	e7f4      	b.n	8001024 <_Znwj+0xa>
 800103a:	bd10      	pop	{r4, pc}

0800103c <_ZSt15get_new_handlerv>:
 800103c:	4b02      	ldr	r3, [pc, #8]	; (8001048 <_ZSt15get_new_handlerv+0xc>)
 800103e:	6818      	ldr	r0, [r3, #0]
 8001040:	f3bf 8f5b 	dmb	ish
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop
 8001048:	20000088 	.word	0x20000088

0800104c <abort>:
 800104c:	b508      	push	{r3, lr}
 800104e:	2006      	movs	r0, #6
 8001050:	f000 f8d0 	bl	80011f4 <raise>
 8001054:	2001      	movs	r0, #1
 8001056:	f7ff f9ce 	bl	80003f6 <_exit>
	...

0800105c <__errno>:
 800105c:	4b01      	ldr	r3, [pc, #4]	; (8001064 <__errno+0x8>)
 800105e:	6818      	ldr	r0, [r3, #0]
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	20000000 	.word	0x20000000

08001068 <__libc_init_array>:
 8001068:	b570      	push	{r4, r5, r6, lr}
 800106a:	4e0d      	ldr	r6, [pc, #52]	; (80010a0 <__libc_init_array+0x38>)
 800106c:	4c0d      	ldr	r4, [pc, #52]	; (80010a4 <__libc_init_array+0x3c>)
 800106e:	1ba4      	subs	r4, r4, r6
 8001070:	10a4      	asrs	r4, r4, #2
 8001072:	2500      	movs	r5, #0
 8001074:	42a5      	cmp	r5, r4
 8001076:	d109      	bne.n	800108c <__libc_init_array+0x24>
 8001078:	4e0b      	ldr	r6, [pc, #44]	; (80010a8 <__libc_init_array+0x40>)
 800107a:	4c0c      	ldr	r4, [pc, #48]	; (80010ac <__libc_init_array+0x44>)
 800107c:	f000 f8d8 	bl	8001230 <_init>
 8001080:	1ba4      	subs	r4, r4, r6
 8001082:	10a4      	asrs	r4, r4, #2
 8001084:	2500      	movs	r5, #0
 8001086:	42a5      	cmp	r5, r4
 8001088:	d105      	bne.n	8001096 <__libc_init_array+0x2e>
 800108a:	bd70      	pop	{r4, r5, r6, pc}
 800108c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001090:	4798      	blx	r3
 8001092:	3501      	adds	r5, #1
 8001094:	e7ee      	b.n	8001074 <__libc_init_array+0xc>
 8001096:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800109a:	4798      	blx	r3
 800109c:	3501      	adds	r5, #1
 800109e:	e7f2      	b.n	8001086 <__libc_init_array+0x1e>
 80010a0:	08001248 	.word	0x08001248
 80010a4:	08001248 	.word	0x08001248
 80010a8:	08001248 	.word	0x08001248
 80010ac:	0800124c 	.word	0x0800124c

080010b0 <malloc>:
 80010b0:	4b02      	ldr	r3, [pc, #8]	; (80010bc <malloc+0xc>)
 80010b2:	4601      	mov	r1, r0
 80010b4:	6818      	ldr	r0, [r3, #0]
 80010b6:	f000 b80b 	b.w	80010d0 <_malloc_r>
 80010ba:	bf00      	nop
 80010bc:	20000000 	.word	0x20000000

080010c0 <memset>:
 80010c0:	4402      	add	r2, r0
 80010c2:	4603      	mov	r3, r0
 80010c4:	4293      	cmp	r3, r2
 80010c6:	d100      	bne.n	80010ca <memset+0xa>
 80010c8:	4770      	bx	lr
 80010ca:	f803 1b01 	strb.w	r1, [r3], #1
 80010ce:	e7f9      	b.n	80010c4 <memset+0x4>

080010d0 <_malloc_r>:
 80010d0:	b570      	push	{r4, r5, r6, lr}
 80010d2:	1ccd      	adds	r5, r1, #3
 80010d4:	f025 0503 	bic.w	r5, r5, #3
 80010d8:	3508      	adds	r5, #8
 80010da:	2d0c      	cmp	r5, #12
 80010dc:	bf38      	it	cc
 80010de:	250c      	movcc	r5, #12
 80010e0:	2d00      	cmp	r5, #0
 80010e2:	4606      	mov	r6, r0
 80010e4:	db01      	blt.n	80010ea <_malloc_r+0x1a>
 80010e6:	42a9      	cmp	r1, r5
 80010e8:	d903      	bls.n	80010f2 <_malloc_r+0x22>
 80010ea:	230c      	movs	r3, #12
 80010ec:	6033      	str	r3, [r6, #0]
 80010ee:	2000      	movs	r0, #0
 80010f0:	bd70      	pop	{r4, r5, r6, pc}
 80010f2:	f000 f89b 	bl	800122c <__malloc_lock>
 80010f6:	4a21      	ldr	r2, [pc, #132]	; (800117c <_malloc_r+0xac>)
 80010f8:	6814      	ldr	r4, [r2, #0]
 80010fa:	4621      	mov	r1, r4
 80010fc:	b991      	cbnz	r1, 8001124 <_malloc_r+0x54>
 80010fe:	4c20      	ldr	r4, [pc, #128]	; (8001180 <_malloc_r+0xb0>)
 8001100:	6823      	ldr	r3, [r4, #0]
 8001102:	b91b      	cbnz	r3, 800110c <_malloc_r+0x3c>
 8001104:	4630      	mov	r0, r6
 8001106:	f000 f83d 	bl	8001184 <_sbrk_r>
 800110a:	6020      	str	r0, [r4, #0]
 800110c:	4629      	mov	r1, r5
 800110e:	4630      	mov	r0, r6
 8001110:	f000 f838 	bl	8001184 <_sbrk_r>
 8001114:	1c43      	adds	r3, r0, #1
 8001116:	d124      	bne.n	8001162 <_malloc_r+0x92>
 8001118:	230c      	movs	r3, #12
 800111a:	6033      	str	r3, [r6, #0]
 800111c:	4630      	mov	r0, r6
 800111e:	f000 f886 	bl	800122e <__malloc_unlock>
 8001122:	e7e4      	b.n	80010ee <_malloc_r+0x1e>
 8001124:	680b      	ldr	r3, [r1, #0]
 8001126:	1b5b      	subs	r3, r3, r5
 8001128:	d418      	bmi.n	800115c <_malloc_r+0x8c>
 800112a:	2b0b      	cmp	r3, #11
 800112c:	d90f      	bls.n	800114e <_malloc_r+0x7e>
 800112e:	600b      	str	r3, [r1, #0]
 8001130:	50cd      	str	r5, [r1, r3]
 8001132:	18cc      	adds	r4, r1, r3
 8001134:	4630      	mov	r0, r6
 8001136:	f000 f87a 	bl	800122e <__malloc_unlock>
 800113a:	f104 000b 	add.w	r0, r4, #11
 800113e:	1d23      	adds	r3, r4, #4
 8001140:	f020 0007 	bic.w	r0, r0, #7
 8001144:	1ac3      	subs	r3, r0, r3
 8001146:	d0d3      	beq.n	80010f0 <_malloc_r+0x20>
 8001148:	425a      	negs	r2, r3
 800114a:	50e2      	str	r2, [r4, r3]
 800114c:	e7d0      	b.n	80010f0 <_malloc_r+0x20>
 800114e:	428c      	cmp	r4, r1
 8001150:	684b      	ldr	r3, [r1, #4]
 8001152:	bf16      	itet	ne
 8001154:	6063      	strne	r3, [r4, #4]
 8001156:	6013      	streq	r3, [r2, #0]
 8001158:	460c      	movne	r4, r1
 800115a:	e7eb      	b.n	8001134 <_malloc_r+0x64>
 800115c:	460c      	mov	r4, r1
 800115e:	6849      	ldr	r1, [r1, #4]
 8001160:	e7cc      	b.n	80010fc <_malloc_r+0x2c>
 8001162:	1cc4      	adds	r4, r0, #3
 8001164:	f024 0403 	bic.w	r4, r4, #3
 8001168:	42a0      	cmp	r0, r4
 800116a:	d005      	beq.n	8001178 <_malloc_r+0xa8>
 800116c:	1a21      	subs	r1, r4, r0
 800116e:	4630      	mov	r0, r6
 8001170:	f000 f808 	bl	8001184 <_sbrk_r>
 8001174:	3001      	adds	r0, #1
 8001176:	d0cf      	beq.n	8001118 <_malloc_r+0x48>
 8001178:	6025      	str	r5, [r4, #0]
 800117a:	e7db      	b.n	8001134 <_malloc_r+0x64>
 800117c:	2000008c 	.word	0x2000008c
 8001180:	20000090 	.word	0x20000090

08001184 <_sbrk_r>:
 8001184:	b538      	push	{r3, r4, r5, lr}
 8001186:	4c06      	ldr	r4, [pc, #24]	; (80011a0 <_sbrk_r+0x1c>)
 8001188:	2300      	movs	r3, #0
 800118a:	4605      	mov	r5, r0
 800118c:	4608      	mov	r0, r1
 800118e:	6023      	str	r3, [r4, #0]
 8001190:	f7ff f93c 	bl	800040c <_sbrk>
 8001194:	1c43      	adds	r3, r0, #1
 8001196:	d102      	bne.n	800119e <_sbrk_r+0x1a>
 8001198:	6823      	ldr	r3, [r4, #0]
 800119a:	b103      	cbz	r3, 800119e <_sbrk_r+0x1a>
 800119c:	602b      	str	r3, [r5, #0]
 800119e:	bd38      	pop	{r3, r4, r5, pc}
 80011a0:	20000094 	.word	0x20000094

080011a4 <_raise_r>:
 80011a4:	291f      	cmp	r1, #31
 80011a6:	b538      	push	{r3, r4, r5, lr}
 80011a8:	4604      	mov	r4, r0
 80011aa:	460d      	mov	r5, r1
 80011ac:	d904      	bls.n	80011b8 <_raise_r+0x14>
 80011ae:	2316      	movs	r3, #22
 80011b0:	6003      	str	r3, [r0, #0]
 80011b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80011b6:	bd38      	pop	{r3, r4, r5, pc}
 80011b8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80011ba:	b112      	cbz	r2, 80011c2 <_raise_r+0x1e>
 80011bc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80011c0:	b94b      	cbnz	r3, 80011d6 <_raise_r+0x32>
 80011c2:	4620      	mov	r0, r4
 80011c4:	f000 f830 	bl	8001228 <_getpid_r>
 80011c8:	462a      	mov	r2, r5
 80011ca:	4601      	mov	r1, r0
 80011cc:	4620      	mov	r0, r4
 80011ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80011d2:	f000 b817 	b.w	8001204 <_kill_r>
 80011d6:	2b01      	cmp	r3, #1
 80011d8:	d00a      	beq.n	80011f0 <_raise_r+0x4c>
 80011da:	1c59      	adds	r1, r3, #1
 80011dc:	d103      	bne.n	80011e6 <_raise_r+0x42>
 80011de:	2316      	movs	r3, #22
 80011e0:	6003      	str	r3, [r0, #0]
 80011e2:	2001      	movs	r0, #1
 80011e4:	e7e7      	b.n	80011b6 <_raise_r+0x12>
 80011e6:	2400      	movs	r4, #0
 80011e8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80011ec:	4628      	mov	r0, r5
 80011ee:	4798      	blx	r3
 80011f0:	2000      	movs	r0, #0
 80011f2:	e7e0      	b.n	80011b6 <_raise_r+0x12>

080011f4 <raise>:
 80011f4:	4b02      	ldr	r3, [pc, #8]	; (8001200 <raise+0xc>)
 80011f6:	4601      	mov	r1, r0
 80011f8:	6818      	ldr	r0, [r3, #0]
 80011fa:	f7ff bfd3 	b.w	80011a4 <_raise_r>
 80011fe:	bf00      	nop
 8001200:	20000000 	.word	0x20000000

08001204 <_kill_r>:
 8001204:	b538      	push	{r3, r4, r5, lr}
 8001206:	4c07      	ldr	r4, [pc, #28]	; (8001224 <_kill_r+0x20>)
 8001208:	2300      	movs	r3, #0
 800120a:	4605      	mov	r5, r0
 800120c:	4608      	mov	r0, r1
 800120e:	4611      	mov	r1, r2
 8001210:	6023      	str	r3, [r4, #0]
 8001212:	f7ff f8e0 	bl	80003d6 <_kill>
 8001216:	1c43      	adds	r3, r0, #1
 8001218:	d102      	bne.n	8001220 <_kill_r+0x1c>
 800121a:	6823      	ldr	r3, [r4, #0]
 800121c:	b103      	cbz	r3, 8001220 <_kill_r+0x1c>
 800121e:	602b      	str	r3, [r5, #0]
 8001220:	bd38      	pop	{r3, r4, r5, pc}
 8001222:	bf00      	nop
 8001224:	20000094 	.word	0x20000094

08001228 <_getpid_r>:
 8001228:	f7ff b8ce 	b.w	80003c8 <_getpid>

0800122c <__malloc_lock>:
 800122c:	4770      	bx	lr

0800122e <__malloc_unlock>:
 800122e:	4770      	bx	lr

08001230 <_init>:
 8001230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001232:	bf00      	nop
 8001234:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001236:	bc08      	pop	{r3}
 8001238:	469e      	mov	lr, r3
 800123a:	4770      	bx	lr

0800123c <_fini>:
 800123c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800123e:	bf00      	nop
 8001240:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001242:	bc08      	pop	{r3}
 8001244:	469e      	mov	lr, r3
 8001246:	4770      	bx	lr
