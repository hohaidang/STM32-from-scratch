
004_SPI_driver_CPP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000016bc  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08001880  08001880  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08001880  08001880  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  08001880  08001880  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001880  08001880  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08001880  08001880  00011880  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08001888  08001888  00011888  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08001890  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000038  20000064  080018f4  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000009c  080018f4  0002009c  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007f52  00000000  00000000  0002008e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000010f3  00000000  00000000  00027fe0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000360  00000000  00000000  000290d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000308  00000000  00000000  00029438  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000551d  00000000  00000000  00029740  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00002dd7  00000000  00000000  0002ec5d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00012979  00000000  00000000  00031a34  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000443ad  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000010b0  00000000  00000000  00044428  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000064 	.word	0x20000064
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08001868 	.word	0x08001868

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000068 	.word	0x20000068
 8000200:	08001868 	.word	0x08001868

08000204 <main>:
//SPI_Handler *SPI1_Handler;
std::unique_ptr<int> valuePtr;


int main(void)
{
 8000204:	b590      	push	{r4, r7, lr}
 8000206:	b089      	sub	sp, #36	; 0x24
 8000208:	af06      	add	r7, sp, #24
										SPI_BUS_CONFIG_FD,
										SPI_SCLK_SPEED_DIV32,
										SPI_DFF_8BITS,
										SPI_CPOL_LOW,
										SPI_CPHA_LOW,
										SPI_SSM_DI));
 800020a:	2030      	movs	r0, #48	; 0x30
 800020c:	f001 f9c8 	bl	80015a0 <_Znwj>
 8000210:	4603      	mov	r3, r0
 8000212:	461c      	mov	r4, r3
 8000214:	2300      	movs	r3, #0
 8000216:	9304      	str	r3, [sp, #16]
 8000218:	2300      	movs	r3, #0
 800021a:	9303      	str	r3, [sp, #12]
 800021c:	2300      	movs	r3, #0
 800021e:	9302      	str	r3, [sp, #8]
 8000220:	2300      	movs	r3, #0
 8000222:	9301      	str	r3, [sp, #4]
 8000224:	2304      	movs	r3, #4
 8000226:	9300      	str	r3, [sp, #0]
 8000228:	2301      	movs	r3, #1
 800022a:	2201      	movs	r2, #1
 800022c:	491a      	ldr	r1, [pc, #104]	; (8000298 <main+0x94>)
 800022e:	4620      	mov	r0, r4
 8000230:	f000 fecd 	bl	8000fce <_ZN11SPI_HandlerC1EP12SPI_RegDef_thhhhhhh>
	SPI1_Handler.reset(new SPI_Handler(SPI1,
 8000234:	4621      	mov	r1, r4
 8000236:	4819      	ldr	r0, [pc, #100]	; (800029c <main+0x98>)
 8000238:	f000 f870 	bl	800031c <_ZNSt10unique_ptrI11SPI_HandlerSt14default_deleteIS0_EE5resetEPS0_>
	}

    uint8_t tx_buffer[1] = {0xD0};
 800023c:	23d0      	movs	r3, #208	; 0xd0
 800023e:	713b      	strb	r3, [r7, #4]
    uint8_t dummyRead = 0x00;
 8000240:	2300      	movs	r3, #0
 8000242:	70fb      	strb	r3, [r7, #3]
    uint8_t dummyWrite = 0x00;
 8000244:	2300      	movs	r3, #0
 8000246:	70bb      	strb	r3, [r7, #2]
    uint8_t chipID = 0;
 8000248:	2300      	movs	r3, #0
 800024a:	707b      	strb	r3, [r7, #1]
    SPI1_Handler->SPI_SendData(tx_buffer, 1);
 800024c:	4813      	ldr	r0, [pc, #76]	; (800029c <main+0x98>)
 800024e:	f000 f884 	bl	800035a <_ZNKSt10unique_ptrI11SPI_HandlerSt14default_deleteIS0_EEptEv>
 8000252:	1d3b      	adds	r3, r7, #4
 8000254:	2201      	movs	r2, #1
 8000256:	4619      	mov	r1, r3
 8000258:	f001 f8dd 	bl	8001416 <_ZN11SPI_Handler12SPI_SendDataEPhm>
    SPI1_Handler->SPI_ReceiveData(&dummyRead, 1);
 800025c:	480f      	ldr	r0, [pc, #60]	; (800029c <main+0x98>)
 800025e:	f000 f87c 	bl	800035a <_ZNKSt10unique_ptrI11SPI_HandlerSt14default_deleteIS0_EEptEv>
 8000262:	1cfb      	adds	r3, r7, #3
 8000264:	2201      	movs	r2, #1
 8000266:	4619      	mov	r1, r3
 8000268:	f001 f955 	bl	8001516 <_ZN11SPI_Handler15SPI_ReceiveDataEPhm>
    SPI1_Handler->SPI_SendData(&dummyWrite, 1);
 800026c:	480b      	ldr	r0, [pc, #44]	; (800029c <main+0x98>)
 800026e:	f000 f874 	bl	800035a <_ZNKSt10unique_ptrI11SPI_HandlerSt14default_deleteIS0_EEptEv>
 8000272:	1cbb      	adds	r3, r7, #2
 8000274:	2201      	movs	r2, #1
 8000276:	4619      	mov	r1, r3
 8000278:	f001 f8cd 	bl	8001416 <_ZN11SPI_Handler12SPI_SendDataEPhm>
    SPI1_Handler->SPI_ReceiveData(&chipID, 1);
 800027c:	4807      	ldr	r0, [pc, #28]	; (800029c <main+0x98>)
 800027e:	f000 f86c 	bl	800035a <_ZNKSt10unique_ptrI11SPI_HandlerSt14default_deleteIS0_EEptEv>
 8000282:	1c7b      	adds	r3, r7, #1
 8000284:	2201      	movs	r2, #1
 8000286:	4619      	mov	r1, r3
 8000288:	f001 f945 	bl	8001516 <_ZN11SPI_Handler15SPI_ReceiveDataEPhm>

    return 0;
 800028c:	2300      	movs	r3, #0
}
 800028e:	4618      	mov	r0, r3
 8000290:	370c      	adds	r7, #12
 8000292:	46bd      	mov	sp, r7
 8000294:	bd90      	pop	{r4, r7, pc}
 8000296:	bf00      	nop
 8000298:	40013000 	.word	0x40013000
 800029c:	20000080 	.word	0x20000080

080002a0 <_ZNSt10unique_ptrI11SPI_HandlerSt14default_deleteIS0_EED1Ev>:
	       is_convertible<_Up*, _Tp*>, is_same<_Dp, default_delete<_Tp>>>>
	unique_ptr(auto_ptr<_Up>&& __u) noexcept;
#endif

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b084      	sub	sp, #16
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	6078      	str	r0, [r7, #4]
      {
	auto& __ptr = _M_t._M_ptr();
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	4618      	mov	r0, r3
 80002ac:	f000 f861 	bl	8000372 <_ZNSt15__uniq_ptr_implI11SPI_HandlerSt14default_deleteIS0_EE6_M_ptrEv>
 80002b0:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 80002b2:	68fb      	ldr	r3, [r7, #12]
 80002b4:	681b      	ldr	r3, [r3, #0]
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	d009      	beq.n	80002ce <_ZNSt10unique_ptrI11SPI_HandlerSt14default_deleteIS0_EED1Ev+0x2e>
	  get_deleter()(__ptr);
 80002ba:	6878      	ldr	r0, [r7, #4]
 80002bc:	f000 f866 	bl	800038c <_ZNSt10unique_ptrI11SPI_HandlerSt14default_deleteIS0_EE11get_deleterEv>
 80002c0:	4602      	mov	r2, r0
 80002c2:	68fb      	ldr	r3, [r7, #12]
 80002c4:	681b      	ldr	r3, [r3, #0]
 80002c6:	4619      	mov	r1, r3
 80002c8:	4610      	mov	r0, r2
 80002ca:	f000 f86c 	bl	80003a6 <_ZNKSt14default_deleteI11SPI_HandlerEclEPS0_>
	__ptr = pointer();
 80002ce:	68fb      	ldr	r3, [r7, #12]
 80002d0:	2200      	movs	r2, #0
 80002d2:	601a      	str	r2, [r3, #0]
      }
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	4618      	mov	r0, r3
 80002d8:	3710      	adds	r7, #16
 80002da:	46bd      	mov	sp, r7
 80002dc:	bd80      	pop	{r7, pc}

080002de <_ZNSt10unique_ptrIiSt14default_deleteIiEED1Ev>:
      ~unique_ptr() noexcept
 80002de:	b580      	push	{r7, lr}
 80002e0:	b084      	sub	sp, #16
 80002e2:	af00      	add	r7, sp, #0
 80002e4:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	4618      	mov	r0, r3
 80002ea:	f000 f86f 	bl	80003cc <_ZNSt15__uniq_ptr_implIiSt14default_deleteIiEE6_M_ptrEv>
 80002ee:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 80002f0:	68fb      	ldr	r3, [r7, #12]
 80002f2:	681b      	ldr	r3, [r3, #0]
 80002f4:	2b00      	cmp	r3, #0
 80002f6:	d009      	beq.n	800030c <_ZNSt10unique_ptrIiSt14default_deleteIiEED1Ev+0x2e>
	  get_deleter()(__ptr);
 80002f8:	6878      	ldr	r0, [r7, #4]
 80002fa:	f000 f874 	bl	80003e6 <_ZNSt10unique_ptrIiSt14default_deleteIiEE11get_deleterEv>
 80002fe:	4602      	mov	r2, r0
 8000300:	68fb      	ldr	r3, [r7, #12]
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	4619      	mov	r1, r3
 8000306:	4610      	mov	r0, r2
 8000308:	f000 f87a 	bl	8000400 <_ZNKSt14default_deleteIiEclEPi>
	__ptr = pointer();
 800030c:	68fb      	ldr	r3, [r7, #12]
 800030e:	2200      	movs	r2, #0
 8000310:	601a      	str	r2, [r3, #0]
      }
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	4618      	mov	r0, r3
 8000316:	3710      	adds	r7, #16
 8000318:	46bd      	mov	sp, r7
 800031a:	bd80      	pop	{r7, pc}

0800031c <_ZNSt10unique_ptrI11SPI_HandlerSt14default_deleteIS0_EE5resetEPS0_>:
       * @param __p  The new pointer to store.
       *
       * The deleter will be invoked if a pointer is already owned.
       */
      void
      reset(pointer __p = pointer()) noexcept
 800031c:	b580      	push	{r7, lr}
 800031e:	b082      	sub	sp, #8
 8000320:	af00      	add	r7, sp, #0
 8000322:	6078      	str	r0, [r7, #4]
 8000324:	6039      	str	r1, [r7, #0]
      {
	using std::swap;
	swap(_M_t._M_ptr(), __p);
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	4618      	mov	r0, r3
 800032a:	f000 f822 	bl	8000372 <_ZNSt15__uniq_ptr_implI11SPI_HandlerSt14default_deleteIS0_EE6_M_ptrEv>
 800032e:	4602      	mov	r2, r0
 8000330:	463b      	mov	r3, r7
 8000332:	4619      	mov	r1, r3
 8000334:	4610      	mov	r0, r2
 8000336:	f000 f87a 	bl	800042e <_ZSt4swapIP11SPI_HandlerENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS6_ESt18is_move_assignableIS6_EEE5valueEvE4typeERS6_SG_>
	if (__p != pointer())
 800033a:	683b      	ldr	r3, [r7, #0]
 800033c:	2b00      	cmp	r3, #0
 800033e:	d008      	beq.n	8000352 <_ZNSt10unique_ptrI11SPI_HandlerSt14default_deleteIS0_EE5resetEPS0_+0x36>
	  get_deleter()(__p);
 8000340:	6878      	ldr	r0, [r7, #4]
 8000342:	f000 f823 	bl	800038c <_ZNSt10unique_ptrI11SPI_HandlerSt14default_deleteIS0_EE11get_deleterEv>
 8000346:	4602      	mov	r2, r0
 8000348:	683b      	ldr	r3, [r7, #0]
 800034a:	4619      	mov	r1, r3
 800034c:	4610      	mov	r0, r2
 800034e:	f000 f82a 	bl	80003a6 <_ZNKSt14default_deleteI11SPI_HandlerEclEPS0_>
      }
 8000352:	bf00      	nop
 8000354:	3708      	adds	r7, #8
 8000356:	46bd      	mov	sp, r7
 8000358:	bd80      	pop	{r7, pc}

0800035a <_ZNKSt10unique_ptrI11SPI_HandlerSt14default_deleteIS0_EEptEv>:
      operator->() const noexcept
 800035a:	b580      	push	{r7, lr}
 800035c:	b082      	sub	sp, #8
 800035e:	af00      	add	r7, sp, #0
 8000360:	6078      	str	r0, [r7, #4]
	return get();
 8000362:	6878      	ldr	r0, [r7, #4]
 8000364:	f000 f882 	bl	800046c <_ZNKSt10unique_ptrI11SPI_HandlerSt14default_deleteIS0_EE3getEv>
 8000368:	4603      	mov	r3, r0
      }
 800036a:	4618      	mov	r0, r3
 800036c:	3708      	adds	r7, #8
 800036e:	46bd      	mov	sp, r7
 8000370:	bd80      	pop	{r7, pc}

08000372 <_ZNSt15__uniq_ptr_implI11SPI_HandlerSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 8000372:	b580      	push	{r7, lr}
 8000374:	b082      	sub	sp, #8
 8000376:	af00      	add	r7, sp, #0
 8000378:	6078      	str	r0, [r7, #4]
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	4618      	mov	r0, r3
 800037e:	f000 f882 	bl	8000486 <_ZSt3getILj0EJP11SPI_HandlerSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8000382:	4603      	mov	r3, r0
 8000384:	4618      	mov	r0, r3
 8000386:	3708      	adds	r7, #8
 8000388:	46bd      	mov	sp, r7
 800038a:	bd80      	pop	{r7, pc}

0800038c <_ZNSt10unique_ptrI11SPI_HandlerSt14default_deleteIS0_EE11get_deleterEv>:
      get_deleter() noexcept
 800038c:	b580      	push	{r7, lr}
 800038e:	b082      	sub	sp, #8
 8000390:	af00      	add	r7, sp, #0
 8000392:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	4618      	mov	r0, r3
 8000398:	f000 f882 	bl	80004a0 <_ZNSt15__uniq_ptr_implI11SPI_HandlerSt14default_deleteIS0_EE10_M_deleterEv>
 800039c:	4603      	mov	r3, r0
 800039e:	4618      	mov	r0, r3
 80003a0:	3708      	adds	r7, #8
 80003a2:	46bd      	mov	sp, r7
 80003a4:	bd80      	pop	{r7, pc}

080003a6 <_ZNKSt14default_deleteI11SPI_HandlerEclEPS0_>:
      operator()(_Tp* __ptr) const
 80003a6:	b590      	push	{r4, r7, lr}
 80003a8:	b083      	sub	sp, #12
 80003aa:	af00      	add	r7, sp, #0
 80003ac:	6078      	str	r0, [r7, #4]
 80003ae:	6039      	str	r1, [r7, #0]
	delete __ptr;
 80003b0:	683c      	ldr	r4, [r7, #0]
 80003b2:	2c00      	cmp	r4, #0
 80003b4:	d006      	beq.n	80003c4 <_ZNKSt14default_deleteI11SPI_HandlerEclEPS0_+0x1e>
 80003b6:	4620      	mov	r0, r4
 80003b8:	f000 fe55 	bl	8001066 <_ZN11SPI_HandlerD1Ev>
 80003bc:	2130      	movs	r1, #48	; 0x30
 80003be:	4620      	mov	r0, r4
 80003c0:	f001 f8ec 	bl	800159c <_ZdlPvj>
      }
 80003c4:	bf00      	nop
 80003c6:	370c      	adds	r7, #12
 80003c8:	46bd      	mov	sp, r7
 80003ca:	bd90      	pop	{r4, r7, pc}

080003cc <_ZNSt15__uniq_ptr_implIiSt14default_deleteIiEE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 80003cc:	b580      	push	{r7, lr}
 80003ce:	b082      	sub	sp, #8
 80003d0:	af00      	add	r7, sp, #0
 80003d2:	6078      	str	r0, [r7, #4]
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	4618      	mov	r0, r3
 80003d8:	f000 f86f 	bl	80004ba <_ZSt3getILj0EJPiSt14default_deleteIiEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS7_>
 80003dc:	4603      	mov	r3, r0
 80003de:	4618      	mov	r0, r3
 80003e0:	3708      	adds	r7, #8
 80003e2:	46bd      	mov	sp, r7
 80003e4:	bd80      	pop	{r7, pc}

080003e6 <_ZNSt10unique_ptrIiSt14default_deleteIiEE11get_deleterEv>:
      get_deleter() noexcept
 80003e6:	b580      	push	{r7, lr}
 80003e8:	b082      	sub	sp, #8
 80003ea:	af00      	add	r7, sp, #0
 80003ec:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	4618      	mov	r0, r3
 80003f2:	f000 f86f 	bl	80004d4 <_ZNSt15__uniq_ptr_implIiSt14default_deleteIiEE10_M_deleterEv>
 80003f6:	4603      	mov	r3, r0
 80003f8:	4618      	mov	r0, r3
 80003fa:	3708      	adds	r7, #8
 80003fc:	46bd      	mov	sp, r7
 80003fe:	bd80      	pop	{r7, pc}

08000400 <_ZNKSt14default_deleteIiEclEPi>:
      operator()(_Tp* __ptr) const
 8000400:	b580      	push	{r7, lr}
 8000402:	b082      	sub	sp, #8
 8000404:	af00      	add	r7, sp, #0
 8000406:	6078      	str	r0, [r7, #4]
 8000408:	6039      	str	r1, [r7, #0]
	delete __ptr;
 800040a:	2104      	movs	r1, #4
 800040c:	6838      	ldr	r0, [r7, #0]
 800040e:	f001 f8c5 	bl	800159c <_ZdlPvj>
      }
 8000412:	bf00      	nop
 8000414:	3708      	adds	r7, #8
 8000416:	46bd      	mov	sp, r7
 8000418:	bd80      	pop	{r7, pc}

0800041a <_ZSt4moveIRP11SPI_HandlerEONSt16remove_referenceIT_E4typeEOS4_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 800041a:	b480      	push	{r7}
 800041c:	b083      	sub	sp, #12
 800041e:	af00      	add	r7, sp, #0
 8000420:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	4618      	mov	r0, r3
 8000426:	370c      	adds	r7, #12
 8000428:	46bd      	mov	sp, r7
 800042a:	bc80      	pop	{r7}
 800042c:	4770      	bx	lr

0800042e <_ZSt4swapIP11SPI_HandlerENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS6_ESt18is_move_assignableIS6_EEE5valueEvE4typeERS6_SG_>:
    inline
#if __cplusplus >= 201103L
    typename enable_if<__and_<__not_<__is_tuple_like<_Tp>>,
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
    swap(_Tp& __a, _Tp& __b)
 800042e:	b580      	push	{r7, lr}
 8000430:	b084      	sub	sp, #16
 8000432:	af00      	add	r7, sp, #0
 8000434:	6078      	str	r0, [r7, #4]
 8000436:	6039      	str	r1, [r7, #0]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8000438:	6878      	ldr	r0, [r7, #4]
 800043a:	f7ff ffee 	bl	800041a <_ZSt4moveIRP11SPI_HandlerEONSt16remove_referenceIT_E4typeEOS4_>
 800043e:	4603      	mov	r3, r0
 8000440:	681b      	ldr	r3, [r3, #0]
 8000442:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 8000444:	6838      	ldr	r0, [r7, #0]
 8000446:	f7ff ffe8 	bl	800041a <_ZSt4moveIRP11SPI_HandlerEONSt16remove_referenceIT_E4typeEOS4_>
 800044a:	4603      	mov	r3, r0
 800044c:	681a      	ldr	r2, [r3, #0]
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8000452:	f107 030c 	add.w	r3, r7, #12
 8000456:	4618      	mov	r0, r3
 8000458:	f7ff ffdf 	bl	800041a <_ZSt4moveIRP11SPI_HandlerEONSt16remove_referenceIT_E4typeEOS4_>
 800045c:	4603      	mov	r3, r0
 800045e:	681a      	ldr	r2, [r3, #0]
 8000460:	683b      	ldr	r3, [r7, #0]
 8000462:	601a      	str	r2, [r3, #0]
    }
 8000464:	bf00      	nop
 8000466:	3710      	adds	r7, #16
 8000468:	46bd      	mov	sp, r7
 800046a:	bd80      	pop	{r7, pc}

0800046c <_ZNKSt10unique_ptrI11SPI_HandlerSt14default_deleteIS0_EE3getEv>:
      get() const noexcept
 800046c:	b580      	push	{r7, lr}
 800046e:	b082      	sub	sp, #8
 8000470:	af00      	add	r7, sp, #0
 8000472:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	4618      	mov	r0, r3
 8000478:	f000 f839 	bl	80004ee <_ZNKSt15__uniq_ptr_implI11SPI_HandlerSt14default_deleteIS0_EE6_M_ptrEv>
 800047c:	4603      	mov	r3, r0
 800047e:	4618      	mov	r0, r3
 8000480:	3708      	adds	r7, #8
 8000482:	46bd      	mov	sp, r7
 8000484:	bd80      	pop	{r7, pc}

08000486 <_ZSt3getILj0EJP11SPI_HandlerSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }

  /// Return a reference to the ith element of a tuple.
  template<std::size_t __i, typename... _Elements>
    constexpr __tuple_element_t<__i, tuple<_Elements...>>&
    get(tuple<_Elements...>& __t) noexcept
 8000486:	b580      	push	{r7, lr}
 8000488:	b082      	sub	sp, #8
 800048a:	af00      	add	r7, sp, #0
 800048c:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	4618      	mov	r0, r3
 8000492:	f000 f83a 	bl	800050a <_ZSt12__get_helperILj0EP11SPI_HandlerJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8000496:	4603      	mov	r3, r0
 8000498:	4618      	mov	r0, r3
 800049a:	3708      	adds	r7, #8
 800049c:	46bd      	mov	sp, r7
 800049e:	bd80      	pop	{r7, pc}

080004a0 <_ZNSt15__uniq_ptr_implI11SPI_HandlerSt14default_deleteIS0_EE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b082      	sub	sp, #8
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	6078      	str	r0, [r7, #4]
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	4618      	mov	r0, r3
 80004ac:	f000 f839 	bl	8000522 <_ZSt3getILj1EJP11SPI_HandlerSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 80004b0:	4603      	mov	r3, r0
 80004b2:	4618      	mov	r0, r3
 80004b4:	3708      	adds	r7, #8
 80004b6:	46bd      	mov	sp, r7
 80004b8:	bd80      	pop	{r7, pc}

080004ba <_ZSt3getILj0EJPiSt14default_deleteIiEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS7_>:
    get(tuple<_Elements...>& __t) noexcept
 80004ba:	b580      	push	{r7, lr}
 80004bc:	b082      	sub	sp, #8
 80004be:	af00      	add	r7, sp, #0
 80004c0:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	4618      	mov	r0, r3
 80004c6:	f000 f838 	bl	800053a <_ZSt12__get_helperILj0EPiJSt14default_deleteIiEEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 80004ca:	4603      	mov	r3, r0
 80004cc:	4618      	mov	r0, r3
 80004ce:	3708      	adds	r7, #8
 80004d0:	46bd      	mov	sp, r7
 80004d2:	bd80      	pop	{r7, pc}

080004d4 <_ZNSt15__uniq_ptr_implIiSt14default_deleteIiEE10_M_deleterEv>:
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b082      	sub	sp, #8
 80004d8:	af00      	add	r7, sp, #0
 80004da:	6078      	str	r0, [r7, #4]
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	4618      	mov	r0, r3
 80004e0:	f000 f837 	bl	8000552 <_ZSt3getILj1EJPiSt14default_deleteIiEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS7_>
 80004e4:	4603      	mov	r3, r0
 80004e6:	4618      	mov	r0, r3
 80004e8:	3708      	adds	r7, #8
 80004ea:	46bd      	mov	sp, r7
 80004ec:	bd80      	pop	{r7, pc}

080004ee <_ZNKSt15__uniq_ptr_implI11SPI_HandlerSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 80004ee:	b580      	push	{r7, lr}
 80004f0:	b082      	sub	sp, #8
 80004f2:	af00      	add	r7, sp, #0
 80004f4:	6078      	str	r0, [r7, #4]
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	4618      	mov	r0, r3
 80004fa:	f000 f836 	bl	800056a <_ZSt3getILj0EJP11SPI_HandlerSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>
 80004fe:	4603      	mov	r3, r0
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	4618      	mov	r0, r3
 8000504:	3708      	adds	r7, #8
 8000506:	46bd      	mov	sp, r7
 8000508:	bd80      	pop	{r7, pc}

0800050a <_ZSt12__get_helperILj0EP11SPI_HandlerJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800050a:	b580      	push	{r7, lr}
 800050c:	b082      	sub	sp, #8
 800050e:	af00      	add	r7, sp, #0
 8000510:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8000512:	6878      	ldr	r0, [r7, #4]
 8000514:	f000 f836 	bl	8000584 <_ZNSt11_Tuple_implILj0EJP11SPI_HandlerSt14default_deleteIS0_EEE7_M_headERS4_>
 8000518:	4603      	mov	r3, r0
 800051a:	4618      	mov	r0, r3
 800051c:	3708      	adds	r7, #8
 800051e:	46bd      	mov	sp, r7
 8000520:	bd80      	pop	{r7, pc}

08000522 <_ZSt3getILj1EJP11SPI_HandlerSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 8000522:	b580      	push	{r7, lr}
 8000524:	b082      	sub	sp, #8
 8000526:	af00      	add	r7, sp, #0
 8000528:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800052a:	6878      	ldr	r0, [r7, #4]
 800052c:	f000 f837 	bl	800059e <_ZSt12__get_helperILj1ESt14default_deleteI11SPI_HandlerEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 8000530:	4603      	mov	r3, r0
 8000532:	4618      	mov	r0, r3
 8000534:	3708      	adds	r7, #8
 8000536:	46bd      	mov	sp, r7
 8000538:	bd80      	pop	{r7, pc}

0800053a <_ZSt12__get_helperILj0EPiJSt14default_deleteIiEEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800053a:	b580      	push	{r7, lr}
 800053c:	b082      	sub	sp, #8
 800053e:	af00      	add	r7, sp, #0
 8000540:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8000542:	6878      	ldr	r0, [r7, #4]
 8000544:	f000 f837 	bl	80005b6 <_ZNSt11_Tuple_implILj0EJPiSt14default_deleteIiEEE7_M_headERS3_>
 8000548:	4603      	mov	r3, r0
 800054a:	4618      	mov	r0, r3
 800054c:	3708      	adds	r7, #8
 800054e:	46bd      	mov	sp, r7
 8000550:	bd80      	pop	{r7, pc}

08000552 <_ZSt3getILj1EJPiSt14default_deleteIiEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS7_>:
    get(tuple<_Elements...>& __t) noexcept
 8000552:	b580      	push	{r7, lr}
 8000554:	b082      	sub	sp, #8
 8000556:	af00      	add	r7, sp, #0
 8000558:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800055a:	6878      	ldr	r0, [r7, #4]
 800055c:	f000 f838 	bl	80005d0 <_ZSt12__get_helperILj1ESt14default_deleteIiEJEERT0_RSt11_Tuple_implIXT_EJS2_DpT1_EE>
 8000560:	4603      	mov	r3, r0
 8000562:	4618      	mov	r0, r3
 8000564:	3708      	adds	r7, #8
 8000566:	46bd      	mov	sp, r7
 8000568:	bd80      	pop	{r7, pc}

0800056a <_ZSt3getILj0EJP11SPI_HandlerSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>:

  /// Return a const reference to the ith element of a const tuple.
  template<std::size_t __i, typename... _Elements>
    constexpr const __tuple_element_t<__i, tuple<_Elements...>>&
    get(const tuple<_Elements...>& __t) noexcept
 800056a:	b580      	push	{r7, lr}
 800056c:	b082      	sub	sp, #8
 800056e:	af00      	add	r7, sp, #0
 8000570:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	4618      	mov	r0, r3
 8000576:	f000 f837 	bl	80005e8 <_ZSt12__get_helperILj0EP11SPI_HandlerJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800057a:	4603      	mov	r3, r0
 800057c:	4618      	mov	r0, r3
 800057e:	3708      	adds	r7, #8
 8000580:	46bd      	mov	sp, r7
 8000582:	bd80      	pop	{r7, pc}

08000584 <_ZNSt11_Tuple_implILj0EJP11SPI_HandlerSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	4618      	mov	r0, r3
 8000590:	f000 f836 	bl	8000600 <_ZNSt10_Head_baseILj0EP11SPI_HandlerLb0EE7_M_headERS2_>
 8000594:	4603      	mov	r3, r0
 8000596:	4618      	mov	r0, r3
 8000598:	3708      	adds	r7, #8
 800059a:	46bd      	mov	sp, r7
 800059c:	bd80      	pop	{r7, pc}

0800059e <_ZSt12__get_helperILj1ESt14default_deleteI11SPI_HandlerEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800059e:	b580      	push	{r7, lr}
 80005a0:	b082      	sub	sp, #8
 80005a2:	af00      	add	r7, sp, #0
 80005a4:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80005a6:	6878      	ldr	r0, [r7, #4]
 80005a8:	f000 f834 	bl	8000614 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI11SPI_HandlerEEE7_M_headERS3_>
 80005ac:	4603      	mov	r3, r0
 80005ae:	4618      	mov	r0, r3
 80005b0:	3708      	adds	r7, #8
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bd80      	pop	{r7, pc}

080005b6 <_ZNSt11_Tuple_implILj0EJPiSt14default_deleteIiEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80005b6:	b580      	push	{r7, lr}
 80005b8:	b082      	sub	sp, #8
 80005ba:	af00      	add	r7, sp, #0
 80005bc:	6078      	str	r0, [r7, #4]
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	4618      	mov	r0, r3
 80005c2:	f000 f833 	bl	800062c <_ZNSt10_Head_baseILj0EPiLb0EE7_M_headERS1_>
 80005c6:	4603      	mov	r3, r0
 80005c8:	4618      	mov	r0, r3
 80005ca:	3708      	adds	r7, #8
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd80      	pop	{r7, pc}

080005d0 <_ZSt12__get_helperILj1ESt14default_deleteIiEJEERT0_RSt11_Tuple_implIXT_EJS2_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b082      	sub	sp, #8
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80005d8:	6878      	ldr	r0, [r7, #4]
 80005da:	f000 f831 	bl	8000640 <_ZNSt11_Tuple_implILj1EJSt14default_deleteIiEEE7_M_headERS2_>
 80005de:	4603      	mov	r3, r0
 80005e0:	4618      	mov	r0, r3
 80005e2:	3708      	adds	r7, #8
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}

080005e8 <_ZSt12__get_helperILj0EP11SPI_HandlerJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b082      	sub	sp, #8
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80005f0:	6878      	ldr	r0, [r7, #4]
 80005f2:	f000 f831 	bl	8000658 <_ZNSt11_Tuple_implILj0EJP11SPI_HandlerSt14default_deleteIS0_EEE7_M_headERKS4_>
 80005f6:	4603      	mov	r3, r0
 80005f8:	4618      	mov	r0, r3
 80005fa:	3708      	adds	r7, #8
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}

08000600 <_ZNSt10_Head_baseILj0EP11SPI_HandlerLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8000600:	b480      	push	{r7}
 8000602:	b083      	sub	sp, #12
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	4618      	mov	r0, r3
 800060c:	370c      	adds	r7, #12
 800060e:	46bd      	mov	sp, r7
 8000610:	bc80      	pop	{r7}
 8000612:	4770      	bx	lr

08000614 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI11SPI_HandlerEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8000614:	b580      	push	{r7, lr}
 8000616:	b082      	sub	sp, #8
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
 800061c:	6878      	ldr	r0, [r7, #4]
 800061e:	f000 f828 	bl	8000672 <_ZNSt10_Head_baseILj1ESt14default_deleteI11SPI_HandlerELb1EE7_M_headERS3_>
 8000622:	4603      	mov	r3, r0
 8000624:	4618      	mov	r0, r3
 8000626:	3708      	adds	r7, #8
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}

0800062c <_ZNSt10_Head_baseILj0EPiLb0EE7_M_headERS1_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800062c:	b480      	push	{r7}
 800062e:	b083      	sub	sp, #12
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	4618      	mov	r0, r3
 8000638:	370c      	adds	r7, #12
 800063a:	46bd      	mov	sp, r7
 800063c:	bc80      	pop	{r7}
 800063e:	4770      	bx	lr

08000640 <_ZNSt11_Tuple_implILj1EJSt14default_deleteIiEEE7_M_headERS2_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8000640:	b580      	push	{r7, lr}
 8000642:	b082      	sub	sp, #8
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
 8000648:	6878      	ldr	r0, [r7, #4]
 800064a:	f000 f81c 	bl	8000686 <_ZNSt10_Head_baseILj1ESt14default_deleteIiELb1EE7_M_headERS2_>
 800064e:	4603      	mov	r3, r0
 8000650:	4618      	mov	r0, r3
 8000652:	3708      	adds	r7, #8
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}

08000658 <_ZNSt11_Tuple_implILj0EJP11SPI_HandlerSt14default_deleteIS0_EEE7_M_headERKS4_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8000658:	b580      	push	{r7, lr}
 800065a:	b082      	sub	sp, #8
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	4618      	mov	r0, r3
 8000664:	f000 f819 	bl	800069a <_ZNSt10_Head_baseILj0EP11SPI_HandlerLb0EE7_M_headERKS2_>
 8000668:	4603      	mov	r3, r0
 800066a:	4618      	mov	r0, r3
 800066c:	3708      	adds	r7, #8
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}

08000672 <_ZNSt10_Head_baseILj1ESt14default_deleteI11SPI_HandlerELb1EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b; }
 8000672:	b480      	push	{r7}
 8000674:	b083      	sub	sp, #12
 8000676:	af00      	add	r7, sp, #0
 8000678:	6078      	str	r0, [r7, #4]
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	4618      	mov	r0, r3
 800067e:	370c      	adds	r7, #12
 8000680:	46bd      	mov	sp, r7
 8000682:	bc80      	pop	{r7}
 8000684:	4770      	bx	lr

08000686 <_ZNSt10_Head_baseILj1ESt14default_deleteIiELb1EE7_M_headERS2_>:
 8000686:	b480      	push	{r7}
 8000688:	b083      	sub	sp, #12
 800068a:	af00      	add	r7, sp, #0
 800068c:	6078      	str	r0, [r7, #4]
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	4618      	mov	r0, r3
 8000692:	370c      	adds	r7, #12
 8000694:	46bd      	mov	sp, r7
 8000696:	bc80      	pop	{r7}
 8000698:	4770      	bx	lr

0800069a <_ZNSt10_Head_baseILj0EP11SPI_HandlerLb0EE7_M_headERKS2_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 800069a:	b480      	push	{r7}
 800069c:	b083      	sub	sp, #12
 800069e:	af00      	add	r7, sp, #0
 80006a0:	6078      	str	r0, [r7, #4]
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	4618      	mov	r0, r3
 80006a6:	370c      	adds	r7, #12
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bc80      	pop	{r7}
 80006ac:	4770      	bx	lr
	...

080006b0 <_Z41__static_initialization_and_destruction_0ii>:
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b082      	sub	sp, #8
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
 80006b8:	6039      	str	r1, [r7, #0]
std::unique_ptr<int> valuePtr;
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d10a      	bne.n	80006d6 <_Z41__static_initialization_and_destruction_0ii+0x26>
 80006c0:	683b      	ldr	r3, [r7, #0]
 80006c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80006c6:	4293      	cmp	r3, r2
 80006c8:	d105      	bne.n	80006d6 <_Z41__static_initialization_and_destruction_0ii+0x26>
 80006ca:	4805      	ldr	r0, [pc, #20]	; (80006e0 <_Z41__static_initialization_and_destruction_0ii+0x30>)
 80006cc:	f7ff fe07 	bl	80002de <_ZNSt10unique_ptrIiSt14default_deleteIiEED1Ev>
unique_ptr<SPI_Handler> SPI1_Handler;
 80006d0:	4804      	ldr	r0, [pc, #16]	; (80006e4 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 80006d2:	f7ff fde5 	bl	80002a0 <_ZNSt10unique_ptrI11SPI_HandlerSt14default_deleteIS0_EED1Ev>
}
 80006d6:	bf00      	nop
 80006d8:	3708      	adds	r7, #8
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	20000084 	.word	0x20000084
 80006e4:	20000080 	.word	0x20000080

080006e8 <_GLOBAL__sub_I_SPI1_Handler>:
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0
 80006ec:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80006f0:	2001      	movs	r0, #1
 80006f2:	f7ff ffdd 	bl	80006b0 <_Z41__static_initialization_and_destruction_0ii>
 80006f6:	bd80      	pop	{r7, pc}

080006f8 <_GLOBAL__sub_D_SPI1_Handler>:
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
 80006fc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000700:	2000      	movs	r0, #0
 8000702:	f7ff ffd5 	bl	80006b0 <_Z41__static_initialization_and_destruction_0ii>
 8000706:	bd80      	pop	{r7, pc}

08000708 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000708:	b480      	push	{r7}
 800070a:	af00      	add	r7, sp, #0
	return 1;
 800070c:	2301      	movs	r3, #1
}
 800070e:	4618      	mov	r0, r3
 8000710:	46bd      	mov	sp, r7
 8000712:	bc80      	pop	{r7}
 8000714:	4770      	bx	lr

08000716 <_kill>:

int _kill(int pid, int sig)
{
 8000716:	b580      	push	{r7, lr}
 8000718:	b082      	sub	sp, #8
 800071a:	af00      	add	r7, sp, #0
 800071c:	6078      	str	r0, [r7, #4]
 800071e:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000720:	f000 ff62 	bl	80015e8 <__errno>
 8000724:	4602      	mov	r2, r0
 8000726:	2316      	movs	r3, #22
 8000728:	6013      	str	r3, [r2, #0]
	return -1;
 800072a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800072e:	4618      	mov	r0, r3
 8000730:	3708      	adds	r7, #8
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}

08000736 <_exit>:

void _exit (int status)
{
 8000736:	b580      	push	{r7, lr}
 8000738:	b082      	sub	sp, #8
 800073a:	af00      	add	r7, sp, #0
 800073c:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800073e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000742:	6878      	ldr	r0, [r7, #4]
 8000744:	f7ff ffe7 	bl	8000716 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000748:	e7fe      	b.n	8000748 <_exit+0x12>
	...

0800074c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b084      	sub	sp, #16
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000754:	4b11      	ldr	r3, [pc, #68]	; (800079c <_sbrk+0x50>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	2b00      	cmp	r3, #0
 800075a:	d102      	bne.n	8000762 <_sbrk+0x16>
		heap_end = &end;
 800075c:	4b0f      	ldr	r3, [pc, #60]	; (800079c <_sbrk+0x50>)
 800075e:	4a10      	ldr	r2, [pc, #64]	; (80007a0 <_sbrk+0x54>)
 8000760:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000762:	4b0e      	ldr	r3, [pc, #56]	; (800079c <_sbrk+0x50>)
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000768:	4b0c      	ldr	r3, [pc, #48]	; (800079c <_sbrk+0x50>)
 800076a:	681a      	ldr	r2, [r3, #0]
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	4413      	add	r3, r2
 8000770:	466a      	mov	r2, sp
 8000772:	4293      	cmp	r3, r2
 8000774:	d907      	bls.n	8000786 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000776:	f000 ff37 	bl	80015e8 <__errno>
 800077a:	4602      	mov	r2, r0
 800077c:	230c      	movs	r3, #12
 800077e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000780:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000784:	e006      	b.n	8000794 <_sbrk+0x48>
	}

	heap_end += incr;
 8000786:	4b05      	ldr	r3, [pc, #20]	; (800079c <_sbrk+0x50>)
 8000788:	681a      	ldr	r2, [r3, #0]
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	4413      	add	r3, r2
 800078e:	4a03      	ldr	r2, [pc, #12]	; (800079c <_sbrk+0x50>)
 8000790:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000792:	68fb      	ldr	r3, [r7, #12]
}
 8000794:	4618      	mov	r0, r3
 8000796:	3710      	adds	r7, #16
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}
 800079c:	20000088 	.word	0x20000088
 80007a0:	200000a0 	.word	0x200000a0

080007a4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80007a4:	480d      	ldr	r0, [pc, #52]	; (80007dc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80007a6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007a8:	480d      	ldr	r0, [pc, #52]	; (80007e0 <LoopForever+0x6>)
  ldr r1, =_edata
 80007aa:	490e      	ldr	r1, [pc, #56]	; (80007e4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80007ac:	4a0e      	ldr	r2, [pc, #56]	; (80007e8 <LoopForever+0xe>)
  movs r3, #0
 80007ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007b0:	e002      	b.n	80007b8 <LoopCopyDataInit>

080007b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007b6:	3304      	adds	r3, #4

080007b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007bc:	d3f9      	bcc.n	80007b2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007be:	4a0b      	ldr	r2, [pc, #44]	; (80007ec <LoopForever+0x12>)
  ldr r4, =_ebss
 80007c0:	4c0b      	ldr	r4, [pc, #44]	; (80007f0 <LoopForever+0x16>)
  movs r3, #0
 80007c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007c4:	e001      	b.n	80007ca <LoopFillZerobss>

080007c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007c8:	3204      	adds	r2, #4

080007ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007cc:	d3fb      	bcc.n	80007c6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80007ce:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 80007d2:	f000 ff0f 	bl	80015f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007d6:	f7ff fd15 	bl	8000204 <main>

080007da <LoopForever>:

LoopForever:
    b LoopForever
 80007da:	e7fe      	b.n	80007da <LoopForever>
  ldr   r0, =_estack
 80007dc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80007e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007e4:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 80007e8:	08001890 	.word	0x08001890
  ldr r2, =_sbss
 80007ec:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 80007f0:	2000009c 	.word	0x2000009c

080007f4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007f4:	e7fe      	b.n	80007f4 <ADC_IRQHandler>
	...

080007f8 <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t>:
#define SPI_SR_BSY                      7
#define SPI_SR_FRE                      8



inline uint8_t gpio_baseAddr_to_code(GPIO_RegDef_t *Port) {
 80007f8:	b480      	push	{r7}
 80007fa:	b083      	sub	sp, #12
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
			 (Port == GPIOC) ? 0x02 : \
			 (Port == GPIOD) ? 0x03 : \
			 (Port == GPIOE) ? 0x04 : \
			 (Port == GPIOF) ? 0x05 : \
			 (Port == GPIOG) ? 0x06 : \
			 (Port == GPIOH) ? 0x07 : 0x00 );
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	4a1a      	ldr	r2, [pc, #104]	; (800086c <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t+0x74>)
 8000804:	4293      	cmp	r3, r2
 8000806:	d02b      	beq.n	8000860 <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t+0x68>
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	4a19      	ldr	r2, [pc, #100]	; (8000870 <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t+0x78>)
 800080c:	4293      	cmp	r3, r2
 800080e:	d025      	beq.n	800085c <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t+0x64>
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	4a18      	ldr	r2, [pc, #96]	; (8000874 <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t+0x7c>)
 8000814:	4293      	cmp	r3, r2
 8000816:	d01f      	beq.n	8000858 <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t+0x60>
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	4a17      	ldr	r2, [pc, #92]	; (8000878 <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t+0x80>)
 800081c:	4293      	cmp	r3, r2
 800081e:	d019      	beq.n	8000854 <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t+0x5c>
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	4a16      	ldr	r2, [pc, #88]	; (800087c <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t+0x84>)
 8000824:	4293      	cmp	r3, r2
 8000826:	d013      	beq.n	8000850 <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t+0x58>
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	4a15      	ldr	r2, [pc, #84]	; (8000880 <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t+0x88>)
 800082c:	4293      	cmp	r3, r2
 800082e:	d00d      	beq.n	800084c <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t+0x54>
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	4a14      	ldr	r2, [pc, #80]	; (8000884 <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t+0x8c>)
 8000834:	4293      	cmp	r3, r2
 8000836:	d007      	beq.n	8000848 <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t+0x50>
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	4a13      	ldr	r2, [pc, #76]	; (8000888 <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t+0x90>)
 800083c:	4293      	cmp	r3, r2
 800083e:	d101      	bne.n	8000844 <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t+0x4c>
 8000840:	2307      	movs	r3, #7
 8000842:	e00e      	b.n	8000862 <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t+0x6a>
 8000844:	2300      	movs	r3, #0
 8000846:	e00c      	b.n	8000862 <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t+0x6a>
 8000848:	2306      	movs	r3, #6
 800084a:	e00a      	b.n	8000862 <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t+0x6a>
 800084c:	2305      	movs	r3, #5
 800084e:	e008      	b.n	8000862 <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t+0x6a>
 8000850:	2304      	movs	r3, #4
 8000852:	e006      	b.n	8000862 <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t+0x6a>
 8000854:	2303      	movs	r3, #3
 8000856:	e004      	b.n	8000862 <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t+0x6a>
 8000858:	2302      	movs	r3, #2
 800085a:	e002      	b.n	8000862 <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t+0x6a>
 800085c:	2301      	movs	r3, #1
 800085e:	e000      	b.n	8000862 <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t+0x6a>
 8000860:	2300      	movs	r3, #0
}
 8000862:	4618      	mov	r0, r3
 8000864:	370c      	adds	r7, #12
 8000866:	46bd      	mov	sp, r7
 8000868:	bc80      	pop	{r7}
 800086a:	4770      	bx	lr
 800086c:	40020000 	.word	0x40020000
 8000870:	40020400 	.word	0x40020400
 8000874:	40020800 	.word	0x40020800
 8000878:	40020c00 	.word	0x40020c00
 800087c:	40021000 	.word	0x40021000
 8000880:	40021400 	.word	0x40021400
 8000884:	40021800 	.word	0x40021800
 8000888:	40021c00 	.word	0x40021c00

0800088c <_ZN12GPIO_HandlerC1EP13GPIO_RegDef_thhhhhhh>:
/*********************************************************************
 * @class      		  - GPIO_Handler
 *
 * @brief             - Constructor, initialize GPIO, clock, IRQ, Alt Function
 **********************************************************************/
GPIO_Handler::GPIO_Handler(
 800088c:	b580      	push	{r7, lr}
 800088e:	b086      	sub	sp, #24
 8000890:	af00      	add	r7, sp, #0
 8000892:	60f8      	str	r0, [r7, #12]
 8000894:	60b9      	str	r1, [r7, #8]
 8000896:	4611      	mov	r1, r2
 8000898:	461a      	mov	r2, r3
 800089a:	460b      	mov	r3, r1
 800089c:	71fb      	strb	r3, [r7, #7]
 800089e:	4613      	mov	r3, r2
 80008a0:	71bb      	strb	r3, [r7, #6]
		uint8_t GPIO_PinMode,
		uint8_t GPIO_PinSpeed,
		uint8_t GPIO_IRQ_Priority,
		uint8_t GPIO_PinOPType,
		uint8_t GPIO_PinPuPdControl,
		uint8_t GPIO_PinAltFunMode) {
 80008a2:	68fb      	ldr	r3, [r7, #12]
 80008a4:	461a      	mov	r2, r3
 80008a6:	2300      	movs	r3, #0
 80008a8:	6013      	str	r3, [r2, #0]
 80008aa:	6053      	str	r3, [r2, #4]
 80008ac:	6093      	str	r3, [r2, #8]
	GPIOx_.pGPIOx = ((GPIO_RegDef_t *)(GPIOx_ADDR));
 80008ae:	68ba      	ldr	r2, [r7, #8]
 80008b0:	68fb      	ldr	r3, [r7, #12]
 80008b2:	601a      	str	r2, [r3, #0]
	GPIOx_.GPIO_PinConfig.GPIO_PinNumber = GPIO_PinNumber;
 80008b4:	68fb      	ldr	r3, [r7, #12]
 80008b6:	79fa      	ldrb	r2, [r7, #7]
 80008b8:	711a      	strb	r2, [r3, #4]
	GPIOx_.GPIO_PinConfig.GPIO_PinMode = GPIO_PinMode;
 80008ba:	68fb      	ldr	r3, [r7, #12]
 80008bc:	79ba      	ldrb	r2, [r7, #6]
 80008be:	715a      	strb	r2, [r3, #5]
	GPIOx_.GPIO_PinConfig.GPIO_PinSpeed = GPIO_PinSpeed;
 80008c0:	68fb      	ldr	r3, [r7, #12]
 80008c2:	f897 2020 	ldrb.w	r2, [r7, #32]
 80008c6:	719a      	strb	r2, [r3, #6]
	GPIOx_.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PinPuPdControl;
 80008c8:	68fb      	ldr	r3, [r7, #12]
 80008ca:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80008ce:	71da      	strb	r2, [r3, #7]
	GPIOx_.GPIO_PinConfig.GPIO_PinOPType = GPIO_PinOPType;
 80008d0:	68fb      	ldr	r3, [r7, #12]
 80008d2:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80008d6:	721a      	strb	r2, [r3, #8]
	GPIOx_.GPIO_PinConfig.GPIO_PinAltFunMode = GPIO_PinAltFunMode;
 80008d8:	68fb      	ldr	r3, [r7, #12]
 80008da:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80008de:	725a      	strb	r2, [r3, #9]
	GPIO_PeriClockControl();
 80008e0:	68f8      	ldr	r0, [r7, #12]
 80008e2:	f000 f82b 	bl	800093c <_ZN12GPIO_Handler21GPIO_PeriClockControlEv>
	GPIO_Init();
 80008e6:	68f8      	ldr	r0, [r7, #12]
 80008e8:	f000 f8a2 	bl	8000a30 <_ZN12GPIO_Handler9GPIO_InitEv>
	// Configure interrupt
	if(GPIO_PinMode >= GPIO_MODE_IT_FT) {
 80008ec:	79bb      	ldrb	r3, [r7, #6]
 80008ee:	2b03      	cmp	r3, #3
 80008f0:	d912      	bls.n	8000918 <_ZN12GPIO_HandlerC1EP13GPIO_RegDef_thhhhhhh+0x8c>
		uint8_t IRQ_number = get_irq_pinNum(GPIO_PinNumber);
 80008f2:	79fb      	ldrb	r3, [r7, #7]
 80008f4:	4618      	mov	r0, r3
 80008f6:	f000 fb4e 	bl	8000f96 <_ZL14get_irq_pinNumh>
 80008fa:	4603      	mov	r3, r0
 80008fc:	75fb      	strb	r3, [r7, #23]
		GPIO_IRQInterruptConfig(IRQ_number, ENABLE);
 80008fe:	7dfb      	ldrb	r3, [r7, #23]
 8000900:	2201      	movs	r2, #1
 8000902:	4619      	mov	r1, r3
 8000904:	68f8      	ldr	r0, [r7, #12]
 8000906:	f000 fa93 	bl	8000e30 <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh>
		GPIO_IRQPriorityConfig(IRQ_number, GPIO_IRQ_Priority);
 800090a:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800090e:	7dfb      	ldrb	r3, [r7, #23]
 8000910:	4619      	mov	r1, r3
 8000912:	68f8      	ldr	r0, [r7, #12]
 8000914:	f000 fb10 	bl	8000f38 <_ZN12GPIO_Handler22GPIO_IRQPriorityConfigEhh>
	}
}
 8000918:	68fb      	ldr	r3, [r7, #12]
 800091a:	4618      	mov	r0, r3
 800091c:	3718      	adds	r7, #24
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}

08000922 <_ZN12GPIO_HandlerD1Ev>:
 *
 * @return None
 *
 * @Node: Be careful when using many Peripheral device in the same PORT
 **********************************************************************/
GPIO_Handler::~GPIO_Handler() {
 8000922:	b580      	push	{r7, lr}
 8000924:	b082      	sub	sp, #8
 8000926:	af00      	add	r7, sp, #0
 8000928:	6078      	str	r0, [r7, #4]
	GPIO_DeInit();
 800092a:	6878      	ldr	r0, [r7, #4]
 800092c:	f000 f9d6 	bl	8000cdc <_ZN12GPIO_Handler11GPIO_DeInitEv>
}
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	4618      	mov	r0, r3
 8000934:	3708      	adds	r7, #8
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}
	...

0800093c <_ZN12GPIO_Handler21GPIO_PeriClockControlEv>:

// peripheral clock setup
void GPIO_Handler::GPIO_PeriClockControl() {
 800093c:	b480      	push	{r7}
 800093e:	b083      	sub	sp, #12
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
	if (GPIOx_.pGPIOx == GPIOA) {
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	4a30      	ldr	r2, [pc, #192]	; (8000a0c <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xd0>)
 800094a:	4293      	cmp	r3, r2
 800094c:	d106      	bne.n	800095c <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0x20>
		GPIOA_PCLK_EN();
 800094e:	4b30      	ldr	r3, [pc, #192]	; (8000a10 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xd4>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000952:	4a2f      	ldr	r2, [pc, #188]	; (8000a10 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xd4>)
 8000954:	f043 0301 	orr.w	r3, r3, #1
 8000958:	6313      	str	r3, [r2, #48]	; 0x30
	} else if (GPIOx_.pGPIOx == GPIOG) {
		GPIOG_PCLK_EN();
	} else if (GPIOx_.pGPIOx == GPIOH) {
		GPIOH_PCLK_EN();
	}
}
 800095a:	e052      	b.n	8000a02 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xc6>
	} else if (GPIOx_.pGPIOx == GPIOB) {
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	4a2c      	ldr	r2, [pc, #176]	; (8000a14 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xd8>)
 8000962:	4293      	cmp	r3, r2
 8000964:	d106      	bne.n	8000974 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0x38>
		GPIOB_PCLK_EN();
 8000966:	4b2a      	ldr	r3, [pc, #168]	; (8000a10 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xd4>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096a:	4a29      	ldr	r2, [pc, #164]	; (8000a10 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xd4>)
 800096c:	f043 0302 	orr.w	r3, r3, #2
 8000970:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000972:	e046      	b.n	8000a02 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xc6>
	} else if (GPIOx_.pGPIOx == GPIOC) {
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	4a27      	ldr	r2, [pc, #156]	; (8000a18 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xdc>)
 800097a:	4293      	cmp	r3, r2
 800097c:	d106      	bne.n	800098c <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0x50>
		GPIOC_PCLK_EN();
 800097e:	4b24      	ldr	r3, [pc, #144]	; (8000a10 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xd4>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000982:	4a23      	ldr	r2, [pc, #140]	; (8000a10 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xd4>)
 8000984:	f043 0304 	orr.w	r3, r3, #4
 8000988:	6313      	str	r3, [r2, #48]	; 0x30
}
 800098a:	e03a      	b.n	8000a02 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xc6>
	} else if (GPIOx_.pGPIOx == GPIOD) {
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	4a22      	ldr	r2, [pc, #136]	; (8000a1c <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xe0>)
 8000992:	4293      	cmp	r3, r2
 8000994:	d106      	bne.n	80009a4 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0x68>
		GPIOD_PCLK_EN();
 8000996:	4b1e      	ldr	r3, [pc, #120]	; (8000a10 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xd4>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099a:	4a1d      	ldr	r2, [pc, #116]	; (8000a10 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xd4>)
 800099c:	f043 0308 	orr.w	r3, r3, #8
 80009a0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80009a2:	e02e      	b.n	8000a02 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xc6>
	} else if (GPIOx_.pGPIOx == GPIOE) {
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	4a1d      	ldr	r2, [pc, #116]	; (8000a20 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xe4>)
 80009aa:	4293      	cmp	r3, r2
 80009ac:	d106      	bne.n	80009bc <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0x80>
		GPIOE_PCLK_EN();
 80009ae:	4b18      	ldr	r3, [pc, #96]	; (8000a10 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xd4>)
 80009b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b2:	4a17      	ldr	r2, [pc, #92]	; (8000a10 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xd4>)
 80009b4:	f043 0310 	orr.w	r3, r3, #16
 80009b8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80009ba:	e022      	b.n	8000a02 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xc6>
	} else if (GPIOx_.pGPIOx == GPIOF) {
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	4a18      	ldr	r2, [pc, #96]	; (8000a24 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xe8>)
 80009c2:	4293      	cmp	r3, r2
 80009c4:	d106      	bne.n	80009d4 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0x98>
		GPIOF_PCLK_EN();
 80009c6:	4b12      	ldr	r3, [pc, #72]	; (8000a10 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xd4>)
 80009c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ca:	4a11      	ldr	r2, [pc, #68]	; (8000a10 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xd4>)
 80009cc:	f043 0320 	orr.w	r3, r3, #32
 80009d0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80009d2:	e016      	b.n	8000a02 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xc6>
	} else if (GPIOx_.pGPIOx == GPIOG) {
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	4a13      	ldr	r2, [pc, #76]	; (8000a28 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xec>)
 80009da:	4293      	cmp	r3, r2
 80009dc:	d106      	bne.n	80009ec <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xb0>
		GPIOG_PCLK_EN();
 80009de:	4b0c      	ldr	r3, [pc, #48]	; (8000a10 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xd4>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e2:	4a0b      	ldr	r2, [pc, #44]	; (8000a10 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xd4>)
 80009e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009e8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80009ea:	e00a      	b.n	8000a02 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xc6>
	} else if (GPIOx_.pGPIOx == GPIOH) {
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	4a0e      	ldr	r2, [pc, #56]	; (8000a2c <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xf0>)
 80009f2:	4293      	cmp	r3, r2
 80009f4:	d105      	bne.n	8000a02 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xc6>
		GPIOH_PCLK_EN();
 80009f6:	4b06      	ldr	r3, [pc, #24]	; (8000a10 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xd4>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fa:	4a05      	ldr	r2, [pc, #20]	; (8000a10 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xd4>)
 80009fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a00:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000a02:	bf00      	nop
 8000a04:	370c      	adds	r7, #12
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bc80      	pop	{r7}
 8000a0a:	4770      	bx	lr
 8000a0c:	40020000 	.word	0x40020000
 8000a10:	40023800 	.word	0x40023800
 8000a14:	40020400 	.word	0x40020400
 8000a18:	40020800 	.word	0x40020800
 8000a1c:	40020c00 	.word	0x40020c00
 8000a20:	40021000 	.word	0x40021000
 8000a24:	40021400 	.word	0x40021400
 8000a28:	40021800 	.word	0x40021800
 8000a2c:	40021c00 	.word	0x40021c00

08000a30 <_ZN12GPIO_Handler9GPIO_InitEv>:
 *
 * @param None
 *
 * @return None
 **********************************************************************/
void GPIO_Handler::GPIO_Init() {
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b086      	sub	sp, #24
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
	uint32_t temp = 0;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	617b      	str	r3, [r7, #20]
	// 1. configure the mode of gpio pin
	if(GPIOx_.GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG) {
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	795b      	ldrb	r3, [r3, #5]
 8000a40:	2b03      	cmp	r3, #3
 8000a42:	d820      	bhi.n	8000a86 <_ZN12GPIO_Handler9GPIO_InitEv+0x56>
		// the non interrupt mode
		temp = GPIOx_.GPIO_PinConfig.GPIO_PinMode << (2 * GPIOx_.GPIO_PinConfig.GPIO_PinNumber);
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	795b      	ldrb	r3, [r3, #5]
 8000a48:	461a      	mov	r2, r3
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	791b      	ldrb	r3, [r3, #4]
 8000a4e:	005b      	lsls	r3, r3, #1
 8000a50:	fa02 f303 	lsl.w	r3, r2, r3
 8000a54:	617b      	str	r3, [r7, #20]
		GPIOx_.pGPIOx->MODER &= ~(0x3 << (2 * GPIOx_.GPIO_PinConfig.GPIO_PinNumber)); // clearing
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	681a      	ldr	r2, [r3, #0]
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	791b      	ldrb	r3, [r3, #4]
 8000a60:	005b      	lsls	r3, r3, #1
 8000a62:	2103      	movs	r1, #3
 8000a64:	fa01 f303 	lsl.w	r3, r1, r3
 8000a68:	43db      	mvns	r3, r3
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	400a      	ands	r2, r1
 8000a72:	601a      	str	r2, [r3, #0]
		GPIOx_.pGPIOx->MODER |= temp;
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	6819      	ldr	r1, [r3, #0]
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	697a      	ldr	r2, [r7, #20]
 8000a80:	430a      	orrs	r2, r1
 8000a82:	601a      	str	r2, [r3, #0]
 8000a84:	e083      	b.n	8000b8e <_ZN12GPIO_Handler9GPIO_InitEv+0x15e>
	}
	else {
		// interrupt mode
		if(GPIO_MODE_IT_FT == GPIOx_.GPIO_PinConfig.GPIO_PinMode) {
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	795b      	ldrb	r3, [r3, #5]
 8000a8a:	2b04      	cmp	r3, #4
 8000a8c:	d117      	bne.n	8000abe <_ZN12GPIO_Handler9GPIO_InitEv+0x8e>
			// 1. configure the FTSR
			EXTI->FTSR |= (1 << GPIOx_.GPIO_PinConfig.GPIO_PinNumber);
 8000a8e:	4b90      	ldr	r3, [pc, #576]	; (8000cd0 <_ZN12GPIO_Handler9GPIO_InitEv+0x2a0>)
 8000a90:	68db      	ldr	r3, [r3, #12]
 8000a92:	687a      	ldr	r2, [r7, #4]
 8000a94:	7912      	ldrb	r2, [r2, #4]
 8000a96:	4611      	mov	r1, r2
 8000a98:	2201      	movs	r2, #1
 8000a9a:	408a      	lsls	r2, r1
 8000a9c:	4611      	mov	r1, r2
 8000a9e:	4a8c      	ldr	r2, [pc, #560]	; (8000cd0 <_ZN12GPIO_Handler9GPIO_InitEv+0x2a0>)
 8000aa0:	430b      	orrs	r3, r1
 8000aa2:	60d3      	str	r3, [r2, #12]

			// clear the corresponding RTSR bit
			EXTI->RTSR &= ~(1 << GPIOx_.GPIO_PinConfig.GPIO_PinNumber);
 8000aa4:	4b8a      	ldr	r3, [pc, #552]	; (8000cd0 <_ZN12GPIO_Handler9GPIO_InitEv+0x2a0>)
 8000aa6:	689b      	ldr	r3, [r3, #8]
 8000aa8:	687a      	ldr	r2, [r7, #4]
 8000aaa:	7912      	ldrb	r2, [r2, #4]
 8000aac:	4611      	mov	r1, r2
 8000aae:	2201      	movs	r2, #1
 8000ab0:	408a      	lsls	r2, r1
 8000ab2:	43d2      	mvns	r2, r2
 8000ab4:	4611      	mov	r1, r2
 8000ab6:	4a86      	ldr	r2, [pc, #536]	; (8000cd0 <_ZN12GPIO_Handler9GPIO_InitEv+0x2a0>)
 8000ab8:	400b      	ands	r3, r1
 8000aba:	6093      	str	r3, [r2, #8]
 8000abc:	e035      	b.n	8000b2a <_ZN12GPIO_Handler9GPIO_InitEv+0xfa>

		}
		else if (GPIO_MODE_IT_RT == GPIOx_.GPIO_PinConfig.GPIO_PinMode) {
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	795b      	ldrb	r3, [r3, #5]
 8000ac2:	2b05      	cmp	r3, #5
 8000ac4:	d117      	bne.n	8000af6 <_ZN12GPIO_Handler9GPIO_InitEv+0xc6>
			// 1. configure the RTSR
			EXTI->RTSR |= (1 << GPIOx_.GPIO_PinConfig.GPIO_PinNumber);
 8000ac6:	4b82      	ldr	r3, [pc, #520]	; (8000cd0 <_ZN12GPIO_Handler9GPIO_InitEv+0x2a0>)
 8000ac8:	689b      	ldr	r3, [r3, #8]
 8000aca:	687a      	ldr	r2, [r7, #4]
 8000acc:	7912      	ldrb	r2, [r2, #4]
 8000ace:	4611      	mov	r1, r2
 8000ad0:	2201      	movs	r2, #1
 8000ad2:	408a      	lsls	r2, r1
 8000ad4:	4611      	mov	r1, r2
 8000ad6:	4a7e      	ldr	r2, [pc, #504]	; (8000cd0 <_ZN12GPIO_Handler9GPIO_InitEv+0x2a0>)
 8000ad8:	430b      	orrs	r3, r1
 8000ada:	6093      	str	r3, [r2, #8]

			// clear the corresponding RTSR bit
			EXTI->FTSR &= ~(1 << GPIOx_.GPIO_PinConfig.GPIO_PinNumber);
 8000adc:	4b7c      	ldr	r3, [pc, #496]	; (8000cd0 <_ZN12GPIO_Handler9GPIO_InitEv+0x2a0>)
 8000ade:	68db      	ldr	r3, [r3, #12]
 8000ae0:	687a      	ldr	r2, [r7, #4]
 8000ae2:	7912      	ldrb	r2, [r2, #4]
 8000ae4:	4611      	mov	r1, r2
 8000ae6:	2201      	movs	r2, #1
 8000ae8:	408a      	lsls	r2, r1
 8000aea:	43d2      	mvns	r2, r2
 8000aec:	4611      	mov	r1, r2
 8000aee:	4a78      	ldr	r2, [pc, #480]	; (8000cd0 <_ZN12GPIO_Handler9GPIO_InitEv+0x2a0>)
 8000af0:	400b      	ands	r3, r1
 8000af2:	60d3      	str	r3, [r2, #12]
 8000af4:	e019      	b.n	8000b2a <_ZN12GPIO_Handler9GPIO_InitEv+0xfa>
		}
		else if (GPIO_MODE_IT_RFT == GPIOx_.GPIO_PinConfig.GPIO_PinMode) {
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	795b      	ldrb	r3, [r3, #5]
 8000afa:	2b06      	cmp	r3, #6
 8000afc:	d115      	bne.n	8000b2a <_ZN12GPIO_Handler9GPIO_InitEv+0xfa>
			// 1. configure both FTSR and RTSR
			EXTI->FTSR |= (1 << GPIOx_.GPIO_PinConfig.GPIO_PinNumber);
 8000afe:	4b74      	ldr	r3, [pc, #464]	; (8000cd0 <_ZN12GPIO_Handler9GPIO_InitEv+0x2a0>)
 8000b00:	68db      	ldr	r3, [r3, #12]
 8000b02:	687a      	ldr	r2, [r7, #4]
 8000b04:	7912      	ldrb	r2, [r2, #4]
 8000b06:	4611      	mov	r1, r2
 8000b08:	2201      	movs	r2, #1
 8000b0a:	408a      	lsls	r2, r1
 8000b0c:	4611      	mov	r1, r2
 8000b0e:	4a70      	ldr	r2, [pc, #448]	; (8000cd0 <_ZN12GPIO_Handler9GPIO_InitEv+0x2a0>)
 8000b10:	430b      	orrs	r3, r1
 8000b12:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= (1 << GPIOx_.GPIO_PinConfig.GPIO_PinNumber);
 8000b14:	4b6e      	ldr	r3, [pc, #440]	; (8000cd0 <_ZN12GPIO_Handler9GPIO_InitEv+0x2a0>)
 8000b16:	689b      	ldr	r3, [r3, #8]
 8000b18:	687a      	ldr	r2, [r7, #4]
 8000b1a:	7912      	ldrb	r2, [r2, #4]
 8000b1c:	4611      	mov	r1, r2
 8000b1e:	2201      	movs	r2, #1
 8000b20:	408a      	lsls	r2, r1
 8000b22:	4611      	mov	r1, r2
 8000b24:	4a6a      	ldr	r2, [pc, #424]	; (8000cd0 <_ZN12GPIO_Handler9GPIO_InitEv+0x2a0>)
 8000b26:	430b      	orrs	r3, r1
 8000b28:	6093      	str	r3, [r2, #8]
		}

		// 2. configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 = GPIOx_.GPIO_PinConfig.GPIO_PinNumber >> 2;
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	791b      	ldrb	r3, [r3, #4]
 8000b2e:	109b      	asrs	r3, r3, #2
 8000b30:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = GPIOx_.GPIO_PinConfig.GPIO_PinNumber % 4;
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	791b      	ldrb	r3, [r3, #4]
 8000b36:	f003 0303 	and.w	r3, r3, #3
 8000b3a:	74bb      	strb	r3, [r7, #18]
		uint8_t portCode = gpio_baseAddr_to_code(GPIOx_.pGPIOx);
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	4618      	mov	r0, r3
 8000b42:	f7ff fe59 	bl	80007f8 <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t>
 8000b46:	4603      	mov	r3, r0
 8000b48:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 8000b4a:	4b62      	ldr	r3, [pc, #392]	; (8000cd4 <_ZN12GPIO_Handler9GPIO_InitEv+0x2a4>)
 8000b4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b4e:	4a61      	ldr	r2, [pc, #388]	; (8000cd4 <_ZN12GPIO_Handler9GPIO_InitEv+0x2a4>)
 8000b50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b54:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[temp1] |= (portCode << (4 * temp2));
 8000b56:	4a60      	ldr	r2, [pc, #384]	; (8000cd8 <_ZN12GPIO_Handler9GPIO_InitEv+0x2a8>)
 8000b58:	7cfb      	ldrb	r3, [r7, #19]
 8000b5a:	3302      	adds	r3, #2
 8000b5c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000b60:	7c79      	ldrb	r1, [r7, #17]
 8000b62:	7cbb      	ldrb	r3, [r7, #18]
 8000b64:	009b      	lsls	r3, r3, #2
 8000b66:	fa01 f303 	lsl.w	r3, r1, r3
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	495a      	ldr	r1, [pc, #360]	; (8000cd8 <_ZN12GPIO_Handler9GPIO_InitEv+0x2a8>)
 8000b6e:	7cfb      	ldrb	r3, [r7, #19]
 8000b70:	4302      	orrs	r2, r0
 8000b72:	3302      	adds	r3, #2
 8000b74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		// 3. Enable the exti interrupt delivery using IMR
		EXTI->IMR |= 1 << GPIOx_.GPIO_PinConfig.GPIO_PinNumber;
 8000b78:	4b55      	ldr	r3, [pc, #340]	; (8000cd0 <_ZN12GPIO_Handler9GPIO_InitEv+0x2a0>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	687a      	ldr	r2, [r7, #4]
 8000b7e:	7912      	ldrb	r2, [r2, #4]
 8000b80:	4611      	mov	r1, r2
 8000b82:	2201      	movs	r2, #1
 8000b84:	408a      	lsls	r2, r1
 8000b86:	4611      	mov	r1, r2
 8000b88:	4a51      	ldr	r2, [pc, #324]	; (8000cd0 <_ZN12GPIO_Handler9GPIO_InitEv+0x2a0>)
 8000b8a:	430b      	orrs	r3, r1
 8000b8c:	6013      	str	r3, [r2, #0]
	}

	temp = 0;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	617b      	str	r3, [r7, #20]
	// 2. configure the speed
	temp = GPIOx_.GPIO_PinConfig.GPIO_PinSpeed << (2 * GPIOx_.GPIO_PinConfig.GPIO_PinNumber);
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	799b      	ldrb	r3, [r3, #6]
 8000b96:	461a      	mov	r2, r3
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	791b      	ldrb	r3, [r3, #4]
 8000b9c:	005b      	lsls	r3, r3, #1
 8000b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba2:	617b      	str	r3, [r7, #20]
	GPIOx_.pGPIOx->OSPEEDR &= ~(0x3 << (2 * GPIOx_.GPIO_PinConfig.GPIO_PinNumber)); // clearing
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	689a      	ldr	r2, [r3, #8]
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	791b      	ldrb	r3, [r3, #4]
 8000bae:	005b      	lsls	r3, r3, #1
 8000bb0:	2103      	movs	r1, #3
 8000bb2:	fa01 f303 	lsl.w	r3, r1, r3
 8000bb6:	43db      	mvns	r3, r3
 8000bb8:	4619      	mov	r1, r3
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	400a      	ands	r2, r1
 8000bc0:	609a      	str	r2, [r3, #8]
	GPIOx_.pGPIOx->OSPEEDR |= temp;
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	6899      	ldr	r1, [r3, #8]
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	697a      	ldr	r2, [r7, #20]
 8000bce:	430a      	orrs	r2, r1
 8000bd0:	609a      	str	r2, [r3, #8]

	temp = 0;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	617b      	str	r3, [r7, #20]
	// 3. configure the pupd settings
	temp = GPIOx_.GPIO_PinConfig.GPIO_PinPuPdControl << (2 * GPIOx_.GPIO_PinConfig.GPIO_PinNumber);
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	79db      	ldrb	r3, [r3, #7]
 8000bda:	461a      	mov	r2, r3
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	791b      	ldrb	r3, [r3, #4]
 8000be0:	005b      	lsls	r3, r3, #1
 8000be2:	fa02 f303 	lsl.w	r3, r2, r3
 8000be6:	617b      	str	r3, [r7, #20]
	GPIOx_.pGPIOx->PUPDR &= ~(0x3 << (2 * GPIOx_.GPIO_PinConfig.GPIO_PinNumber));// clearing
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	68da      	ldr	r2, [r3, #12]
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	791b      	ldrb	r3, [r3, #4]
 8000bf2:	005b      	lsls	r3, r3, #1
 8000bf4:	2103      	movs	r1, #3
 8000bf6:	fa01 f303 	lsl.w	r3, r1, r3
 8000bfa:	43db      	mvns	r3, r3
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	400a      	ands	r2, r1
 8000c04:	60da      	str	r2, [r3, #12]
	GPIOx_.pGPIOx->PUPDR |= temp;
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	68d9      	ldr	r1, [r3, #12]
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	697a      	ldr	r2, [r7, #20]
 8000c12:	430a      	orrs	r2, r1
 8000c14:	60da      	str	r2, [r3, #12]

	temp = 0;
 8000c16:	2300      	movs	r3, #0
 8000c18:	617b      	str	r3, [r7, #20]
	// 4. configure the optype
	temp = GPIOx_.GPIO_PinConfig.GPIO_PinOPType << GPIOx_.GPIO_PinConfig.GPIO_PinNumber;
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	7a1b      	ldrb	r3, [r3, #8]
 8000c1e:	461a      	mov	r2, r3
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	791b      	ldrb	r3, [r3, #4]
 8000c24:	fa02 f303 	lsl.w	r3, r2, r3
 8000c28:	617b      	str	r3, [r7, #20]
	GPIOx_.pGPIOx->OTYPER &= ~(0x1 << GPIOx_.GPIO_PinConfig.GPIO_PinNumber); // clearing
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	685a      	ldr	r2, [r3, #4]
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	791b      	ldrb	r3, [r3, #4]
 8000c34:	4619      	mov	r1, r3
 8000c36:	2301      	movs	r3, #1
 8000c38:	408b      	lsls	r3, r1
 8000c3a:	43db      	mvns	r3, r3
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	400a      	ands	r2, r1
 8000c44:	605a      	str	r2, [r3, #4]
	GPIOx_.pGPIOx->OTYPER |= temp;
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	6859      	ldr	r1, [r3, #4]
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	697a      	ldr	r2, [r7, #20]
 8000c52:	430a      	orrs	r2, r1
 8000c54:	605a      	str	r2, [r3, #4]

	temp = 0;
 8000c56:	2300      	movs	r3, #0
 8000c58:	617b      	str	r3, [r7, #20]
	// 5. configure the alt functionality
	if(GPIOx_.GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN) {
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	795b      	ldrb	r3, [r3, #5]
 8000c5e:	2b02      	cmp	r3, #2
 8000c60:	d131      	bne.n	8000cc6 <_ZN12GPIO_Handler9GPIO_InitEv+0x296>
		// configure alt function register
		uint8_t temp1, temp2;
		temp1 = GPIOx_.GPIO_PinConfig.GPIO_PinNumber / 8;
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	791b      	ldrb	r3, [r3, #4]
 8000c66:	08db      	lsrs	r3, r3, #3
 8000c68:	743b      	strb	r3, [r7, #16]
		temp2 = GPIOx_.GPIO_PinConfig.GPIO_PinNumber % 8;
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	791b      	ldrb	r3, [r3, #4]
 8000c6e:	f003 0307 	and.w	r3, r3, #7
 8000c72:	73fb      	strb	r3, [r7, #15]
		GPIOx_.pGPIOx->AFR[temp1] &= ~(0xF << (4 * temp2));
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	7c3a      	ldrb	r2, [r7, #16]
 8000c7a:	3208      	adds	r2, #8
 8000c7c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000c80:	7bfb      	ldrb	r3, [r7, #15]
 8000c82:	009b      	lsls	r3, r3, #2
 8000c84:	220f      	movs	r2, #15
 8000c86:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8a:	43db      	mvns	r3, r3
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	7c3a      	ldrb	r2, [r7, #16]
 8000c94:	4001      	ands	r1, r0
 8000c96:	3208      	adds	r2, #8
 8000c98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		GPIOx_.pGPIOx->AFR[temp1] |= (GPIOx_.GPIO_PinConfig.GPIO_PinAltFunMode << (4 * temp2));
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	7c3a      	ldrb	r2, [r7, #16]
 8000ca2:	3208      	adds	r2, #8
 8000ca4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	7a5b      	ldrb	r3, [r3, #9]
 8000cac:	461a      	mov	r2, r3
 8000cae:	7bfb      	ldrb	r3, [r7, #15]
 8000cb0:	009b      	lsls	r3, r3, #2
 8000cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	7c3a      	ldrb	r2, [r7, #16]
 8000cbe:	4301      	orrs	r1, r0
 8000cc0:	3208      	adds	r2, #8
 8000cc2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
 8000cc6:	bf00      	nop
 8000cc8:	3718      	adds	r7, #24
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	40013c00 	.word	0x40013c00
 8000cd4:	40023800 	.word	0x40023800
 8000cd8:	40013800 	.word	0x40013800

08000cdc <_ZN12GPIO_Handler11GPIO_DeInitEv>:
 *
 * @brief - Reset GPIO Port
 *
 * @return uint8, b'0000_000x
 */
void GPIO_Handler::GPIO_DeInit() {
 8000cdc:	b480      	push	{r7}
 8000cde:	b083      	sub	sp, #12
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
	if(GPIOx_.pGPIOx == GPIOA) {
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	4a48      	ldr	r2, [pc, #288]	; (8000e0c <_ZN12GPIO_Handler11GPIO_DeInitEv+0x130>)
 8000cea:	4293      	cmp	r3, r2
 8000cec:	d10c      	bne.n	8000d08 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x2c>
		GPIOA_REG_RESET();
 8000cee:	4b48      	ldr	r3, [pc, #288]	; (8000e10 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 8000cf0:	691b      	ldr	r3, [r3, #16]
 8000cf2:	4a47      	ldr	r2, [pc, #284]	; (8000e10 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 8000cf4:	f043 0301 	orr.w	r3, r3, #1
 8000cf8:	6113      	str	r3, [r2, #16]
 8000cfa:	4b45      	ldr	r3, [pc, #276]	; (8000e10 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 8000cfc:	691b      	ldr	r3, [r3, #16]
 8000cfe:	4a44      	ldr	r2, [pc, #272]	; (8000e10 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 8000d00:	f023 0301 	bic.w	r3, r3, #1
 8000d04:	6113      	str	r3, [r2, #16]
		GPIOG_REG_RESET();
	}
	else if (GPIOx_.pGPIOx == GPIOH) {
		GPIOH_REG_RESET();
	}
}
 8000d06:	e07c      	b.n	8000e02 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x126>
	else if (GPIOx_.pGPIOx == GPIOB) {
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	4a41      	ldr	r2, [pc, #260]	; (8000e14 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x138>)
 8000d0e:	4293      	cmp	r3, r2
 8000d10:	d10c      	bne.n	8000d2c <_ZN12GPIO_Handler11GPIO_DeInitEv+0x50>
		GPIOB_REG_RESET();
 8000d12:	4b3f      	ldr	r3, [pc, #252]	; (8000e10 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 8000d14:	691b      	ldr	r3, [r3, #16]
 8000d16:	4a3e      	ldr	r2, [pc, #248]	; (8000e10 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 8000d18:	f043 0302 	orr.w	r3, r3, #2
 8000d1c:	6113      	str	r3, [r2, #16]
 8000d1e:	4b3c      	ldr	r3, [pc, #240]	; (8000e10 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 8000d20:	691b      	ldr	r3, [r3, #16]
 8000d22:	4a3b      	ldr	r2, [pc, #236]	; (8000e10 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 8000d24:	f023 0302 	bic.w	r3, r3, #2
 8000d28:	6113      	str	r3, [r2, #16]
}
 8000d2a:	e06a      	b.n	8000e02 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x126>
	else if (GPIOx_.pGPIOx == GPIOC) {
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	4a39      	ldr	r2, [pc, #228]	; (8000e18 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x13c>)
 8000d32:	4293      	cmp	r3, r2
 8000d34:	d10c      	bne.n	8000d50 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x74>
		GPIOC_REG_RESET();
 8000d36:	4b36      	ldr	r3, [pc, #216]	; (8000e10 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 8000d38:	691b      	ldr	r3, [r3, #16]
 8000d3a:	4a35      	ldr	r2, [pc, #212]	; (8000e10 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 8000d3c:	f043 0304 	orr.w	r3, r3, #4
 8000d40:	6113      	str	r3, [r2, #16]
 8000d42:	4b33      	ldr	r3, [pc, #204]	; (8000e10 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 8000d44:	691b      	ldr	r3, [r3, #16]
 8000d46:	4a32      	ldr	r2, [pc, #200]	; (8000e10 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 8000d48:	f023 0304 	bic.w	r3, r3, #4
 8000d4c:	6113      	str	r3, [r2, #16]
}
 8000d4e:	e058      	b.n	8000e02 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x126>
	else if (GPIOx_.pGPIOx == GPIOD) {
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	4a31      	ldr	r2, [pc, #196]	; (8000e1c <_ZN12GPIO_Handler11GPIO_DeInitEv+0x140>)
 8000d56:	4293      	cmp	r3, r2
 8000d58:	d10c      	bne.n	8000d74 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x98>
		GPIOD_REG_RESET();
 8000d5a:	4b2d      	ldr	r3, [pc, #180]	; (8000e10 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 8000d5c:	691b      	ldr	r3, [r3, #16]
 8000d5e:	4a2c      	ldr	r2, [pc, #176]	; (8000e10 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 8000d60:	f043 0308 	orr.w	r3, r3, #8
 8000d64:	6113      	str	r3, [r2, #16]
 8000d66:	4b2a      	ldr	r3, [pc, #168]	; (8000e10 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 8000d68:	691b      	ldr	r3, [r3, #16]
 8000d6a:	4a29      	ldr	r2, [pc, #164]	; (8000e10 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 8000d6c:	f023 0308 	bic.w	r3, r3, #8
 8000d70:	6113      	str	r3, [r2, #16]
}
 8000d72:	e046      	b.n	8000e02 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x126>
	else if (GPIOx_.pGPIOx == GPIOE) {
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4a29      	ldr	r2, [pc, #164]	; (8000e20 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x144>)
 8000d7a:	4293      	cmp	r3, r2
 8000d7c:	d10c      	bne.n	8000d98 <_ZN12GPIO_Handler11GPIO_DeInitEv+0xbc>
		GPIOE_REG_RESET();
 8000d7e:	4b24      	ldr	r3, [pc, #144]	; (8000e10 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 8000d80:	691b      	ldr	r3, [r3, #16]
 8000d82:	4a23      	ldr	r2, [pc, #140]	; (8000e10 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 8000d84:	f043 0310 	orr.w	r3, r3, #16
 8000d88:	6113      	str	r3, [r2, #16]
 8000d8a:	4b21      	ldr	r3, [pc, #132]	; (8000e10 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 8000d8c:	691b      	ldr	r3, [r3, #16]
 8000d8e:	4a20      	ldr	r2, [pc, #128]	; (8000e10 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 8000d90:	f023 0310 	bic.w	r3, r3, #16
 8000d94:	6113      	str	r3, [r2, #16]
}
 8000d96:	e034      	b.n	8000e02 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x126>
	else if (GPIOx_.pGPIOx == GPIOF) {
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4a21      	ldr	r2, [pc, #132]	; (8000e24 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x148>)
 8000d9e:	4293      	cmp	r3, r2
 8000da0:	d10c      	bne.n	8000dbc <_ZN12GPIO_Handler11GPIO_DeInitEv+0xe0>
		GPIOF_REG_RESET();
 8000da2:	4b1b      	ldr	r3, [pc, #108]	; (8000e10 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 8000da4:	691b      	ldr	r3, [r3, #16]
 8000da6:	4a1a      	ldr	r2, [pc, #104]	; (8000e10 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 8000da8:	f043 0320 	orr.w	r3, r3, #32
 8000dac:	6113      	str	r3, [r2, #16]
 8000dae:	4b18      	ldr	r3, [pc, #96]	; (8000e10 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 8000db0:	691b      	ldr	r3, [r3, #16]
 8000db2:	4a17      	ldr	r2, [pc, #92]	; (8000e10 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 8000db4:	f023 0320 	bic.w	r3, r3, #32
 8000db8:	6113      	str	r3, [r2, #16]
}
 8000dba:	e022      	b.n	8000e02 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x126>
	else if (GPIOx_.pGPIOx == GPIOG) {
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4a19      	ldr	r2, [pc, #100]	; (8000e28 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x14c>)
 8000dc2:	4293      	cmp	r3, r2
 8000dc4:	d10c      	bne.n	8000de0 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x104>
		GPIOG_REG_RESET();
 8000dc6:	4b12      	ldr	r3, [pc, #72]	; (8000e10 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 8000dc8:	691b      	ldr	r3, [r3, #16]
 8000dca:	4a11      	ldr	r2, [pc, #68]	; (8000e10 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 8000dcc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000dd0:	6113      	str	r3, [r2, #16]
 8000dd2:	4b0f      	ldr	r3, [pc, #60]	; (8000e10 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 8000dd4:	691b      	ldr	r3, [r3, #16]
 8000dd6:	4a0e      	ldr	r2, [pc, #56]	; (8000e10 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 8000dd8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000ddc:	6113      	str	r3, [r2, #16]
}
 8000dde:	e010      	b.n	8000e02 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x126>
	else if (GPIOx_.pGPIOx == GPIOH) {
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4a11      	ldr	r2, [pc, #68]	; (8000e2c <_ZN12GPIO_Handler11GPIO_DeInitEv+0x150>)
 8000de6:	4293      	cmp	r3, r2
 8000de8:	d10b      	bne.n	8000e02 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x126>
		GPIOH_REG_RESET();
 8000dea:	4b09      	ldr	r3, [pc, #36]	; (8000e10 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 8000dec:	691b      	ldr	r3, [r3, #16]
 8000dee:	4a08      	ldr	r2, [pc, #32]	; (8000e10 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 8000df0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000df4:	6113      	str	r3, [r2, #16]
 8000df6:	4b06      	ldr	r3, [pc, #24]	; (8000e10 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 8000df8:	691b      	ldr	r3, [r3, #16]
 8000dfa:	4a05      	ldr	r2, [pc, #20]	; (8000e10 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 8000dfc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000e00:	6113      	str	r3, [r2, #16]
}
 8000e02:	bf00      	nop
 8000e04:	370c      	adds	r7, #12
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bc80      	pop	{r7}
 8000e0a:	4770      	bx	lr
 8000e0c:	40020000 	.word	0x40020000
 8000e10:	40023800 	.word	0x40023800
 8000e14:	40020400 	.word	0x40020400
 8000e18:	40020800 	.word	0x40020800
 8000e1c:	40020c00 	.word	0x40020c00
 8000e20:	40021000 	.word	0x40021000
 8000e24:	40021400 	.word	0x40021400
 8000e28:	40021800 	.word	0x40021800
 8000e2c:	40021c00 	.word	0x40021c00

08000e30 <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh>:
 * @param[in] IRQNumber     - IRQNumber IRQ Position number
 * @param[in] EnorDi		- Enable/Disable Flag
 *
 * @return None
 */
void GPIO_Handler::GPIO_IRQInterruptConfig(const uint8_t IRQNumber, const uint8_t EnorDi) {
 8000e30:	b480      	push	{r7}
 8000e32:	b083      	sub	sp, #12
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
 8000e38:	460b      	mov	r3, r1
 8000e3a:	70fb      	strb	r3, [r7, #3]
 8000e3c:	4613      	mov	r3, r2
 8000e3e:	70bb      	strb	r3, [r7, #2]
	if(EnorDi == ENABLE) {
 8000e40:	78bb      	ldrb	r3, [r7, #2]
 8000e42:	2b01      	cmp	r3, #1
 8000e44:	d133      	bne.n	8000eae <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0x7e>
		if (IRQNumber <= 31) {
 8000e46:	78fb      	ldrb	r3, [r7, #3]
 8000e48:	2b1f      	cmp	r3, #31
 8000e4a:	d80a      	bhi.n	8000e62 <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0x32>
			//	program ISER0 register
			*NVIC_ISER0 |= (1 << IRQNumber);
 8000e4c:	4b34      	ldr	r3, [pc, #208]	; (8000f20 <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0xf0>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	78fa      	ldrb	r2, [r7, #3]
 8000e52:	2101      	movs	r1, #1
 8000e54:	fa01 f202 	lsl.w	r2, r1, r2
 8000e58:	4611      	mov	r1, r2
 8000e5a:	4a31      	ldr	r2, [pc, #196]	; (8000f20 <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0xf0>)
 8000e5c:	430b      	orrs	r3, r1
 8000e5e:	6013      	str	r3, [r2, #0]
			// program ICE2 register
			*NVIC_ICER2 |= (1 << (IRQNumber % 64));
		}
	}

}
 8000e60:	e059      	b.n	8000f16 <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0xe6>
		} else if (IRQNumber > 31 && IRQNumber < 64) {
 8000e62:	78fb      	ldrb	r3, [r7, #3]
 8000e64:	2b1f      	cmp	r3, #31
 8000e66:	d90f      	bls.n	8000e88 <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0x58>
 8000e68:	78fb      	ldrb	r3, [r7, #3]
 8000e6a:	2b3f      	cmp	r3, #63	; 0x3f
 8000e6c:	d80c      	bhi.n	8000e88 <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0x58>
			*NVIC_ISER1 |= (1 << (IRQNumber % 32));
 8000e6e:	4b2d      	ldr	r3, [pc, #180]	; (8000f24 <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0xf4>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	78fa      	ldrb	r2, [r7, #3]
 8000e74:	f002 021f 	and.w	r2, r2, #31
 8000e78:	2101      	movs	r1, #1
 8000e7a:	fa01 f202 	lsl.w	r2, r1, r2
 8000e7e:	4611      	mov	r1, r2
 8000e80:	4a28      	ldr	r2, [pc, #160]	; (8000f24 <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0xf4>)
 8000e82:	430b      	orrs	r3, r1
 8000e84:	6013      	str	r3, [r2, #0]
 8000e86:	e046      	b.n	8000f16 <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0xe6>
		} else if (IRQNumber >= 64 && IRQNumber < 96) {
 8000e88:	78fb      	ldrb	r3, [r7, #3]
 8000e8a:	2b3f      	cmp	r3, #63	; 0x3f
 8000e8c:	d943      	bls.n	8000f16 <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0xe6>
 8000e8e:	78fb      	ldrb	r3, [r7, #3]
 8000e90:	2b5f      	cmp	r3, #95	; 0x5f
 8000e92:	d840      	bhi.n	8000f16 <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0xe6>
			*NVIC_ISER2 |= (1 << (IRQNumber % 64));
 8000e94:	4b24      	ldr	r3, [pc, #144]	; (8000f28 <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0xf8>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	78fa      	ldrb	r2, [r7, #3]
 8000e9a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000e9e:	2101      	movs	r1, #1
 8000ea0:	fa01 f202 	lsl.w	r2, r1, r2
 8000ea4:	4611      	mov	r1, r2
 8000ea6:	4a20      	ldr	r2, [pc, #128]	; (8000f28 <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0xf8>)
 8000ea8:	430b      	orrs	r3, r1
 8000eaa:	6013      	str	r3, [r2, #0]
}
 8000eac:	e033      	b.n	8000f16 <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0xe6>
		if (IRQNumber <= 31) {
 8000eae:	78fb      	ldrb	r3, [r7, #3]
 8000eb0:	2b1f      	cmp	r3, #31
 8000eb2:	d80a      	bhi.n	8000eca <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0x9a>
			*NVIC_ICER0 |= (1 << IRQNumber);
 8000eb4:	4b1d      	ldr	r3, [pc, #116]	; (8000f2c <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0xfc>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	78fa      	ldrb	r2, [r7, #3]
 8000eba:	2101      	movs	r1, #1
 8000ebc:	fa01 f202 	lsl.w	r2, r1, r2
 8000ec0:	4611      	mov	r1, r2
 8000ec2:	4a1a      	ldr	r2, [pc, #104]	; (8000f2c <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0xfc>)
 8000ec4:	430b      	orrs	r3, r1
 8000ec6:	6013      	str	r3, [r2, #0]
}
 8000ec8:	e025      	b.n	8000f16 <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0xe6>
		} else if (IRQNumber > 31 && IRQNumber < 64) {
 8000eca:	78fb      	ldrb	r3, [r7, #3]
 8000ecc:	2b1f      	cmp	r3, #31
 8000ece:	d90f      	bls.n	8000ef0 <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0xc0>
 8000ed0:	78fb      	ldrb	r3, [r7, #3]
 8000ed2:	2b3f      	cmp	r3, #63	; 0x3f
 8000ed4:	d80c      	bhi.n	8000ef0 <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0xc0>
			*NVIC_ICER1 |= (1 << (IRQNumber % 32));
 8000ed6:	4b16      	ldr	r3, [pc, #88]	; (8000f30 <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0x100>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	78fa      	ldrb	r2, [r7, #3]
 8000edc:	f002 021f 	and.w	r2, r2, #31
 8000ee0:	2101      	movs	r1, #1
 8000ee2:	fa01 f202 	lsl.w	r2, r1, r2
 8000ee6:	4611      	mov	r1, r2
 8000ee8:	4a11      	ldr	r2, [pc, #68]	; (8000f30 <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0x100>)
 8000eea:	430b      	orrs	r3, r1
 8000eec:	6013      	str	r3, [r2, #0]
 8000eee:	e012      	b.n	8000f16 <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0xe6>
		} else if (IRQNumber >= 64 && IRQNumber < 96) {
 8000ef0:	78fb      	ldrb	r3, [r7, #3]
 8000ef2:	2b3f      	cmp	r3, #63	; 0x3f
 8000ef4:	d90f      	bls.n	8000f16 <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0xe6>
 8000ef6:	78fb      	ldrb	r3, [r7, #3]
 8000ef8:	2b5f      	cmp	r3, #95	; 0x5f
 8000efa:	d80c      	bhi.n	8000f16 <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0xe6>
			*NVIC_ICER2 |= (1 << (IRQNumber % 64));
 8000efc:	4b0d      	ldr	r3, [pc, #52]	; (8000f34 <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0x104>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	78fa      	ldrb	r2, [r7, #3]
 8000f02:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000f06:	2101      	movs	r1, #1
 8000f08:	fa01 f202 	lsl.w	r2, r1, r2
 8000f0c:	4611      	mov	r1, r2
 8000f0e:	4a09      	ldr	r2, [pc, #36]	; (8000f34 <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0x104>)
 8000f10:	430b      	orrs	r3, r1
 8000f12:	6013      	str	r3, [r2, #0]
}
 8000f14:	e7ff      	b.n	8000f16 <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0xe6>
 8000f16:	bf00      	nop
 8000f18:	370c      	adds	r7, #12
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bc80      	pop	{r7}
 8000f1e:	4770      	bx	lr
 8000f20:	e000e100 	.word	0xe000e100
 8000f24:	e000e104 	.word	0xe000e104
 8000f28:	e000e108 	.word	0xe000e108
 8000f2c:	e000e180 	.word	0xe000e180
 8000f30:	e000e184 	.word	0xe000e184
 8000f34:	e000e188 	.word	0xe000e188

08000f38 <_ZN12GPIO_Handler22GPIO_IRQPriorityConfigEhh>:
 *
 * @param[in] IRQNumber: IRQ position for EXIT
 * @param[in] IRPriority: 0->15
 * @return None
 */
void GPIO_Handler::GPIO_IRQPriorityConfig(const uint8_t IRQNumber, const uint8_t IRQPriority) {
 8000f38:	b480      	push	{r7}
 8000f3a:	b085      	sub	sp, #20
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
 8000f40:	460b      	mov	r3, r1
 8000f42:	70fb      	strb	r3, [r7, #3]
 8000f44:	4613      	mov	r3, r2
 8000f46:	70bb      	strb	r3, [r7, #2]
	// 1. first lets find out the ipr register
	uint8_t iprx = IRQNumber >> 2;
 8000f48:	78fb      	ldrb	r3, [r7, #3]
 8000f4a:	109b      	asrs	r3, r3, #2
 8000f4c:	73fb      	strb	r3, [r7, #15]
	uint8_t iprx_section = IRQNumber % 4;
 8000f4e:	78fb      	ldrb	r3, [r7, #3]
 8000f50:	f003 0303 	and.w	r3, r3, #3
 8000f54:	73bb      	strb	r3, [r7, #14]
	uint8_t shift_amount = (8 * iprx_section) + (8 - NO_PR_BITS_IMPLEMENTED);
 8000f56:	7bbb      	ldrb	r3, [r7, #14]
 8000f58:	00db      	lsls	r3, r3, #3
 8000f5a:	b2db      	uxtb	r3, r3
 8000f5c:	3304      	adds	r3, #4
 8000f5e:	737b      	strb	r3, [r7, #13]

	*(NVIC_PR_BASE_ADDR + iprx) |= (IRQPriority << shift_amount);
 8000f60:	7bfb      	ldrb	r3, [r7, #15]
 8000f62:	f103 5360 	add.w	r3, r3, #939524096	; 0x38000000
 8000f66:	f503 5364 	add.w	r3, r3, #14592	; 0x3900
 8000f6a:	009b      	lsls	r3, r3, #2
 8000f6c:	681a      	ldr	r2, [r3, #0]
 8000f6e:	78b9      	ldrb	r1, [r7, #2]
 8000f70:	7b7b      	ldrb	r3, [r7, #13]
 8000f72:	fa01 f303 	lsl.w	r3, r1, r3
 8000f76:	4618      	mov	r0, r3
 8000f78:	7bfb      	ldrb	r3, [r7, #15]
 8000f7a:	f103 5360 	add.w	r3, r3, #939524096	; 0x38000000
 8000f7e:	f503 5364 	add.w	r3, r3, #14592	; 0x3900
 8000f82:	009b      	lsls	r3, r3, #2
 8000f84:	4619      	mov	r1, r3
 8000f86:	ea42 0300 	orr.w	r3, r2, r0
 8000f8a:	600b      	str	r3, [r1, #0]
}
 8000f8c:	bf00      	nop
 8000f8e:	3714      	adds	r7, #20
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bc80      	pop	{r7}
 8000f94:	4770      	bx	lr

08000f96 <_ZL14get_irq_pinNumh>:
    }

}


static inline uint8_t get_irq_pinNum(uint8_t PinNumber) {
 8000f96:	b480      	push	{r7}
 8000f98:	b083      	sub	sp, #12
 8000f9a:	af00      	add	r7, sp, #0
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	71fb      	strb	r3, [r7, #7]
	return (PinNumber < 5) 	? PinNumber + 6 : \
		   (PinNumber < 10)	? IRQ_NO_EXTI9_5 : \
		   (PinNumber < 16) ? IRQ_NO_EXTI15_10 : 0;
 8000fa0:	79fb      	ldrb	r3, [r7, #7]
 8000fa2:	2b04      	cmp	r3, #4
 8000fa4:	d803      	bhi.n	8000fae <_ZL14get_irq_pinNumh+0x18>
 8000fa6:	79fb      	ldrb	r3, [r7, #7]
 8000fa8:	3306      	adds	r3, #6
 8000faa:	b2db      	uxtb	r3, r3
 8000fac:	e00a      	b.n	8000fc4 <_ZL14get_irq_pinNumh+0x2e>
 8000fae:	79fb      	ldrb	r3, [r7, #7]
 8000fb0:	2b09      	cmp	r3, #9
 8000fb2:	d906      	bls.n	8000fc2 <_ZL14get_irq_pinNumh+0x2c>
 8000fb4:	79fb      	ldrb	r3, [r7, #7]
 8000fb6:	2b0f      	cmp	r3, #15
 8000fb8:	d801      	bhi.n	8000fbe <_ZL14get_irq_pinNumh+0x28>
 8000fba:	2328      	movs	r3, #40	; 0x28
 8000fbc:	e002      	b.n	8000fc4 <_ZL14get_irq_pinNumh+0x2e>
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	e000      	b.n	8000fc4 <_ZL14get_irq_pinNumh+0x2e>
 8000fc2:	2317      	movs	r3, #23
}
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	370c      	adds	r7, #12
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bc80      	pop	{r7}
 8000fcc:	4770      	bx	lr

08000fce <_ZN11SPI_HandlerC1EP12SPI_RegDef_thhhhhhh>:
/*********************************************************************
 * @class      		  - GPIO_Handler Constructor
 *
 * @brief             -
 **********************************************************************/
SPI_Handler::SPI_Handler(SPI_RegDef_t *SPIx_ADDR,
 8000fce:	b580      	push	{r7, lr}
 8000fd0:	b084      	sub	sp, #16
 8000fd2:	af00      	add	r7, sp, #0
 8000fd4:	60f8      	str	r0, [r7, #12]
 8000fd6:	60b9      	str	r1, [r7, #8]
 8000fd8:	4611      	mov	r1, r2
 8000fda:	461a      	mov	r2, r3
 8000fdc:	460b      	mov	r3, r1
 8000fde:	71fb      	strb	r3, [r7, #7]
 8000fe0:	4613      	mov	r3, r2
 8000fe2:	71bb      	strb	r3, [r7, #6]
                         uint8_t BusConfig,
                         uint8_t SclkSpeed,
                         uint8_t DFF,
                         uint8_t CPOL,
                         uint8_t CPHA,
                         uint8_t SSM) {
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	2320      	movs	r3, #32
 8000fea:	461a      	mov	r2, r3
 8000fec:	2100      	movs	r1, #0
 8000fee:	f000 fb35 	bl	800165c <memset>
    SPIx_.pSPIx = SPIx_ADDR;
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	68ba      	ldr	r2, [r7, #8]
 8000ff6:	601a      	str	r2, [r3, #0]
    SPIx_.SPIConfig.SPI_DeviceMode = DeviceMode;
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	79fa      	ldrb	r2, [r7, #7]
 8000ffc:	711a      	strb	r2, [r3, #4]
    SPIx_.SPIConfig.SPI_BusConfig = BusConfig;
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	79ba      	ldrb	r2, [r7, #6]
 8001002:	715a      	strb	r2, [r3, #5]
    SPIx_.SPIConfig.SPI_SclkSpeed = SclkSpeed;
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	7e3a      	ldrb	r2, [r7, #24]
 8001008:	719a      	strb	r2, [r3, #6]
    SPIx_.SPIConfig.SPI_DFF = DFF;
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	7f3a      	ldrb	r2, [r7, #28]
 800100e:	71da      	strb	r2, [r3, #7]
    SPIx_.SPIConfig.SPI_CPOL = CPOL;
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001016:	721a      	strb	r2, [r3, #8]
    SPIx_.SPIConfig.SPI_CPHA = CPHA;
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800101e:	725a      	strb	r2, [r3, #9]
    SPIx_.SPIConfig.SPI_SSM = SSM;
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8001026:	729a      	strb	r2, [r3, #10]
    SPI_GPIOs_Init();
 8001028:	68f8      	ldr	r0, [r7, #12]
 800102a:	f000 f86d 	bl	8001108 <_ZN11SPI_Handler14SPI_GPIOs_InitEv>
    SPI_PeriClockControl();
 800102e:	68f8      	ldr	r0, [r7, #12]
 8001030:	f000 f828 	bl	8001084 <_ZN11SPI_Handler20SPI_PeriClockControlEv>
    SPI_Init();
 8001034:	68f8      	ldr	r0, [r7, #12]
 8001036:	f000 f901 	bl	800123c <_ZN11SPI_Handler8SPI_InitEv>
    SPI_SSIConfig(ENABLE);
 800103a:	2101      	movs	r1, #1
 800103c:	68f8      	ldr	r0, [r7, #12]
 800103e:	f000 fa4b 	bl	80014d8 <_ZN11SPI_Handler13SPI_SSIConfigEh>
    if(SPI_SSM_EN == SPIx_.SPIConfig.SPI_SSM) {
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	7a9b      	ldrb	r3, [r3, #10]
 8001046:	2b01      	cmp	r3, #1
 8001048:	d104      	bne.n	8001054 <_ZN11SPI_HandlerC1EP12SPI_RegDef_thhhhhhh+0x86>
    	SPI_SSOEConfig(DISABLE);
 800104a:	2100      	movs	r1, #0
 800104c:	68f8      	ldr	r0, [r7, #12]
 800104e:	f000 fa24 	bl	800149a <_ZN11SPI_Handler14SPI_SSOEConfigEh>
 8001052:	e003      	b.n	800105c <_ZN11SPI_HandlerC1EP12SPI_RegDef_thhhhhhh+0x8e>
    }
    else {
    	SPI_SSOEConfig(ENABLE);
 8001054:	2101      	movs	r1, #1
 8001056:	68f8      	ldr	r0, [r7, #12]
 8001058:	f000 fa1f 	bl	800149a <_ZN11SPI_Handler14SPI_SSOEConfigEh>
    }
}
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	4618      	mov	r0, r3
 8001060:	3710      	adds	r7, #16
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}

08001066 <_ZN11SPI_HandlerD1Ev>:
 *
 * @return None
 *
 * @Node: Be careful when using many Peripheral device in the same PORT
 **********************************************************************/
SPI_Handler::~SPI_Handler(){
 8001066:	b580      	push	{r7, lr}
 8001068:	b082      	sub	sp, #8
 800106a:	af00      	add	r7, sp, #0
 800106c:	6078      	str	r0, [r7, #4]
	SPI_DeInit();
 800106e:	6878      	ldr	r0, [r7, #4]
 8001070:	f000 f93e 	bl	80012f0 <_ZN11SPI_Handler10SPI_DeInitEv>
	SPI_GPIOs_DeInit();
 8001074:	6878      	ldr	r0, [r7, #4]
 8001076:	f000 f8ad 	bl	80011d4 <_ZN11SPI_Handler16SPI_GPIOs_DeInitEv>
}
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	4618      	mov	r0, r3
 800107e:	3708      	adds	r7, #8
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}

08001084 <_ZN11SPI_Handler20SPI_PeriClockControlEv>:

// peripheral clock setup
void SPI_Handler::SPI_PeriClockControl() {
 8001084:	b480      	push	{r7}
 8001086:	b083      	sub	sp, #12
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
	if (SPI1 == SPIx_.pSPIx) {
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	4a18      	ldr	r2, [pc, #96]	; (80010f4 <_ZN11SPI_Handler20SPI_PeriClockControlEv+0x70>)
 8001092:	4293      	cmp	r3, r2
 8001094:	d106      	bne.n	80010a4 <_ZN11SPI_Handler20SPI_PeriClockControlEv+0x20>
		SPI1_PCLK_EN();
 8001096:	4b18      	ldr	r3, [pc, #96]	; (80010f8 <_ZN11SPI_Handler20SPI_PeriClockControlEv+0x74>)
 8001098:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800109a:	4a17      	ldr	r2, [pc, #92]	; (80010f8 <_ZN11SPI_Handler20SPI_PeriClockControlEv+0x74>)
 800109c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80010a0:	6453      	str	r3, [r2, #68]	; 0x44
		SPI3_PCLK_EN();
	}
	else if (SPI4 == SPIx_.pSPIx) {
		SPI4_PCLK_EN();
	}
}
 80010a2:	e022      	b.n	80010ea <_ZN11SPI_Handler20SPI_PeriClockControlEv+0x66>
	else if (SPI2 == SPIx_.pSPIx) {
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4a14      	ldr	r2, [pc, #80]	; (80010fc <_ZN11SPI_Handler20SPI_PeriClockControlEv+0x78>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d106      	bne.n	80010bc <_ZN11SPI_Handler20SPI_PeriClockControlEv+0x38>
		SPI2_PCLK_EN();
 80010ae:	4b12      	ldr	r3, [pc, #72]	; (80010f8 <_ZN11SPI_Handler20SPI_PeriClockControlEv+0x74>)
 80010b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b2:	4a11      	ldr	r2, [pc, #68]	; (80010f8 <_ZN11SPI_Handler20SPI_PeriClockControlEv+0x74>)
 80010b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010b8:	6413      	str	r3, [r2, #64]	; 0x40
}
 80010ba:	e016      	b.n	80010ea <_ZN11SPI_Handler20SPI_PeriClockControlEv+0x66>
	else if (SPI3 == SPIx_.pSPIx) {
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4a0f      	ldr	r2, [pc, #60]	; (8001100 <_ZN11SPI_Handler20SPI_PeriClockControlEv+0x7c>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d106      	bne.n	80010d4 <_ZN11SPI_Handler20SPI_PeriClockControlEv+0x50>
		SPI3_PCLK_EN();
 80010c6:	4b0c      	ldr	r3, [pc, #48]	; (80010f8 <_ZN11SPI_Handler20SPI_PeriClockControlEv+0x74>)
 80010c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ca:	4a0b      	ldr	r2, [pc, #44]	; (80010f8 <_ZN11SPI_Handler20SPI_PeriClockControlEv+0x74>)
 80010cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80010d0:	6413      	str	r3, [r2, #64]	; 0x40
}
 80010d2:	e00a      	b.n	80010ea <_ZN11SPI_Handler20SPI_PeriClockControlEv+0x66>
	else if (SPI4 == SPIx_.pSPIx) {
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4a0a      	ldr	r2, [pc, #40]	; (8001104 <_ZN11SPI_Handler20SPI_PeriClockControlEv+0x80>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d105      	bne.n	80010ea <_ZN11SPI_Handler20SPI_PeriClockControlEv+0x66>
		SPI4_PCLK_EN();
 80010de:	4b06      	ldr	r3, [pc, #24]	; (80010f8 <_ZN11SPI_Handler20SPI_PeriClockControlEv+0x74>)
 80010e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010e2:	4a05      	ldr	r2, [pc, #20]	; (80010f8 <_ZN11SPI_Handler20SPI_PeriClockControlEv+0x74>)
 80010e4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80010e8:	6453      	str	r3, [r2, #68]	; 0x44
}
 80010ea:	bf00      	nop
 80010ec:	370c      	adds	r7, #12
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bc80      	pop	{r7}
 80010f2:	4770      	bx	lr
 80010f4:	40013000 	.word	0x40013000
 80010f8:	40023800 	.word	0x40023800
 80010fc:	40003800 	.word	0x40003800
 8001100:	40003c00 	.word	0x40003c00
 8001104:	40013400 	.word	0x40013400

08001108 <_ZN11SPI_Handler14SPI_GPIOs_InitEv>:
 *
 * @param None
 *
 * @return None
 **********************************************************************/
void SPI_Handler::SPI_GPIOs_Init() {
 8001108:	b590      	push	{r4, r7, lr}
 800110a:	b089      	sub	sp, #36	; 0x24
 800110c:	af06      	add	r7, sp, #24
 800110e:	6078      	str	r0, [r7, #4]
							GPIO_MODE_ALTFN,
							GPIO_SPEED_HIGH,
							IRQ_Prio_NO_15,
							GPIO_OP_TYPE_PP,
							GPIO_NO_PUPD,
							5);
 8001110:	200c      	movs	r0, #12
 8001112:	f000 fa45 	bl	80015a0 <_Znwj>
 8001116:	4603      	mov	r3, r0
 8001118:	461c      	mov	r4, r3
 800111a:	2305      	movs	r3, #5
 800111c:	9304      	str	r3, [sp, #16]
 800111e:	2300      	movs	r3, #0
 8001120:	9303      	str	r3, [sp, #12]
 8001122:	2300      	movs	r3, #0
 8001124:	9302      	str	r3, [sp, #8]
 8001126:	230f      	movs	r3, #15
 8001128:	9301      	str	r3, [sp, #4]
 800112a:	2303      	movs	r3, #3
 800112c:	9300      	str	r3, [sp, #0]
 800112e:	2302      	movs	r3, #2
 8001130:	2205      	movs	r2, #5
 8001132:	4927      	ldr	r1, [pc, #156]	; (80011d0 <_ZN11SPI_Handler14SPI_GPIOs_InitEv+0xc8>)
 8001134:	4620      	mov	r0, r4
 8001136:	f7ff fba9 	bl	800088c <_ZN12GPIO_HandlerC1EP13GPIO_RegDef_thhhhhhh>
	SPI_Sck = new GPIO_Handler(GPIOA,
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	621c      	str	r4, [r3, #32]
							GPIO_MODE_ALTFN,
							GPIO_SPEED_HIGH,
							IRQ_Prio_NO_15,
							GPIO_OP_TYPE_PP,
							GPIO_NO_PUPD,
							5);
 800113e:	200c      	movs	r0, #12
 8001140:	f000 fa2e 	bl	80015a0 <_Znwj>
 8001144:	4603      	mov	r3, r0
 8001146:	461c      	mov	r4, r3
 8001148:	2305      	movs	r3, #5
 800114a:	9304      	str	r3, [sp, #16]
 800114c:	2300      	movs	r3, #0
 800114e:	9303      	str	r3, [sp, #12]
 8001150:	2300      	movs	r3, #0
 8001152:	9302      	str	r3, [sp, #8]
 8001154:	230f      	movs	r3, #15
 8001156:	9301      	str	r3, [sp, #4]
 8001158:	2303      	movs	r3, #3
 800115a:	9300      	str	r3, [sp, #0]
 800115c:	2302      	movs	r3, #2
 800115e:	2207      	movs	r2, #7
 8001160:	491b      	ldr	r1, [pc, #108]	; (80011d0 <_ZN11SPI_Handler14SPI_GPIOs_InitEv+0xc8>)
 8001162:	4620      	mov	r0, r4
 8001164:	f7ff fb92 	bl	800088c <_ZN12GPIO_HandlerC1EP13GPIO_RegDef_thhhhhhh>
	SPI_MOSI = new GPIO_Handler(GPIOA,
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	625c      	str	r4, [r3, #36]	; 0x24
							GPIO_MODE_ALTFN,
							GPIO_SPEED_HIGH,
							IRQ_Prio_NO_15,
							GPIO_OP_TYPE_PP,
							GPIO_NO_PUPD,
							5);
 800116c:	200c      	movs	r0, #12
 800116e:	f000 fa17 	bl	80015a0 <_Znwj>
 8001172:	4603      	mov	r3, r0
 8001174:	461c      	mov	r4, r3
 8001176:	2305      	movs	r3, #5
 8001178:	9304      	str	r3, [sp, #16]
 800117a:	2300      	movs	r3, #0
 800117c:	9303      	str	r3, [sp, #12]
 800117e:	2300      	movs	r3, #0
 8001180:	9302      	str	r3, [sp, #8]
 8001182:	230f      	movs	r3, #15
 8001184:	9301      	str	r3, [sp, #4]
 8001186:	2303      	movs	r3, #3
 8001188:	9300      	str	r3, [sp, #0]
 800118a:	2302      	movs	r3, #2
 800118c:	2206      	movs	r2, #6
 800118e:	4910      	ldr	r1, [pc, #64]	; (80011d0 <_ZN11SPI_Handler14SPI_GPIOs_InitEv+0xc8>)
 8001190:	4620      	mov	r0, r4
 8001192:	f7ff fb7b 	bl	800088c <_ZN12GPIO_HandlerC1EP13GPIO_RegDef_thhhhhhh>
	SPI_MISO = new GPIO_Handler(GPIOA,
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	629c      	str	r4, [r3, #40]	; 0x28
							GPIO_MODE_ALTFN,
							GPIO_SPEED_HIGH,
							IRQ_Prio_NO_15,
							GPIO_OP_TYPE_PP,
							GPIO_NO_PUPD,
							5);
 800119a:	200c      	movs	r0, #12
 800119c:	f000 fa00 	bl	80015a0 <_Znwj>
 80011a0:	4603      	mov	r3, r0
 80011a2:	461c      	mov	r4, r3
 80011a4:	2305      	movs	r3, #5
 80011a6:	9304      	str	r3, [sp, #16]
 80011a8:	2300      	movs	r3, #0
 80011aa:	9303      	str	r3, [sp, #12]
 80011ac:	2300      	movs	r3, #0
 80011ae:	9302      	str	r3, [sp, #8]
 80011b0:	230f      	movs	r3, #15
 80011b2:	9301      	str	r3, [sp, #4]
 80011b4:	2303      	movs	r3, #3
 80011b6:	9300      	str	r3, [sp, #0]
 80011b8:	2302      	movs	r3, #2
 80011ba:	2204      	movs	r2, #4
 80011bc:	4904      	ldr	r1, [pc, #16]	; (80011d0 <_ZN11SPI_Handler14SPI_GPIOs_InitEv+0xc8>)
 80011be:	4620      	mov	r0, r4
 80011c0:	f7ff fb64 	bl	800088c <_ZN12GPIO_HandlerC1EP13GPIO_RegDef_thhhhhhh>
	SPI_NSS = new GPIO_Handler(GPIOA,
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	62dc      	str	r4, [r3, #44]	; 0x2c
}
 80011c8:	bf00      	nop
 80011ca:	370c      	adds	r7, #12
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd90      	pop	{r4, r7, pc}
 80011d0:	40020000 	.word	0x40020000

080011d4 <_ZN11SPI_Handler16SPI_GPIOs_DeInitEv>:
 *
 * @param None
 *
 * @return None
 **********************************************************************/
void SPI_Handler::SPI_GPIOs_DeInit() {
 80011d4:	b590      	push	{r4, r7, lr}
 80011d6:	b083      	sub	sp, #12
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
	delete SPI_Sck;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	6a1c      	ldr	r4, [r3, #32]
 80011e0:	2c00      	cmp	r4, #0
 80011e2:	d006      	beq.n	80011f2 <_ZN11SPI_Handler16SPI_GPIOs_DeInitEv+0x1e>
 80011e4:	4620      	mov	r0, r4
 80011e6:	f7ff fb9c 	bl	8000922 <_ZN12GPIO_HandlerD1Ev>
 80011ea:	210c      	movs	r1, #12
 80011ec:	4620      	mov	r0, r4
 80011ee:	f000 f9d5 	bl	800159c <_ZdlPvj>
	delete SPI_MISO;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 80011f6:	2c00      	cmp	r4, #0
 80011f8:	d006      	beq.n	8001208 <_ZN11SPI_Handler16SPI_GPIOs_DeInitEv+0x34>
 80011fa:	4620      	mov	r0, r4
 80011fc:	f7ff fb91 	bl	8000922 <_ZN12GPIO_HandlerD1Ev>
 8001200:	210c      	movs	r1, #12
 8001202:	4620      	mov	r0, r4
 8001204:	f000 f9ca 	bl	800159c <_ZdlPvj>
	delete SPI_MOSI;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800120c:	2c00      	cmp	r4, #0
 800120e:	d006      	beq.n	800121e <_ZN11SPI_Handler16SPI_GPIOs_DeInitEv+0x4a>
 8001210:	4620      	mov	r0, r4
 8001212:	f7ff fb86 	bl	8000922 <_ZN12GPIO_HandlerD1Ev>
 8001216:	210c      	movs	r1, #12
 8001218:	4620      	mov	r0, r4
 800121a:	f000 f9bf 	bl	800159c <_ZdlPvj>
	delete SPI_NSS;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8001222:	2c00      	cmp	r4, #0
 8001224:	d006      	beq.n	8001234 <_ZN11SPI_Handler16SPI_GPIOs_DeInitEv+0x60>
 8001226:	4620      	mov	r0, r4
 8001228:	f7ff fb7b 	bl	8000922 <_ZN12GPIO_HandlerD1Ev>
 800122c:	210c      	movs	r1, #12
 800122e:	4620      	mov	r0, r4
 8001230:	f000 f9b4 	bl	800159c <_ZdlPvj>
}
 8001234:	bf00      	nop
 8001236:	370c      	adds	r7, #12
 8001238:	46bd      	mov	sp, r7
 800123a:	bd90      	pop	{r4, r7, pc}

0800123c <_ZN11SPI_Handler8SPI_InitEv>:
 *
 * @param None
 *
 * @return None
 **********************************************************************/
void SPI_Handler::SPI_Init() {
 800123c:	b480      	push	{r7}
 800123e:	b085      	sub	sp, #20
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
    // Lets configure the SPI_CR1 register
    uint32_t tempReg = 0;
 8001244:	2300      	movs	r3, #0
 8001246:	60fb      	str	r3, [r7, #12]

    // 1. configure the device mode
    tempReg |= SPIx_.SPIConfig.SPI_DeviceMode << SPI_CR1_MSTR;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	791b      	ldrb	r3, [r3, #4]
 800124c:	009b      	lsls	r3, r3, #2
 800124e:	461a      	mov	r2, r3
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	4313      	orrs	r3, r2
 8001254:	60fb      	str	r3, [r7, #12]
    // 2. configure the bus config
    if(SPI_BUS_CONFIG_FD == SPIx_.SPIConfig.SPI_BusConfig) {
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	795b      	ldrb	r3, [r3, #5]
 800125a:	2b01      	cmp	r3, #1
 800125c:	d104      	bne.n	8001268 <_ZN11SPI_Handler8SPI_InitEv+0x2c>
        // bidi mode should be cleared
        tempReg &= ~(1 << SPI_CR1_BIDIMODE);
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001264:	60fb      	str	r3, [r7, #12]
 8001266:	e018      	b.n	800129a <_ZN11SPI_Handler8SPI_InitEv+0x5e>
    }
    else if(SPI_BUS_CONFIG_HD == SPIx_.SPIConfig.SPI_BusConfig) {
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	795b      	ldrb	r3, [r3, #5]
 800126c:	2b02      	cmp	r3, #2
 800126e:	d108      	bne.n	8001282 <_ZN11SPI_Handler8SPI_InitEv+0x46>
        // bidi mode should be set
        tempReg |= (1 << SPI_CR1_BIDIMODE);
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001276:	60fb      	str	r3, [r7, #12]
        // bidioe mode should be set
        tempReg |= (1 << SPI_CR1_BIDIOE);
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800127e:	60fb      	str	r3, [r7, #12]
 8001280:	e00b      	b.n	800129a <_ZN11SPI_Handler8SPI_InitEv+0x5e>
    }
    else if(SPI_BUS_CONFIG_SIMPLEX_RXONLY == SPIx_.SPIConfig.SPI_BusConfig) {
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	795b      	ldrb	r3, [r3, #5]
 8001286:	2b03      	cmp	r3, #3
 8001288:	d107      	bne.n	800129a <_ZN11SPI_Handler8SPI_InitEv+0x5e>
        // bidi mode should be cleared, for active SCLK, because SLCK is only activate when MOSI is activate
        tempReg &= ~(1 << SPI_CR1_BIDIMODE);
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001290:	60fb      	str	r3, [r7, #12]
        // RXONLY should be set
        tempReg |= (1 << SPI_CR1_RXONLY);
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001298:	60fb      	str	r3, [r7, #12]
    }

    // 3. configure for clock speed
    tempReg |= (SPIx_.SPIConfig.SPI_SclkSpeed << SPI_CR1_BR);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	799b      	ldrb	r3, [r3, #6]
 800129e:	00db      	lsls	r3, r3, #3
 80012a0:	461a      	mov	r2, r3
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	4313      	orrs	r3, r2
 80012a6:	60fb      	str	r3, [r7, #12]

    // 4. configure for data format
    tempReg |= (SPIx_.SPIConfig.SPI_DFF << SPI_CR1_DFF);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	79db      	ldrb	r3, [r3, #7]
 80012ac:	02db      	lsls	r3, r3, #11
 80012ae:	461a      	mov	r2, r3
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	4313      	orrs	r3, r2
 80012b4:	60fb      	str	r3, [r7, #12]

    // 5. configure CPOL
    tempReg |= (SPIx_.SPIConfig.SPI_CPOL << SPI_CR1_CPOL);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	7a1b      	ldrb	r3, [r3, #8]
 80012ba:	005b      	lsls	r3, r3, #1
 80012bc:	461a      	mov	r2, r3
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	4313      	orrs	r3, r2
 80012c2:	60fb      	str	r3, [r7, #12]

    // 6. configure CPOA
    tempReg |= (SPIx_.SPIConfig.SPI_CPHA << SPI_CR1_CPHA);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	7a5b      	ldrb	r3, [r3, #9]
 80012c8:	461a      	mov	r2, r3
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	4313      	orrs	r3, r2
 80012ce:	60fb      	str	r3, [r7, #12]

    tempReg |= (SPIx_.SPIConfig.SPI_SSM << SPI_CR1_SSM);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	7a9b      	ldrb	r3, [r3, #10]
 80012d4:	025b      	lsls	r3, r3, #9
 80012d6:	461a      	mov	r2, r3
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	4313      	orrs	r3, r2
 80012dc:	60fb      	str	r3, [r7, #12]

    SPIx_.pSPIx->CR1 = tempReg;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	68fa      	ldr	r2, [r7, #12]
 80012e4:	601a      	str	r2, [r3, #0]
}
 80012e6:	bf00      	nop
 80012e8:	3714      	adds	r7, #20
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bc80      	pop	{r7}
 80012ee:	4770      	bx	lr

080012f0 <_ZN11SPI_Handler10SPI_DeInitEv>:
 *
 * @param None
 *
 * @return None
 **********************************************************************/
void SPI_Handler::SPI_DeInit() {
 80012f0:	b480      	push	{r7}
 80012f2:	b083      	sub	sp, #12
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
	if (SPI1 == SPIx_.pSPIx) {
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4a24      	ldr	r2, [pc, #144]	; (8001390 <_ZN11SPI_Handler10SPI_DeInitEv+0xa0>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d10c      	bne.n	800131c <_ZN11SPI_Handler10SPI_DeInitEv+0x2c>
		SPI1_REG_RESET();
 8001302:	4b24      	ldr	r3, [pc, #144]	; (8001394 <_ZN11SPI_Handler10SPI_DeInitEv+0xa4>)
 8001304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001306:	4a23      	ldr	r2, [pc, #140]	; (8001394 <_ZN11SPI_Handler10SPI_DeInitEv+0xa4>)
 8001308:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800130c:	6253      	str	r3, [r2, #36]	; 0x24
 800130e:	4b21      	ldr	r3, [pc, #132]	; (8001394 <_ZN11SPI_Handler10SPI_DeInitEv+0xa4>)
 8001310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001312:	4a20      	ldr	r2, [pc, #128]	; (8001394 <_ZN11SPI_Handler10SPI_DeInitEv+0xa4>)
 8001314:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001318:	6253      	str	r3, [r2, #36]	; 0x24
		SPI3_REG_RESET();
	}
	else if (SPI4 == SPIx_.pSPIx) {
		SPI4_REG_RESET();
	}
}
 800131a:	e034      	b.n	8001386 <_ZN11SPI_Handler10SPI_DeInitEv+0x96>
	else if (SPI2 == SPIx_.pSPIx) {
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4a1d      	ldr	r2, [pc, #116]	; (8001398 <_ZN11SPI_Handler10SPI_DeInitEv+0xa8>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d10c      	bne.n	8001340 <_ZN11SPI_Handler10SPI_DeInitEv+0x50>
		SPI2_REG_RESET();
 8001326:	4b1b      	ldr	r3, [pc, #108]	; (8001394 <_ZN11SPI_Handler10SPI_DeInitEv+0xa4>)
 8001328:	6a1b      	ldr	r3, [r3, #32]
 800132a:	4a1a      	ldr	r2, [pc, #104]	; (8001394 <_ZN11SPI_Handler10SPI_DeInitEv+0xa4>)
 800132c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001330:	6213      	str	r3, [r2, #32]
 8001332:	4b18      	ldr	r3, [pc, #96]	; (8001394 <_ZN11SPI_Handler10SPI_DeInitEv+0xa4>)
 8001334:	6a1b      	ldr	r3, [r3, #32]
 8001336:	4a17      	ldr	r2, [pc, #92]	; (8001394 <_ZN11SPI_Handler10SPI_DeInitEv+0xa4>)
 8001338:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800133c:	6213      	str	r3, [r2, #32]
}
 800133e:	e022      	b.n	8001386 <_ZN11SPI_Handler10SPI_DeInitEv+0x96>
	else if (SPI3 == SPIx_.pSPIx) {
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4a15      	ldr	r2, [pc, #84]	; (800139c <_ZN11SPI_Handler10SPI_DeInitEv+0xac>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d10c      	bne.n	8001364 <_ZN11SPI_Handler10SPI_DeInitEv+0x74>
		SPI3_REG_RESET();
 800134a:	4b12      	ldr	r3, [pc, #72]	; (8001394 <_ZN11SPI_Handler10SPI_DeInitEv+0xa4>)
 800134c:	6a1b      	ldr	r3, [r3, #32]
 800134e:	4a11      	ldr	r2, [pc, #68]	; (8001394 <_ZN11SPI_Handler10SPI_DeInitEv+0xa4>)
 8001350:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001354:	6213      	str	r3, [r2, #32]
 8001356:	4b0f      	ldr	r3, [pc, #60]	; (8001394 <_ZN11SPI_Handler10SPI_DeInitEv+0xa4>)
 8001358:	6a1b      	ldr	r3, [r3, #32]
 800135a:	4a0e      	ldr	r2, [pc, #56]	; (8001394 <_ZN11SPI_Handler10SPI_DeInitEv+0xa4>)
 800135c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001360:	6213      	str	r3, [r2, #32]
}
 8001362:	e010      	b.n	8001386 <_ZN11SPI_Handler10SPI_DeInitEv+0x96>
	else if (SPI4 == SPIx_.pSPIx) {
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a0d      	ldr	r2, [pc, #52]	; (80013a0 <_ZN11SPI_Handler10SPI_DeInitEv+0xb0>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d10b      	bne.n	8001386 <_ZN11SPI_Handler10SPI_DeInitEv+0x96>
		SPI4_REG_RESET();
 800136e:	4b09      	ldr	r3, [pc, #36]	; (8001394 <_ZN11SPI_Handler10SPI_DeInitEv+0xa4>)
 8001370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001372:	4a08      	ldr	r2, [pc, #32]	; (8001394 <_ZN11SPI_Handler10SPI_DeInitEv+0xa4>)
 8001374:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001378:	6253      	str	r3, [r2, #36]	; 0x24
 800137a:	4b06      	ldr	r3, [pc, #24]	; (8001394 <_ZN11SPI_Handler10SPI_DeInitEv+0xa4>)
 800137c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800137e:	4a05      	ldr	r2, [pc, #20]	; (8001394 <_ZN11SPI_Handler10SPI_DeInitEv+0xa4>)
 8001380:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001384:	6253      	str	r3, [r2, #36]	; 0x24
}
 8001386:	bf00      	nop
 8001388:	370c      	adds	r7, #12
 800138a:	46bd      	mov	sp, r7
 800138c:	bc80      	pop	{r7}
 800138e:	4770      	bx	lr
 8001390:	40013000 	.word	0x40013000
 8001394:	40023800 	.word	0x40023800
 8001398:	40003800 	.word	0x40003800
 800139c:	40003c00 	.word	0x40003c00
 80013a0:	40013400 	.word	0x40013400

080013a4 <_ZN11SPI_Handler21SPI_PeripheralControlEh>:
 *
 * @param None
 *
 * @return None
 **********************************************************************/
void SPI_Handler::SPI_PeripheralControl(uint8_t EnOrDi) {
 80013a4:	b480      	push	{r7}
 80013a6:	b083      	sub	sp, #12
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
 80013ac:	460b      	mov	r3, r1
 80013ae:	70fb      	strb	r3, [r7, #3]
    if(ENABLE == EnOrDi) {
 80013b0:	78fb      	ldrb	r3, [r7, #3]
 80013b2:	2b01      	cmp	r3, #1
 80013b4:	d108      	bne.n	80013c8 <_ZN11SPI_Handler21SPI_PeripheralControlEh+0x24>
        SPIx_.pSPIx->CR1 |= (1 << SPI_CR1_SPE);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	681a      	ldr	r2, [r3, #0]
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80013c4:	601a      	str	r2, [r3, #0]
    }
    else {
        SPIx_.pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
    }
}
 80013c6:	e007      	b.n	80013d8 <_ZN11SPI_Handler21SPI_PeripheralControlEh+0x34>
        SPIx_.pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	681a      	ldr	r2, [r3, #0]
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80013d6:	601a      	str	r2, [r3, #0]
}
 80013d8:	bf00      	nop
 80013da:	370c      	adds	r7, #12
 80013dc:	46bd      	mov	sp, r7
 80013de:	bc80      	pop	{r7}
 80013e0:	4770      	bx	lr

080013e2 <_ZN11SPI_Handler17SPI_GetFlagStatusEh>:
 *
 * @param None
 *
 * @return None
 **********************************************************************/
uint8_t SPI_Handler::SPI_GetFlagStatus(uint8_t FlagName) {
 80013e2:	b480      	push	{r7}
 80013e4:	b083      	sub	sp, #12
 80013e6:	af00      	add	r7, sp, #0
 80013e8:	6078      	str	r0, [r7, #4]
 80013ea:	460b      	mov	r3, r1
 80013ec:	70fb      	strb	r3, [r7, #3]
    if(SPIx_.pSPIx->SR & FlagName) {
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	689a      	ldr	r2, [r3, #8]
 80013f4:	78fb      	ldrb	r3, [r7, #3]
 80013f6:	4013      	ands	r3, r2
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	bf14      	ite	ne
 80013fc:	2301      	movne	r3, #1
 80013fe:	2300      	moveq	r3, #0
 8001400:	b2db      	uxtb	r3, r3
 8001402:	2b00      	cmp	r3, #0
 8001404:	d001      	beq.n	800140a <_ZN11SPI_Handler17SPI_GetFlagStatusEh+0x28>
        return FLAG_SET;
 8001406:	2301      	movs	r3, #1
 8001408:	e000      	b.n	800140c <_ZN11SPI_Handler17SPI_GetFlagStatusEh+0x2a>
    }
    return FLAG_RESET;
 800140a:	2300      	movs	r3, #0
}
 800140c:	4618      	mov	r0, r3
 800140e:	370c      	adds	r7, #12
 8001410:	46bd      	mov	sp, r7
 8001412:	bc80      	pop	{r7}
 8001414:	4770      	bx	lr

08001416 <_ZN11SPI_Handler12SPI_SendDataEPhm>:
 * @param None
 * @Node              - This is blocking call
 *
 * @return None
 **********************************************************************/
void SPI_Handler::SPI_SendData(uint8_t *pTxBuffer, uint32_t Len) {
 8001416:	b580      	push	{r7, lr}
 8001418:	b084      	sub	sp, #16
 800141a:	af00      	add	r7, sp, #0
 800141c:	60f8      	str	r0, [r7, #12]
 800141e:	60b9      	str	r1, [r7, #8]
 8001420:	607a      	str	r2, [r7, #4]
	SPI_PeripheralControl(ENABLE);
 8001422:	2101      	movs	r1, #1
 8001424:	68f8      	ldr	r0, [r7, #12]
 8001426:	f7ff ffbd 	bl	80013a4 <_ZN11SPI_Handler21SPI_PeripheralControlEh>
    while(Len > 0) {
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d030      	beq.n	8001492 <_ZN11SPI_Handler12SPI_SendDataEPhm+0x7c>
        // 1. wait util tx buffer empty
        while(SPI_GetFlagStatus(SPI_TXE_FLAG) == FLAG_RESET);
 8001430:	2102      	movs	r1, #2
 8001432:	68f8      	ldr	r0, [r7, #12]
 8001434:	f7ff ffd5 	bl	80013e2 <_ZN11SPI_Handler17SPI_GetFlagStatusEh>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	bf0c      	ite	eq
 800143e:	2301      	moveq	r3, #1
 8001440:	2300      	movne	r3, #0
 8001442:	b2db      	uxtb	r3, r3
 8001444:	2b00      	cmp	r3, #0
 8001446:	d000      	beq.n	800144a <_ZN11SPI_Handler12SPI_SendDataEPhm+0x34>
 8001448:	e7f2      	b.n	8001430 <_ZN11SPI_Handler12SPI_SendDataEPhm+0x1a>

        // 2. check the DFF bit in CR1
        if(SPIx_.pSPIx->CR1 & (1 << SPI_CR1_DFF)) {
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001454:	2b00      	cmp	r3, #0
 8001456:	bf14      	ite	ne
 8001458:	2301      	movne	r3, #1
 800145a:	2300      	moveq	r3, #0
 800145c:	b2db      	uxtb	r3, r3
 800145e:	2b00      	cmp	r3, #0
 8001460:	d00b      	beq.n	800147a <_ZN11SPI_Handler12SPI_SendDataEPhm+0x64>
            // 16 BIT DFF
            // 1. load the data into the DR
            SPIx_.pSPIx->DR = *((uint16_t *) pTxBuffer);
 8001462:	68bb      	ldr	r3, [r7, #8]
 8001464:	881a      	ldrh	r2, [r3, #0]
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	60da      	str	r2, [r3, #12]
            Len -= 2;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	3b02      	subs	r3, #2
 8001470:	607b      	str	r3, [r7, #4]
            (uint16_t *)pTxBuffer++;
 8001472:	68bb      	ldr	r3, [r7, #8]
 8001474:	3301      	adds	r3, #1
 8001476:	60bb      	str	r3, [r7, #8]
 8001478:	e7d7      	b.n	800142a <_ZN11SPI_Handler12SPI_SendDataEPhm+0x14>
        }
        else {
            SPIx_.pSPIx->DR = *pTxBuffer;
 800147a:	68bb      	ldr	r3, [r7, #8]
 800147c:	781a      	ldrb	r2, [r3, #0]
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	60da      	str	r2, [r3, #12]
            Len -= 1;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	3b01      	subs	r3, #1
 8001488:	607b      	str	r3, [r7, #4]
            pTxBuffer++;
 800148a:	68bb      	ldr	r3, [r7, #8]
 800148c:	3301      	adds	r3, #1
 800148e:	60bb      	str	r3, [r7, #8]
    while(Len > 0) {
 8001490:	e7cb      	b.n	800142a <_ZN11SPI_Handler12SPI_SendDataEPhm+0x14>
        }
    }
}
 8001492:	bf00      	nop
 8001494:	3710      	adds	r7, #16
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}

0800149a <_ZN11SPI_Handler14SPI_SSOEConfigEh>:
//	answer = SPIx_.pSPIx->DR;
//	return answer;
//}


void SPI_Handler::SPI_SSOEConfig(uint8_t EnOrDi) {
 800149a:	b480      	push	{r7}
 800149c:	b083      	sub	sp, #12
 800149e:	af00      	add	r7, sp, #0
 80014a0:	6078      	str	r0, [r7, #4]
 80014a2:	460b      	mov	r3, r1
 80014a4:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE) {
 80014a6:	78fb      	ldrb	r3, [r7, #3]
 80014a8:	2b01      	cmp	r3, #1
 80014aa:	d108      	bne.n	80014be <_ZN11SPI_Handler14SPI_SSOEConfigEh+0x24>
		SPIx_.pSPIx->CR2 |= (1 << SPI_CR2_SSOE);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	685a      	ldr	r2, [r3, #4]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f042 0204 	orr.w	r2, r2, #4
 80014ba:	605a      	str	r2, [r3, #4]
	}
	else {
		SPIx_.pSPIx->CR2 &= ~(1 << SPI_CR2_SSOE);
	}
}
 80014bc:	e007      	b.n	80014ce <_ZN11SPI_Handler14SPI_SSOEConfigEh+0x34>
		SPIx_.pSPIx->CR2 &= ~(1 << SPI_CR2_SSOE);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	685a      	ldr	r2, [r3, #4]
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f022 0204 	bic.w	r2, r2, #4
 80014cc:	605a      	str	r2, [r3, #4]
}
 80014ce:	bf00      	nop
 80014d0:	370c      	adds	r7, #12
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bc80      	pop	{r7}
 80014d6:	4770      	bx	lr

080014d8 <_ZN11SPI_Handler13SPI_SSIConfigEh>:
 *
 * @Note              -

 */
void SPI_Handler::SPI_SSIConfig(uint8_t EnOrDi)
{
 80014d8:	b480      	push	{r7}
 80014da:	b083      	sub	sp, #12
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
 80014e0:	460b      	mov	r3, r1
 80014e2:	70fb      	strb	r3, [r7, #3]
    if(EnOrDi == ENABLE)
 80014e4:	78fb      	ldrb	r3, [r7, #3]
 80014e6:	2b01      	cmp	r3, #1
 80014e8:	d108      	bne.n	80014fc <_ZN11SPI_Handler13SPI_SSIConfigEh+0x24>
    {
        SPIx_.pSPIx->CR1 |=  (1 << SPI_CR1_SSI);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	681a      	ldr	r2, [r3, #0]
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80014f8:	601a      	str	r2, [r3, #0]
    }else
    {
        SPIx_.pSPIx->CR1 &=  ~(1 << SPI_CR1_SSI);
    }
}
 80014fa:	e007      	b.n	800150c <_ZN11SPI_Handler13SPI_SSIConfigEh+0x34>
        SPIx_.pSPIx->CR1 &=  ~(1 << SPI_CR1_SSI);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	681a      	ldr	r2, [r3, #0]
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800150a:	601a      	str	r2, [r3, #0]
}
 800150c:	bf00      	nop
 800150e:	370c      	adds	r7, #12
 8001510:	46bd      	mov	sp, r7
 8001512:	bc80      	pop	{r7}
 8001514:	4770      	bx	lr

08001516 <_ZN11SPI_Handler15SPI_ReceiveDataEPhm>:


void SPI_Handler::SPI_ReceiveData(uint8_t *pRxBuffer, uint32_t Len)
{
 8001516:	b580      	push	{r7, lr}
 8001518:	b084      	sub	sp, #16
 800151a:	af00      	add	r7, sp, #0
 800151c:	60f8      	str	r0, [r7, #12]
 800151e:	60b9      	str	r1, [r7, #8]
 8001520:	607a      	str	r2, [r7, #4]
	while(Len > 0)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d035      	beq.n	8001594 <_ZN11SPI_Handler15SPI_ReceiveDataEPhm+0x7e>
		{
			//1. wait until RXNE is set
			while(SPI_GetFlagStatus(SPI_RXNE_FLAG)  == (uint8_t)FLAG_RESET );
 8001528:	2101      	movs	r1, #1
 800152a:	68f8      	ldr	r0, [r7, #12]
 800152c:	f7ff ff59 	bl	80013e2 <_ZN11SPI_Handler17SPI_GetFlagStatusEh>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	bf0c      	ite	eq
 8001536:	2301      	moveq	r3, #1
 8001538:	2300      	movne	r3, #0
 800153a:	b2db      	uxtb	r3, r3
 800153c:	2b00      	cmp	r3, #0
 800153e:	d000      	beq.n	8001542 <_ZN11SPI_Handler15SPI_ReceiveDataEPhm+0x2c>
 8001540:	e7f2      	b.n	8001528 <_ZN11SPI_Handler15SPI_ReceiveDataEPhm+0x12>

			//2. check the DFF bit in CR1
			if( (SPIx_.pSPIx->CR1 & ( 1 << SPI_CR1_DFF) ) )
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800154c:	2b00      	cmp	r3, #0
 800154e:	bf14      	ite	ne
 8001550:	2301      	movne	r3, #1
 8001552:	2300      	moveq	r3, #0
 8001554:	b2db      	uxtb	r3, r3
 8001556:	2b00      	cmp	r3, #0
 8001558:	d00f      	beq.n	800157a <_ZN11SPI_Handler15SPI_ReceiveDataEPhm+0x64>
			{
				//16 bit DFF
				//1. load the data from DR to Rxbuffer address
				 *((uint16_t*)pRxBuffer) = SPIx_.pSPIx->DR ;
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	68da      	ldr	r2, [r3, #12]
 8001560:	68bb      	ldr	r3, [r7, #8]
 8001562:	b292      	uxth	r2, r2
 8001564:	801a      	strh	r2, [r3, #0]
				Len--;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	3b01      	subs	r3, #1
 800156a:	607b      	str	r3, [r7, #4]
				Len--;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	3b01      	subs	r3, #1
 8001570:	607b      	str	r3, [r7, #4]
				(uint16_t*)pRxBuffer++;
 8001572:	68bb      	ldr	r3, [r7, #8]
 8001574:	3301      	adds	r3, #1
 8001576:	60bb      	str	r3, [r7, #8]
 8001578:	e7d3      	b.n	8001522 <_ZN11SPI_Handler15SPI_ReceiveDataEPhm+0xc>
			}else
			{
				//8 bit DFF
				*(pRxBuffer) = SPIx_.pSPIx->DR ;
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	68da      	ldr	r2, [r3, #12]
 8001580:	68bb      	ldr	r3, [r7, #8]
 8001582:	b2d2      	uxtb	r2, r2
 8001584:	701a      	strb	r2, [r3, #0]
				Len--;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	3b01      	subs	r3, #1
 800158a:	607b      	str	r3, [r7, #4]
				pRxBuffer++;
 800158c:	68bb      	ldr	r3, [r7, #8]
 800158e:	3301      	adds	r3, #1
 8001590:	60bb      	str	r3, [r7, #8]
	while(Len > 0)
 8001592:	e7c6      	b.n	8001522 <_ZN11SPI_Handler15SPI_ReceiveDataEPhm+0xc>
			}
		}

}
 8001594:	bf00      	nop
 8001596:	3710      	adds	r7, #16
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}

0800159c <_ZdlPvj>:
 800159c:	f000 b811 	b.w	80015c2 <_ZdlPv>

080015a0 <_Znwj>:
 80015a0:	b510      	push	{r4, lr}
 80015a2:	2800      	cmp	r0, #0
 80015a4:	bf14      	ite	ne
 80015a6:	4604      	movne	r4, r0
 80015a8:	2401      	moveq	r4, #1
 80015aa:	4620      	mov	r0, r4
 80015ac:	f000 f846 	bl	800163c <malloc>
 80015b0:	b930      	cbnz	r0, 80015c0 <_Znwj+0x20>
 80015b2:	f000 f809 	bl	80015c8 <_ZSt15get_new_handlerv>
 80015b6:	b908      	cbnz	r0, 80015bc <_Znwj+0x1c>
 80015b8:	f000 f80e 	bl	80015d8 <abort>
 80015bc:	4780      	blx	r0
 80015be:	e7f4      	b.n	80015aa <_Znwj+0xa>
 80015c0:	bd10      	pop	{r4, pc}

080015c2 <_ZdlPv>:
 80015c2:	f000 b843 	b.w	800164c <free>
	...

080015c8 <_ZSt15get_new_handlerv>:
 80015c8:	4b02      	ldr	r3, [pc, #8]	; (80015d4 <_ZSt15get_new_handlerv+0xc>)
 80015ca:	6818      	ldr	r0, [r3, #0]
 80015cc:	f3bf 8f5b 	dmb	ish
 80015d0:	4770      	bx	lr
 80015d2:	bf00      	nop
 80015d4:	2000008c 	.word	0x2000008c

080015d8 <abort>:
 80015d8:	b508      	push	{r3, lr}
 80015da:	2006      	movs	r0, #6
 80015dc:	f000 f926 	bl	800182c <raise>
 80015e0:	2001      	movs	r0, #1
 80015e2:	f7ff f8a8 	bl	8000736 <_exit>
	...

080015e8 <__errno>:
 80015e8:	4b01      	ldr	r3, [pc, #4]	; (80015f0 <__errno+0x8>)
 80015ea:	6818      	ldr	r0, [r3, #0]
 80015ec:	4770      	bx	lr
 80015ee:	bf00      	nop
 80015f0:	20000000 	.word	0x20000000

080015f4 <__libc_init_array>:
 80015f4:	b570      	push	{r4, r5, r6, lr}
 80015f6:	4e0d      	ldr	r6, [pc, #52]	; (800162c <__libc_init_array+0x38>)
 80015f8:	4c0d      	ldr	r4, [pc, #52]	; (8001630 <__libc_init_array+0x3c>)
 80015fa:	1ba4      	subs	r4, r4, r6
 80015fc:	10a4      	asrs	r4, r4, #2
 80015fe:	2500      	movs	r5, #0
 8001600:	42a5      	cmp	r5, r4
 8001602:	d109      	bne.n	8001618 <__libc_init_array+0x24>
 8001604:	4e0b      	ldr	r6, [pc, #44]	; (8001634 <__libc_init_array+0x40>)
 8001606:	4c0c      	ldr	r4, [pc, #48]	; (8001638 <__libc_init_array+0x44>)
 8001608:	f000 f92e 	bl	8001868 <_init>
 800160c:	1ba4      	subs	r4, r4, r6
 800160e:	10a4      	asrs	r4, r4, #2
 8001610:	2500      	movs	r5, #0
 8001612:	42a5      	cmp	r5, r4
 8001614:	d105      	bne.n	8001622 <__libc_init_array+0x2e>
 8001616:	bd70      	pop	{r4, r5, r6, pc}
 8001618:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800161c:	4798      	blx	r3
 800161e:	3501      	adds	r5, #1
 8001620:	e7ee      	b.n	8001600 <__libc_init_array+0xc>
 8001622:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001626:	4798      	blx	r3
 8001628:	3501      	adds	r5, #1
 800162a:	e7f2      	b.n	8001612 <__libc_init_array+0x1e>
 800162c:	08001880 	.word	0x08001880
 8001630:	08001880 	.word	0x08001880
 8001634:	08001880 	.word	0x08001880
 8001638:	08001888 	.word	0x08001888

0800163c <malloc>:
 800163c:	4b02      	ldr	r3, [pc, #8]	; (8001648 <malloc+0xc>)
 800163e:	4601      	mov	r1, r0
 8001640:	6818      	ldr	r0, [r3, #0]
 8001642:	f000 b861 	b.w	8001708 <_malloc_r>
 8001646:	bf00      	nop
 8001648:	20000000 	.word	0x20000000

0800164c <free>:
 800164c:	4b02      	ldr	r3, [pc, #8]	; (8001658 <free+0xc>)
 800164e:	4601      	mov	r1, r0
 8001650:	6818      	ldr	r0, [r3, #0]
 8001652:	f000 b80b 	b.w	800166c <_free_r>
 8001656:	bf00      	nop
 8001658:	20000000 	.word	0x20000000

0800165c <memset>:
 800165c:	4402      	add	r2, r0
 800165e:	4603      	mov	r3, r0
 8001660:	4293      	cmp	r3, r2
 8001662:	d100      	bne.n	8001666 <memset+0xa>
 8001664:	4770      	bx	lr
 8001666:	f803 1b01 	strb.w	r1, [r3], #1
 800166a:	e7f9      	b.n	8001660 <memset+0x4>

0800166c <_free_r>:
 800166c:	b538      	push	{r3, r4, r5, lr}
 800166e:	4605      	mov	r5, r0
 8001670:	2900      	cmp	r1, #0
 8001672:	d045      	beq.n	8001700 <_free_r+0x94>
 8001674:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001678:	1f0c      	subs	r4, r1, #4
 800167a:	2b00      	cmp	r3, #0
 800167c:	bfb8      	it	lt
 800167e:	18e4      	addlt	r4, r4, r3
 8001680:	f000 f8f0 	bl	8001864 <__malloc_lock>
 8001684:	4a1f      	ldr	r2, [pc, #124]	; (8001704 <_free_r+0x98>)
 8001686:	6813      	ldr	r3, [r2, #0]
 8001688:	4610      	mov	r0, r2
 800168a:	b933      	cbnz	r3, 800169a <_free_r+0x2e>
 800168c:	6063      	str	r3, [r4, #4]
 800168e:	6014      	str	r4, [r2, #0]
 8001690:	4628      	mov	r0, r5
 8001692:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001696:	f000 b8e6 	b.w	8001866 <__malloc_unlock>
 800169a:	42a3      	cmp	r3, r4
 800169c:	d90c      	bls.n	80016b8 <_free_r+0x4c>
 800169e:	6821      	ldr	r1, [r4, #0]
 80016a0:	1862      	adds	r2, r4, r1
 80016a2:	4293      	cmp	r3, r2
 80016a4:	bf04      	itt	eq
 80016a6:	681a      	ldreq	r2, [r3, #0]
 80016a8:	685b      	ldreq	r3, [r3, #4]
 80016aa:	6063      	str	r3, [r4, #4]
 80016ac:	bf04      	itt	eq
 80016ae:	1852      	addeq	r2, r2, r1
 80016b0:	6022      	streq	r2, [r4, #0]
 80016b2:	6004      	str	r4, [r0, #0]
 80016b4:	e7ec      	b.n	8001690 <_free_r+0x24>
 80016b6:	4613      	mov	r3, r2
 80016b8:	685a      	ldr	r2, [r3, #4]
 80016ba:	b10a      	cbz	r2, 80016c0 <_free_r+0x54>
 80016bc:	42a2      	cmp	r2, r4
 80016be:	d9fa      	bls.n	80016b6 <_free_r+0x4a>
 80016c0:	6819      	ldr	r1, [r3, #0]
 80016c2:	1858      	adds	r0, r3, r1
 80016c4:	42a0      	cmp	r0, r4
 80016c6:	d10b      	bne.n	80016e0 <_free_r+0x74>
 80016c8:	6820      	ldr	r0, [r4, #0]
 80016ca:	4401      	add	r1, r0
 80016cc:	1858      	adds	r0, r3, r1
 80016ce:	4282      	cmp	r2, r0
 80016d0:	6019      	str	r1, [r3, #0]
 80016d2:	d1dd      	bne.n	8001690 <_free_r+0x24>
 80016d4:	6810      	ldr	r0, [r2, #0]
 80016d6:	6852      	ldr	r2, [r2, #4]
 80016d8:	605a      	str	r2, [r3, #4]
 80016da:	4401      	add	r1, r0
 80016dc:	6019      	str	r1, [r3, #0]
 80016de:	e7d7      	b.n	8001690 <_free_r+0x24>
 80016e0:	d902      	bls.n	80016e8 <_free_r+0x7c>
 80016e2:	230c      	movs	r3, #12
 80016e4:	602b      	str	r3, [r5, #0]
 80016e6:	e7d3      	b.n	8001690 <_free_r+0x24>
 80016e8:	6820      	ldr	r0, [r4, #0]
 80016ea:	1821      	adds	r1, r4, r0
 80016ec:	428a      	cmp	r2, r1
 80016ee:	bf04      	itt	eq
 80016f0:	6811      	ldreq	r1, [r2, #0]
 80016f2:	6852      	ldreq	r2, [r2, #4]
 80016f4:	6062      	str	r2, [r4, #4]
 80016f6:	bf04      	itt	eq
 80016f8:	1809      	addeq	r1, r1, r0
 80016fa:	6021      	streq	r1, [r4, #0]
 80016fc:	605c      	str	r4, [r3, #4]
 80016fe:	e7c7      	b.n	8001690 <_free_r+0x24>
 8001700:	bd38      	pop	{r3, r4, r5, pc}
 8001702:	bf00      	nop
 8001704:	20000090 	.word	0x20000090

08001708 <_malloc_r>:
 8001708:	b570      	push	{r4, r5, r6, lr}
 800170a:	1ccd      	adds	r5, r1, #3
 800170c:	f025 0503 	bic.w	r5, r5, #3
 8001710:	3508      	adds	r5, #8
 8001712:	2d0c      	cmp	r5, #12
 8001714:	bf38      	it	cc
 8001716:	250c      	movcc	r5, #12
 8001718:	2d00      	cmp	r5, #0
 800171a:	4606      	mov	r6, r0
 800171c:	db01      	blt.n	8001722 <_malloc_r+0x1a>
 800171e:	42a9      	cmp	r1, r5
 8001720:	d903      	bls.n	800172a <_malloc_r+0x22>
 8001722:	230c      	movs	r3, #12
 8001724:	6033      	str	r3, [r6, #0]
 8001726:	2000      	movs	r0, #0
 8001728:	bd70      	pop	{r4, r5, r6, pc}
 800172a:	f000 f89b 	bl	8001864 <__malloc_lock>
 800172e:	4a21      	ldr	r2, [pc, #132]	; (80017b4 <_malloc_r+0xac>)
 8001730:	6814      	ldr	r4, [r2, #0]
 8001732:	4621      	mov	r1, r4
 8001734:	b991      	cbnz	r1, 800175c <_malloc_r+0x54>
 8001736:	4c20      	ldr	r4, [pc, #128]	; (80017b8 <_malloc_r+0xb0>)
 8001738:	6823      	ldr	r3, [r4, #0]
 800173a:	b91b      	cbnz	r3, 8001744 <_malloc_r+0x3c>
 800173c:	4630      	mov	r0, r6
 800173e:	f000 f83d 	bl	80017bc <_sbrk_r>
 8001742:	6020      	str	r0, [r4, #0]
 8001744:	4629      	mov	r1, r5
 8001746:	4630      	mov	r0, r6
 8001748:	f000 f838 	bl	80017bc <_sbrk_r>
 800174c:	1c43      	adds	r3, r0, #1
 800174e:	d124      	bne.n	800179a <_malloc_r+0x92>
 8001750:	230c      	movs	r3, #12
 8001752:	6033      	str	r3, [r6, #0]
 8001754:	4630      	mov	r0, r6
 8001756:	f000 f886 	bl	8001866 <__malloc_unlock>
 800175a:	e7e4      	b.n	8001726 <_malloc_r+0x1e>
 800175c:	680b      	ldr	r3, [r1, #0]
 800175e:	1b5b      	subs	r3, r3, r5
 8001760:	d418      	bmi.n	8001794 <_malloc_r+0x8c>
 8001762:	2b0b      	cmp	r3, #11
 8001764:	d90f      	bls.n	8001786 <_malloc_r+0x7e>
 8001766:	600b      	str	r3, [r1, #0]
 8001768:	50cd      	str	r5, [r1, r3]
 800176a:	18cc      	adds	r4, r1, r3
 800176c:	4630      	mov	r0, r6
 800176e:	f000 f87a 	bl	8001866 <__malloc_unlock>
 8001772:	f104 000b 	add.w	r0, r4, #11
 8001776:	1d23      	adds	r3, r4, #4
 8001778:	f020 0007 	bic.w	r0, r0, #7
 800177c:	1ac3      	subs	r3, r0, r3
 800177e:	d0d3      	beq.n	8001728 <_malloc_r+0x20>
 8001780:	425a      	negs	r2, r3
 8001782:	50e2      	str	r2, [r4, r3]
 8001784:	e7d0      	b.n	8001728 <_malloc_r+0x20>
 8001786:	428c      	cmp	r4, r1
 8001788:	684b      	ldr	r3, [r1, #4]
 800178a:	bf16      	itet	ne
 800178c:	6063      	strne	r3, [r4, #4]
 800178e:	6013      	streq	r3, [r2, #0]
 8001790:	460c      	movne	r4, r1
 8001792:	e7eb      	b.n	800176c <_malloc_r+0x64>
 8001794:	460c      	mov	r4, r1
 8001796:	6849      	ldr	r1, [r1, #4]
 8001798:	e7cc      	b.n	8001734 <_malloc_r+0x2c>
 800179a:	1cc4      	adds	r4, r0, #3
 800179c:	f024 0403 	bic.w	r4, r4, #3
 80017a0:	42a0      	cmp	r0, r4
 80017a2:	d005      	beq.n	80017b0 <_malloc_r+0xa8>
 80017a4:	1a21      	subs	r1, r4, r0
 80017a6:	4630      	mov	r0, r6
 80017a8:	f000 f808 	bl	80017bc <_sbrk_r>
 80017ac:	3001      	adds	r0, #1
 80017ae:	d0cf      	beq.n	8001750 <_malloc_r+0x48>
 80017b0:	6025      	str	r5, [r4, #0]
 80017b2:	e7db      	b.n	800176c <_malloc_r+0x64>
 80017b4:	20000090 	.word	0x20000090
 80017b8:	20000094 	.word	0x20000094

080017bc <_sbrk_r>:
 80017bc:	b538      	push	{r3, r4, r5, lr}
 80017be:	4c06      	ldr	r4, [pc, #24]	; (80017d8 <_sbrk_r+0x1c>)
 80017c0:	2300      	movs	r3, #0
 80017c2:	4605      	mov	r5, r0
 80017c4:	4608      	mov	r0, r1
 80017c6:	6023      	str	r3, [r4, #0]
 80017c8:	f7fe ffc0 	bl	800074c <_sbrk>
 80017cc:	1c43      	adds	r3, r0, #1
 80017ce:	d102      	bne.n	80017d6 <_sbrk_r+0x1a>
 80017d0:	6823      	ldr	r3, [r4, #0]
 80017d2:	b103      	cbz	r3, 80017d6 <_sbrk_r+0x1a>
 80017d4:	602b      	str	r3, [r5, #0]
 80017d6:	bd38      	pop	{r3, r4, r5, pc}
 80017d8:	20000098 	.word	0x20000098

080017dc <_raise_r>:
 80017dc:	291f      	cmp	r1, #31
 80017de:	b538      	push	{r3, r4, r5, lr}
 80017e0:	4604      	mov	r4, r0
 80017e2:	460d      	mov	r5, r1
 80017e4:	d904      	bls.n	80017f0 <_raise_r+0x14>
 80017e6:	2316      	movs	r3, #22
 80017e8:	6003      	str	r3, [r0, #0]
 80017ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80017ee:	bd38      	pop	{r3, r4, r5, pc}
 80017f0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80017f2:	b112      	cbz	r2, 80017fa <_raise_r+0x1e>
 80017f4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80017f8:	b94b      	cbnz	r3, 800180e <_raise_r+0x32>
 80017fa:	4620      	mov	r0, r4
 80017fc:	f000 f830 	bl	8001860 <_getpid_r>
 8001800:	462a      	mov	r2, r5
 8001802:	4601      	mov	r1, r0
 8001804:	4620      	mov	r0, r4
 8001806:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800180a:	f000 b817 	b.w	800183c <_kill_r>
 800180e:	2b01      	cmp	r3, #1
 8001810:	d00a      	beq.n	8001828 <_raise_r+0x4c>
 8001812:	1c59      	adds	r1, r3, #1
 8001814:	d103      	bne.n	800181e <_raise_r+0x42>
 8001816:	2316      	movs	r3, #22
 8001818:	6003      	str	r3, [r0, #0]
 800181a:	2001      	movs	r0, #1
 800181c:	e7e7      	b.n	80017ee <_raise_r+0x12>
 800181e:	2400      	movs	r4, #0
 8001820:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8001824:	4628      	mov	r0, r5
 8001826:	4798      	blx	r3
 8001828:	2000      	movs	r0, #0
 800182a:	e7e0      	b.n	80017ee <_raise_r+0x12>

0800182c <raise>:
 800182c:	4b02      	ldr	r3, [pc, #8]	; (8001838 <raise+0xc>)
 800182e:	4601      	mov	r1, r0
 8001830:	6818      	ldr	r0, [r3, #0]
 8001832:	f7ff bfd3 	b.w	80017dc <_raise_r>
 8001836:	bf00      	nop
 8001838:	20000000 	.word	0x20000000

0800183c <_kill_r>:
 800183c:	b538      	push	{r3, r4, r5, lr}
 800183e:	4c07      	ldr	r4, [pc, #28]	; (800185c <_kill_r+0x20>)
 8001840:	2300      	movs	r3, #0
 8001842:	4605      	mov	r5, r0
 8001844:	4608      	mov	r0, r1
 8001846:	4611      	mov	r1, r2
 8001848:	6023      	str	r3, [r4, #0]
 800184a:	f7fe ff64 	bl	8000716 <_kill>
 800184e:	1c43      	adds	r3, r0, #1
 8001850:	d102      	bne.n	8001858 <_kill_r+0x1c>
 8001852:	6823      	ldr	r3, [r4, #0]
 8001854:	b103      	cbz	r3, 8001858 <_kill_r+0x1c>
 8001856:	602b      	str	r3, [r5, #0]
 8001858:	bd38      	pop	{r3, r4, r5, pc}
 800185a:	bf00      	nop
 800185c:	20000098 	.word	0x20000098

08001860 <_getpid_r>:
 8001860:	f7fe bf52 	b.w	8000708 <_getpid>

08001864 <__malloc_lock>:
 8001864:	4770      	bx	lr

08001866 <__malloc_unlock>:
 8001866:	4770      	bx	lr

08001868 <_init>:
 8001868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800186a:	bf00      	nop
 800186c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800186e:	bc08      	pop	{r3}
 8001870:	469e      	mov	lr, r3
 8001872:	4770      	bx	lr

08001874 <_fini>:
 8001874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001876:	bf00      	nop
 8001878:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800187a:	bc08      	pop	{r3}
 800187c:	469e      	mov	lr, r3
 800187e:	4770      	bx	lr
