
004_SPI_driver_CPP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000198c  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000004  08001b50  08001b50  00011b50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001b54  08001b54  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  08001b54  08001b54  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001b54  08001b54  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001b54  08001b54  00011b54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001b58  08001b58  00011b58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08001b5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000034  20000064  08001bc0  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000098  08001bc0  00020098  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cda1  00000000  00000000  0002008e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000199c  00000000  00000000  0002ce2f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000370  00000000  00000000  0002e7d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000318  00000000  00000000  0002eb40  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00006336  00000000  00000000  0002ee58  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00004849  00000000  00000000  0003518e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00012a18  00000000  00000000  000399d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0004c3ef  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001118  00000000  00000000  0004c46c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000064 	.word	0x20000064
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08001b38 	.word	0x08001b38

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000068 	.word	0x20000068
 8000200:	08001b38 	.word	0x08001b38

08000204 <_Z13user_delay_usmPv>:

uint8_t rx_buffer[3];
SPI_Handler *SPI1_Handler;

void user_delay_us(uint32_t period, void *intf_ptr)
{
 8000204:	b480      	push	{r7}
 8000206:	b085      	sub	sp, #20
 8000208:	af00      	add	r7, sp, #0
 800020a:	6078      	str	r0, [r7, #4]
 800020c:	6039      	str	r1, [r7, #0]
	for(int i = 0; i < 250000; ++i) {
 800020e:	2300      	movs	r3, #0
 8000210:	60fb      	str	r3, [r7, #12]
 8000212:	68fb      	ldr	r3, [r7, #12]
 8000214:	4a05      	ldr	r2, [pc, #20]	; (800022c <_Z13user_delay_usmPv+0x28>)
 8000216:	4293      	cmp	r3, r2
 8000218:	dc03      	bgt.n	8000222 <_Z13user_delay_usmPv+0x1e>
 800021a:	68fb      	ldr	r3, [r7, #12]
 800021c:	3301      	adds	r3, #1
 800021e:	60fb      	str	r3, [r7, #12]
 8000220:	e7f7      	b.n	8000212 <_Z13user_delay_usmPv+0xe>

	}
}
 8000222:	bf00      	nop
 8000224:	3714      	adds	r7, #20
 8000226:	46bd      	mov	sp, r7
 8000228:	bc80      	pop	{r7}
 800022a:	4770      	bx	lr
 800022c:	0003d08f 	.word	0x0003d08f

08000230 <_Z13user_spi_readhPhmPv>:

int8_t user_spi_read (uint8_t reg_addr, uint8_t *reg_data, uint32_t len, void *intf_ptr) {
 8000230:	b580      	push	{r7, lr}
 8000232:	b084      	sub	sp, #16
 8000234:	af00      	add	r7, sp, #0
 8000236:	60b9      	str	r1, [r7, #8]
 8000238:	607a      	str	r2, [r7, #4]
 800023a:	603b      	str	r3, [r7, #0]
 800023c:	4603      	mov	r3, r0
 800023e:	73fb      	strb	r3, [r7, #15]
    SPI1_Handler->SPI_SendDataIT(static_cast<const uint8_t *>(&reg_addr), 1);
 8000240:	4b09      	ldr	r3, [pc, #36]	; (8000268 <_Z13user_spi_readhPhmPv+0x38>)
 8000242:	681b      	ldr	r3, [r3, #0]
 8000244:	f107 010f 	add.w	r1, r7, #15
 8000248:	2201      	movs	r2, #1
 800024a:	4618      	mov	r0, r3
 800024c:	f001 f809 	bl	8001262 <_ZN11SPI_Handler14SPI_SendDataITEPKhm>
    SPI1_Handler->SPI_ReceiveDataIT(reg_data, len);
 8000250:	4b05      	ldr	r3, [pc, #20]	; (8000268 <_Z13user_spi_readhPhmPv+0x38>)
 8000252:	681b      	ldr	r3, [r3, #0]
 8000254:	687a      	ldr	r2, [r7, #4]
 8000256:	68b9      	ldr	r1, [r7, #8]
 8000258:	4618      	mov	r0, r3
 800025a:	f001 f833 	bl	80012c4 <_ZN11SPI_Handler17SPI_ReceiveDataITEPhm>
    return 0;
 800025e:	2300      	movs	r3, #0
}
 8000260:	4618      	mov	r0, r3
 8000262:	3710      	adds	r7, #16
 8000264:	46bd      	mov	sp, r7
 8000266:	bd80      	pop	{r7, pc}
 8000268:	20000080 	.word	0x20000080

0800026c <_Z14user_spi_writehPKhmPv>:

int8_t user_spi_write(uint8_t reg_addr, const uint8_t *reg_data, uint32_t len, void *intf_ptr) {
 800026c:	b580      	push	{r7, lr}
 800026e:	b084      	sub	sp, #16
 8000270:	af00      	add	r7, sp, #0
 8000272:	60b9      	str	r1, [r7, #8]
 8000274:	607a      	str	r2, [r7, #4]
 8000276:	603b      	str	r3, [r7, #0]
 8000278:	4603      	mov	r3, r0
 800027a:	73fb      	strb	r3, [r7, #15]
	SPI1_Handler->SPI_SendDataIT(static_cast<const uint8_t *>(&reg_addr), 1);
 800027c:	4b09      	ldr	r3, [pc, #36]	; (80002a4 <_Z14user_spi_writehPKhmPv+0x38>)
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	f107 010f 	add.w	r1, r7, #15
 8000284:	2201      	movs	r2, #1
 8000286:	4618      	mov	r0, r3
 8000288:	f000 ffeb 	bl	8001262 <_ZN11SPI_Handler14SPI_SendDataITEPKhm>
	SPI1_Handler->SPI_SendDataIT(reg_data, len);
 800028c:	4b05      	ldr	r3, [pc, #20]	; (80002a4 <_Z14user_spi_writehPKhmPv+0x38>)
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	687a      	ldr	r2, [r7, #4]
 8000292:	68b9      	ldr	r1, [r7, #8]
 8000294:	4618      	mov	r0, r3
 8000296:	f000 ffe4 	bl	8001262 <_ZN11SPI_Handler14SPI_SendDataITEPKhm>
	return 0;
 800029a:	2300      	movs	r3, #0
}
 800029c:	4618      	mov	r0, r3
 800029e:	3710      	adds	r7, #16
 80002a0:	46bd      	mov	sp, r7
 80002a2:	bd80      	pop	{r7, pc}
 80002a4:	20000080 	.word	0x20000080

080002a8 <main>:

int main(void)
{
 80002a8:	b590      	push	{r4, r7, lr}
 80002aa:	b0a1      	sub	sp, #132	; 0x84
 80002ac:	af06      	add	r7, sp, #24
										SPI_BUS_CONFIG_FD,
										SPI_SCLK_SPEED_DIV32,
										SPI_DFF_8BITS,
										SPI_CPOL_LOW,
										SPI_CPHA_LOW,
										SPI_SSM_DI);
 80002ae:	2030      	movs	r0, #48	; 0x30
 80002b0:	f001 fadf 	bl	8001872 <_Znwj>
 80002b4:	4603      	mov	r3, r0
 80002b6:	461c      	mov	r4, r3
 80002b8:	2300      	movs	r3, #0
 80002ba:	9304      	str	r3, [sp, #16]
 80002bc:	2300      	movs	r3, #0
 80002be:	9303      	str	r3, [sp, #12]
 80002c0:	2300      	movs	r3, #0
 80002c2:	9302      	str	r3, [sp, #8]
 80002c4:	2300      	movs	r3, #0
 80002c6:	9301      	str	r3, [sp, #4]
 80002c8:	2304      	movs	r3, #4
 80002ca:	9300      	str	r3, [sp, #0]
 80002cc:	2301      	movs	r3, #1
 80002ce:	2201      	movs	r2, #1
 80002d0:	4951      	ldr	r1, [pc, #324]	; (8000418 <main+0x170>)
 80002d2:	4620      	mov	r0, r4
 80002d4:	f000 fd1b 	bl	8000d0e <_ZN11SPI_HandlerC1EP12SPI_RegDef_thhhhhhh>
	SPI1_Handler = new SPI_Handler(SPI1,
 80002d8:	4b50      	ldr	r3, [pc, #320]	; (800041c <main+0x174>)
 80002da:	601c      	str	r4, [r3, #0]

	SPI1_Handler->SPI_IRQInterruptConfig(IRQ_NO_SPI1, ENABLE);
 80002dc:	4b4f      	ldr	r3, [pc, #316]	; (800041c <main+0x174>)
 80002de:	681b      	ldr	r3, [r3, #0]
 80002e0:	2201      	movs	r2, #1
 80002e2:	2123      	movs	r1, #35	; 0x23
 80002e4:	4618      	mov	r0, r3
 80002e6:	f000 ff09 	bl	80010fc <_ZN11SPI_Handler22SPI_IRQInterruptConfigEhh>
	SPI1_Handler->SPI_IRQPriorityConfig(IRQ_NO_SPI1, IRQ_Prio_NO_15);
 80002ea:	4b4c      	ldr	r3, [pc, #304]	; (800041c <main+0x174>)
 80002ec:	681b      	ldr	r3, [r3, #0]
 80002ee:	220f      	movs	r2, #15
 80002f0:	2123      	movs	r1, #35	; 0x23
 80002f2:	4618      	mov	r0, r3
 80002f4:	f000 ff86 	bl	8001204 <_ZN11SPI_Handler21SPI_IRQPriorityConfigEhh>


	struct bme280_dev dev;
	int8_t rslt = BME280_OK;
 80002f8:	2300      	movs	r3, #0
 80002fa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

	/* Sensor_0 interface over SPI with native chip select line */
	uint8_t dev_addr = 0;
 80002fe:	2300      	movs	r3, #0
 8000300:	76fb      	strb	r3, [r7, #27]

	dev.intf_ptr = &dev_addr;
 8000302:	f107 031b 	add.w	r3, r7, #27
 8000306:	623b      	str	r3, [r7, #32]
	dev.intf = BME280_SPI_INTF;
 8000308:	2300      	movs	r3, #0
 800030a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	dev.read = &user_spi_read;
 800030e:	4b44      	ldr	r3, [pc, #272]	; (8000420 <main+0x178>)
 8000310:	62bb      	str	r3, [r7, #40]	; 0x28
	dev.write = &user_spi_write;
 8000312:	4b44      	ldr	r3, [pc, #272]	; (8000424 <main+0x17c>)
 8000314:	62fb      	str	r3, [r7, #44]	; 0x2c
	dev.delay_us = &user_delay_us;
 8000316:	4b44      	ldr	r3, [pc, #272]	; (8000428 <main+0x180>)
 8000318:	633b      	str	r3, [r7, #48]	; 0x30


//	rslt = bme280_init(&dev);

	// over sampling x8
	dev.settings.osr_h = 0x04;
 800031a:	2304      	movs	r3, #4
 800031c:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	dev.settings.osr_p = 0x04;
 8000320:	2304      	movs	r3, #4
 8000322:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
	dev.settings.osr_t = 0x04;
 8000326:	2304      	movs	r3, #4
 8000328:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
//	rslt = bme280_set_sensor_mode(BME280_NORMAL_MODE, &dev);
//	user_delay_us(5,dev.intf_ptr);
//	rslt = bme280_get_sensor_mode(&sensorMode, &dev);

	// read chip ID
	uint8_t chipIdAddr = 0xD0;
 800032c:	23d0      	movs	r3, #208	; 0xd0
 800032e:	76bb      	strb	r3, [r7, #26]
	uint8_t chipID = 0;
 8000330:	2300      	movs	r3, #0
 8000332:	767b      	strb	r3, [r7, #25]
	SPI1_Handler->SPI_SendDataIT(&chipIdAddr, 1);
 8000334:	4b39      	ldr	r3, [pc, #228]	; (800041c <main+0x174>)
 8000336:	681b      	ldr	r3, [r3, #0]
 8000338:	f107 011a 	add.w	r1, r7, #26
 800033c:	2201      	movs	r2, #1
 800033e:	4618      	mov	r0, r3
 8000340:	f000 ff8f 	bl	8001262 <_ZN11SPI_Handler14SPI_SendDataITEPKhm>
	SPI1_Handler->SPI_ReceiveDataIT(&chipID, 1);
 8000344:	4b35      	ldr	r3, [pc, #212]	; (800041c <main+0x174>)
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	f107 0119 	add.w	r1, r7, #25
 800034c:	2201      	movs	r2, #1
 800034e:	4618      	mov	r0, r3
 8000350:	f000 ffb8 	bl	80012c4 <_ZN11SPI_Handler17SPI_ReceiveDataITEPhm>

	// configure normal mode and oversampling
//	uint8_t ctrl_means = 0x93;
	uint8_t ctrl_means_reg_W[2] = {0x74, 0x93};
 8000354:	4b35      	ldr	r3, [pc, #212]	; (800042c <main+0x184>)
 8000356:	881b      	ldrh	r3, [r3, #0]
 8000358:	82bb      	strh	r3, [r7, #20]
	uint8_t ctrl_means_reg_R = 0xF4;
 800035a:	23f4      	movs	r3, #244	; 0xf4
 800035c:	74fb      	strb	r3, [r7, #19]
	uint8_t ctrl_read = 0;
 800035e:	2300      	movs	r3, #0
 8000360:	74bb      	strb	r3, [r7, #18]
	// write
//	SPI1_Handler->SPI_SendDataIT(&ctrl_means_reg_W, 1);
//	SPI1_Handler->SPI_SendDataIT(&ctrl_means, 1);
	SPI1_Handler->SPI_SendDataIT(&ctrl_means_reg_W[0], 2);
 8000362:	4b2e      	ldr	r3, [pc, #184]	; (800041c <main+0x174>)
 8000364:	681b      	ldr	r3, [r3, #0]
 8000366:	f107 0114 	add.w	r1, r7, #20
 800036a:	2202      	movs	r2, #2
 800036c:	4618      	mov	r0, r3
 800036e:	f000 ff78 	bl	8001262 <_ZN11SPI_Handler14SPI_SendDataITEPKhm>

	// read
	SPI1_Handler->SPI_SendDataIT(&ctrl_means_reg_R, 1);
 8000372:	4b2a      	ldr	r3, [pc, #168]	; (800041c <main+0x174>)
 8000374:	681b      	ldr	r3, [r3, #0]
 8000376:	f107 0113 	add.w	r1, r7, #19
 800037a:	2201      	movs	r2, #1
 800037c:	4618      	mov	r0, r3
 800037e:	f000 ff70 	bl	8001262 <_ZN11SPI_Handler14SPI_SendDataITEPKhm>
	SPI1_Handler->SPI_ReceiveDataIT(&ctrl_read, 1);
 8000382:	4b26      	ldr	r3, [pc, #152]	; (800041c <main+0x174>)
 8000384:	681b      	ldr	r3, [r3, #0]
 8000386:	f107 0112 	add.w	r1, r7, #18
 800038a:	2201      	movs	r2, #1
 800038c:	4618      	mov	r0, r3
 800038e:	f000 ff99 	bl	80012c4 <_ZN11SPI_Handler17SPI_ReceiveDataITEPhm>

	// read status
	uint8_t status_addr = 0xF3;
 8000392:	23f3      	movs	r3, #243	; 0xf3
 8000394:	747b      	strb	r3, [r7, #17]
	uint8_t statusData = 0x00;
 8000396:	2300      	movs	r3, #0
 8000398:	743b      	strb	r3, [r7, #16]
	SPI1_Handler->SPI_SendDataIT(&status_addr, 1);
 800039a:	4b20      	ldr	r3, [pc, #128]	; (800041c <main+0x174>)
 800039c:	681b      	ldr	r3, [r3, #0]
 800039e:	f107 0111 	add.w	r1, r7, #17
 80003a2:	2201      	movs	r2, #1
 80003a4:	4618      	mov	r0, r3
 80003a6:	f000 ff5c 	bl	8001262 <_ZN11SPI_Handler14SPI_SendDataITEPKhm>
	SPI1_Handler->SPI_ReceiveDataIT(&statusData, 1);
 80003aa:	4b1c      	ldr	r3, [pc, #112]	; (800041c <main+0x174>)
 80003ac:	681b      	ldr	r3, [r3, #0]
 80003ae:	f107 0110 	add.w	r1, r7, #16
 80003b2:	2201      	movs	r2, #1
 80003b4:	4618      	mov	r0, r3
 80003b6:	f000 ff85 	bl	80012c4 <_ZN11SPI_Handler17SPI_ReceiveDataITEPhm>

	user_delay_us(1, 0);
 80003ba:	2100      	movs	r1, #0
 80003bc:	2001      	movs	r0, #1
 80003be:	f7ff ff21 	bl	8000204 <_Z13user_delay_usmPv>


	// read sensordata
	uint8_t sensor_addr = 0xF7;
 80003c2:	23f7      	movs	r3, #247	; 0xf7
 80003c4:	73fb      	strb	r3, [r7, #15]
	uint8_t sensorData[8] = {};
 80003c6:	1d3b      	adds	r3, r7, #4
 80003c8:	2200      	movs	r2, #0
 80003ca:	601a      	str	r2, [r3, #0]
 80003cc:	605a      	str	r2, [r3, #4]
	SPI1_Handler->SPI_SendDataIT(&sensor_addr, 1);
 80003ce:	4b13      	ldr	r3, [pc, #76]	; (800041c <main+0x174>)
 80003d0:	681b      	ldr	r3, [r3, #0]
 80003d2:	f107 010f 	add.w	r1, r7, #15
 80003d6:	2201      	movs	r2, #1
 80003d8:	4618      	mov	r0, r3
 80003da:	f000 ff42 	bl	8001262 <_ZN11SPI_Handler14SPI_SendDataITEPKhm>
	SPI1_Handler->SPI_ReceiveDataIT(&sensorData[0], 8);
 80003de:	4b0f      	ldr	r3, [pc, #60]	; (800041c <main+0x174>)
 80003e0:	681b      	ldr	r3, [r3, #0]
 80003e2:	1d39      	adds	r1, r7, #4
 80003e4:	2208      	movs	r2, #8
 80003e6:	4618      	mov	r0, r3
 80003e8:	f000 ff6c 	bl	80012c4 <_ZN11SPI_Handler17SPI_ReceiveDataITEPhm>
//	struct bme280_data testSensorData = {};
//	rslt = bme280_get_sensor_data(BME280_ALL, &testSensorData, &dev);
	static_cast<void>(rslt);


    while(SPI1_Handler->SPI_GetFlagStatus(SPI_BSY_FLAG));
 80003ec:	4b0b      	ldr	r3, [pc, #44]	; (800041c <main+0x174>)
 80003ee:	681b      	ldr	r3, [r3, #0]
 80003f0:	2180      	movs	r1, #128	; 0x80
 80003f2:	4618      	mov	r0, r3
 80003f4:	f000 fe29 	bl	800104a <_ZN11SPI_Handler17SPI_GetFlagStatusEh>
 80003f8:	4603      	mov	r3, r0
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	bf14      	ite	ne
 80003fe:	2301      	movne	r3, #1
 8000400:	2300      	moveq	r3, #0
 8000402:	b2db      	uxtb	r3, r3
 8000404:	2b00      	cmp	r3, #0
 8000406:	d000      	beq.n	800040a <main+0x162>
 8000408:	e7f0      	b.n	80003ec <main+0x144>
    SPI1_Handler->SPI_PeripheralControl(DISABLE);
 800040a:	4b04      	ldr	r3, [pc, #16]	; (800041c <main+0x174>)
 800040c:	681b      	ldr	r3, [r3, #0]
 800040e:	2100      	movs	r1, #0
 8000410:	4618      	mov	r0, r3
 8000412:	f000 fdfb 	bl	800100c <_ZN11SPI_Handler21SPI_PeripheralControlEh>
    while(1);
 8000416:	e7fe      	b.n	8000416 <main+0x16e>
 8000418:	40013000 	.word	0x40013000
 800041c:	20000080 	.word	0x20000080
 8000420:	08000231 	.word	0x08000231
 8000424:	0800026d 	.word	0x0800026d
 8000428:	08000205 	.word	0x08000205
 800042c:	08001b50 	.word	0x08001b50

08000430 <SPI1_IRQHandler>:
    return 0;
}

extern "C" {
    void SPI1_IRQHandler(void) {
 8000430:	b580      	push	{r7, lr}
 8000432:	af00      	add	r7, sp, #0
        // handle the interrupt
        SPI1_Handler->SPI_IRQHandling();
 8000434:	4b03      	ldr	r3, [pc, #12]	; (8000444 <SPI1_IRQHandler+0x14>)
 8000436:	681b      	ldr	r3, [r3, #0]
 8000438:	4618      	mov	r0, r3
 800043a:	f000 ff74 	bl	8001326 <_ZN11SPI_Handler15SPI_IRQHandlingEv>
    }
 800043e:	bf00      	nop
 8000440:	bd80      	pop	{r7, pc}
 8000442:	bf00      	nop
 8000444:	20000080 	.word	0x20000080

08000448 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000448:	b480      	push	{r7}
 800044a:	af00      	add	r7, sp, #0
	return 1;
 800044c:	2301      	movs	r3, #1
}
 800044e:	4618      	mov	r0, r3
 8000450:	46bd      	mov	sp, r7
 8000452:	bc80      	pop	{r7}
 8000454:	4770      	bx	lr

08000456 <_kill>:

int _kill(int pid, int sig)
{
 8000456:	b580      	push	{r7, lr}
 8000458:	b082      	sub	sp, #8
 800045a:	af00      	add	r7, sp, #0
 800045c:	6078      	str	r0, [r7, #4]
 800045e:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000460:	f001 fa2a 	bl	80018b8 <__errno>
 8000464:	4602      	mov	r2, r0
 8000466:	2316      	movs	r3, #22
 8000468:	6013      	str	r3, [r2, #0]
	return -1;
 800046a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800046e:	4618      	mov	r0, r3
 8000470:	3708      	adds	r7, #8
 8000472:	46bd      	mov	sp, r7
 8000474:	bd80      	pop	{r7, pc}

08000476 <_exit>:

void _exit (int status)
{
 8000476:	b580      	push	{r7, lr}
 8000478:	b082      	sub	sp, #8
 800047a:	af00      	add	r7, sp, #0
 800047c:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800047e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000482:	6878      	ldr	r0, [r7, #4]
 8000484:	f7ff ffe7 	bl	8000456 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000488:	e7fe      	b.n	8000488 <_exit+0x12>
	...

0800048c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	b084      	sub	sp, #16
 8000490:	af00      	add	r7, sp, #0
 8000492:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000494:	4b11      	ldr	r3, [pc, #68]	; (80004dc <_sbrk+0x50>)
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	2b00      	cmp	r3, #0
 800049a:	d102      	bne.n	80004a2 <_sbrk+0x16>
		heap_end = &end;
 800049c:	4b0f      	ldr	r3, [pc, #60]	; (80004dc <_sbrk+0x50>)
 800049e:	4a10      	ldr	r2, [pc, #64]	; (80004e0 <_sbrk+0x54>)
 80004a0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80004a2:	4b0e      	ldr	r3, [pc, #56]	; (80004dc <_sbrk+0x50>)
 80004a4:	681b      	ldr	r3, [r3, #0]
 80004a6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80004a8:	4b0c      	ldr	r3, [pc, #48]	; (80004dc <_sbrk+0x50>)
 80004aa:	681a      	ldr	r2, [r3, #0]
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	4413      	add	r3, r2
 80004b0:	466a      	mov	r2, sp
 80004b2:	4293      	cmp	r3, r2
 80004b4:	d907      	bls.n	80004c6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80004b6:	f001 f9ff 	bl	80018b8 <__errno>
 80004ba:	4602      	mov	r2, r0
 80004bc:	230c      	movs	r3, #12
 80004be:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80004c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80004c4:	e006      	b.n	80004d4 <_sbrk+0x48>
	}

	heap_end += incr;
 80004c6:	4b05      	ldr	r3, [pc, #20]	; (80004dc <_sbrk+0x50>)
 80004c8:	681a      	ldr	r2, [r3, #0]
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	4413      	add	r3, r2
 80004ce:	4a03      	ldr	r2, [pc, #12]	; (80004dc <_sbrk+0x50>)
 80004d0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80004d2:	68fb      	ldr	r3, [r7, #12]
}
 80004d4:	4618      	mov	r0, r3
 80004d6:	3710      	adds	r7, #16
 80004d8:	46bd      	mov	sp, r7
 80004da:	bd80      	pop	{r7, pc}
 80004dc:	20000084 	.word	0x20000084
 80004e0:	20000098 	.word	0x20000098

080004e4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80004e4:	480d      	ldr	r0, [pc, #52]	; (800051c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80004e6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004e8:	480d      	ldr	r0, [pc, #52]	; (8000520 <LoopForever+0x6>)
  ldr r1, =_edata
 80004ea:	490e      	ldr	r1, [pc, #56]	; (8000524 <LoopForever+0xa>)
  ldr r2, =_sidata
 80004ec:	4a0e      	ldr	r2, [pc, #56]	; (8000528 <LoopForever+0xe>)
  movs r3, #0
 80004ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004f0:	e002      	b.n	80004f8 <LoopCopyDataInit>

080004f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004f6:	3304      	adds	r3, #4

080004f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004fc:	d3f9      	bcc.n	80004f2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004fe:	4a0b      	ldr	r2, [pc, #44]	; (800052c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000500:	4c0b      	ldr	r4, [pc, #44]	; (8000530 <LoopForever+0x16>)
  movs r3, #0
 8000502:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000504:	e001      	b.n	800050a <LoopFillZerobss>

08000506 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000506:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000508:	3204      	adds	r2, #4

0800050a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800050a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800050c:	d3fb      	bcc.n	8000506 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800050e:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 8000512:	f001 f9d7 	bl	80018c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000516:	f7ff fec7 	bl	80002a8 <main>

0800051a <LoopForever>:

LoopForever:
    b LoopForever
 800051a:	e7fe      	b.n	800051a <LoopForever>
  ldr   r0, =_estack
 800051c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000520:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000524:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000528:	08001b5c 	.word	0x08001b5c
  ldr r2, =_sbss
 800052c:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8000530:	20000098 	.word	0x20000098

08000534 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000534:	e7fe      	b.n	8000534 <ADC_IRQHandler>
	...

08000538 <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t>:
#define SPI_SR_BSY                      7
#define SPI_SR_FRE                      8



inline uint8_t gpio_baseAddr_to_code(GPIO_RegDef_t *Port) {
 8000538:	b480      	push	{r7}
 800053a:	b083      	sub	sp, #12
 800053c:	af00      	add	r7, sp, #0
 800053e:	6078      	str	r0, [r7, #4]
			 (Port == GPIOC) ? 0x02 : \
			 (Port == GPIOD) ? 0x03 : \
			 (Port == GPIOE) ? 0x04 : \
			 (Port == GPIOF) ? 0x05 : \
			 (Port == GPIOG) ? 0x06 : \
			 (Port == GPIOH) ? 0x07 : 0x00 );
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	4a1a      	ldr	r2, [pc, #104]	; (80005ac <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t+0x74>)
 8000544:	4293      	cmp	r3, r2
 8000546:	d02b      	beq.n	80005a0 <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t+0x68>
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	4a19      	ldr	r2, [pc, #100]	; (80005b0 <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t+0x78>)
 800054c:	4293      	cmp	r3, r2
 800054e:	d025      	beq.n	800059c <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t+0x64>
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	4a18      	ldr	r2, [pc, #96]	; (80005b4 <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t+0x7c>)
 8000554:	4293      	cmp	r3, r2
 8000556:	d01f      	beq.n	8000598 <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t+0x60>
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	4a17      	ldr	r2, [pc, #92]	; (80005b8 <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t+0x80>)
 800055c:	4293      	cmp	r3, r2
 800055e:	d019      	beq.n	8000594 <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t+0x5c>
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	4a16      	ldr	r2, [pc, #88]	; (80005bc <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t+0x84>)
 8000564:	4293      	cmp	r3, r2
 8000566:	d013      	beq.n	8000590 <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t+0x58>
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	4a15      	ldr	r2, [pc, #84]	; (80005c0 <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t+0x88>)
 800056c:	4293      	cmp	r3, r2
 800056e:	d00d      	beq.n	800058c <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t+0x54>
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	4a14      	ldr	r2, [pc, #80]	; (80005c4 <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t+0x8c>)
 8000574:	4293      	cmp	r3, r2
 8000576:	d007      	beq.n	8000588 <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t+0x50>
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	4a13      	ldr	r2, [pc, #76]	; (80005c8 <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t+0x90>)
 800057c:	4293      	cmp	r3, r2
 800057e:	d101      	bne.n	8000584 <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t+0x4c>
 8000580:	2307      	movs	r3, #7
 8000582:	e00e      	b.n	80005a2 <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t+0x6a>
 8000584:	2300      	movs	r3, #0
 8000586:	e00c      	b.n	80005a2 <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t+0x6a>
 8000588:	2306      	movs	r3, #6
 800058a:	e00a      	b.n	80005a2 <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t+0x6a>
 800058c:	2305      	movs	r3, #5
 800058e:	e008      	b.n	80005a2 <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t+0x6a>
 8000590:	2304      	movs	r3, #4
 8000592:	e006      	b.n	80005a2 <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t+0x6a>
 8000594:	2303      	movs	r3, #3
 8000596:	e004      	b.n	80005a2 <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t+0x6a>
 8000598:	2302      	movs	r3, #2
 800059a:	e002      	b.n	80005a2 <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t+0x6a>
 800059c:	2301      	movs	r3, #1
 800059e:	e000      	b.n	80005a2 <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t+0x6a>
 80005a0:	2300      	movs	r3, #0
}
 80005a2:	4618      	mov	r0, r3
 80005a4:	370c      	adds	r7, #12
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bc80      	pop	{r7}
 80005aa:	4770      	bx	lr
 80005ac:	40020000 	.word	0x40020000
 80005b0:	40020400 	.word	0x40020400
 80005b4:	40020800 	.word	0x40020800
 80005b8:	40020c00 	.word	0x40020c00
 80005bc:	40021000 	.word	0x40021000
 80005c0:	40021400 	.word	0x40021400
 80005c4:	40021800 	.word	0x40021800
 80005c8:	40021c00 	.word	0x40021c00

080005cc <_ZL14get_irq_pinNumh>:
	void GPIO_IRQInterruptConfig(const uint8_t IRQNumber, const uint8_t EnorDi);
	void GPIO_IRQPriorityConfig(const uint8_t IRQNumber, const uint8_t IRQPriority);

};

static inline uint8_t get_irq_pinNum(uint8_t PinNumber) {
 80005cc:	b480      	push	{r7}
 80005ce:	b083      	sub	sp, #12
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	4603      	mov	r3, r0
 80005d4:	71fb      	strb	r3, [r7, #7]
    return (PinNumber < 5)  ? PinNumber + 6 : \
           (PinNumber < 10) ? IRQ_NO_EXTI9_5 : \
           (PinNumber < 16) ? IRQ_NO_EXTI15_10 : 0;
 80005d6:	79fb      	ldrb	r3, [r7, #7]
 80005d8:	2b04      	cmp	r3, #4
 80005da:	d803      	bhi.n	80005e4 <_ZL14get_irq_pinNumh+0x18>
 80005dc:	79fb      	ldrb	r3, [r7, #7]
 80005de:	3306      	adds	r3, #6
 80005e0:	b2db      	uxtb	r3, r3
 80005e2:	e00a      	b.n	80005fa <_ZL14get_irq_pinNumh+0x2e>
 80005e4:	79fb      	ldrb	r3, [r7, #7]
 80005e6:	2b09      	cmp	r3, #9
 80005e8:	d906      	bls.n	80005f8 <_ZL14get_irq_pinNumh+0x2c>
 80005ea:	79fb      	ldrb	r3, [r7, #7]
 80005ec:	2b0f      	cmp	r3, #15
 80005ee:	d801      	bhi.n	80005f4 <_ZL14get_irq_pinNumh+0x28>
 80005f0:	2328      	movs	r3, #40	; 0x28
 80005f2:	e002      	b.n	80005fa <_ZL14get_irq_pinNumh+0x2e>
 80005f4:	2300      	movs	r3, #0
 80005f6:	e000      	b.n	80005fa <_ZL14get_irq_pinNumh+0x2e>
 80005f8:	2317      	movs	r3, #23
}
 80005fa:	4618      	mov	r0, r3
 80005fc:	370c      	adds	r7, #12
 80005fe:	46bd      	mov	sp, r7
 8000600:	bc80      	pop	{r7}
 8000602:	4770      	bx	lr

08000604 <_ZN12GPIO_HandlerC1EP13GPIO_RegDef_thhhhhhh>:
/*********************************************************************
 * @class      		  - GPIO_Handler
 *
 * @brief             - Constructor, initialize GPIO, clock, IRQ, Alt Function
 **********************************************************************/
GPIO_Handler::GPIO_Handler(
 8000604:	b580      	push	{r7, lr}
 8000606:	b086      	sub	sp, #24
 8000608:	af00      	add	r7, sp, #0
 800060a:	60f8      	str	r0, [r7, #12]
 800060c:	60b9      	str	r1, [r7, #8]
 800060e:	4611      	mov	r1, r2
 8000610:	461a      	mov	r2, r3
 8000612:	460b      	mov	r3, r1
 8000614:	71fb      	strb	r3, [r7, #7]
 8000616:	4613      	mov	r3, r2
 8000618:	71bb      	strb	r3, [r7, #6]
		uint8_t GPIO_PinMode,
		uint8_t GPIO_PinSpeed,
		uint8_t GPIO_IRQ_Priority,
		uint8_t GPIO_PinOPType,
		uint8_t GPIO_PinPuPdControl,
		uint8_t GPIO_PinAltFunMode) {
 800061a:	68fb      	ldr	r3, [r7, #12]
 800061c:	461a      	mov	r2, r3
 800061e:	2300      	movs	r3, #0
 8000620:	6013      	str	r3, [r2, #0]
 8000622:	6053      	str	r3, [r2, #4]
 8000624:	6093      	str	r3, [r2, #8]
	GPIOx_.pGPIOx = ((GPIO_RegDef_t *)(GPIOx_ADDR));
 8000626:	68ba      	ldr	r2, [r7, #8]
 8000628:	68fb      	ldr	r3, [r7, #12]
 800062a:	601a      	str	r2, [r3, #0]
	GPIOx_.GPIO_PinConfig.GPIO_PinNumber = GPIO_PinNumber;
 800062c:	68fb      	ldr	r3, [r7, #12]
 800062e:	79fa      	ldrb	r2, [r7, #7]
 8000630:	711a      	strb	r2, [r3, #4]
	GPIOx_.GPIO_PinConfig.GPIO_PinMode = GPIO_PinMode;
 8000632:	68fb      	ldr	r3, [r7, #12]
 8000634:	79ba      	ldrb	r2, [r7, #6]
 8000636:	715a      	strb	r2, [r3, #5]
	GPIOx_.GPIO_PinConfig.GPIO_PinSpeed = GPIO_PinSpeed;
 8000638:	68fb      	ldr	r3, [r7, #12]
 800063a:	f897 2020 	ldrb.w	r2, [r7, #32]
 800063e:	719a      	strb	r2, [r3, #6]
	GPIOx_.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PinPuPdControl;
 8000640:	68fb      	ldr	r3, [r7, #12]
 8000642:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8000646:	71da      	strb	r2, [r3, #7]
	GPIOx_.GPIO_PinConfig.GPIO_PinOPType = GPIO_PinOPType;
 8000648:	68fb      	ldr	r3, [r7, #12]
 800064a:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800064e:	721a      	strb	r2, [r3, #8]
	GPIOx_.GPIO_PinConfig.GPIO_PinAltFunMode = GPIO_PinAltFunMode;
 8000650:	68fb      	ldr	r3, [r7, #12]
 8000652:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8000656:	725a      	strb	r2, [r3, #9]
	GPIO_PeriClockControl();
 8000658:	68f8      	ldr	r0, [r7, #12]
 800065a:	f000 f82b 	bl	80006b4 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv>
	GPIO_Init();
 800065e:	68f8      	ldr	r0, [r7, #12]
 8000660:	f000 f8a2 	bl	80007a8 <_ZN12GPIO_Handler9GPIO_InitEv>
	// Configure interrupt
	if(GPIO_PinMode >= GPIO_MODE_IT_FT) {
 8000664:	79bb      	ldrb	r3, [r7, #6]
 8000666:	2b03      	cmp	r3, #3
 8000668:	d912      	bls.n	8000690 <_ZN12GPIO_HandlerC1EP13GPIO_RegDef_thhhhhhh+0x8c>
		uint8_t IRQ_number = get_irq_pinNum(GPIO_PinNumber);
 800066a:	79fb      	ldrb	r3, [r7, #7]
 800066c:	4618      	mov	r0, r3
 800066e:	f7ff ffad 	bl	80005cc <_ZL14get_irq_pinNumh>
 8000672:	4603      	mov	r3, r0
 8000674:	75fb      	strb	r3, [r7, #23]
		GPIO_IRQInterruptConfig(IRQ_number, ENABLE);
 8000676:	7dfb      	ldrb	r3, [r7, #23]
 8000678:	2201      	movs	r2, #1
 800067a:	4619      	mov	r1, r3
 800067c:	68f8      	ldr	r0, [r7, #12]
 800067e:	f000 fa93 	bl	8000ba8 <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh>
		GPIO_IRQPriorityConfig(IRQ_number, GPIO_IRQ_Priority);
 8000682:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8000686:	7dfb      	ldrb	r3, [r7, #23]
 8000688:	4619      	mov	r1, r3
 800068a:	68f8      	ldr	r0, [r7, #12]
 800068c:	f000 fb10 	bl	8000cb0 <_ZN12GPIO_Handler22GPIO_IRQPriorityConfigEhh>
	}
}
 8000690:	68fb      	ldr	r3, [r7, #12]
 8000692:	4618      	mov	r0, r3
 8000694:	3718      	adds	r7, #24
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}

0800069a <_ZN12GPIO_HandlerD1Ev>:
 *
 * @return None
 *
 * @Node: Be careful when using many Peripheral device in the same PORT
 **********************************************************************/
GPIO_Handler::~GPIO_Handler() {
 800069a:	b580      	push	{r7, lr}
 800069c:	b082      	sub	sp, #8
 800069e:	af00      	add	r7, sp, #0
 80006a0:	6078      	str	r0, [r7, #4]
	GPIO_DeInit();
 80006a2:	6878      	ldr	r0, [r7, #4]
 80006a4:	f000 f9d6 	bl	8000a54 <_ZN12GPIO_Handler11GPIO_DeInitEv>
}
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	4618      	mov	r0, r3
 80006ac:	3708      	adds	r7, #8
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
	...

080006b4 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv>:

// peripheral clock setup
void GPIO_Handler::GPIO_PeriClockControl() {
 80006b4:	b480      	push	{r7}
 80006b6:	b083      	sub	sp, #12
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
	if (GPIOx_.pGPIOx == GPIOA) {
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	4a30      	ldr	r2, [pc, #192]	; (8000784 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xd0>)
 80006c2:	4293      	cmp	r3, r2
 80006c4:	d106      	bne.n	80006d4 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0x20>
		GPIOA_PCLK_EN();
 80006c6:	4b30      	ldr	r3, [pc, #192]	; (8000788 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xd4>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ca:	4a2f      	ldr	r2, [pc, #188]	; (8000788 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xd4>)
 80006cc:	f043 0301 	orr.w	r3, r3, #1
 80006d0:	6313      	str	r3, [r2, #48]	; 0x30
	} else if (GPIOx_.pGPIOx == GPIOG) {
		GPIOG_PCLK_EN();
	} else if (GPIOx_.pGPIOx == GPIOH) {
		GPIOH_PCLK_EN();
	}
}
 80006d2:	e052      	b.n	800077a <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xc6>
	} else if (GPIOx_.pGPIOx == GPIOB) {
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	4a2c      	ldr	r2, [pc, #176]	; (800078c <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xd8>)
 80006da:	4293      	cmp	r3, r2
 80006dc:	d106      	bne.n	80006ec <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0x38>
		GPIOB_PCLK_EN();
 80006de:	4b2a      	ldr	r3, [pc, #168]	; (8000788 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xd4>)
 80006e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e2:	4a29      	ldr	r2, [pc, #164]	; (8000788 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xd4>)
 80006e4:	f043 0302 	orr.w	r3, r3, #2
 80006e8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80006ea:	e046      	b.n	800077a <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xc6>
	} else if (GPIOx_.pGPIOx == GPIOC) {
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	4a27      	ldr	r2, [pc, #156]	; (8000790 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xdc>)
 80006f2:	4293      	cmp	r3, r2
 80006f4:	d106      	bne.n	8000704 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0x50>
		GPIOC_PCLK_EN();
 80006f6:	4b24      	ldr	r3, [pc, #144]	; (8000788 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xd4>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fa:	4a23      	ldr	r2, [pc, #140]	; (8000788 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xd4>)
 80006fc:	f043 0304 	orr.w	r3, r3, #4
 8000700:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000702:	e03a      	b.n	800077a <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xc6>
	} else if (GPIOx_.pGPIOx == GPIOD) {
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	4a22      	ldr	r2, [pc, #136]	; (8000794 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xe0>)
 800070a:	4293      	cmp	r3, r2
 800070c:	d106      	bne.n	800071c <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0x68>
		GPIOD_PCLK_EN();
 800070e:	4b1e      	ldr	r3, [pc, #120]	; (8000788 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xd4>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000712:	4a1d      	ldr	r2, [pc, #116]	; (8000788 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xd4>)
 8000714:	f043 0308 	orr.w	r3, r3, #8
 8000718:	6313      	str	r3, [r2, #48]	; 0x30
}
 800071a:	e02e      	b.n	800077a <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xc6>
	} else if (GPIOx_.pGPIOx == GPIOE) {
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	4a1d      	ldr	r2, [pc, #116]	; (8000798 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xe4>)
 8000722:	4293      	cmp	r3, r2
 8000724:	d106      	bne.n	8000734 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0x80>
		GPIOE_PCLK_EN();
 8000726:	4b18      	ldr	r3, [pc, #96]	; (8000788 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xd4>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072a:	4a17      	ldr	r2, [pc, #92]	; (8000788 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xd4>)
 800072c:	f043 0310 	orr.w	r3, r3, #16
 8000730:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000732:	e022      	b.n	800077a <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xc6>
	} else if (GPIOx_.pGPIOx == GPIOF) {
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	4a18      	ldr	r2, [pc, #96]	; (800079c <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xe8>)
 800073a:	4293      	cmp	r3, r2
 800073c:	d106      	bne.n	800074c <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0x98>
		GPIOF_PCLK_EN();
 800073e:	4b12      	ldr	r3, [pc, #72]	; (8000788 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xd4>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	4a11      	ldr	r2, [pc, #68]	; (8000788 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xd4>)
 8000744:	f043 0320 	orr.w	r3, r3, #32
 8000748:	6313      	str	r3, [r2, #48]	; 0x30
}
 800074a:	e016      	b.n	800077a <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xc6>
	} else if (GPIOx_.pGPIOx == GPIOG) {
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	4a13      	ldr	r2, [pc, #76]	; (80007a0 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xec>)
 8000752:	4293      	cmp	r3, r2
 8000754:	d106      	bne.n	8000764 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xb0>
		GPIOG_PCLK_EN();
 8000756:	4b0c      	ldr	r3, [pc, #48]	; (8000788 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xd4>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075a:	4a0b      	ldr	r2, [pc, #44]	; (8000788 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xd4>)
 800075c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000760:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000762:	e00a      	b.n	800077a <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xc6>
	} else if (GPIOx_.pGPIOx == GPIOH) {
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	4a0e      	ldr	r2, [pc, #56]	; (80007a4 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xf0>)
 800076a:	4293      	cmp	r3, r2
 800076c:	d105      	bne.n	800077a <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xc6>
		GPIOH_PCLK_EN();
 800076e:	4b06      	ldr	r3, [pc, #24]	; (8000788 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xd4>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000772:	4a05      	ldr	r2, [pc, #20]	; (8000788 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xd4>)
 8000774:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000778:	6313      	str	r3, [r2, #48]	; 0x30
}
 800077a:	bf00      	nop
 800077c:	370c      	adds	r7, #12
 800077e:	46bd      	mov	sp, r7
 8000780:	bc80      	pop	{r7}
 8000782:	4770      	bx	lr
 8000784:	40020000 	.word	0x40020000
 8000788:	40023800 	.word	0x40023800
 800078c:	40020400 	.word	0x40020400
 8000790:	40020800 	.word	0x40020800
 8000794:	40020c00 	.word	0x40020c00
 8000798:	40021000 	.word	0x40021000
 800079c:	40021400 	.word	0x40021400
 80007a0:	40021800 	.word	0x40021800
 80007a4:	40021c00 	.word	0x40021c00

080007a8 <_ZN12GPIO_Handler9GPIO_InitEv>:
 *
 * @param None
 *
 * @return None
 **********************************************************************/
void GPIO_Handler::GPIO_Init() {
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b086      	sub	sp, #24
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
	uint32_t temp = 0;
 80007b0:	2300      	movs	r3, #0
 80007b2:	617b      	str	r3, [r7, #20]
	// 1. configure the mode of gpio pin
	if(GPIOx_.GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG) {
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	795b      	ldrb	r3, [r3, #5]
 80007b8:	2b03      	cmp	r3, #3
 80007ba:	d820      	bhi.n	80007fe <_ZN12GPIO_Handler9GPIO_InitEv+0x56>
		// the non interrupt mode
		temp = GPIOx_.GPIO_PinConfig.GPIO_PinMode << (2 * GPIOx_.GPIO_PinConfig.GPIO_PinNumber);
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	795b      	ldrb	r3, [r3, #5]
 80007c0:	461a      	mov	r2, r3
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	791b      	ldrb	r3, [r3, #4]
 80007c6:	005b      	lsls	r3, r3, #1
 80007c8:	fa02 f303 	lsl.w	r3, r2, r3
 80007cc:	617b      	str	r3, [r7, #20]
		GPIOx_.pGPIOx->MODER &= ~(0x3 << (2 * GPIOx_.GPIO_PinConfig.GPIO_PinNumber)); // clearing
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	681a      	ldr	r2, [r3, #0]
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	791b      	ldrb	r3, [r3, #4]
 80007d8:	005b      	lsls	r3, r3, #1
 80007da:	2103      	movs	r1, #3
 80007dc:	fa01 f303 	lsl.w	r3, r1, r3
 80007e0:	43db      	mvns	r3, r3
 80007e2:	4619      	mov	r1, r3
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	400a      	ands	r2, r1
 80007ea:	601a      	str	r2, [r3, #0]
		GPIOx_.pGPIOx->MODER |= temp;
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	6819      	ldr	r1, [r3, #0]
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	697a      	ldr	r2, [r7, #20]
 80007f8:	430a      	orrs	r2, r1
 80007fa:	601a      	str	r2, [r3, #0]
 80007fc:	e083      	b.n	8000906 <_ZN12GPIO_Handler9GPIO_InitEv+0x15e>
	}
	else {
		// interrupt mode
		if(GPIO_MODE_IT_FT == GPIOx_.GPIO_PinConfig.GPIO_PinMode) {
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	795b      	ldrb	r3, [r3, #5]
 8000802:	2b04      	cmp	r3, #4
 8000804:	d117      	bne.n	8000836 <_ZN12GPIO_Handler9GPIO_InitEv+0x8e>
			// 1. configure the FTSR
			EXTI->FTSR |= (1 << GPIOx_.GPIO_PinConfig.GPIO_PinNumber);
 8000806:	4b90      	ldr	r3, [pc, #576]	; (8000a48 <_ZN12GPIO_Handler9GPIO_InitEv+0x2a0>)
 8000808:	68db      	ldr	r3, [r3, #12]
 800080a:	687a      	ldr	r2, [r7, #4]
 800080c:	7912      	ldrb	r2, [r2, #4]
 800080e:	4611      	mov	r1, r2
 8000810:	2201      	movs	r2, #1
 8000812:	408a      	lsls	r2, r1
 8000814:	4611      	mov	r1, r2
 8000816:	4a8c      	ldr	r2, [pc, #560]	; (8000a48 <_ZN12GPIO_Handler9GPIO_InitEv+0x2a0>)
 8000818:	430b      	orrs	r3, r1
 800081a:	60d3      	str	r3, [r2, #12]

			// clear the corresponding RTSR bit
			EXTI->RTSR &= ~(1 << GPIOx_.GPIO_PinConfig.GPIO_PinNumber);
 800081c:	4b8a      	ldr	r3, [pc, #552]	; (8000a48 <_ZN12GPIO_Handler9GPIO_InitEv+0x2a0>)
 800081e:	689b      	ldr	r3, [r3, #8]
 8000820:	687a      	ldr	r2, [r7, #4]
 8000822:	7912      	ldrb	r2, [r2, #4]
 8000824:	4611      	mov	r1, r2
 8000826:	2201      	movs	r2, #1
 8000828:	408a      	lsls	r2, r1
 800082a:	43d2      	mvns	r2, r2
 800082c:	4611      	mov	r1, r2
 800082e:	4a86      	ldr	r2, [pc, #536]	; (8000a48 <_ZN12GPIO_Handler9GPIO_InitEv+0x2a0>)
 8000830:	400b      	ands	r3, r1
 8000832:	6093      	str	r3, [r2, #8]
 8000834:	e035      	b.n	80008a2 <_ZN12GPIO_Handler9GPIO_InitEv+0xfa>

		}
		else if (GPIO_MODE_IT_RT == GPIOx_.GPIO_PinConfig.GPIO_PinMode) {
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	795b      	ldrb	r3, [r3, #5]
 800083a:	2b05      	cmp	r3, #5
 800083c:	d117      	bne.n	800086e <_ZN12GPIO_Handler9GPIO_InitEv+0xc6>
			// 1. configure the RTSR
			EXTI->RTSR |= (1 << GPIOx_.GPIO_PinConfig.GPIO_PinNumber);
 800083e:	4b82      	ldr	r3, [pc, #520]	; (8000a48 <_ZN12GPIO_Handler9GPIO_InitEv+0x2a0>)
 8000840:	689b      	ldr	r3, [r3, #8]
 8000842:	687a      	ldr	r2, [r7, #4]
 8000844:	7912      	ldrb	r2, [r2, #4]
 8000846:	4611      	mov	r1, r2
 8000848:	2201      	movs	r2, #1
 800084a:	408a      	lsls	r2, r1
 800084c:	4611      	mov	r1, r2
 800084e:	4a7e      	ldr	r2, [pc, #504]	; (8000a48 <_ZN12GPIO_Handler9GPIO_InitEv+0x2a0>)
 8000850:	430b      	orrs	r3, r1
 8000852:	6093      	str	r3, [r2, #8]

			// clear the corresponding RTSR bit
			EXTI->FTSR &= ~(1 << GPIOx_.GPIO_PinConfig.GPIO_PinNumber);
 8000854:	4b7c      	ldr	r3, [pc, #496]	; (8000a48 <_ZN12GPIO_Handler9GPIO_InitEv+0x2a0>)
 8000856:	68db      	ldr	r3, [r3, #12]
 8000858:	687a      	ldr	r2, [r7, #4]
 800085a:	7912      	ldrb	r2, [r2, #4]
 800085c:	4611      	mov	r1, r2
 800085e:	2201      	movs	r2, #1
 8000860:	408a      	lsls	r2, r1
 8000862:	43d2      	mvns	r2, r2
 8000864:	4611      	mov	r1, r2
 8000866:	4a78      	ldr	r2, [pc, #480]	; (8000a48 <_ZN12GPIO_Handler9GPIO_InitEv+0x2a0>)
 8000868:	400b      	ands	r3, r1
 800086a:	60d3      	str	r3, [r2, #12]
 800086c:	e019      	b.n	80008a2 <_ZN12GPIO_Handler9GPIO_InitEv+0xfa>
		}
		else if (GPIO_MODE_IT_RFT == GPIOx_.GPIO_PinConfig.GPIO_PinMode) {
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	795b      	ldrb	r3, [r3, #5]
 8000872:	2b06      	cmp	r3, #6
 8000874:	d115      	bne.n	80008a2 <_ZN12GPIO_Handler9GPIO_InitEv+0xfa>
			// 1. configure both FTSR and RTSR
			EXTI->FTSR |= (1 << GPIOx_.GPIO_PinConfig.GPIO_PinNumber);
 8000876:	4b74      	ldr	r3, [pc, #464]	; (8000a48 <_ZN12GPIO_Handler9GPIO_InitEv+0x2a0>)
 8000878:	68db      	ldr	r3, [r3, #12]
 800087a:	687a      	ldr	r2, [r7, #4]
 800087c:	7912      	ldrb	r2, [r2, #4]
 800087e:	4611      	mov	r1, r2
 8000880:	2201      	movs	r2, #1
 8000882:	408a      	lsls	r2, r1
 8000884:	4611      	mov	r1, r2
 8000886:	4a70      	ldr	r2, [pc, #448]	; (8000a48 <_ZN12GPIO_Handler9GPIO_InitEv+0x2a0>)
 8000888:	430b      	orrs	r3, r1
 800088a:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= (1 << GPIOx_.GPIO_PinConfig.GPIO_PinNumber);
 800088c:	4b6e      	ldr	r3, [pc, #440]	; (8000a48 <_ZN12GPIO_Handler9GPIO_InitEv+0x2a0>)
 800088e:	689b      	ldr	r3, [r3, #8]
 8000890:	687a      	ldr	r2, [r7, #4]
 8000892:	7912      	ldrb	r2, [r2, #4]
 8000894:	4611      	mov	r1, r2
 8000896:	2201      	movs	r2, #1
 8000898:	408a      	lsls	r2, r1
 800089a:	4611      	mov	r1, r2
 800089c:	4a6a      	ldr	r2, [pc, #424]	; (8000a48 <_ZN12GPIO_Handler9GPIO_InitEv+0x2a0>)
 800089e:	430b      	orrs	r3, r1
 80008a0:	6093      	str	r3, [r2, #8]
		}

		// 2. configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 = GPIOx_.GPIO_PinConfig.GPIO_PinNumber >> 2;
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	791b      	ldrb	r3, [r3, #4]
 80008a6:	109b      	asrs	r3, r3, #2
 80008a8:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = GPIOx_.GPIO_PinConfig.GPIO_PinNumber % 4;
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	791b      	ldrb	r3, [r3, #4]
 80008ae:	f003 0303 	and.w	r3, r3, #3
 80008b2:	74bb      	strb	r3, [r7, #18]
		uint8_t portCode = gpio_baseAddr_to_code(GPIOx_.pGPIOx);
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	4618      	mov	r0, r3
 80008ba:	f7ff fe3d 	bl	8000538 <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t>
 80008be:	4603      	mov	r3, r0
 80008c0:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 80008c2:	4b62      	ldr	r3, [pc, #392]	; (8000a4c <_ZN12GPIO_Handler9GPIO_InitEv+0x2a4>)
 80008c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008c6:	4a61      	ldr	r2, [pc, #388]	; (8000a4c <_ZN12GPIO_Handler9GPIO_InitEv+0x2a4>)
 80008c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008cc:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[temp1] |= (portCode << (4 * temp2));
 80008ce:	4a60      	ldr	r2, [pc, #384]	; (8000a50 <_ZN12GPIO_Handler9GPIO_InitEv+0x2a8>)
 80008d0:	7cfb      	ldrb	r3, [r7, #19]
 80008d2:	3302      	adds	r3, #2
 80008d4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80008d8:	7c79      	ldrb	r1, [r7, #17]
 80008da:	7cbb      	ldrb	r3, [r7, #18]
 80008dc:	009b      	lsls	r3, r3, #2
 80008de:	fa01 f303 	lsl.w	r3, r1, r3
 80008e2:	4618      	mov	r0, r3
 80008e4:	495a      	ldr	r1, [pc, #360]	; (8000a50 <_ZN12GPIO_Handler9GPIO_InitEv+0x2a8>)
 80008e6:	7cfb      	ldrb	r3, [r7, #19]
 80008e8:	4302      	orrs	r2, r0
 80008ea:	3302      	adds	r3, #2
 80008ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		// 3. Enable the exti interrupt delivery using IMR
		EXTI->IMR |= 1 << GPIOx_.GPIO_PinConfig.GPIO_PinNumber;
 80008f0:	4b55      	ldr	r3, [pc, #340]	; (8000a48 <_ZN12GPIO_Handler9GPIO_InitEv+0x2a0>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	687a      	ldr	r2, [r7, #4]
 80008f6:	7912      	ldrb	r2, [r2, #4]
 80008f8:	4611      	mov	r1, r2
 80008fa:	2201      	movs	r2, #1
 80008fc:	408a      	lsls	r2, r1
 80008fe:	4611      	mov	r1, r2
 8000900:	4a51      	ldr	r2, [pc, #324]	; (8000a48 <_ZN12GPIO_Handler9GPIO_InitEv+0x2a0>)
 8000902:	430b      	orrs	r3, r1
 8000904:	6013      	str	r3, [r2, #0]
	}

	temp = 0;
 8000906:	2300      	movs	r3, #0
 8000908:	617b      	str	r3, [r7, #20]
	// 2. configure the speed
	temp = GPIOx_.GPIO_PinConfig.GPIO_PinSpeed << (2 * GPIOx_.GPIO_PinConfig.GPIO_PinNumber);
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	799b      	ldrb	r3, [r3, #6]
 800090e:	461a      	mov	r2, r3
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	791b      	ldrb	r3, [r3, #4]
 8000914:	005b      	lsls	r3, r3, #1
 8000916:	fa02 f303 	lsl.w	r3, r2, r3
 800091a:	617b      	str	r3, [r7, #20]
	GPIOx_.pGPIOx->OSPEEDR &= ~(0x3 << (2 * GPIOx_.GPIO_PinConfig.GPIO_PinNumber)); // clearing
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	689a      	ldr	r2, [r3, #8]
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	791b      	ldrb	r3, [r3, #4]
 8000926:	005b      	lsls	r3, r3, #1
 8000928:	2103      	movs	r1, #3
 800092a:	fa01 f303 	lsl.w	r3, r1, r3
 800092e:	43db      	mvns	r3, r3
 8000930:	4619      	mov	r1, r3
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	400a      	ands	r2, r1
 8000938:	609a      	str	r2, [r3, #8]
	GPIOx_.pGPIOx->OSPEEDR |= temp;
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	6899      	ldr	r1, [r3, #8]
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	697a      	ldr	r2, [r7, #20]
 8000946:	430a      	orrs	r2, r1
 8000948:	609a      	str	r2, [r3, #8]

	temp = 0;
 800094a:	2300      	movs	r3, #0
 800094c:	617b      	str	r3, [r7, #20]
	// 3. configure the pupd settings
	temp = GPIOx_.GPIO_PinConfig.GPIO_PinPuPdControl << (2 * GPIOx_.GPIO_PinConfig.GPIO_PinNumber);
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	79db      	ldrb	r3, [r3, #7]
 8000952:	461a      	mov	r2, r3
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	791b      	ldrb	r3, [r3, #4]
 8000958:	005b      	lsls	r3, r3, #1
 800095a:	fa02 f303 	lsl.w	r3, r2, r3
 800095e:	617b      	str	r3, [r7, #20]
	GPIOx_.pGPIOx->PUPDR &= ~(0x3 << (2 * GPIOx_.GPIO_PinConfig.GPIO_PinNumber));// clearing
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	68da      	ldr	r2, [r3, #12]
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	791b      	ldrb	r3, [r3, #4]
 800096a:	005b      	lsls	r3, r3, #1
 800096c:	2103      	movs	r1, #3
 800096e:	fa01 f303 	lsl.w	r3, r1, r3
 8000972:	43db      	mvns	r3, r3
 8000974:	4619      	mov	r1, r3
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	400a      	ands	r2, r1
 800097c:	60da      	str	r2, [r3, #12]
	GPIOx_.pGPIOx->PUPDR |= temp;
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	68d9      	ldr	r1, [r3, #12]
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	697a      	ldr	r2, [r7, #20]
 800098a:	430a      	orrs	r2, r1
 800098c:	60da      	str	r2, [r3, #12]

	temp = 0;
 800098e:	2300      	movs	r3, #0
 8000990:	617b      	str	r3, [r7, #20]
	// 4. configure the optype
	temp = GPIOx_.GPIO_PinConfig.GPIO_PinOPType << GPIOx_.GPIO_PinConfig.GPIO_PinNumber;
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	7a1b      	ldrb	r3, [r3, #8]
 8000996:	461a      	mov	r2, r3
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	791b      	ldrb	r3, [r3, #4]
 800099c:	fa02 f303 	lsl.w	r3, r2, r3
 80009a0:	617b      	str	r3, [r7, #20]
	GPIOx_.pGPIOx->OTYPER &= ~(0x1 << GPIOx_.GPIO_PinConfig.GPIO_PinNumber); // clearing
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	685a      	ldr	r2, [r3, #4]
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	791b      	ldrb	r3, [r3, #4]
 80009ac:	4619      	mov	r1, r3
 80009ae:	2301      	movs	r3, #1
 80009b0:	408b      	lsls	r3, r1
 80009b2:	43db      	mvns	r3, r3
 80009b4:	4619      	mov	r1, r3
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	400a      	ands	r2, r1
 80009bc:	605a      	str	r2, [r3, #4]
	GPIOx_.pGPIOx->OTYPER |= temp;
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	6859      	ldr	r1, [r3, #4]
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	697a      	ldr	r2, [r7, #20]
 80009ca:	430a      	orrs	r2, r1
 80009cc:	605a      	str	r2, [r3, #4]

	temp = 0;
 80009ce:	2300      	movs	r3, #0
 80009d0:	617b      	str	r3, [r7, #20]
	// 5. configure the alt functionality
	if(GPIOx_.GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN) {
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	795b      	ldrb	r3, [r3, #5]
 80009d6:	2b02      	cmp	r3, #2
 80009d8:	d131      	bne.n	8000a3e <_ZN12GPIO_Handler9GPIO_InitEv+0x296>
		// configure alt function register
		uint8_t temp1, temp2;
		temp1 = GPIOx_.GPIO_PinConfig.GPIO_PinNumber / 8;
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	791b      	ldrb	r3, [r3, #4]
 80009de:	08db      	lsrs	r3, r3, #3
 80009e0:	743b      	strb	r3, [r7, #16]
		temp2 = GPIOx_.GPIO_PinConfig.GPIO_PinNumber % 8;
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	791b      	ldrb	r3, [r3, #4]
 80009e6:	f003 0307 	and.w	r3, r3, #7
 80009ea:	73fb      	strb	r3, [r7, #15]
		GPIOx_.pGPIOx->AFR[temp1] &= ~(0xF << (4 * temp2));
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	7c3a      	ldrb	r2, [r7, #16]
 80009f2:	3208      	adds	r2, #8
 80009f4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80009f8:	7bfb      	ldrb	r3, [r7, #15]
 80009fa:	009b      	lsls	r3, r3, #2
 80009fc:	220f      	movs	r2, #15
 80009fe:	fa02 f303 	lsl.w	r3, r2, r3
 8000a02:	43db      	mvns	r3, r3
 8000a04:	4618      	mov	r0, r3
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	7c3a      	ldrb	r2, [r7, #16]
 8000a0c:	4001      	ands	r1, r0
 8000a0e:	3208      	adds	r2, #8
 8000a10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		GPIOx_.pGPIOx->AFR[temp1] |= (GPIOx_.GPIO_PinConfig.GPIO_PinAltFunMode << (4 * temp2));
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	7c3a      	ldrb	r2, [r7, #16]
 8000a1a:	3208      	adds	r2, #8
 8000a1c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	7a5b      	ldrb	r3, [r3, #9]
 8000a24:	461a      	mov	r2, r3
 8000a26:	7bfb      	ldrb	r3, [r7, #15]
 8000a28:	009b      	lsls	r3, r3, #2
 8000a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a2e:	4618      	mov	r0, r3
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	7c3a      	ldrb	r2, [r7, #16]
 8000a36:	4301      	orrs	r1, r0
 8000a38:	3208      	adds	r2, #8
 8000a3a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
 8000a3e:	bf00      	nop
 8000a40:	3718      	adds	r7, #24
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	40013c00 	.word	0x40013c00
 8000a4c:	40023800 	.word	0x40023800
 8000a50:	40013800 	.word	0x40013800

08000a54 <_ZN12GPIO_Handler11GPIO_DeInitEv>:
 *
 * @brief - Reset GPIO Port
 *
 * @return uint8, b'0000_000x
 */
void GPIO_Handler::GPIO_DeInit() {
 8000a54:	b480      	push	{r7}
 8000a56:	b083      	sub	sp, #12
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
	if(GPIOx_.pGPIOx == GPIOA) {
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	4a48      	ldr	r2, [pc, #288]	; (8000b84 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x130>)
 8000a62:	4293      	cmp	r3, r2
 8000a64:	d10c      	bne.n	8000a80 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x2c>
		GPIOA_REG_RESET();
 8000a66:	4b48      	ldr	r3, [pc, #288]	; (8000b88 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 8000a68:	691b      	ldr	r3, [r3, #16]
 8000a6a:	4a47      	ldr	r2, [pc, #284]	; (8000b88 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 8000a6c:	f043 0301 	orr.w	r3, r3, #1
 8000a70:	6113      	str	r3, [r2, #16]
 8000a72:	4b45      	ldr	r3, [pc, #276]	; (8000b88 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 8000a74:	691b      	ldr	r3, [r3, #16]
 8000a76:	4a44      	ldr	r2, [pc, #272]	; (8000b88 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 8000a78:	f023 0301 	bic.w	r3, r3, #1
 8000a7c:	6113      	str	r3, [r2, #16]
		GPIOG_REG_RESET();
	}
	else if (GPIOx_.pGPIOx == GPIOH) {
		GPIOH_REG_RESET();
	}
}
 8000a7e:	e07c      	b.n	8000b7a <_ZN12GPIO_Handler11GPIO_DeInitEv+0x126>
	else if (GPIOx_.pGPIOx == GPIOB) {
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	4a41      	ldr	r2, [pc, #260]	; (8000b8c <_ZN12GPIO_Handler11GPIO_DeInitEv+0x138>)
 8000a86:	4293      	cmp	r3, r2
 8000a88:	d10c      	bne.n	8000aa4 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x50>
		GPIOB_REG_RESET();
 8000a8a:	4b3f      	ldr	r3, [pc, #252]	; (8000b88 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 8000a8c:	691b      	ldr	r3, [r3, #16]
 8000a8e:	4a3e      	ldr	r2, [pc, #248]	; (8000b88 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 8000a90:	f043 0302 	orr.w	r3, r3, #2
 8000a94:	6113      	str	r3, [r2, #16]
 8000a96:	4b3c      	ldr	r3, [pc, #240]	; (8000b88 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 8000a98:	691b      	ldr	r3, [r3, #16]
 8000a9a:	4a3b      	ldr	r2, [pc, #236]	; (8000b88 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 8000a9c:	f023 0302 	bic.w	r3, r3, #2
 8000aa0:	6113      	str	r3, [r2, #16]
}
 8000aa2:	e06a      	b.n	8000b7a <_ZN12GPIO_Handler11GPIO_DeInitEv+0x126>
	else if (GPIOx_.pGPIOx == GPIOC) {
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	4a39      	ldr	r2, [pc, #228]	; (8000b90 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x13c>)
 8000aaa:	4293      	cmp	r3, r2
 8000aac:	d10c      	bne.n	8000ac8 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x74>
		GPIOC_REG_RESET();
 8000aae:	4b36      	ldr	r3, [pc, #216]	; (8000b88 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 8000ab0:	691b      	ldr	r3, [r3, #16]
 8000ab2:	4a35      	ldr	r2, [pc, #212]	; (8000b88 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 8000ab4:	f043 0304 	orr.w	r3, r3, #4
 8000ab8:	6113      	str	r3, [r2, #16]
 8000aba:	4b33      	ldr	r3, [pc, #204]	; (8000b88 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 8000abc:	691b      	ldr	r3, [r3, #16]
 8000abe:	4a32      	ldr	r2, [pc, #200]	; (8000b88 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 8000ac0:	f023 0304 	bic.w	r3, r3, #4
 8000ac4:	6113      	str	r3, [r2, #16]
}
 8000ac6:	e058      	b.n	8000b7a <_ZN12GPIO_Handler11GPIO_DeInitEv+0x126>
	else if (GPIOx_.pGPIOx == GPIOD) {
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	4a31      	ldr	r2, [pc, #196]	; (8000b94 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x140>)
 8000ace:	4293      	cmp	r3, r2
 8000ad0:	d10c      	bne.n	8000aec <_ZN12GPIO_Handler11GPIO_DeInitEv+0x98>
		GPIOD_REG_RESET();
 8000ad2:	4b2d      	ldr	r3, [pc, #180]	; (8000b88 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 8000ad4:	691b      	ldr	r3, [r3, #16]
 8000ad6:	4a2c      	ldr	r2, [pc, #176]	; (8000b88 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 8000ad8:	f043 0308 	orr.w	r3, r3, #8
 8000adc:	6113      	str	r3, [r2, #16]
 8000ade:	4b2a      	ldr	r3, [pc, #168]	; (8000b88 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 8000ae0:	691b      	ldr	r3, [r3, #16]
 8000ae2:	4a29      	ldr	r2, [pc, #164]	; (8000b88 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 8000ae4:	f023 0308 	bic.w	r3, r3, #8
 8000ae8:	6113      	str	r3, [r2, #16]
}
 8000aea:	e046      	b.n	8000b7a <_ZN12GPIO_Handler11GPIO_DeInitEv+0x126>
	else if (GPIOx_.pGPIOx == GPIOE) {
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	4a29      	ldr	r2, [pc, #164]	; (8000b98 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x144>)
 8000af2:	4293      	cmp	r3, r2
 8000af4:	d10c      	bne.n	8000b10 <_ZN12GPIO_Handler11GPIO_DeInitEv+0xbc>
		GPIOE_REG_RESET();
 8000af6:	4b24      	ldr	r3, [pc, #144]	; (8000b88 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 8000af8:	691b      	ldr	r3, [r3, #16]
 8000afa:	4a23      	ldr	r2, [pc, #140]	; (8000b88 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 8000afc:	f043 0310 	orr.w	r3, r3, #16
 8000b00:	6113      	str	r3, [r2, #16]
 8000b02:	4b21      	ldr	r3, [pc, #132]	; (8000b88 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 8000b04:	691b      	ldr	r3, [r3, #16]
 8000b06:	4a20      	ldr	r2, [pc, #128]	; (8000b88 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 8000b08:	f023 0310 	bic.w	r3, r3, #16
 8000b0c:	6113      	str	r3, [r2, #16]
}
 8000b0e:	e034      	b.n	8000b7a <_ZN12GPIO_Handler11GPIO_DeInitEv+0x126>
	else if (GPIOx_.pGPIOx == GPIOF) {
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	4a21      	ldr	r2, [pc, #132]	; (8000b9c <_ZN12GPIO_Handler11GPIO_DeInitEv+0x148>)
 8000b16:	4293      	cmp	r3, r2
 8000b18:	d10c      	bne.n	8000b34 <_ZN12GPIO_Handler11GPIO_DeInitEv+0xe0>
		GPIOF_REG_RESET();
 8000b1a:	4b1b      	ldr	r3, [pc, #108]	; (8000b88 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 8000b1c:	691b      	ldr	r3, [r3, #16]
 8000b1e:	4a1a      	ldr	r2, [pc, #104]	; (8000b88 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 8000b20:	f043 0320 	orr.w	r3, r3, #32
 8000b24:	6113      	str	r3, [r2, #16]
 8000b26:	4b18      	ldr	r3, [pc, #96]	; (8000b88 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 8000b28:	691b      	ldr	r3, [r3, #16]
 8000b2a:	4a17      	ldr	r2, [pc, #92]	; (8000b88 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 8000b2c:	f023 0320 	bic.w	r3, r3, #32
 8000b30:	6113      	str	r3, [r2, #16]
}
 8000b32:	e022      	b.n	8000b7a <_ZN12GPIO_Handler11GPIO_DeInitEv+0x126>
	else if (GPIOx_.pGPIOx == GPIOG) {
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	4a19      	ldr	r2, [pc, #100]	; (8000ba0 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x14c>)
 8000b3a:	4293      	cmp	r3, r2
 8000b3c:	d10c      	bne.n	8000b58 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x104>
		GPIOG_REG_RESET();
 8000b3e:	4b12      	ldr	r3, [pc, #72]	; (8000b88 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 8000b40:	691b      	ldr	r3, [r3, #16]
 8000b42:	4a11      	ldr	r2, [pc, #68]	; (8000b88 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 8000b44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b48:	6113      	str	r3, [r2, #16]
 8000b4a:	4b0f      	ldr	r3, [pc, #60]	; (8000b88 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 8000b4c:	691b      	ldr	r3, [r3, #16]
 8000b4e:	4a0e      	ldr	r2, [pc, #56]	; (8000b88 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 8000b50:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000b54:	6113      	str	r3, [r2, #16]
}
 8000b56:	e010      	b.n	8000b7a <_ZN12GPIO_Handler11GPIO_DeInitEv+0x126>
	else if (GPIOx_.pGPIOx == GPIOH) {
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4a11      	ldr	r2, [pc, #68]	; (8000ba4 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x150>)
 8000b5e:	4293      	cmp	r3, r2
 8000b60:	d10b      	bne.n	8000b7a <_ZN12GPIO_Handler11GPIO_DeInitEv+0x126>
		GPIOH_REG_RESET();
 8000b62:	4b09      	ldr	r3, [pc, #36]	; (8000b88 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 8000b64:	691b      	ldr	r3, [r3, #16]
 8000b66:	4a08      	ldr	r2, [pc, #32]	; (8000b88 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 8000b68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b6c:	6113      	str	r3, [r2, #16]
 8000b6e:	4b06      	ldr	r3, [pc, #24]	; (8000b88 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 8000b70:	691b      	ldr	r3, [r3, #16]
 8000b72:	4a05      	ldr	r2, [pc, #20]	; (8000b88 <_ZN12GPIO_Handler11GPIO_DeInitEv+0x134>)
 8000b74:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000b78:	6113      	str	r3, [r2, #16]
}
 8000b7a:	bf00      	nop
 8000b7c:	370c      	adds	r7, #12
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bc80      	pop	{r7}
 8000b82:	4770      	bx	lr
 8000b84:	40020000 	.word	0x40020000
 8000b88:	40023800 	.word	0x40023800
 8000b8c:	40020400 	.word	0x40020400
 8000b90:	40020800 	.word	0x40020800
 8000b94:	40020c00 	.word	0x40020c00
 8000b98:	40021000 	.word	0x40021000
 8000b9c:	40021400 	.word	0x40021400
 8000ba0:	40021800 	.word	0x40021800
 8000ba4:	40021c00 	.word	0x40021c00

08000ba8 <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh>:
 * @param[in] IRQNumber     - IRQNumber IRQ Position number
 * @param[in] EnorDi		- Enable/Disable Flag
 *
 * @return None
 */
void GPIO_Handler::GPIO_IRQInterruptConfig(const uint8_t IRQNumber, const uint8_t EnorDi) {
 8000ba8:	b480      	push	{r7}
 8000baa:	b083      	sub	sp, #12
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
 8000bb0:	460b      	mov	r3, r1
 8000bb2:	70fb      	strb	r3, [r7, #3]
 8000bb4:	4613      	mov	r3, r2
 8000bb6:	70bb      	strb	r3, [r7, #2]
	if(EnorDi == ENABLE) {
 8000bb8:	78bb      	ldrb	r3, [r7, #2]
 8000bba:	2b01      	cmp	r3, #1
 8000bbc:	d133      	bne.n	8000c26 <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0x7e>
		if (IRQNumber <= 31) {
 8000bbe:	78fb      	ldrb	r3, [r7, #3]
 8000bc0:	2b1f      	cmp	r3, #31
 8000bc2:	d80a      	bhi.n	8000bda <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0x32>
			//	program ISER0 register
			*NVIC_ISER0 |= (1 << IRQNumber);
 8000bc4:	4b34      	ldr	r3, [pc, #208]	; (8000c98 <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0xf0>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	78fa      	ldrb	r2, [r7, #3]
 8000bca:	2101      	movs	r1, #1
 8000bcc:	fa01 f202 	lsl.w	r2, r1, r2
 8000bd0:	4611      	mov	r1, r2
 8000bd2:	4a31      	ldr	r2, [pc, #196]	; (8000c98 <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0xf0>)
 8000bd4:	430b      	orrs	r3, r1
 8000bd6:	6013      	str	r3, [r2, #0]
			// program ICE2 register
			*NVIC_ICER2 |= (1 << (IRQNumber % 64));
		}
	}

}
 8000bd8:	e059      	b.n	8000c8e <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0xe6>
		} else if (IRQNumber > 31 && IRQNumber < 64) {
 8000bda:	78fb      	ldrb	r3, [r7, #3]
 8000bdc:	2b1f      	cmp	r3, #31
 8000bde:	d90f      	bls.n	8000c00 <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0x58>
 8000be0:	78fb      	ldrb	r3, [r7, #3]
 8000be2:	2b3f      	cmp	r3, #63	; 0x3f
 8000be4:	d80c      	bhi.n	8000c00 <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0x58>
			*NVIC_ISER1 |= (1 << (IRQNumber % 32));
 8000be6:	4b2d      	ldr	r3, [pc, #180]	; (8000c9c <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0xf4>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	78fa      	ldrb	r2, [r7, #3]
 8000bec:	f002 021f 	and.w	r2, r2, #31
 8000bf0:	2101      	movs	r1, #1
 8000bf2:	fa01 f202 	lsl.w	r2, r1, r2
 8000bf6:	4611      	mov	r1, r2
 8000bf8:	4a28      	ldr	r2, [pc, #160]	; (8000c9c <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0xf4>)
 8000bfa:	430b      	orrs	r3, r1
 8000bfc:	6013      	str	r3, [r2, #0]
 8000bfe:	e046      	b.n	8000c8e <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0xe6>
		} else if (IRQNumber >= 64 && IRQNumber < 96) {
 8000c00:	78fb      	ldrb	r3, [r7, #3]
 8000c02:	2b3f      	cmp	r3, #63	; 0x3f
 8000c04:	d943      	bls.n	8000c8e <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0xe6>
 8000c06:	78fb      	ldrb	r3, [r7, #3]
 8000c08:	2b5f      	cmp	r3, #95	; 0x5f
 8000c0a:	d840      	bhi.n	8000c8e <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0xe6>
			*NVIC_ISER2 |= (1 << (IRQNumber % 64));
 8000c0c:	4b24      	ldr	r3, [pc, #144]	; (8000ca0 <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0xf8>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	78fa      	ldrb	r2, [r7, #3]
 8000c12:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000c16:	2101      	movs	r1, #1
 8000c18:	fa01 f202 	lsl.w	r2, r1, r2
 8000c1c:	4611      	mov	r1, r2
 8000c1e:	4a20      	ldr	r2, [pc, #128]	; (8000ca0 <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0xf8>)
 8000c20:	430b      	orrs	r3, r1
 8000c22:	6013      	str	r3, [r2, #0]
}
 8000c24:	e033      	b.n	8000c8e <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0xe6>
		if (IRQNumber <= 31) {
 8000c26:	78fb      	ldrb	r3, [r7, #3]
 8000c28:	2b1f      	cmp	r3, #31
 8000c2a:	d80a      	bhi.n	8000c42 <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0x9a>
			*NVIC_ICER0 |= (1 << IRQNumber);
 8000c2c:	4b1d      	ldr	r3, [pc, #116]	; (8000ca4 <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0xfc>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	78fa      	ldrb	r2, [r7, #3]
 8000c32:	2101      	movs	r1, #1
 8000c34:	fa01 f202 	lsl.w	r2, r1, r2
 8000c38:	4611      	mov	r1, r2
 8000c3a:	4a1a      	ldr	r2, [pc, #104]	; (8000ca4 <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0xfc>)
 8000c3c:	430b      	orrs	r3, r1
 8000c3e:	6013      	str	r3, [r2, #0]
}
 8000c40:	e025      	b.n	8000c8e <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0xe6>
		} else if (IRQNumber > 31 && IRQNumber < 64) {
 8000c42:	78fb      	ldrb	r3, [r7, #3]
 8000c44:	2b1f      	cmp	r3, #31
 8000c46:	d90f      	bls.n	8000c68 <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0xc0>
 8000c48:	78fb      	ldrb	r3, [r7, #3]
 8000c4a:	2b3f      	cmp	r3, #63	; 0x3f
 8000c4c:	d80c      	bhi.n	8000c68 <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0xc0>
			*NVIC_ICER1 |= (1 << (IRQNumber % 32));
 8000c4e:	4b16      	ldr	r3, [pc, #88]	; (8000ca8 <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0x100>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	78fa      	ldrb	r2, [r7, #3]
 8000c54:	f002 021f 	and.w	r2, r2, #31
 8000c58:	2101      	movs	r1, #1
 8000c5a:	fa01 f202 	lsl.w	r2, r1, r2
 8000c5e:	4611      	mov	r1, r2
 8000c60:	4a11      	ldr	r2, [pc, #68]	; (8000ca8 <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0x100>)
 8000c62:	430b      	orrs	r3, r1
 8000c64:	6013      	str	r3, [r2, #0]
 8000c66:	e012      	b.n	8000c8e <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0xe6>
		} else if (IRQNumber >= 64 && IRQNumber < 96) {
 8000c68:	78fb      	ldrb	r3, [r7, #3]
 8000c6a:	2b3f      	cmp	r3, #63	; 0x3f
 8000c6c:	d90f      	bls.n	8000c8e <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0xe6>
 8000c6e:	78fb      	ldrb	r3, [r7, #3]
 8000c70:	2b5f      	cmp	r3, #95	; 0x5f
 8000c72:	d80c      	bhi.n	8000c8e <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0xe6>
			*NVIC_ICER2 |= (1 << (IRQNumber % 64));
 8000c74:	4b0d      	ldr	r3, [pc, #52]	; (8000cac <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0x104>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	78fa      	ldrb	r2, [r7, #3]
 8000c7a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000c7e:	2101      	movs	r1, #1
 8000c80:	fa01 f202 	lsl.w	r2, r1, r2
 8000c84:	4611      	mov	r1, r2
 8000c86:	4a09      	ldr	r2, [pc, #36]	; (8000cac <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0x104>)
 8000c88:	430b      	orrs	r3, r1
 8000c8a:	6013      	str	r3, [r2, #0]
}
 8000c8c:	e7ff      	b.n	8000c8e <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0xe6>
 8000c8e:	bf00      	nop
 8000c90:	370c      	adds	r7, #12
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bc80      	pop	{r7}
 8000c96:	4770      	bx	lr
 8000c98:	e000e100 	.word	0xe000e100
 8000c9c:	e000e104 	.word	0xe000e104
 8000ca0:	e000e108 	.word	0xe000e108
 8000ca4:	e000e180 	.word	0xe000e180
 8000ca8:	e000e184 	.word	0xe000e184
 8000cac:	e000e188 	.word	0xe000e188

08000cb0 <_ZN12GPIO_Handler22GPIO_IRQPriorityConfigEhh>:
 *
 * @param[in] IRQNumber: IRQ position for EXIT
 * @param[in] IRPriority: 0->15
 * @return None
 */
void GPIO_Handler::GPIO_IRQPriorityConfig(const uint8_t IRQNumber, const uint8_t IRQPriority) {
 8000cb0:	b480      	push	{r7}
 8000cb2:	b085      	sub	sp, #20
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
 8000cb8:	460b      	mov	r3, r1
 8000cba:	70fb      	strb	r3, [r7, #3]
 8000cbc:	4613      	mov	r3, r2
 8000cbe:	70bb      	strb	r3, [r7, #2]
	// 1. first lets find out the ipr register
	uint8_t iprx = IRQNumber >> 2;
 8000cc0:	78fb      	ldrb	r3, [r7, #3]
 8000cc2:	109b      	asrs	r3, r3, #2
 8000cc4:	73fb      	strb	r3, [r7, #15]
	uint8_t iprx_section = IRQNumber % 4;
 8000cc6:	78fb      	ldrb	r3, [r7, #3]
 8000cc8:	f003 0303 	and.w	r3, r3, #3
 8000ccc:	73bb      	strb	r3, [r7, #14]
	uint8_t shift_amount = (8 * iprx_section) + (8 - NO_PR_BITS_IMPLEMENTED);
 8000cce:	7bbb      	ldrb	r3, [r7, #14]
 8000cd0:	00db      	lsls	r3, r3, #3
 8000cd2:	b2db      	uxtb	r3, r3
 8000cd4:	3304      	adds	r3, #4
 8000cd6:	737b      	strb	r3, [r7, #13]

	*(NVIC_PR_BASE_ADDR + iprx) |= (IRQPriority << shift_amount);
 8000cd8:	7bfb      	ldrb	r3, [r7, #15]
 8000cda:	f103 5360 	add.w	r3, r3, #939524096	; 0x38000000
 8000cde:	f503 5364 	add.w	r3, r3, #14592	; 0x3900
 8000ce2:	009b      	lsls	r3, r3, #2
 8000ce4:	681a      	ldr	r2, [r3, #0]
 8000ce6:	78b9      	ldrb	r1, [r7, #2]
 8000ce8:	7b7b      	ldrb	r3, [r7, #13]
 8000cea:	fa01 f303 	lsl.w	r3, r1, r3
 8000cee:	4618      	mov	r0, r3
 8000cf0:	7bfb      	ldrb	r3, [r7, #15]
 8000cf2:	f103 5360 	add.w	r3, r3, #939524096	; 0x38000000
 8000cf6:	f503 5364 	add.w	r3, r3, #14592	; 0x3900
 8000cfa:	009b      	lsls	r3, r3, #2
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	ea42 0300 	orr.w	r3, r2, r0
 8000d02:	600b      	str	r3, [r1, #0]
}
 8000d04:	bf00      	nop
 8000d06:	3714      	adds	r7, #20
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bc80      	pop	{r7}
 8000d0c:	4770      	bx	lr

08000d0e <_ZN11SPI_HandlerC1EP12SPI_RegDef_thhhhhhh>:
/*********************************************************************
 * @class      		  - GPIO_Handler Constructor
 *
 * @brief             -
 **********************************************************************/
SPI_Handler::SPI_Handler(SPI_RegDef_t *SPIx_ADDR,
 8000d0e:	b580      	push	{r7, lr}
 8000d10:	b084      	sub	sp, #16
 8000d12:	af00      	add	r7, sp, #0
 8000d14:	60f8      	str	r0, [r7, #12]
 8000d16:	60b9      	str	r1, [r7, #8]
 8000d18:	4611      	mov	r1, r2
 8000d1a:	461a      	mov	r2, r3
 8000d1c:	460b      	mov	r3, r1
 8000d1e:	71fb      	strb	r3, [r7, #7]
 8000d20:	4613      	mov	r3, r2
 8000d22:	71bb      	strb	r3, [r7, #6]
                         uint8_t BusConfig,
                         uint8_t SclkSpeed,
                         uint8_t DFF,
                         uint8_t CPOL,
                         uint8_t CPHA,
                         uint8_t SSM) {
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	4618      	mov	r0, r3
 8000d28:	2320      	movs	r3, #32
 8000d2a:	461a      	mov	r2, r3
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	f000 fdfd 	bl	800192c <memset>
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	3320      	adds	r3, #32
 8000d36:	4618      	mov	r0, r3
 8000d38:	f000 fc76 	bl	8001628 <_ZNSt10unique_ptrI12GPIO_HandlerSt14default_deleteIS0_EEC1IS2_vEEv>
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	3324      	adds	r3, #36	; 0x24
 8000d40:	4618      	mov	r0, r3
 8000d42:	f000 fc71 	bl	8001628 <_ZNSt10unique_ptrI12GPIO_HandlerSt14default_deleteIS0_EEC1IS2_vEEv>
 8000d46:	68fb      	ldr	r3, [r7, #12]
 8000d48:	3328      	adds	r3, #40	; 0x28
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f000 fc6c 	bl	8001628 <_ZNSt10unique_ptrI12GPIO_HandlerSt14default_deleteIS0_EEC1IS2_vEEv>
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	332c      	adds	r3, #44	; 0x2c
 8000d54:	4618      	mov	r0, r3
 8000d56:	f000 fc67 	bl	8001628 <_ZNSt10unique_ptrI12GPIO_HandlerSt14default_deleteIS0_EEC1IS2_vEEv>
    SPIx_.pSPIx = SPIx_ADDR;
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	68ba      	ldr	r2, [r7, #8]
 8000d5e:	601a      	str	r2, [r3, #0]
    SPIx_.SPIConfig.SPI_DeviceMode = DeviceMode;
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	79fa      	ldrb	r2, [r7, #7]
 8000d64:	711a      	strb	r2, [r3, #4]
    SPIx_.SPIConfig.SPI_BusConfig = BusConfig;
 8000d66:	68fb      	ldr	r3, [r7, #12]
 8000d68:	79ba      	ldrb	r2, [r7, #6]
 8000d6a:	715a      	strb	r2, [r3, #5]
    SPIx_.SPIConfig.SPI_SclkSpeed = SclkSpeed;
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	7e3a      	ldrb	r2, [r7, #24]
 8000d70:	719a      	strb	r2, [r3, #6]
    SPIx_.SPIConfig.SPI_DFF = DFF;
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	7f3a      	ldrb	r2, [r7, #28]
 8000d76:	71da      	strb	r2, [r3, #7]
    SPIx_.SPIConfig.SPI_CPOL = CPOL;
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000d7e:	721a      	strb	r2, [r3, #8]
    SPIx_.SPIConfig.SPI_CPHA = CPHA;
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8000d86:	725a      	strb	r2, [r3, #9]
    SPIx_.SPIConfig.SPI_SSM = SSM;
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8000d8e:	729a      	strb	r2, [r3, #10]
    SPI_GPIOs_Init();
 8000d90:	68f8      	ldr	r0, [r7, #12]
 8000d92:	f000 f85f 	bl	8000e54 <_ZN11SPI_Handler14SPI_GPIOs_InitEv>
    SPI_PeriClockControl();
 8000d96:	68f8      	ldr	r0, [r7, #12]
 8000d98:	f000 f81a 	bl	8000dd0 <_ZN11SPI_Handler20SPI_PeriClockControlEv>
    SPI_Init();
 8000d9c:	68f8      	ldr	r0, [r7, #12]
 8000d9e:	f000 f8db 	bl	8000f58 <_ZN11SPI_Handler8SPI_InitEv>
    SPI_SSIConfig(ENABLE);
 8000da2:	2101      	movs	r1, #1
 8000da4:	68f8      	ldr	r0, [r7, #12]
 8000da6:	f000 f989 	bl	80010bc <_ZN11SPI_Handler13SPI_SSIConfigEh>
    if(SPI_SSM_EN == SPIx_.SPIConfig.SPI_SSM) {
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	7a9b      	ldrb	r3, [r3, #10]
 8000dae:	2b01      	cmp	r3, #1
 8000db0:	d104      	bne.n	8000dbc <_ZN11SPI_HandlerC1EP12SPI_RegDef_thhhhhhh+0xae>
    	SPI_SSOEConfig(DISABLE);
 8000db2:	2100      	movs	r1, #0
 8000db4:	68f8      	ldr	r0, [r7, #12]
 8000db6:	f000 f962 	bl	800107e <_ZN11SPI_Handler14SPI_SSOEConfigEh>
 8000dba:	e003      	b.n	8000dc4 <_ZN11SPI_HandlerC1EP12SPI_RegDef_thhhhhhh+0xb6>
    }
    else {
    	SPI_SSOEConfig(ENABLE);
 8000dbc:	2101      	movs	r1, #1
 8000dbe:	68f8      	ldr	r0, [r7, #12]
 8000dc0:	f000 f95d 	bl	800107e <_ZN11SPI_Handler14SPI_SSOEConfigEh>
    }
}
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	3710      	adds	r7, #16
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
	...

08000dd0 <_ZN11SPI_Handler20SPI_PeriClockControlEv>:
SPI_Handler::~SPI_Handler(){
	SPI_DeInit();
}

// peripheral clock setup
void SPI_Handler::SPI_PeriClockControl() {
 8000dd0:	b480      	push	{r7}
 8000dd2:	b083      	sub	sp, #12
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
	if (SPI1 == SPIx_.pSPIx) {
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4a18      	ldr	r2, [pc, #96]	; (8000e40 <_ZN11SPI_Handler20SPI_PeriClockControlEv+0x70>)
 8000dde:	4293      	cmp	r3, r2
 8000de0:	d106      	bne.n	8000df0 <_ZN11SPI_Handler20SPI_PeriClockControlEv+0x20>
		SPI1_PCLK_EN();
 8000de2:	4b18      	ldr	r3, [pc, #96]	; (8000e44 <_ZN11SPI_Handler20SPI_PeriClockControlEv+0x74>)
 8000de4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000de6:	4a17      	ldr	r2, [pc, #92]	; (8000e44 <_ZN11SPI_Handler20SPI_PeriClockControlEv+0x74>)
 8000de8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000dec:	6453      	str	r3, [r2, #68]	; 0x44
		SPI3_PCLK_EN();
	}
	else if (SPI4 == SPIx_.pSPIx) {
		SPI4_PCLK_EN();
	}
}
 8000dee:	e022      	b.n	8000e36 <_ZN11SPI_Handler20SPI_PeriClockControlEv+0x66>
	else if (SPI2 == SPIx_.pSPIx) {
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a14      	ldr	r2, [pc, #80]	; (8000e48 <_ZN11SPI_Handler20SPI_PeriClockControlEv+0x78>)
 8000df6:	4293      	cmp	r3, r2
 8000df8:	d106      	bne.n	8000e08 <_ZN11SPI_Handler20SPI_PeriClockControlEv+0x38>
		SPI2_PCLK_EN();
 8000dfa:	4b12      	ldr	r3, [pc, #72]	; (8000e44 <_ZN11SPI_Handler20SPI_PeriClockControlEv+0x74>)
 8000dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dfe:	4a11      	ldr	r2, [pc, #68]	; (8000e44 <_ZN11SPI_Handler20SPI_PeriClockControlEv+0x74>)
 8000e00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e04:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000e06:	e016      	b.n	8000e36 <_ZN11SPI_Handler20SPI_PeriClockControlEv+0x66>
	else if (SPI3 == SPIx_.pSPIx) {
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	4a0f      	ldr	r2, [pc, #60]	; (8000e4c <_ZN11SPI_Handler20SPI_PeriClockControlEv+0x7c>)
 8000e0e:	4293      	cmp	r3, r2
 8000e10:	d106      	bne.n	8000e20 <_ZN11SPI_Handler20SPI_PeriClockControlEv+0x50>
		SPI3_PCLK_EN();
 8000e12:	4b0c      	ldr	r3, [pc, #48]	; (8000e44 <_ZN11SPI_Handler20SPI_PeriClockControlEv+0x74>)
 8000e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e16:	4a0b      	ldr	r2, [pc, #44]	; (8000e44 <_ZN11SPI_Handler20SPI_PeriClockControlEv+0x74>)
 8000e18:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e1c:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000e1e:	e00a      	b.n	8000e36 <_ZN11SPI_Handler20SPI_PeriClockControlEv+0x66>
	else if (SPI4 == SPIx_.pSPIx) {
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	4a0a      	ldr	r2, [pc, #40]	; (8000e50 <_ZN11SPI_Handler20SPI_PeriClockControlEv+0x80>)
 8000e26:	4293      	cmp	r3, r2
 8000e28:	d105      	bne.n	8000e36 <_ZN11SPI_Handler20SPI_PeriClockControlEv+0x66>
		SPI4_PCLK_EN();
 8000e2a:	4b06      	ldr	r3, [pc, #24]	; (8000e44 <_ZN11SPI_Handler20SPI_PeriClockControlEv+0x74>)
 8000e2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e2e:	4a05      	ldr	r2, [pc, #20]	; (8000e44 <_ZN11SPI_Handler20SPI_PeriClockControlEv+0x74>)
 8000e30:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000e34:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000e36:	bf00      	nop
 8000e38:	370c      	adds	r7, #12
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bc80      	pop	{r7}
 8000e3e:	4770      	bx	lr
 8000e40:	40013000 	.word	0x40013000
 8000e44:	40023800 	.word	0x40023800
 8000e48:	40003800 	.word	0x40003800
 8000e4c:	40003c00 	.word	0x40003c00
 8000e50:	40013400 	.word	0x40013400

08000e54 <_ZN11SPI_Handler14SPI_GPIOs_InitEv>:
 *
 * @param None
 *
 * @return None
 **********************************************************************/
void SPI_Handler::SPI_GPIOs_Init() {
 8000e54:	b5b0      	push	{r4, r5, r7, lr}
 8000e56:	b088      	sub	sp, #32
 8000e58:	af06      	add	r7, sp, #24
 8000e5a:	6078      	str	r0, [r7, #4]
    if (SPIx_.pSPIx == SPI1) {
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4a3b      	ldr	r2, [pc, #236]	; (8000f50 <_ZN11SPI_Handler14SPI_GPIOs_InitEv+0xfc>)
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d16f      	bne.n	8000f46 <_ZN11SPI_Handler14SPI_GPIOs_InitEv+0xf2>
        SPI_Sck.reset( new GPIO_Handler(GPIOA,
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	f103 0420 	add.w	r4, r3, #32
                                        GPIO_MODE_ALTFN,
                                        GPIO_SPEED_HIGH,
                                        IRQ_Prio_NO_15,
                                        GPIO_OP_TYPE_PP,
                                        GPIO_NO_PUPD,
                                        5) );
 8000e6c:	200c      	movs	r0, #12
 8000e6e:	f000 fd00 	bl	8001872 <_Znwj>
 8000e72:	4603      	mov	r3, r0
 8000e74:	461d      	mov	r5, r3
 8000e76:	2305      	movs	r3, #5
 8000e78:	9304      	str	r3, [sp, #16]
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	9303      	str	r3, [sp, #12]
 8000e7e:	2300      	movs	r3, #0
 8000e80:	9302      	str	r3, [sp, #8]
 8000e82:	230f      	movs	r3, #15
 8000e84:	9301      	str	r3, [sp, #4]
 8000e86:	2303      	movs	r3, #3
 8000e88:	9300      	str	r3, [sp, #0]
 8000e8a:	2302      	movs	r3, #2
 8000e8c:	2205      	movs	r2, #5
 8000e8e:	4931      	ldr	r1, [pc, #196]	; (8000f54 <_ZN11SPI_Handler14SPI_GPIOs_InitEv+0x100>)
 8000e90:	4628      	mov	r0, r5
 8000e92:	f7ff fbb7 	bl	8000604 <_ZN12GPIO_HandlerC1EP13GPIO_RegDef_thhhhhhh>
        SPI_Sck.reset( new GPIO_Handler(GPIOA,
 8000e96:	4629      	mov	r1, r5
 8000e98:	4620      	mov	r0, r4
 8000e9a:	f000 fbd5 	bl	8001648 <_ZNSt10unique_ptrI12GPIO_HandlerSt14default_deleteIS0_EE5resetEPS0_>

        SPI_MOSI.reset( new GPIO_Handler(GPIOA,
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	f103 0424 	add.w	r4, r3, #36	; 0x24
                                        GPIO_MODE_ALTFN,
                                        GPIO_SPEED_HIGH,
                                        IRQ_Prio_NO_15,
                                        GPIO_OP_TYPE_PP,
                                        GPIO_NO_PUPD,
                                        5) );
 8000ea4:	200c      	movs	r0, #12
 8000ea6:	f000 fce4 	bl	8001872 <_Znwj>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	461d      	mov	r5, r3
 8000eae:	2305      	movs	r3, #5
 8000eb0:	9304      	str	r3, [sp, #16]
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	9303      	str	r3, [sp, #12]
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	9302      	str	r3, [sp, #8]
 8000eba:	230f      	movs	r3, #15
 8000ebc:	9301      	str	r3, [sp, #4]
 8000ebe:	2303      	movs	r3, #3
 8000ec0:	9300      	str	r3, [sp, #0]
 8000ec2:	2302      	movs	r3, #2
 8000ec4:	2207      	movs	r2, #7
 8000ec6:	4923      	ldr	r1, [pc, #140]	; (8000f54 <_ZN11SPI_Handler14SPI_GPIOs_InitEv+0x100>)
 8000ec8:	4628      	mov	r0, r5
 8000eca:	f7ff fb9b 	bl	8000604 <_ZN12GPIO_HandlerC1EP13GPIO_RegDef_thhhhhhh>
        SPI_MOSI.reset( new GPIO_Handler(GPIOA,
 8000ece:	4629      	mov	r1, r5
 8000ed0:	4620      	mov	r0, r4
 8000ed2:	f000 fbb9 	bl	8001648 <_ZNSt10unique_ptrI12GPIO_HandlerSt14default_deleteIS0_EE5resetEPS0_>

        SPI_MISO.reset( new GPIO_Handler(GPIOA,
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	f103 0428 	add.w	r4, r3, #40	; 0x28
                                        GPIO_MODE_ALTFN,
                                        GPIO_SPEED_HIGH,
                                        IRQ_Prio_NO_15,
                                        GPIO_OP_TYPE_PP,
                                        GPIO_NO_PUPD,
                                        5) );
 8000edc:	200c      	movs	r0, #12
 8000ede:	f000 fcc8 	bl	8001872 <_Znwj>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	461d      	mov	r5, r3
 8000ee6:	2305      	movs	r3, #5
 8000ee8:	9304      	str	r3, [sp, #16]
 8000eea:	2300      	movs	r3, #0
 8000eec:	9303      	str	r3, [sp, #12]
 8000eee:	2300      	movs	r3, #0
 8000ef0:	9302      	str	r3, [sp, #8]
 8000ef2:	230f      	movs	r3, #15
 8000ef4:	9301      	str	r3, [sp, #4]
 8000ef6:	2303      	movs	r3, #3
 8000ef8:	9300      	str	r3, [sp, #0]
 8000efa:	2302      	movs	r3, #2
 8000efc:	2206      	movs	r2, #6
 8000efe:	4915      	ldr	r1, [pc, #84]	; (8000f54 <_ZN11SPI_Handler14SPI_GPIOs_InitEv+0x100>)
 8000f00:	4628      	mov	r0, r5
 8000f02:	f7ff fb7f 	bl	8000604 <_ZN12GPIO_HandlerC1EP13GPIO_RegDef_thhhhhhh>
        SPI_MISO.reset( new GPIO_Handler(GPIOA,
 8000f06:	4629      	mov	r1, r5
 8000f08:	4620      	mov	r0, r4
 8000f0a:	f000 fb9d 	bl	8001648 <_ZNSt10unique_ptrI12GPIO_HandlerSt14default_deleteIS0_EE5resetEPS0_>



        SPI_NSS.reset( new GPIO_Handler(GPIOA,
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	f103 042c 	add.w	r4, r3, #44	; 0x2c
                                        GPIO_MODE_ALTFN,
                                        GPIO_SPEED_HIGH,
                                        IRQ_Prio_NO_15,
                                        GPIO_OP_TYPE_PP,
                                        GPIO_NO_PUPD,
                                        5) );
 8000f14:	200c      	movs	r0, #12
 8000f16:	f000 fcac 	bl	8001872 <_Znwj>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	461d      	mov	r5, r3
 8000f1e:	2305      	movs	r3, #5
 8000f20:	9304      	str	r3, [sp, #16]
 8000f22:	2300      	movs	r3, #0
 8000f24:	9303      	str	r3, [sp, #12]
 8000f26:	2300      	movs	r3, #0
 8000f28:	9302      	str	r3, [sp, #8]
 8000f2a:	230f      	movs	r3, #15
 8000f2c:	9301      	str	r3, [sp, #4]
 8000f2e:	2303      	movs	r3, #3
 8000f30:	9300      	str	r3, [sp, #0]
 8000f32:	2302      	movs	r3, #2
 8000f34:	2204      	movs	r2, #4
 8000f36:	4907      	ldr	r1, [pc, #28]	; (8000f54 <_ZN11SPI_Handler14SPI_GPIOs_InitEv+0x100>)
 8000f38:	4628      	mov	r0, r5
 8000f3a:	f7ff fb63 	bl	8000604 <_ZN12GPIO_HandlerC1EP13GPIO_RegDef_thhhhhhh>
        SPI_NSS.reset( new GPIO_Handler(GPIOA,
 8000f3e:	4629      	mov	r1, r5
 8000f40:	4620      	mov	r0, r4
 8000f42:	f000 fb81 	bl	8001648 <_ZNSt10unique_ptrI12GPIO_HandlerSt14default_deleteIS0_EE5resetEPS0_>
    }

}
 8000f46:	bf00      	nop
 8000f48:	3708      	adds	r7, #8
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bdb0      	pop	{r4, r5, r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	40013000 	.word	0x40013000
 8000f54:	40020000 	.word	0x40020000

08000f58 <_ZN11SPI_Handler8SPI_InitEv>:
 *
 * @param None
 *
 * @return None
 **********************************************************************/
void SPI_Handler::SPI_Init() {
 8000f58:	b480      	push	{r7}
 8000f5a:	b085      	sub	sp, #20
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
    // Lets configure the SPI_CR1 register
    uint32_t tempReg = 0;
 8000f60:	2300      	movs	r3, #0
 8000f62:	60fb      	str	r3, [r7, #12]

    // 1. configure the device mode
    tempReg |= SPIx_.SPIConfig.SPI_DeviceMode << SPI_CR1_MSTR;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	791b      	ldrb	r3, [r3, #4]
 8000f68:	009b      	lsls	r3, r3, #2
 8000f6a:	461a      	mov	r2, r3
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	4313      	orrs	r3, r2
 8000f70:	60fb      	str	r3, [r7, #12]
    // 2. configure the bus config
    if(SPI_BUS_CONFIG_FD == SPIx_.SPIConfig.SPI_BusConfig) {
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	795b      	ldrb	r3, [r3, #5]
 8000f76:	2b01      	cmp	r3, #1
 8000f78:	d104      	bne.n	8000f84 <_ZN11SPI_Handler8SPI_InitEv+0x2c>
        // bidi mode should be cleared
        tempReg &= ~(1 << SPI_CR1_BIDIMODE);
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000f80:	60fb      	str	r3, [r7, #12]
 8000f82:	e018      	b.n	8000fb6 <_ZN11SPI_Handler8SPI_InitEv+0x5e>
    }
    else if(SPI_BUS_CONFIG_HD == SPIx_.SPIConfig.SPI_BusConfig) {
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	795b      	ldrb	r3, [r3, #5]
 8000f88:	2b02      	cmp	r3, #2
 8000f8a:	d108      	bne.n	8000f9e <_ZN11SPI_Handler8SPI_InitEv+0x46>
        // bidi mode should be set
        tempReg |= (1 << SPI_CR1_BIDIMODE);
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f92:	60fb      	str	r3, [r7, #12]
        // bidioe mode should be set
        tempReg |= (1 << SPI_CR1_BIDIOE);
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f9a:	60fb      	str	r3, [r7, #12]
 8000f9c:	e00b      	b.n	8000fb6 <_ZN11SPI_Handler8SPI_InitEv+0x5e>
    }
    else if(SPI_BUS_CONFIG_SIMPLEX_RXONLY == SPIx_.SPIConfig.SPI_BusConfig) {
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	795b      	ldrb	r3, [r3, #5]
 8000fa2:	2b03      	cmp	r3, #3
 8000fa4:	d107      	bne.n	8000fb6 <_ZN11SPI_Handler8SPI_InitEv+0x5e>
        // bidi mode should be cleared, for active SCLK, because SLCK is only activate when MOSI is activate
        tempReg &= ~(1 << SPI_CR1_BIDIMODE);
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000fac:	60fb      	str	r3, [r7, #12]
        // RXONLY should be set
        tempReg |= (1 << SPI_CR1_RXONLY);
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fb4:	60fb      	str	r3, [r7, #12]
    }

    // 3. configure for clock speed
    tempReg |= (SPIx_.SPIConfig.SPI_SclkSpeed << SPI_CR1_BR);
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	799b      	ldrb	r3, [r3, #6]
 8000fba:	00db      	lsls	r3, r3, #3
 8000fbc:	461a      	mov	r2, r3
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	4313      	orrs	r3, r2
 8000fc2:	60fb      	str	r3, [r7, #12]

    // 4. configure for data format
    tempReg |= (SPIx_.SPIConfig.SPI_DFF << SPI_CR1_DFF);
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	79db      	ldrb	r3, [r3, #7]
 8000fc8:	02db      	lsls	r3, r3, #11
 8000fca:	461a      	mov	r2, r3
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	4313      	orrs	r3, r2
 8000fd0:	60fb      	str	r3, [r7, #12]

    // 5. configure CPOL
    tempReg |= (SPIx_.SPIConfig.SPI_CPOL << SPI_CR1_CPOL);
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	7a1b      	ldrb	r3, [r3, #8]
 8000fd6:	005b      	lsls	r3, r3, #1
 8000fd8:	461a      	mov	r2, r3
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	4313      	orrs	r3, r2
 8000fde:	60fb      	str	r3, [r7, #12]

    // 6. configure CPOA
    tempReg |= (SPIx_.SPIConfig.SPI_CPHA << SPI_CR1_CPHA);
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	7a5b      	ldrb	r3, [r3, #9]
 8000fe4:	461a      	mov	r2, r3
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	4313      	orrs	r3, r2
 8000fea:	60fb      	str	r3, [r7, #12]

    tempReg |= (SPIx_.SPIConfig.SPI_SSM << SPI_CR1_SSM);
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	7a9b      	ldrb	r3, [r3, #10]
 8000ff0:	025b      	lsls	r3, r3, #9
 8000ff2:	461a      	mov	r2, r3
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	4313      	orrs	r3, r2
 8000ff8:	60fb      	str	r3, [r7, #12]

    SPIx_.pSPIx->CR1 = tempReg;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	68fa      	ldr	r2, [r7, #12]
 8001000:	601a      	str	r2, [r3, #0]
}
 8001002:	bf00      	nop
 8001004:	3714      	adds	r7, #20
 8001006:	46bd      	mov	sp, r7
 8001008:	bc80      	pop	{r7}
 800100a:	4770      	bx	lr

0800100c <_ZN11SPI_Handler21SPI_PeripheralControlEh>:
 *
 * @param None
 *
 * @return None
 **********************************************************************/
void SPI_Handler::SPI_PeripheralControl(uint8_t EnOrDi) {
 800100c:	b480      	push	{r7}
 800100e:	b083      	sub	sp, #12
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
 8001014:	460b      	mov	r3, r1
 8001016:	70fb      	strb	r3, [r7, #3]
    if(ENABLE == EnOrDi) {
 8001018:	78fb      	ldrb	r3, [r7, #3]
 800101a:	2b01      	cmp	r3, #1
 800101c:	d108      	bne.n	8001030 <_ZN11SPI_Handler21SPI_PeripheralControlEh+0x24>
        SPIx_.pSPIx->CR1 |= (1 << SPI_CR1_SPE);
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	681a      	ldr	r2, [r3, #0]
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800102c:	601a      	str	r2, [r3, #0]
    }
    else {
        SPIx_.pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
    }
}
 800102e:	e007      	b.n	8001040 <_ZN11SPI_Handler21SPI_PeripheralControlEh+0x34>
        SPIx_.pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	681a      	ldr	r2, [r3, #0]
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800103e:	601a      	str	r2, [r3, #0]
}
 8001040:	bf00      	nop
 8001042:	370c      	adds	r7, #12
 8001044:	46bd      	mov	sp, r7
 8001046:	bc80      	pop	{r7}
 8001048:	4770      	bx	lr

0800104a <_ZN11SPI_Handler17SPI_GetFlagStatusEh>:
 *
 * @param None
 *
 * @return None
 **********************************************************************/
uint8_t SPI_Handler::SPI_GetFlagStatus(uint8_t FlagName) {
 800104a:	b480      	push	{r7}
 800104c:	b083      	sub	sp, #12
 800104e:	af00      	add	r7, sp, #0
 8001050:	6078      	str	r0, [r7, #4]
 8001052:	460b      	mov	r3, r1
 8001054:	70fb      	strb	r3, [r7, #3]
    if(SPIx_.pSPIx->SR & FlagName) {
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	689a      	ldr	r2, [r3, #8]
 800105c:	78fb      	ldrb	r3, [r7, #3]
 800105e:	4013      	ands	r3, r2
 8001060:	2b00      	cmp	r3, #0
 8001062:	bf14      	ite	ne
 8001064:	2301      	movne	r3, #1
 8001066:	2300      	moveq	r3, #0
 8001068:	b2db      	uxtb	r3, r3
 800106a:	2b00      	cmp	r3, #0
 800106c:	d001      	beq.n	8001072 <_ZN11SPI_Handler17SPI_GetFlagStatusEh+0x28>
        return FLAG_SET;
 800106e:	2301      	movs	r3, #1
 8001070:	e000      	b.n	8001074 <_ZN11SPI_Handler17SPI_GetFlagStatusEh+0x2a>
    }
    return FLAG_RESET;
 8001072:	2300      	movs	r3, #0
}
 8001074:	4618      	mov	r0, r3
 8001076:	370c      	adds	r7, #12
 8001078:	46bd      	mov	sp, r7
 800107a:	bc80      	pop	{r7}
 800107c:	4770      	bx	lr

0800107e <_ZN11SPI_Handler14SPI_SSOEConfigEh>:
void SPI_Handler::SPI_SendAndReceiveIT(uint8_t *pTxBuffer, uint8_t *pRxBuffer, uint32_t Len) {
	SPI_SendDataIT(pTxBuffer, Len);
}


void SPI_Handler::SPI_SSOEConfig(uint8_t EnOrDi) {
 800107e:	b480      	push	{r7}
 8001080:	b083      	sub	sp, #12
 8001082:	af00      	add	r7, sp, #0
 8001084:	6078      	str	r0, [r7, #4]
 8001086:	460b      	mov	r3, r1
 8001088:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE) {
 800108a:	78fb      	ldrb	r3, [r7, #3]
 800108c:	2b01      	cmp	r3, #1
 800108e:	d108      	bne.n	80010a2 <_ZN11SPI_Handler14SPI_SSOEConfigEh+0x24>
		SPIx_.pSPIx->CR2 |= (1 << SPI_CR2_SSOE);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	685a      	ldr	r2, [r3, #4]
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f042 0204 	orr.w	r2, r2, #4
 800109e:	605a      	str	r2, [r3, #4]
	}
	else {
		SPIx_.pSPIx->CR2 &= ~(1 << SPI_CR2_SSOE);
	}
}
 80010a0:	e007      	b.n	80010b2 <_ZN11SPI_Handler14SPI_SSOEConfigEh+0x34>
		SPIx_.pSPIx->CR2 &= ~(1 << SPI_CR2_SSOE);
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	685a      	ldr	r2, [r3, #4]
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f022 0204 	bic.w	r2, r2, #4
 80010b0:	605a      	str	r2, [r3, #4]
}
 80010b2:	bf00      	nop
 80010b4:	370c      	adds	r7, #12
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bc80      	pop	{r7}
 80010ba:	4770      	bx	lr

080010bc <_ZN11SPI_Handler13SPI_SSIConfigEh>:
 *
 * @return            - None

 */
void SPI_Handler::SPI_SSIConfig(uint8_t EnOrDi)
{
 80010bc:	b480      	push	{r7}
 80010be:	b083      	sub	sp, #12
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
 80010c4:	460b      	mov	r3, r1
 80010c6:	70fb      	strb	r3, [r7, #3]
    if(EnOrDi == ENABLE)
 80010c8:	78fb      	ldrb	r3, [r7, #3]
 80010ca:	2b01      	cmp	r3, #1
 80010cc:	d108      	bne.n	80010e0 <_ZN11SPI_Handler13SPI_SSIConfigEh+0x24>
    {
        SPIx_.pSPIx->CR1 |=  (1 << SPI_CR1_SSI);
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	681a      	ldr	r2, [r3, #0]
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80010dc:	601a      	str	r2, [r3, #0]
    }else
    {
        SPIx_.pSPIx->CR1 &=  ~(1 << SPI_CR1_SSI);
    }
}
 80010de:	e007      	b.n	80010f0 <_ZN11SPI_Handler13SPI_SSIConfigEh+0x34>
        SPIx_.pSPIx->CR1 &=  ~(1 << SPI_CR1_SSI);
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	681a      	ldr	r2, [r3, #0]
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80010ee:	601a      	str	r2, [r3, #0]
}
 80010f0:	bf00      	nop
 80010f2:	370c      	adds	r7, #12
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bc80      	pop	{r7}
 80010f8:	4770      	bx	lr
	...

080010fc <_ZN11SPI_Handler22SPI_IRQInterruptConfigEhh>:
 * @param[in] IRQNumber     - IRQNumber IRQ Position number
 * @param[in] EnorDi        - Enable/Disable Flag
 *
 * @return None
 */
void SPI_Handler::SPI_IRQInterruptConfig(const uint8_t IRQNumber, const uint8_t EnorDi) {
 80010fc:	b480      	push	{r7}
 80010fe:	b083      	sub	sp, #12
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
 8001104:	460b      	mov	r3, r1
 8001106:	70fb      	strb	r3, [r7, #3]
 8001108:	4613      	mov	r3, r2
 800110a:	70bb      	strb	r3, [r7, #2]
    if(EnorDi == ENABLE) {
 800110c:	78bb      	ldrb	r3, [r7, #2]
 800110e:	2b01      	cmp	r3, #1
 8001110:	d133      	bne.n	800117a <_ZN11SPI_Handler22SPI_IRQInterruptConfigEhh+0x7e>
        if (IRQNumber <= 31) {
 8001112:	78fb      	ldrb	r3, [r7, #3]
 8001114:	2b1f      	cmp	r3, #31
 8001116:	d80a      	bhi.n	800112e <_ZN11SPI_Handler22SPI_IRQInterruptConfigEhh+0x32>
            //  program ISER0 register
            *NVIC_ISER0 |= (1 << IRQNumber);
 8001118:	4b34      	ldr	r3, [pc, #208]	; (80011ec <_ZN11SPI_Handler22SPI_IRQInterruptConfigEhh+0xf0>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	78fa      	ldrb	r2, [r7, #3]
 800111e:	2101      	movs	r1, #1
 8001120:	fa01 f202 	lsl.w	r2, r1, r2
 8001124:	4611      	mov	r1, r2
 8001126:	4a31      	ldr	r2, [pc, #196]	; (80011ec <_ZN11SPI_Handler22SPI_IRQInterruptConfigEhh+0xf0>)
 8001128:	430b      	orrs	r3, r1
 800112a:	6013      	str	r3, [r2, #0]
            // program ICE2 register
            *NVIC_ICER2 |= (1 << (IRQNumber % 64));
        }
    }

}
 800112c:	e059      	b.n	80011e2 <_ZN11SPI_Handler22SPI_IRQInterruptConfigEhh+0xe6>
        } else if (IRQNumber > 31 && IRQNumber < 64) {
 800112e:	78fb      	ldrb	r3, [r7, #3]
 8001130:	2b1f      	cmp	r3, #31
 8001132:	d90f      	bls.n	8001154 <_ZN11SPI_Handler22SPI_IRQInterruptConfigEhh+0x58>
 8001134:	78fb      	ldrb	r3, [r7, #3]
 8001136:	2b3f      	cmp	r3, #63	; 0x3f
 8001138:	d80c      	bhi.n	8001154 <_ZN11SPI_Handler22SPI_IRQInterruptConfigEhh+0x58>
            *NVIC_ISER1 |= (1 << (IRQNumber % 32));
 800113a:	4b2d      	ldr	r3, [pc, #180]	; (80011f0 <_ZN11SPI_Handler22SPI_IRQInterruptConfigEhh+0xf4>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	78fa      	ldrb	r2, [r7, #3]
 8001140:	f002 021f 	and.w	r2, r2, #31
 8001144:	2101      	movs	r1, #1
 8001146:	fa01 f202 	lsl.w	r2, r1, r2
 800114a:	4611      	mov	r1, r2
 800114c:	4a28      	ldr	r2, [pc, #160]	; (80011f0 <_ZN11SPI_Handler22SPI_IRQInterruptConfigEhh+0xf4>)
 800114e:	430b      	orrs	r3, r1
 8001150:	6013      	str	r3, [r2, #0]
 8001152:	e046      	b.n	80011e2 <_ZN11SPI_Handler22SPI_IRQInterruptConfigEhh+0xe6>
        } else if (IRQNumber >= 64 && IRQNumber < 96) {
 8001154:	78fb      	ldrb	r3, [r7, #3]
 8001156:	2b3f      	cmp	r3, #63	; 0x3f
 8001158:	d943      	bls.n	80011e2 <_ZN11SPI_Handler22SPI_IRQInterruptConfigEhh+0xe6>
 800115a:	78fb      	ldrb	r3, [r7, #3]
 800115c:	2b5f      	cmp	r3, #95	; 0x5f
 800115e:	d840      	bhi.n	80011e2 <_ZN11SPI_Handler22SPI_IRQInterruptConfigEhh+0xe6>
            *NVIC_ISER2 |= (1 << (IRQNumber % 64));
 8001160:	4b24      	ldr	r3, [pc, #144]	; (80011f4 <_ZN11SPI_Handler22SPI_IRQInterruptConfigEhh+0xf8>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	78fa      	ldrb	r2, [r7, #3]
 8001166:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800116a:	2101      	movs	r1, #1
 800116c:	fa01 f202 	lsl.w	r2, r1, r2
 8001170:	4611      	mov	r1, r2
 8001172:	4a20      	ldr	r2, [pc, #128]	; (80011f4 <_ZN11SPI_Handler22SPI_IRQInterruptConfigEhh+0xf8>)
 8001174:	430b      	orrs	r3, r1
 8001176:	6013      	str	r3, [r2, #0]
}
 8001178:	e033      	b.n	80011e2 <_ZN11SPI_Handler22SPI_IRQInterruptConfigEhh+0xe6>
        if (IRQNumber <= 31) {
 800117a:	78fb      	ldrb	r3, [r7, #3]
 800117c:	2b1f      	cmp	r3, #31
 800117e:	d80a      	bhi.n	8001196 <_ZN11SPI_Handler22SPI_IRQInterruptConfigEhh+0x9a>
            *NVIC_ICER0 |= (1 << IRQNumber);
 8001180:	4b1d      	ldr	r3, [pc, #116]	; (80011f8 <_ZN11SPI_Handler22SPI_IRQInterruptConfigEhh+0xfc>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	78fa      	ldrb	r2, [r7, #3]
 8001186:	2101      	movs	r1, #1
 8001188:	fa01 f202 	lsl.w	r2, r1, r2
 800118c:	4611      	mov	r1, r2
 800118e:	4a1a      	ldr	r2, [pc, #104]	; (80011f8 <_ZN11SPI_Handler22SPI_IRQInterruptConfigEhh+0xfc>)
 8001190:	430b      	orrs	r3, r1
 8001192:	6013      	str	r3, [r2, #0]
}
 8001194:	e025      	b.n	80011e2 <_ZN11SPI_Handler22SPI_IRQInterruptConfigEhh+0xe6>
        } else if (IRQNumber > 31 && IRQNumber < 64) {
 8001196:	78fb      	ldrb	r3, [r7, #3]
 8001198:	2b1f      	cmp	r3, #31
 800119a:	d90f      	bls.n	80011bc <_ZN11SPI_Handler22SPI_IRQInterruptConfigEhh+0xc0>
 800119c:	78fb      	ldrb	r3, [r7, #3]
 800119e:	2b3f      	cmp	r3, #63	; 0x3f
 80011a0:	d80c      	bhi.n	80011bc <_ZN11SPI_Handler22SPI_IRQInterruptConfigEhh+0xc0>
            *NVIC_ICER1 |= (1 << (IRQNumber % 32));
 80011a2:	4b16      	ldr	r3, [pc, #88]	; (80011fc <_ZN11SPI_Handler22SPI_IRQInterruptConfigEhh+0x100>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	78fa      	ldrb	r2, [r7, #3]
 80011a8:	f002 021f 	and.w	r2, r2, #31
 80011ac:	2101      	movs	r1, #1
 80011ae:	fa01 f202 	lsl.w	r2, r1, r2
 80011b2:	4611      	mov	r1, r2
 80011b4:	4a11      	ldr	r2, [pc, #68]	; (80011fc <_ZN11SPI_Handler22SPI_IRQInterruptConfigEhh+0x100>)
 80011b6:	430b      	orrs	r3, r1
 80011b8:	6013      	str	r3, [r2, #0]
 80011ba:	e012      	b.n	80011e2 <_ZN11SPI_Handler22SPI_IRQInterruptConfigEhh+0xe6>
        } else if (IRQNumber >= 64 && IRQNumber < 96) {
 80011bc:	78fb      	ldrb	r3, [r7, #3]
 80011be:	2b3f      	cmp	r3, #63	; 0x3f
 80011c0:	d90f      	bls.n	80011e2 <_ZN11SPI_Handler22SPI_IRQInterruptConfigEhh+0xe6>
 80011c2:	78fb      	ldrb	r3, [r7, #3]
 80011c4:	2b5f      	cmp	r3, #95	; 0x5f
 80011c6:	d80c      	bhi.n	80011e2 <_ZN11SPI_Handler22SPI_IRQInterruptConfigEhh+0xe6>
            *NVIC_ICER2 |= (1 << (IRQNumber % 64));
 80011c8:	4b0d      	ldr	r3, [pc, #52]	; (8001200 <_ZN11SPI_Handler22SPI_IRQInterruptConfigEhh+0x104>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	78fa      	ldrb	r2, [r7, #3]
 80011ce:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80011d2:	2101      	movs	r1, #1
 80011d4:	fa01 f202 	lsl.w	r2, r1, r2
 80011d8:	4611      	mov	r1, r2
 80011da:	4a09      	ldr	r2, [pc, #36]	; (8001200 <_ZN11SPI_Handler22SPI_IRQInterruptConfigEhh+0x104>)
 80011dc:	430b      	orrs	r3, r1
 80011de:	6013      	str	r3, [r2, #0]
}
 80011e0:	e7ff      	b.n	80011e2 <_ZN11SPI_Handler22SPI_IRQInterruptConfigEhh+0xe6>
 80011e2:	bf00      	nop
 80011e4:	370c      	adds	r7, #12
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bc80      	pop	{r7}
 80011ea:	4770      	bx	lr
 80011ec:	e000e100 	.word	0xe000e100
 80011f0:	e000e104 	.word	0xe000e104
 80011f4:	e000e108 	.word	0xe000e108
 80011f8:	e000e180 	.word	0xe000e180
 80011fc:	e000e184 	.word	0xe000e184
 8001200:	e000e188 	.word	0xe000e188

08001204 <_ZN11SPI_Handler21SPI_IRQPriorityConfigEhh>:
 *
 * @param[in] IRQNumber: IRQ position for EXIT
 * @param[in] IRPriority: 0->15
 * @return None
 */
void SPI_Handler::SPI_IRQPriorityConfig(const uint8_t IRQNumber, const uint8_t IRQPriority) {
 8001204:	b480      	push	{r7}
 8001206:	b085      	sub	sp, #20
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
 800120c:	460b      	mov	r3, r1
 800120e:	70fb      	strb	r3, [r7, #3]
 8001210:	4613      	mov	r3, r2
 8001212:	70bb      	strb	r3, [r7, #2]
    // 1. first lets find out the ipr register
    uint8_t iprx = IRQNumber >> 2;
 8001214:	78fb      	ldrb	r3, [r7, #3]
 8001216:	109b      	asrs	r3, r3, #2
 8001218:	73fb      	strb	r3, [r7, #15]
    uint8_t iprx_section = IRQNumber % 4;
 800121a:	78fb      	ldrb	r3, [r7, #3]
 800121c:	f003 0303 	and.w	r3, r3, #3
 8001220:	73bb      	strb	r3, [r7, #14]
    uint8_t shift_amount = (8 * iprx_section) + (8 - NO_PR_BITS_IMPLEMENTED);
 8001222:	7bbb      	ldrb	r3, [r7, #14]
 8001224:	00db      	lsls	r3, r3, #3
 8001226:	b2db      	uxtb	r3, r3
 8001228:	3304      	adds	r3, #4
 800122a:	737b      	strb	r3, [r7, #13]

    *(NVIC_PR_BASE_ADDR + iprx) |= (IRQPriority << shift_amount);
 800122c:	7bfb      	ldrb	r3, [r7, #15]
 800122e:	f103 5360 	add.w	r3, r3, #939524096	; 0x38000000
 8001232:	f503 5364 	add.w	r3, r3, #14592	; 0x3900
 8001236:	009b      	lsls	r3, r3, #2
 8001238:	681a      	ldr	r2, [r3, #0]
 800123a:	78b9      	ldrb	r1, [r7, #2]
 800123c:	7b7b      	ldrb	r3, [r7, #13]
 800123e:	fa01 f303 	lsl.w	r3, r1, r3
 8001242:	4618      	mov	r0, r3
 8001244:	7bfb      	ldrb	r3, [r7, #15]
 8001246:	f103 5360 	add.w	r3, r3, #939524096	; 0x38000000
 800124a:	f503 5364 	add.w	r3, r3, #14592	; 0x3900
 800124e:	009b      	lsls	r3, r3, #2
 8001250:	4619      	mov	r1, r3
 8001252:	ea42 0300 	orr.w	r3, r2, r0
 8001256:	600b      	str	r3, [r1, #0]
}
 8001258:	bf00      	nop
 800125a:	3714      	adds	r7, #20
 800125c:	46bd      	mov	sp, r7
 800125e:	bc80      	pop	{r7}
 8001260:	4770      	bx	lr

08001262 <_ZN11SPI_Handler14SPI_SendDataITEPKhm>:


uint8_t SPI_Handler::SPI_SendDataIT(const uint8_t *pTxBuffer, uint32_t Len) {
 8001262:	b580      	push	{r7, lr}
 8001264:	b084      	sub	sp, #16
 8001266:	af00      	add	r7, sp, #0
 8001268:	60f8      	str	r0, [r7, #12]
 800126a:	60b9      	str	r1, [r7, #8]
 800126c:	607a      	str	r2, [r7, #4]
	if ((SPIx_.pSPIx->CR1 & SPI_CR1_SPE_MSK) != SPI_CR1_SPE_MSK) {
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001278:	2b40      	cmp	r3, #64	; 0x40
 800127a:	bf14      	ite	ne
 800127c:	2301      	movne	r3, #1
 800127e:	2300      	moveq	r3, #0
 8001280:	b2db      	uxtb	r3, r3
 8001282:	2b00      	cmp	r3, #0
 8001284:	d003      	beq.n	800128e <_ZN11SPI_Handler14SPI_SendDataITEPKhm+0x2c>
		SPI_PeripheralControl(ENABLE);
 8001286:	2101      	movs	r1, #1
 8001288:	68f8      	ldr	r0, [r7, #12]
 800128a:	f7ff febf 	bl	800100c <_ZN11SPI_Handler21SPI_PeripheralControlEh>
	}
    if(SPIx_.TxState != SPI_BUSY_IN_TX) {
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	7f1b      	ldrb	r3, [r3, #28]
 8001292:	2b02      	cmp	r3, #2
 8001294:	d010      	beq.n	80012b8 <_ZN11SPI_Handler14SPI_SendDataITEPKhm+0x56>
        // 1. Save the Tx buffer address and Len information in some global variables
        SPIx_.pTxBuffer = const_cast<uint8_t *>(pTxBuffer);
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	68ba      	ldr	r2, [r7, #8]
 800129a:	60da      	str	r2, [r3, #12]
        SPIx_.TxLen = Len;
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	687a      	ldr	r2, [r7, #4]
 80012a0:	615a      	str	r2, [r3, #20]

        // 2. Mark the SPI state as busy in transmission so that no other code
        // can take over same SPI peripheral until transmission is over
        SPIx_.TxState = SPI_BUSY_IN_TX;
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	2202      	movs	r2, #2
 80012a6:	771a      	strb	r2, [r3, #28]

        // 3. Enable TXEIE control bit to get interrupt whenever TXE flag is set in SR
        SPIx_.pSPIx->CR2 |= (1 << SPI_CR2_TXEIE | 1 << SPI_CR2_ERRIE);
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	685a      	ldr	r2, [r3, #4]
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 80012b6:	605a      	str	r2, [r3, #4]
    }

    return SPIx_.TxState;
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	7f1b      	ldrb	r3, [r3, #28]
}
 80012bc:	4618      	mov	r0, r3
 80012be:	3710      	adds	r7, #16
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}

080012c4 <_ZN11SPI_Handler17SPI_ReceiveDataITEPhm>:

uint8_t SPI_Handler::SPI_ReceiveDataIT(uint8_t *pRxBuffer, uint32_t Len) {
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b084      	sub	sp, #16
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	60f8      	str	r0, [r7, #12]
 80012cc:	60b9      	str	r1, [r7, #8]
 80012ce:	607a      	str	r2, [r7, #4]
	if(SPIx_.RxState != SPI_BUSY_IN_RX && SPIx_.TxState != SPI_BUSY_IN_TX) {
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	7f5b      	ldrb	r3, [r3, #29]
 80012d4:	2b01      	cmp	r3, #1
 80012d6:	d020      	beq.n	800131a <_ZN11SPI_Handler17SPI_ReceiveDataITEPhm+0x56>
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	7f1b      	ldrb	r3, [r3, #28]
 80012dc:	2b02      	cmp	r3, #2
 80012de:	d01c      	beq.n	800131a <_ZN11SPI_Handler17SPI_ReceiveDataITEPhm+0x56>
		SPI_ClearOVRFlag();
 80012e0:	68f8      	ldr	r0, [r7, #12]
 80012e2:	f000 f927 	bl	8001534 <_ZN11SPI_Handler16SPI_ClearOVRFlagEv>
        // 1. Save the Tx buffer address and Len information in some global variables
        SPIx_.pTxBuffer = pRxBuffer; // transmit dummy
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	68ba      	ldr	r2, [r7, #8]
 80012ea:	60da      	str	r2, [r3, #12]
        SPIx_.TxLen = Len;
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	687a      	ldr	r2, [r7, #4]
 80012f0:	615a      	str	r2, [r3, #20]

		SPIx_.pRxBuffer = pRxBuffer;
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	68ba      	ldr	r2, [r7, #8]
 80012f6:	611a      	str	r2, [r3, #16]
        SPIx_.RxLen = Len;
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	687a      	ldr	r2, [r7, #4]
 80012fc:	619a      	str	r2, [r3, #24]

        // 2. Mark the SPI state as busy in transmission so that no other code
        // can take over same SPI peripheral until transmission is over
        SPIx_.RxState = SPI_BUSY_IN_RX;
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	2201      	movs	r2, #1
 8001302:	775a      	strb	r2, [r3, #29]
        SPIx_.TxState = SPI_BUSY_IN_TX;
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	2202      	movs	r2, #2
 8001308:	771a      	strb	r2, [r3, #28]

        // 3. Enable TXEIE control bit to get interrupt whenever TXE flag is set in SR
        SPIx_.pSPIx->CR2 |= (1 << SPI_CR2_RXNEIE | 1 << SPI_CR2_ERRIE | 1 << SPI_CR2_TXEIE);
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	685a      	ldr	r2, [r3, #4]
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 8001318:	605a      	str	r2, [r3, #4]
    }

    return SPIx_.TxState;
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	7f1b      	ldrb	r3, [r3, #28]
}
 800131e:	4618      	mov	r0, r3
 8001320:	3710      	adds	r7, #16
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}

08001326 <_ZN11SPI_Handler15SPI_IRQHandlingEv>:

void SPI_Handler::SPI_IRQHandling() {
 8001326:	b580      	push	{r7, lr}
 8001328:	b084      	sub	sp, #16
 800132a:	af00      	add	r7, sp, #0
 800132c:	6078      	str	r0, [r7, #4]
    uint8_t temp1 = 0, temp2 = 0;
 800132e:	2300      	movs	r3, #0
 8001330:	73fb      	strb	r3, [r7, #15]
 8001332:	2300      	movs	r3, #0
 8001334:	73bb      	strb	r3, [r7, #14]
	// check for RXNE
	temp1 = SPIx_.pSPIx->SR & (1 << SPI_SR_RXNE);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	689b      	ldr	r3, [r3, #8]
 800133c:	b2db      	uxtb	r3, r3
 800133e:	f003 0301 	and.w	r3, r3, #1
 8001342:	73fb      	strb	r3, [r7, #15]
	temp2 = SPIx_.pSPIx->CR2 & (1 << SPI_CR2_RXNEIE);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	b2db      	uxtb	r3, r3
 800134c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001350:	73bb      	strb	r3, [r7, #14]
	if (temp1 && temp2) {
 8001352:	7bfb      	ldrb	r3, [r7, #15]
 8001354:	2b00      	cmp	r3, #0
 8001356:	d006      	beq.n	8001366 <_ZN11SPI_Handler15SPI_IRQHandlingEv+0x40>
 8001358:	7bbb      	ldrb	r3, [r7, #14]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d003      	beq.n	8001366 <_ZN11SPI_Handler15SPI_IRQHandlingEv+0x40>
		spi_rxne_interrupt_handle();
 800135e:	6878      	ldr	r0, [r7, #4]
 8001360:	f000 f885 	bl	800146e <_ZN11SPI_Handler25spi_rxne_interrupt_handleEv>
		return;
 8001364:	e02f      	b.n	80013c6 <_ZN11SPI_Handler15SPI_IRQHandlingEv+0xa0>
	}

    // First lets check for TXE
    temp1 = SPIx_.pSPIx->SR & (1 << SPI_SR_TXE);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	689b      	ldr	r3, [r3, #8]
 800136c:	b2db      	uxtb	r3, r3
 800136e:	f003 0302 	and.w	r3, r3, #2
 8001372:	73fb      	strb	r3, [r7, #15]
    temp2 = SPIx_.pSPIx->CR2 & (1 << SPI_CR2_TXEIE);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	b2db      	uxtb	r3, r3
 800137c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001380:	73bb      	strb	r3, [r7, #14]
    if(temp1 && temp2) {
 8001382:	7bfb      	ldrb	r3, [r7, #15]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d006      	beq.n	8001396 <_ZN11SPI_Handler15SPI_IRQHandlingEv+0x70>
 8001388:	7bbb      	ldrb	r3, [r7, #14]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d003      	beq.n	8001396 <_ZN11SPI_Handler15SPI_IRQHandlingEv+0x70>
        // Handle TXE
        spi_txe_interrupt_handle();
 800138e:	6878      	ldr	r0, [r7, #4]
 8001390:	f000 f81c 	bl	80013cc <_ZN11SPI_Handler24spi_txe_interrupt_handleEv>
        return;
 8001394:	e017      	b.n	80013c6 <_ZN11SPI_Handler15SPI_IRQHandlingEv+0xa0>
    }

	// check for ovr flag
	temp1 = SPIx_.pSPIx->SR & (1 << SPI_SR_OVR);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	689b      	ldr	r3, [r3, #8]
 800139c:	b2db      	uxtb	r3, r3
 800139e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013a2:	73fb      	strb	r3, [r7, #15]
	temp2 = SPIx_.pSPIx->CR2 & (1 << SPI_CR2_ERRIE);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	b2db      	uxtb	r3, r3
 80013ac:	f003 0320 	and.w	r3, r3, #32
 80013b0:	73bb      	strb	r3, [r7, #14]
	if (temp1 && temp2) {
 80013b2:	7bfb      	ldrb	r3, [r7, #15]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d006      	beq.n	80013c6 <_ZN11SPI_Handler15SPI_IRQHandlingEv+0xa0>
 80013b8:	7bbb      	ldrb	r3, [r7, #14]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d003      	beq.n	80013c6 <_ZN11SPI_Handler15SPI_IRQHandlingEv+0xa0>
		spi_ovr_err_interrupt_handle();
 80013be:	6878      	ldr	r0, [r7, #4]
 80013c0:	f000 f8a8 	bl	8001514 <_ZN11SPI_Handler28spi_ovr_err_interrupt_handleEv>
		return;
 80013c4:	bf00      	nop
	}




}
 80013c6:	3710      	adds	r7, #16
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}

080013cc <_ZN11SPI_Handler24spi_txe_interrupt_handleEv>:

void SPI_Handler::spi_txe_interrupt_handle() {
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b082      	sub	sp, #8
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
	if ((SPIx_.pSPIx->CR1 & SPI_CR1_SPE_MSK) != SPI_CR1_SPE_MSK) {
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013de:	2b40      	cmp	r3, #64	; 0x40
 80013e0:	bf14      	ite	ne
 80013e2:	2301      	movne	r3, #1
 80013e4:	2300      	moveq	r3, #0
 80013e6:	b2db      	uxtb	r3, r3
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d003      	beq.n	80013f4 <_ZN11SPI_Handler24spi_txe_interrupt_handleEv+0x28>
        SPI_PeripheralControl(ENABLE);
 80013ec:	2101      	movs	r1, #1
 80013ee:	6878      	ldr	r0, [r7, #4]
 80013f0:	f7ff fe0c 	bl	800100c <_ZN11SPI_Handler21SPI_PeripheralControlEh>
    }

    // 2. check the DFF bit in CR1
    if (SPIx_.pSPIx->CR1 & (1 << SPI_CR1_DFF)) {
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80013fe:	2b00      	cmp	r3, #0
 8001400:	bf14      	ite	ne
 8001402:	2301      	movne	r3, #1
 8001404:	2300      	moveq	r3, #0
 8001406:	b2db      	uxtb	r3, r3
 8001408:	2b00      	cmp	r3, #0
 800140a:	d010      	beq.n	800142e <_ZN11SPI_Handler24spi_txe_interrupt_handleEv+0x62>
        // 16 BIT DFF
        // 1. load the data into the DR
        SPIx_.pSPIx->DR = *((uint16_t*) SPIx_.pTxBuffer);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	68db      	ldr	r3, [r3, #12]
 8001410:	881a      	ldrh	r2, [r3, #0]
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	60da      	str	r2, [r3, #12]
        SPIx_.TxLen -= 2;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	695b      	ldr	r3, [r3, #20]
 800141c:	1e9a      	subs	r2, r3, #2
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	615a      	str	r2, [r3, #20]
        (uint16_t*) SPIx_.pTxBuffer++;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	68db      	ldr	r3, [r3, #12]
 8001426:	1c5a      	adds	r2, r3, #1
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	60da      	str	r2, [r3, #12]
 800142c:	e00f      	b.n	800144e <_ZN11SPI_Handler24spi_txe_interrupt_handleEv+0x82>
    } else {
        SPIx_.pSPIx->DR = *SPIx_.pTxBuffer;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	68db      	ldr	r3, [r3, #12]
 8001432:	781a      	ldrb	r2, [r3, #0]
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	60da      	str	r2, [r3, #12]
        SPIx_.TxLen -= 1;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	695b      	ldr	r3, [r3, #20]
 800143e:	1e5a      	subs	r2, r3, #1
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	615a      	str	r2, [r3, #20]
        SPIx_.pTxBuffer++;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	68db      	ldr	r3, [r3, #12]
 8001448:	1c5a      	adds	r2, r3, #1
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	60da      	str	r2, [r3, #12]
    }

    if(!SPIx_.TxLen) {
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	695b      	ldr	r3, [r3, #20]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d107      	bne.n	8001466 <_ZN11SPI_Handler24spi_txe_interrupt_handleEv+0x9a>
        // TxLen is zero, close the spi transmission and inform the application
        // Tx is over
        SPI_CloseTransmission();
 8001456:	6878      	ldr	r0, [r7, #4]
 8001458:	f000 f87f 	bl	800155a <_ZN11SPI_Handler21SPI_CloseTransmissionEv>
        SPI_ApplicationEventCallback(&SPIx_, SPI_EVENT_TX_CMPLT);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2101      	movs	r1, #1
 8001460:	4618      	mov	r0, r3
 8001462:	f000 f8bc 	bl	80015de <_Z28SPI_ApplicationEventCallbackP12SPI_Handle_th>
    }
}
 8001466:	bf00      	nop
 8001468:	3708      	adds	r7, #8
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}

0800146e <_ZN11SPI_Handler25spi_rxne_interrupt_handleEv>:

void SPI_Handler::spi_rxne_interrupt_handle() {
 800146e:	b580      	push	{r7, lr}
 8001470:	b082      	sub	sp, #8
 8001472:	af00      	add	r7, sp, #0
 8001474:	6078      	str	r0, [r7, #4]
	if ((SPIx_.pSPIx->CR1 & SPI_CR1_SPE_MSK) != SPI_CR1_SPE_MSK) {
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001480:	2b40      	cmp	r3, #64	; 0x40
 8001482:	bf14      	ite	ne
 8001484:	2301      	movne	r3, #1
 8001486:	2300      	moveq	r3, #0
 8001488:	b2db      	uxtb	r3, r3
 800148a:	2b00      	cmp	r3, #0
 800148c:	d003      	beq.n	8001496 <_ZN11SPI_Handler25spi_rxne_interrupt_handleEv+0x28>
        SPI_PeripheralControl(ENABLE);
 800148e:	2101      	movs	r1, #1
 8001490:	6878      	ldr	r0, [r7, #4]
 8001492:	f7ff fdbb 	bl	800100c <_ZN11SPI_Handler21SPI_PeripheralControlEh>
    }


    //2. check the DFF bit in CR1
    if ((SPIx_.pSPIx->CR1 & (1 << SPI_CR1_DFF))) {
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	bf14      	ite	ne
 80014a4:	2301      	movne	r3, #1
 80014a6:	2300      	moveq	r3, #0
 80014a8:	b2db      	uxtb	r3, r3
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d011      	beq.n	80014d2 <_ZN11SPI_Handler25spi_rxne_interrupt_handleEv+0x64>
        //16 bit DFF
        //1. load the data from DR to Rxbuffer address
        *((uint16_t*) SPIx_.pRxBuffer) = SPIx_.pSPIx->DR;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	68da      	ldr	r2, [r3, #12]
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	691b      	ldr	r3, [r3, #16]
 80014b8:	b292      	uxth	r2, r2
 80014ba:	801a      	strh	r2, [r3, #0]
        SPIx_.RxLen -= 2;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	699b      	ldr	r3, [r3, #24]
 80014c0:	1e9a      	subs	r2, r3, #2
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	619a      	str	r2, [r3, #24]
        (uint16_t*) SPIx_.pRxBuffer++;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	691b      	ldr	r3, [r3, #16]
 80014ca:	1c5a      	adds	r2, r3, #1
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	611a      	str	r2, [r3, #16]
 80014d0:	e010      	b.n	80014f4 <_ZN11SPI_Handler25spi_rxne_interrupt_handleEv+0x86>
    } else {
        //8 bit DFF
        *(SPIx_.pRxBuffer) = SPIx_.pSPIx->DR;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	68da      	ldr	r2, [r3, #12]
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	691b      	ldr	r3, [r3, #16]
 80014dc:	b2d2      	uxtb	r2, r2
 80014de:	701a      	strb	r2, [r3, #0]
        SPIx_.RxLen--;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	699b      	ldr	r3, [r3, #24]
 80014e4:	1e5a      	subs	r2, r3, #1
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	619a      	str	r2, [r3, #24]
        SPIx_.pRxBuffer++;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	691b      	ldr	r3, [r3, #16]
 80014ee:	1c5a      	adds	r2, r3, #1
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	611a      	str	r2, [r3, #16]
    }

    if(!SPIx_.RxLen) {
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	699b      	ldr	r3, [r3, #24]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d107      	bne.n	800150c <_ZN11SPI_Handler25spi_rxne_interrupt_handleEv+0x9e>
        // TxLen is zero, close the spi transmission and inform the application
        // Tx is over
        SPI_CloseReception();
 80014fc:	6878      	ldr	r0, [r7, #4]
 80014fe:	f000 f854 	bl	80015aa <_ZN11SPI_Handler18SPI_CloseReceptionEv>
        SPI_ApplicationEventCallback(&SPIx_, SPI_EVENT_RX_CMPLT);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	2102      	movs	r1, #2
 8001506:	4618      	mov	r0, r3
 8001508:	f000 f869 	bl	80015de <_Z28SPI_ApplicationEventCallbackP12SPI_Handle_th>
    }
}
 800150c:	bf00      	nop
 800150e:	3708      	adds	r7, #8
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}

08001514 <_ZN11SPI_Handler28spi_ovr_err_interrupt_handleEv>:

void SPI_Handler::spi_ovr_err_interrupt_handle() {
 8001514:	b580      	push	{r7, lr}
 8001516:	b082      	sub	sp, #8
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
    // 1. Clear the ovr flag
    SPI_ClearOVRFlag();
 800151c:	6878      	ldr	r0, [r7, #4]
 800151e:	f000 f809 	bl	8001534 <_ZN11SPI_Handler16SPI_ClearOVRFlagEv>
    // 2. Inform the application
    SPI_ApplicationEventCallback(&SPIx_, SPI_EVENT_OVR_ERR);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	2103      	movs	r1, #3
 8001526:	4618      	mov	r0, r3
 8001528:	f000 f859 	bl	80015de <_Z28SPI_ApplicationEventCallbackP12SPI_Handle_th>
}
 800152c:	bf00      	nop
 800152e:	3708      	adds	r7, #8
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}

08001534 <_ZN11SPI_Handler16SPI_ClearOVRFlagEv>:


void SPI_Handler::SPI_ClearOVRFlag() {
 8001534:	b480      	push	{r7}
 8001536:	b085      	sub	sp, #20
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
    uint8_t temp = 0;
 800153c:	2300      	movs	r3, #0
 800153e:	73fb      	strb	r3, [r7, #15]
    temp = SPIx_.pSPIx->DR;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	68db      	ldr	r3, [r3, #12]
 8001546:	73fb      	strb	r3, [r7, #15]
    temp = SPIx_.pSPIx->SR;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	689b      	ldr	r3, [r3, #8]
 800154e:	73fb      	strb	r3, [r7, #15]
    static_cast<void>(temp);
}
 8001550:	bf00      	nop
 8001552:	3714      	adds	r7, #20
 8001554:	46bd      	mov	sp, r7
 8001556:	bc80      	pop	{r7}
 8001558:	4770      	bx	lr

0800155a <_ZN11SPI_Handler21SPI_CloseTransmissionEv>:

void SPI_Handler::SPI_CloseTransmission() {
 800155a:	b580      	push	{r7, lr}
 800155c:	b084      	sub	sp, #16
 800155e:	af00      	add	r7, sp, #0
 8001560:	6078      	str	r0, [r7, #4]
	uint8_t temp = 0;
 8001562:	2300      	movs	r3, #0
 8001564:	73fb      	strb	r3, [r7, #15]
	temp = SPIx_.pSPIx->SR;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	689b      	ldr	r3, [r3, #8]
 800156c:	73fb      	strb	r3, [r7, #15]
	// TODO: wait for SR txe is empty
	while(temp & (1 << SPI_SR_TXE));
 800156e:	7bfb      	ldrb	r3, [r7, #15]
 8001570:	f003 0302 	and.w	r3, r3, #2
 8001574:	2b00      	cmp	r3, #0
 8001576:	d000      	beq.n	800157a <_ZN11SPI_Handler21SPI_CloseTransmissionEv+0x20>
 8001578:	e7f9      	b.n	800156e <_ZN11SPI_Handler21SPI_CloseTransmissionEv+0x14>
    SPIx_.pSPIx->CR2 &= ~(1 << SPI_CR2_TXEIE | 1 << SPI_CR2_ERRIE);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	685a      	ldr	r2, [r3, #4]
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001588:	605a      	str	r2, [r3, #4]
    SPIx_.pTxBuffer = nullptr;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	2200      	movs	r2, #0
 800158e:	60da      	str	r2, [r3, #12]
    SPIx_.TxLen = 0;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	2200      	movs	r2, #0
 8001594:	615a      	str	r2, [r3, #20]
    SPIx_.TxState = SPI_READY;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	2200      	movs	r2, #0
 800159a:	771a      	strb	r2, [r3, #28]
    SPI_ClearOVRFlag();
 800159c:	6878      	ldr	r0, [r7, #4]
 800159e:	f7ff ffc9 	bl	8001534 <_ZN11SPI_Handler16SPI_ClearOVRFlagEv>
}
 80015a2:	bf00      	nop
 80015a4:	3710      	adds	r7, #16
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}

080015aa <_ZN11SPI_Handler18SPI_CloseReceptionEv>:

void SPI_Handler::SPI_CloseReception() {
 80015aa:	b480      	push	{r7}
 80015ac:	b083      	sub	sp, #12
 80015ae:	af00      	add	r7, sp, #0
 80015b0:	6078      	str	r0, [r7, #4]
    SPIx_.pSPIx->CR2 &= ~(1 << SPI_CR2_RXNEIE | 1 << SPI_CR2_ERRIE);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	685a      	ldr	r2, [r3, #4]
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80015c0:	605a      	str	r2, [r3, #4]
    SPIx_.pRxBuffer = nullptr;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	2200      	movs	r2, #0
 80015c6:	611a      	str	r2, [r3, #16]
    SPIx_.RxLen = 0;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2200      	movs	r2, #0
 80015cc:	619a      	str	r2, [r3, #24]
    SPIx_.RxState = SPI_READY;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	2200      	movs	r2, #0
 80015d2:	775a      	strb	r2, [r3, #29]
}
 80015d4:	bf00      	nop
 80015d6:	370c      	adds	r7, #12
 80015d8:	46bd      	mov	sp, r7
 80015da:	bc80      	pop	{r7}
 80015dc:	4770      	bx	lr

080015de <_Z28SPI_ApplicationEventCallbackP12SPI_Handle_th>:

__weak void SPI_ApplicationEventCallback(SPI_Handle_t *pSPIHandle, uint8_t AppEv) {
 80015de:	b480      	push	{r7}
 80015e0:	b083      	sub	sp, #12
 80015e2:	af00      	add	r7, sp, #0
 80015e4:	6078      	str	r0, [r7, #4]
 80015e6:	460b      	mov	r3, r1
 80015e8:	70fb      	strb	r3, [r7, #3]
    //This is a weak implementation . the user application may override this function.
}
 80015ea:	bf00      	nop
 80015ec:	370c      	adds	r7, #12
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bc80      	pop	{r7}
 80015f2:	4770      	bx	lr

080015f4 <_ZNSt5tupleIJP12GPIO_HandlerSt14default_deleteIS0_EEEC1IS1_S3_Lb1EEEv>:
                typename enable_if<__and_<
                                     __is_implicitly_default_constructible<_U1>,
                                     __is_implicitly_default_constructible<_U2>>
                                   ::value, bool>::type = true>

      constexpr tuple()
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b082      	sub	sp, #8
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
      : _Inherited() { }
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	4618      	mov	r0, r3
 8001600:	f000 f841 	bl	8001686 <_ZNSt11_Tuple_implILj0EJP12GPIO_HandlerSt14default_deleteIS0_EEEC1Ev>
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	4618      	mov	r0, r3
 8001608:	3708      	adds	r7, #8
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}

0800160e <_ZNSt15__uniq_ptr_implI12GPIO_HandlerSt14default_deleteIS0_EEC1Ev>:
        __and_<__not_<is_pointer<_Dp>>,
	       is_default_constructible<_Dp>>::value>;

      using pointer = typename _Ptr<_Tp, _Dp>::type;

      __uniq_ptr_impl() = default;
 800160e:	b580      	push	{r7, lr}
 8001610:	b082      	sub	sp, #8
 8001612:	af00      	add	r7, sp, #0
 8001614:	6078      	str	r0, [r7, #4]
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	4618      	mov	r0, r3
 800161a:	f7ff ffeb 	bl	80015f4 <_ZNSt5tupleIJP12GPIO_HandlerSt14default_deleteIS0_EEEC1IS1_S3_Lb1EEEv>
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	4618      	mov	r0, r3
 8001622:	3708      	adds	r7, #8
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}

08001628 <_ZNSt10unique_ptrI12GPIO_HandlerSt14default_deleteIS0_EEC1IS2_vEEv>:
      // Constructors.

      /// Default constructor, creates a unique_ptr that owns nothing.
      template <typename _Up = _Dp,
		typename = _DeleterConstraint<_Up>>
	constexpr unique_ptr() noexcept
 8001628:	b580      	push	{r7, lr}
 800162a:	b082      	sub	sp, #8
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
	: _M_t()
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2200      	movs	r2, #0
 8001634:	601a      	str	r2, [r3, #0]
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	4618      	mov	r0, r3
 800163a:	f7ff ffe8 	bl	800160e <_ZNSt15__uniq_ptr_implI12GPIO_HandlerSt14default_deleteIS0_EEC1Ev>
        { }
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	4618      	mov	r0, r3
 8001642:	3708      	adds	r7, #8
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}

08001648 <_ZNSt10unique_ptrI12GPIO_HandlerSt14default_deleteIS0_EE5resetEPS0_>:
       * @param __p  The new pointer to store.
       *
       * The deleter will be invoked if a pointer is already owned.
       */
      void
      reset(pointer __p = pointer()) noexcept
 8001648:	b580      	push	{r7, lr}
 800164a:	b082      	sub	sp, #8
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
 8001650:	6039      	str	r1, [r7, #0]
      {
	using std::swap;
	swap(_M_t._M_ptr(), __p);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	4618      	mov	r0, r3
 8001656:	f000 f826 	bl	80016a6 <_ZNSt15__uniq_ptr_implI12GPIO_HandlerSt14default_deleteIS0_EE6_M_ptrEv>
 800165a:	4602      	mov	r2, r0
 800165c:	463b      	mov	r3, r7
 800165e:	4619      	mov	r1, r3
 8001660:	4610      	mov	r0, r2
 8001662:	f000 f857 	bl	8001714 <_ZSt4swapIP12GPIO_HandlerENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS6_ESt18is_move_assignableIS6_EEE5valueEvE4typeERS6_SG_>
	if (__p != pointer())
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d008      	beq.n	800167e <_ZNSt10unique_ptrI12GPIO_HandlerSt14default_deleteIS0_EE5resetEPS0_+0x36>
	  get_deleter()(__p);
 800166c:	6878      	ldr	r0, [r7, #4]
 800166e:	f000 f827 	bl	80016c0 <_ZNSt10unique_ptrI12GPIO_HandlerSt14default_deleteIS0_EE11get_deleterEv>
 8001672:	4602      	mov	r2, r0
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	4619      	mov	r1, r3
 8001678:	4610      	mov	r0, r2
 800167a:	f000 f82e 	bl	80016da <_ZNKSt14default_deleteI12GPIO_HandlerEclEPS0_>
      }
 800167e:	bf00      	nop
 8001680:	3708      	adds	r7, #8
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}

08001686 <_ZNSt11_Tuple_implILj0EJP12GPIO_HandlerSt14default_deleteIS0_EEEC1Ev>:
      constexpr _Tuple_impl()
 8001686:	b580      	push	{r7, lr}
 8001688:	b082      	sub	sp, #8
 800168a:	af00      	add	r7, sp, #0
 800168c:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 800168e:	6878      	ldr	r0, [r7, #4]
 8001690:	f000 f85f 	bl	8001752 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI12GPIO_HandlerEEEC1Ev>
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	4618      	mov	r0, r3
 8001698:	f000 f867 	bl	800176a <_ZNSt10_Head_baseILj0EP12GPIO_HandlerLb0EEC1Ev>
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	4618      	mov	r0, r3
 80016a0:	3708      	adds	r7, #8
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}

080016a6 <_ZNSt15__uniq_ptr_implI12GPIO_HandlerSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 80016a6:	b580      	push	{r7, lr}
 80016a8:	b082      	sub	sp, #8
 80016aa:	af00      	add	r7, sp, #0
 80016ac:	6078      	str	r0, [r7, #4]
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	4618      	mov	r0, r3
 80016b2:	f000 f867 	bl	8001784 <_ZSt3getILj0EJP12GPIO_HandlerSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 80016b6:	4603      	mov	r3, r0
 80016b8:	4618      	mov	r0, r3
 80016ba:	3708      	adds	r7, #8
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}

080016c0 <_ZNSt10unique_ptrI12GPIO_HandlerSt14default_deleteIS0_EE11get_deleterEv>:
      get_deleter() noexcept
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b082      	sub	sp, #8
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	4618      	mov	r0, r3
 80016cc:	f000 f867 	bl	800179e <_ZNSt15__uniq_ptr_implI12GPIO_HandlerSt14default_deleteIS0_EE10_M_deleterEv>
 80016d0:	4603      	mov	r3, r0
 80016d2:	4618      	mov	r0, r3
 80016d4:	3708      	adds	r7, #8
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}

080016da <_ZNKSt14default_deleteI12GPIO_HandlerEclEPS0_>:
      operator()(_Tp* __ptr) const
 80016da:	b590      	push	{r4, r7, lr}
 80016dc:	b083      	sub	sp, #12
 80016de:	af00      	add	r7, sp, #0
 80016e0:	6078      	str	r0, [r7, #4]
 80016e2:	6039      	str	r1, [r7, #0]
	delete __ptr;
 80016e4:	683c      	ldr	r4, [r7, #0]
 80016e6:	2c00      	cmp	r4, #0
 80016e8:	d006      	beq.n	80016f8 <_ZNKSt14default_deleteI12GPIO_HandlerEclEPS0_+0x1e>
 80016ea:	4620      	mov	r0, r4
 80016ec:	f7fe ffd5 	bl	800069a <_ZN12GPIO_HandlerD1Ev>
 80016f0:	210c      	movs	r1, #12
 80016f2:	4620      	mov	r0, r4
 80016f4:	f000 f8bb 	bl	800186e <_ZdlPvj>
      }
 80016f8:	bf00      	nop
 80016fa:	370c      	adds	r7, #12
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd90      	pop	{r4, r7, pc}

08001700 <_ZSt4moveIRP12GPIO_HandlerEONSt16remove_referenceIT_E4typeEOS4_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8001700:	b480      	push	{r7}
 8001702:	b083      	sub	sp, #12
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	4618      	mov	r0, r3
 800170c:	370c      	adds	r7, #12
 800170e:	46bd      	mov	sp, r7
 8001710:	bc80      	pop	{r7}
 8001712:	4770      	bx	lr

08001714 <_ZSt4swapIP12GPIO_HandlerENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS6_ESt18is_move_assignableIS6_EEE5valueEvE4typeERS6_SG_>:
    inline
#if __cplusplus >= 201103L
    typename enable_if<__and_<__not_<__is_tuple_like<_Tp>>,
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
    swap(_Tp& __a, _Tp& __b)
 8001714:	b580      	push	{r7, lr}
 8001716:	b084      	sub	sp, #16
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
 800171c:	6039      	str	r1, [r7, #0]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 800171e:	6878      	ldr	r0, [r7, #4]
 8001720:	f7ff ffee 	bl	8001700 <_ZSt4moveIRP12GPIO_HandlerEONSt16remove_referenceIT_E4typeEOS4_>
 8001724:	4603      	mov	r3, r0
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 800172a:	6838      	ldr	r0, [r7, #0]
 800172c:	f7ff ffe8 	bl	8001700 <_ZSt4moveIRP12GPIO_HandlerEONSt16remove_referenceIT_E4typeEOS4_>
 8001730:	4603      	mov	r3, r0
 8001732:	681a      	ldr	r2, [r3, #0]
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8001738:	f107 030c 	add.w	r3, r7, #12
 800173c:	4618      	mov	r0, r3
 800173e:	f7ff ffdf 	bl	8001700 <_ZSt4moveIRP12GPIO_HandlerEONSt16remove_referenceIT_E4typeEOS4_>
 8001742:	4603      	mov	r3, r0
 8001744:	681a      	ldr	r2, [r3, #0]
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	601a      	str	r2, [r3, #0]
    }
 800174a:	bf00      	nop
 800174c:	3710      	adds	r7, #16
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}

08001752 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI12GPIO_HandlerEEEC1Ev>:
      constexpr _Tuple_impl()
 8001752:	b580      	push	{r7, lr}
 8001754:	b082      	sub	sp, #8
 8001756:	af00      	add	r7, sp, #0
 8001758:	6078      	str	r0, [r7, #4]
      : _Base() { }
 800175a:	6878      	ldr	r0, [r7, #4]
 800175c:	f000 f82c 	bl	80017b8 <_ZNSt10_Head_baseILj1ESt14default_deleteI12GPIO_HandlerELb1EEC1Ev>
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	4618      	mov	r0, r3
 8001764:	3708      	adds	r7, #8
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}

0800176a <_ZNSt10_Head_baseILj0EP12GPIO_HandlerLb0EEC1Ev>:
      constexpr _Head_base()
 800176a:	b480      	push	{r7}
 800176c:	b083      	sub	sp, #12
 800176e:	af00      	add	r7, sp, #0
 8001770:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	2200      	movs	r2, #0
 8001776:	601a      	str	r2, [r3, #0]
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	4618      	mov	r0, r3
 800177c:	370c      	adds	r7, #12
 800177e:	46bd      	mov	sp, r7
 8001780:	bc80      	pop	{r7}
 8001782:	4770      	bx	lr

08001784 <_ZSt3getILj0EJP12GPIO_HandlerSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }

  /// Return a reference to the ith element of a tuple.
  template<std::size_t __i, typename... _Elements>
    constexpr __tuple_element_t<__i, tuple<_Elements...>>&
    get(tuple<_Elements...>& __t) noexcept
 8001784:	b580      	push	{r7, lr}
 8001786:	b082      	sub	sp, #8
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	4618      	mov	r0, r3
 8001790:	f000 f81c 	bl	80017cc <_ZSt12__get_helperILj0EP12GPIO_HandlerJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8001794:	4603      	mov	r3, r0
 8001796:	4618      	mov	r0, r3
 8001798:	3708      	adds	r7, #8
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}

0800179e <_ZNSt15__uniq_ptr_implI12GPIO_HandlerSt14default_deleteIS0_EE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 800179e:	b580      	push	{r7, lr}
 80017a0:	b082      	sub	sp, #8
 80017a2:	af00      	add	r7, sp, #0
 80017a4:	6078      	str	r0, [r7, #4]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	4618      	mov	r0, r3
 80017aa:	f000 f81b 	bl	80017e4 <_ZSt3getILj1EJP12GPIO_HandlerSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 80017ae:	4603      	mov	r3, r0
 80017b0:	4618      	mov	r0, r3
 80017b2:	3708      	adds	r7, #8
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}

080017b8 <_ZNSt10_Head_baseILj1ESt14default_deleteI12GPIO_HandlerELb1EEC1Ev>:
      constexpr _Head_base()
 80017b8:	b480      	push	{r7}
 80017ba:	b083      	sub	sp, #12
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
      : _Head() { }
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	4618      	mov	r0, r3
 80017c4:	370c      	adds	r7, #12
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bc80      	pop	{r7}
 80017ca:	4770      	bx	lr

080017cc <_ZSt12__get_helperILj0EP12GPIO_HandlerJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b082      	sub	sp, #8
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80017d4:	6878      	ldr	r0, [r7, #4]
 80017d6:	f000 f811 	bl	80017fc <_ZNSt11_Tuple_implILj0EJP12GPIO_HandlerSt14default_deleteIS0_EEE7_M_headERS4_>
 80017da:	4603      	mov	r3, r0
 80017dc:	4618      	mov	r0, r3
 80017de:	3708      	adds	r7, #8
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}

080017e4 <_ZSt3getILj1EJP12GPIO_HandlerSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b082      	sub	sp, #8
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80017ec:	6878      	ldr	r0, [r7, #4]
 80017ee:	f000 f812 	bl	8001816 <_ZSt12__get_helperILj1ESt14default_deleteI12GPIO_HandlerEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 80017f2:	4603      	mov	r3, r0
 80017f4:	4618      	mov	r0, r3
 80017f6:	3708      	adds	r7, #8
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}

080017fc <_ZNSt11_Tuple_implILj0EJP12GPIO_HandlerSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b082      	sub	sp, #8
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	4618      	mov	r0, r3
 8001808:	f000 f811 	bl	800182e <_ZNSt10_Head_baseILj0EP12GPIO_HandlerLb0EE7_M_headERS2_>
 800180c:	4603      	mov	r3, r0
 800180e:	4618      	mov	r0, r3
 8001810:	3708      	adds	r7, #8
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}

08001816 <_ZSt12__get_helperILj1ESt14default_deleteI12GPIO_HandlerEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8001816:	b580      	push	{r7, lr}
 8001818:	b082      	sub	sp, #8
 800181a:	af00      	add	r7, sp, #0
 800181c:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800181e:	6878      	ldr	r0, [r7, #4]
 8001820:	f000 f80f 	bl	8001842 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI12GPIO_HandlerEEE7_M_headERS3_>
 8001824:	4603      	mov	r3, r0
 8001826:	4618      	mov	r0, r3
 8001828:	3708      	adds	r7, #8
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}

0800182e <_ZNSt10_Head_baseILj0EP12GPIO_HandlerLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800182e:	b480      	push	{r7}
 8001830:	b083      	sub	sp, #12
 8001832:	af00      	add	r7, sp, #0
 8001834:	6078      	str	r0, [r7, #4]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	4618      	mov	r0, r3
 800183a:	370c      	adds	r7, #12
 800183c:	46bd      	mov	sp, r7
 800183e:	bc80      	pop	{r7}
 8001840:	4770      	bx	lr

08001842 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI12GPIO_HandlerEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8001842:	b580      	push	{r7, lr}
 8001844:	b082      	sub	sp, #8
 8001846:	af00      	add	r7, sp, #0
 8001848:	6078      	str	r0, [r7, #4]
 800184a:	6878      	ldr	r0, [r7, #4]
 800184c:	f000 f805 	bl	800185a <_ZNSt10_Head_baseILj1ESt14default_deleteI12GPIO_HandlerELb1EE7_M_headERS3_>
 8001850:	4603      	mov	r3, r0
 8001852:	4618      	mov	r0, r3
 8001854:	3708      	adds	r7, #8
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}

0800185a <_ZNSt10_Head_baseILj1ESt14default_deleteI12GPIO_HandlerELb1EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b; }
 800185a:	b480      	push	{r7}
 800185c:	b083      	sub	sp, #12
 800185e:	af00      	add	r7, sp, #0
 8001860:	6078      	str	r0, [r7, #4]
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	4618      	mov	r0, r3
 8001866:	370c      	adds	r7, #12
 8001868:	46bd      	mov	sp, r7
 800186a:	bc80      	pop	{r7}
 800186c:	4770      	bx	lr

0800186e <_ZdlPvj>:
 800186e:	f000 b811 	b.w	8001894 <_ZdlPv>

08001872 <_Znwj>:
 8001872:	b510      	push	{r4, lr}
 8001874:	2800      	cmp	r0, #0
 8001876:	bf14      	ite	ne
 8001878:	4604      	movne	r4, r0
 800187a:	2401      	moveq	r4, #1
 800187c:	4620      	mov	r0, r4
 800187e:	f000 f845 	bl	800190c <malloc>
 8001882:	b930      	cbnz	r0, 8001892 <_Znwj+0x20>
 8001884:	f000 f808 	bl	8001898 <_ZSt15get_new_handlerv>
 8001888:	b908      	cbnz	r0, 800188e <_Znwj+0x1c>
 800188a:	f000 f80d 	bl	80018a8 <abort>
 800188e:	4780      	blx	r0
 8001890:	e7f4      	b.n	800187c <_Znwj+0xa>
 8001892:	bd10      	pop	{r4, pc}

08001894 <_ZdlPv>:
 8001894:	f000 b842 	b.w	800191c <free>

08001898 <_ZSt15get_new_handlerv>:
 8001898:	4b02      	ldr	r3, [pc, #8]	; (80018a4 <_ZSt15get_new_handlerv+0xc>)
 800189a:	6818      	ldr	r0, [r3, #0]
 800189c:	f3bf 8f5b 	dmb	ish
 80018a0:	4770      	bx	lr
 80018a2:	bf00      	nop
 80018a4:	20000088 	.word	0x20000088

080018a8 <abort>:
 80018a8:	b508      	push	{r3, lr}
 80018aa:	2006      	movs	r0, #6
 80018ac:	f000 f926 	bl	8001afc <raise>
 80018b0:	2001      	movs	r0, #1
 80018b2:	f7fe fde0 	bl	8000476 <_exit>
	...

080018b8 <__errno>:
 80018b8:	4b01      	ldr	r3, [pc, #4]	; (80018c0 <__errno+0x8>)
 80018ba:	6818      	ldr	r0, [r3, #0]
 80018bc:	4770      	bx	lr
 80018be:	bf00      	nop
 80018c0:	20000000 	.word	0x20000000

080018c4 <__libc_init_array>:
 80018c4:	b570      	push	{r4, r5, r6, lr}
 80018c6:	4e0d      	ldr	r6, [pc, #52]	; (80018fc <__libc_init_array+0x38>)
 80018c8:	4c0d      	ldr	r4, [pc, #52]	; (8001900 <__libc_init_array+0x3c>)
 80018ca:	1ba4      	subs	r4, r4, r6
 80018cc:	10a4      	asrs	r4, r4, #2
 80018ce:	2500      	movs	r5, #0
 80018d0:	42a5      	cmp	r5, r4
 80018d2:	d109      	bne.n	80018e8 <__libc_init_array+0x24>
 80018d4:	4e0b      	ldr	r6, [pc, #44]	; (8001904 <__libc_init_array+0x40>)
 80018d6:	4c0c      	ldr	r4, [pc, #48]	; (8001908 <__libc_init_array+0x44>)
 80018d8:	f000 f92e 	bl	8001b38 <_init>
 80018dc:	1ba4      	subs	r4, r4, r6
 80018de:	10a4      	asrs	r4, r4, #2
 80018e0:	2500      	movs	r5, #0
 80018e2:	42a5      	cmp	r5, r4
 80018e4:	d105      	bne.n	80018f2 <__libc_init_array+0x2e>
 80018e6:	bd70      	pop	{r4, r5, r6, pc}
 80018e8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80018ec:	4798      	blx	r3
 80018ee:	3501      	adds	r5, #1
 80018f0:	e7ee      	b.n	80018d0 <__libc_init_array+0xc>
 80018f2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80018f6:	4798      	blx	r3
 80018f8:	3501      	adds	r5, #1
 80018fa:	e7f2      	b.n	80018e2 <__libc_init_array+0x1e>
 80018fc:	08001b54 	.word	0x08001b54
 8001900:	08001b54 	.word	0x08001b54
 8001904:	08001b54 	.word	0x08001b54
 8001908:	08001b58 	.word	0x08001b58

0800190c <malloc>:
 800190c:	4b02      	ldr	r3, [pc, #8]	; (8001918 <malloc+0xc>)
 800190e:	4601      	mov	r1, r0
 8001910:	6818      	ldr	r0, [r3, #0]
 8001912:	f000 b861 	b.w	80019d8 <_malloc_r>
 8001916:	bf00      	nop
 8001918:	20000000 	.word	0x20000000

0800191c <free>:
 800191c:	4b02      	ldr	r3, [pc, #8]	; (8001928 <free+0xc>)
 800191e:	4601      	mov	r1, r0
 8001920:	6818      	ldr	r0, [r3, #0]
 8001922:	f000 b80b 	b.w	800193c <_free_r>
 8001926:	bf00      	nop
 8001928:	20000000 	.word	0x20000000

0800192c <memset>:
 800192c:	4402      	add	r2, r0
 800192e:	4603      	mov	r3, r0
 8001930:	4293      	cmp	r3, r2
 8001932:	d100      	bne.n	8001936 <memset+0xa>
 8001934:	4770      	bx	lr
 8001936:	f803 1b01 	strb.w	r1, [r3], #1
 800193a:	e7f9      	b.n	8001930 <memset+0x4>

0800193c <_free_r>:
 800193c:	b538      	push	{r3, r4, r5, lr}
 800193e:	4605      	mov	r5, r0
 8001940:	2900      	cmp	r1, #0
 8001942:	d045      	beq.n	80019d0 <_free_r+0x94>
 8001944:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001948:	1f0c      	subs	r4, r1, #4
 800194a:	2b00      	cmp	r3, #0
 800194c:	bfb8      	it	lt
 800194e:	18e4      	addlt	r4, r4, r3
 8001950:	f000 f8f0 	bl	8001b34 <__malloc_lock>
 8001954:	4a1f      	ldr	r2, [pc, #124]	; (80019d4 <_free_r+0x98>)
 8001956:	6813      	ldr	r3, [r2, #0]
 8001958:	4610      	mov	r0, r2
 800195a:	b933      	cbnz	r3, 800196a <_free_r+0x2e>
 800195c:	6063      	str	r3, [r4, #4]
 800195e:	6014      	str	r4, [r2, #0]
 8001960:	4628      	mov	r0, r5
 8001962:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001966:	f000 b8e6 	b.w	8001b36 <__malloc_unlock>
 800196a:	42a3      	cmp	r3, r4
 800196c:	d90c      	bls.n	8001988 <_free_r+0x4c>
 800196e:	6821      	ldr	r1, [r4, #0]
 8001970:	1862      	adds	r2, r4, r1
 8001972:	4293      	cmp	r3, r2
 8001974:	bf04      	itt	eq
 8001976:	681a      	ldreq	r2, [r3, #0]
 8001978:	685b      	ldreq	r3, [r3, #4]
 800197a:	6063      	str	r3, [r4, #4]
 800197c:	bf04      	itt	eq
 800197e:	1852      	addeq	r2, r2, r1
 8001980:	6022      	streq	r2, [r4, #0]
 8001982:	6004      	str	r4, [r0, #0]
 8001984:	e7ec      	b.n	8001960 <_free_r+0x24>
 8001986:	4613      	mov	r3, r2
 8001988:	685a      	ldr	r2, [r3, #4]
 800198a:	b10a      	cbz	r2, 8001990 <_free_r+0x54>
 800198c:	42a2      	cmp	r2, r4
 800198e:	d9fa      	bls.n	8001986 <_free_r+0x4a>
 8001990:	6819      	ldr	r1, [r3, #0]
 8001992:	1858      	adds	r0, r3, r1
 8001994:	42a0      	cmp	r0, r4
 8001996:	d10b      	bne.n	80019b0 <_free_r+0x74>
 8001998:	6820      	ldr	r0, [r4, #0]
 800199a:	4401      	add	r1, r0
 800199c:	1858      	adds	r0, r3, r1
 800199e:	4282      	cmp	r2, r0
 80019a0:	6019      	str	r1, [r3, #0]
 80019a2:	d1dd      	bne.n	8001960 <_free_r+0x24>
 80019a4:	6810      	ldr	r0, [r2, #0]
 80019a6:	6852      	ldr	r2, [r2, #4]
 80019a8:	605a      	str	r2, [r3, #4]
 80019aa:	4401      	add	r1, r0
 80019ac:	6019      	str	r1, [r3, #0]
 80019ae:	e7d7      	b.n	8001960 <_free_r+0x24>
 80019b0:	d902      	bls.n	80019b8 <_free_r+0x7c>
 80019b2:	230c      	movs	r3, #12
 80019b4:	602b      	str	r3, [r5, #0]
 80019b6:	e7d3      	b.n	8001960 <_free_r+0x24>
 80019b8:	6820      	ldr	r0, [r4, #0]
 80019ba:	1821      	adds	r1, r4, r0
 80019bc:	428a      	cmp	r2, r1
 80019be:	bf04      	itt	eq
 80019c0:	6811      	ldreq	r1, [r2, #0]
 80019c2:	6852      	ldreq	r2, [r2, #4]
 80019c4:	6062      	str	r2, [r4, #4]
 80019c6:	bf04      	itt	eq
 80019c8:	1809      	addeq	r1, r1, r0
 80019ca:	6021      	streq	r1, [r4, #0]
 80019cc:	605c      	str	r4, [r3, #4]
 80019ce:	e7c7      	b.n	8001960 <_free_r+0x24>
 80019d0:	bd38      	pop	{r3, r4, r5, pc}
 80019d2:	bf00      	nop
 80019d4:	2000008c 	.word	0x2000008c

080019d8 <_malloc_r>:
 80019d8:	b570      	push	{r4, r5, r6, lr}
 80019da:	1ccd      	adds	r5, r1, #3
 80019dc:	f025 0503 	bic.w	r5, r5, #3
 80019e0:	3508      	adds	r5, #8
 80019e2:	2d0c      	cmp	r5, #12
 80019e4:	bf38      	it	cc
 80019e6:	250c      	movcc	r5, #12
 80019e8:	2d00      	cmp	r5, #0
 80019ea:	4606      	mov	r6, r0
 80019ec:	db01      	blt.n	80019f2 <_malloc_r+0x1a>
 80019ee:	42a9      	cmp	r1, r5
 80019f0:	d903      	bls.n	80019fa <_malloc_r+0x22>
 80019f2:	230c      	movs	r3, #12
 80019f4:	6033      	str	r3, [r6, #0]
 80019f6:	2000      	movs	r0, #0
 80019f8:	bd70      	pop	{r4, r5, r6, pc}
 80019fa:	f000 f89b 	bl	8001b34 <__malloc_lock>
 80019fe:	4a21      	ldr	r2, [pc, #132]	; (8001a84 <_malloc_r+0xac>)
 8001a00:	6814      	ldr	r4, [r2, #0]
 8001a02:	4621      	mov	r1, r4
 8001a04:	b991      	cbnz	r1, 8001a2c <_malloc_r+0x54>
 8001a06:	4c20      	ldr	r4, [pc, #128]	; (8001a88 <_malloc_r+0xb0>)
 8001a08:	6823      	ldr	r3, [r4, #0]
 8001a0a:	b91b      	cbnz	r3, 8001a14 <_malloc_r+0x3c>
 8001a0c:	4630      	mov	r0, r6
 8001a0e:	f000 f83d 	bl	8001a8c <_sbrk_r>
 8001a12:	6020      	str	r0, [r4, #0]
 8001a14:	4629      	mov	r1, r5
 8001a16:	4630      	mov	r0, r6
 8001a18:	f000 f838 	bl	8001a8c <_sbrk_r>
 8001a1c:	1c43      	adds	r3, r0, #1
 8001a1e:	d124      	bne.n	8001a6a <_malloc_r+0x92>
 8001a20:	230c      	movs	r3, #12
 8001a22:	6033      	str	r3, [r6, #0]
 8001a24:	4630      	mov	r0, r6
 8001a26:	f000 f886 	bl	8001b36 <__malloc_unlock>
 8001a2a:	e7e4      	b.n	80019f6 <_malloc_r+0x1e>
 8001a2c:	680b      	ldr	r3, [r1, #0]
 8001a2e:	1b5b      	subs	r3, r3, r5
 8001a30:	d418      	bmi.n	8001a64 <_malloc_r+0x8c>
 8001a32:	2b0b      	cmp	r3, #11
 8001a34:	d90f      	bls.n	8001a56 <_malloc_r+0x7e>
 8001a36:	600b      	str	r3, [r1, #0]
 8001a38:	50cd      	str	r5, [r1, r3]
 8001a3a:	18cc      	adds	r4, r1, r3
 8001a3c:	4630      	mov	r0, r6
 8001a3e:	f000 f87a 	bl	8001b36 <__malloc_unlock>
 8001a42:	f104 000b 	add.w	r0, r4, #11
 8001a46:	1d23      	adds	r3, r4, #4
 8001a48:	f020 0007 	bic.w	r0, r0, #7
 8001a4c:	1ac3      	subs	r3, r0, r3
 8001a4e:	d0d3      	beq.n	80019f8 <_malloc_r+0x20>
 8001a50:	425a      	negs	r2, r3
 8001a52:	50e2      	str	r2, [r4, r3]
 8001a54:	e7d0      	b.n	80019f8 <_malloc_r+0x20>
 8001a56:	428c      	cmp	r4, r1
 8001a58:	684b      	ldr	r3, [r1, #4]
 8001a5a:	bf16      	itet	ne
 8001a5c:	6063      	strne	r3, [r4, #4]
 8001a5e:	6013      	streq	r3, [r2, #0]
 8001a60:	460c      	movne	r4, r1
 8001a62:	e7eb      	b.n	8001a3c <_malloc_r+0x64>
 8001a64:	460c      	mov	r4, r1
 8001a66:	6849      	ldr	r1, [r1, #4]
 8001a68:	e7cc      	b.n	8001a04 <_malloc_r+0x2c>
 8001a6a:	1cc4      	adds	r4, r0, #3
 8001a6c:	f024 0403 	bic.w	r4, r4, #3
 8001a70:	42a0      	cmp	r0, r4
 8001a72:	d005      	beq.n	8001a80 <_malloc_r+0xa8>
 8001a74:	1a21      	subs	r1, r4, r0
 8001a76:	4630      	mov	r0, r6
 8001a78:	f000 f808 	bl	8001a8c <_sbrk_r>
 8001a7c:	3001      	adds	r0, #1
 8001a7e:	d0cf      	beq.n	8001a20 <_malloc_r+0x48>
 8001a80:	6025      	str	r5, [r4, #0]
 8001a82:	e7db      	b.n	8001a3c <_malloc_r+0x64>
 8001a84:	2000008c 	.word	0x2000008c
 8001a88:	20000090 	.word	0x20000090

08001a8c <_sbrk_r>:
 8001a8c:	b538      	push	{r3, r4, r5, lr}
 8001a8e:	4c06      	ldr	r4, [pc, #24]	; (8001aa8 <_sbrk_r+0x1c>)
 8001a90:	2300      	movs	r3, #0
 8001a92:	4605      	mov	r5, r0
 8001a94:	4608      	mov	r0, r1
 8001a96:	6023      	str	r3, [r4, #0]
 8001a98:	f7fe fcf8 	bl	800048c <_sbrk>
 8001a9c:	1c43      	adds	r3, r0, #1
 8001a9e:	d102      	bne.n	8001aa6 <_sbrk_r+0x1a>
 8001aa0:	6823      	ldr	r3, [r4, #0]
 8001aa2:	b103      	cbz	r3, 8001aa6 <_sbrk_r+0x1a>
 8001aa4:	602b      	str	r3, [r5, #0]
 8001aa6:	bd38      	pop	{r3, r4, r5, pc}
 8001aa8:	20000094 	.word	0x20000094

08001aac <_raise_r>:
 8001aac:	291f      	cmp	r1, #31
 8001aae:	b538      	push	{r3, r4, r5, lr}
 8001ab0:	4604      	mov	r4, r0
 8001ab2:	460d      	mov	r5, r1
 8001ab4:	d904      	bls.n	8001ac0 <_raise_r+0x14>
 8001ab6:	2316      	movs	r3, #22
 8001ab8:	6003      	str	r3, [r0, #0]
 8001aba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001abe:	bd38      	pop	{r3, r4, r5, pc}
 8001ac0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8001ac2:	b112      	cbz	r2, 8001aca <_raise_r+0x1e>
 8001ac4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8001ac8:	b94b      	cbnz	r3, 8001ade <_raise_r+0x32>
 8001aca:	4620      	mov	r0, r4
 8001acc:	f000 f830 	bl	8001b30 <_getpid_r>
 8001ad0:	462a      	mov	r2, r5
 8001ad2:	4601      	mov	r1, r0
 8001ad4:	4620      	mov	r0, r4
 8001ad6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001ada:	f000 b817 	b.w	8001b0c <_kill_r>
 8001ade:	2b01      	cmp	r3, #1
 8001ae0:	d00a      	beq.n	8001af8 <_raise_r+0x4c>
 8001ae2:	1c59      	adds	r1, r3, #1
 8001ae4:	d103      	bne.n	8001aee <_raise_r+0x42>
 8001ae6:	2316      	movs	r3, #22
 8001ae8:	6003      	str	r3, [r0, #0]
 8001aea:	2001      	movs	r0, #1
 8001aec:	e7e7      	b.n	8001abe <_raise_r+0x12>
 8001aee:	2400      	movs	r4, #0
 8001af0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8001af4:	4628      	mov	r0, r5
 8001af6:	4798      	blx	r3
 8001af8:	2000      	movs	r0, #0
 8001afa:	e7e0      	b.n	8001abe <_raise_r+0x12>

08001afc <raise>:
 8001afc:	4b02      	ldr	r3, [pc, #8]	; (8001b08 <raise+0xc>)
 8001afe:	4601      	mov	r1, r0
 8001b00:	6818      	ldr	r0, [r3, #0]
 8001b02:	f7ff bfd3 	b.w	8001aac <_raise_r>
 8001b06:	bf00      	nop
 8001b08:	20000000 	.word	0x20000000

08001b0c <_kill_r>:
 8001b0c:	b538      	push	{r3, r4, r5, lr}
 8001b0e:	4c07      	ldr	r4, [pc, #28]	; (8001b2c <_kill_r+0x20>)
 8001b10:	2300      	movs	r3, #0
 8001b12:	4605      	mov	r5, r0
 8001b14:	4608      	mov	r0, r1
 8001b16:	4611      	mov	r1, r2
 8001b18:	6023      	str	r3, [r4, #0]
 8001b1a:	f7fe fc9c 	bl	8000456 <_kill>
 8001b1e:	1c43      	adds	r3, r0, #1
 8001b20:	d102      	bne.n	8001b28 <_kill_r+0x1c>
 8001b22:	6823      	ldr	r3, [r4, #0]
 8001b24:	b103      	cbz	r3, 8001b28 <_kill_r+0x1c>
 8001b26:	602b      	str	r3, [r5, #0]
 8001b28:	bd38      	pop	{r3, r4, r5, pc}
 8001b2a:	bf00      	nop
 8001b2c:	20000094 	.word	0x20000094

08001b30 <_getpid_r>:
 8001b30:	f7fe bc8a 	b.w	8000448 <_getpid>

08001b34 <__malloc_lock>:
 8001b34:	4770      	bx	lr

08001b36 <__malloc_unlock>:
 8001b36:	4770      	bx	lr

08001b38 <_init>:
 8001b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b3a:	bf00      	nop
 8001b3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001b3e:	bc08      	pop	{r3}
 8001b40:	469e      	mov	lr, r3
 8001b42:	4770      	bx	lr

08001b44 <_fini>:
 8001b44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b46:	bf00      	nop
 8001b48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001b4a:	bc08      	pop	{r3}
 8001b4c:	469e      	mov	lr, r3
 8001b4e:	4770      	bx	lr
