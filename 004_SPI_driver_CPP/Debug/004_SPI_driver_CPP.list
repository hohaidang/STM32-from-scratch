
004_SPI_driver_CPP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000ef0  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080010b4  080010b4  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080010b4  080010b4  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  080010b4  080010b4  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  080010b4  080010b4  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080010b4  080010b4  000110b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080010b8  080010b8  000110b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  080010bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000034  20000064  08001120  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000098  08001120  00020098  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .debug_info   000040e5  00000000  00000000  0002008e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000bac  00000000  00000000  00024173  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000230  00000000  00000000  00024d20  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000001d8  00000000  00000000  00024f50  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00004142  00000000  00000000  00025128  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00001fb1  00000000  00000000  0002926a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0000b95b  00000000  00000000  0002b21b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00036b76  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000ad8  00000000  00000000  00036bf4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000064 	.word	0x20000064
 80001e0:	00000000 	.word	0x00000000
 80001e4:	0800109c 	.word	0x0800109c

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000068 	.word	0x20000068
 8000200:	0800109c 	.word	0x0800109c

08000204 <main>:
										 GPIO_NO_PUPD,
                                         5);
}

int main(void)
{
 8000204:	b590      	push	{r4, r7, lr}
 8000206:	b089      	sub	sp, #36	; 0x24
 8000208:	af06      	add	r7, sp, #24
                                   SPI_BUS_CONFIG_FD,
                                   SPI_SCLK_SPEED_DIV32,
                                   SPI_DFF_8BITS,
                                   SPI_CPOL_LOW,
                                   SPI_CPHA_LOW,
								   SPI_SSM_DI);
 800020a:	2030      	movs	r0, #48	; 0x30
 800020c:	f000 fe3a 	bl	8000e84 <_Znwj>
 8000210:	4603      	mov	r3, r0
 8000212:	461c      	mov	r4, r3
 8000214:	2300      	movs	r3, #0
 8000216:	9304      	str	r3, [sp, #16]
 8000218:	2300      	movs	r3, #0
 800021a:	9303      	str	r3, [sp, #12]
 800021c:	2300      	movs	r3, #0
 800021e:	9302      	str	r3, [sp, #8]
 8000220:	2300      	movs	r3, #0
 8000222:	9301      	str	r3, [sp, #4]
 8000224:	2304      	movs	r3, #4
 8000226:	9300      	str	r3, [sp, #0]
 8000228:	2301      	movs	r3, #1
 800022a:	2201      	movs	r2, #1
 800022c:	4917      	ldr	r1, [pc, #92]	; (800028c <main+0x88>)
 800022e:	4620      	mov	r0, r4
 8000230:	f000 fbdd 	bl	80009ee <_ZN11SPI_HandlerC1EP12SPI_RegDef_thhhhhhh>
    SPI1_Handler = new SPI_Handler(SPI1,
 8000234:	4b16      	ldr	r3, [pc, #88]	; (8000290 <main+0x8c>)
 8000236:	601c      	str	r4, [r3, #0]

    uint8_t tx_buffer[1] = {0xD0};
 8000238:	23d0      	movs	r3, #208	; 0xd0
 800023a:	713b      	strb	r3, [r7, #4]
    uint8_t dummyRead = 0x00;
 800023c:	2300      	movs	r3, #0
 800023e:	70fb      	strb	r3, [r7, #3]
    uint8_t dummyWrite = 0x00;
 8000240:	2300      	movs	r3, #0
 8000242:	70bb      	strb	r3, [r7, #2]
    uint8_t chipID = 0;
 8000244:	2300      	movs	r3, #0
 8000246:	707b      	strb	r3, [r7, #1]
    SPI1_Handler->SPI_SendData(tx_buffer, 1);
 8000248:	4b11      	ldr	r3, [pc, #68]	; (8000290 <main+0x8c>)
 800024a:	681b      	ldr	r3, [r3, #0]
 800024c:	1d39      	adds	r1, r7, #4
 800024e:	2201      	movs	r2, #1
 8000250:	4618      	mov	r0, r3
 8000252:	f000 fd54 	bl	8000cfe <_ZN11SPI_Handler12SPI_SendDataEPhm>
    SPI1_Handler->SPI_ReceiveData(&dummyRead, 1);
 8000256:	4b0e      	ldr	r3, [pc, #56]	; (8000290 <main+0x8c>)
 8000258:	681b      	ldr	r3, [r3, #0]
 800025a:	1cf9      	adds	r1, r7, #3
 800025c:	2201      	movs	r2, #1
 800025e:	4618      	mov	r0, r3
 8000260:	f000 fdcd 	bl	8000dfe <_ZN11SPI_Handler15SPI_ReceiveDataEPhm>
    SPI1_Handler->SPI_SendData(&dummyWrite, 1);
 8000264:	4b0a      	ldr	r3, [pc, #40]	; (8000290 <main+0x8c>)
 8000266:	681b      	ldr	r3, [r3, #0]
 8000268:	1cb9      	adds	r1, r7, #2
 800026a:	2201      	movs	r2, #1
 800026c:	4618      	mov	r0, r3
 800026e:	f000 fd46 	bl	8000cfe <_ZN11SPI_Handler12SPI_SendDataEPhm>
    SPI1_Handler->SPI_ReceiveData(&chipID, 1);
 8000272:	4b07      	ldr	r3, [pc, #28]	; (8000290 <main+0x8c>)
 8000274:	681b      	ldr	r3, [r3, #0]
 8000276:	1c79      	adds	r1, r7, #1
 8000278:	2201      	movs	r2, #1
 800027a:	4618      	mov	r0, r3
 800027c:	f000 fdbf 	bl	8000dfe <_ZN11SPI_Handler15SPI_ReceiveDataEPhm>

    return 0;
 8000280:	2300      	movs	r3, #0
}
 8000282:	4618      	mov	r0, r3
 8000284:	370c      	adds	r7, #12
 8000286:	46bd      	mov	sp, r7
 8000288:	bd90      	pop	{r4, r7, pc}
 800028a:	bf00      	nop
 800028c:	40013000 	.word	0x40013000
 8000290:	20000080 	.word	0x20000080

08000294 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000294:	b480      	push	{r7}
 8000296:	af00      	add	r7, sp, #0
	return 1;
 8000298:	2301      	movs	r3, #1
}
 800029a:	4618      	mov	r0, r3
 800029c:	46bd      	mov	sp, r7
 800029e:	bc80      	pop	{r7}
 80002a0:	4770      	bx	lr

080002a2 <_kill>:

int _kill(int pid, int sig)
{
 80002a2:	b580      	push	{r7, lr}
 80002a4:	b082      	sub	sp, #8
 80002a6:	af00      	add	r7, sp, #0
 80002a8:	6078      	str	r0, [r7, #4]
 80002aa:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80002ac:	f000 fe0c 	bl	8000ec8 <__errno>
 80002b0:	4602      	mov	r2, r0
 80002b2:	2316      	movs	r3, #22
 80002b4:	6013      	str	r3, [r2, #0]
	return -1;
 80002b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80002ba:	4618      	mov	r0, r3
 80002bc:	3708      	adds	r7, #8
 80002be:	46bd      	mov	sp, r7
 80002c0:	bd80      	pop	{r7, pc}

080002c2 <_exit>:

void _exit (int status)
{
 80002c2:	b580      	push	{r7, lr}
 80002c4:	b082      	sub	sp, #8
 80002c6:	af00      	add	r7, sp, #0
 80002c8:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80002ca:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80002ce:	6878      	ldr	r0, [r7, #4]
 80002d0:	f7ff ffe7 	bl	80002a2 <_kill>
	while (1) {}		/* Make sure we hang here */
 80002d4:	e7fe      	b.n	80002d4 <_exit+0x12>
	...

080002d8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b084      	sub	sp, #16
 80002dc:	af00      	add	r7, sp, #0
 80002de:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80002e0:	4b11      	ldr	r3, [pc, #68]	; (8000328 <_sbrk+0x50>)
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	2b00      	cmp	r3, #0
 80002e6:	d102      	bne.n	80002ee <_sbrk+0x16>
		heap_end = &end;
 80002e8:	4b0f      	ldr	r3, [pc, #60]	; (8000328 <_sbrk+0x50>)
 80002ea:	4a10      	ldr	r2, [pc, #64]	; (800032c <_sbrk+0x54>)
 80002ec:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80002ee:	4b0e      	ldr	r3, [pc, #56]	; (8000328 <_sbrk+0x50>)
 80002f0:	681b      	ldr	r3, [r3, #0]
 80002f2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80002f4:	4b0c      	ldr	r3, [pc, #48]	; (8000328 <_sbrk+0x50>)
 80002f6:	681a      	ldr	r2, [r3, #0]
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	4413      	add	r3, r2
 80002fc:	466a      	mov	r2, sp
 80002fe:	4293      	cmp	r3, r2
 8000300:	d907      	bls.n	8000312 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000302:	f000 fde1 	bl	8000ec8 <__errno>
 8000306:	4602      	mov	r2, r0
 8000308:	230c      	movs	r3, #12
 800030a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800030c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000310:	e006      	b.n	8000320 <_sbrk+0x48>
	}

	heap_end += incr;
 8000312:	4b05      	ldr	r3, [pc, #20]	; (8000328 <_sbrk+0x50>)
 8000314:	681a      	ldr	r2, [r3, #0]
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	4413      	add	r3, r2
 800031a:	4a03      	ldr	r2, [pc, #12]	; (8000328 <_sbrk+0x50>)
 800031c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800031e:	68fb      	ldr	r3, [r7, #12]
}
 8000320:	4618      	mov	r0, r3
 8000322:	3710      	adds	r7, #16
 8000324:	46bd      	mov	sp, r7
 8000326:	bd80      	pop	{r7, pc}
 8000328:	20000084 	.word	0x20000084
 800032c:	20000098 	.word	0x20000098

08000330 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000330:	480d      	ldr	r0, [pc, #52]	; (8000368 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000332:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000334:	480d      	ldr	r0, [pc, #52]	; (800036c <LoopForever+0x6>)
  ldr r1, =_edata
 8000336:	490e      	ldr	r1, [pc, #56]	; (8000370 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000338:	4a0e      	ldr	r2, [pc, #56]	; (8000374 <LoopForever+0xe>)
  movs r3, #0
 800033a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800033c:	e002      	b.n	8000344 <LoopCopyDataInit>

0800033e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800033e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000340:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000342:	3304      	adds	r3, #4

08000344 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000344:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000346:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000348:	d3f9      	bcc.n	800033e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800034a:	4a0b      	ldr	r2, [pc, #44]	; (8000378 <LoopForever+0x12>)
  ldr r4, =_ebss
 800034c:	4c0b      	ldr	r4, [pc, #44]	; (800037c <LoopForever+0x16>)
  movs r3, #0
 800034e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000350:	e001      	b.n	8000356 <LoopFillZerobss>

08000352 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000352:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000354:	3204      	adds	r2, #4

08000356 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000356:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000358:	d3fb      	bcc.n	8000352 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800035a:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 800035e:	f000 fdb9 	bl	8000ed4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000362:	f7ff ff4f 	bl	8000204 <main>

08000366 <LoopForever>:

LoopForever:
    b LoopForever
 8000366:	e7fe      	b.n	8000366 <LoopForever>
  ldr   r0, =_estack
 8000368:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800036c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000370:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000374:	080010bc 	.word	0x080010bc
  ldr r2, =_sbss
 8000378:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 800037c:	20000098 	.word	0x20000098

08000380 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000380:	e7fe      	b.n	8000380 <ADC_IRQHandler>
	...

08000384 <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t>:
#define SPI_SR_BSY                      7
#define SPI_SR_FRE                      8



inline uint8_t gpio_baseAddr_to_code(GPIO_RegDef_t *Port) {
 8000384:	b480      	push	{r7}
 8000386:	b083      	sub	sp, #12
 8000388:	af00      	add	r7, sp, #0
 800038a:	6078      	str	r0, [r7, #4]
			 (Port == GPIOC) ? 0x02 : \
			 (Port == GPIOD) ? 0x03 : \
			 (Port == GPIOE) ? 0x04 : \
			 (Port == GPIOF) ? 0x05 : \
			 (Port == GPIOG) ? 0x06 : \
			 (Port == GPIOH) ? 0x07 : 0x00 );
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	4a1a      	ldr	r2, [pc, #104]	; (80003f8 <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t+0x74>)
 8000390:	4293      	cmp	r3, r2
 8000392:	d02b      	beq.n	80003ec <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t+0x68>
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	4a19      	ldr	r2, [pc, #100]	; (80003fc <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t+0x78>)
 8000398:	4293      	cmp	r3, r2
 800039a:	d025      	beq.n	80003e8 <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t+0x64>
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	4a18      	ldr	r2, [pc, #96]	; (8000400 <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t+0x7c>)
 80003a0:	4293      	cmp	r3, r2
 80003a2:	d01f      	beq.n	80003e4 <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t+0x60>
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	4a17      	ldr	r2, [pc, #92]	; (8000404 <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t+0x80>)
 80003a8:	4293      	cmp	r3, r2
 80003aa:	d019      	beq.n	80003e0 <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t+0x5c>
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	4a16      	ldr	r2, [pc, #88]	; (8000408 <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t+0x84>)
 80003b0:	4293      	cmp	r3, r2
 80003b2:	d013      	beq.n	80003dc <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t+0x58>
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	4a15      	ldr	r2, [pc, #84]	; (800040c <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t+0x88>)
 80003b8:	4293      	cmp	r3, r2
 80003ba:	d00d      	beq.n	80003d8 <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t+0x54>
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	4a14      	ldr	r2, [pc, #80]	; (8000410 <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t+0x8c>)
 80003c0:	4293      	cmp	r3, r2
 80003c2:	d007      	beq.n	80003d4 <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t+0x50>
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	4a13      	ldr	r2, [pc, #76]	; (8000414 <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t+0x90>)
 80003c8:	4293      	cmp	r3, r2
 80003ca:	d101      	bne.n	80003d0 <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t+0x4c>
 80003cc:	2307      	movs	r3, #7
 80003ce:	e00e      	b.n	80003ee <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t+0x6a>
 80003d0:	2300      	movs	r3, #0
 80003d2:	e00c      	b.n	80003ee <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t+0x6a>
 80003d4:	2306      	movs	r3, #6
 80003d6:	e00a      	b.n	80003ee <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t+0x6a>
 80003d8:	2305      	movs	r3, #5
 80003da:	e008      	b.n	80003ee <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t+0x6a>
 80003dc:	2304      	movs	r3, #4
 80003de:	e006      	b.n	80003ee <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t+0x6a>
 80003e0:	2303      	movs	r3, #3
 80003e2:	e004      	b.n	80003ee <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t+0x6a>
 80003e4:	2302      	movs	r3, #2
 80003e6:	e002      	b.n	80003ee <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t+0x6a>
 80003e8:	2301      	movs	r3, #1
 80003ea:	e000      	b.n	80003ee <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t+0x6a>
 80003ec:	2300      	movs	r3, #0
}
 80003ee:	4618      	mov	r0, r3
 80003f0:	370c      	adds	r7, #12
 80003f2:	46bd      	mov	sp, r7
 80003f4:	bc80      	pop	{r7}
 80003f6:	4770      	bx	lr
 80003f8:	40020000 	.word	0x40020000
 80003fc:	40020400 	.word	0x40020400
 8000400:	40020800 	.word	0x40020800
 8000404:	40020c00 	.word	0x40020c00
 8000408:	40021000 	.word	0x40021000
 800040c:	40021400 	.word	0x40021400
 8000410:	40021800 	.word	0x40021800
 8000414:	40021c00 	.word	0x40021c00

08000418 <_ZN12GPIO_HandlerC1EP13GPIO_RegDef_thhhhhhh>:
/*********************************************************************
 * @class      		  - GPIO_Handler
 *
 * @brief             - Constructor, initialize GPIO, clock, IRQ, Alt Function
 **********************************************************************/
GPIO_Handler::GPIO_Handler(
 8000418:	b580      	push	{r7, lr}
 800041a:	b086      	sub	sp, #24
 800041c:	af00      	add	r7, sp, #0
 800041e:	60f8      	str	r0, [r7, #12]
 8000420:	60b9      	str	r1, [r7, #8]
 8000422:	4611      	mov	r1, r2
 8000424:	461a      	mov	r2, r3
 8000426:	460b      	mov	r3, r1
 8000428:	71fb      	strb	r3, [r7, #7]
 800042a:	4613      	mov	r3, r2
 800042c:	71bb      	strb	r3, [r7, #6]
		uint8_t GPIO_PinMode,
		uint8_t GPIO_PinSpeed,
		uint8_t GPIO_IRQ_Priority,
		uint8_t GPIO_PinOPType,
		uint8_t GPIO_PinPuPdControl,
		uint8_t GPIO_PinAltFunMode) {
 800042e:	68fb      	ldr	r3, [r7, #12]
 8000430:	461a      	mov	r2, r3
 8000432:	2300      	movs	r3, #0
 8000434:	6013      	str	r3, [r2, #0]
 8000436:	6053      	str	r3, [r2, #4]
 8000438:	6093      	str	r3, [r2, #8]
	GPIOx_.pGPIOx = ((GPIO_RegDef_t *)(GPIOx_ADDR));
 800043a:	68ba      	ldr	r2, [r7, #8]
 800043c:	68fb      	ldr	r3, [r7, #12]
 800043e:	601a      	str	r2, [r3, #0]
	GPIOx_.GPIO_PinConfig.GPIO_PinNumber = GPIO_PinNumber;
 8000440:	68fb      	ldr	r3, [r7, #12]
 8000442:	79fa      	ldrb	r2, [r7, #7]
 8000444:	711a      	strb	r2, [r3, #4]
	GPIOx_.GPIO_PinConfig.GPIO_PinMode = GPIO_PinMode;
 8000446:	68fb      	ldr	r3, [r7, #12]
 8000448:	79ba      	ldrb	r2, [r7, #6]
 800044a:	715a      	strb	r2, [r3, #5]
	GPIOx_.GPIO_PinConfig.GPIO_PinSpeed = GPIO_PinSpeed;
 800044c:	68fb      	ldr	r3, [r7, #12]
 800044e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000452:	719a      	strb	r2, [r3, #6]
	GPIOx_.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PinPuPdControl;
 8000454:	68fb      	ldr	r3, [r7, #12]
 8000456:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800045a:	71da      	strb	r2, [r3, #7]
	GPIOx_.GPIO_PinConfig.GPIO_PinOPType = GPIO_PinOPType;
 800045c:	68fb      	ldr	r3, [r7, #12]
 800045e:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8000462:	721a      	strb	r2, [r3, #8]
	GPIOx_.GPIO_PinConfig.GPIO_PinAltFunMode = GPIO_PinAltFunMode;
 8000464:	68fb      	ldr	r3, [r7, #12]
 8000466:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800046a:	725a      	strb	r2, [r3, #9]
	GPIO_PeriClockControl();
 800046c:	68f8      	ldr	r0, [r7, #12]
 800046e:	f000 f81f 	bl	80004b0 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv>
	GPIO_Init();
 8000472:	68f8      	ldr	r0, [r7, #12]
 8000474:	f000 f896 	bl	80005a4 <_ZN12GPIO_Handler9GPIO_InitEv>
	// Configure interrupt
	if(GPIO_PinMode >= GPIO_MODE_IT_FT) {
 8000478:	79bb      	ldrb	r3, [r7, #6]
 800047a:	2b03      	cmp	r3, #3
 800047c:	d912      	bls.n	80004a4 <_ZN12GPIO_HandlerC1EP13GPIO_RegDef_thhhhhhh+0x8c>
		uint8_t IRQ_number = get_irq_pinNum(GPIO_PinNumber);
 800047e:	79fb      	ldrb	r3, [r7, #7]
 8000480:	4618      	mov	r0, r3
 8000482:	f000 fa98 	bl	80009b6 <_ZL14get_irq_pinNumh>
 8000486:	4603      	mov	r3, r0
 8000488:	75fb      	strb	r3, [r7, #23]
		GPIO_IRQInterruptConfig(IRQ_number, ENABLE);
 800048a:	7dfb      	ldrb	r3, [r7, #23]
 800048c:	2201      	movs	r2, #1
 800048e:	4619      	mov	r1, r3
 8000490:	68f8      	ldr	r0, [r7, #12]
 8000492:	f000 f9dd 	bl	8000850 <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh>
		GPIO_IRQPriorityConfig(IRQ_number, GPIO_IRQ_Priority);
 8000496:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800049a:	7dfb      	ldrb	r3, [r7, #23]
 800049c:	4619      	mov	r1, r3
 800049e:	68f8      	ldr	r0, [r7, #12]
 80004a0:	f000 fa5a 	bl	8000958 <_ZN12GPIO_Handler22GPIO_IRQPriorityConfigEhh>
	}
}
 80004a4:	68fb      	ldr	r3, [r7, #12]
 80004a6:	4618      	mov	r0, r3
 80004a8:	3718      	adds	r7, #24
 80004aa:	46bd      	mov	sp, r7
 80004ac:	bd80      	pop	{r7, pc}
	...

080004b0 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv>:
GPIO_Handler::~GPIO_Handler() {
	GPIO_DeInit();
}

// peripheral clock setup
void GPIO_Handler::GPIO_PeriClockControl() {
 80004b0:	b480      	push	{r7}
 80004b2:	b083      	sub	sp, #12
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	6078      	str	r0, [r7, #4]
	if (GPIOx_.pGPIOx == GPIOA) {
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	4a30      	ldr	r2, [pc, #192]	; (8000580 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xd0>)
 80004be:	4293      	cmp	r3, r2
 80004c0:	d106      	bne.n	80004d0 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0x20>
		GPIOA_PCLK_EN();
 80004c2:	4b30      	ldr	r3, [pc, #192]	; (8000584 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xd4>)
 80004c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004c6:	4a2f      	ldr	r2, [pc, #188]	; (8000584 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xd4>)
 80004c8:	f043 0301 	orr.w	r3, r3, #1
 80004cc:	6313      	str	r3, [r2, #48]	; 0x30
	} else if (GPIOx_.pGPIOx == GPIOG) {
		GPIOG_PCLK_EN();
	} else if (GPIOx_.pGPIOx == GPIOH) {
		GPIOH_PCLK_EN();
	}
}
 80004ce:	e052      	b.n	8000576 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xc6>
	} else if (GPIOx_.pGPIOx == GPIOB) {
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	4a2c      	ldr	r2, [pc, #176]	; (8000588 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xd8>)
 80004d6:	4293      	cmp	r3, r2
 80004d8:	d106      	bne.n	80004e8 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0x38>
		GPIOB_PCLK_EN();
 80004da:	4b2a      	ldr	r3, [pc, #168]	; (8000584 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xd4>)
 80004dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004de:	4a29      	ldr	r2, [pc, #164]	; (8000584 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xd4>)
 80004e0:	f043 0302 	orr.w	r3, r3, #2
 80004e4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004e6:	e046      	b.n	8000576 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xc6>
	} else if (GPIOx_.pGPIOx == GPIOC) {
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	4a27      	ldr	r2, [pc, #156]	; (800058c <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xdc>)
 80004ee:	4293      	cmp	r3, r2
 80004f0:	d106      	bne.n	8000500 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0x50>
		GPIOC_PCLK_EN();
 80004f2:	4b24      	ldr	r3, [pc, #144]	; (8000584 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xd4>)
 80004f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004f6:	4a23      	ldr	r2, [pc, #140]	; (8000584 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xd4>)
 80004f8:	f043 0304 	orr.w	r3, r3, #4
 80004fc:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004fe:	e03a      	b.n	8000576 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xc6>
	} else if (GPIOx_.pGPIOx == GPIOD) {
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	4a22      	ldr	r2, [pc, #136]	; (8000590 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xe0>)
 8000506:	4293      	cmp	r3, r2
 8000508:	d106      	bne.n	8000518 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0x68>
		GPIOD_PCLK_EN();
 800050a:	4b1e      	ldr	r3, [pc, #120]	; (8000584 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xd4>)
 800050c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800050e:	4a1d      	ldr	r2, [pc, #116]	; (8000584 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xd4>)
 8000510:	f043 0308 	orr.w	r3, r3, #8
 8000514:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000516:	e02e      	b.n	8000576 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xc6>
	} else if (GPIOx_.pGPIOx == GPIOE) {
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	4a1d      	ldr	r2, [pc, #116]	; (8000594 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xe4>)
 800051e:	4293      	cmp	r3, r2
 8000520:	d106      	bne.n	8000530 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0x80>
		GPIOE_PCLK_EN();
 8000522:	4b18      	ldr	r3, [pc, #96]	; (8000584 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xd4>)
 8000524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000526:	4a17      	ldr	r2, [pc, #92]	; (8000584 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xd4>)
 8000528:	f043 0310 	orr.w	r3, r3, #16
 800052c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800052e:	e022      	b.n	8000576 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xc6>
	} else if (GPIOx_.pGPIOx == GPIOF) {
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	4a18      	ldr	r2, [pc, #96]	; (8000598 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xe8>)
 8000536:	4293      	cmp	r3, r2
 8000538:	d106      	bne.n	8000548 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0x98>
		GPIOF_PCLK_EN();
 800053a:	4b12      	ldr	r3, [pc, #72]	; (8000584 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xd4>)
 800053c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800053e:	4a11      	ldr	r2, [pc, #68]	; (8000584 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xd4>)
 8000540:	f043 0320 	orr.w	r3, r3, #32
 8000544:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000546:	e016      	b.n	8000576 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xc6>
	} else if (GPIOx_.pGPIOx == GPIOG) {
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	4a13      	ldr	r2, [pc, #76]	; (800059c <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xec>)
 800054e:	4293      	cmp	r3, r2
 8000550:	d106      	bne.n	8000560 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xb0>
		GPIOG_PCLK_EN();
 8000552:	4b0c      	ldr	r3, [pc, #48]	; (8000584 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xd4>)
 8000554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000556:	4a0b      	ldr	r2, [pc, #44]	; (8000584 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xd4>)
 8000558:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800055c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800055e:	e00a      	b.n	8000576 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xc6>
	} else if (GPIOx_.pGPIOx == GPIOH) {
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	4a0e      	ldr	r2, [pc, #56]	; (80005a0 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xf0>)
 8000566:	4293      	cmp	r3, r2
 8000568:	d105      	bne.n	8000576 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xc6>
		GPIOH_PCLK_EN();
 800056a:	4b06      	ldr	r3, [pc, #24]	; (8000584 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xd4>)
 800056c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800056e:	4a05      	ldr	r2, [pc, #20]	; (8000584 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xd4>)
 8000570:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000574:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000576:	bf00      	nop
 8000578:	370c      	adds	r7, #12
 800057a:	46bd      	mov	sp, r7
 800057c:	bc80      	pop	{r7}
 800057e:	4770      	bx	lr
 8000580:	40020000 	.word	0x40020000
 8000584:	40023800 	.word	0x40023800
 8000588:	40020400 	.word	0x40020400
 800058c:	40020800 	.word	0x40020800
 8000590:	40020c00 	.word	0x40020c00
 8000594:	40021000 	.word	0x40021000
 8000598:	40021400 	.word	0x40021400
 800059c:	40021800 	.word	0x40021800
 80005a0:	40021c00 	.word	0x40021c00

080005a4 <_ZN12GPIO_Handler9GPIO_InitEv>:
 *
 * @param None
 *
 * @return None
 **********************************************************************/
void GPIO_Handler::GPIO_Init() {
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b086      	sub	sp, #24
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
	uint32_t temp = 0;
 80005ac:	2300      	movs	r3, #0
 80005ae:	617b      	str	r3, [r7, #20]
	// 1. configure the mode of gpio pin
	if(GPIOx_.GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG) {
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	795b      	ldrb	r3, [r3, #5]
 80005b4:	2b03      	cmp	r3, #3
 80005b6:	d820      	bhi.n	80005fa <_ZN12GPIO_Handler9GPIO_InitEv+0x56>
		// the non interrupt mode
		temp = GPIOx_.GPIO_PinConfig.GPIO_PinMode << (2 * GPIOx_.GPIO_PinConfig.GPIO_PinNumber);
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	795b      	ldrb	r3, [r3, #5]
 80005bc:	461a      	mov	r2, r3
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	791b      	ldrb	r3, [r3, #4]
 80005c2:	005b      	lsls	r3, r3, #1
 80005c4:	fa02 f303 	lsl.w	r3, r2, r3
 80005c8:	617b      	str	r3, [r7, #20]
		GPIOx_.pGPIOx->MODER &= ~(0x3 << (2 * GPIOx_.GPIO_PinConfig.GPIO_PinNumber)); // clearing
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	681a      	ldr	r2, [r3, #0]
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	791b      	ldrb	r3, [r3, #4]
 80005d4:	005b      	lsls	r3, r3, #1
 80005d6:	2103      	movs	r1, #3
 80005d8:	fa01 f303 	lsl.w	r3, r1, r3
 80005dc:	43db      	mvns	r3, r3
 80005de:	4619      	mov	r1, r3
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	400a      	ands	r2, r1
 80005e6:	601a      	str	r2, [r3, #0]
		GPIOx_.pGPIOx->MODER |= temp;
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	6819      	ldr	r1, [r3, #0]
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	697a      	ldr	r2, [r7, #20]
 80005f4:	430a      	orrs	r2, r1
 80005f6:	601a      	str	r2, [r3, #0]
 80005f8:	e083      	b.n	8000702 <_ZN12GPIO_Handler9GPIO_InitEv+0x15e>
	}
	else {
		// interrupt mode
		if(GPIO_MODE_IT_FT == GPIOx_.GPIO_PinConfig.GPIO_PinMode) {
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	795b      	ldrb	r3, [r3, #5]
 80005fe:	2b04      	cmp	r3, #4
 8000600:	d117      	bne.n	8000632 <_ZN12GPIO_Handler9GPIO_InitEv+0x8e>
			// 1. configure the FTSR
			EXTI->FTSR |= (1 << GPIOx_.GPIO_PinConfig.GPIO_PinNumber);
 8000602:	4b90      	ldr	r3, [pc, #576]	; (8000844 <_ZN12GPIO_Handler9GPIO_InitEv+0x2a0>)
 8000604:	68db      	ldr	r3, [r3, #12]
 8000606:	687a      	ldr	r2, [r7, #4]
 8000608:	7912      	ldrb	r2, [r2, #4]
 800060a:	4611      	mov	r1, r2
 800060c:	2201      	movs	r2, #1
 800060e:	408a      	lsls	r2, r1
 8000610:	4611      	mov	r1, r2
 8000612:	4a8c      	ldr	r2, [pc, #560]	; (8000844 <_ZN12GPIO_Handler9GPIO_InitEv+0x2a0>)
 8000614:	430b      	orrs	r3, r1
 8000616:	60d3      	str	r3, [r2, #12]

			// clear the corresponding RTSR bit
			EXTI->RTSR &= ~(1 << GPIOx_.GPIO_PinConfig.GPIO_PinNumber);
 8000618:	4b8a      	ldr	r3, [pc, #552]	; (8000844 <_ZN12GPIO_Handler9GPIO_InitEv+0x2a0>)
 800061a:	689b      	ldr	r3, [r3, #8]
 800061c:	687a      	ldr	r2, [r7, #4]
 800061e:	7912      	ldrb	r2, [r2, #4]
 8000620:	4611      	mov	r1, r2
 8000622:	2201      	movs	r2, #1
 8000624:	408a      	lsls	r2, r1
 8000626:	43d2      	mvns	r2, r2
 8000628:	4611      	mov	r1, r2
 800062a:	4a86      	ldr	r2, [pc, #536]	; (8000844 <_ZN12GPIO_Handler9GPIO_InitEv+0x2a0>)
 800062c:	400b      	ands	r3, r1
 800062e:	6093      	str	r3, [r2, #8]
 8000630:	e035      	b.n	800069e <_ZN12GPIO_Handler9GPIO_InitEv+0xfa>

		}
		else if (GPIO_MODE_IT_RT == GPIOx_.GPIO_PinConfig.GPIO_PinMode) {
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	795b      	ldrb	r3, [r3, #5]
 8000636:	2b05      	cmp	r3, #5
 8000638:	d117      	bne.n	800066a <_ZN12GPIO_Handler9GPIO_InitEv+0xc6>
			// 1. configure the RTSR
			EXTI->RTSR |= (1 << GPIOx_.GPIO_PinConfig.GPIO_PinNumber);
 800063a:	4b82      	ldr	r3, [pc, #520]	; (8000844 <_ZN12GPIO_Handler9GPIO_InitEv+0x2a0>)
 800063c:	689b      	ldr	r3, [r3, #8]
 800063e:	687a      	ldr	r2, [r7, #4]
 8000640:	7912      	ldrb	r2, [r2, #4]
 8000642:	4611      	mov	r1, r2
 8000644:	2201      	movs	r2, #1
 8000646:	408a      	lsls	r2, r1
 8000648:	4611      	mov	r1, r2
 800064a:	4a7e      	ldr	r2, [pc, #504]	; (8000844 <_ZN12GPIO_Handler9GPIO_InitEv+0x2a0>)
 800064c:	430b      	orrs	r3, r1
 800064e:	6093      	str	r3, [r2, #8]

			// clear the corresponding RTSR bit
			EXTI->FTSR &= ~(1 << GPIOx_.GPIO_PinConfig.GPIO_PinNumber);
 8000650:	4b7c      	ldr	r3, [pc, #496]	; (8000844 <_ZN12GPIO_Handler9GPIO_InitEv+0x2a0>)
 8000652:	68db      	ldr	r3, [r3, #12]
 8000654:	687a      	ldr	r2, [r7, #4]
 8000656:	7912      	ldrb	r2, [r2, #4]
 8000658:	4611      	mov	r1, r2
 800065a:	2201      	movs	r2, #1
 800065c:	408a      	lsls	r2, r1
 800065e:	43d2      	mvns	r2, r2
 8000660:	4611      	mov	r1, r2
 8000662:	4a78      	ldr	r2, [pc, #480]	; (8000844 <_ZN12GPIO_Handler9GPIO_InitEv+0x2a0>)
 8000664:	400b      	ands	r3, r1
 8000666:	60d3      	str	r3, [r2, #12]
 8000668:	e019      	b.n	800069e <_ZN12GPIO_Handler9GPIO_InitEv+0xfa>
		}
		else if (GPIO_MODE_IT_RFT == GPIOx_.GPIO_PinConfig.GPIO_PinMode) {
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	795b      	ldrb	r3, [r3, #5]
 800066e:	2b06      	cmp	r3, #6
 8000670:	d115      	bne.n	800069e <_ZN12GPIO_Handler9GPIO_InitEv+0xfa>
			// 1. configure both FTSR and RTSR
			EXTI->FTSR |= (1 << GPIOx_.GPIO_PinConfig.GPIO_PinNumber);
 8000672:	4b74      	ldr	r3, [pc, #464]	; (8000844 <_ZN12GPIO_Handler9GPIO_InitEv+0x2a0>)
 8000674:	68db      	ldr	r3, [r3, #12]
 8000676:	687a      	ldr	r2, [r7, #4]
 8000678:	7912      	ldrb	r2, [r2, #4]
 800067a:	4611      	mov	r1, r2
 800067c:	2201      	movs	r2, #1
 800067e:	408a      	lsls	r2, r1
 8000680:	4611      	mov	r1, r2
 8000682:	4a70      	ldr	r2, [pc, #448]	; (8000844 <_ZN12GPIO_Handler9GPIO_InitEv+0x2a0>)
 8000684:	430b      	orrs	r3, r1
 8000686:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= (1 << GPIOx_.GPIO_PinConfig.GPIO_PinNumber);
 8000688:	4b6e      	ldr	r3, [pc, #440]	; (8000844 <_ZN12GPIO_Handler9GPIO_InitEv+0x2a0>)
 800068a:	689b      	ldr	r3, [r3, #8]
 800068c:	687a      	ldr	r2, [r7, #4]
 800068e:	7912      	ldrb	r2, [r2, #4]
 8000690:	4611      	mov	r1, r2
 8000692:	2201      	movs	r2, #1
 8000694:	408a      	lsls	r2, r1
 8000696:	4611      	mov	r1, r2
 8000698:	4a6a      	ldr	r2, [pc, #424]	; (8000844 <_ZN12GPIO_Handler9GPIO_InitEv+0x2a0>)
 800069a:	430b      	orrs	r3, r1
 800069c:	6093      	str	r3, [r2, #8]
		}

		// 2. configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 = GPIOx_.GPIO_PinConfig.GPIO_PinNumber >> 2;
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	791b      	ldrb	r3, [r3, #4]
 80006a2:	109b      	asrs	r3, r3, #2
 80006a4:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = GPIOx_.GPIO_PinConfig.GPIO_PinNumber % 4;
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	791b      	ldrb	r3, [r3, #4]
 80006aa:	f003 0303 	and.w	r3, r3, #3
 80006ae:	74bb      	strb	r3, [r7, #18]
		uint8_t portCode = gpio_baseAddr_to_code(GPIOx_.pGPIOx);
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	4618      	mov	r0, r3
 80006b6:	f7ff fe65 	bl	8000384 <_Z21gpio_baseAddr_to_codeP13GPIO_RegDef_t>
 80006ba:	4603      	mov	r3, r0
 80006bc:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 80006be:	4b62      	ldr	r3, [pc, #392]	; (8000848 <_ZN12GPIO_Handler9GPIO_InitEv+0x2a4>)
 80006c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006c2:	4a61      	ldr	r2, [pc, #388]	; (8000848 <_ZN12GPIO_Handler9GPIO_InitEv+0x2a4>)
 80006c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006c8:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[temp1] |= (portCode << (4 * temp2));
 80006ca:	4a60      	ldr	r2, [pc, #384]	; (800084c <_ZN12GPIO_Handler9GPIO_InitEv+0x2a8>)
 80006cc:	7cfb      	ldrb	r3, [r7, #19]
 80006ce:	3302      	adds	r3, #2
 80006d0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80006d4:	7c79      	ldrb	r1, [r7, #17]
 80006d6:	7cbb      	ldrb	r3, [r7, #18]
 80006d8:	009b      	lsls	r3, r3, #2
 80006da:	fa01 f303 	lsl.w	r3, r1, r3
 80006de:	4618      	mov	r0, r3
 80006e0:	495a      	ldr	r1, [pc, #360]	; (800084c <_ZN12GPIO_Handler9GPIO_InitEv+0x2a8>)
 80006e2:	7cfb      	ldrb	r3, [r7, #19]
 80006e4:	4302      	orrs	r2, r0
 80006e6:	3302      	adds	r3, #2
 80006e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		// 3. Enable the exti interrupt delivery using IMR
		EXTI->IMR |= 1 << GPIOx_.GPIO_PinConfig.GPIO_PinNumber;
 80006ec:	4b55      	ldr	r3, [pc, #340]	; (8000844 <_ZN12GPIO_Handler9GPIO_InitEv+0x2a0>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	687a      	ldr	r2, [r7, #4]
 80006f2:	7912      	ldrb	r2, [r2, #4]
 80006f4:	4611      	mov	r1, r2
 80006f6:	2201      	movs	r2, #1
 80006f8:	408a      	lsls	r2, r1
 80006fa:	4611      	mov	r1, r2
 80006fc:	4a51      	ldr	r2, [pc, #324]	; (8000844 <_ZN12GPIO_Handler9GPIO_InitEv+0x2a0>)
 80006fe:	430b      	orrs	r3, r1
 8000700:	6013      	str	r3, [r2, #0]
	}

	temp = 0;
 8000702:	2300      	movs	r3, #0
 8000704:	617b      	str	r3, [r7, #20]
	// 2. configure the speed
	temp = GPIOx_.GPIO_PinConfig.GPIO_PinSpeed << (2 * GPIOx_.GPIO_PinConfig.GPIO_PinNumber);
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	799b      	ldrb	r3, [r3, #6]
 800070a:	461a      	mov	r2, r3
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	791b      	ldrb	r3, [r3, #4]
 8000710:	005b      	lsls	r3, r3, #1
 8000712:	fa02 f303 	lsl.w	r3, r2, r3
 8000716:	617b      	str	r3, [r7, #20]
	GPIOx_.pGPIOx->OSPEEDR &= ~(0x3 << (2 * GPIOx_.GPIO_PinConfig.GPIO_PinNumber)); // clearing
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	689a      	ldr	r2, [r3, #8]
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	791b      	ldrb	r3, [r3, #4]
 8000722:	005b      	lsls	r3, r3, #1
 8000724:	2103      	movs	r1, #3
 8000726:	fa01 f303 	lsl.w	r3, r1, r3
 800072a:	43db      	mvns	r3, r3
 800072c:	4619      	mov	r1, r3
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	400a      	ands	r2, r1
 8000734:	609a      	str	r2, [r3, #8]
	GPIOx_.pGPIOx->OSPEEDR |= temp;
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	6899      	ldr	r1, [r3, #8]
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	697a      	ldr	r2, [r7, #20]
 8000742:	430a      	orrs	r2, r1
 8000744:	609a      	str	r2, [r3, #8]

	temp = 0;
 8000746:	2300      	movs	r3, #0
 8000748:	617b      	str	r3, [r7, #20]
	// 3. configure the pupd settings
	temp = GPIOx_.GPIO_PinConfig.GPIO_PinPuPdControl << (2 * GPIOx_.GPIO_PinConfig.GPIO_PinNumber);
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	79db      	ldrb	r3, [r3, #7]
 800074e:	461a      	mov	r2, r3
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	791b      	ldrb	r3, [r3, #4]
 8000754:	005b      	lsls	r3, r3, #1
 8000756:	fa02 f303 	lsl.w	r3, r2, r3
 800075a:	617b      	str	r3, [r7, #20]
	GPIOx_.pGPIOx->PUPDR &= ~(0x3 << (2 * GPIOx_.GPIO_PinConfig.GPIO_PinNumber));// clearing
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	68da      	ldr	r2, [r3, #12]
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	791b      	ldrb	r3, [r3, #4]
 8000766:	005b      	lsls	r3, r3, #1
 8000768:	2103      	movs	r1, #3
 800076a:	fa01 f303 	lsl.w	r3, r1, r3
 800076e:	43db      	mvns	r3, r3
 8000770:	4619      	mov	r1, r3
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	400a      	ands	r2, r1
 8000778:	60da      	str	r2, [r3, #12]
	GPIOx_.pGPIOx->PUPDR |= temp;
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	68d9      	ldr	r1, [r3, #12]
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	697a      	ldr	r2, [r7, #20]
 8000786:	430a      	orrs	r2, r1
 8000788:	60da      	str	r2, [r3, #12]

	temp = 0;
 800078a:	2300      	movs	r3, #0
 800078c:	617b      	str	r3, [r7, #20]
	// 4. configure the optype
	temp = GPIOx_.GPIO_PinConfig.GPIO_PinOPType << GPIOx_.GPIO_PinConfig.GPIO_PinNumber;
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	7a1b      	ldrb	r3, [r3, #8]
 8000792:	461a      	mov	r2, r3
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	791b      	ldrb	r3, [r3, #4]
 8000798:	fa02 f303 	lsl.w	r3, r2, r3
 800079c:	617b      	str	r3, [r7, #20]
	GPIOx_.pGPIOx->OTYPER &= ~(0x1 << GPIOx_.GPIO_PinConfig.GPIO_PinNumber); // clearing
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	685a      	ldr	r2, [r3, #4]
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	791b      	ldrb	r3, [r3, #4]
 80007a8:	4619      	mov	r1, r3
 80007aa:	2301      	movs	r3, #1
 80007ac:	408b      	lsls	r3, r1
 80007ae:	43db      	mvns	r3, r3
 80007b0:	4619      	mov	r1, r3
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	400a      	ands	r2, r1
 80007b8:	605a      	str	r2, [r3, #4]
	GPIOx_.pGPIOx->OTYPER |= temp;
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	6859      	ldr	r1, [r3, #4]
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	697a      	ldr	r2, [r7, #20]
 80007c6:	430a      	orrs	r2, r1
 80007c8:	605a      	str	r2, [r3, #4]

	temp = 0;
 80007ca:	2300      	movs	r3, #0
 80007cc:	617b      	str	r3, [r7, #20]
	// 5. configure the alt functionality
	if(GPIOx_.GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN) {
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	795b      	ldrb	r3, [r3, #5]
 80007d2:	2b02      	cmp	r3, #2
 80007d4:	d131      	bne.n	800083a <_ZN12GPIO_Handler9GPIO_InitEv+0x296>
		// configure alt function register
		uint8_t temp1, temp2;
		temp1 = GPIOx_.GPIO_PinConfig.GPIO_PinNumber / 8;
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	791b      	ldrb	r3, [r3, #4]
 80007da:	08db      	lsrs	r3, r3, #3
 80007dc:	743b      	strb	r3, [r7, #16]
		temp2 = GPIOx_.GPIO_PinConfig.GPIO_PinNumber % 8;
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	791b      	ldrb	r3, [r3, #4]
 80007e2:	f003 0307 	and.w	r3, r3, #7
 80007e6:	73fb      	strb	r3, [r7, #15]
		GPIOx_.pGPIOx->AFR[temp1] &= ~(0xF << (4 * temp2));
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	7c3a      	ldrb	r2, [r7, #16]
 80007ee:	3208      	adds	r2, #8
 80007f0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80007f4:	7bfb      	ldrb	r3, [r7, #15]
 80007f6:	009b      	lsls	r3, r3, #2
 80007f8:	220f      	movs	r2, #15
 80007fa:	fa02 f303 	lsl.w	r3, r2, r3
 80007fe:	43db      	mvns	r3, r3
 8000800:	4618      	mov	r0, r3
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	7c3a      	ldrb	r2, [r7, #16]
 8000808:	4001      	ands	r1, r0
 800080a:	3208      	adds	r2, #8
 800080c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		GPIOx_.pGPIOx->AFR[temp1] |= (GPIOx_.GPIO_PinConfig.GPIO_PinAltFunMode << (4 * temp2));
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	7c3a      	ldrb	r2, [r7, #16]
 8000816:	3208      	adds	r2, #8
 8000818:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	7a5b      	ldrb	r3, [r3, #9]
 8000820:	461a      	mov	r2, r3
 8000822:	7bfb      	ldrb	r3, [r7, #15]
 8000824:	009b      	lsls	r3, r3, #2
 8000826:	fa02 f303 	lsl.w	r3, r2, r3
 800082a:	4618      	mov	r0, r3
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	7c3a      	ldrb	r2, [r7, #16]
 8000832:	4301      	orrs	r1, r0
 8000834:	3208      	adds	r2, #8
 8000836:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
 800083a:	bf00      	nop
 800083c:	3718      	adds	r7, #24
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	40013c00 	.word	0x40013c00
 8000848:	40023800 	.word	0x40023800
 800084c:	40013800 	.word	0x40013800

08000850 <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh>:
 * @param[in] IRQNumber     - IRQNumber IRQ Position number
 * @param[in] EnorDi		- Enable/Disable Flag
 *
 * @return None
 */
void GPIO_Handler::GPIO_IRQInterruptConfig(const uint8_t IRQNumber, const uint8_t EnorDi) {
 8000850:	b480      	push	{r7}
 8000852:	b083      	sub	sp, #12
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
 8000858:	460b      	mov	r3, r1
 800085a:	70fb      	strb	r3, [r7, #3]
 800085c:	4613      	mov	r3, r2
 800085e:	70bb      	strb	r3, [r7, #2]
	if(EnorDi == ENABLE) {
 8000860:	78bb      	ldrb	r3, [r7, #2]
 8000862:	2b01      	cmp	r3, #1
 8000864:	d133      	bne.n	80008ce <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0x7e>
		if (IRQNumber <= 31) {
 8000866:	78fb      	ldrb	r3, [r7, #3]
 8000868:	2b1f      	cmp	r3, #31
 800086a:	d80a      	bhi.n	8000882 <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0x32>
			//	program ISER0 register
			*NVIC_ISER0 |= (1 << IRQNumber);
 800086c:	4b34      	ldr	r3, [pc, #208]	; (8000940 <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0xf0>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	78fa      	ldrb	r2, [r7, #3]
 8000872:	2101      	movs	r1, #1
 8000874:	fa01 f202 	lsl.w	r2, r1, r2
 8000878:	4611      	mov	r1, r2
 800087a:	4a31      	ldr	r2, [pc, #196]	; (8000940 <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0xf0>)
 800087c:	430b      	orrs	r3, r1
 800087e:	6013      	str	r3, [r2, #0]
			// program ICE2 register
			*NVIC_ICER2 |= (1 << (IRQNumber % 64));
		}
	}

}
 8000880:	e059      	b.n	8000936 <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0xe6>
		} else if (IRQNumber > 31 && IRQNumber < 64) {
 8000882:	78fb      	ldrb	r3, [r7, #3]
 8000884:	2b1f      	cmp	r3, #31
 8000886:	d90f      	bls.n	80008a8 <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0x58>
 8000888:	78fb      	ldrb	r3, [r7, #3]
 800088a:	2b3f      	cmp	r3, #63	; 0x3f
 800088c:	d80c      	bhi.n	80008a8 <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0x58>
			*NVIC_ISER1 |= (1 << (IRQNumber % 32));
 800088e:	4b2d      	ldr	r3, [pc, #180]	; (8000944 <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0xf4>)
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	78fa      	ldrb	r2, [r7, #3]
 8000894:	f002 021f 	and.w	r2, r2, #31
 8000898:	2101      	movs	r1, #1
 800089a:	fa01 f202 	lsl.w	r2, r1, r2
 800089e:	4611      	mov	r1, r2
 80008a0:	4a28      	ldr	r2, [pc, #160]	; (8000944 <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0xf4>)
 80008a2:	430b      	orrs	r3, r1
 80008a4:	6013      	str	r3, [r2, #0]
 80008a6:	e046      	b.n	8000936 <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0xe6>
		} else if (IRQNumber >= 64 && IRQNumber < 96) {
 80008a8:	78fb      	ldrb	r3, [r7, #3]
 80008aa:	2b3f      	cmp	r3, #63	; 0x3f
 80008ac:	d943      	bls.n	8000936 <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0xe6>
 80008ae:	78fb      	ldrb	r3, [r7, #3]
 80008b0:	2b5f      	cmp	r3, #95	; 0x5f
 80008b2:	d840      	bhi.n	8000936 <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0xe6>
			*NVIC_ISER2 |= (1 << (IRQNumber % 64));
 80008b4:	4b24      	ldr	r3, [pc, #144]	; (8000948 <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0xf8>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	78fa      	ldrb	r2, [r7, #3]
 80008ba:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80008be:	2101      	movs	r1, #1
 80008c0:	fa01 f202 	lsl.w	r2, r1, r2
 80008c4:	4611      	mov	r1, r2
 80008c6:	4a20      	ldr	r2, [pc, #128]	; (8000948 <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0xf8>)
 80008c8:	430b      	orrs	r3, r1
 80008ca:	6013      	str	r3, [r2, #0]
}
 80008cc:	e033      	b.n	8000936 <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0xe6>
		if (IRQNumber <= 31) {
 80008ce:	78fb      	ldrb	r3, [r7, #3]
 80008d0:	2b1f      	cmp	r3, #31
 80008d2:	d80a      	bhi.n	80008ea <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0x9a>
			*NVIC_ICER0 |= (1 << IRQNumber);
 80008d4:	4b1d      	ldr	r3, [pc, #116]	; (800094c <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0xfc>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	78fa      	ldrb	r2, [r7, #3]
 80008da:	2101      	movs	r1, #1
 80008dc:	fa01 f202 	lsl.w	r2, r1, r2
 80008e0:	4611      	mov	r1, r2
 80008e2:	4a1a      	ldr	r2, [pc, #104]	; (800094c <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0xfc>)
 80008e4:	430b      	orrs	r3, r1
 80008e6:	6013      	str	r3, [r2, #0]
}
 80008e8:	e025      	b.n	8000936 <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0xe6>
		} else if (IRQNumber > 31 && IRQNumber < 64) {
 80008ea:	78fb      	ldrb	r3, [r7, #3]
 80008ec:	2b1f      	cmp	r3, #31
 80008ee:	d90f      	bls.n	8000910 <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0xc0>
 80008f0:	78fb      	ldrb	r3, [r7, #3]
 80008f2:	2b3f      	cmp	r3, #63	; 0x3f
 80008f4:	d80c      	bhi.n	8000910 <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0xc0>
			*NVIC_ICER1 |= (1 << (IRQNumber % 32));
 80008f6:	4b16      	ldr	r3, [pc, #88]	; (8000950 <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0x100>)
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	78fa      	ldrb	r2, [r7, #3]
 80008fc:	f002 021f 	and.w	r2, r2, #31
 8000900:	2101      	movs	r1, #1
 8000902:	fa01 f202 	lsl.w	r2, r1, r2
 8000906:	4611      	mov	r1, r2
 8000908:	4a11      	ldr	r2, [pc, #68]	; (8000950 <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0x100>)
 800090a:	430b      	orrs	r3, r1
 800090c:	6013      	str	r3, [r2, #0]
 800090e:	e012      	b.n	8000936 <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0xe6>
		} else if (IRQNumber >= 64 && IRQNumber < 96) {
 8000910:	78fb      	ldrb	r3, [r7, #3]
 8000912:	2b3f      	cmp	r3, #63	; 0x3f
 8000914:	d90f      	bls.n	8000936 <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0xe6>
 8000916:	78fb      	ldrb	r3, [r7, #3]
 8000918:	2b5f      	cmp	r3, #95	; 0x5f
 800091a:	d80c      	bhi.n	8000936 <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0xe6>
			*NVIC_ICER2 |= (1 << (IRQNumber % 64));
 800091c:	4b0d      	ldr	r3, [pc, #52]	; (8000954 <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0x104>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	78fa      	ldrb	r2, [r7, #3]
 8000922:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000926:	2101      	movs	r1, #1
 8000928:	fa01 f202 	lsl.w	r2, r1, r2
 800092c:	4611      	mov	r1, r2
 800092e:	4a09      	ldr	r2, [pc, #36]	; (8000954 <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0x104>)
 8000930:	430b      	orrs	r3, r1
 8000932:	6013      	str	r3, [r2, #0]
}
 8000934:	e7ff      	b.n	8000936 <_ZN12GPIO_Handler23GPIO_IRQInterruptConfigEhh+0xe6>
 8000936:	bf00      	nop
 8000938:	370c      	adds	r7, #12
 800093a:	46bd      	mov	sp, r7
 800093c:	bc80      	pop	{r7}
 800093e:	4770      	bx	lr
 8000940:	e000e100 	.word	0xe000e100
 8000944:	e000e104 	.word	0xe000e104
 8000948:	e000e108 	.word	0xe000e108
 800094c:	e000e180 	.word	0xe000e180
 8000950:	e000e184 	.word	0xe000e184
 8000954:	e000e188 	.word	0xe000e188

08000958 <_ZN12GPIO_Handler22GPIO_IRQPriorityConfigEhh>:
 *
 * @param[in] IRQNumber: IRQ position for EXIT
 * @param[in] IRPriority: 0->15
 * @return None
 */
void GPIO_Handler::GPIO_IRQPriorityConfig(const uint8_t IRQNumber, const uint8_t IRQPriority) {
 8000958:	b480      	push	{r7}
 800095a:	b085      	sub	sp, #20
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
 8000960:	460b      	mov	r3, r1
 8000962:	70fb      	strb	r3, [r7, #3]
 8000964:	4613      	mov	r3, r2
 8000966:	70bb      	strb	r3, [r7, #2]
	// 1. first lets find out the ipr register
	uint8_t iprx = IRQNumber >> 2;
 8000968:	78fb      	ldrb	r3, [r7, #3]
 800096a:	109b      	asrs	r3, r3, #2
 800096c:	73fb      	strb	r3, [r7, #15]
	uint8_t iprx_section = IRQNumber % 4;
 800096e:	78fb      	ldrb	r3, [r7, #3]
 8000970:	f003 0303 	and.w	r3, r3, #3
 8000974:	73bb      	strb	r3, [r7, #14]
	uint8_t shift_amount = (8 * iprx_section) + (8 - NO_PR_BITS_IMPLEMENTED);
 8000976:	7bbb      	ldrb	r3, [r7, #14]
 8000978:	00db      	lsls	r3, r3, #3
 800097a:	b2db      	uxtb	r3, r3
 800097c:	3304      	adds	r3, #4
 800097e:	737b      	strb	r3, [r7, #13]

	*(NVIC_PR_BASE_ADDR + iprx) |= (IRQPriority << shift_amount);
 8000980:	7bfb      	ldrb	r3, [r7, #15]
 8000982:	f103 5360 	add.w	r3, r3, #939524096	; 0x38000000
 8000986:	f503 5364 	add.w	r3, r3, #14592	; 0x3900
 800098a:	009b      	lsls	r3, r3, #2
 800098c:	681a      	ldr	r2, [r3, #0]
 800098e:	78b9      	ldrb	r1, [r7, #2]
 8000990:	7b7b      	ldrb	r3, [r7, #13]
 8000992:	fa01 f303 	lsl.w	r3, r1, r3
 8000996:	4618      	mov	r0, r3
 8000998:	7bfb      	ldrb	r3, [r7, #15]
 800099a:	f103 5360 	add.w	r3, r3, #939524096	; 0x38000000
 800099e:	f503 5364 	add.w	r3, r3, #14592	; 0x3900
 80009a2:	009b      	lsls	r3, r3, #2
 80009a4:	4619      	mov	r1, r3
 80009a6:	ea42 0300 	orr.w	r3, r2, r0
 80009aa:	600b      	str	r3, [r1, #0]
}
 80009ac:	bf00      	nop
 80009ae:	3714      	adds	r7, #20
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bc80      	pop	{r7}
 80009b4:	4770      	bx	lr

080009b6 <_ZL14get_irq_pinNumh>:
    }

}


static inline uint8_t get_irq_pinNum(uint8_t PinNumber) {
 80009b6:	b480      	push	{r7}
 80009b8:	b083      	sub	sp, #12
 80009ba:	af00      	add	r7, sp, #0
 80009bc:	4603      	mov	r3, r0
 80009be:	71fb      	strb	r3, [r7, #7]
	return (PinNumber < 5) 	? PinNumber + 6 : \
		   (PinNumber < 10)	? IRQ_NO_EXTI9_5 : \
		   (PinNumber < 16) ? IRQ_NO_EXTI15_10 : 0;
 80009c0:	79fb      	ldrb	r3, [r7, #7]
 80009c2:	2b04      	cmp	r3, #4
 80009c4:	d803      	bhi.n	80009ce <_ZL14get_irq_pinNumh+0x18>
 80009c6:	79fb      	ldrb	r3, [r7, #7]
 80009c8:	3306      	adds	r3, #6
 80009ca:	b2db      	uxtb	r3, r3
 80009cc:	e00a      	b.n	80009e4 <_ZL14get_irq_pinNumh+0x2e>
 80009ce:	79fb      	ldrb	r3, [r7, #7]
 80009d0:	2b09      	cmp	r3, #9
 80009d2:	d906      	bls.n	80009e2 <_ZL14get_irq_pinNumh+0x2c>
 80009d4:	79fb      	ldrb	r3, [r7, #7]
 80009d6:	2b0f      	cmp	r3, #15
 80009d8:	d801      	bhi.n	80009de <_ZL14get_irq_pinNumh+0x28>
 80009da:	2328      	movs	r3, #40	; 0x28
 80009dc:	e002      	b.n	80009e4 <_ZL14get_irq_pinNumh+0x2e>
 80009de:	2300      	movs	r3, #0
 80009e0:	e000      	b.n	80009e4 <_ZL14get_irq_pinNumh+0x2e>
 80009e2:	2317      	movs	r3, #23
}
 80009e4:	4618      	mov	r0, r3
 80009e6:	370c      	adds	r7, #12
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bc80      	pop	{r7}
 80009ec:	4770      	bx	lr

080009ee <_ZN11SPI_HandlerC1EP12SPI_RegDef_thhhhhhh>:
/*********************************************************************
 * @class      		  - GPIO_Handler Constructor
 *
 * @brief             -
 **********************************************************************/
SPI_Handler::SPI_Handler(SPI_RegDef_t *SPIx_ADDR,
 80009ee:	b580      	push	{r7, lr}
 80009f0:	b084      	sub	sp, #16
 80009f2:	af00      	add	r7, sp, #0
 80009f4:	60f8      	str	r0, [r7, #12]
 80009f6:	60b9      	str	r1, [r7, #8]
 80009f8:	4611      	mov	r1, r2
 80009fa:	461a      	mov	r2, r3
 80009fc:	460b      	mov	r3, r1
 80009fe:	71fb      	strb	r3, [r7, #7]
 8000a00:	4613      	mov	r3, r2
 8000a02:	71bb      	strb	r3, [r7, #6]
                         uint8_t BusConfig,
                         uint8_t SclkSpeed,
                         uint8_t DFF,
                         uint8_t CPOL,
                         uint8_t CPHA,
                         uint8_t SSM) {
 8000a04:	68fb      	ldr	r3, [r7, #12]
 8000a06:	4618      	mov	r0, r3
 8000a08:	2320      	movs	r3, #32
 8000a0a:	461a      	mov	r2, r3
 8000a0c:	2100      	movs	r1, #0
 8000a0e:	f000 fa8d 	bl	8000f2c <memset>
    SPIx_.pSPIx = SPIx_ADDR;
 8000a12:	68fb      	ldr	r3, [r7, #12]
 8000a14:	68ba      	ldr	r2, [r7, #8]
 8000a16:	601a      	str	r2, [r3, #0]
    SPIx_.SPIConfig.SPI_DeviceMode = DeviceMode;
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	79fa      	ldrb	r2, [r7, #7]
 8000a1c:	711a      	strb	r2, [r3, #4]
    SPIx_.SPIConfig.SPI_BusConfig = BusConfig;
 8000a1e:	68fb      	ldr	r3, [r7, #12]
 8000a20:	79ba      	ldrb	r2, [r7, #6]
 8000a22:	715a      	strb	r2, [r3, #5]
    SPIx_.SPIConfig.SPI_SclkSpeed = SclkSpeed;
 8000a24:	68fb      	ldr	r3, [r7, #12]
 8000a26:	7e3a      	ldrb	r2, [r7, #24]
 8000a28:	719a      	strb	r2, [r3, #6]
    SPIx_.SPIConfig.SPI_DFF = DFF;
 8000a2a:	68fb      	ldr	r3, [r7, #12]
 8000a2c:	7f3a      	ldrb	r2, [r7, #28]
 8000a2e:	71da      	strb	r2, [r3, #7]
    SPIx_.SPIConfig.SPI_CPOL = CPOL;
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000a36:	721a      	strb	r2, [r3, #8]
    SPIx_.SPIConfig.SPI_CPHA = CPHA;
 8000a38:	68fb      	ldr	r3, [r7, #12]
 8000a3a:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8000a3e:	725a      	strb	r2, [r3, #9]
    SPIx_.SPIConfig.SPI_SSM = SSM;
 8000a40:	68fb      	ldr	r3, [r7, #12]
 8000a42:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8000a46:	729a      	strb	r2, [r3, #10]
    SPI_GPIOs_Init();
 8000a48:	68f8      	ldr	r0, [r7, #12]
 8000a4a:	f000 f85f 	bl	8000b0c <_ZN11SPI_Handler14SPI_GPIOs_InitEv>
    SPI_PeriClockControl();
 8000a4e:	68f8      	ldr	r0, [r7, #12]
 8000a50:	f000 f81a 	bl	8000a88 <_ZN11SPI_Handler20SPI_PeriClockControlEv>
    SPI_Init();
 8000a54:	68f8      	ldr	r0, [r7, #12]
 8000a56:	f000 f8bf 	bl	8000bd8 <_ZN11SPI_Handler8SPI_InitEv>
    SPI_SSIConfig(ENABLE);
 8000a5a:	2101      	movs	r1, #1
 8000a5c:	68f8      	ldr	r0, [r7, #12]
 8000a5e:	f000 f9af 	bl	8000dc0 <_ZN11SPI_Handler13SPI_SSIConfigEh>
    if(SPI_SSM_EN == SPIx_.SPIConfig.SPI_SSM) {
 8000a62:	68fb      	ldr	r3, [r7, #12]
 8000a64:	7a9b      	ldrb	r3, [r3, #10]
 8000a66:	2b01      	cmp	r3, #1
 8000a68:	d104      	bne.n	8000a74 <_ZN11SPI_HandlerC1EP12SPI_RegDef_thhhhhhh+0x86>
    	SPI_SSOEConfig(DISABLE);
 8000a6a:	2100      	movs	r1, #0
 8000a6c:	68f8      	ldr	r0, [r7, #12]
 8000a6e:	f000 f988 	bl	8000d82 <_ZN11SPI_Handler14SPI_SSOEConfigEh>
 8000a72:	e003      	b.n	8000a7c <_ZN11SPI_HandlerC1EP12SPI_RegDef_thhhhhhh+0x8e>
    }
    else {
    	SPI_SSOEConfig(ENABLE);
 8000a74:	2101      	movs	r1, #1
 8000a76:	68f8      	ldr	r0, [r7, #12]
 8000a78:	f000 f983 	bl	8000d82 <_ZN11SPI_Handler14SPI_SSOEConfigEh>
    }
}
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	4618      	mov	r0, r3
 8000a80:	3710      	adds	r7, #16
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
	...

08000a88 <_ZN11SPI_Handler20SPI_PeriClockControlEv>:
	SPI_DeInit();
	SPI_GPIOs_DeInit();
}

// peripheral clock setup
void SPI_Handler::SPI_PeriClockControl() {
 8000a88:	b480      	push	{r7}
 8000a8a:	b083      	sub	sp, #12
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
	if (SPI1 == SPIx_.pSPIx) {
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4a18      	ldr	r2, [pc, #96]	; (8000af8 <_ZN11SPI_Handler20SPI_PeriClockControlEv+0x70>)
 8000a96:	4293      	cmp	r3, r2
 8000a98:	d106      	bne.n	8000aa8 <_ZN11SPI_Handler20SPI_PeriClockControlEv+0x20>
		SPI1_PCLK_EN();
 8000a9a:	4b18      	ldr	r3, [pc, #96]	; (8000afc <_ZN11SPI_Handler20SPI_PeriClockControlEv+0x74>)
 8000a9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a9e:	4a17      	ldr	r2, [pc, #92]	; (8000afc <_ZN11SPI_Handler20SPI_PeriClockControlEv+0x74>)
 8000aa0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000aa4:	6453      	str	r3, [r2, #68]	; 0x44
		SPI3_PCLK_EN();
	}
	else if (SPI4 == SPIx_.pSPIx) {
		SPI4_PCLK_EN();
	}
}
 8000aa6:	e022      	b.n	8000aee <_ZN11SPI_Handler20SPI_PeriClockControlEv+0x66>
	else if (SPI2 == SPIx_.pSPIx) {
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	4a14      	ldr	r2, [pc, #80]	; (8000b00 <_ZN11SPI_Handler20SPI_PeriClockControlEv+0x78>)
 8000aae:	4293      	cmp	r3, r2
 8000ab0:	d106      	bne.n	8000ac0 <_ZN11SPI_Handler20SPI_PeriClockControlEv+0x38>
		SPI2_PCLK_EN();
 8000ab2:	4b12      	ldr	r3, [pc, #72]	; (8000afc <_ZN11SPI_Handler20SPI_PeriClockControlEv+0x74>)
 8000ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab6:	4a11      	ldr	r2, [pc, #68]	; (8000afc <_ZN11SPI_Handler20SPI_PeriClockControlEv+0x74>)
 8000ab8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000abc:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000abe:	e016      	b.n	8000aee <_ZN11SPI_Handler20SPI_PeriClockControlEv+0x66>
	else if (SPI3 == SPIx_.pSPIx) {
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	4a0f      	ldr	r2, [pc, #60]	; (8000b04 <_ZN11SPI_Handler20SPI_PeriClockControlEv+0x7c>)
 8000ac6:	4293      	cmp	r3, r2
 8000ac8:	d106      	bne.n	8000ad8 <_ZN11SPI_Handler20SPI_PeriClockControlEv+0x50>
		SPI3_PCLK_EN();
 8000aca:	4b0c      	ldr	r3, [pc, #48]	; (8000afc <_ZN11SPI_Handler20SPI_PeriClockControlEv+0x74>)
 8000acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ace:	4a0b      	ldr	r2, [pc, #44]	; (8000afc <_ZN11SPI_Handler20SPI_PeriClockControlEv+0x74>)
 8000ad0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000ad4:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000ad6:	e00a      	b.n	8000aee <_ZN11SPI_Handler20SPI_PeriClockControlEv+0x66>
	else if (SPI4 == SPIx_.pSPIx) {
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	4a0a      	ldr	r2, [pc, #40]	; (8000b08 <_ZN11SPI_Handler20SPI_PeriClockControlEv+0x80>)
 8000ade:	4293      	cmp	r3, r2
 8000ae0:	d105      	bne.n	8000aee <_ZN11SPI_Handler20SPI_PeriClockControlEv+0x66>
		SPI4_PCLK_EN();
 8000ae2:	4b06      	ldr	r3, [pc, #24]	; (8000afc <_ZN11SPI_Handler20SPI_PeriClockControlEv+0x74>)
 8000ae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ae6:	4a05      	ldr	r2, [pc, #20]	; (8000afc <_ZN11SPI_Handler20SPI_PeriClockControlEv+0x74>)
 8000ae8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000aec:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000aee:	bf00      	nop
 8000af0:	370c      	adds	r7, #12
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bc80      	pop	{r7}
 8000af6:	4770      	bx	lr
 8000af8:	40013000 	.word	0x40013000
 8000afc:	40023800 	.word	0x40023800
 8000b00:	40003800 	.word	0x40003800
 8000b04:	40003c00 	.word	0x40003c00
 8000b08:	40013400 	.word	0x40013400

08000b0c <_ZN11SPI_Handler14SPI_GPIOs_InitEv>:
 *
 * @param None
 *
 * @return None
 **********************************************************************/
void SPI_Handler::SPI_GPIOs_Init() {
 8000b0c:	b590      	push	{r4, r7, lr}
 8000b0e:	b089      	sub	sp, #36	; 0x24
 8000b10:	af06      	add	r7, sp, #24
 8000b12:	6078      	str	r0, [r7, #4]
							GPIO_MODE_ALTFN,
							GPIO_SPEED_HIGH,
							IRQ_Prio_NO_15,
							GPIO_OP_TYPE_PP,
							GPIO_NO_PUPD,
							5);
 8000b14:	200c      	movs	r0, #12
 8000b16:	f000 f9b5 	bl	8000e84 <_Znwj>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	461c      	mov	r4, r3
 8000b1e:	2305      	movs	r3, #5
 8000b20:	9304      	str	r3, [sp, #16]
 8000b22:	2300      	movs	r3, #0
 8000b24:	9303      	str	r3, [sp, #12]
 8000b26:	2300      	movs	r3, #0
 8000b28:	9302      	str	r3, [sp, #8]
 8000b2a:	230f      	movs	r3, #15
 8000b2c:	9301      	str	r3, [sp, #4]
 8000b2e:	2303      	movs	r3, #3
 8000b30:	9300      	str	r3, [sp, #0]
 8000b32:	2302      	movs	r3, #2
 8000b34:	2205      	movs	r2, #5
 8000b36:	4927      	ldr	r1, [pc, #156]	; (8000bd4 <_ZN11SPI_Handler14SPI_GPIOs_InitEv+0xc8>)
 8000b38:	4620      	mov	r0, r4
 8000b3a:	f7ff fc6d 	bl	8000418 <_ZN12GPIO_HandlerC1EP13GPIO_RegDef_thhhhhhh>
	SPI_Sck = new GPIO_Handler(GPIOA,
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	621c      	str	r4, [r3, #32]
							GPIO_MODE_ALTFN,
							GPIO_SPEED_HIGH,
							IRQ_Prio_NO_15,
							GPIO_OP_TYPE_PP,
							GPIO_NO_PUPD,
							5);
 8000b42:	200c      	movs	r0, #12
 8000b44:	f000 f99e 	bl	8000e84 <_Znwj>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	461c      	mov	r4, r3
 8000b4c:	2305      	movs	r3, #5
 8000b4e:	9304      	str	r3, [sp, #16]
 8000b50:	2300      	movs	r3, #0
 8000b52:	9303      	str	r3, [sp, #12]
 8000b54:	2300      	movs	r3, #0
 8000b56:	9302      	str	r3, [sp, #8]
 8000b58:	230f      	movs	r3, #15
 8000b5a:	9301      	str	r3, [sp, #4]
 8000b5c:	2303      	movs	r3, #3
 8000b5e:	9300      	str	r3, [sp, #0]
 8000b60:	2302      	movs	r3, #2
 8000b62:	2207      	movs	r2, #7
 8000b64:	491b      	ldr	r1, [pc, #108]	; (8000bd4 <_ZN11SPI_Handler14SPI_GPIOs_InitEv+0xc8>)
 8000b66:	4620      	mov	r0, r4
 8000b68:	f7ff fc56 	bl	8000418 <_ZN12GPIO_HandlerC1EP13GPIO_RegDef_thhhhhhh>
	SPI_MOSI = new GPIO_Handler(GPIOA,
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	625c      	str	r4, [r3, #36]	; 0x24
							GPIO_MODE_ALTFN,
							GPIO_SPEED_HIGH,
							IRQ_Prio_NO_15,
							GPIO_OP_TYPE_PP,
							GPIO_NO_PUPD,
							5);
 8000b70:	200c      	movs	r0, #12
 8000b72:	f000 f987 	bl	8000e84 <_Znwj>
 8000b76:	4603      	mov	r3, r0
 8000b78:	461c      	mov	r4, r3
 8000b7a:	2305      	movs	r3, #5
 8000b7c:	9304      	str	r3, [sp, #16]
 8000b7e:	2300      	movs	r3, #0
 8000b80:	9303      	str	r3, [sp, #12]
 8000b82:	2300      	movs	r3, #0
 8000b84:	9302      	str	r3, [sp, #8]
 8000b86:	230f      	movs	r3, #15
 8000b88:	9301      	str	r3, [sp, #4]
 8000b8a:	2303      	movs	r3, #3
 8000b8c:	9300      	str	r3, [sp, #0]
 8000b8e:	2302      	movs	r3, #2
 8000b90:	2206      	movs	r2, #6
 8000b92:	4910      	ldr	r1, [pc, #64]	; (8000bd4 <_ZN11SPI_Handler14SPI_GPIOs_InitEv+0xc8>)
 8000b94:	4620      	mov	r0, r4
 8000b96:	f7ff fc3f 	bl	8000418 <_ZN12GPIO_HandlerC1EP13GPIO_RegDef_thhhhhhh>
	SPI_MISO = new GPIO_Handler(GPIOA,
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	629c      	str	r4, [r3, #40]	; 0x28
							GPIO_MODE_ALTFN,
							GPIO_SPEED_HIGH,
							IRQ_Prio_NO_15,
							GPIO_OP_TYPE_PP,
							GPIO_NO_PUPD,
							5);
 8000b9e:	200c      	movs	r0, #12
 8000ba0:	f000 f970 	bl	8000e84 <_Znwj>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	461c      	mov	r4, r3
 8000ba8:	2305      	movs	r3, #5
 8000baa:	9304      	str	r3, [sp, #16]
 8000bac:	2300      	movs	r3, #0
 8000bae:	9303      	str	r3, [sp, #12]
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	9302      	str	r3, [sp, #8]
 8000bb4:	230f      	movs	r3, #15
 8000bb6:	9301      	str	r3, [sp, #4]
 8000bb8:	2303      	movs	r3, #3
 8000bba:	9300      	str	r3, [sp, #0]
 8000bbc:	2302      	movs	r3, #2
 8000bbe:	2204      	movs	r2, #4
 8000bc0:	4904      	ldr	r1, [pc, #16]	; (8000bd4 <_ZN11SPI_Handler14SPI_GPIOs_InitEv+0xc8>)
 8000bc2:	4620      	mov	r0, r4
 8000bc4:	f7ff fc28 	bl	8000418 <_ZN12GPIO_HandlerC1EP13GPIO_RegDef_thhhhhhh>
	SPI_NSS = new GPIO_Handler(GPIOA,
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	62dc      	str	r4, [r3, #44]	; 0x2c
}
 8000bcc:	bf00      	nop
 8000bce:	370c      	adds	r7, #12
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd90      	pop	{r4, r7, pc}
 8000bd4:	40020000 	.word	0x40020000

08000bd8 <_ZN11SPI_Handler8SPI_InitEv>:
 *
 * @param None
 *
 * @return None
 **********************************************************************/
void SPI_Handler::SPI_Init() {
 8000bd8:	b480      	push	{r7}
 8000bda:	b085      	sub	sp, #20
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
    // Lets configure the SPI_CR1 register
    uint32_t tempReg = 0;
 8000be0:	2300      	movs	r3, #0
 8000be2:	60fb      	str	r3, [r7, #12]

    // 1. configure the device mode
    tempReg |= SPIx_.SPIConfig.SPI_DeviceMode << SPI_CR1_MSTR;
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	791b      	ldrb	r3, [r3, #4]
 8000be8:	009b      	lsls	r3, r3, #2
 8000bea:	461a      	mov	r2, r3
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	4313      	orrs	r3, r2
 8000bf0:	60fb      	str	r3, [r7, #12]
    // 2. configure the bus config
    if(SPI_BUS_CONFIG_FD == SPIx_.SPIConfig.SPI_BusConfig) {
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	795b      	ldrb	r3, [r3, #5]
 8000bf6:	2b01      	cmp	r3, #1
 8000bf8:	d104      	bne.n	8000c04 <_ZN11SPI_Handler8SPI_InitEv+0x2c>
        // bidi mode should be cleared
        tempReg &= ~(1 << SPI_CR1_BIDIMODE);
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000c00:	60fb      	str	r3, [r7, #12]
 8000c02:	e018      	b.n	8000c36 <_ZN11SPI_Handler8SPI_InitEv+0x5e>
    }
    else if(SPI_BUS_CONFIG_HD == SPIx_.SPIConfig.SPI_BusConfig) {
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	795b      	ldrb	r3, [r3, #5]
 8000c08:	2b02      	cmp	r3, #2
 8000c0a:	d108      	bne.n	8000c1e <_ZN11SPI_Handler8SPI_InitEv+0x46>
        // bidi mode should be set
        tempReg |= (1 << SPI_CR1_BIDIMODE);
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c12:	60fb      	str	r3, [r7, #12]
        // bidioe mode should be set
        tempReg |= (1 << SPI_CR1_BIDIOE);
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c1a:	60fb      	str	r3, [r7, #12]
 8000c1c:	e00b      	b.n	8000c36 <_ZN11SPI_Handler8SPI_InitEv+0x5e>
    }
    else if(SPI_BUS_CONFIG_SIMPLEX_RXONLY == SPIx_.SPIConfig.SPI_BusConfig) {
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	795b      	ldrb	r3, [r3, #5]
 8000c22:	2b03      	cmp	r3, #3
 8000c24:	d107      	bne.n	8000c36 <_ZN11SPI_Handler8SPI_InitEv+0x5e>
        // bidi mode should be cleared, for active SCLK, because SLCK is only activate when MOSI is activate
        tempReg &= ~(1 << SPI_CR1_BIDIMODE);
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000c2c:	60fb      	str	r3, [r7, #12]
        // RXONLY should be set
        tempReg |= (1 << SPI_CR1_RXONLY);
 8000c2e:	68fb      	ldr	r3, [r7, #12]
 8000c30:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c34:	60fb      	str	r3, [r7, #12]
    }

    // 3. configure for clock speed
    tempReg |= (SPIx_.SPIConfig.SPI_SclkSpeed << SPI_CR1_BR);
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	799b      	ldrb	r3, [r3, #6]
 8000c3a:	00db      	lsls	r3, r3, #3
 8000c3c:	461a      	mov	r2, r3
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	4313      	orrs	r3, r2
 8000c42:	60fb      	str	r3, [r7, #12]

    // 4. configure for data format
    tempReg |= (SPIx_.SPIConfig.SPI_DFF << SPI_CR1_DFF);
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	79db      	ldrb	r3, [r3, #7]
 8000c48:	02db      	lsls	r3, r3, #11
 8000c4a:	461a      	mov	r2, r3
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	4313      	orrs	r3, r2
 8000c50:	60fb      	str	r3, [r7, #12]

    // 5. configure CPOL
    tempReg |= (SPIx_.SPIConfig.SPI_CPOL << SPI_CR1_CPOL);
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	7a1b      	ldrb	r3, [r3, #8]
 8000c56:	005b      	lsls	r3, r3, #1
 8000c58:	461a      	mov	r2, r3
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	4313      	orrs	r3, r2
 8000c5e:	60fb      	str	r3, [r7, #12]

    // 6. configure CPOA
    tempReg |= (SPIx_.SPIConfig.SPI_CPHA << SPI_CR1_CPHA);
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	7a5b      	ldrb	r3, [r3, #9]
 8000c64:	461a      	mov	r2, r3
 8000c66:	68fb      	ldr	r3, [r7, #12]
 8000c68:	4313      	orrs	r3, r2
 8000c6a:	60fb      	str	r3, [r7, #12]

    tempReg |= (SPIx_.SPIConfig.SPI_SSM << SPI_CR1_SSM);
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	7a9b      	ldrb	r3, [r3, #10]
 8000c70:	025b      	lsls	r3, r3, #9
 8000c72:	461a      	mov	r2, r3
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	4313      	orrs	r3, r2
 8000c78:	60fb      	str	r3, [r7, #12]

    SPIx_.pSPIx->CR1 = tempReg;
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	68fa      	ldr	r2, [r7, #12]
 8000c80:	601a      	str	r2, [r3, #0]
}
 8000c82:	bf00      	nop
 8000c84:	3714      	adds	r7, #20
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bc80      	pop	{r7}
 8000c8a:	4770      	bx	lr

08000c8c <_ZN11SPI_Handler21SPI_PeripheralControlEh>:
 *
 * @param None
 *
 * @return None
 **********************************************************************/
void SPI_Handler::SPI_PeripheralControl(uint8_t EnOrDi) {
 8000c8c:	b480      	push	{r7}
 8000c8e:	b083      	sub	sp, #12
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
 8000c94:	460b      	mov	r3, r1
 8000c96:	70fb      	strb	r3, [r7, #3]
    if(ENABLE == EnOrDi) {
 8000c98:	78fb      	ldrb	r3, [r7, #3]
 8000c9a:	2b01      	cmp	r3, #1
 8000c9c:	d108      	bne.n	8000cb0 <_ZN11SPI_Handler21SPI_PeripheralControlEh+0x24>
        SPIx_.pSPIx->CR1 |= (1 << SPI_CR1_SPE);
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	681a      	ldr	r2, [r3, #0]
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000cac:	601a      	str	r2, [r3, #0]
    }
    else {
        SPIx_.pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
    }
}
 8000cae:	e007      	b.n	8000cc0 <_ZN11SPI_Handler21SPI_PeripheralControlEh+0x34>
        SPIx_.pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	681a      	ldr	r2, [r3, #0]
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000cbe:	601a      	str	r2, [r3, #0]
}
 8000cc0:	bf00      	nop
 8000cc2:	370c      	adds	r7, #12
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bc80      	pop	{r7}
 8000cc8:	4770      	bx	lr

08000cca <_ZN11SPI_Handler17SPI_GetFlagStatusEh>:
 *
 * @param None
 *
 * @return None
 **********************************************************************/
uint8_t SPI_Handler::SPI_GetFlagStatus(uint8_t FlagName) {
 8000cca:	b480      	push	{r7}
 8000ccc:	b083      	sub	sp, #12
 8000cce:	af00      	add	r7, sp, #0
 8000cd0:	6078      	str	r0, [r7, #4]
 8000cd2:	460b      	mov	r3, r1
 8000cd4:	70fb      	strb	r3, [r7, #3]
    if(SPIx_.pSPIx->SR & FlagName) {
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	689a      	ldr	r2, [r3, #8]
 8000cdc:	78fb      	ldrb	r3, [r7, #3]
 8000cde:	4013      	ands	r3, r2
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	bf14      	ite	ne
 8000ce4:	2301      	movne	r3, #1
 8000ce6:	2300      	moveq	r3, #0
 8000ce8:	b2db      	uxtb	r3, r3
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d001      	beq.n	8000cf2 <_ZN11SPI_Handler17SPI_GetFlagStatusEh+0x28>
        return FLAG_SET;
 8000cee:	2301      	movs	r3, #1
 8000cf0:	e000      	b.n	8000cf4 <_ZN11SPI_Handler17SPI_GetFlagStatusEh+0x2a>
    }
    return FLAG_RESET;
 8000cf2:	2300      	movs	r3, #0
}
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	370c      	adds	r7, #12
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bc80      	pop	{r7}
 8000cfc:	4770      	bx	lr

08000cfe <_ZN11SPI_Handler12SPI_SendDataEPhm>:
 * @param None
 * @Node              - This is blocking call
 *
 * @return None
 **********************************************************************/
void SPI_Handler::SPI_SendData(uint8_t *pTxBuffer, uint32_t Len) {
 8000cfe:	b580      	push	{r7, lr}
 8000d00:	b084      	sub	sp, #16
 8000d02:	af00      	add	r7, sp, #0
 8000d04:	60f8      	str	r0, [r7, #12]
 8000d06:	60b9      	str	r1, [r7, #8]
 8000d08:	607a      	str	r2, [r7, #4]
	SPI_PeripheralControl(ENABLE);
 8000d0a:	2101      	movs	r1, #1
 8000d0c:	68f8      	ldr	r0, [r7, #12]
 8000d0e:	f7ff ffbd 	bl	8000c8c <_ZN11SPI_Handler21SPI_PeripheralControlEh>
    while(Len > 0) {
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d030      	beq.n	8000d7a <_ZN11SPI_Handler12SPI_SendDataEPhm+0x7c>
        // 1. wait util tx buffer empty
        while(SPI_GetFlagStatus(SPI_TXE_FLAG) == FLAG_RESET);
 8000d18:	2102      	movs	r1, #2
 8000d1a:	68f8      	ldr	r0, [r7, #12]
 8000d1c:	f7ff ffd5 	bl	8000cca <_ZN11SPI_Handler17SPI_GetFlagStatusEh>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	bf0c      	ite	eq
 8000d26:	2301      	moveq	r3, #1
 8000d28:	2300      	movne	r3, #0
 8000d2a:	b2db      	uxtb	r3, r3
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d000      	beq.n	8000d32 <_ZN11SPI_Handler12SPI_SendDataEPhm+0x34>
 8000d30:	e7f2      	b.n	8000d18 <_ZN11SPI_Handler12SPI_SendDataEPhm+0x1a>

        // 2. check the DFF bit in CR1
        if(SPIx_.pSPIx->CR1 & (1 << SPI_CR1_DFF)) {
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	bf14      	ite	ne
 8000d40:	2301      	movne	r3, #1
 8000d42:	2300      	moveq	r3, #0
 8000d44:	b2db      	uxtb	r3, r3
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d00b      	beq.n	8000d62 <_ZN11SPI_Handler12SPI_SendDataEPhm+0x64>
            // 16 BIT DFF
            // 1. load the data into the DR
            SPIx_.pSPIx->DR = *((uint16_t *) pTxBuffer);
 8000d4a:	68bb      	ldr	r3, [r7, #8]
 8000d4c:	881a      	ldrh	r2, [r3, #0]
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	60da      	str	r2, [r3, #12]
            Len -= 2;
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	3b02      	subs	r3, #2
 8000d58:	607b      	str	r3, [r7, #4]
            (uint16_t *)pTxBuffer++;
 8000d5a:	68bb      	ldr	r3, [r7, #8]
 8000d5c:	3301      	adds	r3, #1
 8000d5e:	60bb      	str	r3, [r7, #8]
 8000d60:	e7d7      	b.n	8000d12 <_ZN11SPI_Handler12SPI_SendDataEPhm+0x14>
        }
        else {
            SPIx_.pSPIx->DR = *pTxBuffer;
 8000d62:	68bb      	ldr	r3, [r7, #8]
 8000d64:	781a      	ldrb	r2, [r3, #0]
 8000d66:	68fb      	ldr	r3, [r7, #12]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	60da      	str	r2, [r3, #12]
            Len -= 1;
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	3b01      	subs	r3, #1
 8000d70:	607b      	str	r3, [r7, #4]
            pTxBuffer++;
 8000d72:	68bb      	ldr	r3, [r7, #8]
 8000d74:	3301      	adds	r3, #1
 8000d76:	60bb      	str	r3, [r7, #8]
    while(Len > 0) {
 8000d78:	e7cb      	b.n	8000d12 <_ZN11SPI_Handler12SPI_SendDataEPhm+0x14>
        }
    }
}
 8000d7a:	bf00      	nop
 8000d7c:	3710      	adds	r7, #16
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}

08000d82 <_ZN11SPI_Handler14SPI_SSOEConfigEh>:
//	answer = SPIx_.pSPIx->DR;
//	return answer;
//}


void SPI_Handler::SPI_SSOEConfig(uint8_t EnOrDi) {
 8000d82:	b480      	push	{r7}
 8000d84:	b083      	sub	sp, #12
 8000d86:	af00      	add	r7, sp, #0
 8000d88:	6078      	str	r0, [r7, #4]
 8000d8a:	460b      	mov	r3, r1
 8000d8c:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE) {
 8000d8e:	78fb      	ldrb	r3, [r7, #3]
 8000d90:	2b01      	cmp	r3, #1
 8000d92:	d108      	bne.n	8000da6 <_ZN11SPI_Handler14SPI_SSOEConfigEh+0x24>
		SPIx_.pSPIx->CR2 |= (1 << SPI_CR2_SSOE);
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	685a      	ldr	r2, [r3, #4]
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	f042 0204 	orr.w	r2, r2, #4
 8000da2:	605a      	str	r2, [r3, #4]
	}
	else {
		SPIx_.pSPIx->CR2 &= ~(1 << SPI_CR2_SSOE);
	}
}
 8000da4:	e007      	b.n	8000db6 <_ZN11SPI_Handler14SPI_SSOEConfigEh+0x34>
		SPIx_.pSPIx->CR2 &= ~(1 << SPI_CR2_SSOE);
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	685a      	ldr	r2, [r3, #4]
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	f022 0204 	bic.w	r2, r2, #4
 8000db4:	605a      	str	r2, [r3, #4]
}
 8000db6:	bf00      	nop
 8000db8:	370c      	adds	r7, #12
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bc80      	pop	{r7}
 8000dbe:	4770      	bx	lr

08000dc0 <_ZN11SPI_Handler13SPI_SSIConfigEh>:
 *
 * @Note              -

 */
void SPI_Handler::SPI_SSIConfig(uint8_t EnOrDi)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b083      	sub	sp, #12
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
 8000dc8:	460b      	mov	r3, r1
 8000dca:	70fb      	strb	r3, [r7, #3]
    if(EnOrDi == ENABLE)
 8000dcc:	78fb      	ldrb	r3, [r7, #3]
 8000dce:	2b01      	cmp	r3, #1
 8000dd0:	d108      	bne.n	8000de4 <_ZN11SPI_Handler13SPI_SSIConfigEh+0x24>
    {
        SPIx_.pSPIx->CR1 |=  (1 << SPI_CR1_SSI);
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	681a      	ldr	r2, [r3, #0]
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000de0:	601a      	str	r2, [r3, #0]
    }else
    {
        SPIx_.pSPIx->CR1 &=  ~(1 << SPI_CR1_SSI);
    }
}
 8000de2:	e007      	b.n	8000df4 <_ZN11SPI_Handler13SPI_SSIConfigEh+0x34>
        SPIx_.pSPIx->CR1 &=  ~(1 << SPI_CR1_SSI);
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	681a      	ldr	r2, [r3, #0]
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000df2:	601a      	str	r2, [r3, #0]
}
 8000df4:	bf00      	nop
 8000df6:	370c      	adds	r7, #12
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bc80      	pop	{r7}
 8000dfc:	4770      	bx	lr

08000dfe <_ZN11SPI_Handler15SPI_ReceiveDataEPhm>:


void SPI_Handler::SPI_ReceiveData(uint8_t *pRxBuffer, uint32_t Len)
{
 8000dfe:	b580      	push	{r7, lr}
 8000e00:	b084      	sub	sp, #16
 8000e02:	af00      	add	r7, sp, #0
 8000e04:	60f8      	str	r0, [r7, #12]
 8000e06:	60b9      	str	r1, [r7, #8]
 8000e08:	607a      	str	r2, [r7, #4]
	while(Len > 0)
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d035      	beq.n	8000e7c <_ZN11SPI_Handler15SPI_ReceiveDataEPhm+0x7e>
		{
			//1. wait until RXNE is set
			while(SPI_GetFlagStatus(SPI_RXNE_FLAG)  == (uint8_t)FLAG_RESET );
 8000e10:	2101      	movs	r1, #1
 8000e12:	68f8      	ldr	r0, [r7, #12]
 8000e14:	f7ff ff59 	bl	8000cca <_ZN11SPI_Handler17SPI_GetFlagStatusEh>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	bf0c      	ite	eq
 8000e1e:	2301      	moveq	r3, #1
 8000e20:	2300      	movne	r3, #0
 8000e22:	b2db      	uxtb	r3, r3
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d000      	beq.n	8000e2a <_ZN11SPI_Handler15SPI_ReceiveDataEPhm+0x2c>
 8000e28:	e7f2      	b.n	8000e10 <_ZN11SPI_Handler15SPI_ReceiveDataEPhm+0x12>

			//2. check the DFF bit in CR1
			if( (SPIx_.pSPIx->CR1 & ( 1 << SPI_CR1_DFF) ) )
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	bf14      	ite	ne
 8000e38:	2301      	movne	r3, #1
 8000e3a:	2300      	moveq	r3, #0
 8000e3c:	b2db      	uxtb	r3, r3
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d00f      	beq.n	8000e62 <_ZN11SPI_Handler15SPI_ReceiveDataEPhm+0x64>
			{
				//16 bit DFF
				//1. load the data from DR to Rxbuffer address
				 *((uint16_t*)pRxBuffer) = SPIx_.pSPIx->DR ;
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	68da      	ldr	r2, [r3, #12]
 8000e48:	68bb      	ldr	r3, [r7, #8]
 8000e4a:	b292      	uxth	r2, r2
 8000e4c:	801a      	strh	r2, [r3, #0]
				Len--;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	3b01      	subs	r3, #1
 8000e52:	607b      	str	r3, [r7, #4]
				Len--;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	3b01      	subs	r3, #1
 8000e58:	607b      	str	r3, [r7, #4]
				(uint16_t*)pRxBuffer++;
 8000e5a:	68bb      	ldr	r3, [r7, #8]
 8000e5c:	3301      	adds	r3, #1
 8000e5e:	60bb      	str	r3, [r7, #8]
 8000e60:	e7d3      	b.n	8000e0a <_ZN11SPI_Handler15SPI_ReceiveDataEPhm+0xc>
			}else
			{
				//8 bit DFF
				*(pRxBuffer) = SPIx_.pSPIx->DR ;
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	68da      	ldr	r2, [r3, #12]
 8000e68:	68bb      	ldr	r3, [r7, #8]
 8000e6a:	b2d2      	uxtb	r2, r2
 8000e6c:	701a      	strb	r2, [r3, #0]
				Len--;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	3b01      	subs	r3, #1
 8000e72:	607b      	str	r3, [r7, #4]
				pRxBuffer++;
 8000e74:	68bb      	ldr	r3, [r7, #8]
 8000e76:	3301      	adds	r3, #1
 8000e78:	60bb      	str	r3, [r7, #8]
	while(Len > 0)
 8000e7a:	e7c6      	b.n	8000e0a <_ZN11SPI_Handler15SPI_ReceiveDataEPhm+0xc>
			}
		}

}
 8000e7c:	bf00      	nop
 8000e7e:	3710      	adds	r7, #16
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}

08000e84 <_Znwj>:
 8000e84:	b510      	push	{r4, lr}
 8000e86:	2800      	cmp	r0, #0
 8000e88:	bf14      	ite	ne
 8000e8a:	4604      	movne	r4, r0
 8000e8c:	2401      	moveq	r4, #1
 8000e8e:	4620      	mov	r0, r4
 8000e90:	f000 f844 	bl	8000f1c <malloc>
 8000e94:	b930      	cbnz	r0, 8000ea4 <_Znwj+0x20>
 8000e96:	f000 f807 	bl	8000ea8 <_ZSt15get_new_handlerv>
 8000e9a:	b908      	cbnz	r0, 8000ea0 <_Znwj+0x1c>
 8000e9c:	f000 f80c 	bl	8000eb8 <abort>
 8000ea0:	4780      	blx	r0
 8000ea2:	e7f4      	b.n	8000e8e <_Znwj+0xa>
 8000ea4:	bd10      	pop	{r4, pc}
	...

08000ea8 <_ZSt15get_new_handlerv>:
 8000ea8:	4b02      	ldr	r3, [pc, #8]	; (8000eb4 <_ZSt15get_new_handlerv+0xc>)
 8000eaa:	6818      	ldr	r0, [r3, #0]
 8000eac:	f3bf 8f5b 	dmb	ish
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop
 8000eb4:	20000088 	.word	0x20000088

08000eb8 <abort>:
 8000eb8:	b508      	push	{r3, lr}
 8000eba:	2006      	movs	r0, #6
 8000ebc:	f000 f8d0 	bl	8001060 <raise>
 8000ec0:	2001      	movs	r0, #1
 8000ec2:	f7ff f9fe 	bl	80002c2 <_exit>
	...

08000ec8 <__errno>:
 8000ec8:	4b01      	ldr	r3, [pc, #4]	; (8000ed0 <__errno+0x8>)
 8000eca:	6818      	ldr	r0, [r3, #0]
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop
 8000ed0:	20000000 	.word	0x20000000

08000ed4 <__libc_init_array>:
 8000ed4:	b570      	push	{r4, r5, r6, lr}
 8000ed6:	4e0d      	ldr	r6, [pc, #52]	; (8000f0c <__libc_init_array+0x38>)
 8000ed8:	4c0d      	ldr	r4, [pc, #52]	; (8000f10 <__libc_init_array+0x3c>)
 8000eda:	1ba4      	subs	r4, r4, r6
 8000edc:	10a4      	asrs	r4, r4, #2
 8000ede:	2500      	movs	r5, #0
 8000ee0:	42a5      	cmp	r5, r4
 8000ee2:	d109      	bne.n	8000ef8 <__libc_init_array+0x24>
 8000ee4:	4e0b      	ldr	r6, [pc, #44]	; (8000f14 <__libc_init_array+0x40>)
 8000ee6:	4c0c      	ldr	r4, [pc, #48]	; (8000f18 <__libc_init_array+0x44>)
 8000ee8:	f000 f8d8 	bl	800109c <_init>
 8000eec:	1ba4      	subs	r4, r4, r6
 8000eee:	10a4      	asrs	r4, r4, #2
 8000ef0:	2500      	movs	r5, #0
 8000ef2:	42a5      	cmp	r5, r4
 8000ef4:	d105      	bne.n	8000f02 <__libc_init_array+0x2e>
 8000ef6:	bd70      	pop	{r4, r5, r6, pc}
 8000ef8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000efc:	4798      	blx	r3
 8000efe:	3501      	adds	r5, #1
 8000f00:	e7ee      	b.n	8000ee0 <__libc_init_array+0xc>
 8000f02:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000f06:	4798      	blx	r3
 8000f08:	3501      	adds	r5, #1
 8000f0a:	e7f2      	b.n	8000ef2 <__libc_init_array+0x1e>
 8000f0c:	080010b4 	.word	0x080010b4
 8000f10:	080010b4 	.word	0x080010b4
 8000f14:	080010b4 	.word	0x080010b4
 8000f18:	080010b8 	.word	0x080010b8

08000f1c <malloc>:
 8000f1c:	4b02      	ldr	r3, [pc, #8]	; (8000f28 <malloc+0xc>)
 8000f1e:	4601      	mov	r1, r0
 8000f20:	6818      	ldr	r0, [r3, #0]
 8000f22:	f000 b80b 	b.w	8000f3c <_malloc_r>
 8000f26:	bf00      	nop
 8000f28:	20000000 	.word	0x20000000

08000f2c <memset>:
 8000f2c:	4402      	add	r2, r0
 8000f2e:	4603      	mov	r3, r0
 8000f30:	4293      	cmp	r3, r2
 8000f32:	d100      	bne.n	8000f36 <memset+0xa>
 8000f34:	4770      	bx	lr
 8000f36:	f803 1b01 	strb.w	r1, [r3], #1
 8000f3a:	e7f9      	b.n	8000f30 <memset+0x4>

08000f3c <_malloc_r>:
 8000f3c:	b570      	push	{r4, r5, r6, lr}
 8000f3e:	1ccd      	adds	r5, r1, #3
 8000f40:	f025 0503 	bic.w	r5, r5, #3
 8000f44:	3508      	adds	r5, #8
 8000f46:	2d0c      	cmp	r5, #12
 8000f48:	bf38      	it	cc
 8000f4a:	250c      	movcc	r5, #12
 8000f4c:	2d00      	cmp	r5, #0
 8000f4e:	4606      	mov	r6, r0
 8000f50:	db01      	blt.n	8000f56 <_malloc_r+0x1a>
 8000f52:	42a9      	cmp	r1, r5
 8000f54:	d903      	bls.n	8000f5e <_malloc_r+0x22>
 8000f56:	230c      	movs	r3, #12
 8000f58:	6033      	str	r3, [r6, #0]
 8000f5a:	2000      	movs	r0, #0
 8000f5c:	bd70      	pop	{r4, r5, r6, pc}
 8000f5e:	f000 f89b 	bl	8001098 <__malloc_lock>
 8000f62:	4a21      	ldr	r2, [pc, #132]	; (8000fe8 <_malloc_r+0xac>)
 8000f64:	6814      	ldr	r4, [r2, #0]
 8000f66:	4621      	mov	r1, r4
 8000f68:	b991      	cbnz	r1, 8000f90 <_malloc_r+0x54>
 8000f6a:	4c20      	ldr	r4, [pc, #128]	; (8000fec <_malloc_r+0xb0>)
 8000f6c:	6823      	ldr	r3, [r4, #0]
 8000f6e:	b91b      	cbnz	r3, 8000f78 <_malloc_r+0x3c>
 8000f70:	4630      	mov	r0, r6
 8000f72:	f000 f83d 	bl	8000ff0 <_sbrk_r>
 8000f76:	6020      	str	r0, [r4, #0]
 8000f78:	4629      	mov	r1, r5
 8000f7a:	4630      	mov	r0, r6
 8000f7c:	f000 f838 	bl	8000ff0 <_sbrk_r>
 8000f80:	1c43      	adds	r3, r0, #1
 8000f82:	d124      	bne.n	8000fce <_malloc_r+0x92>
 8000f84:	230c      	movs	r3, #12
 8000f86:	6033      	str	r3, [r6, #0]
 8000f88:	4630      	mov	r0, r6
 8000f8a:	f000 f886 	bl	800109a <__malloc_unlock>
 8000f8e:	e7e4      	b.n	8000f5a <_malloc_r+0x1e>
 8000f90:	680b      	ldr	r3, [r1, #0]
 8000f92:	1b5b      	subs	r3, r3, r5
 8000f94:	d418      	bmi.n	8000fc8 <_malloc_r+0x8c>
 8000f96:	2b0b      	cmp	r3, #11
 8000f98:	d90f      	bls.n	8000fba <_malloc_r+0x7e>
 8000f9a:	600b      	str	r3, [r1, #0]
 8000f9c:	50cd      	str	r5, [r1, r3]
 8000f9e:	18cc      	adds	r4, r1, r3
 8000fa0:	4630      	mov	r0, r6
 8000fa2:	f000 f87a 	bl	800109a <__malloc_unlock>
 8000fa6:	f104 000b 	add.w	r0, r4, #11
 8000faa:	1d23      	adds	r3, r4, #4
 8000fac:	f020 0007 	bic.w	r0, r0, #7
 8000fb0:	1ac3      	subs	r3, r0, r3
 8000fb2:	d0d3      	beq.n	8000f5c <_malloc_r+0x20>
 8000fb4:	425a      	negs	r2, r3
 8000fb6:	50e2      	str	r2, [r4, r3]
 8000fb8:	e7d0      	b.n	8000f5c <_malloc_r+0x20>
 8000fba:	428c      	cmp	r4, r1
 8000fbc:	684b      	ldr	r3, [r1, #4]
 8000fbe:	bf16      	itet	ne
 8000fc0:	6063      	strne	r3, [r4, #4]
 8000fc2:	6013      	streq	r3, [r2, #0]
 8000fc4:	460c      	movne	r4, r1
 8000fc6:	e7eb      	b.n	8000fa0 <_malloc_r+0x64>
 8000fc8:	460c      	mov	r4, r1
 8000fca:	6849      	ldr	r1, [r1, #4]
 8000fcc:	e7cc      	b.n	8000f68 <_malloc_r+0x2c>
 8000fce:	1cc4      	adds	r4, r0, #3
 8000fd0:	f024 0403 	bic.w	r4, r4, #3
 8000fd4:	42a0      	cmp	r0, r4
 8000fd6:	d005      	beq.n	8000fe4 <_malloc_r+0xa8>
 8000fd8:	1a21      	subs	r1, r4, r0
 8000fda:	4630      	mov	r0, r6
 8000fdc:	f000 f808 	bl	8000ff0 <_sbrk_r>
 8000fe0:	3001      	adds	r0, #1
 8000fe2:	d0cf      	beq.n	8000f84 <_malloc_r+0x48>
 8000fe4:	6025      	str	r5, [r4, #0]
 8000fe6:	e7db      	b.n	8000fa0 <_malloc_r+0x64>
 8000fe8:	2000008c 	.word	0x2000008c
 8000fec:	20000090 	.word	0x20000090

08000ff0 <_sbrk_r>:
 8000ff0:	b538      	push	{r3, r4, r5, lr}
 8000ff2:	4c06      	ldr	r4, [pc, #24]	; (800100c <_sbrk_r+0x1c>)
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	4605      	mov	r5, r0
 8000ff8:	4608      	mov	r0, r1
 8000ffa:	6023      	str	r3, [r4, #0]
 8000ffc:	f7ff f96c 	bl	80002d8 <_sbrk>
 8001000:	1c43      	adds	r3, r0, #1
 8001002:	d102      	bne.n	800100a <_sbrk_r+0x1a>
 8001004:	6823      	ldr	r3, [r4, #0]
 8001006:	b103      	cbz	r3, 800100a <_sbrk_r+0x1a>
 8001008:	602b      	str	r3, [r5, #0]
 800100a:	bd38      	pop	{r3, r4, r5, pc}
 800100c:	20000094 	.word	0x20000094

08001010 <_raise_r>:
 8001010:	291f      	cmp	r1, #31
 8001012:	b538      	push	{r3, r4, r5, lr}
 8001014:	4604      	mov	r4, r0
 8001016:	460d      	mov	r5, r1
 8001018:	d904      	bls.n	8001024 <_raise_r+0x14>
 800101a:	2316      	movs	r3, #22
 800101c:	6003      	str	r3, [r0, #0]
 800101e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001022:	bd38      	pop	{r3, r4, r5, pc}
 8001024:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8001026:	b112      	cbz	r2, 800102e <_raise_r+0x1e>
 8001028:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800102c:	b94b      	cbnz	r3, 8001042 <_raise_r+0x32>
 800102e:	4620      	mov	r0, r4
 8001030:	f000 f830 	bl	8001094 <_getpid_r>
 8001034:	462a      	mov	r2, r5
 8001036:	4601      	mov	r1, r0
 8001038:	4620      	mov	r0, r4
 800103a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800103e:	f000 b817 	b.w	8001070 <_kill_r>
 8001042:	2b01      	cmp	r3, #1
 8001044:	d00a      	beq.n	800105c <_raise_r+0x4c>
 8001046:	1c59      	adds	r1, r3, #1
 8001048:	d103      	bne.n	8001052 <_raise_r+0x42>
 800104a:	2316      	movs	r3, #22
 800104c:	6003      	str	r3, [r0, #0]
 800104e:	2001      	movs	r0, #1
 8001050:	e7e7      	b.n	8001022 <_raise_r+0x12>
 8001052:	2400      	movs	r4, #0
 8001054:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8001058:	4628      	mov	r0, r5
 800105a:	4798      	blx	r3
 800105c:	2000      	movs	r0, #0
 800105e:	e7e0      	b.n	8001022 <_raise_r+0x12>

08001060 <raise>:
 8001060:	4b02      	ldr	r3, [pc, #8]	; (800106c <raise+0xc>)
 8001062:	4601      	mov	r1, r0
 8001064:	6818      	ldr	r0, [r3, #0]
 8001066:	f7ff bfd3 	b.w	8001010 <_raise_r>
 800106a:	bf00      	nop
 800106c:	20000000 	.word	0x20000000

08001070 <_kill_r>:
 8001070:	b538      	push	{r3, r4, r5, lr}
 8001072:	4c07      	ldr	r4, [pc, #28]	; (8001090 <_kill_r+0x20>)
 8001074:	2300      	movs	r3, #0
 8001076:	4605      	mov	r5, r0
 8001078:	4608      	mov	r0, r1
 800107a:	4611      	mov	r1, r2
 800107c:	6023      	str	r3, [r4, #0]
 800107e:	f7ff f910 	bl	80002a2 <_kill>
 8001082:	1c43      	adds	r3, r0, #1
 8001084:	d102      	bne.n	800108c <_kill_r+0x1c>
 8001086:	6823      	ldr	r3, [r4, #0]
 8001088:	b103      	cbz	r3, 800108c <_kill_r+0x1c>
 800108a:	602b      	str	r3, [r5, #0]
 800108c:	bd38      	pop	{r3, r4, r5, pc}
 800108e:	bf00      	nop
 8001090:	20000094 	.word	0x20000094

08001094 <_getpid_r>:
 8001094:	f7ff b8fe 	b.w	8000294 <_getpid>

08001098 <__malloc_lock>:
 8001098:	4770      	bx	lr

0800109a <__malloc_unlock>:
 800109a:	4770      	bx	lr

0800109c <_init>:
 800109c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800109e:	bf00      	nop
 80010a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80010a2:	bc08      	pop	{r3}
 80010a4:	469e      	mov	lr, r3
 80010a6:	4770      	bx	lr

080010a8 <_fini>:
 80010a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010aa:	bf00      	nop
 80010ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80010ae:	bc08      	pop	{r3}
 80010b0:	469e      	mov	lr, r3
 80010b2:	4770      	bx	lr
