/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * <h2><center>&copy; Copyright (c) 2019 STMicroelectronics.
 * All rights reserved.</center></h2>
 *
 * This software component is licensed by ST under BSD 3-Clause license,
 * the "License"; You may not use this file except in compliance with the
 * License. You may obtain a copy of the License at:
 *                        opensource.org/licenses/BSD-3-Clause
 *
 ******************************************************************************
 */

#include "../driver/inc/stm32f4xx.h"
#include <memory>
#include "temp.h"
using namespace std;

//SPI1, AHB/APB2
//PA5 - SPI1_SCK
//PA6 - SPI1_MISO
//PA7 - SPI1_MOSI
//PA4 - slave select
// Alternate function 5
SPI_Handler *SPI1_Handler;

void user_delay_us(uint32_t period, void *intf_ptr)
{
	for(int i = 0; i < 250000; ++i) {

	}
}

int8_t user_spi_read (uint8_t reg_addr, uint8_t *reg_data, uint32_t len, void *intf_ptr) {
    SPI1_Handler->SPI_SendDataIT(static_cast<const uint8_t *>(&reg_addr), 1);
    SPI1_Handler->SPI_ReceiveDataIT(reg_data, len);
    return 0;
}

int8_t user_spi_write(uint8_t reg_addr, const uint8_t *reg_data, uint32_t len, void *intf_ptr) {
	SPI1_Handler->SPI_SendDataIT(static_cast<const uint8_t *>(&reg_addr), 1);
	SPI1_Handler->SPI_SendDataIT(reg_data, len);
	return 0;
}

int main(void)
{
    // HSI Clock 16 Mhz
	SPI1_Handler = new SPI_Handler(SPI1,
										SPI_DEVICE_MODE_MASTER,
										SPI_BUS_CONFIG_FD,
										SPI_SCLK_SPEED_DIV32,
										SPI_DFF_8BITS,
										SPI_CPOL_LOW,
										SPI_CPHA_LOW,
										SPI_SSM_DI);

	SPI1_Handler->SPI_IRQInterruptConfig(IRQ_NO_SPI1, ENABLE);
	SPI1_Handler->SPI_IRQPriorityConfig(IRQ_NO_SPI1, IRQ_Prio_NO_15);


	// read chip ID
	uint8_t chipIdAddr = 0xD0;
	uint8_t chipID = 0;
	SPI1_Handler->SPI_SendDataIT(&chipIdAddr, 1);
	SPI1_Handler->SPI_ReceiveDataIT(&chipID, 1);

	// configure normal mode and oversampling
//	uint8_t ctrl_means = 0x93;
	uint8_t ctrl_means_reg_W[2] = {0x74, 0x93};
	uint8_t ctrl_means_reg_R = 0xF4;
	uint8_t ctrl_read = 0;
	// write
//	SPI1_Handler->SPI_SendDataIT(&ctrl_means_reg_W, 1);
//	SPI1_Handler->SPI_SendDataIT(&ctrl_means, 1);
	SPI1_Handler->SPI_SendDataIT(&ctrl_means_reg_W[0], 2);

	// read
	SPI1_Handler->SPI_SendDataIT(&ctrl_means_reg_R, 1);
	SPI1_Handler->SPI_ReceiveDataIT(&ctrl_read, 1);

	// read status
	uint8_t status_addr = 0xF3;
	uint8_t statusData = 0x00;
	SPI1_Handler->SPI_SendDataIT(&status_addr, 1);
	SPI1_Handler->SPI_ReceiveDataIT(&statusData, 1);

	user_delay_us(1, 0);


	// read sensordata
	uint8_t sensor_addr = 0xF7;
	uint8_t sensorData[8] = {};
	SPI1_Handler->SPI_SendDataIT(&sensor_addr, 1);
	SPI1_Handler->SPI_ReceiveDataIT(&sensorData[0], 8);
	// Test thu thanh ghi ctl_mean, configure truoc sau do moi configure sensor mode

//	struct bme280_data testSensorData = {};
//	rslt = bme280_get_sensor_data(BME280_ALL, &testSensorData, &dev);
	static_cast<void>(rslt);


    while(SPI1_Handler->SPI_GetFlagStatus(SPI_BSY_FLAG));
    SPI1_Handler->SPI_PeripheralControl(DISABLE);
    while(1);
    return 0;
}

extern "C" {
    void SPI1_IRQHandler(void) {
        // handle the interrupt
        SPI1_Handler->SPI_IRQHandling();
    }
}
