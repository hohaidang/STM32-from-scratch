/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * <h2><center>&copy; Copyright (c) 2019 STMicroelectronics.
 * All rights reserved.</center></h2>
 *
 * This software component is licensed by ST under BSD 3-Clause license,
 * the "License"; You may not use this file except in compliance with the
 * License. You may obtain a copy of the License at:
 *                        opensource.org/licenses/BSD-3-Clause
 *
 ******************************************************************************
 */

#include "../driver/inc/stm32f4xx.h"
#include <memory>

#include "temp.h"
using namespace std;

//SPI1, AHB/APB2
//PA5 - SPI1_SCK
//PA6 - SPI1_MISO
//PA7 - SPI1_MOSI
//PA4 - slave select
// Alternate function 5

uint8_t rx_buffer[3];
SPI_Handler *SPI1_Handler;

void delay() {
	for(int i = 0; i < 2500000; ++i) {

	}
}

int8_t user_spi_read (uint8_t reg_addr, uint8_t *reg_data, uint32_t len, void *intf_ptr) {
    SPI1_Handler->SPI_SendDataIT((const uint8_t *)&reg_addr, len);
    SPI1_Handler->SPI_ReceiveDataIT(reg_data, len);
    return 0;
}

int main(void)
{
    // HSI Clock 16 Mhz
	SPI1_Handler = new SPI_Handler(SPI1,
										SPI_DEVICE_MODE_MASTER,
										SPI_BUS_CONFIG_FD,
										SPI_SCLK_SPEED_DIV32,
										SPI_DFF_8BITS,
										SPI_CPOL_LOW,
										SPI_CPHA_LOW,
										SPI_SSM_DI);

	SPI1_Handler->SPI_IRQInterruptConfig(IRQ_NO_SPI1, ENABLE);
	SPI1_Handler->SPI_IRQPriorityConfig(IRQ_NO_SPI1, IRQ_Prio_NO_15);


	struct bme280_dev dev;
	int8_t rslt = BME280_OK;

	/* Sensor_0 interface over SPI with native chip select line */
	uint8_t dev_addr = 0;

	dev.intf_ptr = &dev_addr;
	dev.intf = BME280_SPI_INTF;
	dev.read = user_spi_read;
//	dev.write = &user_spi_write;
//	dev.delay_ms = user_delay_ms;


	rslt = bme280_init(&dev);
	static_cast<void>(rslt);

    uint8_t tx_buffer[1] = {0xD0};
    uint8_t chipID = 0;


    SPI1_Handler->SPI_SendDataIT(tx_buffer, 1);

    SPI1_Handler->SPI_ReceiveDataIT(&chipID, 1);

    while(SPI1_Handler->SPI_GetFlagStatus(SPI_BSY_FLAG));
    SPI1_Handler->SPI_PeripheralControl(DISABLE);
    while(1);
    return 0;
}

extern "C" {
    void SPI1_IRQHandler(void) {
        // handle the interrupt
        SPI1_Handler->SPI_IRQHandling();
    }
}
