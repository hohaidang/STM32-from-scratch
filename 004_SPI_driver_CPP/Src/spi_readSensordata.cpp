/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * <h2><center>&copy; Copyright (c) 2019 STMicroelectronics.
 * All rights reserved.</center></h2>
 *
 * This software component is licensed by ST under BSD 3-Clause license,
 * the "License"; You may not use this file except in compliance with the
 * License. You may obtain a copy of the License at:
 *                        opensource.org/licenses/BSD-3-Clause
 *
 ******************************************************************************
 */

#include "../driver/inc/stm32f4xx.h"
#include <memory>
using namespace std;

//SPI1, AHB/APB2
//PA5 - SPI1_SCK
//PA6 - SPI1_MISO
//PA7 - SPI1_MOSI
//PA4 - slave select
// Alternate function 5

uint8_t rx_buffer[3];
unique_ptr<SPI_Handler> SPI1_Handler;

int main(void)
{
    // HSI Clock 16 Mhz
	SPI1_Handler.reset((new SPI_Handler(SPI1,
										SPI_DEVICE_MODE_MASTER,
										SPI_BUS_CONFIG_FD,
										SPI_SCLK_SPEED_DIV32,
										SPI_DFF_8BITS,
										SPI_CPOL_LOW,
										SPI_CPHA_LOW,
										SPI_SSM_DI)));

	SPI1_Handler->SPI_IRQInterruptConfig(IRQ_NO_SPI1, ENABLE);
	SPI1_Handler->SPI_IRQPriorityConfig(IRQ_NO_SPI1, IRQ_Prio_NO_15);

	SPI1_Handler->SPI_ReceiveDataIT(&rx_buffer[0], 1);

    uint8_t tx_buffer[1] = {0xD0};
    uint8_t dummyRead = 0x00;
    uint8_t dummyWrite = 0x00;
    uint8_t chipID = 0;
    SPI1_Handler->SPI_SendData(tx_buffer, 1);
    SPI1_Handler->SPI_ReceiveData(&dummyRead, 1);
    SPI1_Handler->SPI_SendData(&dummyWrite, 1);
    SPI1_Handler->SPI_ReceiveData(&chipID, 1);

    return 0;
}

extern "C" {
    void SPI1_IRQHandler(void) {
        // handle the interrupt
        SPI1_Handler->SPI_IRQHandling();
    }
}
