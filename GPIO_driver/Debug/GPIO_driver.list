
GPIO_driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000450  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000614  0800061c  0001061c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000614  08000614  0001061c  2**0
                  CONTENTS
  4 .ARM          00000000  08000614  08000614  0001061c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000614  0800061c  0001061c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000614  08000614  00010614  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000618  08000618  00010618  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  0001061c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  0800061c  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  0800061c  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  0001061c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000c60  00000000  00000000  00010646  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000364  00000000  00000000  000112a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000000c0  00000000  00000000  00011610  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000098  00000000  00000000  000116d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000013f0  00000000  00000000  00011768  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00000976  00000000  00000000  00012b58  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000051c7  00000000  00000000  000134ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00018695  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000244  00000000  00000000  00018710  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000000 	.word	0x20000000
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080005fc 	.word	0x080005fc

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000004 	.word	0x20000004
 8000200:	080005fc 	.word	0x080005fc

08000204 <main>:
 */

#include "../driver/inc/stm32f446re_gpio_driver.h"

int main(void)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	b088      	sub	sp, #32
 8000208:	af04      	add	r7, sp, #16
	GPIO_Handler LED2 = GPIO_Handler(GPIO_PIN_NO_5, GPIO_MODE_OUT, GPIO_SPEED_LOW, GPIO_OP_TYPE_PP);
 800020a:	1d38      	adds	r0, r7, #4
 800020c:	2301      	movs	r3, #1
 800020e:	9302      	str	r3, [sp, #8]
 8000210:	2300      	movs	r3, #0
 8000212:	9301      	str	r3, [sp, #4]
 8000214:	2300      	movs	r3, #0
 8000216:	9300      	str	r3, [sp, #0]
 8000218:	2300      	movs	r3, #0
 800021a:	2201      	movs	r2, #1
 800021c:	2105      	movs	r1, #5
 800021e:	f000 f830 	bl	8000282 <_ZN12GPIO_HandlerC1Ehhhhhh>
	LED2.GPIO_WriteToOutputPin(0);
 8000222:	1d3b      	adds	r3, r7, #4
 8000224:	2100      	movs	r1, #0
 8000226:	4618      	mov	r0, r3
 8000228:	f000 f999 	bl	800055e <_ZN12GPIO_Handler21GPIO_WriteToOutputPinEh>
	for(;;);
 800022c:	e7fe      	b.n	800022c <main+0x28>
	...

08000230 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000230:	480d      	ldr	r0, [pc, #52]	; (8000268 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000232:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000234:	480d      	ldr	r0, [pc, #52]	; (800026c <LoopForever+0x6>)
  ldr r1, =_edata
 8000236:	490e      	ldr	r1, [pc, #56]	; (8000270 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000238:	4a0e      	ldr	r2, [pc, #56]	; (8000274 <LoopForever+0xe>)
  movs r3, #0
 800023a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800023c:	e002      	b.n	8000244 <LoopCopyDataInit>

0800023e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800023e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000240:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000242:	3304      	adds	r3, #4

08000244 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000244:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000246:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000248:	d3f9      	bcc.n	800023e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800024a:	4a0b      	ldr	r2, [pc, #44]	; (8000278 <LoopForever+0x12>)
  ldr r4, =_ebss
 800024c:	4c0b      	ldr	r4, [pc, #44]	; (800027c <LoopForever+0x16>)
  movs r3, #0
 800024e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000250:	e001      	b.n	8000256 <LoopFillZerobss>

08000252 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000252:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000254:	3204      	adds	r2, #4

08000256 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000256:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000258:	d3fb      	bcc.n	8000252 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800025a:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 800025e:	f000 f9a9 	bl	80005b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000262:	f7ff ffcf 	bl	8000204 <main>

08000266 <LoopForever>:

LoopForever:
    b LoopForever
 8000266:	e7fe      	b.n	8000266 <LoopForever>
  ldr   r0, =_estack
 8000268:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800026c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000270:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000274:	0800061c 	.word	0x0800061c
  ldr r2, =_sbss
 8000278:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800027c:	2000001c 	.word	0x2000001c

08000280 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000280:	e7fe      	b.n	8000280 <ADC_IRQHandler>

08000282 <_ZN12GPIO_HandlerC1Ehhhhhh>:



#include "../inc/stm32f446re_gpio_driver.h"

GPIO_Handler::GPIO_Handler(
 8000282:	b580      	push	{r7, lr}
 8000284:	b082      	sub	sp, #8
 8000286:	af00      	add	r7, sp, #0
 8000288:	6078      	str	r0, [r7, #4]
 800028a:	4608      	mov	r0, r1
 800028c:	4611      	mov	r1, r2
 800028e:	461a      	mov	r2, r3
 8000290:	4603      	mov	r3, r0
 8000292:	70fb      	strb	r3, [r7, #3]
 8000294:	460b      	mov	r3, r1
 8000296:	70bb      	strb	r3, [r7, #2]
 8000298:	4613      	mov	r3, r2
 800029a:	707b      	strb	r3, [r7, #1]
		uint8_t GPIO_PinMode,
		uint8_t GPIO_PinSpeed,
		uint8_t GPIO_PinOPType,
		uint8_t GPIO_PinPuPdControl,
		uint8_t GPIO_PinAltFunMode) {
	GPIOx_.GPIO_PinConfig.GPIO_PinNumber = GPIO_PinNumber;
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	78fa      	ldrb	r2, [r7, #3]
 80002a0:	711a      	strb	r2, [r3, #4]
	GPIOx_.GPIO_PinConfig.GPIO_PinMode = GPIO_PinMode;
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	78ba      	ldrb	r2, [r7, #2]
 80002a6:	715a      	strb	r2, [r3, #5]
	GPIOx_.GPIO_PinConfig.GPIO_PinSpeed = GPIO_PinSpeed;
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	787a      	ldrb	r2, [r7, #1]
 80002ac:	719a      	strb	r2, [r3, #6]
	GPIOx_.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PinPuPdControl;
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	7d3a      	ldrb	r2, [r7, #20]
 80002b2:	71da      	strb	r2, [r3, #7]
	GPIOx_.GPIO_PinConfig.GPIO_PinOPType = GPIO_PinOPType;
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	7c3a      	ldrb	r2, [r7, #16]
 80002b8:	721a      	strb	r2, [r3, #8]
	GPIOx_.GPIO_PinConfig.GPIO_PinAltFunMode = GPIO_PinAltFunMode;
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	7e3a      	ldrb	r2, [r7, #24]
 80002be:	725a      	strb	r2, [r3, #9]
	GPIO_PeriClockControl();
 80002c0:	6878      	ldr	r0, [r7, #4]
 80002c2:	f000 f809 	bl	80002d8 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv>
	GPIO_Init();
 80002c6:	6878      	ldr	r0, [r7, #4]
 80002c8:	f000 f880 	bl	80003cc <_ZN12GPIO_Handler9GPIO_InitEv>
}
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	4618      	mov	r0, r3
 80002d0:	3708      	adds	r7, #8
 80002d2:	46bd      	mov	sp, r7
 80002d4:	bd80      	pop	{r7, pc}
	...

080002d8 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv>:
GPIO_Handler::~GPIO_Handler() {
	GPIO_DeInit();
}

// peripheral clock setup
void GPIO_Handler::GPIO_PeriClockControl() {
 80002d8:	b480      	push	{r7}
 80002da:	b083      	sub	sp, #12
 80002dc:	af00      	add	r7, sp, #0
 80002de:	6078      	str	r0, [r7, #4]
	if (GPIOx_.pGPIOx == GPIOA) {
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	4a30      	ldr	r2, [pc, #192]	; (80003a8 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xd0>)
 80002e6:	4293      	cmp	r3, r2
 80002e8:	d106      	bne.n	80002f8 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0x20>
		GPIOA_PCLK_EN();
 80002ea:	4b30      	ldr	r3, [pc, #192]	; (80003ac <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xd4>)
 80002ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002ee:	4a2f      	ldr	r2, [pc, #188]	; (80003ac <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xd4>)
 80002f0:	f043 0301 	orr.w	r3, r3, #1
 80002f4:	6313      	str	r3, [r2, #48]	; 0x30
	} else if (GPIOx_.pGPIOx == GPIOG) {
		GPIOG_PCLK_EN();
	} else if (GPIOx_.pGPIOx == GPIOH) {
		GPIOH_PCLK_EN();
	}
}
 80002f6:	e052      	b.n	800039e <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xc6>
	} else if (GPIOx_.pGPIOx == GPIOB) {
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	4a2c      	ldr	r2, [pc, #176]	; (80003b0 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xd8>)
 80002fe:	4293      	cmp	r3, r2
 8000300:	d106      	bne.n	8000310 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0x38>
		GPIOB_PCLK_EN();
 8000302:	4b2a      	ldr	r3, [pc, #168]	; (80003ac <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xd4>)
 8000304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000306:	4a29      	ldr	r2, [pc, #164]	; (80003ac <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xd4>)
 8000308:	f043 0302 	orr.w	r3, r3, #2
 800030c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800030e:	e046      	b.n	800039e <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xc6>
	} else if (GPIOx_.pGPIOx == GPIOC) {
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	681b      	ldr	r3, [r3, #0]
 8000314:	4a27      	ldr	r2, [pc, #156]	; (80003b4 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xdc>)
 8000316:	4293      	cmp	r3, r2
 8000318:	d106      	bne.n	8000328 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0x50>
		GPIOC_PCLK_EN();
 800031a:	4b24      	ldr	r3, [pc, #144]	; (80003ac <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xd4>)
 800031c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800031e:	4a23      	ldr	r2, [pc, #140]	; (80003ac <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xd4>)
 8000320:	f043 0304 	orr.w	r3, r3, #4
 8000324:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000326:	e03a      	b.n	800039e <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xc6>
	} else if (GPIOx_.pGPIOx == GPIOD) {
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	681b      	ldr	r3, [r3, #0]
 800032c:	4a22      	ldr	r2, [pc, #136]	; (80003b8 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xe0>)
 800032e:	4293      	cmp	r3, r2
 8000330:	d106      	bne.n	8000340 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0x68>
		GPIOD_PCLK_EN();
 8000332:	4b1e      	ldr	r3, [pc, #120]	; (80003ac <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xd4>)
 8000334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000336:	4a1d      	ldr	r2, [pc, #116]	; (80003ac <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xd4>)
 8000338:	f043 0308 	orr.w	r3, r3, #8
 800033c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800033e:	e02e      	b.n	800039e <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xc6>
	} else if (GPIOx_.pGPIOx == GPIOE) {
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	4a1d      	ldr	r2, [pc, #116]	; (80003bc <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xe4>)
 8000346:	4293      	cmp	r3, r2
 8000348:	d106      	bne.n	8000358 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0x80>
		GPIOE_PCLK_EN();
 800034a:	4b18      	ldr	r3, [pc, #96]	; (80003ac <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xd4>)
 800034c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800034e:	4a17      	ldr	r2, [pc, #92]	; (80003ac <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xd4>)
 8000350:	f043 0310 	orr.w	r3, r3, #16
 8000354:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000356:	e022      	b.n	800039e <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xc6>
	} else if (GPIOx_.pGPIOx == GPIOF) {
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	681b      	ldr	r3, [r3, #0]
 800035c:	4a18      	ldr	r2, [pc, #96]	; (80003c0 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xe8>)
 800035e:	4293      	cmp	r3, r2
 8000360:	d106      	bne.n	8000370 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0x98>
		GPIOF_PCLK_EN();
 8000362:	4b12      	ldr	r3, [pc, #72]	; (80003ac <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xd4>)
 8000364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000366:	4a11      	ldr	r2, [pc, #68]	; (80003ac <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xd4>)
 8000368:	f043 0320 	orr.w	r3, r3, #32
 800036c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800036e:	e016      	b.n	800039e <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xc6>
	} else if (GPIOx_.pGPIOx == GPIOG) {
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	4a13      	ldr	r2, [pc, #76]	; (80003c4 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xec>)
 8000376:	4293      	cmp	r3, r2
 8000378:	d106      	bne.n	8000388 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xb0>
		GPIOG_PCLK_EN();
 800037a:	4b0c      	ldr	r3, [pc, #48]	; (80003ac <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xd4>)
 800037c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800037e:	4a0b      	ldr	r2, [pc, #44]	; (80003ac <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xd4>)
 8000380:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000384:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000386:	e00a      	b.n	800039e <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xc6>
	} else if (GPIOx_.pGPIOx == GPIOH) {
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	4a0e      	ldr	r2, [pc, #56]	; (80003c8 <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xf0>)
 800038e:	4293      	cmp	r3, r2
 8000390:	d105      	bne.n	800039e <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xc6>
		GPIOH_PCLK_EN();
 8000392:	4b06      	ldr	r3, [pc, #24]	; (80003ac <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xd4>)
 8000394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000396:	4a05      	ldr	r2, [pc, #20]	; (80003ac <_ZN12GPIO_Handler21GPIO_PeriClockControlEv+0xd4>)
 8000398:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800039c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800039e:	bf00      	nop
 80003a0:	370c      	adds	r7, #12
 80003a2:	46bd      	mov	sp, r7
 80003a4:	bc80      	pop	{r7}
 80003a6:	4770      	bx	lr
 80003a8:	40020000 	.word	0x40020000
 80003ac:	40023800 	.word	0x40023800
 80003b0:	40020400 	.word	0x40020400
 80003b4:	40020800 	.word	0x40020800
 80003b8:	40020c00 	.word	0x40020c00
 80003bc:	40021000 	.word	0x40021000
 80003c0:	40021400 	.word	0x40021400
 80003c4:	40021800 	.word	0x40021800
 80003c8:	40021c00 	.word	0x40021c00

080003cc <_ZN12GPIO_Handler9GPIO_InitEv>:

// init and de-init
void GPIO_Handler::GPIO_Init() {
 80003cc:	b480      	push	{r7}
 80003ce:	b085      	sub	sp, #20
 80003d0:	af00      	add	r7, sp, #0
 80003d2:	6078      	str	r0, [r7, #4]
	uint32_t temp;
	// 1. configure the mode of gpio pin
	if(GPIOx_.GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG) {
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	795b      	ldrb	r3, [r3, #5]
 80003d8:	2b03      	cmp	r3, #3
 80003da:	d81f      	bhi.n	800041c <_ZN12GPIO_Handler9GPIO_InitEv+0x50>
		// the non interrupt mode
		temp = GPIOx_.GPIO_PinConfig.GPIO_PinMode << (2 * GPIOx_.GPIO_PinConfig.GPIO_PinNumber);
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	795b      	ldrb	r3, [r3, #5]
 80003e0:	461a      	mov	r2, r3
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	791b      	ldrb	r3, [r3, #4]
 80003e6:	005b      	lsls	r3, r3, #1
 80003e8:	fa02 f303 	lsl.w	r3, r2, r3
 80003ec:	60fb      	str	r3, [r7, #12]
		GPIOx_.pGPIOx->MODER &= ~(0x3 << (2 * GPIOx_.GPIO_PinConfig.GPIO_PinNumber)); // clearing
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	681b      	ldr	r3, [r3, #0]
 80003f2:	681a      	ldr	r2, [r3, #0]
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	791b      	ldrb	r3, [r3, #4]
 80003f8:	005b      	lsls	r3, r3, #1
 80003fa:	2103      	movs	r1, #3
 80003fc:	fa01 f303 	lsl.w	r3, r1, r3
 8000400:	43db      	mvns	r3, r3
 8000402:	4619      	mov	r1, r3
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	681b      	ldr	r3, [r3, #0]
 8000408:	400a      	ands	r2, r1
 800040a:	601a      	str	r2, [r3, #0]
		GPIOx_.pGPIOx->MODER |= temp;
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	681b      	ldr	r3, [r3, #0]
 8000410:	6819      	ldr	r1, [r3, #0]
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	681b      	ldr	r3, [r3, #0]
 8000416:	68fa      	ldr	r2, [r7, #12]
 8000418:	430a      	orrs	r2, r1
 800041a:	601a      	str	r2, [r3, #0]
	}
	else {
		// interrupt mode
	}

	temp = 0;
 800041c:	2300      	movs	r3, #0
 800041e:	60fb      	str	r3, [r7, #12]
	// 2. configure the speed
	temp = GPIOx_.GPIO_PinConfig.GPIO_PinSpeed << (2 * GPIOx_.GPIO_PinConfig.GPIO_PinNumber);
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	799b      	ldrb	r3, [r3, #6]
 8000424:	461a      	mov	r2, r3
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	791b      	ldrb	r3, [r3, #4]
 800042a:	005b      	lsls	r3, r3, #1
 800042c:	fa02 f303 	lsl.w	r3, r2, r3
 8000430:	60fb      	str	r3, [r7, #12]
	GPIOx_.pGPIOx->OSPEEDR &= ~(0x3 << (2 * GPIOx_.GPIO_PinConfig.GPIO_PinNumber)); // clearing
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	681b      	ldr	r3, [r3, #0]
 8000436:	689a      	ldr	r2, [r3, #8]
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	791b      	ldrb	r3, [r3, #4]
 800043c:	005b      	lsls	r3, r3, #1
 800043e:	2103      	movs	r1, #3
 8000440:	fa01 f303 	lsl.w	r3, r1, r3
 8000444:	43db      	mvns	r3, r3
 8000446:	4619      	mov	r1, r3
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	681b      	ldr	r3, [r3, #0]
 800044c:	400a      	ands	r2, r1
 800044e:	609a      	str	r2, [r3, #8]
	GPIOx_.pGPIOx->OSPEEDR |= temp;
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	681b      	ldr	r3, [r3, #0]
 8000454:	6899      	ldr	r1, [r3, #8]
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	681b      	ldr	r3, [r3, #0]
 800045a:	68fa      	ldr	r2, [r7, #12]
 800045c:	430a      	orrs	r2, r1
 800045e:	609a      	str	r2, [r3, #8]

	temp = 0;
 8000460:	2300      	movs	r3, #0
 8000462:	60fb      	str	r3, [r7, #12]
	// 3. configure the pupd settings
	temp = GPIOx_.GPIO_PinConfig.GPIO_PinPuPdControl << (2 * GPIOx_.GPIO_PinConfig.GPIO_PinNumber);
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	79db      	ldrb	r3, [r3, #7]
 8000468:	461a      	mov	r2, r3
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	791b      	ldrb	r3, [r3, #4]
 800046e:	005b      	lsls	r3, r3, #1
 8000470:	fa02 f303 	lsl.w	r3, r2, r3
 8000474:	60fb      	str	r3, [r7, #12]
	GPIOx_.pGPIOx->PUPDR &= ~(0x3 << (2 * GPIOx_.GPIO_PinConfig.GPIO_PinNumber));// clearing
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	681b      	ldr	r3, [r3, #0]
 800047a:	68da      	ldr	r2, [r3, #12]
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	791b      	ldrb	r3, [r3, #4]
 8000480:	005b      	lsls	r3, r3, #1
 8000482:	2103      	movs	r1, #3
 8000484:	fa01 f303 	lsl.w	r3, r1, r3
 8000488:	43db      	mvns	r3, r3
 800048a:	4619      	mov	r1, r3
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	400a      	ands	r2, r1
 8000492:	60da      	str	r2, [r3, #12]
	GPIOx_.pGPIOx->PUPDR |= temp;
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	68d9      	ldr	r1, [r3, #12]
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	68fa      	ldr	r2, [r7, #12]
 80004a0:	430a      	orrs	r2, r1
 80004a2:	60da      	str	r2, [r3, #12]

	temp = 0;
 80004a4:	2300      	movs	r3, #0
 80004a6:	60fb      	str	r3, [r7, #12]
	// 4. configure the optype
	temp = GPIOx_.GPIO_PinConfig.GPIO_PinOPType << GPIOx_.GPIO_PinConfig.GPIO_PinNumber;
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	7a1b      	ldrb	r3, [r3, #8]
 80004ac:	461a      	mov	r2, r3
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	791b      	ldrb	r3, [r3, #4]
 80004b2:	fa02 f303 	lsl.w	r3, r2, r3
 80004b6:	60fb      	str	r3, [r7, #12]
	GPIOx_.pGPIOx->OTYPER &= ~(0x1 << GPIOx_.GPIO_PinConfig.GPIO_PinNumber); // clearing
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	685a      	ldr	r2, [r3, #4]
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	791b      	ldrb	r3, [r3, #4]
 80004c2:	4619      	mov	r1, r3
 80004c4:	2301      	movs	r3, #1
 80004c6:	408b      	lsls	r3, r1
 80004c8:	43db      	mvns	r3, r3
 80004ca:	4619      	mov	r1, r3
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	400a      	ands	r2, r1
 80004d2:	605a      	str	r2, [r3, #4]
	GPIOx_.pGPIOx->OTYPER |= temp;
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	6859      	ldr	r1, [r3, #4]
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	68fa      	ldr	r2, [r7, #12]
 80004e0:	430a      	orrs	r2, r1
 80004e2:	605a      	str	r2, [r3, #4]

	temp = 0;
 80004e4:	2300      	movs	r3, #0
 80004e6:	60fb      	str	r3, [r7, #12]
	// 5. configure the alt functionality
	if(GPIOx_.GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN) {
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	795b      	ldrb	r3, [r3, #5]
 80004ec:	2b02      	cmp	r3, #2
 80004ee:	d131      	bne.n	8000554 <_ZN12GPIO_Handler9GPIO_InitEv+0x188>
		// configure alt function register
		uint8_t temp1, temp2;
		temp1 = GPIOx_.GPIO_PinConfig.GPIO_PinNumber / 8;
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	791b      	ldrb	r3, [r3, #4]
 80004f4:	08db      	lsrs	r3, r3, #3
 80004f6:	72fb      	strb	r3, [r7, #11]
		temp2 = GPIOx_.GPIO_PinConfig.GPIO_PinNumber % 8;
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	791b      	ldrb	r3, [r3, #4]
 80004fc:	f003 0307 	and.w	r3, r3, #7
 8000500:	72bb      	strb	r3, [r7, #10]
		GPIOx_.pGPIOx->AFR[temp1] &= ~(0xF << (4 * temp2));
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	7afa      	ldrb	r2, [r7, #11]
 8000508:	3208      	adds	r2, #8
 800050a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800050e:	7abb      	ldrb	r3, [r7, #10]
 8000510:	009b      	lsls	r3, r3, #2
 8000512:	220f      	movs	r2, #15
 8000514:	fa02 f303 	lsl.w	r3, r2, r3
 8000518:	43db      	mvns	r3, r3
 800051a:	4618      	mov	r0, r3
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	7afa      	ldrb	r2, [r7, #11]
 8000522:	4001      	ands	r1, r0
 8000524:	3208      	adds	r2, #8
 8000526:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		GPIOx_.pGPIOx->AFR[temp1] |= (GPIOx_.GPIO_PinConfig.GPIO_PinAltFunMode << (4 * temp2));
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	7afa      	ldrb	r2, [r7, #11]
 8000530:	3208      	adds	r2, #8
 8000532:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	7a5b      	ldrb	r3, [r3, #9]
 800053a:	461a      	mov	r2, r3
 800053c:	7abb      	ldrb	r3, [r7, #10]
 800053e:	009b      	lsls	r3, r3, #2
 8000540:	fa02 f303 	lsl.w	r3, r2, r3
 8000544:	4618      	mov	r0, r3
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	7afa      	ldrb	r2, [r7, #11]
 800054c:	4301      	orrs	r1, r0
 800054e:	3208      	adds	r2, #8
 8000550:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
 8000554:	bf00      	nop
 8000556:	3714      	adds	r7, #20
 8000558:	46bd      	mov	sp, r7
 800055a:	bc80      	pop	{r7}
 800055c:	4770      	bx	lr

0800055e <_ZN12GPIO_Handler21GPIO_WriteToOutputPinEh>:
	uint16_t value;
	value = GPIOx_.pGPIOx->IDR;
	return value;
}

void GPIO_Handler::GPIO_WriteToOutputPin(uint8_t Value) {
 800055e:	b480      	push	{r7}
 8000560:	b083      	sub	sp, #12
 8000562:	af00      	add	r7, sp, #0
 8000564:	6078      	str	r0, [r7, #4]
 8000566:	460b      	mov	r3, r1
 8000568:	70fb      	strb	r3, [r7, #3]
	if(Value == SET) {
 800056a:	78fb      	ldrb	r3, [r7, #3]
 800056c:	2b01      	cmp	r3, #1
 800056e:	d10d      	bne.n	800058c <_ZN12GPIO_Handler21GPIO_WriteToOutputPinEh+0x2e>
		GPIOx_.pGPIOx->ODR |= (0x1 << GPIOx_.GPIO_PinConfig.GPIO_PinNumber);
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	695a      	ldr	r2, [r3, #20]
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	791b      	ldrb	r3, [r3, #4]
 800057a:	4619      	mov	r1, r3
 800057c:	2301      	movs	r3, #1
 800057e:	408b      	lsls	r3, r1
 8000580:	4619      	mov	r1, r3
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	430a      	orrs	r2, r1
 8000588:	615a      	str	r2, [r3, #20]
	}
	else {
		GPIOx_.pGPIOx->ODR &= ~(0x1 << GPIOx_.GPIO_PinConfig.GPIO_PinNumber);
	}
}
 800058a:	e00d      	b.n	80005a8 <_ZN12GPIO_Handler21GPIO_WriteToOutputPinEh+0x4a>
		GPIOx_.pGPIOx->ODR &= ~(0x1 << GPIOx_.GPIO_PinConfig.GPIO_PinNumber);
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	695a      	ldr	r2, [r3, #20]
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	791b      	ldrb	r3, [r3, #4]
 8000596:	4619      	mov	r1, r3
 8000598:	2301      	movs	r3, #1
 800059a:	408b      	lsls	r3, r1
 800059c:	43db      	mvns	r3, r3
 800059e:	4619      	mov	r1, r3
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	400a      	ands	r2, r1
 80005a6:	615a      	str	r2, [r3, #20]
}
 80005a8:	bf00      	nop
 80005aa:	370c      	adds	r7, #12
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bc80      	pop	{r7}
 80005b0:	4770      	bx	lr
	...

080005b4 <__libc_init_array>:
 80005b4:	b570      	push	{r4, r5, r6, lr}
 80005b6:	4e0d      	ldr	r6, [pc, #52]	; (80005ec <__libc_init_array+0x38>)
 80005b8:	4c0d      	ldr	r4, [pc, #52]	; (80005f0 <__libc_init_array+0x3c>)
 80005ba:	1ba4      	subs	r4, r4, r6
 80005bc:	10a4      	asrs	r4, r4, #2
 80005be:	2500      	movs	r5, #0
 80005c0:	42a5      	cmp	r5, r4
 80005c2:	d109      	bne.n	80005d8 <__libc_init_array+0x24>
 80005c4:	4e0b      	ldr	r6, [pc, #44]	; (80005f4 <__libc_init_array+0x40>)
 80005c6:	4c0c      	ldr	r4, [pc, #48]	; (80005f8 <__libc_init_array+0x44>)
 80005c8:	f000 f818 	bl	80005fc <_init>
 80005cc:	1ba4      	subs	r4, r4, r6
 80005ce:	10a4      	asrs	r4, r4, #2
 80005d0:	2500      	movs	r5, #0
 80005d2:	42a5      	cmp	r5, r4
 80005d4:	d105      	bne.n	80005e2 <__libc_init_array+0x2e>
 80005d6:	bd70      	pop	{r4, r5, r6, pc}
 80005d8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80005dc:	4798      	blx	r3
 80005de:	3501      	adds	r5, #1
 80005e0:	e7ee      	b.n	80005c0 <__libc_init_array+0xc>
 80005e2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80005e6:	4798      	blx	r3
 80005e8:	3501      	adds	r5, #1
 80005ea:	e7f2      	b.n	80005d2 <__libc_init_array+0x1e>
 80005ec:	08000614 	.word	0x08000614
 80005f0:	08000614 	.word	0x08000614
 80005f4:	08000614 	.word	0x08000614
 80005f8:	08000618 	.word	0x08000618

080005fc <_init>:
 80005fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005fe:	bf00      	nop
 8000600:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000602:	bc08      	pop	{r3}
 8000604:	469e      	mov	lr, r3
 8000606:	4770      	bx	lr

08000608 <_fini>:
 8000608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800060a:	bf00      	nop
 800060c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800060e:	bc08      	pop	{r3}
 8000610:	469e      	mov	lr, r3
 8000612:	4770      	bx	lr
