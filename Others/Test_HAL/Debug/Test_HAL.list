
Test_HAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c94  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08003e5c  08003e5c  00013e5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003e6c  08003e6c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003e6c  08003e6c  00013e6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003e74  08003e74  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003e74  08003e74  00013e74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003e78  08003e78  00013e78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003e7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c0  2000000c  08003e88  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000cc  08003e88  000200cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008c7d  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000173d  00000000  00000000  00028cb9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000820  00000000  00000000  0002a3f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000758  00000000  00000000  0002ac18  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002042c  00000000  00000000  0002b370  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00006ea6  00000000  00000000  0004b79c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c4656  00000000  00000000  00052642  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00116c98  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002250  00000000  00000000  00116d14  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000000c 	.word	0x2000000c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08003e44 	.word	0x08003e44

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000010 	.word	0x20000010
 8000204:	08003e44 	.word	0x08003e44

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	; 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000346:	f1a4 0401 	sub.w	r4, r4, #1
 800034a:	d1e9      	bne.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__gedf2>:
 80009a4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80009a8:	e006      	b.n	80009b8 <__cmpdf2+0x4>
 80009aa:	bf00      	nop

080009ac <__ledf2>:
 80009ac:	f04f 0c01 	mov.w	ip, #1
 80009b0:	e002      	b.n	80009b8 <__cmpdf2+0x4>
 80009b2:	bf00      	nop

080009b4 <__cmpdf2>:
 80009b4:	f04f 0c01 	mov.w	ip, #1
 80009b8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c8:	bf18      	it	ne
 80009ca:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ce:	d01b      	beq.n	8000a08 <__cmpdf2+0x54>
 80009d0:	b001      	add	sp, #4
 80009d2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009d6:	bf0c      	ite	eq
 80009d8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009dc:	ea91 0f03 	teqne	r1, r3
 80009e0:	bf02      	ittt	eq
 80009e2:	ea90 0f02 	teqeq	r0, r2
 80009e6:	2000      	moveq	r0, #0
 80009e8:	4770      	bxeq	lr
 80009ea:	f110 0f00 	cmn.w	r0, #0
 80009ee:	ea91 0f03 	teq	r1, r3
 80009f2:	bf58      	it	pl
 80009f4:	4299      	cmppl	r1, r3
 80009f6:	bf08      	it	eq
 80009f8:	4290      	cmpeq	r0, r2
 80009fa:	bf2c      	ite	cs
 80009fc:	17d8      	asrcs	r0, r3, #31
 80009fe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a02:	f040 0001 	orr.w	r0, r0, #1
 8000a06:	4770      	bx	lr
 8000a08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a10:	d102      	bne.n	8000a18 <__cmpdf2+0x64>
 8000a12:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a16:	d107      	bne.n	8000a28 <__cmpdf2+0x74>
 8000a18:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d1d6      	bne.n	80009d0 <__cmpdf2+0x1c>
 8000a22:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a26:	d0d3      	beq.n	80009d0 <__cmpdf2+0x1c>
 8000a28:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop

08000a30 <__aeabi_cdrcmple>:
 8000a30:	4684      	mov	ip, r0
 8000a32:	4610      	mov	r0, r2
 8000a34:	4662      	mov	r2, ip
 8000a36:	468c      	mov	ip, r1
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4663      	mov	r3, ip
 8000a3c:	e000      	b.n	8000a40 <__aeabi_cdcmpeq>
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdcmpeq>:
 8000a40:	b501      	push	{r0, lr}
 8000a42:	f7ff ffb7 	bl	80009b4 <__cmpdf2>
 8000a46:	2800      	cmp	r0, #0
 8000a48:	bf48      	it	mi
 8000a4a:	f110 0f00 	cmnmi.w	r0, #0
 8000a4e:	bd01      	pop	{r0, pc}

08000a50 <__aeabi_dcmpeq>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff fff4 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a58:	bf0c      	ite	eq
 8000a5a:	2001      	moveq	r0, #1
 8000a5c:	2000      	movne	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmplt>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffea 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a6c:	bf34      	ite	cc
 8000a6e:	2001      	movcc	r0, #1
 8000a70:	2000      	movcs	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmple>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffe0 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a80:	bf94      	ite	ls
 8000a82:	2001      	movls	r0, #1
 8000a84:	2000      	movhi	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpge>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffce 	bl	8000a30 <__aeabi_cdrcmple>
 8000a94:	bf94      	ite	ls
 8000a96:	2001      	movls	r0, #1
 8000a98:	2000      	movhi	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmpgt>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffc4 	bl	8000a30 <__aeabi_cdrcmple>
 8000aa8:	bf34      	ite	cc
 8000aaa:	2001      	movcc	r0, #1
 8000aac:	2000      	movcs	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_d2iz>:
 8000ab4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000abc:	d215      	bcs.n	8000aea <__aeabi_d2iz+0x36>
 8000abe:	d511      	bpl.n	8000ae4 <__aeabi_d2iz+0x30>
 8000ac0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac8:	d912      	bls.n	8000af0 <__aeabi_d2iz+0x3c>
 8000aca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ace:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ad2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ada:	fa23 f002 	lsr.w	r0, r3, r2
 8000ade:	bf18      	it	ne
 8000ae0:	4240      	negne	r0, r0
 8000ae2:	4770      	bx	lr
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aee:	d105      	bne.n	8000afc <__aeabi_d2iz+0x48>
 8000af0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000af4:	bf08      	it	eq
 8000af6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000afa:	4770      	bx	lr
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop

08000b04 <__aeabi_uldivmod>:
 8000b04:	b953      	cbnz	r3, 8000b1c <__aeabi_uldivmod+0x18>
 8000b06:	b94a      	cbnz	r2, 8000b1c <__aeabi_uldivmod+0x18>
 8000b08:	2900      	cmp	r1, #0
 8000b0a:	bf08      	it	eq
 8000b0c:	2800      	cmpeq	r0, #0
 8000b0e:	bf1c      	itt	ne
 8000b10:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000b14:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000b18:	f000 b972 	b.w	8000e00 <__aeabi_idiv0>
 8000b1c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b20:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b24:	f000 f806 	bl	8000b34 <__udivmoddi4>
 8000b28:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b30:	b004      	add	sp, #16
 8000b32:	4770      	bx	lr

08000b34 <__udivmoddi4>:
 8000b34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b38:	9e08      	ldr	r6, [sp, #32]
 8000b3a:	4604      	mov	r4, r0
 8000b3c:	4688      	mov	r8, r1
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d14b      	bne.n	8000bda <__udivmoddi4+0xa6>
 8000b42:	428a      	cmp	r2, r1
 8000b44:	4615      	mov	r5, r2
 8000b46:	d967      	bls.n	8000c18 <__udivmoddi4+0xe4>
 8000b48:	fab2 f282 	clz	r2, r2
 8000b4c:	b14a      	cbz	r2, 8000b62 <__udivmoddi4+0x2e>
 8000b4e:	f1c2 0720 	rsb	r7, r2, #32
 8000b52:	fa01 f302 	lsl.w	r3, r1, r2
 8000b56:	fa20 f707 	lsr.w	r7, r0, r7
 8000b5a:	4095      	lsls	r5, r2
 8000b5c:	ea47 0803 	orr.w	r8, r7, r3
 8000b60:	4094      	lsls	r4, r2
 8000b62:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b66:	0c23      	lsrs	r3, r4, #16
 8000b68:	fbb8 f7fe 	udiv	r7, r8, lr
 8000b6c:	fa1f fc85 	uxth.w	ip, r5
 8000b70:	fb0e 8817 	mls	r8, lr, r7, r8
 8000b74:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b78:	fb07 f10c 	mul.w	r1, r7, ip
 8000b7c:	4299      	cmp	r1, r3
 8000b7e:	d909      	bls.n	8000b94 <__udivmoddi4+0x60>
 8000b80:	18eb      	adds	r3, r5, r3
 8000b82:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000b86:	f080 811b 	bcs.w	8000dc0 <__udivmoddi4+0x28c>
 8000b8a:	4299      	cmp	r1, r3
 8000b8c:	f240 8118 	bls.w	8000dc0 <__udivmoddi4+0x28c>
 8000b90:	3f02      	subs	r7, #2
 8000b92:	442b      	add	r3, r5
 8000b94:	1a5b      	subs	r3, r3, r1
 8000b96:	b2a4      	uxth	r4, r4
 8000b98:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b9c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ba0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ba4:	fb00 fc0c 	mul.w	ip, r0, ip
 8000ba8:	45a4      	cmp	ip, r4
 8000baa:	d909      	bls.n	8000bc0 <__udivmoddi4+0x8c>
 8000bac:	192c      	adds	r4, r5, r4
 8000bae:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000bb2:	f080 8107 	bcs.w	8000dc4 <__udivmoddi4+0x290>
 8000bb6:	45a4      	cmp	ip, r4
 8000bb8:	f240 8104 	bls.w	8000dc4 <__udivmoddi4+0x290>
 8000bbc:	3802      	subs	r0, #2
 8000bbe:	442c      	add	r4, r5
 8000bc0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000bc4:	eba4 040c 	sub.w	r4, r4, ip
 8000bc8:	2700      	movs	r7, #0
 8000bca:	b11e      	cbz	r6, 8000bd4 <__udivmoddi4+0xa0>
 8000bcc:	40d4      	lsrs	r4, r2
 8000bce:	2300      	movs	r3, #0
 8000bd0:	e9c6 4300 	strd	r4, r3, [r6]
 8000bd4:	4639      	mov	r1, r7
 8000bd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bda:	428b      	cmp	r3, r1
 8000bdc:	d909      	bls.n	8000bf2 <__udivmoddi4+0xbe>
 8000bde:	2e00      	cmp	r6, #0
 8000be0:	f000 80eb 	beq.w	8000dba <__udivmoddi4+0x286>
 8000be4:	2700      	movs	r7, #0
 8000be6:	e9c6 0100 	strd	r0, r1, [r6]
 8000bea:	4638      	mov	r0, r7
 8000bec:	4639      	mov	r1, r7
 8000bee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bf2:	fab3 f783 	clz	r7, r3
 8000bf6:	2f00      	cmp	r7, #0
 8000bf8:	d147      	bne.n	8000c8a <__udivmoddi4+0x156>
 8000bfa:	428b      	cmp	r3, r1
 8000bfc:	d302      	bcc.n	8000c04 <__udivmoddi4+0xd0>
 8000bfe:	4282      	cmp	r2, r0
 8000c00:	f200 80fa 	bhi.w	8000df8 <__udivmoddi4+0x2c4>
 8000c04:	1a84      	subs	r4, r0, r2
 8000c06:	eb61 0303 	sbc.w	r3, r1, r3
 8000c0a:	2001      	movs	r0, #1
 8000c0c:	4698      	mov	r8, r3
 8000c0e:	2e00      	cmp	r6, #0
 8000c10:	d0e0      	beq.n	8000bd4 <__udivmoddi4+0xa0>
 8000c12:	e9c6 4800 	strd	r4, r8, [r6]
 8000c16:	e7dd      	b.n	8000bd4 <__udivmoddi4+0xa0>
 8000c18:	b902      	cbnz	r2, 8000c1c <__udivmoddi4+0xe8>
 8000c1a:	deff      	udf	#255	; 0xff
 8000c1c:	fab2 f282 	clz	r2, r2
 8000c20:	2a00      	cmp	r2, #0
 8000c22:	f040 808f 	bne.w	8000d44 <__udivmoddi4+0x210>
 8000c26:	1b49      	subs	r1, r1, r5
 8000c28:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c2c:	fa1f f885 	uxth.w	r8, r5
 8000c30:	2701      	movs	r7, #1
 8000c32:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c36:	0c23      	lsrs	r3, r4, #16
 8000c38:	fb0e 111c 	mls	r1, lr, ip, r1
 8000c3c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c40:	fb08 f10c 	mul.w	r1, r8, ip
 8000c44:	4299      	cmp	r1, r3
 8000c46:	d907      	bls.n	8000c58 <__udivmoddi4+0x124>
 8000c48:	18eb      	adds	r3, r5, r3
 8000c4a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000c4e:	d202      	bcs.n	8000c56 <__udivmoddi4+0x122>
 8000c50:	4299      	cmp	r1, r3
 8000c52:	f200 80cd 	bhi.w	8000df0 <__udivmoddi4+0x2bc>
 8000c56:	4684      	mov	ip, r0
 8000c58:	1a59      	subs	r1, r3, r1
 8000c5a:	b2a3      	uxth	r3, r4
 8000c5c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c60:	fb0e 1410 	mls	r4, lr, r0, r1
 8000c64:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c68:	fb08 f800 	mul.w	r8, r8, r0
 8000c6c:	45a0      	cmp	r8, r4
 8000c6e:	d907      	bls.n	8000c80 <__udivmoddi4+0x14c>
 8000c70:	192c      	adds	r4, r5, r4
 8000c72:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c76:	d202      	bcs.n	8000c7e <__udivmoddi4+0x14a>
 8000c78:	45a0      	cmp	r8, r4
 8000c7a:	f200 80b6 	bhi.w	8000dea <__udivmoddi4+0x2b6>
 8000c7e:	4618      	mov	r0, r3
 8000c80:	eba4 0408 	sub.w	r4, r4, r8
 8000c84:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c88:	e79f      	b.n	8000bca <__udivmoddi4+0x96>
 8000c8a:	f1c7 0c20 	rsb	ip, r7, #32
 8000c8e:	40bb      	lsls	r3, r7
 8000c90:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000c94:	ea4e 0e03 	orr.w	lr, lr, r3
 8000c98:	fa01 f407 	lsl.w	r4, r1, r7
 8000c9c:	fa20 f50c 	lsr.w	r5, r0, ip
 8000ca0:	fa21 f30c 	lsr.w	r3, r1, ip
 8000ca4:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000ca8:	4325      	orrs	r5, r4
 8000caa:	fbb3 f9f8 	udiv	r9, r3, r8
 8000cae:	0c2c      	lsrs	r4, r5, #16
 8000cb0:	fb08 3319 	mls	r3, r8, r9, r3
 8000cb4:	fa1f fa8e 	uxth.w	sl, lr
 8000cb8:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000cbc:	fb09 f40a 	mul.w	r4, r9, sl
 8000cc0:	429c      	cmp	r4, r3
 8000cc2:	fa02 f207 	lsl.w	r2, r2, r7
 8000cc6:	fa00 f107 	lsl.w	r1, r0, r7
 8000cca:	d90b      	bls.n	8000ce4 <__udivmoddi4+0x1b0>
 8000ccc:	eb1e 0303 	adds.w	r3, lr, r3
 8000cd0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000cd4:	f080 8087 	bcs.w	8000de6 <__udivmoddi4+0x2b2>
 8000cd8:	429c      	cmp	r4, r3
 8000cda:	f240 8084 	bls.w	8000de6 <__udivmoddi4+0x2b2>
 8000cde:	f1a9 0902 	sub.w	r9, r9, #2
 8000ce2:	4473      	add	r3, lr
 8000ce4:	1b1b      	subs	r3, r3, r4
 8000ce6:	b2ad      	uxth	r5, r5
 8000ce8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cec:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000cf4:	fb00 fa0a 	mul.w	sl, r0, sl
 8000cf8:	45a2      	cmp	sl, r4
 8000cfa:	d908      	bls.n	8000d0e <__udivmoddi4+0x1da>
 8000cfc:	eb1e 0404 	adds.w	r4, lr, r4
 8000d00:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d04:	d26b      	bcs.n	8000dde <__udivmoddi4+0x2aa>
 8000d06:	45a2      	cmp	sl, r4
 8000d08:	d969      	bls.n	8000dde <__udivmoddi4+0x2aa>
 8000d0a:	3802      	subs	r0, #2
 8000d0c:	4474      	add	r4, lr
 8000d0e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d12:	fba0 8902 	umull	r8, r9, r0, r2
 8000d16:	eba4 040a 	sub.w	r4, r4, sl
 8000d1a:	454c      	cmp	r4, r9
 8000d1c:	46c2      	mov	sl, r8
 8000d1e:	464b      	mov	r3, r9
 8000d20:	d354      	bcc.n	8000dcc <__udivmoddi4+0x298>
 8000d22:	d051      	beq.n	8000dc8 <__udivmoddi4+0x294>
 8000d24:	2e00      	cmp	r6, #0
 8000d26:	d069      	beq.n	8000dfc <__udivmoddi4+0x2c8>
 8000d28:	ebb1 050a 	subs.w	r5, r1, sl
 8000d2c:	eb64 0403 	sbc.w	r4, r4, r3
 8000d30:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d34:	40fd      	lsrs	r5, r7
 8000d36:	40fc      	lsrs	r4, r7
 8000d38:	ea4c 0505 	orr.w	r5, ip, r5
 8000d3c:	e9c6 5400 	strd	r5, r4, [r6]
 8000d40:	2700      	movs	r7, #0
 8000d42:	e747      	b.n	8000bd4 <__udivmoddi4+0xa0>
 8000d44:	f1c2 0320 	rsb	r3, r2, #32
 8000d48:	fa20 f703 	lsr.w	r7, r0, r3
 8000d4c:	4095      	lsls	r5, r2
 8000d4e:	fa01 f002 	lsl.w	r0, r1, r2
 8000d52:	fa21 f303 	lsr.w	r3, r1, r3
 8000d56:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d5a:	4338      	orrs	r0, r7
 8000d5c:	0c01      	lsrs	r1, r0, #16
 8000d5e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000d62:	fa1f f885 	uxth.w	r8, r5
 8000d66:	fb0e 3317 	mls	r3, lr, r7, r3
 8000d6a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d6e:	fb07 f308 	mul.w	r3, r7, r8
 8000d72:	428b      	cmp	r3, r1
 8000d74:	fa04 f402 	lsl.w	r4, r4, r2
 8000d78:	d907      	bls.n	8000d8a <__udivmoddi4+0x256>
 8000d7a:	1869      	adds	r1, r5, r1
 8000d7c:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000d80:	d22f      	bcs.n	8000de2 <__udivmoddi4+0x2ae>
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d92d      	bls.n	8000de2 <__udivmoddi4+0x2ae>
 8000d86:	3f02      	subs	r7, #2
 8000d88:	4429      	add	r1, r5
 8000d8a:	1acb      	subs	r3, r1, r3
 8000d8c:	b281      	uxth	r1, r0
 8000d8e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d92:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d96:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d9a:	fb00 f308 	mul.w	r3, r0, r8
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d907      	bls.n	8000db2 <__udivmoddi4+0x27e>
 8000da2:	1869      	adds	r1, r5, r1
 8000da4:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000da8:	d217      	bcs.n	8000dda <__udivmoddi4+0x2a6>
 8000daa:	428b      	cmp	r3, r1
 8000dac:	d915      	bls.n	8000dda <__udivmoddi4+0x2a6>
 8000dae:	3802      	subs	r0, #2
 8000db0:	4429      	add	r1, r5
 8000db2:	1ac9      	subs	r1, r1, r3
 8000db4:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000db8:	e73b      	b.n	8000c32 <__udivmoddi4+0xfe>
 8000dba:	4637      	mov	r7, r6
 8000dbc:	4630      	mov	r0, r6
 8000dbe:	e709      	b.n	8000bd4 <__udivmoddi4+0xa0>
 8000dc0:	4607      	mov	r7, r0
 8000dc2:	e6e7      	b.n	8000b94 <__udivmoddi4+0x60>
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	e6fb      	b.n	8000bc0 <__udivmoddi4+0x8c>
 8000dc8:	4541      	cmp	r1, r8
 8000dca:	d2ab      	bcs.n	8000d24 <__udivmoddi4+0x1f0>
 8000dcc:	ebb8 0a02 	subs.w	sl, r8, r2
 8000dd0:	eb69 020e 	sbc.w	r2, r9, lr
 8000dd4:	3801      	subs	r0, #1
 8000dd6:	4613      	mov	r3, r2
 8000dd8:	e7a4      	b.n	8000d24 <__udivmoddi4+0x1f0>
 8000dda:	4660      	mov	r0, ip
 8000ddc:	e7e9      	b.n	8000db2 <__udivmoddi4+0x27e>
 8000dde:	4618      	mov	r0, r3
 8000de0:	e795      	b.n	8000d0e <__udivmoddi4+0x1da>
 8000de2:	4667      	mov	r7, ip
 8000de4:	e7d1      	b.n	8000d8a <__udivmoddi4+0x256>
 8000de6:	4681      	mov	r9, r0
 8000de8:	e77c      	b.n	8000ce4 <__udivmoddi4+0x1b0>
 8000dea:	3802      	subs	r0, #2
 8000dec:	442c      	add	r4, r5
 8000dee:	e747      	b.n	8000c80 <__udivmoddi4+0x14c>
 8000df0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000df4:	442b      	add	r3, r5
 8000df6:	e72f      	b.n	8000c58 <__udivmoddi4+0x124>
 8000df8:	4638      	mov	r0, r7
 8000dfa:	e708      	b.n	8000c0e <__udivmoddi4+0xda>
 8000dfc:	4637      	mov	r7, r6
 8000dfe:	e6e9      	b.n	8000bd4 <__udivmoddi4+0xa0>

08000e00 <__aeabi_idiv0>:
 8000e00:	4770      	bx	lr
 8000e02:	bf00      	nop

08000e04 <bme280_init>:
/*!
 *  @brief This API is the entry point.
 *  It reads the chip-id and calibration data from the sensor.
 */
int8_t bme280_init(struct bme280_dev *dev)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b084      	sub	sp, #16
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    /* chip id read try count */
    uint8_t try_count = 5;
 8000e0c:	2305      	movs	r3, #5
 8000e0e:	73bb      	strb	r3, [r7, #14]
    uint8_t chip_id = 0;
 8000e10:	2300      	movs	r3, #0
 8000e12:	737b      	strb	r3, [r7, #13]

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8000e14:	6878      	ldr	r0, [r7, #4]
 8000e16:	f000 ff77 	bl	8001d08 <null_ptr_check>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	73fb      	strb	r3, [r7, #15]

    /* Proceed if null check is fine */
    if (rslt == BME280_OK)
 8000e1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d137      	bne.n	8000e96 <bme280_init+0x92>
    {
        while (try_count)
 8000e26:	e02c      	b.n	8000e82 <bme280_init+0x7e>
        {
            /* Read the chip-id of bme280 sensor */
            rslt = bme280_get_regs(BME280_CHIP_ID_ADDR, &chip_id, 1, dev);
 8000e28:	f107 010d 	add.w	r1, r7, #13
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	2201      	movs	r2, #1
 8000e30:	20d0      	movs	r0, #208	; 0xd0
 8000e32:	f000 f836 	bl	8000ea2 <bme280_get_regs>
 8000e36:	4603      	mov	r3, r0
 8000e38:	73fb      	strb	r3, [r7, #15]

            /* Check for chip id validity */
            if ((rslt == BME280_OK) && (chip_id == BME280_CHIP_ID))
 8000e3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d114      	bne.n	8000e6c <bme280_init+0x68>
 8000e42:	7b7b      	ldrb	r3, [r7, #13]
 8000e44:	2b60      	cmp	r3, #96	; 0x60
 8000e46:	d111      	bne.n	8000e6c <bme280_init+0x68>
            {
                dev->chip_id = chip_id;
 8000e48:	7b7a      	ldrb	r2, [r7, #13]
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	701a      	strb	r2, [r3, #0]

                /* Reset the sensor */
                rslt = bme280_soft_reset(dev);
 8000e4e:	6878      	ldr	r0, [r7, #4]
 8000e50:	f000 f8dd 	bl	800100e <bme280_soft_reset>
 8000e54:	4603      	mov	r3, r0
 8000e56:	73fb      	strb	r3, [r7, #15]

                if (rslt == BME280_OK)
 8000e58:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d114      	bne.n	8000e8a <bme280_init+0x86>
                {
                    /* Read the calibration data */
                    rslt = get_calib_data(dev);
 8000e60:	6878      	ldr	r0, [r7, #4]
 8000e62:	f000 fde5 	bl	8001a30 <get_calib_data>
 8000e66:	4603      	mov	r3, r0
 8000e68:	73fb      	strb	r3, [r7, #15]
                }

                break;
 8000e6a:	e00e      	b.n	8000e8a <bme280_init+0x86>
            }

            /* Wait for 1 ms */
            dev->delay_us(1000, dev->intf_ptr);
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	695b      	ldr	r3, [r3, #20]
 8000e70:	687a      	ldr	r2, [r7, #4]
 8000e72:	6852      	ldr	r2, [r2, #4]
 8000e74:	4611      	mov	r1, r2
 8000e76:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e7a:	4798      	blx	r3
            --try_count;
 8000e7c:	7bbb      	ldrb	r3, [r7, #14]
 8000e7e:	3b01      	subs	r3, #1
 8000e80:	73bb      	strb	r3, [r7, #14]
        while (try_count)
 8000e82:	7bbb      	ldrb	r3, [r7, #14]
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d1cf      	bne.n	8000e28 <bme280_init+0x24>
 8000e88:	e000      	b.n	8000e8c <bme280_init+0x88>
                break;
 8000e8a:	bf00      	nop
        }

        /* Chip id check failed */
        if (!try_count)
 8000e8c:	7bbb      	ldrb	r3, [r7, #14]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d101      	bne.n	8000e96 <bme280_init+0x92>
        {
            rslt = BME280_E_DEV_NOT_FOUND;
 8000e92:	23fe      	movs	r3, #254	; 0xfe
 8000e94:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8000e96:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	3710      	adds	r7, #16
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}

08000ea2 <bme280_get_regs>:

/*!
 * @brief This API reads the data from the given register address of the sensor.
 */
int8_t bme280_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint16_t len, struct bme280_dev *dev)
{
 8000ea2:	b590      	push	{r4, r7, lr}
 8000ea4:	b087      	sub	sp, #28
 8000ea6:	af00      	add	r7, sp, #0
 8000ea8:	60b9      	str	r1, [r7, #8]
 8000eaa:	607b      	str	r3, [r7, #4]
 8000eac:	4603      	mov	r3, r0
 8000eae:	73fb      	strb	r3, [r7, #15]
 8000eb0:	4613      	mov	r3, r2
 8000eb2:	81bb      	strh	r3, [r7, #12]
    int8_t rslt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8000eb4:	6878      	ldr	r0, [r7, #4]
 8000eb6:	f000 ff27 	bl	8001d08 <null_ptr_check>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	75fb      	strb	r3, [r7, #23]

    /* Proceed if null check is fine */
    if ((rslt == BME280_OK) && (reg_data != NULL))
 8000ebe:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d11f      	bne.n	8000f06 <bme280_get_regs+0x64>
 8000ec6:	68bb      	ldr	r3, [r7, #8]
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d01c      	beq.n	8000f06 <bme280_get_regs+0x64>
    {
        /* If interface selected is SPI */
        if (dev->intf != BME280_I2C_INTF)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	7a1b      	ldrb	r3, [r3, #8]
 8000ed0:	2b01      	cmp	r3, #1
 8000ed2:	d003      	beq.n	8000edc <bme280_get_regs+0x3a>
        {
            reg_addr = reg_addr | 0x80;
 8000ed4:	7bfb      	ldrb	r3, [r7, #15]
 8000ed6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000eda:	73fb      	strb	r3, [r7, #15]
        }

        /* Read the data  */
        dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	68dc      	ldr	r4, [r3, #12]
 8000ee0:	89ba      	ldrh	r2, [r7, #12]
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	685b      	ldr	r3, [r3, #4]
 8000ee6:	7bf8      	ldrb	r0, [r7, #15]
 8000ee8:	68b9      	ldr	r1, [r7, #8]
 8000eea:	47a0      	blx	r4
 8000eec:	4603      	mov	r3, r0
 8000eee:	461a      	mov	r2, r3
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        /* Check for communication error */
        if (dev->intf_rslt != BME280_INTF_RET_SUCCESS)
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	f993 3045 	ldrsb.w	r3, [r3, #69]	; 0x45
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d004      	beq.n	8000f0a <bme280_get_regs+0x68>
        {
            rslt = BME280_E_COMM_FAIL;
 8000f00:	23fc      	movs	r3, #252	; 0xfc
 8000f02:	75fb      	strb	r3, [r7, #23]
        if (dev->intf_rslt != BME280_INTF_RET_SUCCESS)
 8000f04:	e001      	b.n	8000f0a <bme280_get_regs+0x68>
        }
    }
    else
    {
        rslt = BME280_E_NULL_PTR;
 8000f06:	23ff      	movs	r3, #255	; 0xff
 8000f08:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8000f0a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	371c      	adds	r7, #28
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd90      	pop	{r4, r7, pc}

08000f16 <bme280_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of the sensor.
 */
int8_t bme280_set_regs(uint8_t *reg_addr, const uint8_t *reg_data, uint8_t len, struct bme280_dev *dev)
{
 8000f16:	b590      	push	{r4, r7, lr}
 8000f18:	b08d      	sub	sp, #52	; 0x34
 8000f1a:	af00      	add	r7, sp, #0
 8000f1c:	60f8      	str	r0, [r7, #12]
 8000f1e:	60b9      	str	r1, [r7, #8]
 8000f20:	603b      	str	r3, [r7, #0]
 8000f22:	4613      	mov	r3, r2
 8000f24:	71fb      	strb	r3, [r7, #7]
    int8_t rslt;
    uint8_t temp_buff[20]; /* Typically not to write more than 10 registers */

    if (len > 10)
 8000f26:	79fb      	ldrb	r3, [r7, #7]
 8000f28:	2b0a      	cmp	r3, #10
 8000f2a:	d901      	bls.n	8000f30 <bme280_set_regs+0x1a>
    {
        len = 10;
 8000f2c:	230a      	movs	r3, #10
 8000f2e:	71fb      	strb	r3, [r7, #7]

    uint16_t temp_len;
    uint8_t reg_addr_cnt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8000f30:	6838      	ldr	r0, [r7, #0]
 8000f32:	f000 fee9 	bl	8001d08 <null_ptr_check>
 8000f36:	4603      	mov	r3, r0
 8000f38:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check for arguments validity */
    if ((rslt == BME280_OK) && (reg_addr != NULL) && (reg_data != NULL))
 8000f3c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d159      	bne.n	8000ff8 <bme280_set_regs+0xe2>
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d056      	beq.n	8000ff8 <bme280_set_regs+0xe2>
 8000f4a:	68bb      	ldr	r3, [r7, #8]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d053      	beq.n	8000ff8 <bme280_set_regs+0xe2>
    {
        if (len != 0)
 8000f50:	79fb      	ldrb	r3, [r7, #7]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d04c      	beq.n	8000ff0 <bme280_set_regs+0xda>
        {
            temp_buff[0] = reg_data[0];
 8000f56:	68bb      	ldr	r3, [r7, #8]
 8000f58:	781b      	ldrb	r3, [r3, #0]
 8000f5a:	753b      	strb	r3, [r7, #20]

            /* If interface selected is SPI */
            if (dev->intf != BME280_I2C_INTF)
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	7a1b      	ldrb	r3, [r3, #8]
 8000f60:	2b01      	cmp	r3, #1
 8000f62:	d01a      	beq.n	8000f9a <bme280_set_regs+0x84>
            {
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8000f64:	2300      	movs	r3, #0
 8000f66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8000f6a:	e011      	b.n	8000f90 <bme280_set_regs+0x7a>
                {
                    reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 8000f6c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000f70:	68fa      	ldr	r2, [r7, #12]
 8000f72:	4413      	add	r3, r2
 8000f74:	781a      	ldrb	r2, [r3, #0]
 8000f76:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000f7a:	68f9      	ldr	r1, [r7, #12]
 8000f7c:	440b      	add	r3, r1
 8000f7e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8000f82:	b2d2      	uxtb	r2, r2
 8000f84:	701a      	strb	r2, [r3, #0]
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8000f86:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000f8a:	3301      	adds	r3, #1
 8000f8c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8000f90:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8000f94:	79fb      	ldrb	r3, [r7, #7]
 8000f96:	429a      	cmp	r2, r3
 8000f98:	d3e8      	bcc.n	8000f6c <bme280_set_regs+0x56>
                }
            }

            /* Burst write mode */
            if (len > 1)
 8000f9a:	79fb      	ldrb	r3, [r7, #7]
 8000f9c:	2b01      	cmp	r3, #1
 8000f9e:	d90d      	bls.n	8000fbc <bme280_set_regs+0xa6>
            {
                /* Interleave register address w.r.t data for
                 * burst write
                 */
                interleave_reg_addr(reg_addr, temp_buff, reg_data, len);
 8000fa0:	79fb      	ldrb	r3, [r7, #7]
 8000fa2:	f107 0114 	add.w	r1, r7, #20
 8000fa6:	68ba      	ldr	r2, [r7, #8]
 8000fa8:	68f8      	ldr	r0, [r7, #12]
 8000faa:	f000 fd85 	bl	8001ab8 <interleave_reg_addr>
                temp_len = ((len * 2) - 1);
 8000fae:	79fb      	ldrb	r3, [r7, #7]
 8000fb0:	b29b      	uxth	r3, r3
 8000fb2:	005b      	lsls	r3, r3, #1
 8000fb4:	b29b      	uxth	r3, r3
 8000fb6:	3b01      	subs	r3, #1
 8000fb8:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8000fba:	e001      	b.n	8000fc0 <bme280_set_regs+0xaa>
            }
            else
            {
                temp_len = len;
 8000fbc:	79fb      	ldrb	r3, [r7, #7]
 8000fbe:	85bb      	strh	r3, [r7, #44]	; 0x2c
            }

            dev->intf_rslt = dev->write(reg_addr[0], temp_buff, temp_len, dev->intf_ptr);
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	691c      	ldr	r4, [r3, #16]
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	7818      	ldrb	r0, [r3, #0]
 8000fc8:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	f107 0114 	add.w	r1, r7, #20
 8000fd2:	47a0      	blx	r4
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	461a      	mov	r2, r3
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            /* Check for communication error */
            if (dev->intf_rslt != BME280_INTF_RET_SUCCESS)
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	f993 3045 	ldrsb.w	r3, [r3, #69]	; 0x45
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d00b      	beq.n	8001000 <bme280_set_regs+0xea>
            {
                rslt = BME280_E_COMM_FAIL;
 8000fe8:	23fc      	movs	r3, #252	; 0xfc
 8000fea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        if (len != 0)
 8000fee:	e007      	b.n	8001000 <bme280_set_regs+0xea>
            }
        }
        else
        {
            rslt = BME280_E_INVALID_LEN;
 8000ff0:	23fd      	movs	r3, #253	; 0xfd
 8000ff2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        if (len != 0)
 8000ff6:	e003      	b.n	8001000 <bme280_set_regs+0xea>
        }
    }
    else
    {
        rslt = BME280_E_NULL_PTR;
 8000ff8:	23ff      	movs	r3, #255	; 0xff
 8000ffa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8000ffe:	e000      	b.n	8001002 <bme280_set_regs+0xec>
        if (len != 0)
 8001000:	bf00      	nop
    }

    return rslt;
 8001002:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8001006:	4618      	mov	r0, r3
 8001008:	3734      	adds	r7, #52	; 0x34
 800100a:	46bd      	mov	sp, r7
 800100c:	bd90      	pop	{r4, r7, pc}

0800100e <bme280_soft_reset>:

/*!
 * @brief This API performs the soft reset of the sensor.
 */
int8_t bme280_soft_reset(struct bme280_dev *dev)
{
 800100e:	b580      	push	{r7, lr}
 8001010:	b084      	sub	sp, #16
 8001012:	af00      	add	r7, sp, #0
 8001014:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BME280_RESET_ADDR;
 8001016:	23e0      	movs	r3, #224	; 0xe0
 8001018:	737b      	strb	r3, [r7, #13]
    uint8_t status_reg = 0;
 800101a:	2300      	movs	r3, #0
 800101c:	733b      	strb	r3, [r7, #12]
    uint8_t try_run = 5;
 800101e:	2305      	movs	r3, #5
 8001020:	73bb      	strb	r3, [r7, #14]

    /* 0xB6 is the soft reset command */
    uint8_t soft_rst_cmd = BME280_SOFT_RESET_COMMAND;
 8001022:	23b6      	movs	r3, #182	; 0xb6
 8001024:	72fb      	strb	r3, [r7, #11]

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8001026:	6878      	ldr	r0, [r7, #4]
 8001028:	f000 fe6e 	bl	8001d08 <null_ptr_check>
 800102c:	4603      	mov	r3, r0
 800102e:	73fb      	strb	r3, [r7, #15]

    /* Proceed if null check is fine */
    if (rslt == BME280_OK)
 8001030:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001034:	2b00      	cmp	r3, #0
 8001036:	d133      	bne.n	80010a0 <bme280_soft_reset+0x92>
    {
        /* Write the soft reset command in the sensor */
        rslt = bme280_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 8001038:	f107 010b 	add.w	r1, r7, #11
 800103c:	f107 000d 	add.w	r0, r7, #13
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	2201      	movs	r2, #1
 8001044:	f7ff ff67 	bl	8000f16 <bme280_set_regs>
 8001048:	4603      	mov	r3, r0
 800104a:	73fb      	strb	r3, [r7, #15]

        if (rslt == BME280_OK)
 800104c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001050:	2b00      	cmp	r3, #0
 8001052:	d125      	bne.n	80010a0 <bme280_soft_reset+0x92>
        {
            /* If NVM not copied yet, Wait for NVM to copy */
            do
            {
                /* As per data sheet - Table 1, startup time is 2 ms. */
                dev->delay_us(2000, dev->intf_ptr);
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	695b      	ldr	r3, [r3, #20]
 8001058:	687a      	ldr	r2, [r7, #4]
 800105a:	6852      	ldr	r2, [r2, #4]
 800105c:	4611      	mov	r1, r2
 800105e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001062:	4798      	blx	r3
                rslt = bme280_get_regs(BME280_STATUS_REG_ADDR, &status_reg, 1, dev);
 8001064:	f107 010c 	add.w	r1, r7, #12
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	2201      	movs	r2, #1
 800106c:	20f3      	movs	r0, #243	; 0xf3
 800106e:	f7ff ff18 	bl	8000ea2 <bme280_get_regs>
 8001072:	4603      	mov	r3, r0
 8001074:	73fb      	strb	r3, [r7, #15]

            } while ((rslt == BME280_OK) && (try_run--) && (status_reg & BME280_STATUS_IM_UPDATE));
 8001076:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800107a:	2b00      	cmp	r3, #0
 800107c:	d109      	bne.n	8001092 <bme280_soft_reset+0x84>
 800107e:	7bbb      	ldrb	r3, [r7, #14]
 8001080:	1e5a      	subs	r2, r3, #1
 8001082:	73ba      	strb	r2, [r7, #14]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d004      	beq.n	8001092 <bme280_soft_reset+0x84>
 8001088:	7b3b      	ldrb	r3, [r7, #12]
 800108a:	f003 0301 	and.w	r3, r3, #1
 800108e:	2b00      	cmp	r3, #0
 8001090:	d1e0      	bne.n	8001054 <bme280_soft_reset+0x46>

            if (status_reg & BME280_STATUS_IM_UPDATE)
 8001092:	7b3b      	ldrb	r3, [r7, #12]
 8001094:	f003 0301 	and.w	r3, r3, #1
 8001098:	2b00      	cmp	r3, #0
 800109a:	d001      	beq.n	80010a0 <bme280_soft_reset+0x92>
            {
                rslt = BME280_E_NVM_COPY_FAILED;
 800109c:	23fa      	movs	r3, #250	; 0xfa
 800109e:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 80010a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80010a4:	4618      	mov	r0, r3
 80010a6:	3710      	adds	r7, #16
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}

080010ac <bme280_get_sensor_data>:
 * @brief This API reads the pressure, temperature and humidity data from the
 * sensor, compensates the data and store it in the bme280_data structure
 * instance passed by the user.
 */
int8_t bme280_get_sensor_data(uint8_t sensor_comp, struct bme280_data *comp_data, struct bme280_dev *dev)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b08a      	sub	sp, #40	; 0x28
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	4603      	mov	r3, r0
 80010b4:	60b9      	str	r1, [r7, #8]
 80010b6:	607a      	str	r2, [r7, #4]
 80010b8:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    /* Array to store the pressure, temperature and humidity data read from
     * the sensor
     */
    uint8_t reg_data[BME280_P_T_H_DATA_LEN] = { 0 };
 80010ba:	f107 031c 	add.w	r3, r7, #28
 80010be:	2200      	movs	r2, #0
 80010c0:	601a      	str	r2, [r3, #0]
 80010c2:	605a      	str	r2, [r3, #4]
    struct bme280_uncomp_data uncomp_data = { 0 };
 80010c4:	f107 0310 	add.w	r3, r7, #16
 80010c8:	2200      	movs	r2, #0
 80010ca:	601a      	str	r2, [r3, #0]
 80010cc:	605a      	str	r2, [r3, #4]
 80010ce:	609a      	str	r2, [r3, #8]

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 80010d0:	6878      	ldr	r0, [r7, #4]
 80010d2:	f000 fe19 	bl	8001d08 <null_ptr_check>
 80010d6:	4603      	mov	r3, r0
 80010d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if ((rslt == BME280_OK) && (comp_data != NULL))
 80010dc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d124      	bne.n	800112e <bme280_get_sensor_data+0x82>
 80010e4:	68bb      	ldr	r3, [r7, #8]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d021      	beq.n	800112e <bme280_get_sensor_data+0x82>
    {
        /* Read the pressure and temperature data from the sensor */
        rslt = bme280_get_regs(BME280_DATA_ADDR, reg_data, BME280_P_T_H_DATA_LEN, dev);
 80010ea:	f107 011c 	add.w	r1, r7, #28
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	2208      	movs	r2, #8
 80010f2:	20f7      	movs	r0, #247	; 0xf7
 80010f4:	f7ff fed5 	bl	8000ea2 <bme280_get_regs>
 80010f8:	4603      	mov	r3, r0
 80010fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        if (rslt == BME280_OK)
 80010fe:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001102:	2b00      	cmp	r3, #0
 8001104:	d116      	bne.n	8001134 <bme280_get_sensor_data+0x88>
        {
            /* Parse the read data from the sensor */
            bme280_parse_sensor_data(reg_data, &uncomp_data);
 8001106:	f107 0210 	add.w	r2, r7, #16
 800110a:	f107 031c 	add.w	r3, r7, #28
 800110e:	4611      	mov	r1, r2
 8001110:	4618      	mov	r0, r3
 8001112:	f000 f815 	bl	8001140 <bme280_parse_sensor_data>

            /* Compensate the pressure and/or temperature and/or
             * humidity data from the sensor
             */
            rslt = bme280_compensate_data(sensor_comp, &uncomp_data, comp_data, &dev->calib_data);
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	3318      	adds	r3, #24
 800111a:	f107 0110 	add.w	r1, r7, #16
 800111e:	7bf8      	ldrb	r0, [r7, #15]
 8001120:	68ba      	ldr	r2, [r7, #8]
 8001122:	f000 f853 	bl	80011cc <bme280_compensate_data>
 8001126:	4603      	mov	r3, r0
 8001128:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (rslt == BME280_OK)
 800112c:	e002      	b.n	8001134 <bme280_get_sensor_data+0x88>
        }
    }
    else
    {
        rslt = BME280_E_NULL_PTR;
 800112e:	23ff      	movs	r3, #255	; 0xff
 8001130:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    return rslt;
 8001134:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8001138:	4618      	mov	r0, r3
 800113a:	3728      	adds	r7, #40	; 0x28
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}

08001140 <bme280_parse_sensor_data>:
/*!
 *  @brief This API is used to parse the pressure, temperature and
 *  humidity data and store it in the bme280_uncomp_data structure instance.
 */
void bme280_parse_sensor_data(const uint8_t *reg_data, struct bme280_uncomp_data *uncomp_data)
{
 8001140:	b480      	push	{r7}
 8001142:	b087      	sub	sp, #28
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
 8001148:	6039      	str	r1, [r7, #0]
    uint32_t data_xlsb;
    uint32_t data_lsb;
    uint32_t data_msb;

    /* Store the parsed register values for pressure data */
    data_msb = (uint32_t)reg_data[0] << 12;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	781b      	ldrb	r3, [r3, #0]
 800114e:	031b      	lsls	r3, r3, #12
 8001150:	617b      	str	r3, [r7, #20]
    data_lsb = (uint32_t)reg_data[1] << 4;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	3301      	adds	r3, #1
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	011b      	lsls	r3, r3, #4
 800115a:	613b      	str	r3, [r7, #16]
    data_xlsb = (uint32_t)reg_data[2] >> 4;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	3302      	adds	r3, #2
 8001160:	781b      	ldrb	r3, [r3, #0]
 8001162:	091b      	lsrs	r3, r3, #4
 8001164:	b2db      	uxtb	r3, r3
 8001166:	60fb      	str	r3, [r7, #12]
    uncomp_data->pressure = data_msb | data_lsb | data_xlsb;
 8001168:	697a      	ldr	r2, [r7, #20]
 800116a:	693b      	ldr	r3, [r7, #16]
 800116c:	431a      	orrs	r2, r3
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	431a      	orrs	r2, r3
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	601a      	str	r2, [r3, #0]

    /* Store the parsed register values for temperature data */
    data_msb = (uint32_t)reg_data[3] << 12;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	3303      	adds	r3, #3
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	031b      	lsls	r3, r3, #12
 800117e:	617b      	str	r3, [r7, #20]
    data_lsb = (uint32_t)reg_data[4] << 4;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	3304      	adds	r3, #4
 8001184:	781b      	ldrb	r3, [r3, #0]
 8001186:	011b      	lsls	r3, r3, #4
 8001188:	613b      	str	r3, [r7, #16]
    data_xlsb = (uint32_t)reg_data[5] >> 4;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	3305      	adds	r3, #5
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	091b      	lsrs	r3, r3, #4
 8001192:	b2db      	uxtb	r3, r3
 8001194:	60fb      	str	r3, [r7, #12]
    uncomp_data->temperature = data_msb | data_lsb | data_xlsb;
 8001196:	697a      	ldr	r2, [r7, #20]
 8001198:	693b      	ldr	r3, [r7, #16]
 800119a:	431a      	orrs	r2, r3
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	431a      	orrs	r2, r3
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	605a      	str	r2, [r3, #4]

    /* Store the parsed register values for humidity data */
    data_msb = (uint32_t)reg_data[6] << 8;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	3306      	adds	r3, #6
 80011a8:	781b      	ldrb	r3, [r3, #0]
 80011aa:	021b      	lsls	r3, r3, #8
 80011ac:	617b      	str	r3, [r7, #20]
    data_lsb = (uint32_t)reg_data[7];
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	3307      	adds	r3, #7
 80011b2:	781b      	ldrb	r3, [r3, #0]
 80011b4:	613b      	str	r3, [r7, #16]
    uncomp_data->humidity = data_msb | data_lsb;
 80011b6:	697a      	ldr	r2, [r7, #20]
 80011b8:	693b      	ldr	r3, [r7, #16]
 80011ba:	431a      	orrs	r2, r3
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	609a      	str	r2, [r3, #8]
}
 80011c0:	bf00      	nop
 80011c2:	371c      	adds	r7, #28
 80011c4:	46bd      	mov	sp, r7
 80011c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ca:	4770      	bx	lr

080011cc <bme280_compensate_data>:
 */
int8_t bme280_compensate_data(uint8_t sensor_comp,
                              const struct bme280_uncomp_data *uncomp_data,
                              struct bme280_data *comp_data,
                              struct bme280_calib_data *calib_data)
{
 80011cc:	b590      	push	{r4, r7, lr}
 80011ce:	b087      	sub	sp, #28
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	60b9      	str	r1, [r7, #8]
 80011d4:	607a      	str	r2, [r7, #4]
 80011d6:	603b      	str	r3, [r7, #0]
 80011d8:	4603      	mov	r3, r0
 80011da:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BME280_OK;
 80011dc:	2300      	movs	r3, #0
 80011de:	75fb      	strb	r3, [r7, #23]

    if ((uncomp_data != NULL) && (comp_data != NULL) && (calib_data != NULL))
 80011e0:	68bb      	ldr	r3, [r7, #8]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d04b      	beq.n	800127e <bme280_compensate_data+0xb2>
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d048      	beq.n	800127e <bme280_compensate_data+0xb2>
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d045      	beq.n	800127e <bme280_compensate_data+0xb2>
    {
        /* Initialize to zero */
        comp_data->temperature = 0;
 80011f2:	687a      	ldr	r2, [r7, #4]
 80011f4:	f04f 0300 	mov.w	r3, #0
 80011f8:	f04f 0400 	mov.w	r4, #0
 80011fc:	e9c2 3402 	strd	r3, r4, [r2, #8]
        comp_data->pressure = 0;
 8001200:	687a      	ldr	r2, [r7, #4]
 8001202:	f04f 0300 	mov.w	r3, #0
 8001206:	f04f 0400 	mov.w	r4, #0
 800120a:	e9c2 3400 	strd	r3, r4, [r2]
        comp_data->humidity = 0;
 800120e:	687a      	ldr	r2, [r7, #4]
 8001210:	f04f 0300 	mov.w	r3, #0
 8001214:	f04f 0400 	mov.w	r4, #0
 8001218:	e9c2 3404 	strd	r3, r4, [r2, #16]

        /* If pressure or temperature component is selected */
        if (sensor_comp & (BME280_PRESS | BME280_TEMP | BME280_HUM))
 800121c:	7bfb      	ldrb	r3, [r7, #15]
 800121e:	f003 0307 	and.w	r3, r3, #7
 8001222:	2b00      	cmp	r3, #0
 8001224:	d00a      	beq.n	800123c <bme280_compensate_data+0x70>
        {
            /* Compensate the temperature data */
            comp_data->temperature = compensate_temperature(uncomp_data, calib_data);
 8001226:	6839      	ldr	r1, [r7, #0]
 8001228:	68b8      	ldr	r0, [r7, #8]
 800122a:	f000 f831 	bl	8001290 <compensate_temperature>
 800122e:	eeb0 7a40 	vmov.f32	s14, s0
 8001232:	eef0 7a60 	vmov.f32	s15, s1
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	ed83 7b02 	vstr	d7, [r3, #8]
        }

        if (sensor_comp & BME280_PRESS)
 800123c:	7bfb      	ldrb	r3, [r7, #15]
 800123e:	f003 0301 	and.w	r3, r3, #1
 8001242:	2b00      	cmp	r3, #0
 8001244:	d00a      	beq.n	800125c <bme280_compensate_data+0x90>
        {
            /* Compensate the pressure data */
            comp_data->pressure = compensate_pressure(uncomp_data, calib_data);
 8001246:	6839      	ldr	r1, [r7, #0]
 8001248:	68b8      	ldr	r0, [r7, #8]
 800124a:	f000 f8f5 	bl	8001438 <compensate_pressure>
 800124e:	eeb0 7a40 	vmov.f32	s14, s0
 8001252:	eef0 7a60 	vmov.f32	s15, s1
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	ed83 7b00 	vstr	d7, [r3]
        }

        if (sensor_comp & BME280_HUM)
 800125c:	7bfb      	ldrb	r3, [r7, #15]
 800125e:	f003 0304 	and.w	r3, r3, #4
 8001262:	2b00      	cmp	r3, #0
 8001264:	d00d      	beq.n	8001282 <bme280_compensate_data+0xb6>
        {
            /* Compensate the humidity data */
            comp_data->humidity = compensate_humidity(uncomp_data, calib_data);
 8001266:	6839      	ldr	r1, [r7, #0]
 8001268:	68b8      	ldr	r0, [r7, #8]
 800126a:	f000 fabd 	bl	80017e8 <compensate_humidity>
 800126e:	eeb0 7a40 	vmov.f32	s14, s0
 8001272:	eef0 7a60 	vmov.f32	s15, s1
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	ed83 7b04 	vstr	d7, [r3, #16]
        if (sensor_comp & BME280_HUM)
 800127c:	e001      	b.n	8001282 <bme280_compensate_data+0xb6>
        }
    }
    else
    {
        rslt = BME280_E_NULL_PTR;
 800127e:	23ff      	movs	r3, #255	; 0xff
 8001280:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001282:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001286:	4618      	mov	r0, r3
 8001288:	371c      	adds	r7, #28
 800128a:	46bd      	mov	sp, r7
 800128c:	bd90      	pop	{r4, r7, pc}
	...

08001290 <compensate_temperature>:
/*!
 * @brief This internal API is used to compensate the raw temperature data and
 * return the compensated temperature data in double data type.
 */
static double compensate_temperature(const struct bme280_uncomp_data *uncomp_data, struct bme280_calib_data *calib_data)
{
 8001290:	b5b0      	push	{r4, r5, r7, lr}
 8001292:	b08c      	sub	sp, #48	; 0x30
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
 8001298:	6039      	str	r1, [r7, #0]
    double var1;
    double var2;
    double temperature;
    double temperature_min = -40;
 800129a:	f04f 0300 	mov.w	r3, #0
 800129e:	4c60      	ldr	r4, [pc, #384]	; (8001420 <compensate_temperature+0x190>)
 80012a0:	e9c7 3408 	strd	r3, r4, [r7, #32]
    double temperature_max = 85;
 80012a4:	f04f 0300 	mov.w	r3, #0
 80012a8:	4c5e      	ldr	r4, [pc, #376]	; (8001424 <compensate_temperature+0x194>)
 80012aa:	e9c7 3406 	strd	r3, r4, [r7, #24]

    var1 = ((double)uncomp_data->temperature) / 16384.0 - ((double)calib_data->dig_t1) / 1024.0;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	4618      	mov	r0, r3
 80012b4:	f7ff f8ea 	bl	800048c <__aeabi_ui2d>
 80012b8:	f04f 0200 	mov.w	r2, #0
 80012bc:	4b5a      	ldr	r3, [pc, #360]	; (8001428 <compensate_temperature+0x198>)
 80012be:	f7ff fa89 	bl	80007d4 <__aeabi_ddiv>
 80012c2:	4603      	mov	r3, r0
 80012c4:	460c      	mov	r4, r1
 80012c6:	4625      	mov	r5, r4
 80012c8:	461c      	mov	r4, r3
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	881b      	ldrh	r3, [r3, #0]
 80012ce:	4618      	mov	r0, r3
 80012d0:	f7ff f8dc 	bl	800048c <__aeabi_ui2d>
 80012d4:	f04f 0200 	mov.w	r2, #0
 80012d8:	4b54      	ldr	r3, [pc, #336]	; (800142c <compensate_temperature+0x19c>)
 80012da:	f7ff fa7b 	bl	80007d4 <__aeabi_ddiv>
 80012de:	4602      	mov	r2, r0
 80012e0:	460b      	mov	r3, r1
 80012e2:	4620      	mov	r0, r4
 80012e4:	4629      	mov	r1, r5
 80012e6:	f7fe ff93 	bl	8000210 <__aeabi_dsub>
 80012ea:	4603      	mov	r3, r0
 80012ec:	460c      	mov	r4, r1
 80012ee:	e9c7 3404 	strd	r3, r4, [r7, #16]
    var1 = var1 * ((double)calib_data->dig_t2);
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80012f8:	4618      	mov	r0, r3
 80012fa:	f7ff f8d7 	bl	80004ac <__aeabi_i2d>
 80012fe:	4603      	mov	r3, r0
 8001300:	460c      	mov	r4, r1
 8001302:	461a      	mov	r2, r3
 8001304:	4623      	mov	r3, r4
 8001306:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800130a:	f7ff f939 	bl	8000580 <__aeabi_dmul>
 800130e:	4603      	mov	r3, r0
 8001310:	460c      	mov	r4, r1
 8001312:	e9c7 3404 	strd	r3, r4, [r7, #16]
    var2 = (((double)uncomp_data->temperature) / 131072.0 - ((double)calib_data->dig_t1) / 8192.0);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	4618      	mov	r0, r3
 800131c:	f7ff f8b6 	bl	800048c <__aeabi_ui2d>
 8001320:	f04f 0200 	mov.w	r2, #0
 8001324:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 8001328:	f7ff fa54 	bl	80007d4 <__aeabi_ddiv>
 800132c:	4603      	mov	r3, r0
 800132e:	460c      	mov	r4, r1
 8001330:	4625      	mov	r5, r4
 8001332:	461c      	mov	r4, r3
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	881b      	ldrh	r3, [r3, #0]
 8001338:	4618      	mov	r0, r3
 800133a:	f7ff f8a7 	bl	800048c <__aeabi_ui2d>
 800133e:	f04f 0200 	mov.w	r2, #0
 8001342:	4b3b      	ldr	r3, [pc, #236]	; (8001430 <compensate_temperature+0x1a0>)
 8001344:	f7ff fa46 	bl	80007d4 <__aeabi_ddiv>
 8001348:	4602      	mov	r2, r0
 800134a:	460b      	mov	r3, r1
 800134c:	4620      	mov	r0, r4
 800134e:	4629      	mov	r1, r5
 8001350:	f7fe ff5e 	bl	8000210 <__aeabi_dsub>
 8001354:	4603      	mov	r3, r0
 8001356:	460c      	mov	r4, r1
 8001358:	e9c7 3402 	strd	r3, r4, [r7, #8]
    var2 = (var2 * var2) * ((double)calib_data->dig_t3);
 800135c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001360:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001364:	f7ff f90c 	bl	8000580 <__aeabi_dmul>
 8001368:	4603      	mov	r3, r0
 800136a:	460c      	mov	r4, r1
 800136c:	4625      	mov	r5, r4
 800136e:	461c      	mov	r4, r3
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001376:	4618      	mov	r0, r3
 8001378:	f7ff f898 	bl	80004ac <__aeabi_i2d>
 800137c:	4602      	mov	r2, r0
 800137e:	460b      	mov	r3, r1
 8001380:	4620      	mov	r0, r4
 8001382:	4629      	mov	r1, r5
 8001384:	f7ff f8fc 	bl	8000580 <__aeabi_dmul>
 8001388:	4603      	mov	r3, r0
 800138a:	460c      	mov	r4, r1
 800138c:	e9c7 3402 	strd	r3, r4, [r7, #8]
    calib_data->t_fine = (int32_t)(var1 + var2);
 8001390:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001394:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001398:	f7fe ff3c 	bl	8000214 <__adddf3>
 800139c:	4603      	mov	r3, r0
 800139e:	460c      	mov	r4, r1
 80013a0:	4618      	mov	r0, r3
 80013a2:	4621      	mov	r1, r4
 80013a4:	f7ff fb86 	bl	8000ab4 <__aeabi_d2iz>
 80013a8:	4602      	mov	r2, r0
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	625a      	str	r2, [r3, #36]	; 0x24
    temperature = (var1 + var2) / 5120.0;
 80013ae:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80013b2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80013b6:	f7fe ff2d 	bl	8000214 <__adddf3>
 80013ba:	4603      	mov	r3, r0
 80013bc:	460c      	mov	r4, r1
 80013be:	4618      	mov	r0, r3
 80013c0:	4621      	mov	r1, r4
 80013c2:	f04f 0200 	mov.w	r2, #0
 80013c6:	4b1b      	ldr	r3, [pc, #108]	; (8001434 <compensate_temperature+0x1a4>)
 80013c8:	f7ff fa04 	bl	80007d4 <__aeabi_ddiv>
 80013cc:	4603      	mov	r3, r0
 80013ce:	460c      	mov	r4, r1
 80013d0:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28

    if (temperature < temperature_min)
 80013d4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80013d8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80013dc:	f7ff fb42 	bl	8000a64 <__aeabi_dcmplt>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d004      	beq.n	80013f0 <compensate_temperature+0x160>
    {
        temperature = temperature_min;
 80013e6:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80013ea:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
 80013ee:	e00c      	b.n	800140a <compensate_temperature+0x17a>
    }
    else if (temperature > temperature_max)
 80013f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80013f4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80013f8:	f7ff fb52 	bl	8000aa0 <__aeabi_dcmpgt>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d003      	beq.n	800140a <compensate_temperature+0x17a>
    {
        temperature = temperature_max;
 8001402:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8001406:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
    }

    return temperature;
 800140a:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 800140e:	ec44 3b17 	vmov	d7, r3, r4
}
 8001412:	eeb0 0a47 	vmov.f32	s0, s14
 8001416:	eef0 0a67 	vmov.f32	s1, s15
 800141a:	3730      	adds	r7, #48	; 0x30
 800141c:	46bd      	mov	sp, r7
 800141e:	bdb0      	pop	{r4, r5, r7, pc}
 8001420:	c0440000 	.word	0xc0440000
 8001424:	40554000 	.word	0x40554000
 8001428:	40d00000 	.word	0x40d00000
 800142c:	40900000 	.word	0x40900000
 8001430:	40c00000 	.word	0x40c00000
 8001434:	40b40000 	.word	0x40b40000

08001438 <compensate_pressure>:
 * @brief This internal API is used to compensate the raw pressure data and
 * return the compensated pressure data in double data type.
 */
static double compensate_pressure(const struct bme280_uncomp_data *uncomp_data,
                                  const struct bme280_calib_data *calib_data)
{
 8001438:	b5b0      	push	{r4, r5, r7, lr}
 800143a:	b08e      	sub	sp, #56	; 0x38
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
 8001440:	6039      	str	r1, [r7, #0]
    double var1;
    double var2;
    double var3;
    double pressure;
    double pressure_min = 30000.0;
 8001442:	a4dd      	add	r4, pc, #884	; (adr r4, 80017b8 <compensate_pressure+0x380>)
 8001444:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001448:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
    double pressure_max = 110000.0;
 800144c:	a4dc      	add	r4, pc, #880	; (adr r4, 80017c0 <compensate_pressure+0x388>)
 800144e:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001452:	e9c7 3408 	strd	r3, r4, [r7, #32]

    var1 = ((double)calib_data->t_fine / 2.0) - 64000.0;
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800145a:	4618      	mov	r0, r3
 800145c:	f7ff f826 	bl	80004ac <__aeabi_i2d>
 8001460:	f04f 0200 	mov.w	r2, #0
 8001464:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001468:	f7ff f9b4 	bl	80007d4 <__aeabi_ddiv>
 800146c:	4603      	mov	r3, r0
 800146e:	460c      	mov	r4, r1
 8001470:	4618      	mov	r0, r3
 8001472:	4621      	mov	r1, r4
 8001474:	f04f 0200 	mov.w	r2, #0
 8001478:	4bc5      	ldr	r3, [pc, #788]	; (8001790 <compensate_pressure+0x358>)
 800147a:	f7fe fec9 	bl	8000210 <__aeabi_dsub>
 800147e:	4603      	mov	r3, r0
 8001480:	460c      	mov	r4, r1
 8001482:	e9c7 3406 	strd	r3, r4, [r7, #24]
    var2 = var1 * var1 * ((double)calib_data->dig_p6) / 32768.0;
 8001486:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800148a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800148e:	f7ff f877 	bl	8000580 <__aeabi_dmul>
 8001492:	4603      	mov	r3, r0
 8001494:	460c      	mov	r4, r1
 8001496:	4625      	mov	r5, r4
 8001498:	461c      	mov	r4, r3
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80014a0:	4618      	mov	r0, r3
 80014a2:	f7ff f803 	bl	80004ac <__aeabi_i2d>
 80014a6:	4602      	mov	r2, r0
 80014a8:	460b      	mov	r3, r1
 80014aa:	4620      	mov	r0, r4
 80014ac:	4629      	mov	r1, r5
 80014ae:	f7ff f867 	bl	8000580 <__aeabi_dmul>
 80014b2:	4603      	mov	r3, r0
 80014b4:	460c      	mov	r4, r1
 80014b6:	4618      	mov	r0, r3
 80014b8:	4621      	mov	r1, r4
 80014ba:	f04f 0200 	mov.w	r2, #0
 80014be:	4bb5      	ldr	r3, [pc, #724]	; (8001794 <compensate_pressure+0x35c>)
 80014c0:	f7ff f988 	bl	80007d4 <__aeabi_ddiv>
 80014c4:	4603      	mov	r3, r0
 80014c6:	460c      	mov	r4, r1
 80014c8:	e9c7 3404 	strd	r3, r4, [r7, #16]
    var2 = var2 + var1 * ((double)calib_data->dig_p5) * 2.0;
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80014d2:	4618      	mov	r0, r3
 80014d4:	f7fe ffea 	bl	80004ac <__aeabi_i2d>
 80014d8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80014dc:	f7ff f850 	bl	8000580 <__aeabi_dmul>
 80014e0:	4603      	mov	r3, r0
 80014e2:	460c      	mov	r4, r1
 80014e4:	4618      	mov	r0, r3
 80014e6:	4621      	mov	r1, r4
 80014e8:	4602      	mov	r2, r0
 80014ea:	460b      	mov	r3, r1
 80014ec:	f7fe fe92 	bl	8000214 <__adddf3>
 80014f0:	4603      	mov	r3, r0
 80014f2:	460c      	mov	r4, r1
 80014f4:	461a      	mov	r2, r3
 80014f6:	4623      	mov	r3, r4
 80014f8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80014fc:	f7fe fe8a 	bl	8000214 <__adddf3>
 8001500:	4603      	mov	r3, r0
 8001502:	460c      	mov	r4, r1
 8001504:	e9c7 3404 	strd	r3, r4, [r7, #16]
    var2 = (var2 / 4.0) + (((double)calib_data->dig_p4) * 65536.0);
 8001508:	f04f 0200 	mov.w	r2, #0
 800150c:	4ba2      	ldr	r3, [pc, #648]	; (8001798 <compensate_pressure+0x360>)
 800150e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001512:	f7ff f95f 	bl	80007d4 <__aeabi_ddiv>
 8001516:	4603      	mov	r3, r0
 8001518:	460c      	mov	r4, r1
 800151a:	4625      	mov	r5, r4
 800151c:	461c      	mov	r4, r3
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001524:	4618      	mov	r0, r3
 8001526:	f7fe ffc1 	bl	80004ac <__aeabi_i2d>
 800152a:	f04f 0200 	mov.w	r2, #0
 800152e:	4b9b      	ldr	r3, [pc, #620]	; (800179c <compensate_pressure+0x364>)
 8001530:	f7ff f826 	bl	8000580 <__aeabi_dmul>
 8001534:	4602      	mov	r2, r0
 8001536:	460b      	mov	r3, r1
 8001538:	4620      	mov	r0, r4
 800153a:	4629      	mov	r1, r5
 800153c:	f7fe fe6a 	bl	8000214 <__adddf3>
 8001540:	4603      	mov	r3, r0
 8001542:	460c      	mov	r4, r1
 8001544:	e9c7 3404 	strd	r3, r4, [r7, #16]
    var3 = ((double)calib_data->dig_p3) * var1 * var1 / 524288.0;
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800154e:	4618      	mov	r0, r3
 8001550:	f7fe ffac 	bl	80004ac <__aeabi_i2d>
 8001554:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001558:	f7ff f812 	bl	8000580 <__aeabi_dmul>
 800155c:	4603      	mov	r3, r0
 800155e:	460c      	mov	r4, r1
 8001560:	4618      	mov	r0, r3
 8001562:	4621      	mov	r1, r4
 8001564:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001568:	f7ff f80a 	bl	8000580 <__aeabi_dmul>
 800156c:	4603      	mov	r3, r0
 800156e:	460c      	mov	r4, r1
 8001570:	4618      	mov	r0, r3
 8001572:	4621      	mov	r1, r4
 8001574:	f04f 0200 	mov.w	r2, #0
 8001578:	4b89      	ldr	r3, [pc, #548]	; (80017a0 <compensate_pressure+0x368>)
 800157a:	f7ff f92b 	bl	80007d4 <__aeabi_ddiv>
 800157e:	4603      	mov	r3, r0
 8001580:	460c      	mov	r4, r1
 8001582:	e9c7 3402 	strd	r3, r4, [r7, #8]
    var1 = (var3 + ((double)calib_data->dig_p2) * var1) / 524288.0;
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800158c:	4618      	mov	r0, r3
 800158e:	f7fe ff8d 	bl	80004ac <__aeabi_i2d>
 8001592:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001596:	f7fe fff3 	bl	8000580 <__aeabi_dmul>
 800159a:	4603      	mov	r3, r0
 800159c:	460c      	mov	r4, r1
 800159e:	4618      	mov	r0, r3
 80015a0:	4621      	mov	r1, r4
 80015a2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80015a6:	f7fe fe35 	bl	8000214 <__adddf3>
 80015aa:	4603      	mov	r3, r0
 80015ac:	460c      	mov	r4, r1
 80015ae:	4618      	mov	r0, r3
 80015b0:	4621      	mov	r1, r4
 80015b2:	f04f 0200 	mov.w	r2, #0
 80015b6:	4b7a      	ldr	r3, [pc, #488]	; (80017a0 <compensate_pressure+0x368>)
 80015b8:	f7ff f90c 	bl	80007d4 <__aeabi_ddiv>
 80015bc:	4603      	mov	r3, r0
 80015be:	460c      	mov	r4, r1
 80015c0:	e9c7 3406 	strd	r3, r4, [r7, #24]
    var1 = (1.0 + var1 / 32768.0) * ((double)calib_data->dig_p1);
 80015c4:	f04f 0200 	mov.w	r2, #0
 80015c8:	4b72      	ldr	r3, [pc, #456]	; (8001794 <compensate_pressure+0x35c>)
 80015ca:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80015ce:	f7ff f901 	bl	80007d4 <__aeabi_ddiv>
 80015d2:	4603      	mov	r3, r0
 80015d4:	460c      	mov	r4, r1
 80015d6:	4618      	mov	r0, r3
 80015d8:	4621      	mov	r1, r4
 80015da:	f04f 0200 	mov.w	r2, #0
 80015de:	4b71      	ldr	r3, [pc, #452]	; (80017a4 <compensate_pressure+0x36c>)
 80015e0:	f7fe fe18 	bl	8000214 <__adddf3>
 80015e4:	4603      	mov	r3, r0
 80015e6:	460c      	mov	r4, r1
 80015e8:	4625      	mov	r5, r4
 80015ea:	461c      	mov	r4, r3
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	88db      	ldrh	r3, [r3, #6]
 80015f0:	4618      	mov	r0, r3
 80015f2:	f7fe ff4b 	bl	800048c <__aeabi_ui2d>
 80015f6:	4602      	mov	r2, r0
 80015f8:	460b      	mov	r3, r1
 80015fa:	4620      	mov	r0, r4
 80015fc:	4629      	mov	r1, r5
 80015fe:	f7fe ffbf 	bl	8000580 <__aeabi_dmul>
 8001602:	4603      	mov	r3, r0
 8001604:	460c      	mov	r4, r1
 8001606:	e9c7 3406 	strd	r3, r4, [r7, #24]

    /* avoid exception caused by division by zero */
    if (var1 > (0.0))
 800160a:	f04f 0200 	mov.w	r2, #0
 800160e:	f04f 0300 	mov.w	r3, #0
 8001612:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001616:	f7ff fa43 	bl	8000aa0 <__aeabi_dcmpgt>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	f000 80d3 	beq.w	80017c8 <compensate_pressure+0x390>
    {
        pressure = 1048576.0 - (double) uncomp_data->pressure;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4618      	mov	r0, r3
 8001628:	f7fe ff30 	bl	800048c <__aeabi_ui2d>
 800162c:	4603      	mov	r3, r0
 800162e:	460c      	mov	r4, r1
 8001630:	461a      	mov	r2, r3
 8001632:	4623      	mov	r3, r4
 8001634:	f04f 0000 	mov.w	r0, #0
 8001638:	495b      	ldr	r1, [pc, #364]	; (80017a8 <compensate_pressure+0x370>)
 800163a:	f7fe fde9 	bl	8000210 <__aeabi_dsub>
 800163e:	4603      	mov	r3, r0
 8001640:	460c      	mov	r4, r1
 8001642:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
        pressure = (pressure - (var2 / 4096.0)) * 6250.0 / var1;
 8001646:	f04f 0200 	mov.w	r2, #0
 800164a:	4b58      	ldr	r3, [pc, #352]	; (80017ac <compensate_pressure+0x374>)
 800164c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001650:	f7ff f8c0 	bl	80007d4 <__aeabi_ddiv>
 8001654:	4603      	mov	r3, r0
 8001656:	460c      	mov	r4, r1
 8001658:	461a      	mov	r2, r3
 800165a:	4623      	mov	r3, r4
 800165c:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001660:	f7fe fdd6 	bl	8000210 <__aeabi_dsub>
 8001664:	4603      	mov	r3, r0
 8001666:	460c      	mov	r4, r1
 8001668:	4618      	mov	r0, r3
 800166a:	4621      	mov	r1, r4
 800166c:	a346      	add	r3, pc, #280	; (adr r3, 8001788 <compensate_pressure+0x350>)
 800166e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001672:	f7fe ff85 	bl	8000580 <__aeabi_dmul>
 8001676:	4603      	mov	r3, r0
 8001678:	460c      	mov	r4, r1
 800167a:	4618      	mov	r0, r3
 800167c:	4621      	mov	r1, r4
 800167e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001682:	f7ff f8a7 	bl	80007d4 <__aeabi_ddiv>
 8001686:	4603      	mov	r3, r0
 8001688:	460c      	mov	r4, r1
 800168a:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
        var1 = ((double)calib_data->dig_p9) * pressure * pressure / 2147483648.0;
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001694:	4618      	mov	r0, r3
 8001696:	f7fe ff09 	bl	80004ac <__aeabi_i2d>
 800169a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800169e:	f7fe ff6f 	bl	8000580 <__aeabi_dmul>
 80016a2:	4603      	mov	r3, r0
 80016a4:	460c      	mov	r4, r1
 80016a6:	4618      	mov	r0, r3
 80016a8:	4621      	mov	r1, r4
 80016aa:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80016ae:	f7fe ff67 	bl	8000580 <__aeabi_dmul>
 80016b2:	4603      	mov	r3, r0
 80016b4:	460c      	mov	r4, r1
 80016b6:	4618      	mov	r0, r3
 80016b8:	4621      	mov	r1, r4
 80016ba:	f04f 0200 	mov.w	r2, #0
 80016be:	4b3c      	ldr	r3, [pc, #240]	; (80017b0 <compensate_pressure+0x378>)
 80016c0:	f7ff f888 	bl	80007d4 <__aeabi_ddiv>
 80016c4:	4603      	mov	r3, r0
 80016c6:	460c      	mov	r4, r1
 80016c8:	e9c7 3406 	strd	r3, r4, [r7, #24]
        var2 = pressure * ((double)calib_data->dig_p8) / 32768.0;
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80016d2:	4618      	mov	r0, r3
 80016d4:	f7fe feea 	bl	80004ac <__aeabi_i2d>
 80016d8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80016dc:	f7fe ff50 	bl	8000580 <__aeabi_dmul>
 80016e0:	4603      	mov	r3, r0
 80016e2:	460c      	mov	r4, r1
 80016e4:	4618      	mov	r0, r3
 80016e6:	4621      	mov	r1, r4
 80016e8:	f04f 0200 	mov.w	r2, #0
 80016ec:	4b29      	ldr	r3, [pc, #164]	; (8001794 <compensate_pressure+0x35c>)
 80016ee:	f7ff f871 	bl	80007d4 <__aeabi_ddiv>
 80016f2:	4603      	mov	r3, r0
 80016f4:	460c      	mov	r4, r1
 80016f6:	e9c7 3404 	strd	r3, r4, [r7, #16]
        pressure = pressure + (var1 + var2 + ((double)calib_data->dig_p7)) / 16.0;
 80016fa:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80016fe:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001702:	f7fe fd87 	bl	8000214 <__adddf3>
 8001706:	4603      	mov	r3, r0
 8001708:	460c      	mov	r4, r1
 800170a:	4625      	mov	r5, r4
 800170c:	461c      	mov	r4, r3
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001714:	4618      	mov	r0, r3
 8001716:	f7fe fec9 	bl	80004ac <__aeabi_i2d>
 800171a:	4602      	mov	r2, r0
 800171c:	460b      	mov	r3, r1
 800171e:	4620      	mov	r0, r4
 8001720:	4629      	mov	r1, r5
 8001722:	f7fe fd77 	bl	8000214 <__adddf3>
 8001726:	4603      	mov	r3, r0
 8001728:	460c      	mov	r4, r1
 800172a:	4618      	mov	r0, r3
 800172c:	4621      	mov	r1, r4
 800172e:	f04f 0200 	mov.w	r2, #0
 8001732:	4b20      	ldr	r3, [pc, #128]	; (80017b4 <compensate_pressure+0x37c>)
 8001734:	f7ff f84e 	bl	80007d4 <__aeabi_ddiv>
 8001738:	4603      	mov	r3, r0
 800173a:	460c      	mov	r4, r1
 800173c:	461a      	mov	r2, r3
 800173e:	4623      	mov	r3, r4
 8001740:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001744:	f7fe fd66 	bl	8000214 <__adddf3>
 8001748:	4603      	mov	r3, r0
 800174a:	460c      	mov	r4, r1
 800174c:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30

        if (pressure < pressure_min)
 8001750:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001754:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001758:	f7ff f984 	bl	8000a64 <__aeabi_dcmplt>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d004      	beq.n	800176c <compensate_pressure+0x334>
        {
            pressure = pressure_min;
 8001762:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8001766:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
 800176a:	e031      	b.n	80017d0 <compensate_pressure+0x398>
        }
        else if (pressure > pressure_max)
 800176c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001770:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001774:	f7ff f994 	bl	8000aa0 <__aeabi_dcmpgt>
 8001778:	4603      	mov	r3, r0
 800177a:	2b00      	cmp	r3, #0
 800177c:	d028      	beq.n	80017d0 <compensate_pressure+0x398>
        {
            pressure = pressure_max;
 800177e:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8001782:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
 8001786:	e023      	b.n	80017d0 <compensate_pressure+0x398>
 8001788:	00000000 	.word	0x00000000
 800178c:	40b86a00 	.word	0x40b86a00
 8001790:	40ef4000 	.word	0x40ef4000
 8001794:	40e00000 	.word	0x40e00000
 8001798:	40100000 	.word	0x40100000
 800179c:	40f00000 	.word	0x40f00000
 80017a0:	41200000 	.word	0x41200000
 80017a4:	3ff00000 	.word	0x3ff00000
 80017a8:	41300000 	.word	0x41300000
 80017ac:	40b00000 	.word	0x40b00000
 80017b0:	41e00000 	.word	0x41e00000
 80017b4:	40300000 	.word	0x40300000
 80017b8:	00000000 	.word	0x00000000
 80017bc:	40dd4c00 	.word	0x40dd4c00
 80017c0:	00000000 	.word	0x00000000
 80017c4:	40fadb00 	.word	0x40fadb00
        }
    }
    else /* Invalid case */
    {
        pressure = pressure_min;
 80017c8:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 80017cc:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
    }

    return pressure;
 80017d0:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 80017d4:	ec44 3b17 	vmov	d7, r3, r4
}
 80017d8:	eeb0 0a47 	vmov.f32	s0, s14
 80017dc:	eef0 0a67 	vmov.f32	s1, s15
 80017e0:	3738      	adds	r7, #56	; 0x38
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bdb0      	pop	{r4, r5, r7, pc}
 80017e6:	bf00      	nop

080017e8 <compensate_humidity>:
 * @brief This internal API is used to compensate the raw humidity data and
 * return the compensated humidity data in double data type.
 */
static double compensate_humidity(const struct bme280_uncomp_data *uncomp_data,
                                  const struct bme280_calib_data *calib_data)
{
 80017e8:	b5b0      	push	{r4, r5, r7, lr}
 80017ea:	b094      	sub	sp, #80	; 0x50
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
 80017f0:	6039      	str	r1, [r7, #0]
    double humidity;
    double humidity_min = 0.0;
 80017f2:	f04f 0300 	mov.w	r3, #0
 80017f6:	f04f 0400 	mov.w	r4, #0
 80017fa:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
    double humidity_max = 100.0;
 80017fe:	f04f 0300 	mov.w	r3, #0
 8001802:	4c83      	ldr	r4, [pc, #524]	; (8001a10 <compensate_humidity+0x228>)
 8001804:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
    double var3;
    double var4;
    double var5;
    double var6;

    var1 = ((double)calib_data->t_fine) - 76800.0;
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800180c:	4618      	mov	r0, r3
 800180e:	f7fe fe4d 	bl	80004ac <__aeabi_i2d>
 8001812:	f04f 0200 	mov.w	r2, #0
 8001816:	4b7f      	ldr	r3, [pc, #508]	; (8001a14 <compensate_humidity+0x22c>)
 8001818:	f7fe fcfa 	bl	8000210 <__aeabi_dsub>
 800181c:	4603      	mov	r3, r0
 800181e:	460c      	mov	r4, r1
 8001820:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
    var2 = (((double)calib_data->dig_h4) * 64.0 + (((double)calib_data->dig_h5) / 16384.0) * var1);
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 800182a:	4618      	mov	r0, r3
 800182c:	f7fe fe3e 	bl	80004ac <__aeabi_i2d>
 8001830:	f04f 0200 	mov.w	r2, #0
 8001834:	4b78      	ldr	r3, [pc, #480]	; (8001a18 <compensate_humidity+0x230>)
 8001836:	f7fe fea3 	bl	8000580 <__aeabi_dmul>
 800183a:	4603      	mov	r3, r0
 800183c:	460c      	mov	r4, r1
 800183e:	4625      	mov	r5, r4
 8001840:	461c      	mov	r4, r3
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001848:	4618      	mov	r0, r3
 800184a:	f7fe fe2f 	bl	80004ac <__aeabi_i2d>
 800184e:	f04f 0200 	mov.w	r2, #0
 8001852:	4b72      	ldr	r3, [pc, #456]	; (8001a1c <compensate_humidity+0x234>)
 8001854:	f7fe ffbe 	bl	80007d4 <__aeabi_ddiv>
 8001858:	4602      	mov	r2, r0
 800185a:	460b      	mov	r3, r1
 800185c:	4610      	mov	r0, r2
 800185e:	4619      	mov	r1, r3
 8001860:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001864:	f7fe fe8c 	bl	8000580 <__aeabi_dmul>
 8001868:	4602      	mov	r2, r0
 800186a:	460b      	mov	r3, r1
 800186c:	4620      	mov	r0, r4
 800186e:	4629      	mov	r1, r5
 8001870:	f7fe fcd0 	bl	8000214 <__adddf3>
 8001874:	4603      	mov	r3, r0
 8001876:	460c      	mov	r4, r1
 8001878:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
    var3 = uncomp_data->humidity - var2;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	689b      	ldr	r3, [r3, #8]
 8001880:	4618      	mov	r0, r3
 8001882:	f7fe fe03 	bl	800048c <__aeabi_ui2d>
 8001886:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800188a:	f7fe fcc1 	bl	8000210 <__aeabi_dsub>
 800188e:	4603      	mov	r3, r0
 8001890:	460c      	mov	r4, r1
 8001892:	e9c7 3408 	strd	r3, r4, [r7, #32]
    var4 = ((double)calib_data->dig_h2) / 65536.0;
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 800189c:	4618      	mov	r0, r3
 800189e:	f7fe fe05 	bl	80004ac <__aeabi_i2d>
 80018a2:	f04f 0200 	mov.w	r2, #0
 80018a6:	4b5e      	ldr	r3, [pc, #376]	; (8001a20 <compensate_humidity+0x238>)
 80018a8:	f7fe ff94 	bl	80007d4 <__aeabi_ddiv>
 80018ac:	4603      	mov	r3, r0
 80018ae:	460c      	mov	r4, r1
 80018b0:	e9c7 3406 	strd	r3, r4, [r7, #24]
    var5 = (1.0 + (((double)calib_data->dig_h3) / 67108864.0) * var1);
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	7f1b      	ldrb	r3, [r3, #28]
 80018b8:	4618      	mov	r0, r3
 80018ba:	f7fe fde7 	bl	800048c <__aeabi_ui2d>
 80018be:	f04f 0200 	mov.w	r2, #0
 80018c2:	4b58      	ldr	r3, [pc, #352]	; (8001a24 <compensate_humidity+0x23c>)
 80018c4:	f7fe ff86 	bl	80007d4 <__aeabi_ddiv>
 80018c8:	4603      	mov	r3, r0
 80018ca:	460c      	mov	r4, r1
 80018cc:	4618      	mov	r0, r3
 80018ce:	4621      	mov	r1, r4
 80018d0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80018d4:	f7fe fe54 	bl	8000580 <__aeabi_dmul>
 80018d8:	4603      	mov	r3, r0
 80018da:	460c      	mov	r4, r1
 80018dc:	4618      	mov	r0, r3
 80018de:	4621      	mov	r1, r4
 80018e0:	f04f 0200 	mov.w	r2, #0
 80018e4:	4b50      	ldr	r3, [pc, #320]	; (8001a28 <compensate_humidity+0x240>)
 80018e6:	f7fe fc95 	bl	8000214 <__adddf3>
 80018ea:	4603      	mov	r3, r0
 80018ec:	460c      	mov	r4, r1
 80018ee:	e9c7 3404 	strd	r3, r4, [r7, #16]
    var6 = 1.0 + (((double)calib_data->dig_h6) / 67108864.0) * var1 * var5;
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	f993 3022 	ldrsb.w	r3, [r3, #34]	; 0x22
 80018f8:	4618      	mov	r0, r3
 80018fa:	f7fe fdd7 	bl	80004ac <__aeabi_i2d>
 80018fe:	f04f 0200 	mov.w	r2, #0
 8001902:	4b48      	ldr	r3, [pc, #288]	; (8001a24 <compensate_humidity+0x23c>)
 8001904:	f7fe ff66 	bl	80007d4 <__aeabi_ddiv>
 8001908:	4603      	mov	r3, r0
 800190a:	460c      	mov	r4, r1
 800190c:	4618      	mov	r0, r3
 800190e:	4621      	mov	r1, r4
 8001910:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001914:	f7fe fe34 	bl	8000580 <__aeabi_dmul>
 8001918:	4603      	mov	r3, r0
 800191a:	460c      	mov	r4, r1
 800191c:	4618      	mov	r0, r3
 800191e:	4621      	mov	r1, r4
 8001920:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001924:	f7fe fe2c 	bl	8000580 <__aeabi_dmul>
 8001928:	4603      	mov	r3, r0
 800192a:	460c      	mov	r4, r1
 800192c:	4618      	mov	r0, r3
 800192e:	4621      	mov	r1, r4
 8001930:	f04f 0200 	mov.w	r2, #0
 8001934:	4b3c      	ldr	r3, [pc, #240]	; (8001a28 <compensate_humidity+0x240>)
 8001936:	f7fe fc6d 	bl	8000214 <__adddf3>
 800193a:	4603      	mov	r3, r0
 800193c:	460c      	mov	r4, r1
 800193e:	e9c7 3402 	strd	r3, r4, [r7, #8]
    var6 = var3 * var4 * (var5 * var6);
 8001942:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001946:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800194a:	f7fe fe19 	bl	8000580 <__aeabi_dmul>
 800194e:	4603      	mov	r3, r0
 8001950:	460c      	mov	r4, r1
 8001952:	4625      	mov	r5, r4
 8001954:	461c      	mov	r4, r3
 8001956:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800195a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800195e:	f7fe fe0f 	bl	8000580 <__aeabi_dmul>
 8001962:	4602      	mov	r2, r0
 8001964:	460b      	mov	r3, r1
 8001966:	4620      	mov	r0, r4
 8001968:	4629      	mov	r1, r5
 800196a:	f7fe fe09 	bl	8000580 <__aeabi_dmul>
 800196e:	4603      	mov	r3, r0
 8001970:	460c      	mov	r4, r1
 8001972:	e9c7 3402 	strd	r3, r4, [r7, #8]
    humidity = var6 * (1.0 - ((double)calib_data->dig_h1) * var6 / 524288.0);
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	7e1b      	ldrb	r3, [r3, #24]
 800197a:	4618      	mov	r0, r3
 800197c:	f7fe fd86 	bl	800048c <__aeabi_ui2d>
 8001980:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001984:	f7fe fdfc 	bl	8000580 <__aeabi_dmul>
 8001988:	4603      	mov	r3, r0
 800198a:	460c      	mov	r4, r1
 800198c:	4618      	mov	r0, r3
 800198e:	4621      	mov	r1, r4
 8001990:	f04f 0200 	mov.w	r2, #0
 8001994:	4b25      	ldr	r3, [pc, #148]	; (8001a2c <compensate_humidity+0x244>)
 8001996:	f7fe ff1d 	bl	80007d4 <__aeabi_ddiv>
 800199a:	4603      	mov	r3, r0
 800199c:	460c      	mov	r4, r1
 800199e:	461a      	mov	r2, r3
 80019a0:	4623      	mov	r3, r4
 80019a2:	f04f 0000 	mov.w	r0, #0
 80019a6:	4920      	ldr	r1, [pc, #128]	; (8001a28 <compensate_humidity+0x240>)
 80019a8:	f7fe fc32 	bl	8000210 <__aeabi_dsub>
 80019ac:	4603      	mov	r3, r0
 80019ae:	460c      	mov	r4, r1
 80019b0:	461a      	mov	r2, r3
 80019b2:	4623      	mov	r3, r4
 80019b4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80019b8:	f7fe fde2 	bl	8000580 <__aeabi_dmul>
 80019bc:	4603      	mov	r3, r0
 80019be:	460c      	mov	r4, r1
 80019c0:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48

    if (humidity > humidity_max)
 80019c4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80019c8:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80019cc:	f7ff f868 	bl	8000aa0 <__aeabi_dcmpgt>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d004      	beq.n	80019e0 <compensate_humidity+0x1f8>
    {
        humidity = humidity_max;
 80019d6:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 80019da:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
 80019de:	e00c      	b.n	80019fa <compensate_humidity+0x212>
    }
    else if (humidity < humidity_min)
 80019e0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80019e4:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80019e8:	f7ff f83c 	bl	8000a64 <__aeabi_dcmplt>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d003      	beq.n	80019fa <compensate_humidity+0x212>
    {
        humidity = humidity_min;
 80019f2:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 80019f6:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
    }

    return humidity;
 80019fa:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 80019fe:	ec44 3b17 	vmov	d7, r3, r4
}
 8001a02:	eeb0 0a47 	vmov.f32	s0, s14
 8001a06:	eef0 0a67 	vmov.f32	s1, s15
 8001a0a:	3750      	adds	r7, #80	; 0x50
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bdb0      	pop	{r4, r5, r7, pc}
 8001a10:	40590000 	.word	0x40590000
 8001a14:	40f2c000 	.word	0x40f2c000
 8001a18:	40500000 	.word	0x40500000
 8001a1c:	40d00000 	.word	0x40d00000
 8001a20:	40f00000 	.word	0x40f00000
 8001a24:	41900000 	.word	0x41900000
 8001a28:	3ff00000 	.word	0x3ff00000
 8001a2c:	41200000 	.word	0x41200000

08001a30 <get_calib_data>:
/*!
 * @brief This internal API reads the calibration data from the sensor, parse
 * it and store in the device structure.
 */
static int8_t get_calib_data(struct bme280_dev *dev)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b08a      	sub	sp, #40	; 0x28
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BME280_TEMP_PRESS_CALIB_DATA_ADDR;
 8001a38:	2388      	movs	r3, #136	; 0x88
 8001a3a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    /* Array to store calibration data */
    uint8_t calib_data[BME280_TEMP_PRESS_CALIB_DATA_LEN] = { 0 };
 8001a3e:	f107 030c 	add.w	r3, r7, #12
 8001a42:	2200      	movs	r2, #0
 8001a44:	601a      	str	r2, [r3, #0]
 8001a46:	605a      	str	r2, [r3, #4]
 8001a48:	609a      	str	r2, [r3, #8]
 8001a4a:	60da      	str	r2, [r3, #12]
 8001a4c:	611a      	str	r2, [r3, #16]
 8001a4e:	615a      	str	r2, [r3, #20]
 8001a50:	831a      	strh	r2, [r3, #24]

    /* Read the calibration data from the sensor */
    rslt = bme280_get_regs(reg_addr, calib_data, BME280_TEMP_PRESS_CALIB_DATA_LEN, dev);
 8001a52:	f107 010c 	add.w	r1, r7, #12
 8001a56:	f897 0026 	ldrb.w	r0, [r7, #38]	; 0x26
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	221a      	movs	r2, #26
 8001a5e:	f7ff fa20 	bl	8000ea2 <bme280_get_regs>
 8001a62:	4603      	mov	r3, r0
 8001a64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if (rslt == BME280_OK)
 8001a68:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d11d      	bne.n	8001aac <get_calib_data+0x7c>
    {
        /* Parse temperature and pressure calibration data and store
         * it in device structure
         */
        parse_temp_press_calib_data(calib_data, dev);
 8001a70:	f107 030c 	add.w	r3, r7, #12
 8001a74:	6879      	ldr	r1, [r7, #4]
 8001a76:	4618      	mov	r0, r3
 8001a78:	f000 f849 	bl	8001b0e <parse_temp_press_calib_data>
        reg_addr = BME280_HUMIDITY_CALIB_DATA_ADDR;
 8001a7c:	23e1      	movs	r3, #225	; 0xe1
 8001a7e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

        /* Read the humidity calibration data from the sensor */
        rslt = bme280_get_regs(reg_addr, calib_data, BME280_HUMIDITY_CALIB_DATA_LEN, dev);
 8001a82:	f107 010c 	add.w	r1, r7, #12
 8001a86:	f897 0026 	ldrb.w	r0, [r7, #38]	; 0x26
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2207      	movs	r2, #7
 8001a8e:	f7ff fa08 	bl	8000ea2 <bme280_get_regs>
 8001a92:	4603      	mov	r3, r0
 8001a94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        if (rslt == BME280_OK)
 8001a98:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d105      	bne.n	8001aac <get_calib_data+0x7c>
        {
            /* Parse humidity calibration data and store it in
             * device structure
             */
            parse_humidity_calib_data(calib_data, dev);
 8001aa0:	f107 030c 	add.w	r3, r7, #12
 8001aa4:	6879      	ldr	r1, [r7, #4]
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f000 f8e0 	bl	8001c6c <parse_humidity_calib_data>
        }
    }

    return rslt;
 8001aac:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	3728      	adds	r7, #40	; 0x28
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}

08001ab8 <interleave_reg_addr>:
/*!
 * @brief This internal API interleaves the register address between the
 * register data buffer for burst write operation.
 */
static void interleave_reg_addr(const uint8_t *reg_addr, uint8_t *temp_buff, const uint8_t *reg_data, uint8_t len)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b087      	sub	sp, #28
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	60f8      	str	r0, [r7, #12]
 8001ac0:	60b9      	str	r1, [r7, #8]
 8001ac2:	607a      	str	r2, [r7, #4]
 8001ac4:	70fb      	strb	r3, [r7, #3]
    uint8_t index;

    for (index = 1; index < len; index++)
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	75fb      	strb	r3, [r7, #23]
 8001aca:	e016      	b.n	8001afa <interleave_reg_addr+0x42>
    {
        temp_buff[(index * 2) - 1] = reg_addr[index];
 8001acc:	7dfb      	ldrb	r3, [r7, #23]
 8001ace:	68fa      	ldr	r2, [r7, #12]
 8001ad0:	441a      	add	r2, r3
 8001ad2:	7dfb      	ldrb	r3, [r7, #23]
 8001ad4:	005b      	lsls	r3, r3, #1
 8001ad6:	3b01      	subs	r3, #1
 8001ad8:	68b9      	ldr	r1, [r7, #8]
 8001ada:	440b      	add	r3, r1
 8001adc:	7812      	ldrb	r2, [r2, #0]
 8001ade:	701a      	strb	r2, [r3, #0]
        temp_buff[index * 2] = reg_data[index];
 8001ae0:	7dfb      	ldrb	r3, [r7, #23]
 8001ae2:	687a      	ldr	r2, [r7, #4]
 8001ae4:	441a      	add	r2, r3
 8001ae6:	7dfb      	ldrb	r3, [r7, #23]
 8001ae8:	005b      	lsls	r3, r3, #1
 8001aea:	4619      	mov	r1, r3
 8001aec:	68bb      	ldr	r3, [r7, #8]
 8001aee:	440b      	add	r3, r1
 8001af0:	7812      	ldrb	r2, [r2, #0]
 8001af2:	701a      	strb	r2, [r3, #0]
    for (index = 1; index < len; index++)
 8001af4:	7dfb      	ldrb	r3, [r7, #23]
 8001af6:	3301      	adds	r3, #1
 8001af8:	75fb      	strb	r3, [r7, #23]
 8001afa:	7dfa      	ldrb	r2, [r7, #23]
 8001afc:	78fb      	ldrb	r3, [r7, #3]
 8001afe:	429a      	cmp	r2, r3
 8001b00:	d3e4      	bcc.n	8001acc <interleave_reg_addr+0x14>
    }
}
 8001b02:	bf00      	nop
 8001b04:	371c      	adds	r7, #28
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr

08001b0e <parse_temp_press_calib_data>:
/*!
 *  @brief This internal API is used to parse the temperature and
 *  pressure calibration data and store it in device structure.
 */
static void parse_temp_press_calib_data(const uint8_t *reg_data, struct bme280_dev *dev)
{
 8001b0e:	b480      	push	{r7}
 8001b10:	b085      	sub	sp, #20
 8001b12:	af00      	add	r7, sp, #0
 8001b14:	6078      	str	r0, [r7, #4]
 8001b16:	6039      	str	r1, [r7, #0]
    struct bme280_calib_data *calib_data = &dev->calib_data;
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	3318      	adds	r3, #24
 8001b1c:	60fb      	str	r3, [r7, #12]

    calib_data->dig_t1 = BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	3301      	adds	r3, #1
 8001b22:	781b      	ldrb	r3, [r3, #0]
 8001b24:	021b      	lsls	r3, r3, #8
 8001b26:	b21a      	sxth	r2, r3
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	781b      	ldrb	r3, [r3, #0]
 8001b2c:	b21b      	sxth	r3, r3
 8001b2e:	4313      	orrs	r3, r2
 8001b30:	b21b      	sxth	r3, r3
 8001b32:	b29a      	uxth	r2, r3
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	801a      	strh	r2, [r3, #0]
    calib_data->dig_t2 = (int16_t)BME280_CONCAT_BYTES(reg_data[3], reg_data[2]);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	3303      	adds	r3, #3
 8001b3c:	781b      	ldrb	r3, [r3, #0]
 8001b3e:	021b      	lsls	r3, r3, #8
 8001b40:	b21a      	sxth	r2, r3
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	3302      	adds	r3, #2
 8001b46:	781b      	ldrb	r3, [r3, #0]
 8001b48:	b21b      	sxth	r3, r3
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	b21a      	sxth	r2, r3
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	805a      	strh	r2, [r3, #2]
    calib_data->dig_t3 = (int16_t)BME280_CONCAT_BYTES(reg_data[5], reg_data[4]);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	3305      	adds	r3, #5
 8001b56:	781b      	ldrb	r3, [r3, #0]
 8001b58:	021b      	lsls	r3, r3, #8
 8001b5a:	b21a      	sxth	r2, r3
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	3304      	adds	r3, #4
 8001b60:	781b      	ldrb	r3, [r3, #0]
 8001b62:	b21b      	sxth	r3, r3
 8001b64:	4313      	orrs	r3, r2
 8001b66:	b21a      	sxth	r2, r3
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	809a      	strh	r2, [r3, #4]
    calib_data->dig_p1 = BME280_CONCAT_BYTES(reg_data[7], reg_data[6]);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	3307      	adds	r3, #7
 8001b70:	781b      	ldrb	r3, [r3, #0]
 8001b72:	021b      	lsls	r3, r3, #8
 8001b74:	b21a      	sxth	r2, r3
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	3306      	adds	r3, #6
 8001b7a:	781b      	ldrb	r3, [r3, #0]
 8001b7c:	b21b      	sxth	r3, r3
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	b21b      	sxth	r3, r3
 8001b82:	b29a      	uxth	r2, r3
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	80da      	strh	r2, [r3, #6]
    calib_data->dig_p2 = (int16_t)BME280_CONCAT_BYTES(reg_data[9], reg_data[8]);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	3309      	adds	r3, #9
 8001b8c:	781b      	ldrb	r3, [r3, #0]
 8001b8e:	021b      	lsls	r3, r3, #8
 8001b90:	b21a      	sxth	r2, r3
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	3308      	adds	r3, #8
 8001b96:	781b      	ldrb	r3, [r3, #0]
 8001b98:	b21b      	sxth	r3, r3
 8001b9a:	4313      	orrs	r3, r2
 8001b9c:	b21a      	sxth	r2, r3
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	811a      	strh	r2, [r3, #8]
    calib_data->dig_p3 = (int16_t)BME280_CONCAT_BYTES(reg_data[11], reg_data[10]);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	330b      	adds	r3, #11
 8001ba6:	781b      	ldrb	r3, [r3, #0]
 8001ba8:	021b      	lsls	r3, r3, #8
 8001baa:	b21a      	sxth	r2, r3
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	330a      	adds	r3, #10
 8001bb0:	781b      	ldrb	r3, [r3, #0]
 8001bb2:	b21b      	sxth	r3, r3
 8001bb4:	4313      	orrs	r3, r2
 8001bb6:	b21a      	sxth	r2, r3
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	815a      	strh	r2, [r3, #10]
    calib_data->dig_p4 = (int16_t)BME280_CONCAT_BYTES(reg_data[13], reg_data[12]);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	330d      	adds	r3, #13
 8001bc0:	781b      	ldrb	r3, [r3, #0]
 8001bc2:	021b      	lsls	r3, r3, #8
 8001bc4:	b21a      	sxth	r2, r3
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	330c      	adds	r3, #12
 8001bca:	781b      	ldrb	r3, [r3, #0]
 8001bcc:	b21b      	sxth	r3, r3
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	b21a      	sxth	r2, r3
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	819a      	strh	r2, [r3, #12]
    calib_data->dig_p5 = (int16_t)BME280_CONCAT_BYTES(reg_data[15], reg_data[14]);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	330f      	adds	r3, #15
 8001bda:	781b      	ldrb	r3, [r3, #0]
 8001bdc:	021b      	lsls	r3, r3, #8
 8001bde:	b21a      	sxth	r2, r3
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	330e      	adds	r3, #14
 8001be4:	781b      	ldrb	r3, [r3, #0]
 8001be6:	b21b      	sxth	r3, r3
 8001be8:	4313      	orrs	r3, r2
 8001bea:	b21a      	sxth	r2, r3
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	81da      	strh	r2, [r3, #14]
    calib_data->dig_p6 = (int16_t)BME280_CONCAT_BYTES(reg_data[17], reg_data[16]);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	3311      	adds	r3, #17
 8001bf4:	781b      	ldrb	r3, [r3, #0]
 8001bf6:	021b      	lsls	r3, r3, #8
 8001bf8:	b21a      	sxth	r2, r3
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	3310      	adds	r3, #16
 8001bfe:	781b      	ldrb	r3, [r3, #0]
 8001c00:	b21b      	sxth	r3, r3
 8001c02:	4313      	orrs	r3, r2
 8001c04:	b21a      	sxth	r2, r3
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	821a      	strh	r2, [r3, #16]
    calib_data->dig_p7 = (int16_t)BME280_CONCAT_BYTES(reg_data[19], reg_data[18]);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	3313      	adds	r3, #19
 8001c0e:	781b      	ldrb	r3, [r3, #0]
 8001c10:	021b      	lsls	r3, r3, #8
 8001c12:	b21a      	sxth	r2, r3
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	3312      	adds	r3, #18
 8001c18:	781b      	ldrb	r3, [r3, #0]
 8001c1a:	b21b      	sxth	r3, r3
 8001c1c:	4313      	orrs	r3, r2
 8001c1e:	b21a      	sxth	r2, r3
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	825a      	strh	r2, [r3, #18]
    calib_data->dig_p8 = (int16_t)BME280_CONCAT_BYTES(reg_data[21], reg_data[20]);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	3315      	adds	r3, #21
 8001c28:	781b      	ldrb	r3, [r3, #0]
 8001c2a:	021b      	lsls	r3, r3, #8
 8001c2c:	b21a      	sxth	r2, r3
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	3314      	adds	r3, #20
 8001c32:	781b      	ldrb	r3, [r3, #0]
 8001c34:	b21b      	sxth	r3, r3
 8001c36:	4313      	orrs	r3, r2
 8001c38:	b21a      	sxth	r2, r3
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	829a      	strh	r2, [r3, #20]
    calib_data->dig_p9 = (int16_t)BME280_CONCAT_BYTES(reg_data[23], reg_data[22]);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	3317      	adds	r3, #23
 8001c42:	781b      	ldrb	r3, [r3, #0]
 8001c44:	021b      	lsls	r3, r3, #8
 8001c46:	b21a      	sxth	r2, r3
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	3316      	adds	r3, #22
 8001c4c:	781b      	ldrb	r3, [r3, #0]
 8001c4e:	b21b      	sxth	r3, r3
 8001c50:	4313      	orrs	r3, r2
 8001c52:	b21a      	sxth	r2, r3
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	82da      	strh	r2, [r3, #22]
    calib_data->dig_h1 = reg_data[25];
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	7e5a      	ldrb	r2, [r3, #25]
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	761a      	strb	r2, [r3, #24]
}
 8001c60:	bf00      	nop
 8001c62:	3714      	adds	r7, #20
 8001c64:	46bd      	mov	sp, r7
 8001c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6a:	4770      	bx	lr

08001c6c <parse_humidity_calib_data>:
/*!
 *  @brief This internal API is used to parse the humidity calibration data
 *  and store it in device structure.
 */
static void parse_humidity_calib_data(const uint8_t *reg_data, struct bme280_dev *dev)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b087      	sub	sp, #28
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
 8001c74:	6039      	str	r1, [r7, #0]
    struct bme280_calib_data *calib_data = &dev->calib_data;
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	3318      	adds	r3, #24
 8001c7a:	617b      	str	r3, [r7, #20]
    int16_t dig_h4_lsb;
    int16_t dig_h4_msb;
    int16_t dig_h5_lsb;
    int16_t dig_h5_msb;

    calib_data->dig_h2 = (int16_t)BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	3301      	adds	r3, #1
 8001c80:	781b      	ldrb	r3, [r3, #0]
 8001c82:	021b      	lsls	r3, r3, #8
 8001c84:	b21a      	sxth	r2, r3
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	781b      	ldrb	r3, [r3, #0]
 8001c8a:	b21b      	sxth	r3, r3
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	b21a      	sxth	r2, r3
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	835a      	strh	r2, [r3, #26]
    calib_data->dig_h3 = reg_data[2];
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	789a      	ldrb	r2, [r3, #2]
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	771a      	strb	r2, [r3, #28]
    dig_h4_msb = (int16_t)(int8_t)reg_data[3] * 16;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	3303      	adds	r3, #3
 8001ca0:	781b      	ldrb	r3, [r3, #0]
 8001ca2:	b25b      	sxtb	r3, r3
 8001ca4:	b29b      	uxth	r3, r3
 8001ca6:	011b      	lsls	r3, r3, #4
 8001ca8:	b29b      	uxth	r3, r3
 8001caa:	827b      	strh	r3, [r7, #18]
    dig_h4_lsb = (int16_t)(reg_data[4] & 0x0F);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	3304      	adds	r3, #4
 8001cb0:	781b      	ldrb	r3, [r3, #0]
 8001cb2:	b21b      	sxth	r3, r3
 8001cb4:	f003 030f 	and.w	r3, r3, #15
 8001cb8:	823b      	strh	r3, [r7, #16]
    calib_data->dig_h4 = dig_h4_msb | dig_h4_lsb;
 8001cba:	8a7a      	ldrh	r2, [r7, #18]
 8001cbc:	8a3b      	ldrh	r3, [r7, #16]
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	b21a      	sxth	r2, r3
 8001cc2:	697b      	ldr	r3, [r7, #20]
 8001cc4:	83da      	strh	r2, [r3, #30]
    dig_h5_msb = (int16_t)(int8_t)reg_data[5] * 16;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	3305      	adds	r3, #5
 8001cca:	781b      	ldrb	r3, [r3, #0]
 8001ccc:	b25b      	sxtb	r3, r3
 8001cce:	b29b      	uxth	r3, r3
 8001cd0:	011b      	lsls	r3, r3, #4
 8001cd2:	b29b      	uxth	r3, r3
 8001cd4:	81fb      	strh	r3, [r7, #14]
    dig_h5_lsb = (int16_t)(reg_data[4] >> 4);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	3304      	adds	r3, #4
 8001cda:	781b      	ldrb	r3, [r3, #0]
 8001cdc:	091b      	lsrs	r3, r3, #4
 8001cde:	b2db      	uxtb	r3, r3
 8001ce0:	81bb      	strh	r3, [r7, #12]
    calib_data->dig_h5 = dig_h5_msb | dig_h5_lsb;
 8001ce2:	89fa      	ldrh	r2, [r7, #14]
 8001ce4:	89bb      	ldrh	r3, [r7, #12]
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	b21a      	sxth	r2, r3
 8001cea:	697b      	ldr	r3, [r7, #20]
 8001cec:	841a      	strh	r2, [r3, #32]
    calib_data->dig_h6 = (int8_t)reg_data[6];
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	3306      	adds	r3, #6
 8001cf2:	781b      	ldrb	r3, [r3, #0]
 8001cf4:	b25a      	sxtb	r2, r3
 8001cf6:	697b      	ldr	r3, [r7, #20]
 8001cf8:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 8001cfc:	bf00      	nop
 8001cfe:	371c      	adds	r7, #28
 8001d00:	46bd      	mov	sp, r7
 8001d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d06:	4770      	bx	lr

08001d08 <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bme280_dev *dev)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b085      	sub	sp, #20
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d00b      	beq.n	8001d2e <null_ptr_check+0x26>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	68db      	ldr	r3, [r3, #12]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d007      	beq.n	8001d2e <null_ptr_check+0x26>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	691b      	ldr	r3, [r3, #16]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d003      	beq.n	8001d2e <null_ptr_check+0x26>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	695b      	ldr	r3, [r3, #20]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d102      	bne.n	8001d34 <null_ptr_check+0x2c>
    {
        /* Device structure pointer is not valid */
        rslt = BME280_E_NULL_PTR;
 8001d2e:	23ff      	movs	r3, #255	; 0xff
 8001d30:	73fb      	strb	r3, [r7, #15]
 8001d32:	e001      	b.n	8001d38 <null_ptr_check+0x30>
    }
    else
    {
        /* Device structure is fine */
        rslt = BME280_OK;
 8001d34:	2300      	movs	r3, #0
 8001d36:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001d38:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	3714      	adds	r7, #20
 8001d40:	46bd      	mov	sp, r7
 8001d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d46:	4770      	bx	lr

08001d48 <user_spi_read>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int8_t user_spi_read(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, void *intf_ptr) {
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b096      	sub	sp, #88	; 0x58
 8001d4c:	af02      	add	r7, sp, #8
 8001d4e:	60b9      	str	r1, [r7, #8]
 8001d50:	607a      	str	r2, [r7, #4]
 8001d52:	603b      	str	r3, [r7, #0]
 8001d54:	4603      	mov	r3, r0
 8001d56:	73fb      	strb	r3, [r7, #15]
	uint8_t txBuffer[28] = {};
 8001d58:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	601a      	str	r2, [r3, #0]
 8001d60:	605a      	str	r2, [r3, #4]
 8001d62:	609a      	str	r2, [r3, #8]
 8001d64:	60da      	str	r2, [r3, #12]
 8001d66:	611a      	str	r2, [r3, #16]
 8001d68:	615a      	str	r2, [r3, #20]
 8001d6a:	619a      	str	r2, [r3, #24]
	uint8_t rxBuffer[28] = {};
 8001d6c:	f107 0314 	add.w	r3, r7, #20
 8001d70:	2200      	movs	r2, #0
 8001d72:	601a      	str	r2, [r3, #0]
 8001d74:	605a      	str	r2, [r3, #4]
 8001d76:	609a      	str	r2, [r3, #8]
 8001d78:	60da      	str	r2, [r3, #12]
 8001d7a:	611a      	str	r2, [r3, #16]
 8001d7c:	615a      	str	r2, [r3, #20]
 8001d7e:	619a      	str	r2, [r3, #24]
	txBuffer[0] = reg_addr;
 8001d80:	7bfb      	ldrb	r3, [r7, #15]
 8001d82:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, RESET);
 8001d86:	2200      	movs	r2, #0
 8001d88:	2140      	movs	r1, #64	; 0x40
 8001d8a:	481c      	ldr	r0, [pc, #112]	; (8001dfc <user_spi_read+0xb4>)
 8001d8c:	f000 fe30 	bl	80029f0 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi1, txBuffer, rxBuffer, len + 1, 500);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	b29b      	uxth	r3, r3
 8001d94:	3301      	adds	r3, #1
 8001d96:	b298      	uxth	r0, r3
 8001d98:	f107 0214 	add.w	r2, r7, #20
 8001d9c:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8001da0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001da4:	9300      	str	r3, [sp, #0]
 8001da6:	4603      	mov	r3, r0
 8001da8:	4815      	ldr	r0, [pc, #84]	; (8001e00 <user_spi_read+0xb8>)
 8001daa:	f001 fcb3 	bl	8003714 <HAL_SPI_TransmitReceive>
	while( hspi1.State == HAL_SPI_STATE_BUSY ) {};
 8001dae:	bf00      	nop
 8001db0:	4b13      	ldr	r3, [pc, #76]	; (8001e00 <user_spi_read+0xb8>)
 8001db2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001db6:	b2db      	uxtb	r3, r3
 8001db8:	2b02      	cmp	r3, #2
 8001dba:	d0f9      	beq.n	8001db0 <user_spi_read+0x68>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, SET);
 8001dbc:	2201      	movs	r2, #1
 8001dbe:	2140      	movs	r1, #64	; 0x40
 8001dc0:	480e      	ldr	r0, [pc, #56]	; (8001dfc <user_spi_read+0xb4>)
 8001dc2:	f000 fe15 	bl	80029f0 <HAL_GPIO_WritePin>

	// copy to reg_data
	for(int i = 0; i < len; ++i) {
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001dca:	e00d      	b.n	8001de8 <user_spi_read+0xa0>
		reg_data[i] = rxBuffer[i + 1];
 8001dcc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001dce:	1c5a      	adds	r2, r3, #1
 8001dd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001dd2:	68b9      	ldr	r1, [r7, #8]
 8001dd4:	440b      	add	r3, r1
 8001dd6:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8001dda:	440a      	add	r2, r1
 8001ddc:	f812 2c3c 	ldrb.w	r2, [r2, #-60]
 8001de0:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < len; ++i) {
 8001de2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001de4:	3301      	adds	r3, #1
 8001de6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001de8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001dea:	687a      	ldr	r2, [r7, #4]
 8001dec:	429a      	cmp	r2, r3
 8001dee:	d8ed      	bhi.n	8001dcc <user_spi_read+0x84>
	}
	return 0;
 8001df0:	2300      	movs	r3, #0
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	3750      	adds	r7, #80	; 0x50
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	40020400 	.word	0x40020400
 8001e00:	20000070 	.word	0x20000070

08001e04 <user_spi_write>:

int8_t user_spi_write (uint8_t reg_addr, const uint8_t *reg_data, uint32_t len, void *intf_ptr) {
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b08c      	sub	sp, #48	; 0x30
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	60b9      	str	r1, [r7, #8]
 8001e0c:	607a      	str	r2, [r7, #4]
 8001e0e:	603b      	str	r3, [r7, #0]
 8001e10:	4603      	mov	r3, r0
 8001e12:	73fb      	strb	r3, [r7, #15]
	uint8_t txBuffer[28] = {};
 8001e14:	f107 0310 	add.w	r3, r7, #16
 8001e18:	2200      	movs	r2, #0
 8001e1a:	601a      	str	r2, [r3, #0]
 8001e1c:	605a      	str	r2, [r3, #4]
 8001e1e:	609a      	str	r2, [r3, #8]
 8001e20:	60da      	str	r2, [r3, #12]
 8001e22:	611a      	str	r2, [r3, #16]
 8001e24:	615a      	str	r2, [r3, #20]
 8001e26:	619a      	str	r2, [r3, #24]
	txBuffer[0] = reg_addr;
 8001e28:	7bfb      	ldrb	r3, [r7, #15]
 8001e2a:	743b      	strb	r3, [r7, #16]
	for(int i = 0; i < len; ++i) {
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e30:	e00d      	b.n	8001e4e <user_spi_write+0x4a>
		txBuffer[i + 1] = reg_data[i];
 8001e32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e34:	68ba      	ldr	r2, [r7, #8]
 8001e36:	441a      	add	r2, r3
 8001e38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e3a:	3301      	adds	r3, #1
 8001e3c:	7812      	ldrb	r2, [r2, #0]
 8001e3e:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8001e42:	440b      	add	r3, r1
 8001e44:	f803 2c20 	strb.w	r2, [r3, #-32]
	for(int i = 0; i < len; ++i) {
 8001e48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e4a:	3301      	adds	r3, #1
 8001e4c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e50:	687a      	ldr	r2, [r7, #4]
 8001e52:	429a      	cmp	r2, r3
 8001e54:	d8ed      	bhi.n	8001e32 <user_spi_write+0x2e>
	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, RESET);
 8001e56:	2200      	movs	r2, #0
 8001e58:	2140      	movs	r1, #64	; 0x40
 8001e5a:	480f      	ldr	r0, [pc, #60]	; (8001e98 <user_spi_write+0x94>)
 8001e5c:	f000 fdc8 	bl	80029f0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, txBuffer, len + 1, 500);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	b29b      	uxth	r3, r3
 8001e64:	3301      	adds	r3, #1
 8001e66:	b29a      	uxth	r2, r3
 8001e68:	f107 0110 	add.w	r1, r7, #16
 8001e6c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001e70:	480a      	ldr	r0, [pc, #40]	; (8001e9c <user_spi_write+0x98>)
 8001e72:	f001 fb1b 	bl	80034ac <HAL_SPI_Transmit>
	while(hspi1.State == HAL_SPI_STATE_BUSY) {};
 8001e76:	bf00      	nop
 8001e78:	4b08      	ldr	r3, [pc, #32]	; (8001e9c <user_spi_write+0x98>)
 8001e7a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001e7e:	b2db      	uxtb	r3, r3
 8001e80:	2b02      	cmp	r3, #2
 8001e82:	d0f9      	beq.n	8001e78 <user_spi_write+0x74>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, SET);
 8001e84:	2201      	movs	r2, #1
 8001e86:	2140      	movs	r1, #64	; 0x40
 8001e88:	4803      	ldr	r0, [pc, #12]	; (8001e98 <user_spi_write+0x94>)
 8001e8a:	f000 fdb1 	bl	80029f0 <HAL_GPIO_WritePin>
	return 0;
 8001e8e:	2300      	movs	r3, #0
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	3730      	adds	r7, #48	; 0x30
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}
 8001e98:	40020400 	.word	0x40020400
 8001e9c:	20000070 	.word	0x20000070

08001ea0 <user_delay_us>:

void user_delay_us(uint32_t period, void *intf_ptr) {
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b082      	sub	sp, #8
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
 8001ea8:	6039      	str	r1, [r7, #0]
	HAL_Delay(period / 1000);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	4a05      	ldr	r2, [pc, #20]	; (8001ec4 <user_delay_us+0x24>)
 8001eae:	fba2 2303 	umull	r2, r3, r2, r3
 8001eb2:	099b      	lsrs	r3, r3, #6
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f000 fab3 	bl	8002420 <HAL_Delay>
}
 8001eba:	bf00      	nop
 8001ebc:	3708      	adds	r7, #8
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	10624dd3 	.word	0x10624dd3

08001ec8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b088      	sub	sp, #32
 8001ecc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ece:	f000 fa35 	bl	800233c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ed2:	f000 f855 	bl	8001f80 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ed6:	f000 f8f7 	bl	80020c8 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001eda:	f000 f8bf 	bl	800205c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  int8_t rslt = BME280_OK;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	77fb      	strb	r3, [r7, #31]

  /* Sensor_0 interface over SPI with native chip select line */
  uint8_t dev_addr = 0;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	77bb      	strb	r3, [r7, #30]

  dev.intf_ptr = &dev_addr;
 8001ee6:	4a22      	ldr	r2, [pc, #136]	; (8001f70 <main+0xa8>)
 8001ee8:	f107 031e 	add.w	r3, r7, #30
 8001eec:	6053      	str	r3, [r2, #4]
  dev.intf = BME280_SPI_INTF;
 8001eee:	4b20      	ldr	r3, [pc, #128]	; (8001f70 <main+0xa8>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	721a      	strb	r2, [r3, #8]
  dev.read = &user_spi_read;
 8001ef4:	4b1e      	ldr	r3, [pc, #120]	; (8001f70 <main+0xa8>)
 8001ef6:	4a1f      	ldr	r2, [pc, #124]	; (8001f74 <main+0xac>)
 8001ef8:	60da      	str	r2, [r3, #12]
  dev.write = &user_spi_write;
 8001efa:	4b1d      	ldr	r3, [pc, #116]	; (8001f70 <main+0xa8>)
 8001efc:	4a1e      	ldr	r2, [pc, #120]	; (8001f78 <main+0xb0>)
 8001efe:	611a      	str	r2, [r3, #16]
  dev.delay_us = &user_delay_us;
 8001f00:	4b1b      	ldr	r3, [pc, #108]	; (8001f70 <main+0xa8>)
 8001f02:	4a1e      	ldr	r2, [pc, #120]	; (8001f7c <main+0xb4>)
 8001f04:	615a      	str	r2, [r3, #20]

  rslt = bme280_init(&dev);
 8001f06:	481a      	ldr	r0, [pc, #104]	; (8001f70 <main+0xa8>)
 8001f08:	f7fe ff7c 	bl	8000e04 <bme280_init>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	77fb      	strb	r3, [r7, #31]

  // configure
  uint8_t ctrl_hum = 0x03;
 8001f10:	2303      	movs	r3, #3
 8001f12:	777b      	strb	r3, [r7, #29]
  user_spi_write(0x72, &ctrl_hum, 1, dev.intf_ptr);
 8001f14:	4b16      	ldr	r3, [pc, #88]	; (8001f70 <main+0xa8>)
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	f107 011d 	add.w	r1, r7, #29
 8001f1c:	2201      	movs	r2, #1
 8001f1e:	2072      	movs	r0, #114	; 0x72
 8001f20:	f7ff ff70 	bl	8001e04 <user_spi_write>
  uint8_t ctrl_means = 0xFF;
 8001f24:	23ff      	movs	r3, #255	; 0xff
 8001f26:	773b      	strb	r3, [r7, #28]
  user_spi_write(0x74, &ctrl_means, 1, dev.intf_ptr);
 8001f28:	4b11      	ldr	r3, [pc, #68]	; (8001f70 <main+0xa8>)
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	f107 011c 	add.w	r1, r7, #28
 8001f30:	2201      	movs	r2, #1
 8001f32:	2074      	movs	r0, #116	; 0x74
 8001f34:	f7ff ff66 	bl	8001e04 <user_spi_write>

  // read configure
  user_spi_read(0xF2, &ctrl_hum, 1, dev.intf_ptr);
 8001f38:	4b0d      	ldr	r3, [pc, #52]	; (8001f70 <main+0xa8>)
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	f107 011d 	add.w	r1, r7, #29
 8001f40:	2201      	movs	r2, #1
 8001f42:	20f2      	movs	r0, #242	; 0xf2
 8001f44:	f7ff ff00 	bl	8001d48 <user_spi_read>
  user_spi_read(0xF4, &ctrl_means, 1, dev.intf_ptr);
 8001f48:	4b09      	ldr	r3, [pc, #36]	; (8001f70 <main+0xa8>)
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	f107 011c 	add.w	r1, r7, #28
 8001f50:	2201      	movs	r2, #1
 8001f52:	20f4      	movs	r0, #244	; 0xf4
 8001f54:	f7ff fef8 	bl	8001d48 <user_spi_read>

  HAL_Delay(100);
 8001f58:	2064      	movs	r0, #100	; 0x64
 8001f5a:	f000 fa61 	bl	8002420 <HAL_Delay>
  // get sensor data
  struct bme280_data comp_data;
  rslt = bme280_get_sensor_data(BME280_ALL, &comp_data, &dev);
 8001f5e:	463b      	mov	r3, r7
 8001f60:	4a03      	ldr	r2, [pc, #12]	; (8001f70 <main+0xa8>)
 8001f62:	4619      	mov	r1, r3
 8001f64:	2007      	movs	r0, #7
 8001f66:	f7ff f8a1 	bl	80010ac <bme280_get_sensor_data>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	77fb      	strb	r3, [r7, #31]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001f6e:	e7fe      	b.n	8001f6e <main+0xa6>
 8001f70:	20000028 	.word	0x20000028
 8001f74:	08001d49 	.word	0x08001d49
 8001f78:	08001e05 	.word	0x08001e05
 8001f7c:	08001ea1 	.word	0x08001ea1

08001f80 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b094      	sub	sp, #80	; 0x50
 8001f84:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f86:	f107 031c 	add.w	r3, r7, #28
 8001f8a:	2234      	movs	r2, #52	; 0x34
 8001f8c:	2100      	movs	r1, #0
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f001 ff50 	bl	8003e34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f94:	f107 0308 	add.w	r3, r7, #8
 8001f98:	2200      	movs	r2, #0
 8001f9a:	601a      	str	r2, [r3, #0]
 8001f9c:	605a      	str	r2, [r3, #4]
 8001f9e:	609a      	str	r2, [r3, #8]
 8001fa0:	60da      	str	r2, [r3, #12]
 8001fa2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	607b      	str	r3, [r7, #4]
 8001fa8:	4b2a      	ldr	r3, [pc, #168]	; (8002054 <SystemClock_Config+0xd4>)
 8001faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fac:	4a29      	ldr	r2, [pc, #164]	; (8002054 <SystemClock_Config+0xd4>)
 8001fae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fb2:	6413      	str	r3, [r2, #64]	; 0x40
 8001fb4:	4b27      	ldr	r3, [pc, #156]	; (8002054 <SystemClock_Config+0xd4>)
 8001fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fbc:	607b      	str	r3, [r7, #4]
 8001fbe:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	603b      	str	r3, [r7, #0]
 8001fc4:	4b24      	ldr	r3, [pc, #144]	; (8002058 <SystemClock_Config+0xd8>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001fcc:	4a22      	ldr	r2, [pc, #136]	; (8002058 <SystemClock_Config+0xd8>)
 8001fce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fd2:	6013      	str	r3, [r2, #0]
 8001fd4:	4b20      	ldr	r3, [pc, #128]	; (8002058 <SystemClock_Config+0xd8>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001fdc:	603b      	str	r3, [r7, #0]
 8001fde:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001fe0:	2302      	movs	r3, #2
 8001fe2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001fe8:	2310      	movs	r3, #16
 8001fea:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001fec:	2302      	movs	r3, #2
 8001fee:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001ff4:	2310      	movs	r3, #16
 8001ff6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001ff8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001ffc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001ffe:	2304      	movs	r3, #4
 8002000:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002002:	2302      	movs	r3, #2
 8002004:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002006:	2302      	movs	r3, #2
 8002008:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800200a:	f107 031c 	add.w	r3, r7, #28
 800200e:	4618      	mov	r0, r3
 8002010:	f000 ff8e 	bl	8002f30 <HAL_RCC_OscConfig>
 8002014:	4603      	mov	r3, r0
 8002016:	2b00      	cmp	r3, #0
 8002018:	d001      	beq.n	800201e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800201a:	f000 f897 	bl	800214c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800201e:	230f      	movs	r3, #15
 8002020:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002022:	2302      	movs	r3, #2
 8002024:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002026:	2300      	movs	r3, #0
 8002028:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800202a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800202e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002030:	2300      	movs	r3, #0
 8002032:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002034:	f107 0308 	add.w	r3, r7, #8
 8002038:	2102      	movs	r1, #2
 800203a:	4618      	mov	r0, r3
 800203c:	f000 fcf2 	bl	8002a24 <HAL_RCC_ClockConfig>
 8002040:	4603      	mov	r3, r0
 8002042:	2b00      	cmp	r3, #0
 8002044:	d001      	beq.n	800204a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8002046:	f000 f881 	bl	800214c <Error_Handler>
  }
}
 800204a:	bf00      	nop
 800204c:	3750      	adds	r7, #80	; 0x50
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}
 8002052:	bf00      	nop
 8002054:	40023800 	.word	0x40023800
 8002058:	40007000 	.word	0x40007000

0800205c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002060:	4b17      	ldr	r3, [pc, #92]	; (80020c0 <MX_SPI1_Init+0x64>)
 8002062:	4a18      	ldr	r2, [pc, #96]	; (80020c4 <MX_SPI1_Init+0x68>)
 8002064:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002066:	4b16      	ldr	r3, [pc, #88]	; (80020c0 <MX_SPI1_Init+0x64>)
 8002068:	f44f 7282 	mov.w	r2, #260	; 0x104
 800206c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800206e:	4b14      	ldr	r3, [pc, #80]	; (80020c0 <MX_SPI1_Init+0x64>)
 8002070:	2200      	movs	r2, #0
 8002072:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002074:	4b12      	ldr	r3, [pc, #72]	; (80020c0 <MX_SPI1_Init+0x64>)
 8002076:	2200      	movs	r2, #0
 8002078:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800207a:	4b11      	ldr	r3, [pc, #68]	; (80020c0 <MX_SPI1_Init+0x64>)
 800207c:	2200      	movs	r2, #0
 800207e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002080:	4b0f      	ldr	r3, [pc, #60]	; (80020c0 <MX_SPI1_Init+0x64>)
 8002082:	2200      	movs	r2, #0
 8002084:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002086:	4b0e      	ldr	r3, [pc, #56]	; (80020c0 <MX_SPI1_Init+0x64>)
 8002088:	f44f 7200 	mov.w	r2, #512	; 0x200
 800208c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800208e:	4b0c      	ldr	r3, [pc, #48]	; (80020c0 <MX_SPI1_Init+0x64>)
 8002090:	2220      	movs	r2, #32
 8002092:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002094:	4b0a      	ldr	r3, [pc, #40]	; (80020c0 <MX_SPI1_Init+0x64>)
 8002096:	2200      	movs	r2, #0
 8002098:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800209a:	4b09      	ldr	r3, [pc, #36]	; (80020c0 <MX_SPI1_Init+0x64>)
 800209c:	2200      	movs	r2, #0
 800209e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80020a0:	4b07      	ldr	r3, [pc, #28]	; (80020c0 <MX_SPI1_Init+0x64>)
 80020a2:	2200      	movs	r2, #0
 80020a4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80020a6:	4b06      	ldr	r3, [pc, #24]	; (80020c0 <MX_SPI1_Init+0x64>)
 80020a8:	220a      	movs	r2, #10
 80020aa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80020ac:	4804      	ldr	r0, [pc, #16]	; (80020c0 <MX_SPI1_Init+0x64>)
 80020ae:	f001 f999 	bl	80033e4 <HAL_SPI_Init>
 80020b2:	4603      	mov	r3, r0
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d001      	beq.n	80020bc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80020b8:	f000 f848 	bl	800214c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80020bc:	bf00      	nop
 80020be:	bd80      	pop	{r7, pc}
 80020c0:	20000070 	.word	0x20000070
 80020c4:	40013000 	.word	0x40013000

080020c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b088      	sub	sp, #32
 80020cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020ce:	f107 030c 	add.w	r3, r7, #12
 80020d2:	2200      	movs	r2, #0
 80020d4:	601a      	str	r2, [r3, #0]
 80020d6:	605a      	str	r2, [r3, #4]
 80020d8:	609a      	str	r2, [r3, #8]
 80020da:	60da      	str	r2, [r3, #12]
 80020dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80020de:	2300      	movs	r3, #0
 80020e0:	60bb      	str	r3, [r7, #8]
 80020e2:	4b18      	ldr	r3, [pc, #96]	; (8002144 <MX_GPIO_Init+0x7c>)
 80020e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e6:	4a17      	ldr	r2, [pc, #92]	; (8002144 <MX_GPIO_Init+0x7c>)
 80020e8:	f043 0301 	orr.w	r3, r3, #1
 80020ec:	6313      	str	r3, [r2, #48]	; 0x30
 80020ee:	4b15      	ldr	r3, [pc, #84]	; (8002144 <MX_GPIO_Init+0x7c>)
 80020f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f2:	f003 0301 	and.w	r3, r3, #1
 80020f6:	60bb      	str	r3, [r7, #8]
 80020f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80020fa:	2300      	movs	r3, #0
 80020fc:	607b      	str	r3, [r7, #4]
 80020fe:	4b11      	ldr	r3, [pc, #68]	; (8002144 <MX_GPIO_Init+0x7c>)
 8002100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002102:	4a10      	ldr	r2, [pc, #64]	; (8002144 <MX_GPIO_Init+0x7c>)
 8002104:	f043 0302 	orr.w	r3, r3, #2
 8002108:	6313      	str	r3, [r2, #48]	; 0x30
 800210a:	4b0e      	ldr	r3, [pc, #56]	; (8002144 <MX_GPIO_Init+0x7c>)
 800210c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800210e:	f003 0302 	and.w	r3, r3, #2
 8002112:	607b      	str	r3, [r7, #4]
 8002114:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8002116:	2201      	movs	r2, #1
 8002118:	2140      	movs	r1, #64	; 0x40
 800211a:	480b      	ldr	r0, [pc, #44]	; (8002148 <MX_GPIO_Init+0x80>)
 800211c:	f000 fc68 	bl	80029f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002120:	2340      	movs	r3, #64	; 0x40
 8002122:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002124:	2301      	movs	r3, #1
 8002126:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002128:	2300      	movs	r3, #0
 800212a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800212c:	2300      	movs	r3, #0
 800212e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002130:	f107 030c 	add.w	r3, r7, #12
 8002134:	4619      	mov	r1, r3
 8002136:	4804      	ldr	r0, [pc, #16]	; (8002148 <MX_GPIO_Init+0x80>)
 8002138:	f000 fac8 	bl	80026cc <HAL_GPIO_Init>

}
 800213c:	bf00      	nop
 800213e:	3720      	adds	r7, #32
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}
 8002144:	40023800 	.word	0x40023800
 8002148:	40020400 	.word	0x40020400

0800214c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800214c:	b480      	push	{r7}
 800214e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002150:	bf00      	nop
 8002152:	46bd      	mov	sp, r7
 8002154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002158:	4770      	bx	lr
	...

0800215c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b082      	sub	sp, #8
 8002160:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002162:	2300      	movs	r3, #0
 8002164:	607b      	str	r3, [r7, #4]
 8002166:	4b10      	ldr	r3, [pc, #64]	; (80021a8 <HAL_MspInit+0x4c>)
 8002168:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800216a:	4a0f      	ldr	r2, [pc, #60]	; (80021a8 <HAL_MspInit+0x4c>)
 800216c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002170:	6453      	str	r3, [r2, #68]	; 0x44
 8002172:	4b0d      	ldr	r3, [pc, #52]	; (80021a8 <HAL_MspInit+0x4c>)
 8002174:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002176:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800217a:	607b      	str	r3, [r7, #4]
 800217c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800217e:	2300      	movs	r3, #0
 8002180:	603b      	str	r3, [r7, #0]
 8002182:	4b09      	ldr	r3, [pc, #36]	; (80021a8 <HAL_MspInit+0x4c>)
 8002184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002186:	4a08      	ldr	r2, [pc, #32]	; (80021a8 <HAL_MspInit+0x4c>)
 8002188:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800218c:	6413      	str	r3, [r2, #64]	; 0x40
 800218e:	4b06      	ldr	r3, [pc, #24]	; (80021a8 <HAL_MspInit+0x4c>)
 8002190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002192:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002196:	603b      	str	r3, [r7, #0]
 8002198:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800219a:	2007      	movs	r0, #7
 800219c:	f000 fa32 	bl	8002604 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021a0:	bf00      	nop
 80021a2:	3708      	adds	r7, #8
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}
 80021a8:	40023800 	.word	0x40023800

080021ac <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b08a      	sub	sp, #40	; 0x28
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021b4:	f107 0314 	add.w	r3, r7, #20
 80021b8:	2200      	movs	r2, #0
 80021ba:	601a      	str	r2, [r3, #0]
 80021bc:	605a      	str	r2, [r3, #4]
 80021be:	609a      	str	r2, [r3, #8]
 80021c0:	60da      	str	r2, [r3, #12]
 80021c2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a1d      	ldr	r2, [pc, #116]	; (8002240 <HAL_SPI_MspInit+0x94>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d133      	bne.n	8002236 <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80021ce:	2300      	movs	r3, #0
 80021d0:	613b      	str	r3, [r7, #16]
 80021d2:	4b1c      	ldr	r3, [pc, #112]	; (8002244 <HAL_SPI_MspInit+0x98>)
 80021d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021d6:	4a1b      	ldr	r2, [pc, #108]	; (8002244 <HAL_SPI_MspInit+0x98>)
 80021d8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80021dc:	6453      	str	r3, [r2, #68]	; 0x44
 80021de:	4b19      	ldr	r3, [pc, #100]	; (8002244 <HAL_SPI_MspInit+0x98>)
 80021e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021e6:	613b      	str	r3, [r7, #16]
 80021e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021ea:	2300      	movs	r3, #0
 80021ec:	60fb      	str	r3, [r7, #12]
 80021ee:	4b15      	ldr	r3, [pc, #84]	; (8002244 <HAL_SPI_MspInit+0x98>)
 80021f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021f2:	4a14      	ldr	r2, [pc, #80]	; (8002244 <HAL_SPI_MspInit+0x98>)
 80021f4:	f043 0301 	orr.w	r3, r3, #1
 80021f8:	6313      	str	r3, [r2, #48]	; 0x30
 80021fa:	4b12      	ldr	r3, [pc, #72]	; (8002244 <HAL_SPI_MspInit+0x98>)
 80021fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021fe:	f003 0301 	and.w	r3, r3, #1
 8002202:	60fb      	str	r3, [r7, #12]
 8002204:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002206:	23e0      	movs	r3, #224	; 0xe0
 8002208:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800220a:	2302      	movs	r3, #2
 800220c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800220e:	2300      	movs	r3, #0
 8002210:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002212:	2303      	movs	r3, #3
 8002214:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002216:	2305      	movs	r3, #5
 8002218:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800221a:	f107 0314 	add.w	r3, r7, #20
 800221e:	4619      	mov	r1, r3
 8002220:	4809      	ldr	r0, [pc, #36]	; (8002248 <HAL_SPI_MspInit+0x9c>)
 8002222:	f000 fa53 	bl	80026cc <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 15);
 8002226:	220f      	movs	r2, #15
 8002228:	2100      	movs	r1, #0
 800222a:	2023      	movs	r0, #35	; 0x23
 800222c:	f000 f9f5 	bl	800261a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8002230:	2023      	movs	r0, #35	; 0x23
 8002232:	f000 fa0e 	bl	8002652 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002236:	bf00      	nop
 8002238:	3728      	adds	r7, #40	; 0x28
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop
 8002240:	40013000 	.word	0x40013000
 8002244:	40023800 	.word	0x40023800
 8002248:	40020000 	.word	0x40020000

0800224c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800224c:	b480      	push	{r7}
 800224e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002250:	bf00      	nop
 8002252:	46bd      	mov	sp, r7
 8002254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002258:	4770      	bx	lr

0800225a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800225a:	b480      	push	{r7}
 800225c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800225e:	e7fe      	b.n	800225e <HardFault_Handler+0x4>

08002260 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002260:	b480      	push	{r7}
 8002262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002264:	e7fe      	b.n	8002264 <MemManage_Handler+0x4>

08002266 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002266:	b480      	push	{r7}
 8002268:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800226a:	e7fe      	b.n	800226a <BusFault_Handler+0x4>

0800226c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800226c:	b480      	push	{r7}
 800226e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002270:	e7fe      	b.n	8002270 <UsageFault_Handler+0x4>

08002272 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002272:	b480      	push	{r7}
 8002274:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002276:	bf00      	nop
 8002278:	46bd      	mov	sp, r7
 800227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227e:	4770      	bx	lr

08002280 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002280:	b480      	push	{r7}
 8002282:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002284:	bf00      	nop
 8002286:	46bd      	mov	sp, r7
 8002288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228c:	4770      	bx	lr

0800228e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800228e:	b480      	push	{r7}
 8002290:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002292:	bf00      	nop
 8002294:	46bd      	mov	sp, r7
 8002296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229a:	4770      	bx	lr

0800229c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80022a0:	f000 f89e 	bl	80023e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80022a4:	bf00      	nop
 80022a6:	bd80      	pop	{r7, pc}

080022a8 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80022ac:	4802      	ldr	r0, [pc, #8]	; (80022b8 <SPI1_IRQHandler+0x10>)
 80022ae:	f001 fbd3 	bl	8003a58 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80022b2:	bf00      	nop
 80022b4:	bd80      	pop	{r7, pc}
 80022b6:	bf00      	nop
 80022b8:	20000070 	.word	0x20000070

080022bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80022bc:	b480      	push	{r7}
 80022be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80022c0:	4b08      	ldr	r3, [pc, #32]	; (80022e4 <SystemInit+0x28>)
 80022c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022c6:	4a07      	ldr	r2, [pc, #28]	; (80022e4 <SystemInit+0x28>)
 80022c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80022cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80022d0:	4b04      	ldr	r3, [pc, #16]	; (80022e4 <SystemInit+0x28>)
 80022d2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80022d6:	609a      	str	r2, [r3, #8]
#endif
}
 80022d8:	bf00      	nop
 80022da:	46bd      	mov	sp, r7
 80022dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e0:	4770      	bx	lr
 80022e2:	bf00      	nop
 80022e4:	e000ed00 	.word	0xe000ed00

080022e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80022e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002320 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80022ec:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80022ee:	e003      	b.n	80022f8 <LoopCopyDataInit>

080022f0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80022f0:	4b0c      	ldr	r3, [pc, #48]	; (8002324 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80022f2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80022f4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80022f6:	3104      	adds	r1, #4

080022f8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80022f8:	480b      	ldr	r0, [pc, #44]	; (8002328 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80022fa:	4b0c      	ldr	r3, [pc, #48]	; (800232c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80022fc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80022fe:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002300:	d3f6      	bcc.n	80022f0 <CopyDataInit>
  ldr  r2, =_sbss
 8002302:	4a0b      	ldr	r2, [pc, #44]	; (8002330 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002304:	e002      	b.n	800230c <LoopFillZerobss>

08002306 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002306:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002308:	f842 3b04 	str.w	r3, [r2], #4

0800230c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800230c:	4b09      	ldr	r3, [pc, #36]	; (8002334 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800230e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002310:	d3f9      	bcc.n	8002306 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002312:	f7ff ffd3 	bl	80022bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002316:	f001 fd69 	bl	8003dec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800231a:	f7ff fdd5 	bl	8001ec8 <main>
  bx  lr    
 800231e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002320:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002324:	08003e7c 	.word	0x08003e7c
  ldr  r0, =_sdata
 8002328:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800232c:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8002330:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8002334:	200000cc 	.word	0x200000cc

08002338 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002338:	e7fe      	b.n	8002338 <ADC_IRQHandler>
	...

0800233c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002340:	4b0e      	ldr	r3, [pc, #56]	; (800237c <HAL_Init+0x40>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a0d      	ldr	r2, [pc, #52]	; (800237c <HAL_Init+0x40>)
 8002346:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800234a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800234c:	4b0b      	ldr	r3, [pc, #44]	; (800237c <HAL_Init+0x40>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a0a      	ldr	r2, [pc, #40]	; (800237c <HAL_Init+0x40>)
 8002352:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002356:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002358:	4b08      	ldr	r3, [pc, #32]	; (800237c <HAL_Init+0x40>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a07      	ldr	r2, [pc, #28]	; (800237c <HAL_Init+0x40>)
 800235e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002362:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002364:	2003      	movs	r0, #3
 8002366:	f000 f94d 	bl	8002604 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800236a:	2000      	movs	r0, #0
 800236c:	f000 f808 	bl	8002380 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002370:	f7ff fef4 	bl	800215c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002374:	2300      	movs	r3, #0
}
 8002376:	4618      	mov	r0, r3
 8002378:	bd80      	pop	{r7, pc}
 800237a:	bf00      	nop
 800237c:	40023c00 	.word	0x40023c00

08002380 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b082      	sub	sp, #8
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002388:	4b12      	ldr	r3, [pc, #72]	; (80023d4 <HAL_InitTick+0x54>)
 800238a:	681a      	ldr	r2, [r3, #0]
 800238c:	4b12      	ldr	r3, [pc, #72]	; (80023d8 <HAL_InitTick+0x58>)
 800238e:	781b      	ldrb	r3, [r3, #0]
 8002390:	4619      	mov	r1, r3
 8002392:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002396:	fbb3 f3f1 	udiv	r3, r3, r1
 800239a:	fbb2 f3f3 	udiv	r3, r2, r3
 800239e:	4618      	mov	r0, r3
 80023a0:	f000 f965 	bl	800266e <HAL_SYSTICK_Config>
 80023a4:	4603      	mov	r3, r0
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d001      	beq.n	80023ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	e00e      	b.n	80023cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2b0f      	cmp	r3, #15
 80023b2:	d80a      	bhi.n	80023ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80023b4:	2200      	movs	r2, #0
 80023b6:	6879      	ldr	r1, [r7, #4]
 80023b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80023bc:	f000 f92d 	bl	800261a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80023c0:	4a06      	ldr	r2, [pc, #24]	; (80023dc <HAL_InitTick+0x5c>)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80023c6:	2300      	movs	r3, #0
 80023c8:	e000      	b.n	80023cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80023ca:	2301      	movs	r3, #1
}
 80023cc:	4618      	mov	r0, r3
 80023ce:	3708      	adds	r7, #8
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd80      	pop	{r7, pc}
 80023d4:	20000000 	.word	0x20000000
 80023d8:	20000008 	.word	0x20000008
 80023dc:	20000004 	.word	0x20000004

080023e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023e0:	b480      	push	{r7}
 80023e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80023e4:	4b06      	ldr	r3, [pc, #24]	; (8002400 <HAL_IncTick+0x20>)
 80023e6:	781b      	ldrb	r3, [r3, #0]
 80023e8:	461a      	mov	r2, r3
 80023ea:	4b06      	ldr	r3, [pc, #24]	; (8002404 <HAL_IncTick+0x24>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4413      	add	r3, r2
 80023f0:	4a04      	ldr	r2, [pc, #16]	; (8002404 <HAL_IncTick+0x24>)
 80023f2:	6013      	str	r3, [r2, #0]
}
 80023f4:	bf00      	nop
 80023f6:	46bd      	mov	sp, r7
 80023f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fc:	4770      	bx	lr
 80023fe:	bf00      	nop
 8002400:	20000008 	.word	0x20000008
 8002404:	200000c8 	.word	0x200000c8

08002408 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002408:	b480      	push	{r7}
 800240a:	af00      	add	r7, sp, #0
  return uwTick;
 800240c:	4b03      	ldr	r3, [pc, #12]	; (800241c <HAL_GetTick+0x14>)
 800240e:	681b      	ldr	r3, [r3, #0]
}
 8002410:	4618      	mov	r0, r3
 8002412:	46bd      	mov	sp, r7
 8002414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002418:	4770      	bx	lr
 800241a:	bf00      	nop
 800241c:	200000c8 	.word	0x200000c8

08002420 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b084      	sub	sp, #16
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002428:	f7ff ffee 	bl	8002408 <HAL_GetTick>
 800242c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002438:	d005      	beq.n	8002446 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800243a:	4b09      	ldr	r3, [pc, #36]	; (8002460 <HAL_Delay+0x40>)
 800243c:	781b      	ldrb	r3, [r3, #0]
 800243e:	461a      	mov	r2, r3
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	4413      	add	r3, r2
 8002444:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002446:	bf00      	nop
 8002448:	f7ff ffde 	bl	8002408 <HAL_GetTick>
 800244c:	4602      	mov	r2, r0
 800244e:	68bb      	ldr	r3, [r7, #8]
 8002450:	1ad3      	subs	r3, r2, r3
 8002452:	68fa      	ldr	r2, [r7, #12]
 8002454:	429a      	cmp	r2, r3
 8002456:	d8f7      	bhi.n	8002448 <HAL_Delay+0x28>
  {
  }
}
 8002458:	bf00      	nop
 800245a:	3710      	adds	r7, #16
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}
 8002460:	20000008 	.word	0x20000008

08002464 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002464:	b480      	push	{r7}
 8002466:	b085      	sub	sp, #20
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	f003 0307 	and.w	r3, r3, #7
 8002472:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002474:	4b0c      	ldr	r3, [pc, #48]	; (80024a8 <__NVIC_SetPriorityGrouping+0x44>)
 8002476:	68db      	ldr	r3, [r3, #12]
 8002478:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800247a:	68ba      	ldr	r2, [r7, #8]
 800247c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002480:	4013      	ands	r3, r2
 8002482:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800248c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002490:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002494:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002496:	4a04      	ldr	r2, [pc, #16]	; (80024a8 <__NVIC_SetPriorityGrouping+0x44>)
 8002498:	68bb      	ldr	r3, [r7, #8]
 800249a:	60d3      	str	r3, [r2, #12]
}
 800249c:	bf00      	nop
 800249e:	3714      	adds	r7, #20
 80024a0:	46bd      	mov	sp, r7
 80024a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a6:	4770      	bx	lr
 80024a8:	e000ed00 	.word	0xe000ed00

080024ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024ac:	b480      	push	{r7}
 80024ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024b0:	4b04      	ldr	r3, [pc, #16]	; (80024c4 <__NVIC_GetPriorityGrouping+0x18>)
 80024b2:	68db      	ldr	r3, [r3, #12]
 80024b4:	0a1b      	lsrs	r3, r3, #8
 80024b6:	f003 0307 	and.w	r3, r3, #7
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	46bd      	mov	sp, r7
 80024be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c2:	4770      	bx	lr
 80024c4:	e000ed00 	.word	0xe000ed00

080024c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b083      	sub	sp, #12
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	4603      	mov	r3, r0
 80024d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	db0b      	blt.n	80024f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024da:	79fb      	ldrb	r3, [r7, #7]
 80024dc:	f003 021f 	and.w	r2, r3, #31
 80024e0:	4907      	ldr	r1, [pc, #28]	; (8002500 <__NVIC_EnableIRQ+0x38>)
 80024e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024e6:	095b      	lsrs	r3, r3, #5
 80024e8:	2001      	movs	r0, #1
 80024ea:	fa00 f202 	lsl.w	r2, r0, r2
 80024ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80024f2:	bf00      	nop
 80024f4:	370c      	adds	r7, #12
 80024f6:	46bd      	mov	sp, r7
 80024f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fc:	4770      	bx	lr
 80024fe:	bf00      	nop
 8002500:	e000e100 	.word	0xe000e100

08002504 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002504:	b480      	push	{r7}
 8002506:	b083      	sub	sp, #12
 8002508:	af00      	add	r7, sp, #0
 800250a:	4603      	mov	r3, r0
 800250c:	6039      	str	r1, [r7, #0]
 800250e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002510:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002514:	2b00      	cmp	r3, #0
 8002516:	db0a      	blt.n	800252e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	b2da      	uxtb	r2, r3
 800251c:	490c      	ldr	r1, [pc, #48]	; (8002550 <__NVIC_SetPriority+0x4c>)
 800251e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002522:	0112      	lsls	r2, r2, #4
 8002524:	b2d2      	uxtb	r2, r2
 8002526:	440b      	add	r3, r1
 8002528:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800252c:	e00a      	b.n	8002544 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	b2da      	uxtb	r2, r3
 8002532:	4908      	ldr	r1, [pc, #32]	; (8002554 <__NVIC_SetPriority+0x50>)
 8002534:	79fb      	ldrb	r3, [r7, #7]
 8002536:	f003 030f 	and.w	r3, r3, #15
 800253a:	3b04      	subs	r3, #4
 800253c:	0112      	lsls	r2, r2, #4
 800253e:	b2d2      	uxtb	r2, r2
 8002540:	440b      	add	r3, r1
 8002542:	761a      	strb	r2, [r3, #24]
}
 8002544:	bf00      	nop
 8002546:	370c      	adds	r7, #12
 8002548:	46bd      	mov	sp, r7
 800254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254e:	4770      	bx	lr
 8002550:	e000e100 	.word	0xe000e100
 8002554:	e000ed00 	.word	0xe000ed00

08002558 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002558:	b480      	push	{r7}
 800255a:	b089      	sub	sp, #36	; 0x24
 800255c:	af00      	add	r7, sp, #0
 800255e:	60f8      	str	r0, [r7, #12]
 8002560:	60b9      	str	r1, [r7, #8]
 8002562:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	f003 0307 	and.w	r3, r3, #7
 800256a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800256c:	69fb      	ldr	r3, [r7, #28]
 800256e:	f1c3 0307 	rsb	r3, r3, #7
 8002572:	2b04      	cmp	r3, #4
 8002574:	bf28      	it	cs
 8002576:	2304      	movcs	r3, #4
 8002578:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800257a:	69fb      	ldr	r3, [r7, #28]
 800257c:	3304      	adds	r3, #4
 800257e:	2b06      	cmp	r3, #6
 8002580:	d902      	bls.n	8002588 <NVIC_EncodePriority+0x30>
 8002582:	69fb      	ldr	r3, [r7, #28]
 8002584:	3b03      	subs	r3, #3
 8002586:	e000      	b.n	800258a <NVIC_EncodePriority+0x32>
 8002588:	2300      	movs	r3, #0
 800258a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800258c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002590:	69bb      	ldr	r3, [r7, #24]
 8002592:	fa02 f303 	lsl.w	r3, r2, r3
 8002596:	43da      	mvns	r2, r3
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	401a      	ands	r2, r3
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025a0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80025a4:	697b      	ldr	r3, [r7, #20]
 80025a6:	fa01 f303 	lsl.w	r3, r1, r3
 80025aa:	43d9      	mvns	r1, r3
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025b0:	4313      	orrs	r3, r2
         );
}
 80025b2:	4618      	mov	r0, r3
 80025b4:	3724      	adds	r7, #36	; 0x24
 80025b6:	46bd      	mov	sp, r7
 80025b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025bc:	4770      	bx	lr
	...

080025c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b082      	sub	sp, #8
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	3b01      	subs	r3, #1
 80025cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80025d0:	d301      	bcc.n	80025d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80025d2:	2301      	movs	r3, #1
 80025d4:	e00f      	b.n	80025f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025d6:	4a0a      	ldr	r2, [pc, #40]	; (8002600 <SysTick_Config+0x40>)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	3b01      	subs	r3, #1
 80025dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025de:	210f      	movs	r1, #15
 80025e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80025e4:	f7ff ff8e 	bl	8002504 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025e8:	4b05      	ldr	r3, [pc, #20]	; (8002600 <SysTick_Config+0x40>)
 80025ea:	2200      	movs	r2, #0
 80025ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025ee:	4b04      	ldr	r3, [pc, #16]	; (8002600 <SysTick_Config+0x40>)
 80025f0:	2207      	movs	r2, #7
 80025f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025f4:	2300      	movs	r3, #0
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	3708      	adds	r7, #8
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	bf00      	nop
 8002600:	e000e010 	.word	0xe000e010

08002604 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b082      	sub	sp, #8
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800260c:	6878      	ldr	r0, [r7, #4]
 800260e:	f7ff ff29 	bl	8002464 <__NVIC_SetPriorityGrouping>
}
 8002612:	bf00      	nop
 8002614:	3708      	adds	r7, #8
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}

0800261a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800261a:	b580      	push	{r7, lr}
 800261c:	b086      	sub	sp, #24
 800261e:	af00      	add	r7, sp, #0
 8002620:	4603      	mov	r3, r0
 8002622:	60b9      	str	r1, [r7, #8]
 8002624:	607a      	str	r2, [r7, #4]
 8002626:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002628:	2300      	movs	r3, #0
 800262a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800262c:	f7ff ff3e 	bl	80024ac <__NVIC_GetPriorityGrouping>
 8002630:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002632:	687a      	ldr	r2, [r7, #4]
 8002634:	68b9      	ldr	r1, [r7, #8]
 8002636:	6978      	ldr	r0, [r7, #20]
 8002638:	f7ff ff8e 	bl	8002558 <NVIC_EncodePriority>
 800263c:	4602      	mov	r2, r0
 800263e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002642:	4611      	mov	r1, r2
 8002644:	4618      	mov	r0, r3
 8002646:	f7ff ff5d 	bl	8002504 <__NVIC_SetPriority>
}
 800264a:	bf00      	nop
 800264c:	3718      	adds	r7, #24
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}

08002652 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002652:	b580      	push	{r7, lr}
 8002654:	b082      	sub	sp, #8
 8002656:	af00      	add	r7, sp, #0
 8002658:	4603      	mov	r3, r0
 800265a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800265c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002660:	4618      	mov	r0, r3
 8002662:	f7ff ff31 	bl	80024c8 <__NVIC_EnableIRQ>
}
 8002666:	bf00      	nop
 8002668:	3708      	adds	r7, #8
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}

0800266e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800266e:	b580      	push	{r7, lr}
 8002670:	b082      	sub	sp, #8
 8002672:	af00      	add	r7, sp, #0
 8002674:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002676:	6878      	ldr	r0, [r7, #4]
 8002678:	f7ff ffa2 	bl	80025c0 <SysTick_Config>
 800267c:	4603      	mov	r3, r0
}
 800267e:	4618      	mov	r0, r3
 8002680:	3708      	adds	r7, #8
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}

08002686 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002686:	b480      	push	{r7}
 8002688:	b083      	sub	sp, #12
 800268a:	af00      	add	r7, sp, #0
 800268c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002694:	b2db      	uxtb	r3, r3
 8002696:	2b02      	cmp	r3, #2
 8002698:	d004      	beq.n	80026a4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2280      	movs	r2, #128	; 0x80
 800269e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80026a0:	2301      	movs	r3, #1
 80026a2:	e00c      	b.n	80026be <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2205      	movs	r2, #5
 80026a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	681a      	ldr	r2, [r3, #0]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f022 0201 	bic.w	r2, r2, #1
 80026ba:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80026bc:	2300      	movs	r3, #0
}
 80026be:	4618      	mov	r0, r3
 80026c0:	370c      	adds	r7, #12
 80026c2:	46bd      	mov	sp, r7
 80026c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c8:	4770      	bx	lr
	...

080026cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026cc:	b480      	push	{r7}
 80026ce:	b089      	sub	sp, #36	; 0x24
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
 80026d4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80026d6:	2300      	movs	r3, #0
 80026d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80026da:	2300      	movs	r3, #0
 80026dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80026de:	2300      	movs	r3, #0
 80026e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026e2:	2300      	movs	r3, #0
 80026e4:	61fb      	str	r3, [r7, #28]
 80026e6:	e165      	b.n	80029b4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80026e8:	2201      	movs	r2, #1
 80026ea:	69fb      	ldr	r3, [r7, #28]
 80026ec:	fa02 f303 	lsl.w	r3, r2, r3
 80026f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	697a      	ldr	r2, [r7, #20]
 80026f8:	4013      	ands	r3, r2
 80026fa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80026fc:	693a      	ldr	r2, [r7, #16]
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	429a      	cmp	r2, r3
 8002702:	f040 8154 	bne.w	80029ae <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	2b01      	cmp	r3, #1
 800270c:	d00b      	beq.n	8002726 <HAL_GPIO_Init+0x5a>
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	2b02      	cmp	r3, #2
 8002714:	d007      	beq.n	8002726 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800271a:	2b11      	cmp	r3, #17
 800271c:	d003      	beq.n	8002726 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	2b12      	cmp	r3, #18
 8002724:	d130      	bne.n	8002788 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	689b      	ldr	r3, [r3, #8]
 800272a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800272c:	69fb      	ldr	r3, [r7, #28]
 800272e:	005b      	lsls	r3, r3, #1
 8002730:	2203      	movs	r2, #3
 8002732:	fa02 f303 	lsl.w	r3, r2, r3
 8002736:	43db      	mvns	r3, r3
 8002738:	69ba      	ldr	r2, [r7, #24]
 800273a:	4013      	ands	r3, r2
 800273c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	68da      	ldr	r2, [r3, #12]
 8002742:	69fb      	ldr	r3, [r7, #28]
 8002744:	005b      	lsls	r3, r3, #1
 8002746:	fa02 f303 	lsl.w	r3, r2, r3
 800274a:	69ba      	ldr	r2, [r7, #24]
 800274c:	4313      	orrs	r3, r2
 800274e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	69ba      	ldr	r2, [r7, #24]
 8002754:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800275c:	2201      	movs	r2, #1
 800275e:	69fb      	ldr	r3, [r7, #28]
 8002760:	fa02 f303 	lsl.w	r3, r2, r3
 8002764:	43db      	mvns	r3, r3
 8002766:	69ba      	ldr	r2, [r7, #24]
 8002768:	4013      	ands	r3, r2
 800276a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	091b      	lsrs	r3, r3, #4
 8002772:	f003 0201 	and.w	r2, r3, #1
 8002776:	69fb      	ldr	r3, [r7, #28]
 8002778:	fa02 f303 	lsl.w	r3, r2, r3
 800277c:	69ba      	ldr	r2, [r7, #24]
 800277e:	4313      	orrs	r3, r2
 8002780:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	69ba      	ldr	r2, [r7, #24]
 8002786:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	68db      	ldr	r3, [r3, #12]
 800278c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800278e:	69fb      	ldr	r3, [r7, #28]
 8002790:	005b      	lsls	r3, r3, #1
 8002792:	2203      	movs	r2, #3
 8002794:	fa02 f303 	lsl.w	r3, r2, r3
 8002798:	43db      	mvns	r3, r3
 800279a:	69ba      	ldr	r2, [r7, #24]
 800279c:	4013      	ands	r3, r2
 800279e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	689a      	ldr	r2, [r3, #8]
 80027a4:	69fb      	ldr	r3, [r7, #28]
 80027a6:	005b      	lsls	r3, r3, #1
 80027a8:	fa02 f303 	lsl.w	r3, r2, r3
 80027ac:	69ba      	ldr	r2, [r7, #24]
 80027ae:	4313      	orrs	r3, r2
 80027b0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	69ba      	ldr	r2, [r7, #24]
 80027b6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	2b02      	cmp	r3, #2
 80027be:	d003      	beq.n	80027c8 <HAL_GPIO_Init+0xfc>
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	2b12      	cmp	r3, #18
 80027c6:	d123      	bne.n	8002810 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80027c8:	69fb      	ldr	r3, [r7, #28]
 80027ca:	08da      	lsrs	r2, r3, #3
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	3208      	adds	r2, #8
 80027d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80027d6:	69fb      	ldr	r3, [r7, #28]
 80027d8:	f003 0307 	and.w	r3, r3, #7
 80027dc:	009b      	lsls	r3, r3, #2
 80027de:	220f      	movs	r2, #15
 80027e0:	fa02 f303 	lsl.w	r3, r2, r3
 80027e4:	43db      	mvns	r3, r3
 80027e6:	69ba      	ldr	r2, [r7, #24]
 80027e8:	4013      	ands	r3, r2
 80027ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	691a      	ldr	r2, [r3, #16]
 80027f0:	69fb      	ldr	r3, [r7, #28]
 80027f2:	f003 0307 	and.w	r3, r3, #7
 80027f6:	009b      	lsls	r3, r3, #2
 80027f8:	fa02 f303 	lsl.w	r3, r2, r3
 80027fc:	69ba      	ldr	r2, [r7, #24]
 80027fe:	4313      	orrs	r3, r2
 8002800:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002802:	69fb      	ldr	r3, [r7, #28]
 8002804:	08da      	lsrs	r2, r3, #3
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	3208      	adds	r2, #8
 800280a:	69b9      	ldr	r1, [r7, #24]
 800280c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002816:	69fb      	ldr	r3, [r7, #28]
 8002818:	005b      	lsls	r3, r3, #1
 800281a:	2203      	movs	r2, #3
 800281c:	fa02 f303 	lsl.w	r3, r2, r3
 8002820:	43db      	mvns	r3, r3
 8002822:	69ba      	ldr	r2, [r7, #24]
 8002824:	4013      	ands	r3, r2
 8002826:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	f003 0203 	and.w	r2, r3, #3
 8002830:	69fb      	ldr	r3, [r7, #28]
 8002832:	005b      	lsls	r3, r3, #1
 8002834:	fa02 f303 	lsl.w	r3, r2, r3
 8002838:	69ba      	ldr	r2, [r7, #24]
 800283a:	4313      	orrs	r3, r2
 800283c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	69ba      	ldr	r2, [r7, #24]
 8002842:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800284c:	2b00      	cmp	r3, #0
 800284e:	f000 80ae 	beq.w	80029ae <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002852:	2300      	movs	r3, #0
 8002854:	60fb      	str	r3, [r7, #12]
 8002856:	4b5c      	ldr	r3, [pc, #368]	; (80029c8 <HAL_GPIO_Init+0x2fc>)
 8002858:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800285a:	4a5b      	ldr	r2, [pc, #364]	; (80029c8 <HAL_GPIO_Init+0x2fc>)
 800285c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002860:	6453      	str	r3, [r2, #68]	; 0x44
 8002862:	4b59      	ldr	r3, [pc, #356]	; (80029c8 <HAL_GPIO_Init+0x2fc>)
 8002864:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002866:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800286a:	60fb      	str	r3, [r7, #12]
 800286c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800286e:	4a57      	ldr	r2, [pc, #348]	; (80029cc <HAL_GPIO_Init+0x300>)
 8002870:	69fb      	ldr	r3, [r7, #28]
 8002872:	089b      	lsrs	r3, r3, #2
 8002874:	3302      	adds	r3, #2
 8002876:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800287a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800287c:	69fb      	ldr	r3, [r7, #28]
 800287e:	f003 0303 	and.w	r3, r3, #3
 8002882:	009b      	lsls	r3, r3, #2
 8002884:	220f      	movs	r2, #15
 8002886:	fa02 f303 	lsl.w	r3, r2, r3
 800288a:	43db      	mvns	r3, r3
 800288c:	69ba      	ldr	r2, [r7, #24]
 800288e:	4013      	ands	r3, r2
 8002890:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	4a4e      	ldr	r2, [pc, #312]	; (80029d0 <HAL_GPIO_Init+0x304>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d025      	beq.n	80028e6 <HAL_GPIO_Init+0x21a>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	4a4d      	ldr	r2, [pc, #308]	; (80029d4 <HAL_GPIO_Init+0x308>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d01f      	beq.n	80028e2 <HAL_GPIO_Init+0x216>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	4a4c      	ldr	r2, [pc, #304]	; (80029d8 <HAL_GPIO_Init+0x30c>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d019      	beq.n	80028de <HAL_GPIO_Init+0x212>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	4a4b      	ldr	r2, [pc, #300]	; (80029dc <HAL_GPIO_Init+0x310>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d013      	beq.n	80028da <HAL_GPIO_Init+0x20e>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	4a4a      	ldr	r2, [pc, #296]	; (80029e0 <HAL_GPIO_Init+0x314>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d00d      	beq.n	80028d6 <HAL_GPIO_Init+0x20a>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	4a49      	ldr	r2, [pc, #292]	; (80029e4 <HAL_GPIO_Init+0x318>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d007      	beq.n	80028d2 <HAL_GPIO_Init+0x206>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	4a48      	ldr	r2, [pc, #288]	; (80029e8 <HAL_GPIO_Init+0x31c>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d101      	bne.n	80028ce <HAL_GPIO_Init+0x202>
 80028ca:	2306      	movs	r3, #6
 80028cc:	e00c      	b.n	80028e8 <HAL_GPIO_Init+0x21c>
 80028ce:	2307      	movs	r3, #7
 80028d0:	e00a      	b.n	80028e8 <HAL_GPIO_Init+0x21c>
 80028d2:	2305      	movs	r3, #5
 80028d4:	e008      	b.n	80028e8 <HAL_GPIO_Init+0x21c>
 80028d6:	2304      	movs	r3, #4
 80028d8:	e006      	b.n	80028e8 <HAL_GPIO_Init+0x21c>
 80028da:	2303      	movs	r3, #3
 80028dc:	e004      	b.n	80028e8 <HAL_GPIO_Init+0x21c>
 80028de:	2302      	movs	r3, #2
 80028e0:	e002      	b.n	80028e8 <HAL_GPIO_Init+0x21c>
 80028e2:	2301      	movs	r3, #1
 80028e4:	e000      	b.n	80028e8 <HAL_GPIO_Init+0x21c>
 80028e6:	2300      	movs	r3, #0
 80028e8:	69fa      	ldr	r2, [r7, #28]
 80028ea:	f002 0203 	and.w	r2, r2, #3
 80028ee:	0092      	lsls	r2, r2, #2
 80028f0:	4093      	lsls	r3, r2
 80028f2:	69ba      	ldr	r2, [r7, #24]
 80028f4:	4313      	orrs	r3, r2
 80028f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80028f8:	4934      	ldr	r1, [pc, #208]	; (80029cc <HAL_GPIO_Init+0x300>)
 80028fa:	69fb      	ldr	r3, [r7, #28]
 80028fc:	089b      	lsrs	r3, r3, #2
 80028fe:	3302      	adds	r3, #2
 8002900:	69ba      	ldr	r2, [r7, #24]
 8002902:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002906:	4b39      	ldr	r3, [pc, #228]	; (80029ec <HAL_GPIO_Init+0x320>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800290c:	693b      	ldr	r3, [r7, #16]
 800290e:	43db      	mvns	r3, r3
 8002910:	69ba      	ldr	r2, [r7, #24]
 8002912:	4013      	ands	r3, r2
 8002914:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800291e:	2b00      	cmp	r3, #0
 8002920:	d003      	beq.n	800292a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002922:	69ba      	ldr	r2, [r7, #24]
 8002924:	693b      	ldr	r3, [r7, #16]
 8002926:	4313      	orrs	r3, r2
 8002928:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800292a:	4a30      	ldr	r2, [pc, #192]	; (80029ec <HAL_GPIO_Init+0x320>)
 800292c:	69bb      	ldr	r3, [r7, #24]
 800292e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002930:	4b2e      	ldr	r3, [pc, #184]	; (80029ec <HAL_GPIO_Init+0x320>)
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002936:	693b      	ldr	r3, [r7, #16]
 8002938:	43db      	mvns	r3, r3
 800293a:	69ba      	ldr	r2, [r7, #24]
 800293c:	4013      	ands	r3, r2
 800293e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002948:	2b00      	cmp	r3, #0
 800294a:	d003      	beq.n	8002954 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800294c:	69ba      	ldr	r2, [r7, #24]
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	4313      	orrs	r3, r2
 8002952:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002954:	4a25      	ldr	r2, [pc, #148]	; (80029ec <HAL_GPIO_Init+0x320>)
 8002956:	69bb      	ldr	r3, [r7, #24]
 8002958:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800295a:	4b24      	ldr	r3, [pc, #144]	; (80029ec <HAL_GPIO_Init+0x320>)
 800295c:	689b      	ldr	r3, [r3, #8]
 800295e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002960:	693b      	ldr	r3, [r7, #16]
 8002962:	43db      	mvns	r3, r3
 8002964:	69ba      	ldr	r2, [r7, #24]
 8002966:	4013      	ands	r3, r2
 8002968:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002972:	2b00      	cmp	r3, #0
 8002974:	d003      	beq.n	800297e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002976:	69ba      	ldr	r2, [r7, #24]
 8002978:	693b      	ldr	r3, [r7, #16]
 800297a:	4313      	orrs	r3, r2
 800297c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800297e:	4a1b      	ldr	r2, [pc, #108]	; (80029ec <HAL_GPIO_Init+0x320>)
 8002980:	69bb      	ldr	r3, [r7, #24]
 8002982:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002984:	4b19      	ldr	r3, [pc, #100]	; (80029ec <HAL_GPIO_Init+0x320>)
 8002986:	68db      	ldr	r3, [r3, #12]
 8002988:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800298a:	693b      	ldr	r3, [r7, #16]
 800298c:	43db      	mvns	r3, r3
 800298e:	69ba      	ldr	r2, [r7, #24]
 8002990:	4013      	ands	r3, r2
 8002992:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800299c:	2b00      	cmp	r3, #0
 800299e:	d003      	beq.n	80029a8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80029a0:	69ba      	ldr	r2, [r7, #24]
 80029a2:	693b      	ldr	r3, [r7, #16]
 80029a4:	4313      	orrs	r3, r2
 80029a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80029a8:	4a10      	ldr	r2, [pc, #64]	; (80029ec <HAL_GPIO_Init+0x320>)
 80029aa:	69bb      	ldr	r3, [r7, #24]
 80029ac:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029ae:	69fb      	ldr	r3, [r7, #28]
 80029b0:	3301      	adds	r3, #1
 80029b2:	61fb      	str	r3, [r7, #28]
 80029b4:	69fb      	ldr	r3, [r7, #28]
 80029b6:	2b0f      	cmp	r3, #15
 80029b8:	f67f ae96 	bls.w	80026e8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80029bc:	bf00      	nop
 80029be:	3724      	adds	r7, #36	; 0x24
 80029c0:	46bd      	mov	sp, r7
 80029c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c6:	4770      	bx	lr
 80029c8:	40023800 	.word	0x40023800
 80029cc:	40013800 	.word	0x40013800
 80029d0:	40020000 	.word	0x40020000
 80029d4:	40020400 	.word	0x40020400
 80029d8:	40020800 	.word	0x40020800
 80029dc:	40020c00 	.word	0x40020c00
 80029e0:	40021000 	.word	0x40021000
 80029e4:	40021400 	.word	0x40021400
 80029e8:	40021800 	.word	0x40021800
 80029ec:	40013c00 	.word	0x40013c00

080029f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b083      	sub	sp, #12
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
 80029f8:	460b      	mov	r3, r1
 80029fa:	807b      	strh	r3, [r7, #2]
 80029fc:	4613      	mov	r3, r2
 80029fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a00:	787b      	ldrb	r3, [r7, #1]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d003      	beq.n	8002a0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a06:	887a      	ldrh	r2, [r7, #2]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002a0c:	e003      	b.n	8002a16 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002a0e:	887b      	ldrh	r3, [r7, #2]
 8002a10:	041a      	lsls	r2, r3, #16
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	619a      	str	r2, [r3, #24]
}
 8002a16:	bf00      	nop
 8002a18:	370c      	adds	r7, #12
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a20:	4770      	bx	lr
	...

08002a24 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b084      	sub	sp, #16
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
 8002a2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d101      	bne.n	8002a38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a34:	2301      	movs	r3, #1
 8002a36:	e0cc      	b.n	8002bd2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a38:	4b68      	ldr	r3, [pc, #416]	; (8002bdc <HAL_RCC_ClockConfig+0x1b8>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f003 030f 	and.w	r3, r3, #15
 8002a40:	683a      	ldr	r2, [r7, #0]
 8002a42:	429a      	cmp	r2, r3
 8002a44:	d90c      	bls.n	8002a60 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a46:	4b65      	ldr	r3, [pc, #404]	; (8002bdc <HAL_RCC_ClockConfig+0x1b8>)
 8002a48:	683a      	ldr	r2, [r7, #0]
 8002a4a:	b2d2      	uxtb	r2, r2
 8002a4c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a4e:	4b63      	ldr	r3, [pc, #396]	; (8002bdc <HAL_RCC_ClockConfig+0x1b8>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f003 030f 	and.w	r3, r3, #15
 8002a56:	683a      	ldr	r2, [r7, #0]
 8002a58:	429a      	cmp	r2, r3
 8002a5a:	d001      	beq.n	8002a60 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	e0b8      	b.n	8002bd2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f003 0302 	and.w	r3, r3, #2
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d020      	beq.n	8002aae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f003 0304 	and.w	r3, r3, #4
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d005      	beq.n	8002a84 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a78:	4b59      	ldr	r3, [pc, #356]	; (8002be0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	4a58      	ldr	r2, [pc, #352]	; (8002be0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a7e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002a82:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f003 0308 	and.w	r3, r3, #8
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d005      	beq.n	8002a9c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a90:	4b53      	ldr	r3, [pc, #332]	; (8002be0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	4a52      	ldr	r2, [pc, #328]	; (8002be0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a96:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002a9a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a9c:	4b50      	ldr	r3, [pc, #320]	; (8002be0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a9e:	689b      	ldr	r3, [r3, #8]
 8002aa0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	689b      	ldr	r3, [r3, #8]
 8002aa8:	494d      	ldr	r1, [pc, #308]	; (8002be0 <HAL_RCC_ClockConfig+0x1bc>)
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f003 0301 	and.w	r3, r3, #1
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d044      	beq.n	8002b44 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	2b01      	cmp	r3, #1
 8002ac0:	d107      	bne.n	8002ad2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ac2:	4b47      	ldr	r3, [pc, #284]	; (8002be0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d119      	bne.n	8002b02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e07f      	b.n	8002bd2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	2b02      	cmp	r3, #2
 8002ad8:	d003      	beq.n	8002ae2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ade:	2b03      	cmp	r3, #3
 8002ae0:	d107      	bne.n	8002af2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ae2:	4b3f      	ldr	r3, [pc, #252]	; (8002be0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d109      	bne.n	8002b02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002aee:	2301      	movs	r3, #1
 8002af0:	e06f      	b.n	8002bd2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002af2:	4b3b      	ldr	r3, [pc, #236]	; (8002be0 <HAL_RCC_ClockConfig+0x1bc>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f003 0302 	and.w	r3, r3, #2
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d101      	bne.n	8002b02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002afe:	2301      	movs	r3, #1
 8002b00:	e067      	b.n	8002bd2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b02:	4b37      	ldr	r3, [pc, #220]	; (8002be0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b04:	689b      	ldr	r3, [r3, #8]
 8002b06:	f023 0203 	bic.w	r2, r3, #3
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	4934      	ldr	r1, [pc, #208]	; (8002be0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b10:	4313      	orrs	r3, r2
 8002b12:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b14:	f7ff fc78 	bl	8002408 <HAL_GetTick>
 8002b18:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b1a:	e00a      	b.n	8002b32 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b1c:	f7ff fc74 	bl	8002408 <HAL_GetTick>
 8002b20:	4602      	mov	r2, r0
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	1ad3      	subs	r3, r2, r3
 8002b26:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d901      	bls.n	8002b32 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b2e:	2303      	movs	r3, #3
 8002b30:	e04f      	b.n	8002bd2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b32:	4b2b      	ldr	r3, [pc, #172]	; (8002be0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b34:	689b      	ldr	r3, [r3, #8]
 8002b36:	f003 020c 	and.w	r2, r3, #12
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	009b      	lsls	r3, r3, #2
 8002b40:	429a      	cmp	r2, r3
 8002b42:	d1eb      	bne.n	8002b1c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b44:	4b25      	ldr	r3, [pc, #148]	; (8002bdc <HAL_RCC_ClockConfig+0x1b8>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f003 030f 	and.w	r3, r3, #15
 8002b4c:	683a      	ldr	r2, [r7, #0]
 8002b4e:	429a      	cmp	r2, r3
 8002b50:	d20c      	bcs.n	8002b6c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b52:	4b22      	ldr	r3, [pc, #136]	; (8002bdc <HAL_RCC_ClockConfig+0x1b8>)
 8002b54:	683a      	ldr	r2, [r7, #0]
 8002b56:	b2d2      	uxtb	r2, r2
 8002b58:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b5a:	4b20      	ldr	r3, [pc, #128]	; (8002bdc <HAL_RCC_ClockConfig+0x1b8>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f003 030f 	and.w	r3, r3, #15
 8002b62:	683a      	ldr	r2, [r7, #0]
 8002b64:	429a      	cmp	r2, r3
 8002b66:	d001      	beq.n	8002b6c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	e032      	b.n	8002bd2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f003 0304 	and.w	r3, r3, #4
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d008      	beq.n	8002b8a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b78:	4b19      	ldr	r3, [pc, #100]	; (8002be0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b7a:	689b      	ldr	r3, [r3, #8]
 8002b7c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	68db      	ldr	r3, [r3, #12]
 8002b84:	4916      	ldr	r1, [pc, #88]	; (8002be0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b86:	4313      	orrs	r3, r2
 8002b88:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 0308 	and.w	r3, r3, #8
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d009      	beq.n	8002baa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b96:	4b12      	ldr	r3, [pc, #72]	; (8002be0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b98:	689b      	ldr	r3, [r3, #8]
 8002b9a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	691b      	ldr	r3, [r3, #16]
 8002ba2:	00db      	lsls	r3, r3, #3
 8002ba4:	490e      	ldr	r1, [pc, #56]	; (8002be0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002baa:	f000 f821 	bl	8002bf0 <HAL_RCC_GetSysClockFreq>
 8002bae:	4601      	mov	r1, r0
 8002bb0:	4b0b      	ldr	r3, [pc, #44]	; (8002be0 <HAL_RCC_ClockConfig+0x1bc>)
 8002bb2:	689b      	ldr	r3, [r3, #8]
 8002bb4:	091b      	lsrs	r3, r3, #4
 8002bb6:	f003 030f 	and.w	r3, r3, #15
 8002bba:	4a0a      	ldr	r2, [pc, #40]	; (8002be4 <HAL_RCC_ClockConfig+0x1c0>)
 8002bbc:	5cd3      	ldrb	r3, [r2, r3]
 8002bbe:	fa21 f303 	lsr.w	r3, r1, r3
 8002bc2:	4a09      	ldr	r2, [pc, #36]	; (8002be8 <HAL_RCC_ClockConfig+0x1c4>)
 8002bc4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002bc6:	4b09      	ldr	r3, [pc, #36]	; (8002bec <HAL_RCC_ClockConfig+0x1c8>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f7ff fbd8 	bl	8002380 <HAL_InitTick>

  return HAL_OK;
 8002bd0:	2300      	movs	r3, #0
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	3710      	adds	r7, #16
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd80      	pop	{r7, pc}
 8002bda:	bf00      	nop
 8002bdc:	40023c00 	.word	0x40023c00
 8002be0:	40023800 	.word	0x40023800
 8002be4:	08003e5c 	.word	0x08003e5c
 8002be8:	20000000 	.word	0x20000000
 8002bec:	20000004 	.word	0x20000004

08002bf0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002bf2:	b087      	sub	sp, #28
 8002bf4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 8002c02:	2300      	movs	r3, #0
 8002c04:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002c06:	2300      	movs	r3, #0
 8002c08:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c0a:	4bc6      	ldr	r3, [pc, #792]	; (8002f24 <HAL_RCC_GetSysClockFreq+0x334>)
 8002c0c:	689b      	ldr	r3, [r3, #8]
 8002c0e:	f003 030c 	and.w	r3, r3, #12
 8002c12:	2b0c      	cmp	r3, #12
 8002c14:	f200 817e 	bhi.w	8002f14 <HAL_RCC_GetSysClockFreq+0x324>
 8002c18:	a201      	add	r2, pc, #4	; (adr r2, 8002c20 <HAL_RCC_GetSysClockFreq+0x30>)
 8002c1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c1e:	bf00      	nop
 8002c20:	08002c55 	.word	0x08002c55
 8002c24:	08002f15 	.word	0x08002f15
 8002c28:	08002f15 	.word	0x08002f15
 8002c2c:	08002f15 	.word	0x08002f15
 8002c30:	08002c5b 	.word	0x08002c5b
 8002c34:	08002f15 	.word	0x08002f15
 8002c38:	08002f15 	.word	0x08002f15
 8002c3c:	08002f15 	.word	0x08002f15
 8002c40:	08002c61 	.word	0x08002c61
 8002c44:	08002f15 	.word	0x08002f15
 8002c48:	08002f15 	.word	0x08002f15
 8002c4c:	08002f15 	.word	0x08002f15
 8002c50:	08002dbd 	.word	0x08002dbd
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002c54:	4bb4      	ldr	r3, [pc, #720]	; (8002f28 <HAL_RCC_GetSysClockFreq+0x338>)
 8002c56:	613b      	str	r3, [r7, #16]
       break;
 8002c58:	e15f      	b.n	8002f1a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002c5a:	4bb4      	ldr	r3, [pc, #720]	; (8002f2c <HAL_RCC_GetSysClockFreq+0x33c>)
 8002c5c:	613b      	str	r3, [r7, #16]
      break;
 8002c5e:	e15c      	b.n	8002f1a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c60:	4bb0      	ldr	r3, [pc, #704]	; (8002f24 <HAL_RCC_GetSysClockFreq+0x334>)
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c68:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c6a:	4bae      	ldr	r3, [pc, #696]	; (8002f24 <HAL_RCC_GetSysClockFreq+0x334>)
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d04a      	beq.n	8002d0c <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c76:	4bab      	ldr	r3, [pc, #684]	; (8002f24 <HAL_RCC_GetSysClockFreq+0x334>)
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	099b      	lsrs	r3, r3, #6
 8002c7c:	f04f 0400 	mov.w	r4, #0
 8002c80:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002c84:	f04f 0200 	mov.w	r2, #0
 8002c88:	ea03 0501 	and.w	r5, r3, r1
 8002c8c:	ea04 0602 	and.w	r6, r4, r2
 8002c90:	4629      	mov	r1, r5
 8002c92:	4632      	mov	r2, r6
 8002c94:	f04f 0300 	mov.w	r3, #0
 8002c98:	f04f 0400 	mov.w	r4, #0
 8002c9c:	0154      	lsls	r4, r2, #5
 8002c9e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002ca2:	014b      	lsls	r3, r1, #5
 8002ca4:	4619      	mov	r1, r3
 8002ca6:	4622      	mov	r2, r4
 8002ca8:	1b49      	subs	r1, r1, r5
 8002caa:	eb62 0206 	sbc.w	r2, r2, r6
 8002cae:	f04f 0300 	mov.w	r3, #0
 8002cb2:	f04f 0400 	mov.w	r4, #0
 8002cb6:	0194      	lsls	r4, r2, #6
 8002cb8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002cbc:	018b      	lsls	r3, r1, #6
 8002cbe:	1a5b      	subs	r3, r3, r1
 8002cc0:	eb64 0402 	sbc.w	r4, r4, r2
 8002cc4:	f04f 0100 	mov.w	r1, #0
 8002cc8:	f04f 0200 	mov.w	r2, #0
 8002ccc:	00e2      	lsls	r2, r4, #3
 8002cce:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002cd2:	00d9      	lsls	r1, r3, #3
 8002cd4:	460b      	mov	r3, r1
 8002cd6:	4614      	mov	r4, r2
 8002cd8:	195b      	adds	r3, r3, r5
 8002cda:	eb44 0406 	adc.w	r4, r4, r6
 8002cde:	f04f 0100 	mov.w	r1, #0
 8002ce2:	f04f 0200 	mov.w	r2, #0
 8002ce6:	0262      	lsls	r2, r4, #9
 8002ce8:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002cec:	0259      	lsls	r1, r3, #9
 8002cee:	460b      	mov	r3, r1
 8002cf0:	4614      	mov	r4, r2
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	4621      	mov	r1, r4
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	f04f 0400 	mov.w	r4, #0
 8002cfc:	461a      	mov	r2, r3
 8002cfe:	4623      	mov	r3, r4
 8002d00:	f7fd ff00 	bl	8000b04 <__aeabi_uldivmod>
 8002d04:	4603      	mov	r3, r0
 8002d06:	460c      	mov	r4, r1
 8002d08:	617b      	str	r3, [r7, #20]
 8002d0a:	e049      	b.n	8002da0 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d0c:	4b85      	ldr	r3, [pc, #532]	; (8002f24 <HAL_RCC_GetSysClockFreq+0x334>)
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	099b      	lsrs	r3, r3, #6
 8002d12:	f04f 0400 	mov.w	r4, #0
 8002d16:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002d1a:	f04f 0200 	mov.w	r2, #0
 8002d1e:	ea03 0501 	and.w	r5, r3, r1
 8002d22:	ea04 0602 	and.w	r6, r4, r2
 8002d26:	4629      	mov	r1, r5
 8002d28:	4632      	mov	r2, r6
 8002d2a:	f04f 0300 	mov.w	r3, #0
 8002d2e:	f04f 0400 	mov.w	r4, #0
 8002d32:	0154      	lsls	r4, r2, #5
 8002d34:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002d38:	014b      	lsls	r3, r1, #5
 8002d3a:	4619      	mov	r1, r3
 8002d3c:	4622      	mov	r2, r4
 8002d3e:	1b49      	subs	r1, r1, r5
 8002d40:	eb62 0206 	sbc.w	r2, r2, r6
 8002d44:	f04f 0300 	mov.w	r3, #0
 8002d48:	f04f 0400 	mov.w	r4, #0
 8002d4c:	0194      	lsls	r4, r2, #6
 8002d4e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002d52:	018b      	lsls	r3, r1, #6
 8002d54:	1a5b      	subs	r3, r3, r1
 8002d56:	eb64 0402 	sbc.w	r4, r4, r2
 8002d5a:	f04f 0100 	mov.w	r1, #0
 8002d5e:	f04f 0200 	mov.w	r2, #0
 8002d62:	00e2      	lsls	r2, r4, #3
 8002d64:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002d68:	00d9      	lsls	r1, r3, #3
 8002d6a:	460b      	mov	r3, r1
 8002d6c:	4614      	mov	r4, r2
 8002d6e:	195b      	adds	r3, r3, r5
 8002d70:	eb44 0406 	adc.w	r4, r4, r6
 8002d74:	f04f 0100 	mov.w	r1, #0
 8002d78:	f04f 0200 	mov.w	r2, #0
 8002d7c:	02a2      	lsls	r2, r4, #10
 8002d7e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002d82:	0299      	lsls	r1, r3, #10
 8002d84:	460b      	mov	r3, r1
 8002d86:	4614      	mov	r4, r2
 8002d88:	4618      	mov	r0, r3
 8002d8a:	4621      	mov	r1, r4
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	f04f 0400 	mov.w	r4, #0
 8002d92:	461a      	mov	r2, r3
 8002d94:	4623      	mov	r3, r4
 8002d96:	f7fd feb5 	bl	8000b04 <__aeabi_uldivmod>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	460c      	mov	r4, r1
 8002d9e:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002da0:	4b60      	ldr	r3, [pc, #384]	; (8002f24 <HAL_RCC_GetSysClockFreq+0x334>)
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	0c1b      	lsrs	r3, r3, #16
 8002da6:	f003 0303 	and.w	r3, r3, #3
 8002daa:	3301      	adds	r3, #1
 8002dac:	005b      	lsls	r3, r3, #1
 8002dae:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8002db0:	697a      	ldr	r2, [r7, #20]
 8002db2:	68bb      	ldr	r3, [r7, #8]
 8002db4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002db8:	613b      	str	r3, [r7, #16]
      break;
 8002dba:	e0ae      	b.n	8002f1a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002dbc:	4b59      	ldr	r3, [pc, #356]	; (8002f24 <HAL_RCC_GetSysClockFreq+0x334>)
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002dc4:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002dc6:	4b57      	ldr	r3, [pc, #348]	; (8002f24 <HAL_RCC_GetSysClockFreq+0x334>)
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d04a      	beq.n	8002e68 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002dd2:	4b54      	ldr	r3, [pc, #336]	; (8002f24 <HAL_RCC_GetSysClockFreq+0x334>)
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	099b      	lsrs	r3, r3, #6
 8002dd8:	f04f 0400 	mov.w	r4, #0
 8002ddc:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002de0:	f04f 0200 	mov.w	r2, #0
 8002de4:	ea03 0501 	and.w	r5, r3, r1
 8002de8:	ea04 0602 	and.w	r6, r4, r2
 8002dec:	4629      	mov	r1, r5
 8002dee:	4632      	mov	r2, r6
 8002df0:	f04f 0300 	mov.w	r3, #0
 8002df4:	f04f 0400 	mov.w	r4, #0
 8002df8:	0154      	lsls	r4, r2, #5
 8002dfa:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002dfe:	014b      	lsls	r3, r1, #5
 8002e00:	4619      	mov	r1, r3
 8002e02:	4622      	mov	r2, r4
 8002e04:	1b49      	subs	r1, r1, r5
 8002e06:	eb62 0206 	sbc.w	r2, r2, r6
 8002e0a:	f04f 0300 	mov.w	r3, #0
 8002e0e:	f04f 0400 	mov.w	r4, #0
 8002e12:	0194      	lsls	r4, r2, #6
 8002e14:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002e18:	018b      	lsls	r3, r1, #6
 8002e1a:	1a5b      	subs	r3, r3, r1
 8002e1c:	eb64 0402 	sbc.w	r4, r4, r2
 8002e20:	f04f 0100 	mov.w	r1, #0
 8002e24:	f04f 0200 	mov.w	r2, #0
 8002e28:	00e2      	lsls	r2, r4, #3
 8002e2a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002e2e:	00d9      	lsls	r1, r3, #3
 8002e30:	460b      	mov	r3, r1
 8002e32:	4614      	mov	r4, r2
 8002e34:	195b      	adds	r3, r3, r5
 8002e36:	eb44 0406 	adc.w	r4, r4, r6
 8002e3a:	f04f 0100 	mov.w	r1, #0
 8002e3e:	f04f 0200 	mov.w	r2, #0
 8002e42:	0262      	lsls	r2, r4, #9
 8002e44:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002e48:	0259      	lsls	r1, r3, #9
 8002e4a:	460b      	mov	r3, r1
 8002e4c:	4614      	mov	r4, r2
 8002e4e:	4618      	mov	r0, r3
 8002e50:	4621      	mov	r1, r4
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	f04f 0400 	mov.w	r4, #0
 8002e58:	461a      	mov	r2, r3
 8002e5a:	4623      	mov	r3, r4
 8002e5c:	f7fd fe52 	bl	8000b04 <__aeabi_uldivmod>
 8002e60:	4603      	mov	r3, r0
 8002e62:	460c      	mov	r4, r1
 8002e64:	617b      	str	r3, [r7, #20]
 8002e66:	e049      	b.n	8002efc <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e68:	4b2e      	ldr	r3, [pc, #184]	; (8002f24 <HAL_RCC_GetSysClockFreq+0x334>)
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	099b      	lsrs	r3, r3, #6
 8002e6e:	f04f 0400 	mov.w	r4, #0
 8002e72:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002e76:	f04f 0200 	mov.w	r2, #0
 8002e7a:	ea03 0501 	and.w	r5, r3, r1
 8002e7e:	ea04 0602 	and.w	r6, r4, r2
 8002e82:	4629      	mov	r1, r5
 8002e84:	4632      	mov	r2, r6
 8002e86:	f04f 0300 	mov.w	r3, #0
 8002e8a:	f04f 0400 	mov.w	r4, #0
 8002e8e:	0154      	lsls	r4, r2, #5
 8002e90:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002e94:	014b      	lsls	r3, r1, #5
 8002e96:	4619      	mov	r1, r3
 8002e98:	4622      	mov	r2, r4
 8002e9a:	1b49      	subs	r1, r1, r5
 8002e9c:	eb62 0206 	sbc.w	r2, r2, r6
 8002ea0:	f04f 0300 	mov.w	r3, #0
 8002ea4:	f04f 0400 	mov.w	r4, #0
 8002ea8:	0194      	lsls	r4, r2, #6
 8002eaa:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002eae:	018b      	lsls	r3, r1, #6
 8002eb0:	1a5b      	subs	r3, r3, r1
 8002eb2:	eb64 0402 	sbc.w	r4, r4, r2
 8002eb6:	f04f 0100 	mov.w	r1, #0
 8002eba:	f04f 0200 	mov.w	r2, #0
 8002ebe:	00e2      	lsls	r2, r4, #3
 8002ec0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002ec4:	00d9      	lsls	r1, r3, #3
 8002ec6:	460b      	mov	r3, r1
 8002ec8:	4614      	mov	r4, r2
 8002eca:	195b      	adds	r3, r3, r5
 8002ecc:	eb44 0406 	adc.w	r4, r4, r6
 8002ed0:	f04f 0100 	mov.w	r1, #0
 8002ed4:	f04f 0200 	mov.w	r2, #0
 8002ed8:	02a2      	lsls	r2, r4, #10
 8002eda:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002ede:	0299      	lsls	r1, r3, #10
 8002ee0:	460b      	mov	r3, r1
 8002ee2:	4614      	mov	r4, r2
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	4621      	mov	r1, r4
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	f04f 0400 	mov.w	r4, #0
 8002eee:	461a      	mov	r2, r3
 8002ef0:	4623      	mov	r3, r4
 8002ef2:	f7fd fe07 	bl	8000b04 <__aeabi_uldivmod>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	460c      	mov	r4, r1
 8002efa:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002efc:	4b09      	ldr	r3, [pc, #36]	; (8002f24 <HAL_RCC_GetSysClockFreq+0x334>)
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	0f1b      	lsrs	r3, r3, #28
 8002f02:	f003 0307 	and.w	r3, r3, #7
 8002f06:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8002f08:	697a      	ldr	r2, [r7, #20]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f10:	613b      	str	r3, [r7, #16]
      break;
 8002f12:	e002      	b.n	8002f1a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002f14:	4b04      	ldr	r3, [pc, #16]	; (8002f28 <HAL_RCC_GetSysClockFreq+0x338>)
 8002f16:	613b      	str	r3, [r7, #16]
      break;
 8002f18:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f1a:	693b      	ldr	r3, [r7, #16]
}
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	371c      	adds	r7, #28
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f24:	40023800 	.word	0x40023800
 8002f28:	00f42400 	.word	0x00f42400
 8002f2c:	007a1200 	.word	0x007a1200

08002f30 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b086      	sub	sp, #24
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f003 0301 	and.w	r3, r3, #1
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	f000 8083 	beq.w	8003050 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002f4a:	4b95      	ldr	r3, [pc, #596]	; (80031a0 <HAL_RCC_OscConfig+0x270>)
 8002f4c:	689b      	ldr	r3, [r3, #8]
 8002f4e:	f003 030c 	and.w	r3, r3, #12
 8002f52:	2b04      	cmp	r3, #4
 8002f54:	d019      	beq.n	8002f8a <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002f56:	4b92      	ldr	r3, [pc, #584]	; (80031a0 <HAL_RCC_OscConfig+0x270>)
 8002f58:	689b      	ldr	r3, [r3, #8]
 8002f5a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002f5e:	2b08      	cmp	r3, #8
 8002f60:	d106      	bne.n	8002f70 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002f62:	4b8f      	ldr	r3, [pc, #572]	; (80031a0 <HAL_RCC_OscConfig+0x270>)
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f6a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f6e:	d00c      	beq.n	8002f8a <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f70:	4b8b      	ldr	r3, [pc, #556]	; (80031a0 <HAL_RCC_OscConfig+0x270>)
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002f78:	2b0c      	cmp	r3, #12
 8002f7a:	d112      	bne.n	8002fa2 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f7c:	4b88      	ldr	r3, [pc, #544]	; (80031a0 <HAL_RCC_OscConfig+0x270>)
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f84:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f88:	d10b      	bne.n	8002fa2 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f8a:	4b85      	ldr	r3, [pc, #532]	; (80031a0 <HAL_RCC_OscConfig+0x270>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d05b      	beq.n	800304e <HAL_RCC_OscConfig+0x11e>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d157      	bne.n	800304e <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e216      	b.n	80033d0 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002faa:	d106      	bne.n	8002fba <HAL_RCC_OscConfig+0x8a>
 8002fac:	4b7c      	ldr	r3, [pc, #496]	; (80031a0 <HAL_RCC_OscConfig+0x270>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a7b      	ldr	r2, [pc, #492]	; (80031a0 <HAL_RCC_OscConfig+0x270>)
 8002fb2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fb6:	6013      	str	r3, [r2, #0]
 8002fb8:	e01d      	b.n	8002ff6 <HAL_RCC_OscConfig+0xc6>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002fc2:	d10c      	bne.n	8002fde <HAL_RCC_OscConfig+0xae>
 8002fc4:	4b76      	ldr	r3, [pc, #472]	; (80031a0 <HAL_RCC_OscConfig+0x270>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a75      	ldr	r2, [pc, #468]	; (80031a0 <HAL_RCC_OscConfig+0x270>)
 8002fca:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002fce:	6013      	str	r3, [r2, #0]
 8002fd0:	4b73      	ldr	r3, [pc, #460]	; (80031a0 <HAL_RCC_OscConfig+0x270>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a72      	ldr	r2, [pc, #456]	; (80031a0 <HAL_RCC_OscConfig+0x270>)
 8002fd6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fda:	6013      	str	r3, [r2, #0]
 8002fdc:	e00b      	b.n	8002ff6 <HAL_RCC_OscConfig+0xc6>
 8002fde:	4b70      	ldr	r3, [pc, #448]	; (80031a0 <HAL_RCC_OscConfig+0x270>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4a6f      	ldr	r2, [pc, #444]	; (80031a0 <HAL_RCC_OscConfig+0x270>)
 8002fe4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fe8:	6013      	str	r3, [r2, #0]
 8002fea:	4b6d      	ldr	r3, [pc, #436]	; (80031a0 <HAL_RCC_OscConfig+0x270>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4a6c      	ldr	r2, [pc, #432]	; (80031a0 <HAL_RCC_OscConfig+0x270>)
 8002ff0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ff4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d013      	beq.n	8003026 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ffe:	f7ff fa03 	bl	8002408 <HAL_GetTick>
 8003002:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003004:	e008      	b.n	8003018 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003006:	f7ff f9ff 	bl	8002408 <HAL_GetTick>
 800300a:	4602      	mov	r2, r0
 800300c:	693b      	ldr	r3, [r7, #16]
 800300e:	1ad3      	subs	r3, r2, r3
 8003010:	2b64      	cmp	r3, #100	; 0x64
 8003012:	d901      	bls.n	8003018 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003014:	2303      	movs	r3, #3
 8003016:	e1db      	b.n	80033d0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003018:	4b61      	ldr	r3, [pc, #388]	; (80031a0 <HAL_RCC_OscConfig+0x270>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003020:	2b00      	cmp	r3, #0
 8003022:	d0f0      	beq.n	8003006 <HAL_RCC_OscConfig+0xd6>
 8003024:	e014      	b.n	8003050 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003026:	f7ff f9ef 	bl	8002408 <HAL_GetTick>
 800302a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800302c:	e008      	b.n	8003040 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800302e:	f7ff f9eb 	bl	8002408 <HAL_GetTick>
 8003032:	4602      	mov	r2, r0
 8003034:	693b      	ldr	r3, [r7, #16]
 8003036:	1ad3      	subs	r3, r2, r3
 8003038:	2b64      	cmp	r3, #100	; 0x64
 800303a:	d901      	bls.n	8003040 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 800303c:	2303      	movs	r3, #3
 800303e:	e1c7      	b.n	80033d0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003040:	4b57      	ldr	r3, [pc, #348]	; (80031a0 <HAL_RCC_OscConfig+0x270>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003048:	2b00      	cmp	r3, #0
 800304a:	d1f0      	bne.n	800302e <HAL_RCC_OscConfig+0xfe>
 800304c:	e000      	b.n	8003050 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800304e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f003 0302 	and.w	r3, r3, #2
 8003058:	2b00      	cmp	r3, #0
 800305a:	d06f      	beq.n	800313c <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800305c:	4b50      	ldr	r3, [pc, #320]	; (80031a0 <HAL_RCC_OscConfig+0x270>)
 800305e:	689b      	ldr	r3, [r3, #8]
 8003060:	f003 030c 	and.w	r3, r3, #12
 8003064:	2b00      	cmp	r3, #0
 8003066:	d017      	beq.n	8003098 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003068:	4b4d      	ldr	r3, [pc, #308]	; (80031a0 <HAL_RCC_OscConfig+0x270>)
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003070:	2b08      	cmp	r3, #8
 8003072:	d105      	bne.n	8003080 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003074:	4b4a      	ldr	r3, [pc, #296]	; (80031a0 <HAL_RCC_OscConfig+0x270>)
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800307c:	2b00      	cmp	r3, #0
 800307e:	d00b      	beq.n	8003098 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003080:	4b47      	ldr	r3, [pc, #284]	; (80031a0 <HAL_RCC_OscConfig+0x270>)
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003088:	2b0c      	cmp	r3, #12
 800308a:	d11c      	bne.n	80030c6 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800308c:	4b44      	ldr	r3, [pc, #272]	; (80031a0 <HAL_RCC_OscConfig+0x270>)
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003094:	2b00      	cmp	r3, #0
 8003096:	d116      	bne.n	80030c6 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003098:	4b41      	ldr	r3, [pc, #260]	; (80031a0 <HAL_RCC_OscConfig+0x270>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f003 0302 	and.w	r3, r3, #2
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d005      	beq.n	80030b0 <HAL_RCC_OscConfig+0x180>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	68db      	ldr	r3, [r3, #12]
 80030a8:	2b01      	cmp	r3, #1
 80030aa:	d001      	beq.n	80030b0 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 80030ac:	2301      	movs	r3, #1
 80030ae:	e18f      	b.n	80033d0 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030b0:	4b3b      	ldr	r3, [pc, #236]	; (80031a0 <HAL_RCC_OscConfig+0x270>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	691b      	ldr	r3, [r3, #16]
 80030bc:	00db      	lsls	r3, r3, #3
 80030be:	4938      	ldr	r1, [pc, #224]	; (80031a0 <HAL_RCC_OscConfig+0x270>)
 80030c0:	4313      	orrs	r3, r2
 80030c2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030c4:	e03a      	b.n	800313c <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	68db      	ldr	r3, [r3, #12]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d020      	beq.n	8003110 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030ce:	4b35      	ldr	r3, [pc, #212]	; (80031a4 <HAL_RCC_OscConfig+0x274>)
 80030d0:	2201      	movs	r2, #1
 80030d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030d4:	f7ff f998 	bl	8002408 <HAL_GetTick>
 80030d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030da:	e008      	b.n	80030ee <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030dc:	f7ff f994 	bl	8002408 <HAL_GetTick>
 80030e0:	4602      	mov	r2, r0
 80030e2:	693b      	ldr	r3, [r7, #16]
 80030e4:	1ad3      	subs	r3, r2, r3
 80030e6:	2b02      	cmp	r3, #2
 80030e8:	d901      	bls.n	80030ee <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80030ea:	2303      	movs	r3, #3
 80030ec:	e170      	b.n	80033d0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030ee:	4b2c      	ldr	r3, [pc, #176]	; (80031a0 <HAL_RCC_OscConfig+0x270>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f003 0302 	and.w	r3, r3, #2
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d0f0      	beq.n	80030dc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030fa:	4b29      	ldr	r3, [pc, #164]	; (80031a0 <HAL_RCC_OscConfig+0x270>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	691b      	ldr	r3, [r3, #16]
 8003106:	00db      	lsls	r3, r3, #3
 8003108:	4925      	ldr	r1, [pc, #148]	; (80031a0 <HAL_RCC_OscConfig+0x270>)
 800310a:	4313      	orrs	r3, r2
 800310c:	600b      	str	r3, [r1, #0]
 800310e:	e015      	b.n	800313c <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003110:	4b24      	ldr	r3, [pc, #144]	; (80031a4 <HAL_RCC_OscConfig+0x274>)
 8003112:	2200      	movs	r2, #0
 8003114:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003116:	f7ff f977 	bl	8002408 <HAL_GetTick>
 800311a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800311c:	e008      	b.n	8003130 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800311e:	f7ff f973 	bl	8002408 <HAL_GetTick>
 8003122:	4602      	mov	r2, r0
 8003124:	693b      	ldr	r3, [r7, #16]
 8003126:	1ad3      	subs	r3, r2, r3
 8003128:	2b02      	cmp	r3, #2
 800312a:	d901      	bls.n	8003130 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 800312c:	2303      	movs	r3, #3
 800312e:	e14f      	b.n	80033d0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003130:	4b1b      	ldr	r3, [pc, #108]	; (80031a0 <HAL_RCC_OscConfig+0x270>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f003 0302 	and.w	r3, r3, #2
 8003138:	2b00      	cmp	r3, #0
 800313a:	d1f0      	bne.n	800311e <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f003 0308 	and.w	r3, r3, #8
 8003144:	2b00      	cmp	r3, #0
 8003146:	d037      	beq.n	80031b8 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	695b      	ldr	r3, [r3, #20]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d016      	beq.n	800317e <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003150:	4b15      	ldr	r3, [pc, #84]	; (80031a8 <HAL_RCC_OscConfig+0x278>)
 8003152:	2201      	movs	r2, #1
 8003154:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003156:	f7ff f957 	bl	8002408 <HAL_GetTick>
 800315a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800315c:	e008      	b.n	8003170 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800315e:	f7ff f953 	bl	8002408 <HAL_GetTick>
 8003162:	4602      	mov	r2, r0
 8003164:	693b      	ldr	r3, [r7, #16]
 8003166:	1ad3      	subs	r3, r2, r3
 8003168:	2b02      	cmp	r3, #2
 800316a:	d901      	bls.n	8003170 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800316c:	2303      	movs	r3, #3
 800316e:	e12f      	b.n	80033d0 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003170:	4b0b      	ldr	r3, [pc, #44]	; (80031a0 <HAL_RCC_OscConfig+0x270>)
 8003172:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003174:	f003 0302 	and.w	r3, r3, #2
 8003178:	2b00      	cmp	r3, #0
 800317a:	d0f0      	beq.n	800315e <HAL_RCC_OscConfig+0x22e>
 800317c:	e01c      	b.n	80031b8 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800317e:	4b0a      	ldr	r3, [pc, #40]	; (80031a8 <HAL_RCC_OscConfig+0x278>)
 8003180:	2200      	movs	r2, #0
 8003182:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003184:	f7ff f940 	bl	8002408 <HAL_GetTick>
 8003188:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800318a:	e00f      	b.n	80031ac <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800318c:	f7ff f93c 	bl	8002408 <HAL_GetTick>
 8003190:	4602      	mov	r2, r0
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	1ad3      	subs	r3, r2, r3
 8003196:	2b02      	cmp	r3, #2
 8003198:	d908      	bls.n	80031ac <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 800319a:	2303      	movs	r3, #3
 800319c:	e118      	b.n	80033d0 <HAL_RCC_OscConfig+0x4a0>
 800319e:	bf00      	nop
 80031a0:	40023800 	.word	0x40023800
 80031a4:	42470000 	.word	0x42470000
 80031a8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031ac:	4b8a      	ldr	r3, [pc, #552]	; (80033d8 <HAL_RCC_OscConfig+0x4a8>)
 80031ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031b0:	f003 0302 	and.w	r3, r3, #2
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d1e9      	bne.n	800318c <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f003 0304 	and.w	r3, r3, #4
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	f000 8097 	beq.w	80032f4 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031c6:	2300      	movs	r3, #0
 80031c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031ca:	4b83      	ldr	r3, [pc, #524]	; (80033d8 <HAL_RCC_OscConfig+0x4a8>)
 80031cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d10f      	bne.n	80031f6 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031d6:	2300      	movs	r3, #0
 80031d8:	60fb      	str	r3, [r7, #12]
 80031da:	4b7f      	ldr	r3, [pc, #508]	; (80033d8 <HAL_RCC_OscConfig+0x4a8>)
 80031dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031de:	4a7e      	ldr	r2, [pc, #504]	; (80033d8 <HAL_RCC_OscConfig+0x4a8>)
 80031e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031e4:	6413      	str	r3, [r2, #64]	; 0x40
 80031e6:	4b7c      	ldr	r3, [pc, #496]	; (80033d8 <HAL_RCC_OscConfig+0x4a8>)
 80031e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031ee:	60fb      	str	r3, [r7, #12]
 80031f0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80031f2:	2301      	movs	r3, #1
 80031f4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031f6:	4b79      	ldr	r3, [pc, #484]	; (80033dc <HAL_RCC_OscConfig+0x4ac>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d118      	bne.n	8003234 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003202:	4b76      	ldr	r3, [pc, #472]	; (80033dc <HAL_RCC_OscConfig+0x4ac>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4a75      	ldr	r2, [pc, #468]	; (80033dc <HAL_RCC_OscConfig+0x4ac>)
 8003208:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800320c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800320e:	f7ff f8fb 	bl	8002408 <HAL_GetTick>
 8003212:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003214:	e008      	b.n	8003228 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003216:	f7ff f8f7 	bl	8002408 <HAL_GetTick>
 800321a:	4602      	mov	r2, r0
 800321c:	693b      	ldr	r3, [r7, #16]
 800321e:	1ad3      	subs	r3, r2, r3
 8003220:	2b02      	cmp	r3, #2
 8003222:	d901      	bls.n	8003228 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003224:	2303      	movs	r3, #3
 8003226:	e0d3      	b.n	80033d0 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003228:	4b6c      	ldr	r3, [pc, #432]	; (80033dc <HAL_RCC_OscConfig+0x4ac>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003230:	2b00      	cmp	r3, #0
 8003232:	d0f0      	beq.n	8003216 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	689b      	ldr	r3, [r3, #8]
 8003238:	2b01      	cmp	r3, #1
 800323a:	d106      	bne.n	800324a <HAL_RCC_OscConfig+0x31a>
 800323c:	4b66      	ldr	r3, [pc, #408]	; (80033d8 <HAL_RCC_OscConfig+0x4a8>)
 800323e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003240:	4a65      	ldr	r2, [pc, #404]	; (80033d8 <HAL_RCC_OscConfig+0x4a8>)
 8003242:	f043 0301 	orr.w	r3, r3, #1
 8003246:	6713      	str	r3, [r2, #112]	; 0x70
 8003248:	e01c      	b.n	8003284 <HAL_RCC_OscConfig+0x354>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	689b      	ldr	r3, [r3, #8]
 800324e:	2b05      	cmp	r3, #5
 8003250:	d10c      	bne.n	800326c <HAL_RCC_OscConfig+0x33c>
 8003252:	4b61      	ldr	r3, [pc, #388]	; (80033d8 <HAL_RCC_OscConfig+0x4a8>)
 8003254:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003256:	4a60      	ldr	r2, [pc, #384]	; (80033d8 <HAL_RCC_OscConfig+0x4a8>)
 8003258:	f043 0304 	orr.w	r3, r3, #4
 800325c:	6713      	str	r3, [r2, #112]	; 0x70
 800325e:	4b5e      	ldr	r3, [pc, #376]	; (80033d8 <HAL_RCC_OscConfig+0x4a8>)
 8003260:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003262:	4a5d      	ldr	r2, [pc, #372]	; (80033d8 <HAL_RCC_OscConfig+0x4a8>)
 8003264:	f043 0301 	orr.w	r3, r3, #1
 8003268:	6713      	str	r3, [r2, #112]	; 0x70
 800326a:	e00b      	b.n	8003284 <HAL_RCC_OscConfig+0x354>
 800326c:	4b5a      	ldr	r3, [pc, #360]	; (80033d8 <HAL_RCC_OscConfig+0x4a8>)
 800326e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003270:	4a59      	ldr	r2, [pc, #356]	; (80033d8 <HAL_RCC_OscConfig+0x4a8>)
 8003272:	f023 0301 	bic.w	r3, r3, #1
 8003276:	6713      	str	r3, [r2, #112]	; 0x70
 8003278:	4b57      	ldr	r3, [pc, #348]	; (80033d8 <HAL_RCC_OscConfig+0x4a8>)
 800327a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800327c:	4a56      	ldr	r2, [pc, #344]	; (80033d8 <HAL_RCC_OscConfig+0x4a8>)
 800327e:	f023 0304 	bic.w	r3, r3, #4
 8003282:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d015      	beq.n	80032b8 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800328c:	f7ff f8bc 	bl	8002408 <HAL_GetTick>
 8003290:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003292:	e00a      	b.n	80032aa <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003294:	f7ff f8b8 	bl	8002408 <HAL_GetTick>
 8003298:	4602      	mov	r2, r0
 800329a:	693b      	ldr	r3, [r7, #16]
 800329c:	1ad3      	subs	r3, r2, r3
 800329e:	f241 3288 	movw	r2, #5000	; 0x1388
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d901      	bls.n	80032aa <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 80032a6:	2303      	movs	r3, #3
 80032a8:	e092      	b.n	80033d0 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032aa:	4b4b      	ldr	r3, [pc, #300]	; (80033d8 <HAL_RCC_OscConfig+0x4a8>)
 80032ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032ae:	f003 0302 	and.w	r3, r3, #2
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d0ee      	beq.n	8003294 <HAL_RCC_OscConfig+0x364>
 80032b6:	e014      	b.n	80032e2 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032b8:	f7ff f8a6 	bl	8002408 <HAL_GetTick>
 80032bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032be:	e00a      	b.n	80032d6 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032c0:	f7ff f8a2 	bl	8002408 <HAL_GetTick>
 80032c4:	4602      	mov	r2, r0
 80032c6:	693b      	ldr	r3, [r7, #16]
 80032c8:	1ad3      	subs	r3, r2, r3
 80032ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d901      	bls.n	80032d6 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 80032d2:	2303      	movs	r3, #3
 80032d4:	e07c      	b.n	80033d0 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032d6:	4b40      	ldr	r3, [pc, #256]	; (80033d8 <HAL_RCC_OscConfig+0x4a8>)
 80032d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032da:	f003 0302 	and.w	r3, r3, #2
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d1ee      	bne.n	80032c0 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80032e2:	7dfb      	ldrb	r3, [r7, #23]
 80032e4:	2b01      	cmp	r3, #1
 80032e6:	d105      	bne.n	80032f4 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032e8:	4b3b      	ldr	r3, [pc, #236]	; (80033d8 <HAL_RCC_OscConfig+0x4a8>)
 80032ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ec:	4a3a      	ldr	r2, [pc, #232]	; (80033d8 <HAL_RCC_OscConfig+0x4a8>)
 80032ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032f2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	699b      	ldr	r3, [r3, #24]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d068      	beq.n	80033ce <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80032fc:	4b36      	ldr	r3, [pc, #216]	; (80033d8 <HAL_RCC_OscConfig+0x4a8>)
 80032fe:	689b      	ldr	r3, [r3, #8]
 8003300:	f003 030c 	and.w	r3, r3, #12
 8003304:	2b08      	cmp	r3, #8
 8003306:	d060      	beq.n	80033ca <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	699b      	ldr	r3, [r3, #24]
 800330c:	2b02      	cmp	r3, #2
 800330e:	d145      	bne.n	800339c <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003310:	4b33      	ldr	r3, [pc, #204]	; (80033e0 <HAL_RCC_OscConfig+0x4b0>)
 8003312:	2200      	movs	r2, #0
 8003314:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003316:	f7ff f877 	bl	8002408 <HAL_GetTick>
 800331a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800331c:	e008      	b.n	8003330 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800331e:	f7ff f873 	bl	8002408 <HAL_GetTick>
 8003322:	4602      	mov	r2, r0
 8003324:	693b      	ldr	r3, [r7, #16]
 8003326:	1ad3      	subs	r3, r2, r3
 8003328:	2b02      	cmp	r3, #2
 800332a:	d901      	bls.n	8003330 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 800332c:	2303      	movs	r3, #3
 800332e:	e04f      	b.n	80033d0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003330:	4b29      	ldr	r3, [pc, #164]	; (80033d8 <HAL_RCC_OscConfig+0x4a8>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003338:	2b00      	cmp	r3, #0
 800333a:	d1f0      	bne.n	800331e <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	69da      	ldr	r2, [r3, #28]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6a1b      	ldr	r3, [r3, #32]
 8003344:	431a      	orrs	r2, r3
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800334a:	019b      	lsls	r3, r3, #6
 800334c:	431a      	orrs	r2, r3
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003352:	085b      	lsrs	r3, r3, #1
 8003354:	3b01      	subs	r3, #1
 8003356:	041b      	lsls	r3, r3, #16
 8003358:	431a      	orrs	r2, r3
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800335e:	061b      	lsls	r3, r3, #24
 8003360:	431a      	orrs	r2, r3
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003366:	071b      	lsls	r3, r3, #28
 8003368:	491b      	ldr	r1, [pc, #108]	; (80033d8 <HAL_RCC_OscConfig+0x4a8>)
 800336a:	4313      	orrs	r3, r2
 800336c:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800336e:	4b1c      	ldr	r3, [pc, #112]	; (80033e0 <HAL_RCC_OscConfig+0x4b0>)
 8003370:	2201      	movs	r2, #1
 8003372:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003374:	f7ff f848 	bl	8002408 <HAL_GetTick>
 8003378:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800337a:	e008      	b.n	800338e <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800337c:	f7ff f844 	bl	8002408 <HAL_GetTick>
 8003380:	4602      	mov	r2, r0
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	1ad3      	subs	r3, r2, r3
 8003386:	2b02      	cmp	r3, #2
 8003388:	d901      	bls.n	800338e <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 800338a:	2303      	movs	r3, #3
 800338c:	e020      	b.n	80033d0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800338e:	4b12      	ldr	r3, [pc, #72]	; (80033d8 <HAL_RCC_OscConfig+0x4a8>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003396:	2b00      	cmp	r3, #0
 8003398:	d0f0      	beq.n	800337c <HAL_RCC_OscConfig+0x44c>
 800339a:	e018      	b.n	80033ce <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800339c:	4b10      	ldr	r3, [pc, #64]	; (80033e0 <HAL_RCC_OscConfig+0x4b0>)
 800339e:	2200      	movs	r2, #0
 80033a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033a2:	f7ff f831 	bl	8002408 <HAL_GetTick>
 80033a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033a8:	e008      	b.n	80033bc <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033aa:	f7ff f82d 	bl	8002408 <HAL_GetTick>
 80033ae:	4602      	mov	r2, r0
 80033b0:	693b      	ldr	r3, [r7, #16]
 80033b2:	1ad3      	subs	r3, r2, r3
 80033b4:	2b02      	cmp	r3, #2
 80033b6:	d901      	bls.n	80033bc <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 80033b8:	2303      	movs	r3, #3
 80033ba:	e009      	b.n	80033d0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033bc:	4b06      	ldr	r3, [pc, #24]	; (80033d8 <HAL_RCC_OscConfig+0x4a8>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d1f0      	bne.n	80033aa <HAL_RCC_OscConfig+0x47a>
 80033c8:	e001      	b.n	80033ce <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80033ca:	2301      	movs	r3, #1
 80033cc:	e000      	b.n	80033d0 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 80033ce:	2300      	movs	r3, #0
}
 80033d0:	4618      	mov	r0, r3
 80033d2:	3718      	adds	r7, #24
 80033d4:	46bd      	mov	sp, r7
 80033d6:	bd80      	pop	{r7, pc}
 80033d8:	40023800 	.word	0x40023800
 80033dc:	40007000 	.word	0x40007000
 80033e0:	42470060 	.word	0x42470060

080033e4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b082      	sub	sp, #8
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d101      	bne.n	80033f6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
 80033f4:	e056      	b.n	80034a4 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2200      	movs	r2, #0
 80033fa:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003402:	b2db      	uxtb	r3, r3
 8003404:	2b00      	cmp	r3, #0
 8003406:	d106      	bne.n	8003416 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2200      	movs	r2, #0
 800340c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003410:	6878      	ldr	r0, [r7, #4]
 8003412:	f7fe fecb 	bl	80021ac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2202      	movs	r2, #2
 800341a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	681a      	ldr	r2, [r3, #0]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800342c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	685a      	ldr	r2, [r3, #4]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	431a      	orrs	r2, r3
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	68db      	ldr	r3, [r3, #12]
 800343c:	431a      	orrs	r2, r3
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	691b      	ldr	r3, [r3, #16]
 8003442:	431a      	orrs	r2, r3
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	695b      	ldr	r3, [r3, #20]
 8003448:	431a      	orrs	r2, r3
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	699b      	ldr	r3, [r3, #24]
 800344e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003452:	431a      	orrs	r2, r3
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	69db      	ldr	r3, [r3, #28]
 8003458:	431a      	orrs	r2, r3
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6a1b      	ldr	r3, [r3, #32]
 800345e:	ea42 0103 	orr.w	r1, r2, r3
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	430a      	orrs	r2, r1
 800346c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	699b      	ldr	r3, [r3, #24]
 8003472:	0c1b      	lsrs	r3, r3, #16
 8003474:	f003 0104 	and.w	r1, r3, #4
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	430a      	orrs	r2, r1
 8003482:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	69da      	ldr	r2, [r3, #28]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003492:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2200      	movs	r2, #0
 8003498:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2201      	movs	r2, #1
 800349e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80034a2:	2300      	movs	r3, #0
}
 80034a4:	4618      	mov	r0, r3
 80034a6:	3708      	adds	r7, #8
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bd80      	pop	{r7, pc}

080034ac <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b088      	sub	sp, #32
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	60f8      	str	r0, [r7, #12]
 80034b4:	60b9      	str	r1, [r7, #8]
 80034b6:	603b      	str	r3, [r7, #0]
 80034b8:	4613      	mov	r3, r2
 80034ba:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80034bc:	2300      	movs	r3, #0
 80034be:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80034c6:	2b01      	cmp	r3, #1
 80034c8:	d101      	bne.n	80034ce <HAL_SPI_Transmit+0x22>
 80034ca:	2302      	movs	r3, #2
 80034cc:	e11e      	b.n	800370c <HAL_SPI_Transmit+0x260>
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	2201      	movs	r2, #1
 80034d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80034d6:	f7fe ff97 	bl	8002408 <HAL_GetTick>
 80034da:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80034dc:	88fb      	ldrh	r3, [r7, #6]
 80034de:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80034e6:	b2db      	uxtb	r3, r3
 80034e8:	2b01      	cmp	r3, #1
 80034ea:	d002      	beq.n	80034f2 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80034ec:	2302      	movs	r3, #2
 80034ee:	77fb      	strb	r3, [r7, #31]
    goto error;
 80034f0:	e103      	b.n	80036fa <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 80034f2:	68bb      	ldr	r3, [r7, #8]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d002      	beq.n	80034fe <HAL_SPI_Transmit+0x52>
 80034f8:	88fb      	ldrh	r3, [r7, #6]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d102      	bne.n	8003504 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80034fe:	2301      	movs	r3, #1
 8003500:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003502:	e0fa      	b.n	80036fa <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	2203      	movs	r2, #3
 8003508:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	2200      	movs	r2, #0
 8003510:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	68ba      	ldr	r2, [r7, #8]
 8003516:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	88fa      	ldrh	r2, [r7, #6]
 800351c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	88fa      	ldrh	r2, [r7, #6]
 8003522:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	2200      	movs	r2, #0
 8003528:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	2200      	movs	r2, #0
 800352e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	2200      	movs	r2, #0
 8003534:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	2200      	movs	r2, #0
 800353a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	2200      	movs	r2, #0
 8003540:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	689b      	ldr	r3, [r3, #8]
 8003546:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800354a:	d107      	bne.n	800355c <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	681a      	ldr	r2, [r3, #0]
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800355a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003566:	2b40      	cmp	r3, #64	; 0x40
 8003568:	d007      	beq.n	800357a <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	681a      	ldr	r2, [r3, #0]
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003578:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	68db      	ldr	r3, [r3, #12]
 800357e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003582:	d14b      	bne.n	800361c <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d002      	beq.n	8003592 <HAL_SPI_Transmit+0xe6>
 800358c:	8afb      	ldrh	r3, [r7, #22]
 800358e:	2b01      	cmp	r3, #1
 8003590:	d13e      	bne.n	8003610 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003596:	881a      	ldrh	r2, [r3, #0]
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035a2:	1c9a      	adds	r2, r3, #2
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80035ac:	b29b      	uxth	r3, r3
 80035ae:	3b01      	subs	r3, #1
 80035b0:	b29a      	uxth	r2, r3
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80035b6:	e02b      	b.n	8003610 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	689b      	ldr	r3, [r3, #8]
 80035be:	f003 0302 	and.w	r3, r3, #2
 80035c2:	2b02      	cmp	r3, #2
 80035c4:	d112      	bne.n	80035ec <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ca:	881a      	ldrh	r2, [r3, #0]
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035d6:	1c9a      	adds	r2, r3, #2
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80035e0:	b29b      	uxth	r3, r3
 80035e2:	3b01      	subs	r3, #1
 80035e4:	b29a      	uxth	r2, r3
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	86da      	strh	r2, [r3, #54]	; 0x36
 80035ea:	e011      	b.n	8003610 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80035ec:	f7fe ff0c 	bl	8002408 <HAL_GetTick>
 80035f0:	4602      	mov	r2, r0
 80035f2:	69bb      	ldr	r3, [r7, #24]
 80035f4:	1ad3      	subs	r3, r2, r3
 80035f6:	683a      	ldr	r2, [r7, #0]
 80035f8:	429a      	cmp	r2, r3
 80035fa:	d803      	bhi.n	8003604 <HAL_SPI_Transmit+0x158>
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003602:	d102      	bne.n	800360a <HAL_SPI_Transmit+0x15e>
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d102      	bne.n	8003610 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800360a:	2303      	movs	r3, #3
 800360c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800360e:	e074      	b.n	80036fa <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003614:	b29b      	uxth	r3, r3
 8003616:	2b00      	cmp	r3, #0
 8003618:	d1ce      	bne.n	80035b8 <HAL_SPI_Transmit+0x10c>
 800361a:	e04c      	b.n	80036b6 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d002      	beq.n	800362a <HAL_SPI_Transmit+0x17e>
 8003624:	8afb      	ldrh	r3, [r7, #22]
 8003626:	2b01      	cmp	r3, #1
 8003628:	d140      	bne.n	80036ac <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	330c      	adds	r3, #12
 8003634:	7812      	ldrb	r2, [r2, #0]
 8003636:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800363c:	1c5a      	adds	r2, r3, #1
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003646:	b29b      	uxth	r3, r3
 8003648:	3b01      	subs	r3, #1
 800364a:	b29a      	uxth	r2, r3
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003650:	e02c      	b.n	80036ac <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	689b      	ldr	r3, [r3, #8]
 8003658:	f003 0302 	and.w	r3, r3, #2
 800365c:	2b02      	cmp	r3, #2
 800365e:	d113      	bne.n	8003688 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	330c      	adds	r3, #12
 800366a:	7812      	ldrb	r2, [r2, #0]
 800366c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003672:	1c5a      	adds	r2, r3, #1
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800367c:	b29b      	uxth	r3, r3
 800367e:	3b01      	subs	r3, #1
 8003680:	b29a      	uxth	r2, r3
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	86da      	strh	r2, [r3, #54]	; 0x36
 8003686:	e011      	b.n	80036ac <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003688:	f7fe febe 	bl	8002408 <HAL_GetTick>
 800368c:	4602      	mov	r2, r0
 800368e:	69bb      	ldr	r3, [r7, #24]
 8003690:	1ad3      	subs	r3, r2, r3
 8003692:	683a      	ldr	r2, [r7, #0]
 8003694:	429a      	cmp	r2, r3
 8003696:	d803      	bhi.n	80036a0 <HAL_SPI_Transmit+0x1f4>
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800369e:	d102      	bne.n	80036a6 <HAL_SPI_Transmit+0x1fa>
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d102      	bne.n	80036ac <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 80036a6:	2303      	movs	r3, #3
 80036a8:	77fb      	strb	r3, [r7, #31]
          goto error;
 80036aa:	e026      	b.n	80036fa <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036b0:	b29b      	uxth	r3, r3
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d1cd      	bne.n	8003652 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80036b6:	69ba      	ldr	r2, [r7, #24]
 80036b8:	6839      	ldr	r1, [r7, #0]
 80036ba:	68f8      	ldr	r0, [r7, #12]
 80036bc:	f000 fb54 	bl	8003d68 <SPI_EndRxTxTransaction>
 80036c0:	4603      	mov	r3, r0
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d002      	beq.n	80036cc <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	2220      	movs	r2, #32
 80036ca:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	689b      	ldr	r3, [r3, #8]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d10a      	bne.n	80036ea <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80036d4:	2300      	movs	r3, #0
 80036d6:	613b      	str	r3, [r7, #16]
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	68db      	ldr	r3, [r3, #12]
 80036de:	613b      	str	r3, [r7, #16]
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	689b      	ldr	r3, [r3, #8]
 80036e6:	613b      	str	r3, [r7, #16]
 80036e8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d002      	beq.n	80036f8 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 80036f2:	2301      	movs	r3, #1
 80036f4:	77fb      	strb	r3, [r7, #31]
 80036f6:	e000      	b.n	80036fa <HAL_SPI_Transmit+0x24e>
  }

error:
 80036f8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	2201      	movs	r2, #1
 80036fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	2200      	movs	r2, #0
 8003706:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800370a:	7ffb      	ldrb	r3, [r7, #31]
}
 800370c:	4618      	mov	r0, r3
 800370e:	3720      	adds	r7, #32
 8003710:	46bd      	mov	sp, r7
 8003712:	bd80      	pop	{r7, pc}

08003714 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b08c      	sub	sp, #48	; 0x30
 8003718:	af00      	add	r7, sp, #0
 800371a:	60f8      	str	r0, [r7, #12]
 800371c:	60b9      	str	r1, [r7, #8]
 800371e:	607a      	str	r2, [r7, #4]
 8003720:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003722:	2301      	movs	r3, #1
 8003724:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003726:	2300      	movs	r3, #0
 8003728:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003732:	2b01      	cmp	r3, #1
 8003734:	d101      	bne.n	800373a <HAL_SPI_TransmitReceive+0x26>
 8003736:	2302      	movs	r3, #2
 8003738:	e18a      	b.n	8003a50 <HAL_SPI_TransmitReceive+0x33c>
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	2201      	movs	r2, #1
 800373e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003742:	f7fe fe61 	bl	8002408 <HAL_GetTick>
 8003746:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800374e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003758:	887b      	ldrh	r3, [r7, #2]
 800375a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800375c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003760:	2b01      	cmp	r3, #1
 8003762:	d00f      	beq.n	8003784 <HAL_SPI_TransmitReceive+0x70>
 8003764:	69fb      	ldr	r3, [r7, #28]
 8003766:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800376a:	d107      	bne.n	800377c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d103      	bne.n	800377c <HAL_SPI_TransmitReceive+0x68>
 8003774:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003778:	2b04      	cmp	r3, #4
 800377a:	d003      	beq.n	8003784 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800377c:	2302      	movs	r3, #2
 800377e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003782:	e15b      	b.n	8003a3c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d005      	beq.n	8003796 <HAL_SPI_TransmitReceive+0x82>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d002      	beq.n	8003796 <HAL_SPI_TransmitReceive+0x82>
 8003790:	887b      	ldrh	r3, [r7, #2]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d103      	bne.n	800379e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003796:	2301      	movs	r3, #1
 8003798:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800379c:	e14e      	b.n	8003a3c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80037a4:	b2db      	uxtb	r3, r3
 80037a6:	2b04      	cmp	r3, #4
 80037a8:	d003      	beq.n	80037b2 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	2205      	movs	r2, #5
 80037ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	2200      	movs	r2, #0
 80037b6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	687a      	ldr	r2, [r7, #4]
 80037bc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	887a      	ldrh	r2, [r7, #2]
 80037c2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	887a      	ldrh	r2, [r7, #2]
 80037c8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	68ba      	ldr	r2, [r7, #8]
 80037ce:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	887a      	ldrh	r2, [r7, #2]
 80037d4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	887a      	ldrh	r2, [r7, #2]
 80037da:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	2200      	movs	r2, #0
 80037e0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	2200      	movs	r2, #0
 80037e6:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037f2:	2b40      	cmp	r3, #64	; 0x40
 80037f4:	d007      	beq.n	8003806 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	681a      	ldr	r2, [r3, #0]
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003804:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	68db      	ldr	r3, [r3, #12]
 800380a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800380e:	d178      	bne.n	8003902 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d002      	beq.n	800381e <HAL_SPI_TransmitReceive+0x10a>
 8003818:	8b7b      	ldrh	r3, [r7, #26]
 800381a:	2b01      	cmp	r3, #1
 800381c:	d166      	bne.n	80038ec <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003822:	881a      	ldrh	r2, [r3, #0]
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800382e:	1c9a      	adds	r2, r3, #2
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003838:	b29b      	uxth	r3, r3
 800383a:	3b01      	subs	r3, #1
 800383c:	b29a      	uxth	r2, r3
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003842:	e053      	b.n	80038ec <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	689b      	ldr	r3, [r3, #8]
 800384a:	f003 0302 	and.w	r3, r3, #2
 800384e:	2b02      	cmp	r3, #2
 8003850:	d11b      	bne.n	800388a <HAL_SPI_TransmitReceive+0x176>
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003856:	b29b      	uxth	r3, r3
 8003858:	2b00      	cmp	r3, #0
 800385a:	d016      	beq.n	800388a <HAL_SPI_TransmitReceive+0x176>
 800385c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800385e:	2b01      	cmp	r3, #1
 8003860:	d113      	bne.n	800388a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003866:	881a      	ldrh	r2, [r3, #0]
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003872:	1c9a      	adds	r2, r3, #2
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800387c:	b29b      	uxth	r3, r3
 800387e:	3b01      	subs	r3, #1
 8003880:	b29a      	uxth	r2, r3
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003886:	2300      	movs	r3, #0
 8003888:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	689b      	ldr	r3, [r3, #8]
 8003890:	f003 0301 	and.w	r3, r3, #1
 8003894:	2b01      	cmp	r3, #1
 8003896:	d119      	bne.n	80038cc <HAL_SPI_TransmitReceive+0x1b8>
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800389c:	b29b      	uxth	r3, r3
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d014      	beq.n	80038cc <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	68da      	ldr	r2, [r3, #12]
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038ac:	b292      	uxth	r2, r2
 80038ae:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038b4:	1c9a      	adds	r2, r3, #2
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038be:	b29b      	uxth	r3, r3
 80038c0:	3b01      	subs	r3, #1
 80038c2:	b29a      	uxth	r2, r3
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80038c8:	2301      	movs	r3, #1
 80038ca:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80038cc:	f7fe fd9c 	bl	8002408 <HAL_GetTick>
 80038d0:	4602      	mov	r2, r0
 80038d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d4:	1ad3      	subs	r3, r2, r3
 80038d6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80038d8:	429a      	cmp	r2, r3
 80038da:	d807      	bhi.n	80038ec <HAL_SPI_TransmitReceive+0x1d8>
 80038dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80038e2:	d003      	beq.n	80038ec <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80038e4:	2303      	movs	r3, #3
 80038e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80038ea:	e0a7      	b.n	8003a3c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80038f0:	b29b      	uxth	r3, r3
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d1a6      	bne.n	8003844 <HAL_SPI_TransmitReceive+0x130>
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038fa:	b29b      	uxth	r3, r3
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d1a1      	bne.n	8003844 <HAL_SPI_TransmitReceive+0x130>
 8003900:	e07c      	b.n	80039fc <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d002      	beq.n	8003910 <HAL_SPI_TransmitReceive+0x1fc>
 800390a:	8b7b      	ldrh	r3, [r7, #26]
 800390c:	2b01      	cmp	r3, #1
 800390e:	d16b      	bne.n	80039e8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	330c      	adds	r3, #12
 800391a:	7812      	ldrb	r2, [r2, #0]
 800391c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003922:	1c5a      	adds	r2, r3, #1
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800392c:	b29b      	uxth	r3, r3
 800392e:	3b01      	subs	r3, #1
 8003930:	b29a      	uxth	r2, r3
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003936:	e057      	b.n	80039e8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	689b      	ldr	r3, [r3, #8]
 800393e:	f003 0302 	and.w	r3, r3, #2
 8003942:	2b02      	cmp	r3, #2
 8003944:	d11c      	bne.n	8003980 <HAL_SPI_TransmitReceive+0x26c>
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800394a:	b29b      	uxth	r3, r3
 800394c:	2b00      	cmp	r3, #0
 800394e:	d017      	beq.n	8003980 <HAL_SPI_TransmitReceive+0x26c>
 8003950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003952:	2b01      	cmp	r3, #1
 8003954:	d114      	bne.n	8003980 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	330c      	adds	r3, #12
 8003960:	7812      	ldrb	r2, [r2, #0]
 8003962:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003968:	1c5a      	adds	r2, r3, #1
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003972:	b29b      	uxth	r3, r3
 8003974:	3b01      	subs	r3, #1
 8003976:	b29a      	uxth	r2, r3
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800397c:	2300      	movs	r3, #0
 800397e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	689b      	ldr	r3, [r3, #8]
 8003986:	f003 0301 	and.w	r3, r3, #1
 800398a:	2b01      	cmp	r3, #1
 800398c:	d119      	bne.n	80039c2 <HAL_SPI_TransmitReceive+0x2ae>
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003992:	b29b      	uxth	r3, r3
 8003994:	2b00      	cmp	r3, #0
 8003996:	d014      	beq.n	80039c2 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	68da      	ldr	r2, [r3, #12]
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039a2:	b2d2      	uxtb	r2, r2
 80039a4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039aa:	1c5a      	adds	r2, r3, #1
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039b4:	b29b      	uxth	r3, r3
 80039b6:	3b01      	subs	r3, #1
 80039b8:	b29a      	uxth	r2, r3
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80039be:	2301      	movs	r3, #1
 80039c0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80039c2:	f7fe fd21 	bl	8002408 <HAL_GetTick>
 80039c6:	4602      	mov	r2, r0
 80039c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ca:	1ad3      	subs	r3, r2, r3
 80039cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80039ce:	429a      	cmp	r2, r3
 80039d0:	d803      	bhi.n	80039da <HAL_SPI_TransmitReceive+0x2c6>
 80039d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80039d8:	d102      	bne.n	80039e0 <HAL_SPI_TransmitReceive+0x2cc>
 80039da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d103      	bne.n	80039e8 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80039e0:	2303      	movs	r3, #3
 80039e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80039e6:	e029      	b.n	8003a3c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039ec:	b29b      	uxth	r3, r3
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d1a2      	bne.n	8003938 <HAL_SPI_TransmitReceive+0x224>
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039f6:	b29b      	uxth	r3, r3
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d19d      	bne.n	8003938 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80039fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039fe:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003a00:	68f8      	ldr	r0, [r7, #12]
 8003a02:	f000 f9b1 	bl	8003d68 <SPI_EndRxTxTransaction>
 8003a06:	4603      	mov	r3, r0
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d006      	beq.n	8003a1a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	2220      	movs	r2, #32
 8003a16:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003a18:	e010      	b.n	8003a3c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	689b      	ldr	r3, [r3, #8]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d10b      	bne.n	8003a3a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003a22:	2300      	movs	r3, #0
 8003a24:	617b      	str	r3, [r7, #20]
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	68db      	ldr	r3, [r3, #12]
 8003a2c:	617b      	str	r3, [r7, #20]
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	689b      	ldr	r3, [r3, #8]
 8003a34:	617b      	str	r3, [r7, #20]
 8003a36:	697b      	ldr	r3, [r7, #20]
 8003a38:	e000      	b.n	8003a3c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003a3a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	2201      	movs	r2, #1
 8003a40:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	2200      	movs	r2, #0
 8003a48:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003a4c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003a50:	4618      	mov	r0, r3
 8003a52:	3730      	adds	r7, #48	; 0x30
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bd80      	pop	{r7, pc}

08003a58 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b088      	sub	sp, #32
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	689b      	ldr	r3, [r3, #8]
 8003a6e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003a70:	69bb      	ldr	r3, [r7, #24]
 8003a72:	099b      	lsrs	r3, r3, #6
 8003a74:	f003 0301 	and.w	r3, r3, #1
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d10f      	bne.n	8003a9c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003a7c:	69bb      	ldr	r3, [r7, #24]
 8003a7e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d00a      	beq.n	8003a9c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003a86:	69fb      	ldr	r3, [r7, #28]
 8003a88:	099b      	lsrs	r3, r3, #6
 8003a8a:	f003 0301 	and.w	r3, r3, #1
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d004      	beq.n	8003a9c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a96:	6878      	ldr	r0, [r7, #4]
 8003a98:	4798      	blx	r3
    return;
 8003a9a:	e0d8      	b.n	8003c4e <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003a9c:	69bb      	ldr	r3, [r7, #24]
 8003a9e:	085b      	lsrs	r3, r3, #1
 8003aa0:	f003 0301 	and.w	r3, r3, #1
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d00a      	beq.n	8003abe <HAL_SPI_IRQHandler+0x66>
 8003aa8:	69fb      	ldr	r3, [r7, #28]
 8003aaa:	09db      	lsrs	r3, r3, #7
 8003aac:	f003 0301 	and.w	r3, r3, #1
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d004      	beq.n	8003abe <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ab8:	6878      	ldr	r0, [r7, #4]
 8003aba:	4798      	blx	r3
    return;
 8003abc:	e0c7      	b.n	8003c4e <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003abe:	69bb      	ldr	r3, [r7, #24]
 8003ac0:	095b      	lsrs	r3, r3, #5
 8003ac2:	f003 0301 	and.w	r3, r3, #1
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d10c      	bne.n	8003ae4 <HAL_SPI_IRQHandler+0x8c>
 8003aca:	69bb      	ldr	r3, [r7, #24]
 8003acc:	099b      	lsrs	r3, r3, #6
 8003ace:	f003 0301 	and.w	r3, r3, #1
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d106      	bne.n	8003ae4 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8003ad6:	69bb      	ldr	r3, [r7, #24]
 8003ad8:	0a1b      	lsrs	r3, r3, #8
 8003ada:	f003 0301 	and.w	r3, r3, #1
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	f000 80b5 	beq.w	8003c4e <HAL_SPI_IRQHandler+0x1f6>
 8003ae4:	69fb      	ldr	r3, [r7, #28]
 8003ae6:	095b      	lsrs	r3, r3, #5
 8003ae8:	f003 0301 	and.w	r3, r3, #1
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	f000 80ae 	beq.w	8003c4e <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003af2:	69bb      	ldr	r3, [r7, #24]
 8003af4:	099b      	lsrs	r3, r3, #6
 8003af6:	f003 0301 	and.w	r3, r3, #1
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d023      	beq.n	8003b46 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003b04:	b2db      	uxtb	r3, r3
 8003b06:	2b03      	cmp	r3, #3
 8003b08:	d011      	beq.n	8003b2e <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b0e:	f043 0204 	orr.w	r2, r3, #4
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003b16:	2300      	movs	r3, #0
 8003b18:	617b      	str	r3, [r7, #20]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	68db      	ldr	r3, [r3, #12]
 8003b20:	617b      	str	r3, [r7, #20]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	689b      	ldr	r3, [r3, #8]
 8003b28:	617b      	str	r3, [r7, #20]
 8003b2a:	697b      	ldr	r3, [r7, #20]
 8003b2c:	e00b      	b.n	8003b46 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003b2e:	2300      	movs	r3, #0
 8003b30:	613b      	str	r3, [r7, #16]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	68db      	ldr	r3, [r3, #12]
 8003b38:	613b      	str	r3, [r7, #16]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	689b      	ldr	r3, [r3, #8]
 8003b40:	613b      	str	r3, [r7, #16]
 8003b42:	693b      	ldr	r3, [r7, #16]
        return;
 8003b44:	e083      	b.n	8003c4e <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8003b46:	69bb      	ldr	r3, [r7, #24]
 8003b48:	095b      	lsrs	r3, r3, #5
 8003b4a:	f003 0301 	and.w	r3, r3, #1
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d014      	beq.n	8003b7c <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b56:	f043 0201 	orr.w	r2, r3, #1
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8003b5e:	2300      	movs	r3, #0
 8003b60:	60fb      	str	r3, [r7, #12]
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	689b      	ldr	r3, [r3, #8]
 8003b68:	60fb      	str	r3, [r7, #12]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	681a      	ldr	r2, [r3, #0]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b78:	601a      	str	r2, [r3, #0]
 8003b7a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8003b7c:	69bb      	ldr	r3, [r7, #24]
 8003b7e:	0a1b      	lsrs	r3, r3, #8
 8003b80:	f003 0301 	and.w	r3, r3, #1
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d00c      	beq.n	8003ba2 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b8c:	f043 0208 	orr.w	r2, r3, #8
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8003b94:	2300      	movs	r3, #0
 8003b96:	60bb      	str	r3, [r7, #8]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	689b      	ldr	r3, [r3, #8]
 8003b9e:	60bb      	str	r3, [r7, #8]
 8003ba0:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d050      	beq.n	8003c4c <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	685a      	ldr	r2, [r3, #4]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003bb8:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2201      	movs	r2, #1
 8003bbe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8003bc2:	69fb      	ldr	r3, [r7, #28]
 8003bc4:	f003 0302 	and.w	r3, r3, #2
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d104      	bne.n	8003bd6 <HAL_SPI_IRQHandler+0x17e>
 8003bcc:	69fb      	ldr	r3, [r7, #28]
 8003bce:	f003 0301 	and.w	r3, r3, #1
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d034      	beq.n	8003c40 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	685a      	ldr	r2, [r3, #4]
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f022 0203 	bic.w	r2, r2, #3
 8003be4:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d011      	beq.n	8003c12 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bf2:	4a18      	ldr	r2, [pc, #96]	; (8003c54 <HAL_SPI_IRQHandler+0x1fc>)
 8003bf4:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	f7fe fd43 	bl	8002686 <HAL_DMA_Abort_IT>
 8003c00:	4603      	mov	r3, r0
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d005      	beq.n	8003c12 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c0a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d016      	beq.n	8003c48 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c1e:	4a0d      	ldr	r2, [pc, #52]	; (8003c54 <HAL_SPI_IRQHandler+0x1fc>)
 8003c20:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c26:	4618      	mov	r0, r3
 8003c28:	f7fe fd2d 	bl	8002686 <HAL_DMA_Abort_IT>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d00a      	beq.n	8003c48 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c36:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8003c3e:	e003      	b.n	8003c48 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8003c40:	6878      	ldr	r0, [r7, #4]
 8003c42:	f000 f809 	bl	8003c58 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8003c46:	e000      	b.n	8003c4a <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8003c48:	bf00      	nop
    return;
 8003c4a:	bf00      	nop
 8003c4c:	bf00      	nop
  }
}
 8003c4e:	3720      	adds	r7, #32
 8003c50:	46bd      	mov	sp, r7
 8003c52:	bd80      	pop	{r7, pc}
 8003c54:	08003c6d 	.word	0x08003c6d

08003c58 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b083      	sub	sp, #12
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003c60:	bf00      	nop
 8003c62:	370c      	adds	r7, #12
 8003c64:	46bd      	mov	sp, r7
 8003c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6a:	4770      	bx	lr

08003c6c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b084      	sub	sp, #16
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c78:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	2200      	movs	r2, #0
 8003c84:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003c86:	68f8      	ldr	r0, [r7, #12]
 8003c88:	f7ff ffe6 	bl	8003c58 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003c8c:	bf00      	nop
 8003c8e:	3710      	adds	r7, #16
 8003c90:	46bd      	mov	sp, r7
 8003c92:	bd80      	pop	{r7, pc}

08003c94 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b084      	sub	sp, #16
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	60f8      	str	r0, [r7, #12]
 8003c9c:	60b9      	str	r1, [r7, #8]
 8003c9e:	603b      	str	r3, [r7, #0]
 8003ca0:	4613      	mov	r3, r2
 8003ca2:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003ca4:	e04c      	b.n	8003d40 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003cac:	d048      	beq.n	8003d40 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8003cae:	f7fe fbab 	bl	8002408 <HAL_GetTick>
 8003cb2:	4602      	mov	r2, r0
 8003cb4:	69bb      	ldr	r3, [r7, #24]
 8003cb6:	1ad3      	subs	r3, r2, r3
 8003cb8:	683a      	ldr	r2, [r7, #0]
 8003cba:	429a      	cmp	r2, r3
 8003cbc:	d902      	bls.n	8003cc4 <SPI_WaitFlagStateUntilTimeout+0x30>
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d13d      	bne.n	8003d40 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	685a      	ldr	r2, [r3, #4]
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003cd2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003cdc:	d111      	bne.n	8003d02 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	689b      	ldr	r3, [r3, #8]
 8003ce2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ce6:	d004      	beq.n	8003cf2 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	689b      	ldr	r3, [r3, #8]
 8003cec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cf0:	d107      	bne.n	8003d02 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	681a      	ldr	r2, [r3, #0]
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d00:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d0a:	d10f      	bne.n	8003d2c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	681a      	ldr	r2, [r3, #0]
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003d1a:	601a      	str	r2, [r3, #0]
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	681a      	ldr	r2, [r3, #0]
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003d2a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	2201      	movs	r2, #1
 8003d30:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	2200      	movs	r2, #0
 8003d38:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003d3c:	2303      	movs	r3, #3
 8003d3e:	e00f      	b.n	8003d60 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	689a      	ldr	r2, [r3, #8]
 8003d46:	68bb      	ldr	r3, [r7, #8]
 8003d48:	4013      	ands	r3, r2
 8003d4a:	68ba      	ldr	r2, [r7, #8]
 8003d4c:	429a      	cmp	r2, r3
 8003d4e:	bf0c      	ite	eq
 8003d50:	2301      	moveq	r3, #1
 8003d52:	2300      	movne	r3, #0
 8003d54:	b2db      	uxtb	r3, r3
 8003d56:	461a      	mov	r2, r3
 8003d58:	79fb      	ldrb	r3, [r7, #7]
 8003d5a:	429a      	cmp	r2, r3
 8003d5c:	d1a3      	bne.n	8003ca6 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8003d5e:	2300      	movs	r3, #0
}
 8003d60:	4618      	mov	r0, r3
 8003d62:	3710      	adds	r7, #16
 8003d64:	46bd      	mov	sp, r7
 8003d66:	bd80      	pop	{r7, pc}

08003d68 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b088      	sub	sp, #32
 8003d6c:	af02      	add	r7, sp, #8
 8003d6e:	60f8      	str	r0, [r7, #12]
 8003d70:	60b9      	str	r1, [r7, #8]
 8003d72:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003d74:	4b1b      	ldr	r3, [pc, #108]	; (8003de4 <SPI_EndRxTxTransaction+0x7c>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a1b      	ldr	r2, [pc, #108]	; (8003de8 <SPI_EndRxTxTransaction+0x80>)
 8003d7a:	fba2 2303 	umull	r2, r3, r2, r3
 8003d7e:	0d5b      	lsrs	r3, r3, #21
 8003d80:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003d84:	fb02 f303 	mul.w	r3, r2, r3
 8003d88:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d92:	d112      	bne.n	8003dba <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	9300      	str	r3, [sp, #0]
 8003d98:	68bb      	ldr	r3, [r7, #8]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	2180      	movs	r1, #128	; 0x80
 8003d9e:	68f8      	ldr	r0, [r7, #12]
 8003da0:	f7ff ff78 	bl	8003c94 <SPI_WaitFlagStateUntilTimeout>
 8003da4:	4603      	mov	r3, r0
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d016      	beq.n	8003dd8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dae:	f043 0220 	orr.w	r2, r3, #32
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003db6:	2303      	movs	r3, #3
 8003db8:	e00f      	b.n	8003dda <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003dba:	697b      	ldr	r3, [r7, #20]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d00a      	beq.n	8003dd6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003dc0:	697b      	ldr	r3, [r7, #20]
 8003dc2:	3b01      	subs	r3, #1
 8003dc4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	689b      	ldr	r3, [r3, #8]
 8003dcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dd0:	2b80      	cmp	r3, #128	; 0x80
 8003dd2:	d0f2      	beq.n	8003dba <SPI_EndRxTxTransaction+0x52>
 8003dd4:	e000      	b.n	8003dd8 <SPI_EndRxTxTransaction+0x70>
        break;
 8003dd6:	bf00      	nop
  }

  return HAL_OK;
 8003dd8:	2300      	movs	r3, #0
}
 8003dda:	4618      	mov	r0, r3
 8003ddc:	3718      	adds	r7, #24
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}
 8003de2:	bf00      	nop
 8003de4:	20000000 	.word	0x20000000
 8003de8:	165e9f81 	.word	0x165e9f81

08003dec <__libc_init_array>:
 8003dec:	b570      	push	{r4, r5, r6, lr}
 8003dee:	4e0d      	ldr	r6, [pc, #52]	; (8003e24 <__libc_init_array+0x38>)
 8003df0:	4c0d      	ldr	r4, [pc, #52]	; (8003e28 <__libc_init_array+0x3c>)
 8003df2:	1ba4      	subs	r4, r4, r6
 8003df4:	10a4      	asrs	r4, r4, #2
 8003df6:	2500      	movs	r5, #0
 8003df8:	42a5      	cmp	r5, r4
 8003dfa:	d109      	bne.n	8003e10 <__libc_init_array+0x24>
 8003dfc:	4e0b      	ldr	r6, [pc, #44]	; (8003e2c <__libc_init_array+0x40>)
 8003dfe:	4c0c      	ldr	r4, [pc, #48]	; (8003e30 <__libc_init_array+0x44>)
 8003e00:	f000 f820 	bl	8003e44 <_init>
 8003e04:	1ba4      	subs	r4, r4, r6
 8003e06:	10a4      	asrs	r4, r4, #2
 8003e08:	2500      	movs	r5, #0
 8003e0a:	42a5      	cmp	r5, r4
 8003e0c:	d105      	bne.n	8003e1a <__libc_init_array+0x2e>
 8003e0e:	bd70      	pop	{r4, r5, r6, pc}
 8003e10:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003e14:	4798      	blx	r3
 8003e16:	3501      	adds	r5, #1
 8003e18:	e7ee      	b.n	8003df8 <__libc_init_array+0xc>
 8003e1a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003e1e:	4798      	blx	r3
 8003e20:	3501      	adds	r5, #1
 8003e22:	e7f2      	b.n	8003e0a <__libc_init_array+0x1e>
 8003e24:	08003e74 	.word	0x08003e74
 8003e28:	08003e74 	.word	0x08003e74
 8003e2c:	08003e74 	.word	0x08003e74
 8003e30:	08003e78 	.word	0x08003e78

08003e34 <memset>:
 8003e34:	4402      	add	r2, r0
 8003e36:	4603      	mov	r3, r0
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d100      	bne.n	8003e3e <memset+0xa>
 8003e3c:	4770      	bx	lr
 8003e3e:	f803 1b01 	strb.w	r1, [r3], #1
 8003e42:	e7f9      	b.n	8003e38 <memset+0x4>

08003e44 <_init>:
 8003e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e46:	bf00      	nop
 8003e48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e4a:	bc08      	pop	{r3}
 8003e4c:	469e      	mov	lr, r3
 8003e4e:	4770      	bx	lr

08003e50 <_fini>:
 8003e50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e52:	bf00      	nop
 8003e54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e56:	bc08      	pop	{r3}
 8003e58:	469e      	mov	lr, r3
 8003e5a:	4770      	bx	lr
