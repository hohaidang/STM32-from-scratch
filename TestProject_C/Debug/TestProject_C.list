
TestProject_C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000097c  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000b40  08000b48  00010b48  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000b40  08000b40  00010b48  2**0
                  CONTENTS
  4 .ARM          00000000  08000b40  08000b40  00010b48  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000b40  08000b48  00010b48  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000b40  08000b40  00010b40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000b44  08000b44  00010b44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010b48  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000b48  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000b48  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00010b48  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001c34  00000000  00000000  00010b72  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000004e3  00000000  00000000  000127a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000198  00000000  00000000  00012c90  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000160  00000000  00000000  00012e28  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00002326  00000000  00000000  00012f88  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00001322  00000000  00000000  000152ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000093ce  00000000  00000000  000165d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0001f99e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000005f8  00000000  00000000  0001fa1c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000000 	.word	0x20000000
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000b28 	.word	0x08000b28

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000004 	.word	0x20000004
 8000200:	08000b28 	.word	0x08000b28

08000204 <SPI1_GPIOInits>:
//PA7 - SPI1_MOSI
//PA4 - slave select
// Alternate function 5

void SPI1_GPIOInits(void)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	b084      	sub	sp, #16
 8000208:	af00      	add	r7, sp, #0
	GPIO_Handle_t SPIPins;

	SPIPins.pGPIOx = GPIOA;
 800020a:	4b11      	ldr	r3, [pc, #68]	; (8000250 <SPI1_GPIOInits+0x4c>)
 800020c:	607b      	str	r3, [r7, #4]
	SPIPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 800020e:	2302      	movs	r3, #2
 8000210:	727b      	strb	r3, [r7, #9]
	SPIPins.GPIO_PinConfig.GPIO_PinAltFunMode = 5;
 8000212:	2305      	movs	r3, #5
 8000214:	737b      	strb	r3, [r7, #13]
	SPIPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8000216:	2300      	movs	r3, #0
 8000218:	733b      	strb	r3, [r7, #12]
	SPIPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 800021a:	2301      	movs	r3, #1
 800021c:	72fb      	strb	r3, [r7, #11]
	SPIPins.GPIO_PinConfig.GPIO_PinSpeed = GPOI_SPEED_HIGH;
 800021e:	2303      	movs	r3, #3
 8000220:	72bb      	strb	r3, [r7, #10]

	//SCLK
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_5;
 8000222:	2305      	movs	r3, #5
 8000224:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 8000226:	1d3b      	adds	r3, r7, #4
 8000228:	4618      	mov	r0, r3
 800022a:	f000 f94d 	bl	80004c8 <GPIO_Init>

	//MOSI
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_7;
 800022e:	2307      	movs	r3, #7
 8000230:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 8000232:	1d3b      	adds	r3, r7, #4
 8000234:	4618      	mov	r0, r3
 8000236:	f000 f947 	bl	80004c8 <GPIO_Init>

	//MISO
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_6;
 800023a:	2306      	movs	r3, #6
 800023c:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 800023e:	1d3b      	adds	r3, r7, #4
 8000240:	4618      	mov	r0, r3
 8000242:	f000 f941 	bl	80004c8 <GPIO_Init>
//	//NSS
//	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_4;
//	GPIO_Init(&SPIPins);


}
 8000246:	bf00      	nop
 8000248:	3710      	adds	r7, #16
 800024a:	46bd      	mov	sp, r7
 800024c:	bd80      	pop	{r7, pc}
 800024e:	bf00      	nop
 8000250:	40020000 	.word	0x40020000

08000254 <SPI1_Inits>:

void SPI1_Inits(void)
{
 8000254:	b580      	push	{r7, lr}
 8000256:	b088      	sub	sp, #32
 8000258:	af00      	add	r7, sp, #0

	SPI_Handle_t SPI1handle;

	SPI1handle.pSPIx = SPI1;
 800025a:	4b0c      	ldr	r3, [pc, #48]	; (800028c <SPI1_Inits+0x38>)
 800025c:	603b      	str	r3, [r7, #0]
	SPI1handle.SPIConfig.SPI_BusConfig = SPI_BUS_CONFIG_FD;
 800025e:	2301      	movs	r3, #1
 8000260:	717b      	strb	r3, [r7, #5]
	SPI1handle.SPIConfig.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER;
 8000262:	2301      	movs	r3, #1
 8000264:	713b      	strb	r3, [r7, #4]
	SPI1handle.SPIConfig.SPI_SclkSpeed = SPI_SCLK_SPEED_DIV8;//generates sclk of 2MHz
 8000266:	2302      	movs	r3, #2
 8000268:	71bb      	strb	r3, [r7, #6]
	SPI1handle.SPIConfig.SPI_DFF = SPI_DFF_8BITS;
 800026a:	2300      	movs	r3, #0
 800026c:	71fb      	strb	r3, [r7, #7]
	SPI1handle.SPIConfig.SPI_CPOL = SPI_CPOL_LOW;
 800026e:	2300      	movs	r3, #0
 8000270:	723b      	strb	r3, [r7, #8]
	SPI1handle.SPIConfig.SPI_CPHA = SPI_CPOL_LOW;
 8000272:	2300      	movs	r3, #0
 8000274:	727b      	strb	r3, [r7, #9]
	SPI1handle.SPIConfig.SPI_SSM = SPI_SSM_EN; //Hardware slave management enabled for NSS pin
 8000276:	2301      	movs	r3, #1
 8000278:	72bb      	strb	r3, [r7, #10]

	SPI_Init(&SPI1handle);
 800027a:	463b      	mov	r3, r7
 800027c:	4618      	mov	r0, r3
 800027e:	f000 fb19 	bl	80008b4 <SPI_Init>
}
 8000282:	bf00      	nop
 8000284:	3720      	adds	r7, #32
 8000286:	46bd      	mov	sp, r7
 8000288:	bd80      	pop	{r7, pc}
 800028a:	bf00      	nop
 800028c:	40013000 	.word	0x40013000

08000290 <GPIO_ButtonInit>:

void GPIO_ButtonInit(void)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	b086      	sub	sp, #24
 8000294:	af00      	add	r7, sp, #0
	GPIO_Handle_t GPIOBtn;

	//this is btn gpio configuration
	GPIOBtn.pGPIOx = GPIOC;
 8000296:	4b14      	ldr	r3, [pc, #80]	; (80002e8 <GPIO_ButtonInit+0x58>)
 8000298:	60fb      	str	r3, [r7, #12]
	GPIOBtn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13;
 800029a:	230d      	movs	r3, #13
 800029c:	743b      	strb	r3, [r7, #16]
	GPIOBtn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 800029e:	2300      	movs	r3, #0
 80002a0:	747b      	strb	r3, [r7, #17]
	GPIOBtn.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 80002a2:	2302      	movs	r3, #2
 80002a4:	74bb      	strb	r3, [r7, #18]
	GPIOBtn.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 80002a6:	2300      	movs	r3, #0
 80002a8:	74fb      	strb	r3, [r7, #19]

	GPIO_Init(&GPIOBtn);
 80002aa:	f107 030c 	add.w	r3, r7, #12
 80002ae:	4618      	mov	r0, r3
 80002b0:	f000 f90a 	bl	80004c8 <GPIO_Init>

	GPIO_Handle_t SPI_NSS;
	SPI_NSS.pGPIOx = GPIOB;
 80002b4:	4b0d      	ldr	r3, [pc, #52]	; (80002ec <GPIO_ButtonInit+0x5c>)
 80002b6:	603b      	str	r3, [r7, #0]
	SPI_NSS.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_6;
 80002b8:	2306      	movs	r3, #6
 80002ba:	713b      	strb	r3, [r7, #4]
	SPI_NSS.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 80002bc:	2301      	movs	r3, #1
 80002be:	717b      	strb	r3, [r7, #5]
	SPI_NSS.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 80002c0:	2300      	movs	r3, #0
 80002c2:	723b      	strb	r3, [r7, #8]
	SPI_NSS.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 80002c4:	2302      	movs	r3, #2
 80002c6:	71bb      	strb	r3, [r7, #6]
	SPI_NSS.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 80002c8:	2300      	movs	r3, #0
 80002ca:	71fb      	strb	r3, [r7, #7]
	GPIO_Init(&SPI_NSS);
 80002cc:	463b      	mov	r3, r7
 80002ce:	4618      	mov	r0, r3
 80002d0:	f000 f8fa 	bl	80004c8 <GPIO_Init>
	GPIO_WriteToOutputPin(SPI_NSS.pGPIOx, GPIO_PIN_NO_6, 0);
 80002d4:	683b      	ldr	r3, [r7, #0]
 80002d6:	2200      	movs	r2, #0
 80002d8:	2106      	movs	r1, #6
 80002da:	4618      	mov	r0, r3
 80002dc:	f000 fa90 	bl	8000800 <GPIO_WriteToOutputPin>
}
 80002e0:	bf00      	nop
 80002e2:	3718      	adds	r7, #24
 80002e4:	46bd      	mov	sp, r7
 80002e6:	bd80      	pop	{r7, pc}
 80002e8:	40020800 	.word	0x40020800
 80002ec:	40020400 	.word	0x40020400

080002f0 <main>:


int main(void)
{
 80002f0:	b580      	push	{r7, lr}
 80002f2:	b082      	sub	sp, #8
 80002f4:	af00      	add	r7, sp, #0
	uint8_t dummyByte = 0x00;
 80002f6:	2300      	movs	r3, #0
 80002f8:	717b      	strb	r3, [r7, #5]
	uint8_t dummyRead = 0x00;
 80002fa:	2300      	movs	r3, #0
 80002fc:	71fb      	strb	r3, [r7, #7]
//	uint8_t temp_data[3];
	uint8_t chipID = 0;
 80002fe:	2300      	movs	r3, #0
 8000300:	71bb      	strb	r3, [r7, #6]

	GPIO_ButtonInit();
 8000302:	f7ff ffc5 	bl	8000290 <GPIO_ButtonInit>

	//this function is used to initialize the GPIO pins to behave as SPI2 pins
	SPI1_GPIOInits();
 8000306:	f7ff ff7d 	bl	8000204 <SPI1_GPIOInits>

	//This function is used to initialize the SPI2 peripheral parameters
	SPI1_Inits();
 800030a:	f7ff ffa3 	bl	8000254 <SPI1_Inits>
//
//		//to avoid button de-bouncing related issues 200ms of delay
//		delay();

		//enable the SPI2 peripheral
		SPI_PeripheralControl(SPI1, ENABLE);
 800030e:	2101      	movs	r1, #1
 8000310:	4815      	ldr	r0, [pc, #84]	; (8000368 <main+0x78>)
 8000312:	f000 fbaf 	bl	8000a74 <SPI_PeripheralControl>


		//to send data
		uint8_t tx_buffer[1] = {0xD0};
 8000316:	23d0      	movs	r3, #208	; 0xd0
 8000318:	713b      	strb	r3, [r7, #4]
		uint8_t rx_buffer[1] = {0};
 800031a:	2300      	movs	r3, #0
 800031c:	703b      	strb	r3, [r7, #0]
		SPI_SendData(SPI1, tx_buffer, 1);
 800031e:	1d3b      	adds	r3, r7, #4
 8000320:	2201      	movs	r2, #1
 8000322:	4619      	mov	r1, r3
 8000324:	4810      	ldr	r0, [pc, #64]	; (8000368 <main+0x78>)
 8000326:	f000 fb39 	bl	800099c <SPI_SendData>
//		delay();
//		SPI_ReceiveData(SPI1, &dummyRead, 1);

		SPI_SendData(SPI1, &dummyByte, 1);
 800032a:	1d7b      	adds	r3, r7, #5
 800032c:	2201      	movs	r2, #1
 800032e:	4619      	mov	r1, r3
 8000330:	480d      	ldr	r0, [pc, #52]	; (8000368 <main+0x78>)
 8000332:	f000 fb33 	bl	800099c <SPI_SendData>
		SPI_ReceiveData(SPI1, rx_buffer, 1);
 8000336:	463b      	mov	r3, r7
 8000338:	2201      	movs	r2, #1
 800033a:	4619      	mov	r1, r3
 800033c:	480a      	ldr	r0, [pc, #40]	; (8000368 <main+0x78>)
 800033e:	f000 fb63 	bl	8000a08 <SPI_ReceiveData>


		//lets confirm SPI is not busy
		while( SPI_GetFlagStatus(SPI1, SPI_BUSY_FLAG) );
 8000342:	bf00      	nop
 8000344:	2180      	movs	r1, #128	; 0x80
 8000346:	4808      	ldr	r0, [pc, #32]	; (8000368 <main+0x78>)
 8000348:	f000 fb15 	bl	8000976 <SPI_GetFlagStatus>
 800034c:	4603      	mov	r3, r0
 800034e:	2b00      	cmp	r3, #0
 8000350:	d1f8      	bne.n	8000344 <main+0x54>

		//Disable the SPI2 peripheral
		SPI_PeripheralControl(SPI1,DISABLE);
 8000352:	2100      	movs	r1, #0
 8000354:	4804      	ldr	r0, [pc, #16]	; (8000368 <main+0x78>)
 8000356:	f000 fb8d 	bl	8000a74 <SPI_PeripheralControl>
//	}

	while(0);
 800035a:	bf00      	nop
	return 0;
 800035c:	2300      	movs	r3, #0

}
 800035e:	4618      	mov	r0, r3
 8000360:	3708      	adds	r7, #8
 8000362:	46bd      	mov	sp, r7
 8000364:	bd80      	pop	{r7, pc}
 8000366:	bf00      	nop
 8000368:	40013000 	.word	0x40013000

0800036c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800036c:	480d      	ldr	r0, [pc, #52]	; (80003a4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800036e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000370:	480d      	ldr	r0, [pc, #52]	; (80003a8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000372:	490e      	ldr	r1, [pc, #56]	; (80003ac <LoopForever+0xa>)
  ldr r2, =_sidata
 8000374:	4a0e      	ldr	r2, [pc, #56]	; (80003b0 <LoopForever+0xe>)
  movs r3, #0
 8000376:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000378:	e002      	b.n	8000380 <LoopCopyDataInit>

0800037a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800037a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800037c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800037e:	3304      	adds	r3, #4

08000380 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000380:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000382:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000384:	d3f9      	bcc.n	800037a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000386:	4a0b      	ldr	r2, [pc, #44]	; (80003b4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000388:	4c0b      	ldr	r4, [pc, #44]	; (80003b8 <LoopForever+0x16>)
  movs r3, #0
 800038a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800038c:	e001      	b.n	8000392 <LoopFillZerobss>

0800038e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800038e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000390:	3204      	adds	r2, #4

08000392 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000392:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000394:	d3fb      	bcc.n	800038e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000396:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 800039a:	f000 fba1 	bl	8000ae0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800039e:	f7ff ffa7 	bl	80002f0 <main>

080003a2 <LoopForever>:

LoopForever:
    b LoopForever
 80003a2:	e7fe      	b.n	80003a2 <LoopForever>
  ldr   r0, =_estack
 80003a4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80003a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003ac:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80003b0:	08000b48 	.word	0x08000b48
  ldr r2, =_sbss
 80003b4:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80003b8:	2000001c 	.word	0x2000001c

080003bc <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003bc:	e7fe      	b.n	80003bc <ADC_IRQHandler>
	...

080003c0 <GPIO_PeriClockControl>:
 *
 * @Note              -  none

 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 80003c0:	b480      	push	{r7}
 80003c2:	b083      	sub	sp, #12
 80003c4:	af00      	add	r7, sp, #0
 80003c6:	6078      	str	r0, [r7, #4]
 80003c8:	460b      	mov	r3, r1
 80003ca:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 80003cc:	78fb      	ldrb	r3, [r7, #3]
 80003ce:	2b01      	cmp	r3, #1
 80003d0:	d161      	bne.n	8000496 <GPIO_PeriClockControl+0xd6>
	{
		if(pGPIOx == GPIOA)
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	4a32      	ldr	r2, [pc, #200]	; (80004a0 <GPIO_PeriClockControl+0xe0>)
 80003d6:	4293      	cmp	r3, r2
 80003d8:	d106      	bne.n	80003e8 <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 80003da:	4b32      	ldr	r3, [pc, #200]	; (80004a4 <GPIO_PeriClockControl+0xe4>)
 80003dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003de:	4a31      	ldr	r2, [pc, #196]	; (80004a4 <GPIO_PeriClockControl+0xe4>)
 80003e0:	f043 0301 	orr.w	r3, r3, #1
 80003e4:	6313      	str	r3, [r2, #48]	; 0x30
	else
	{
		//TODO
	}

}
 80003e6:	e056      	b.n	8000496 <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOB)
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	4a2f      	ldr	r2, [pc, #188]	; (80004a8 <GPIO_PeriClockControl+0xe8>)
 80003ec:	4293      	cmp	r3, r2
 80003ee:	d106      	bne.n	80003fe <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 80003f0:	4b2c      	ldr	r3, [pc, #176]	; (80004a4 <GPIO_PeriClockControl+0xe4>)
 80003f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003f4:	4a2b      	ldr	r2, [pc, #172]	; (80004a4 <GPIO_PeriClockControl+0xe4>)
 80003f6:	f043 0302 	orr.w	r3, r3, #2
 80003fa:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003fc:	e04b      	b.n	8000496 <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOC)
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	4a2a      	ldr	r2, [pc, #168]	; (80004ac <GPIO_PeriClockControl+0xec>)
 8000402:	4293      	cmp	r3, r2
 8000404:	d106      	bne.n	8000414 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 8000406:	4b27      	ldr	r3, [pc, #156]	; (80004a4 <GPIO_PeriClockControl+0xe4>)
 8000408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800040a:	4a26      	ldr	r2, [pc, #152]	; (80004a4 <GPIO_PeriClockControl+0xe4>)
 800040c:	f043 0304 	orr.w	r3, r3, #4
 8000410:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000412:	e040      	b.n	8000496 <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOD)
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	4a26      	ldr	r2, [pc, #152]	; (80004b0 <GPIO_PeriClockControl+0xf0>)
 8000418:	4293      	cmp	r3, r2
 800041a:	d106      	bne.n	800042a <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 800041c:	4b21      	ldr	r3, [pc, #132]	; (80004a4 <GPIO_PeriClockControl+0xe4>)
 800041e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000420:	4a20      	ldr	r2, [pc, #128]	; (80004a4 <GPIO_PeriClockControl+0xe4>)
 8000422:	f043 0308 	orr.w	r3, r3, #8
 8000426:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000428:	e035      	b.n	8000496 <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOE)
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	4a21      	ldr	r2, [pc, #132]	; (80004b4 <GPIO_PeriClockControl+0xf4>)
 800042e:	4293      	cmp	r3, r2
 8000430:	d106      	bne.n	8000440 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 8000432:	4b1c      	ldr	r3, [pc, #112]	; (80004a4 <GPIO_PeriClockControl+0xe4>)
 8000434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000436:	4a1b      	ldr	r2, [pc, #108]	; (80004a4 <GPIO_PeriClockControl+0xe4>)
 8000438:	f043 0310 	orr.w	r3, r3, #16
 800043c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800043e:	e02a      	b.n	8000496 <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOF)
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	4a1d      	ldr	r2, [pc, #116]	; (80004b8 <GPIO_PeriClockControl+0xf8>)
 8000444:	4293      	cmp	r3, r2
 8000446:	d106      	bne.n	8000456 <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 8000448:	4b16      	ldr	r3, [pc, #88]	; (80004a4 <GPIO_PeriClockControl+0xe4>)
 800044a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800044c:	4a15      	ldr	r2, [pc, #84]	; (80004a4 <GPIO_PeriClockControl+0xe4>)
 800044e:	f043 0320 	orr.w	r3, r3, #32
 8000452:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000454:	e01f      	b.n	8000496 <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOG)
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	4a18      	ldr	r2, [pc, #96]	; (80004bc <GPIO_PeriClockControl+0xfc>)
 800045a:	4293      	cmp	r3, r2
 800045c:	d106      	bne.n	800046c <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 800045e:	4b11      	ldr	r3, [pc, #68]	; (80004a4 <GPIO_PeriClockControl+0xe4>)
 8000460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000462:	4a10      	ldr	r2, [pc, #64]	; (80004a4 <GPIO_PeriClockControl+0xe4>)
 8000464:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000468:	6313      	str	r3, [r2, #48]	; 0x30
}
 800046a:	e014      	b.n	8000496 <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOH)
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	4a14      	ldr	r2, [pc, #80]	; (80004c0 <GPIO_PeriClockControl+0x100>)
 8000470:	4293      	cmp	r3, r2
 8000472:	d106      	bne.n	8000482 <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 8000474:	4b0b      	ldr	r3, [pc, #44]	; (80004a4 <GPIO_PeriClockControl+0xe4>)
 8000476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000478:	4a0a      	ldr	r2, [pc, #40]	; (80004a4 <GPIO_PeriClockControl+0xe4>)
 800047a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800047e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000480:	e009      	b.n	8000496 <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOI)
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	4a0f      	ldr	r2, [pc, #60]	; (80004c4 <GPIO_PeriClockControl+0x104>)
 8000486:	4293      	cmp	r3, r2
 8000488:	d105      	bne.n	8000496 <GPIO_PeriClockControl+0xd6>
			GPIOI_PCLK_EN();
 800048a:	4b06      	ldr	r3, [pc, #24]	; (80004a4 <GPIO_PeriClockControl+0xe4>)
 800048c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800048e:	4a05      	ldr	r2, [pc, #20]	; (80004a4 <GPIO_PeriClockControl+0xe4>)
 8000490:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000494:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000496:	bf00      	nop
 8000498:	370c      	adds	r7, #12
 800049a:	46bd      	mov	sp, r7
 800049c:	bc80      	pop	{r7}
 800049e:	4770      	bx	lr
 80004a0:	40020000 	.word	0x40020000
 80004a4:	40023800 	.word	0x40023800
 80004a8:	40020400 	.word	0x40020400
 80004ac:	40020800 	.word	0x40020800
 80004b0:	40020c00 	.word	0x40020c00
 80004b4:	40021000 	.word	0x40021000
 80004b8:	40021400 	.word	0x40021400
 80004bc:	40021800 	.word	0x40021800
 80004c0:	40021c00 	.word	0x40021c00
 80004c4:	40022000 	.word	0x40022000

080004c8 <GPIO_Init>:
 *
 * @Note              -

 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b086      	sub	sp, #24
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
	 uint32_t temp=0; //temp. register
 80004d0:	2300      	movs	r3, #0
 80004d2:	617b      	str	r3, [r7, #20]

	 //enable the peripheral clock

	 GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	2101      	movs	r1, #1
 80004da:	4618      	mov	r0, r3
 80004dc:	f7ff ff70 	bl	80003c0 <GPIO_PeriClockControl>

	//1 . configure the mode of gpio pin

	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	795b      	ldrb	r3, [r3, #5]
 80004e4:	2b03      	cmp	r3, #3
 80004e6:	d820      	bhi.n	800052a <GPIO_Init+0x62>
	{
		//the non interrupt mode
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber ) );
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	795b      	ldrb	r3, [r3, #5]
 80004ec:	461a      	mov	r2, r3
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	791b      	ldrb	r3, [r3, #4]
 80004f2:	005b      	lsls	r3, r3, #1
 80004f4:	fa02 f303 	lsl.w	r3, r2, r3
 80004f8:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~( 0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	681a      	ldr	r2, [r3, #0]
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	791b      	ldrb	r3, [r3, #4]
 8000504:	005b      	lsls	r3, r3, #1
 8000506:	2103      	movs	r1, #3
 8000508:	fa01 f303 	lsl.w	r3, r1, r3
 800050c:	43db      	mvns	r3, r3
 800050e:	4619      	mov	r1, r3
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	400a      	ands	r2, r1
 8000516:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp; //setting
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	6819      	ldr	r1, [r3, #0]
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	697a      	ldr	r2, [r7, #20]
 8000524:	430a      	orrs	r2, r1
 8000526:	601a      	str	r2, [r3, #0]
 8000528:	e0cb      	b.n	80006c2 <GPIO_Init+0x1fa>

	}else
	{
		//this part will code later . ( interrupt mode)
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode ==GPIO_MODE_IT_FT )
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	795b      	ldrb	r3, [r3, #5]
 800052e:	2b04      	cmp	r3, #4
 8000530:	d117      	bne.n	8000562 <GPIO_Init+0x9a>
		{
			//1. configure the FTSR
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000532:	4b4b      	ldr	r3, [pc, #300]	; (8000660 <GPIO_Init+0x198>)
 8000534:	68db      	ldr	r3, [r3, #12]
 8000536:	687a      	ldr	r2, [r7, #4]
 8000538:	7912      	ldrb	r2, [r2, #4]
 800053a:	4611      	mov	r1, r2
 800053c:	2201      	movs	r2, #1
 800053e:	408a      	lsls	r2, r1
 8000540:	4611      	mov	r1, r2
 8000542:	4a47      	ldr	r2, [pc, #284]	; (8000660 <GPIO_Init+0x198>)
 8000544:	430b      	orrs	r3, r1
 8000546:	60d3      	str	r3, [r2, #12]
			//Clear the corresponding RTSR bit
			EXTI->RTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000548:	4b45      	ldr	r3, [pc, #276]	; (8000660 <GPIO_Init+0x198>)
 800054a:	689b      	ldr	r3, [r3, #8]
 800054c:	687a      	ldr	r2, [r7, #4]
 800054e:	7912      	ldrb	r2, [r2, #4]
 8000550:	4611      	mov	r1, r2
 8000552:	2201      	movs	r2, #1
 8000554:	408a      	lsls	r2, r1
 8000556:	43d2      	mvns	r2, r2
 8000558:	4611      	mov	r1, r2
 800055a:	4a41      	ldr	r2, [pc, #260]	; (8000660 <GPIO_Init+0x198>)
 800055c:	400b      	ands	r3, r1
 800055e:	6093      	str	r3, [r2, #8]
 8000560:	e035      	b.n	80005ce <GPIO_Init+0x106>

		}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode ==GPIO_MODE_IT_RT )
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	795b      	ldrb	r3, [r3, #5]
 8000566:	2b05      	cmp	r3, #5
 8000568:	d117      	bne.n	800059a <GPIO_Init+0xd2>
		{
			//1 . configure the RTSR
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800056a:	4b3d      	ldr	r3, [pc, #244]	; (8000660 <GPIO_Init+0x198>)
 800056c:	689b      	ldr	r3, [r3, #8]
 800056e:	687a      	ldr	r2, [r7, #4]
 8000570:	7912      	ldrb	r2, [r2, #4]
 8000572:	4611      	mov	r1, r2
 8000574:	2201      	movs	r2, #1
 8000576:	408a      	lsls	r2, r1
 8000578:	4611      	mov	r1, r2
 800057a:	4a39      	ldr	r2, [pc, #228]	; (8000660 <GPIO_Init+0x198>)
 800057c:	430b      	orrs	r3, r1
 800057e:	6093      	str	r3, [r2, #8]
			//Clear the corresponding RTSR bit
			EXTI->FTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000580:	4b37      	ldr	r3, [pc, #220]	; (8000660 <GPIO_Init+0x198>)
 8000582:	68db      	ldr	r3, [r3, #12]
 8000584:	687a      	ldr	r2, [r7, #4]
 8000586:	7912      	ldrb	r2, [r2, #4]
 8000588:	4611      	mov	r1, r2
 800058a:	2201      	movs	r2, #1
 800058c:	408a      	lsls	r2, r1
 800058e:	43d2      	mvns	r2, r2
 8000590:	4611      	mov	r1, r2
 8000592:	4a33      	ldr	r2, [pc, #204]	; (8000660 <GPIO_Init+0x198>)
 8000594:	400b      	ands	r3, r1
 8000596:	60d3      	str	r3, [r2, #12]
 8000598:	e019      	b.n	80005ce <GPIO_Init+0x106>

		}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT )
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	795b      	ldrb	r3, [r3, #5]
 800059e:	2b06      	cmp	r3, #6
 80005a0:	d115      	bne.n	80005ce <GPIO_Init+0x106>
		{
			//1. configure both FTSR and RTSR
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005a2:	4b2f      	ldr	r3, [pc, #188]	; (8000660 <GPIO_Init+0x198>)
 80005a4:	689b      	ldr	r3, [r3, #8]
 80005a6:	687a      	ldr	r2, [r7, #4]
 80005a8:	7912      	ldrb	r2, [r2, #4]
 80005aa:	4611      	mov	r1, r2
 80005ac:	2201      	movs	r2, #1
 80005ae:	408a      	lsls	r2, r1
 80005b0:	4611      	mov	r1, r2
 80005b2:	4a2b      	ldr	r2, [pc, #172]	; (8000660 <GPIO_Init+0x198>)
 80005b4:	430b      	orrs	r3, r1
 80005b6:	6093      	str	r3, [r2, #8]
			//Clear the corresponding RTSR bit
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005b8:	4b29      	ldr	r3, [pc, #164]	; (8000660 <GPIO_Init+0x198>)
 80005ba:	68db      	ldr	r3, [r3, #12]
 80005bc:	687a      	ldr	r2, [r7, #4]
 80005be:	7912      	ldrb	r2, [r2, #4]
 80005c0:	4611      	mov	r1, r2
 80005c2:	2201      	movs	r2, #1
 80005c4:	408a      	lsls	r2, r1
 80005c6:	4611      	mov	r1, r2
 80005c8:	4a25      	ldr	r2, [pc, #148]	; (8000660 <GPIO_Init+0x198>)
 80005ca:	430b      	orrs	r3, r1
 80005cc:	60d3      	str	r3, [r2, #12]
		}

		//2. configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4 ;
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	791b      	ldrb	r3, [r3, #4]
 80005d2:	089b      	lsrs	r3, r3, #2
 80005d4:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	791b      	ldrb	r3, [r3, #4]
 80005da:	f003 0303 	and.w	r3, r3, #3
 80005de:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	4a1f      	ldr	r2, [pc, #124]	; (8000664 <GPIO_Init+0x19c>)
 80005e6:	4293      	cmp	r3, r2
 80005e8:	d04e      	beq.n	8000688 <GPIO_Init+0x1c0>
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	4a1e      	ldr	r2, [pc, #120]	; (8000668 <GPIO_Init+0x1a0>)
 80005f0:	4293      	cmp	r3, r2
 80005f2:	d032      	beq.n	800065a <GPIO_Init+0x192>
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	4a1c      	ldr	r2, [pc, #112]	; (800066c <GPIO_Init+0x1a4>)
 80005fa:	4293      	cmp	r3, r2
 80005fc:	d02b      	beq.n	8000656 <GPIO_Init+0x18e>
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	4a1b      	ldr	r2, [pc, #108]	; (8000670 <GPIO_Init+0x1a8>)
 8000604:	4293      	cmp	r3, r2
 8000606:	d024      	beq.n	8000652 <GPIO_Init+0x18a>
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	4a19      	ldr	r2, [pc, #100]	; (8000674 <GPIO_Init+0x1ac>)
 800060e:	4293      	cmp	r3, r2
 8000610:	d01d      	beq.n	800064e <GPIO_Init+0x186>
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	4a18      	ldr	r2, [pc, #96]	; (8000678 <GPIO_Init+0x1b0>)
 8000618:	4293      	cmp	r3, r2
 800061a:	d016      	beq.n	800064a <GPIO_Init+0x182>
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	4a16      	ldr	r2, [pc, #88]	; (800067c <GPIO_Init+0x1b4>)
 8000622:	4293      	cmp	r3, r2
 8000624:	d00f      	beq.n	8000646 <GPIO_Init+0x17e>
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	4a15      	ldr	r2, [pc, #84]	; (8000680 <GPIO_Init+0x1b8>)
 800062c:	4293      	cmp	r3, r2
 800062e:	d008      	beq.n	8000642 <GPIO_Init+0x17a>
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	4a13      	ldr	r2, [pc, #76]	; (8000684 <GPIO_Init+0x1bc>)
 8000636:	4293      	cmp	r3, r2
 8000638:	d101      	bne.n	800063e <GPIO_Init+0x176>
 800063a:	2308      	movs	r3, #8
 800063c:	e025      	b.n	800068a <GPIO_Init+0x1c2>
 800063e:	2300      	movs	r3, #0
 8000640:	e023      	b.n	800068a <GPIO_Init+0x1c2>
 8000642:	2307      	movs	r3, #7
 8000644:	e021      	b.n	800068a <GPIO_Init+0x1c2>
 8000646:	2306      	movs	r3, #6
 8000648:	e01f      	b.n	800068a <GPIO_Init+0x1c2>
 800064a:	2305      	movs	r3, #5
 800064c:	e01d      	b.n	800068a <GPIO_Init+0x1c2>
 800064e:	2304      	movs	r3, #4
 8000650:	e01b      	b.n	800068a <GPIO_Init+0x1c2>
 8000652:	2303      	movs	r3, #3
 8000654:	e019      	b.n	800068a <GPIO_Init+0x1c2>
 8000656:	2302      	movs	r3, #2
 8000658:	e017      	b.n	800068a <GPIO_Init+0x1c2>
 800065a:	2301      	movs	r3, #1
 800065c:	e015      	b.n	800068a <GPIO_Init+0x1c2>
 800065e:	bf00      	nop
 8000660:	40013c00 	.word	0x40013c00
 8000664:	40020000 	.word	0x40020000
 8000668:	40020400 	.word	0x40020400
 800066c:	40020800 	.word	0x40020800
 8000670:	40020c00 	.word	0x40020c00
 8000674:	40021000 	.word	0x40021000
 8000678:	40021400 	.word	0x40021400
 800067c:	40021800 	.word	0x40021800
 8000680:	40021c00 	.word	0x40021c00
 8000684:	40022000 	.word	0x40022000
 8000688:	2300      	movs	r3, #0
 800068a:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 800068c:	4b59      	ldr	r3, [pc, #356]	; (80007f4 <GPIO_Init+0x32c>)
 800068e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000690:	4a58      	ldr	r2, [pc, #352]	; (80007f4 <GPIO_Init+0x32c>)
 8000692:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000696:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[temp1] = portcode << ( temp2 * 4);
 8000698:	7c7a      	ldrb	r2, [r7, #17]
 800069a:	7cbb      	ldrb	r3, [r7, #18]
 800069c:	009b      	lsls	r3, r3, #2
 800069e:	fa02 f103 	lsl.w	r1, r2, r3
 80006a2:	4a55      	ldr	r2, [pc, #340]	; (80007f8 <GPIO_Init+0x330>)
 80006a4:	7cfb      	ldrb	r3, [r7, #19]
 80006a6:	3302      	adds	r3, #2
 80006a8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		//3 . enable the exti interrupt delivery using IMR
		EXTI->IMR |= 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 80006ac:	4b53      	ldr	r3, [pc, #332]	; (80007fc <GPIO_Init+0x334>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	687a      	ldr	r2, [r7, #4]
 80006b2:	7912      	ldrb	r2, [r2, #4]
 80006b4:	4611      	mov	r1, r2
 80006b6:	2201      	movs	r2, #1
 80006b8:	408a      	lsls	r2, r1
 80006ba:	4611      	mov	r1, r2
 80006bc:	4a4f      	ldr	r2, [pc, #316]	; (80007fc <GPIO_Init+0x334>)
 80006be:	430b      	orrs	r3, r1
 80006c0:	6013      	str	r3, [r2, #0]
	}

	//2. configure the speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	799b      	ldrb	r3, [r3, #6]
 80006c6:	461a      	mov	r2, r3
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	791b      	ldrb	r3, [r3, #4]
 80006cc:	005b      	lsls	r3, r3, #1
 80006ce:	fa02 f303 	lsl.w	r3, r2, r3
 80006d2:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	689a      	ldr	r2, [r3, #8]
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	791b      	ldrb	r3, [r3, #4]
 80006de:	005b      	lsls	r3, r3, #1
 80006e0:	2103      	movs	r1, #3
 80006e2:	fa01 f303 	lsl.w	r3, r1, r3
 80006e6:	43db      	mvns	r3, r3
 80006e8:	4619      	mov	r1, r3
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	400a      	ands	r2, r1
 80006f0:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	6899      	ldr	r1, [r3, #8]
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	697a      	ldr	r2, [r7, #20]
 80006fe:	430a      	orrs	r2, r1
 8000700:	609a      	str	r2, [r3, #8]

	//3. configure the pupd settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	79db      	ldrb	r3, [r3, #7]
 8000706:	461a      	mov	r2, r3
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	791b      	ldrb	r3, [r3, #4]
 800070c:	005b      	lsls	r3, r3, #1
 800070e:	fa02 f303 	lsl.w	r3, r2, r3
 8000712:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	68da      	ldr	r2, [r3, #12]
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	791b      	ldrb	r3, [r3, #4]
 800071e:	005b      	lsls	r3, r3, #1
 8000720:	2103      	movs	r1, #3
 8000722:	fa01 f303 	lsl.w	r3, r1, r3
 8000726:	43db      	mvns	r3, r3
 8000728:	4619      	mov	r1, r3
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	400a      	ands	r2, r1
 8000730:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	68d9      	ldr	r1, [r3, #12]
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	697a      	ldr	r2, [r7, #20]
 800073e:	430a      	orrs	r2, r1
 8000740:	60da      	str	r2, [r3, #12]


	//4. configure the optype
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	7a1b      	ldrb	r3, [r3, #8]
 8000746:	461a      	mov	r2, r3
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	791b      	ldrb	r3, [r3, #4]
 800074c:	fa02 f303 	lsl.w	r3, r2, r3
 8000750:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~( 0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	685a      	ldr	r2, [r3, #4]
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	791b      	ldrb	r3, [r3, #4]
 800075c:	4619      	mov	r1, r3
 800075e:	2301      	movs	r3, #1
 8000760:	408b      	lsls	r3, r1
 8000762:	43db      	mvns	r3, r3
 8000764:	4619      	mov	r1, r3
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	400a      	ands	r2, r1
 800076c:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	6859      	ldr	r1, [r3, #4]
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	697a      	ldr	r2, [r7, #20]
 800077a:	430a      	orrs	r2, r1
 800077c:	605a      	str	r2, [r3, #4]

	//5. configure the alt functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	795b      	ldrb	r3, [r3, #5]
 8000782:	2b02      	cmp	r3, #2
 8000784:	d131      	bne.n	80007ea <GPIO_Init+0x322>
	{
		//configure the alt function registers.
		uint8_t temp1, temp2;

		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	791b      	ldrb	r3, [r3, #4]
 800078a:	08db      	lsrs	r3, r3, #3
 800078c:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber  % 8;
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	791b      	ldrb	r3, [r3, #4]
 8000792:	f003 0307 	and.w	r3, r3, #7
 8000796:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << ( 4 * temp2 ) ); //clearing
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	7c3a      	ldrb	r2, [r7, #16]
 800079e:	3208      	adds	r2, #8
 80007a0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80007a4:	7bfb      	ldrb	r3, [r7, #15]
 80007a6:	009b      	lsls	r3, r3, #2
 80007a8:	220f      	movs	r2, #15
 80007aa:	fa02 f303 	lsl.w	r3, r2, r3
 80007ae:	43db      	mvns	r3, r3
 80007b0:	4618      	mov	r0, r3
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	7c3a      	ldrb	r2, [r7, #16]
 80007b8:	4001      	ands	r1, r0
 80007ba:	3208      	adds	r2, #8
 80007bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << ( 4 * temp2 ) );
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	7c3a      	ldrb	r2, [r7, #16]
 80007c6:	3208      	adds	r2, #8
 80007c8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	7a5b      	ldrb	r3, [r3, #9]
 80007d0:	461a      	mov	r2, r3
 80007d2:	7bfb      	ldrb	r3, [r7, #15]
 80007d4:	009b      	lsls	r3, r3, #2
 80007d6:	fa02 f303 	lsl.w	r3, r2, r3
 80007da:	4618      	mov	r0, r3
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	7c3a      	ldrb	r2, [r7, #16]
 80007e2:	4301      	orrs	r1, r0
 80007e4:	3208      	adds	r2, #8
 80007e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}

}
 80007ea:	bf00      	nop
 80007ec:	3718      	adds	r7, #24
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	40023800 	.word	0x40023800
 80007f8:	40013800 	.word	0x40013800
 80007fc:	40013c00 	.word	0x40013c00

08000800 <GPIO_WriteToOutputPin>:
 *
 * @Note              -

 */
void GPIO_WriteToOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber, uint8_t Value)
{
 8000800:	b480      	push	{r7}
 8000802:	b083      	sub	sp, #12
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
 8000808:	460b      	mov	r3, r1
 800080a:	70fb      	strb	r3, [r7, #3]
 800080c:	4613      	mov	r3, r2
 800080e:	70bb      	strb	r3, [r7, #2]

	if(Value == GPIO_PIN_SET)
 8000810:	78bb      	ldrb	r3, [r7, #2]
 8000812:	2b01      	cmp	r3, #1
 8000814:	d109      	bne.n	800082a <GPIO_WriteToOutputPin+0x2a>
	{
		//write 1 to the output data register at the bit field corresponding to the pin number
		pGPIOx->ODR |= ( 1 << PinNumber);
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	695b      	ldr	r3, [r3, #20]
 800081a:	78fa      	ldrb	r2, [r7, #3]
 800081c:	2101      	movs	r1, #1
 800081e:	fa01 f202 	lsl.w	r2, r1, r2
 8000822:	431a      	orrs	r2, r3
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	615a      	str	r2, [r3, #20]
	}else
	{
		//write 0
		pGPIOx->ODR &= ~( 1 << PinNumber);
	}
}
 8000828:	e009      	b.n	800083e <GPIO_WriteToOutputPin+0x3e>
		pGPIOx->ODR &= ~( 1 << PinNumber);
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	695b      	ldr	r3, [r3, #20]
 800082e:	78fa      	ldrb	r2, [r7, #3]
 8000830:	2101      	movs	r1, #1
 8000832:	fa01 f202 	lsl.w	r2, r1, r2
 8000836:	43d2      	mvns	r2, r2
 8000838:	401a      	ands	r2, r3
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	615a      	str	r2, [r3, #20]
}
 800083e:	bf00      	nop
 8000840:	370c      	adds	r7, #12
 8000842:	46bd      	mov	sp, r7
 8000844:	bc80      	pop	{r7}
 8000846:	4770      	bx	lr

08000848 <SPI_PeriClockControl>:
 *
 * @Note              -

 */
void SPI_PeriClockControl(SPI_RegDef_t *pSPIx, uint8_t EnorDi)
{
 8000848:	b480      	push	{r7}
 800084a:	b083      	sub	sp, #12
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
 8000850:	460b      	mov	r3, r1
 8000852:	70fb      	strb	r3, [r7, #3]

	if(EnorDi == ENABLE)
 8000854:	78fb      	ldrb	r3, [r7, #3]
 8000856:	2b01      	cmp	r3, #1
 8000858:	d11f      	bne.n	800089a <SPI_PeriClockControl+0x52>
	{
		if(pSPIx == SPI1)
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	4a11      	ldr	r2, [pc, #68]	; (80008a4 <SPI_PeriClockControl+0x5c>)
 800085e:	4293      	cmp	r3, r2
 8000860:	d106      	bne.n	8000870 <SPI_PeriClockControl+0x28>
		{
			SPI1_PCLK_EN();
 8000862:	4b11      	ldr	r3, [pc, #68]	; (80008a8 <SPI_PeriClockControl+0x60>)
 8000864:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000866:	4a10      	ldr	r2, [pc, #64]	; (80008a8 <SPI_PeriClockControl+0x60>)
 8000868:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800086c:	6453      	str	r3, [r2, #68]	; 0x44
	}
	else
	{
		//TODO
	}
}
 800086e:	e014      	b.n	800089a <SPI_PeriClockControl+0x52>
		}else if (pSPIx == SPI2)
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	4a0e      	ldr	r2, [pc, #56]	; (80008ac <SPI_PeriClockControl+0x64>)
 8000874:	4293      	cmp	r3, r2
 8000876:	d106      	bne.n	8000886 <SPI_PeriClockControl+0x3e>
			SPI2_PCLK_EN();
 8000878:	4b0b      	ldr	r3, [pc, #44]	; (80008a8 <SPI_PeriClockControl+0x60>)
 800087a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800087c:	4a0a      	ldr	r2, [pc, #40]	; (80008a8 <SPI_PeriClockControl+0x60>)
 800087e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000882:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000884:	e009      	b.n	800089a <SPI_PeriClockControl+0x52>
		}else if (pSPIx == SPI3)
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	4a09      	ldr	r2, [pc, #36]	; (80008b0 <SPI_PeriClockControl+0x68>)
 800088a:	4293      	cmp	r3, r2
 800088c:	d105      	bne.n	800089a <SPI_PeriClockControl+0x52>
			SPI3_PCLK_EN();
 800088e:	4b06      	ldr	r3, [pc, #24]	; (80008a8 <SPI_PeriClockControl+0x60>)
 8000890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000892:	4a05      	ldr	r2, [pc, #20]	; (80008a8 <SPI_PeriClockControl+0x60>)
 8000894:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000898:	6413      	str	r3, [r2, #64]	; 0x40
}
 800089a:	bf00      	nop
 800089c:	370c      	adds	r7, #12
 800089e:	46bd      	mov	sp, r7
 80008a0:	bc80      	pop	{r7}
 80008a2:	4770      	bx	lr
 80008a4:	40013000 	.word	0x40013000
 80008a8:	40023800 	.word	0x40023800
 80008ac:	40003800 	.word	0x40003800
 80008b0:	40003c00 	.word	0x40003c00

080008b4 <SPI_Init>:
 *
 * @Note              -

 */
void SPI_Init(SPI_Handle_t *pSPIHandle)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b084      	sub	sp, #16
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]

	//peripheral clock enable

	SPI_PeriClockControl(pSPIHandle->pSPIx, ENABLE);
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	2101      	movs	r1, #1
 80008c2:	4618      	mov	r0, r3
 80008c4:	f7ff ffc0 	bl	8000848 <SPI_PeriClockControl>

	//first lets configure the SPI_CR1 register

	uint32_t tempreg = 0;
 80008c8:	2300      	movs	r3, #0
 80008ca:	60fb      	str	r3, [r7, #12]

	//1. configure the device mode
	tempreg |= pSPIHandle->SPIConfig.SPI_DeviceMode << SPI_CR1_MSTR ;
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	791b      	ldrb	r3, [r3, #4]
 80008d0:	009b      	lsls	r3, r3, #2
 80008d2:	461a      	mov	r2, r3
 80008d4:	68fb      	ldr	r3, [r7, #12]
 80008d6:	4313      	orrs	r3, r2
 80008d8:	60fb      	str	r3, [r7, #12]

	//2. Configure the bus config
	if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_FD)
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	795b      	ldrb	r3, [r3, #5]
 80008de:	2b01      	cmp	r3, #1
 80008e0:	d104      	bne.n	80008ec <SPI_Init+0x38>
	{
		//bidi mode should be cleared
		tempreg &= ~( 1 << SPI_CR1_BIDIMODE);
 80008e2:	68fb      	ldr	r3, [r7, #12]
 80008e4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80008e8:	60fb      	str	r3, [r7, #12]
 80008ea:	e014      	b.n	8000916 <SPI_Init+0x62>

	}else if (pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_HD)
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	795b      	ldrb	r3, [r3, #5]
 80008f0:	2b02      	cmp	r3, #2
 80008f2:	d104      	bne.n	80008fe <SPI_Init+0x4a>
	{
		//bidi mode should be set
		tempreg |= ( 1 << SPI_CR1_BIDIMODE);
 80008f4:	68fb      	ldr	r3, [r7, #12]
 80008f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80008fa:	60fb      	str	r3, [r7, #12]
 80008fc:	e00b      	b.n	8000916 <SPI_Init+0x62>
	}else if (pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_SIMPLEX_RXONLY)
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	795b      	ldrb	r3, [r3, #5]
 8000902:	2b03      	cmp	r3, #3
 8000904:	d107      	bne.n	8000916 <SPI_Init+0x62>
	{
		//BIDI mode should be cleared
		tempreg &= ~( 1 << SPI_CR1_BIDIMODE);
 8000906:	68fb      	ldr	r3, [r7, #12]
 8000908:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800090c:	60fb      	str	r3, [r7, #12]
		//RXONLY bit must be set
		tempreg |= ( 1 << SPI_CR1_RXONLY);
 800090e:	68fb      	ldr	r3, [r7, #12]
 8000910:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000914:	60fb      	str	r3, [r7, #12]
	}

	// 3. Configure the spi serial clock speed (baud rate)
	tempreg |= pSPIHandle->SPIConfig.SPI_SclkSpeed << SPI_CR1_BR;
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	799b      	ldrb	r3, [r3, #6]
 800091a:	00db      	lsls	r3, r3, #3
 800091c:	461a      	mov	r2, r3
 800091e:	68fb      	ldr	r3, [r7, #12]
 8000920:	4313      	orrs	r3, r2
 8000922:	60fb      	str	r3, [r7, #12]

	//4.  Configure the DFF
	tempreg |= pSPIHandle->SPIConfig.SPI_DFF << SPI_CR1_DFF;
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	79db      	ldrb	r3, [r3, #7]
 8000928:	02db      	lsls	r3, r3, #11
 800092a:	461a      	mov	r2, r3
 800092c:	68fb      	ldr	r3, [r7, #12]
 800092e:	4313      	orrs	r3, r2
 8000930:	60fb      	str	r3, [r7, #12]

	//5. configure the CPOL
	tempreg |= pSPIHandle->SPIConfig.SPI_CPOL << SPI_CR1_CPOL;
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	7a1b      	ldrb	r3, [r3, #8]
 8000936:	005b      	lsls	r3, r3, #1
 8000938:	461a      	mov	r2, r3
 800093a:	68fb      	ldr	r3, [r7, #12]
 800093c:	4313      	orrs	r3, r2
 800093e:	60fb      	str	r3, [r7, #12]

	//6 . configure the CPHA
	tempreg |= pSPIHandle->SPIConfig.SPI_CPHA << SPI_CR1_CPHA;
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	7a5b      	ldrb	r3, [r3, #9]
 8000944:	461a      	mov	r2, r3
 8000946:	68fb      	ldr	r3, [r7, #12]
 8000948:	4313      	orrs	r3, r2
 800094a:	60fb      	str	r3, [r7, #12]

	tempreg |= pSPIHandle->SPIConfig.SPI_SSM << SPI_CR1_SSM;
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	7a9b      	ldrb	r3, [r3, #10]
 8000950:	025b      	lsls	r3, r3, #9
 8000952:	461a      	mov	r2, r3
 8000954:	68fb      	ldr	r3, [r7, #12]
 8000956:	4313      	orrs	r3, r2
 8000958:	60fb      	str	r3, [r7, #12]


	pSPIHandle->pSPIx->CR1 = tempreg;
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	68fa      	ldr	r2, [r7, #12]
 8000960:	601a      	str	r2, [r3, #0]
	SPI_SSIConfig(pSPIHandle->pSPIx, ENABLE);
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	2101      	movs	r1, #1
 8000968:	4618      	mov	r0, r3
 800096a:	f000 f89e 	bl	8000aaa <SPI_SSIConfig>

}
 800096e:	bf00      	nop
 8000970:	3710      	adds	r7, #16
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}

08000976 <SPI_GetFlagStatus>:
{
 //todo
}

uint8_t SPI_GetFlagStatus(SPI_RegDef_t *pSPIx , uint32_t FlagName)
{
 8000976:	b480      	push	{r7}
 8000978:	b083      	sub	sp, #12
 800097a:	af00      	add	r7, sp, #0
 800097c:	6078      	str	r0, [r7, #4]
 800097e:	6039      	str	r1, [r7, #0]
	if(pSPIx->SR & FlagName)
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	689a      	ldr	r2, [r3, #8]
 8000984:	683b      	ldr	r3, [r7, #0]
 8000986:	4013      	ands	r3, r2
 8000988:	2b00      	cmp	r3, #0
 800098a:	d001      	beq.n	8000990 <SPI_GetFlagStatus+0x1a>
	{
		return FLAG_SET;
 800098c:	2301      	movs	r3, #1
 800098e:	e000      	b.n	8000992 <SPI_GetFlagStatus+0x1c>
	}
	return FLAG_RESET;
 8000990:	2300      	movs	r3, #0
}
 8000992:	4618      	mov	r0, r3
 8000994:	370c      	adds	r7, #12
 8000996:	46bd      	mov	sp, r7
 8000998:	bc80      	pop	{r7}
 800099a:	4770      	bx	lr

0800099c <SPI_SendData>:
 *
 * @Note              - This is blocking call

 */
void SPI_SendData(SPI_RegDef_t *pSPIx,uint8_t *pTxBuffer, uint32_t Len)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b084      	sub	sp, #16
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	60f8      	str	r0, [r7, #12]
 80009a4:	60b9      	str	r1, [r7, #8]
 80009a6:	607a      	str	r2, [r7, #4]
	while(Len > 0)
 80009a8:	e027      	b.n	80009fa <SPI_SendData+0x5e>
	{
		//1. wait until TXE is set
		while(SPI_GetFlagStatus(pSPIx,SPI_TXE_FLAG)  == FLAG_RESET );
 80009aa:	bf00      	nop
 80009ac:	2102      	movs	r1, #2
 80009ae:	68f8      	ldr	r0, [r7, #12]
 80009b0:	f7ff ffe1 	bl	8000976 <SPI_GetFlagStatus>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d0f8      	beq.n	80009ac <SPI_SendData+0x10>

		//2. check the DFF bit in CR1
		if( (pSPIx->CR1 & ( 1 << SPI_CR1_DFF) ) )
 80009ba:	68fb      	ldr	r3, [r7, #12]
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d00e      	beq.n	80009e4 <SPI_SendData+0x48>
		{
			//16 bit DFF
			//1. load the data in to the DR
			pSPIx->DR =   *((uint16_t*)pTxBuffer);
 80009c6:	68bb      	ldr	r3, [r7, #8]
 80009c8:	881b      	ldrh	r3, [r3, #0]
 80009ca:	461a      	mov	r2, r3
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	60da      	str	r2, [r3, #12]
			Len--;
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	3b01      	subs	r3, #1
 80009d4:	607b      	str	r3, [r7, #4]
			Len--;
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	3b01      	subs	r3, #1
 80009da:	607b      	str	r3, [r7, #4]
			(uint16_t*)pTxBuffer++;
 80009dc:	68bb      	ldr	r3, [r7, #8]
 80009de:	3301      	adds	r3, #1
 80009e0:	60bb      	str	r3, [r7, #8]
 80009e2:	e00a      	b.n	80009fa <SPI_SendData+0x5e>
		}else
		{
			//8 bit DFF
			pSPIx->DR =   *pTxBuffer;
 80009e4:	68bb      	ldr	r3, [r7, #8]
 80009e6:	781b      	ldrb	r3, [r3, #0]
 80009e8:	461a      	mov	r2, r3
 80009ea:	68fb      	ldr	r3, [r7, #12]
 80009ec:	60da      	str	r2, [r3, #12]
			Len--;
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	3b01      	subs	r3, #1
 80009f2:	607b      	str	r3, [r7, #4]
			pTxBuffer++;
 80009f4:	68bb      	ldr	r3, [r7, #8]
 80009f6:	3301      	adds	r3, #1
 80009f8:	60bb      	str	r3, [r7, #8]
	while(Len > 0)
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d1d4      	bne.n	80009aa <SPI_SendData+0xe>
		}
	}

}
 8000a00:	bf00      	nop
 8000a02:	3710      	adds	r7, #16
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}

08000a08 <SPI_ReceiveData>:
 *
 * @Note              -

 */
void SPI_ReceiveData(SPI_RegDef_t *pSPIx, uint8_t *pRxBuffer, uint32_t Len)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b084      	sub	sp, #16
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	60f8      	str	r0, [r7, #12]
 8000a10:	60b9      	str	r1, [r7, #8]
 8000a12:	607a      	str	r2, [r7, #4]
	while(Len > 0)
 8000a14:	e027      	b.n	8000a66 <SPI_ReceiveData+0x5e>
		{
			//1. wait until RXNE is set
			while(SPI_GetFlagStatus(pSPIx,SPI_RXNE_FLAG)  == (uint8_t)FLAG_RESET );
 8000a16:	bf00      	nop
 8000a18:	2101      	movs	r1, #1
 8000a1a:	68f8      	ldr	r0, [r7, #12]
 8000a1c:	f7ff ffab 	bl	8000976 <SPI_GetFlagStatus>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d0f8      	beq.n	8000a18 <SPI_ReceiveData+0x10>

			//2. check the DFF bit in CR1
			if( (pSPIx->CR1 & ( 1 << SPI_CR1_DFF) ) )
 8000a26:	68fb      	ldr	r3, [r7, #12]
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d00e      	beq.n	8000a50 <SPI_ReceiveData+0x48>
			{
				//16 bit DFF
				//1. load the data from DR to Rxbuffer address
				 *((uint16_t*)pRxBuffer) = pSPIx->DR ;
 8000a32:	68fb      	ldr	r3, [r7, #12]
 8000a34:	68db      	ldr	r3, [r3, #12]
 8000a36:	b29a      	uxth	r2, r3
 8000a38:	68bb      	ldr	r3, [r7, #8]
 8000a3a:	801a      	strh	r2, [r3, #0]
				Len--;
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	3b01      	subs	r3, #1
 8000a40:	607b      	str	r3, [r7, #4]
				Len--;
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	3b01      	subs	r3, #1
 8000a46:	607b      	str	r3, [r7, #4]
				(uint16_t*)pRxBuffer++;
 8000a48:	68bb      	ldr	r3, [r7, #8]
 8000a4a:	3301      	adds	r3, #1
 8000a4c:	60bb      	str	r3, [r7, #8]
 8000a4e:	e00a      	b.n	8000a66 <SPI_ReceiveData+0x5e>
			}else
			{
				//8 bit DFF
				*(pRxBuffer) = pSPIx->DR ;
 8000a50:	68fb      	ldr	r3, [r7, #12]
 8000a52:	68db      	ldr	r3, [r3, #12]
 8000a54:	b2da      	uxtb	r2, r3
 8000a56:	68bb      	ldr	r3, [r7, #8]
 8000a58:	701a      	strb	r2, [r3, #0]
				Len--;
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	3b01      	subs	r3, #1
 8000a5e:	607b      	str	r3, [r7, #4]
				pRxBuffer++;
 8000a60:	68bb      	ldr	r3, [r7, #8]
 8000a62:	3301      	adds	r3, #1
 8000a64:	60bb      	str	r3, [r7, #8]
	while(Len > 0)
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d1d4      	bne.n	8000a16 <SPI_ReceiveData+0xe>
			}
		}

}
 8000a6c:	bf00      	nop
 8000a6e:	3710      	adds	r7, #16
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}

08000a74 <SPI_PeripheralControl>:
 *
 * @Note              -

 */
void SPI_PeripheralControl(SPI_RegDef_t *pSPIx, uint8_t EnOrDi)
{
 8000a74:	b480      	push	{r7}
 8000a76:	b083      	sub	sp, #12
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
 8000a7c:	460b      	mov	r3, r1
 8000a7e:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 8000a80:	78fb      	ldrb	r3, [r7, #3]
 8000a82:	2b01      	cmp	r3, #1
 8000a84:	d106      	bne.n	8000a94 <SPI_PeripheralControl+0x20>
	{
		pSPIx->CR1 |=  (1 << SPI_CR1_SPE);
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	601a      	str	r2, [r3, #0]
	{
		pSPIx->CR1 &=  ~(1 << SPI_CR1_SPE);
	}


}
 8000a92:	e005      	b.n	8000aa0 <SPI_PeripheralControl+0x2c>
		pSPIx->CR1 &=  ~(1 << SPI_CR1_SPE);
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	601a      	str	r2, [r3, #0]
}
 8000aa0:	bf00      	nop
 8000aa2:	370c      	adds	r7, #12
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bc80      	pop	{r7}
 8000aa8:	4770      	bx	lr

08000aaa <SPI_SSIConfig>:
 *
 * @Note              -

 */
void  SPI_SSIConfig(SPI_RegDef_t *pSPIx, uint8_t EnOrDi)
{
 8000aaa:	b480      	push	{r7}
 8000aac:	b083      	sub	sp, #12
 8000aae:	af00      	add	r7, sp, #0
 8000ab0:	6078      	str	r0, [r7, #4]
 8000ab2:	460b      	mov	r3, r1
 8000ab4:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 8000ab6:	78fb      	ldrb	r3, [r7, #3]
 8000ab8:	2b01      	cmp	r3, #1
 8000aba:	d106      	bne.n	8000aca <SPI_SSIConfig+0x20>
	{
		pSPIx->CR1 |=  (1 << SPI_CR1_SSI);
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	601a      	str	r2, [r3, #0]
	{
		pSPIx->CR1 &=  ~(1 << SPI_CR1_SSI);
	}


}
 8000ac8:	e005      	b.n	8000ad6 <SPI_SSIConfig+0x2c>
		pSPIx->CR1 &=  ~(1 << SPI_CR1_SSI);
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	601a      	str	r2, [r3, #0]
}
 8000ad6:	bf00      	nop
 8000ad8:	370c      	adds	r7, #12
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bc80      	pop	{r7}
 8000ade:	4770      	bx	lr

08000ae0 <__libc_init_array>:
 8000ae0:	b570      	push	{r4, r5, r6, lr}
 8000ae2:	4e0d      	ldr	r6, [pc, #52]	; (8000b18 <__libc_init_array+0x38>)
 8000ae4:	4c0d      	ldr	r4, [pc, #52]	; (8000b1c <__libc_init_array+0x3c>)
 8000ae6:	1ba4      	subs	r4, r4, r6
 8000ae8:	10a4      	asrs	r4, r4, #2
 8000aea:	2500      	movs	r5, #0
 8000aec:	42a5      	cmp	r5, r4
 8000aee:	d109      	bne.n	8000b04 <__libc_init_array+0x24>
 8000af0:	4e0b      	ldr	r6, [pc, #44]	; (8000b20 <__libc_init_array+0x40>)
 8000af2:	4c0c      	ldr	r4, [pc, #48]	; (8000b24 <__libc_init_array+0x44>)
 8000af4:	f000 f818 	bl	8000b28 <_init>
 8000af8:	1ba4      	subs	r4, r4, r6
 8000afa:	10a4      	asrs	r4, r4, #2
 8000afc:	2500      	movs	r5, #0
 8000afe:	42a5      	cmp	r5, r4
 8000b00:	d105      	bne.n	8000b0e <__libc_init_array+0x2e>
 8000b02:	bd70      	pop	{r4, r5, r6, pc}
 8000b04:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000b08:	4798      	blx	r3
 8000b0a:	3501      	adds	r5, #1
 8000b0c:	e7ee      	b.n	8000aec <__libc_init_array+0xc>
 8000b0e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000b12:	4798      	blx	r3
 8000b14:	3501      	adds	r5, #1
 8000b16:	e7f2      	b.n	8000afe <__libc_init_array+0x1e>
 8000b18:	08000b40 	.word	0x08000b40
 8000b1c:	08000b40 	.word	0x08000b40
 8000b20:	08000b40 	.word	0x08000b40
 8000b24:	08000b44 	.word	0x08000b44

08000b28 <_init>:
 8000b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b2a:	bf00      	nop
 8000b2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b2e:	bc08      	pop	{r3}
 8000b30:	469e      	mov	lr, r3
 8000b32:	4770      	bx	lr

08000b34 <_fini>:
 8000b34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b36:	bf00      	nop
 8000b38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b3a:	bc08      	pop	{r3}
 8000b3c:	469e      	mov	lr, r3
 8000b3e:	4770      	bx	lr
