
Test_HAL3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f8c  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08004154  08004154  00014154  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004164  08004164  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004164  08004164  00014164  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800416c  0800416c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800416c  0800416c  0001416c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004170  08004170  00014170  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004174  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b8  2000000c  08004180  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000c4  08004180  000200c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000946c  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001760  00000000  00000000  000294a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000848  00000000  00000000  0002ac08  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000780  00000000  00000000  0002b450  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00021f11  00000000  00000000  0002bbd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007315  00000000  00000000  0004dae1  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cac8f  00000000  00000000  00054df6  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0011fa85  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000228c  00000000  00000000  0011fb00  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000000c 	.word	0x2000000c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	0800413c 	.word	0x0800413c

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000010 	.word	0x20000010
 8000204:	0800413c 	.word	0x0800413c

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	; 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000346:	f1a4 0401 	sub.w	r4, r4, #1
 800034a:	d1e9      	bne.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__aeabi_d2f>:
 80009a4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009a8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009ac:	bf24      	itt	cs
 80009ae:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009b2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009b6:	d90d      	bls.n	80009d4 <__aeabi_d2f+0x30>
 80009b8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009bc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009c0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009c4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009c8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009cc:	bf08      	it	eq
 80009ce:	f020 0001 	biceq.w	r0, r0, #1
 80009d2:	4770      	bx	lr
 80009d4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009d8:	d121      	bne.n	8000a1e <__aeabi_d2f+0x7a>
 80009da:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009de:	bfbc      	itt	lt
 80009e0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009e4:	4770      	bxlt	lr
 80009e6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ea:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009ee:	f1c2 0218 	rsb	r2, r2, #24
 80009f2:	f1c2 0c20 	rsb	ip, r2, #32
 80009f6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009fa:	fa20 f002 	lsr.w	r0, r0, r2
 80009fe:	bf18      	it	ne
 8000a00:	f040 0001 	orrne.w	r0, r0, #1
 8000a04:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a08:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a0c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a10:	ea40 000c 	orr.w	r0, r0, ip
 8000a14:	fa23 f302 	lsr.w	r3, r3, r2
 8000a18:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a1c:	e7cc      	b.n	80009b8 <__aeabi_d2f+0x14>
 8000a1e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a22:	d107      	bne.n	8000a34 <__aeabi_d2f+0x90>
 8000a24:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a28:	bf1e      	ittt	ne
 8000a2a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a2e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a32:	4770      	bxne	lr
 8000a34:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a38:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a3c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a40:	4770      	bx	lr
 8000a42:	bf00      	nop

08000a44 <__aeabi_uldivmod>:
 8000a44:	b953      	cbnz	r3, 8000a5c <__aeabi_uldivmod+0x18>
 8000a46:	b94a      	cbnz	r2, 8000a5c <__aeabi_uldivmod+0x18>
 8000a48:	2900      	cmp	r1, #0
 8000a4a:	bf08      	it	eq
 8000a4c:	2800      	cmpeq	r0, #0
 8000a4e:	bf1c      	itt	ne
 8000a50:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000a54:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000a58:	f000 b972 	b.w	8000d40 <__aeabi_idiv0>
 8000a5c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a60:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a64:	f000 f806 	bl	8000a74 <__udivmoddi4>
 8000a68:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a6c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a70:	b004      	add	sp, #16
 8000a72:	4770      	bx	lr

08000a74 <__udivmoddi4>:
 8000a74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a78:	9e08      	ldr	r6, [sp, #32]
 8000a7a:	4604      	mov	r4, r0
 8000a7c:	4688      	mov	r8, r1
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d14b      	bne.n	8000b1a <__udivmoddi4+0xa6>
 8000a82:	428a      	cmp	r2, r1
 8000a84:	4615      	mov	r5, r2
 8000a86:	d967      	bls.n	8000b58 <__udivmoddi4+0xe4>
 8000a88:	fab2 f282 	clz	r2, r2
 8000a8c:	b14a      	cbz	r2, 8000aa2 <__udivmoddi4+0x2e>
 8000a8e:	f1c2 0720 	rsb	r7, r2, #32
 8000a92:	fa01 f302 	lsl.w	r3, r1, r2
 8000a96:	fa20 f707 	lsr.w	r7, r0, r7
 8000a9a:	4095      	lsls	r5, r2
 8000a9c:	ea47 0803 	orr.w	r8, r7, r3
 8000aa0:	4094      	lsls	r4, r2
 8000aa2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000aa6:	0c23      	lsrs	r3, r4, #16
 8000aa8:	fbb8 f7fe 	udiv	r7, r8, lr
 8000aac:	fa1f fc85 	uxth.w	ip, r5
 8000ab0:	fb0e 8817 	mls	r8, lr, r7, r8
 8000ab4:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ab8:	fb07 f10c 	mul.w	r1, r7, ip
 8000abc:	4299      	cmp	r1, r3
 8000abe:	d909      	bls.n	8000ad4 <__udivmoddi4+0x60>
 8000ac0:	18eb      	adds	r3, r5, r3
 8000ac2:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000ac6:	f080 811b 	bcs.w	8000d00 <__udivmoddi4+0x28c>
 8000aca:	4299      	cmp	r1, r3
 8000acc:	f240 8118 	bls.w	8000d00 <__udivmoddi4+0x28c>
 8000ad0:	3f02      	subs	r7, #2
 8000ad2:	442b      	add	r3, r5
 8000ad4:	1a5b      	subs	r3, r3, r1
 8000ad6:	b2a4      	uxth	r4, r4
 8000ad8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000adc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ae0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ae4:	fb00 fc0c 	mul.w	ip, r0, ip
 8000ae8:	45a4      	cmp	ip, r4
 8000aea:	d909      	bls.n	8000b00 <__udivmoddi4+0x8c>
 8000aec:	192c      	adds	r4, r5, r4
 8000aee:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000af2:	f080 8107 	bcs.w	8000d04 <__udivmoddi4+0x290>
 8000af6:	45a4      	cmp	ip, r4
 8000af8:	f240 8104 	bls.w	8000d04 <__udivmoddi4+0x290>
 8000afc:	3802      	subs	r0, #2
 8000afe:	442c      	add	r4, r5
 8000b00:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000b04:	eba4 040c 	sub.w	r4, r4, ip
 8000b08:	2700      	movs	r7, #0
 8000b0a:	b11e      	cbz	r6, 8000b14 <__udivmoddi4+0xa0>
 8000b0c:	40d4      	lsrs	r4, r2
 8000b0e:	2300      	movs	r3, #0
 8000b10:	e9c6 4300 	strd	r4, r3, [r6]
 8000b14:	4639      	mov	r1, r7
 8000b16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b1a:	428b      	cmp	r3, r1
 8000b1c:	d909      	bls.n	8000b32 <__udivmoddi4+0xbe>
 8000b1e:	2e00      	cmp	r6, #0
 8000b20:	f000 80eb 	beq.w	8000cfa <__udivmoddi4+0x286>
 8000b24:	2700      	movs	r7, #0
 8000b26:	e9c6 0100 	strd	r0, r1, [r6]
 8000b2a:	4638      	mov	r0, r7
 8000b2c:	4639      	mov	r1, r7
 8000b2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b32:	fab3 f783 	clz	r7, r3
 8000b36:	2f00      	cmp	r7, #0
 8000b38:	d147      	bne.n	8000bca <__udivmoddi4+0x156>
 8000b3a:	428b      	cmp	r3, r1
 8000b3c:	d302      	bcc.n	8000b44 <__udivmoddi4+0xd0>
 8000b3e:	4282      	cmp	r2, r0
 8000b40:	f200 80fa 	bhi.w	8000d38 <__udivmoddi4+0x2c4>
 8000b44:	1a84      	subs	r4, r0, r2
 8000b46:	eb61 0303 	sbc.w	r3, r1, r3
 8000b4a:	2001      	movs	r0, #1
 8000b4c:	4698      	mov	r8, r3
 8000b4e:	2e00      	cmp	r6, #0
 8000b50:	d0e0      	beq.n	8000b14 <__udivmoddi4+0xa0>
 8000b52:	e9c6 4800 	strd	r4, r8, [r6]
 8000b56:	e7dd      	b.n	8000b14 <__udivmoddi4+0xa0>
 8000b58:	b902      	cbnz	r2, 8000b5c <__udivmoddi4+0xe8>
 8000b5a:	deff      	udf	#255	; 0xff
 8000b5c:	fab2 f282 	clz	r2, r2
 8000b60:	2a00      	cmp	r2, #0
 8000b62:	f040 808f 	bne.w	8000c84 <__udivmoddi4+0x210>
 8000b66:	1b49      	subs	r1, r1, r5
 8000b68:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b6c:	fa1f f885 	uxth.w	r8, r5
 8000b70:	2701      	movs	r7, #1
 8000b72:	fbb1 fcfe 	udiv	ip, r1, lr
 8000b76:	0c23      	lsrs	r3, r4, #16
 8000b78:	fb0e 111c 	mls	r1, lr, ip, r1
 8000b7c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b80:	fb08 f10c 	mul.w	r1, r8, ip
 8000b84:	4299      	cmp	r1, r3
 8000b86:	d907      	bls.n	8000b98 <__udivmoddi4+0x124>
 8000b88:	18eb      	adds	r3, r5, r3
 8000b8a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000b8e:	d202      	bcs.n	8000b96 <__udivmoddi4+0x122>
 8000b90:	4299      	cmp	r1, r3
 8000b92:	f200 80cd 	bhi.w	8000d30 <__udivmoddi4+0x2bc>
 8000b96:	4684      	mov	ip, r0
 8000b98:	1a59      	subs	r1, r3, r1
 8000b9a:	b2a3      	uxth	r3, r4
 8000b9c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ba0:	fb0e 1410 	mls	r4, lr, r0, r1
 8000ba4:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000ba8:	fb08 f800 	mul.w	r8, r8, r0
 8000bac:	45a0      	cmp	r8, r4
 8000bae:	d907      	bls.n	8000bc0 <__udivmoddi4+0x14c>
 8000bb0:	192c      	adds	r4, r5, r4
 8000bb2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000bb6:	d202      	bcs.n	8000bbe <__udivmoddi4+0x14a>
 8000bb8:	45a0      	cmp	r8, r4
 8000bba:	f200 80b6 	bhi.w	8000d2a <__udivmoddi4+0x2b6>
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	eba4 0408 	sub.w	r4, r4, r8
 8000bc4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000bc8:	e79f      	b.n	8000b0a <__udivmoddi4+0x96>
 8000bca:	f1c7 0c20 	rsb	ip, r7, #32
 8000bce:	40bb      	lsls	r3, r7
 8000bd0:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000bd4:	ea4e 0e03 	orr.w	lr, lr, r3
 8000bd8:	fa01 f407 	lsl.w	r4, r1, r7
 8000bdc:	fa20 f50c 	lsr.w	r5, r0, ip
 8000be0:	fa21 f30c 	lsr.w	r3, r1, ip
 8000be4:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000be8:	4325      	orrs	r5, r4
 8000bea:	fbb3 f9f8 	udiv	r9, r3, r8
 8000bee:	0c2c      	lsrs	r4, r5, #16
 8000bf0:	fb08 3319 	mls	r3, r8, r9, r3
 8000bf4:	fa1f fa8e 	uxth.w	sl, lr
 8000bf8:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000bfc:	fb09 f40a 	mul.w	r4, r9, sl
 8000c00:	429c      	cmp	r4, r3
 8000c02:	fa02 f207 	lsl.w	r2, r2, r7
 8000c06:	fa00 f107 	lsl.w	r1, r0, r7
 8000c0a:	d90b      	bls.n	8000c24 <__udivmoddi4+0x1b0>
 8000c0c:	eb1e 0303 	adds.w	r3, lr, r3
 8000c10:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000c14:	f080 8087 	bcs.w	8000d26 <__udivmoddi4+0x2b2>
 8000c18:	429c      	cmp	r4, r3
 8000c1a:	f240 8084 	bls.w	8000d26 <__udivmoddi4+0x2b2>
 8000c1e:	f1a9 0902 	sub.w	r9, r9, #2
 8000c22:	4473      	add	r3, lr
 8000c24:	1b1b      	subs	r3, r3, r4
 8000c26:	b2ad      	uxth	r5, r5
 8000c28:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c2c:	fb08 3310 	mls	r3, r8, r0, r3
 8000c30:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000c34:	fb00 fa0a 	mul.w	sl, r0, sl
 8000c38:	45a2      	cmp	sl, r4
 8000c3a:	d908      	bls.n	8000c4e <__udivmoddi4+0x1da>
 8000c3c:	eb1e 0404 	adds.w	r4, lr, r4
 8000c40:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c44:	d26b      	bcs.n	8000d1e <__udivmoddi4+0x2aa>
 8000c46:	45a2      	cmp	sl, r4
 8000c48:	d969      	bls.n	8000d1e <__udivmoddi4+0x2aa>
 8000c4a:	3802      	subs	r0, #2
 8000c4c:	4474      	add	r4, lr
 8000c4e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c52:	fba0 8902 	umull	r8, r9, r0, r2
 8000c56:	eba4 040a 	sub.w	r4, r4, sl
 8000c5a:	454c      	cmp	r4, r9
 8000c5c:	46c2      	mov	sl, r8
 8000c5e:	464b      	mov	r3, r9
 8000c60:	d354      	bcc.n	8000d0c <__udivmoddi4+0x298>
 8000c62:	d051      	beq.n	8000d08 <__udivmoddi4+0x294>
 8000c64:	2e00      	cmp	r6, #0
 8000c66:	d069      	beq.n	8000d3c <__udivmoddi4+0x2c8>
 8000c68:	ebb1 050a 	subs.w	r5, r1, sl
 8000c6c:	eb64 0403 	sbc.w	r4, r4, r3
 8000c70:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000c74:	40fd      	lsrs	r5, r7
 8000c76:	40fc      	lsrs	r4, r7
 8000c78:	ea4c 0505 	orr.w	r5, ip, r5
 8000c7c:	e9c6 5400 	strd	r5, r4, [r6]
 8000c80:	2700      	movs	r7, #0
 8000c82:	e747      	b.n	8000b14 <__udivmoddi4+0xa0>
 8000c84:	f1c2 0320 	rsb	r3, r2, #32
 8000c88:	fa20 f703 	lsr.w	r7, r0, r3
 8000c8c:	4095      	lsls	r5, r2
 8000c8e:	fa01 f002 	lsl.w	r0, r1, r2
 8000c92:	fa21 f303 	lsr.w	r3, r1, r3
 8000c96:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c9a:	4338      	orrs	r0, r7
 8000c9c:	0c01      	lsrs	r1, r0, #16
 8000c9e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ca2:	fa1f f885 	uxth.w	r8, r5
 8000ca6:	fb0e 3317 	mls	r3, lr, r7, r3
 8000caa:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cae:	fb07 f308 	mul.w	r3, r7, r8
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	fa04 f402 	lsl.w	r4, r4, r2
 8000cb8:	d907      	bls.n	8000cca <__udivmoddi4+0x256>
 8000cba:	1869      	adds	r1, r5, r1
 8000cbc:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000cc0:	d22f      	bcs.n	8000d22 <__udivmoddi4+0x2ae>
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d92d      	bls.n	8000d22 <__udivmoddi4+0x2ae>
 8000cc6:	3f02      	subs	r7, #2
 8000cc8:	4429      	add	r1, r5
 8000cca:	1acb      	subs	r3, r1, r3
 8000ccc:	b281      	uxth	r1, r0
 8000cce:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cd2:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cd6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cda:	fb00 f308 	mul.w	r3, r0, r8
 8000cde:	428b      	cmp	r3, r1
 8000ce0:	d907      	bls.n	8000cf2 <__udivmoddi4+0x27e>
 8000ce2:	1869      	adds	r1, r5, r1
 8000ce4:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000ce8:	d217      	bcs.n	8000d1a <__udivmoddi4+0x2a6>
 8000cea:	428b      	cmp	r3, r1
 8000cec:	d915      	bls.n	8000d1a <__udivmoddi4+0x2a6>
 8000cee:	3802      	subs	r0, #2
 8000cf0:	4429      	add	r1, r5
 8000cf2:	1ac9      	subs	r1, r1, r3
 8000cf4:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000cf8:	e73b      	b.n	8000b72 <__udivmoddi4+0xfe>
 8000cfa:	4637      	mov	r7, r6
 8000cfc:	4630      	mov	r0, r6
 8000cfe:	e709      	b.n	8000b14 <__udivmoddi4+0xa0>
 8000d00:	4607      	mov	r7, r0
 8000d02:	e6e7      	b.n	8000ad4 <__udivmoddi4+0x60>
 8000d04:	4618      	mov	r0, r3
 8000d06:	e6fb      	b.n	8000b00 <__udivmoddi4+0x8c>
 8000d08:	4541      	cmp	r1, r8
 8000d0a:	d2ab      	bcs.n	8000c64 <__udivmoddi4+0x1f0>
 8000d0c:	ebb8 0a02 	subs.w	sl, r8, r2
 8000d10:	eb69 020e 	sbc.w	r2, r9, lr
 8000d14:	3801      	subs	r0, #1
 8000d16:	4613      	mov	r3, r2
 8000d18:	e7a4      	b.n	8000c64 <__udivmoddi4+0x1f0>
 8000d1a:	4660      	mov	r0, ip
 8000d1c:	e7e9      	b.n	8000cf2 <__udivmoddi4+0x27e>
 8000d1e:	4618      	mov	r0, r3
 8000d20:	e795      	b.n	8000c4e <__udivmoddi4+0x1da>
 8000d22:	4667      	mov	r7, ip
 8000d24:	e7d1      	b.n	8000cca <__udivmoddi4+0x256>
 8000d26:	4681      	mov	r9, r0
 8000d28:	e77c      	b.n	8000c24 <__udivmoddi4+0x1b0>
 8000d2a:	3802      	subs	r0, #2
 8000d2c:	442c      	add	r4, r5
 8000d2e:	e747      	b.n	8000bc0 <__udivmoddi4+0x14c>
 8000d30:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d34:	442b      	add	r3, r5
 8000d36:	e72f      	b.n	8000b98 <__udivmoddi4+0x124>
 8000d38:	4638      	mov	r0, r7
 8000d3a:	e708      	b.n	8000b4e <__udivmoddi4+0xda>
 8000d3c:	4637      	mov	r7, r6
 8000d3e:	e6e9      	b.n	8000b14 <__udivmoddi4+0xa0>

08000d40 <__aeabi_idiv0>:
 8000d40:	4770      	bx	lr
 8000d42:	bf00      	nop

08000d44 <bme280_init>:
 *	@retval -1 -> Error
 *
 *
*/
BME280_RETURN_FUNCTION_TYPE bme280_init(struct bme280_t *bme280)
{
 8000d44:	b590      	push	{r4, r7, lr}
 8000d46:	b085      	sub	sp, #20
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
	/* used to return the communication result*/
	BME280_RETURN_FUNCTION_TYPE com_rslt = ERROR;
 8000d4c:	23ff      	movs	r3, #255	; 0xff
 8000d4e:	73fb      	strb	r3, [r7, #15]
	u8 v_data_u8 = BME280_INIT_VALUE;
 8000d50:	2300      	movs	r3, #0
 8000d52:	737b      	strb	r3, [r7, #13]
	u8 v_chip_id_read_count = BME280_CHIP_ID_READ_COUNT;
 8000d54:	2305      	movs	r3, #5
 8000d56:	73bb      	strb	r3, [r7, #14]

	/* assign BME280 ptr */
	p_bme280 = bme280;
 8000d58:	4a20      	ldr	r2, [pc, #128]	; (8000ddc <bme280_init+0x98>)
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	6013      	str	r3, [r2, #0]

	while (v_chip_id_read_count > 0) {
 8000d5e:	e018      	b.n	8000d92 <bme280_init+0x4e>

		/* read Chip Id */
		com_rslt = p_bme280->BME280_BUS_READ_FUNC(p_bme280->dev_addr,
 8000d60:	4b1e      	ldr	r3, [pc, #120]	; (8000ddc <bme280_init+0x98>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8000d66:	4b1d      	ldr	r3, [pc, #116]	; (8000ddc <bme280_init+0x98>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	f893 0029 	ldrb.w	r0, [r3, #41]	; 0x29
 8000d6e:	f107 020d 	add.w	r2, r7, #13
 8000d72:	2301      	movs	r3, #1
 8000d74:	21d0      	movs	r1, #208	; 0xd0
 8000d76:	47a0      	blx	r4
 8000d78:	4603      	mov	r3, r0
 8000d7a:	73fb      	strb	r3, [r7, #15]
				BME280_CHIP_ID_REG, &v_data_u8,
				BME280_GEN_READ_WRITE_DATA_LENGTH);
		/* Check for the correct chip id */
		if (v_data_u8 == BME280_CHIP_ID)
 8000d7c:	7b7b      	ldrb	r3, [r7, #13]
 8000d7e:	2b60      	cmp	r3, #96	; 0x60
 8000d80:	d00b      	beq.n	8000d9a <bme280_init+0x56>
			break;
		v_chip_id_read_count--;
 8000d82:	7bbb      	ldrb	r3, [r7, #14]
 8000d84:	3b01      	subs	r3, #1
 8000d86:	73bb      	strb	r3, [r7, #14]
		/* Delay added concerning the low speed of power up system to
		facilitate the proper reading of the chip ID */
		p_bme280->delay_msec(BME280_REGISTER_READ_DELAY);
 8000d88:	4b14      	ldr	r3, [pc, #80]	; (8000ddc <bme280_init+0x98>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d8e:	2001      	movs	r0, #1
 8000d90:	4798      	blx	r3
	while (v_chip_id_read_count > 0) {
 8000d92:	7bbb      	ldrb	r3, [r7, #14]
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d1e3      	bne.n	8000d60 <bme280_init+0x1c>
 8000d98:	e000      	b.n	8000d9c <bme280_init+0x58>
			break;
 8000d9a:	bf00      	nop
	}
	/*assign chip ID to the global structure*/
	p_bme280->chip_id = v_data_u8;
 8000d9c:	4b0f      	ldr	r3, [pc, #60]	; (8000ddc <bme280_init+0x98>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	7b7a      	ldrb	r2, [r7, #13]
 8000da2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	/*com_rslt status of chip ID read*/
	com_rslt = (v_chip_id_read_count == BME280_INIT_VALUE) ?
 8000da6:	7bbb      	ldrb	r3, [r7, #14]
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d102      	bne.n	8000db2 <bme280_init+0x6e>
 8000dac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000db0:	e000      	b.n	8000db4 <bme280_init+0x70>
 8000db2:	2300      	movs	r3, #0
 8000db4:	73fb      	strb	r3, [r7, #15]
			BME280_CHIP_ID_READ_FAIL : BME280_CHIP_ID_READ_SUCCESS;

	if (com_rslt == BME280_CHIP_ID_READ_SUCCESS) {
 8000db6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d107      	bne.n	8000dce <bme280_init+0x8a>
		/* readout bme280 calibparam structure */
		com_rslt += bme280_get_calib_param();
 8000dbe:	f000 fa95 	bl	80012ec <bme280_get_calib_param>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	b2da      	uxtb	r2, r3
 8000dc6:	7bfb      	ldrb	r3, [r7, #15]
 8000dc8:	4413      	add	r3, r2
 8000dca:	b2db      	uxtb	r3, r3
 8000dcc:	73fb      	strb	r3, [r7, #15]
	}
	return com_rslt;
 8000dce:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	3714      	adds	r7, #20
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd90      	pop	{r4, r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	20000028 	.word	0x20000028

08000de0 <bme280_read_uncomp_temperature>:
 *
 *
*/
BME280_RETURN_FUNCTION_TYPE bme280_read_uncomp_temperature(
s32 *v_uncomp_temperature_s32)
{
 8000de0:	b590      	push	{r4, r7, lr}
 8000de2:	b085      	sub	sp, #20
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
	/* used to return the communication result*/
	BME280_RETURN_FUNCTION_TYPE com_rslt = ERROR;
 8000de8:	23ff      	movs	r3, #255	; 0xff
 8000dea:	73fb      	strb	r3, [r7, #15]
	/* Array holding the MSB and LSb value
	a_data_u8r[0] - Temperature MSB
	a_data_u8r[1] - Temperature LSB
	a_data_u8r[2] - Temperature XLSB
	*/
	u8 a_data_u8r[BME280_TEMPERATURE_DATA_SIZE] = {
 8000dec:	2300      	movs	r3, #0
 8000dee:	733b      	strb	r3, [r7, #12]
 8000df0:	2300      	movs	r3, #0
 8000df2:	737b      	strb	r3, [r7, #13]
 8000df4:	2300      	movs	r3, #0
 8000df6:	73bb      	strb	r3, [r7, #14]
	BME280_INIT_VALUE, BME280_INIT_VALUE, BME280_INIT_VALUE};
	/* check the p_bme280 structure pointer as NULL*/
	if (p_bme280 == BME280_NULL) {
 8000df8:	4b13      	ldr	r3, [pc, #76]	; (8000e48 <bme280_read_uncomp_temperature+0x68>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d102      	bne.n	8000e06 <bme280_read_uncomp_temperature+0x26>
		return E_BME280_NULL_PTR;
 8000e00:	f06f 037e 	mvn.w	r3, #126	; 0x7e
 8000e04:	e01b      	b.n	8000e3e <bme280_read_uncomp_temperature+0x5e>
		} else {
			com_rslt = p_bme280->BME280_BUS_READ_FUNC(
 8000e06:	4b10      	ldr	r3, [pc, #64]	; (8000e48 <bme280_read_uncomp_temperature+0x68>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8000e0c:	4b0e      	ldr	r3, [pc, #56]	; (8000e48 <bme280_read_uncomp_temperature+0x68>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	f893 0029 	ldrb.w	r0, [r3, #41]	; 0x29
 8000e14:	f107 020c 	add.w	r2, r7, #12
 8000e18:	2303      	movs	r3, #3
 8000e1a:	21fa      	movs	r1, #250	; 0xfa
 8000e1c:	47a0      	blx	r4
 8000e1e:	4603      	mov	r3, r0
 8000e20:	73fb      	strb	r3, [r7, #15]
			p_bme280->dev_addr,
			BME280_TEMPERATURE_MSB_REG,
			a_data_u8r,
			BME280_TEMPERATURE_DATA_LENGTH);
			*v_uncomp_temperature_s32 = (s32)(((
			(u32) (a_data_u8r[BME280_TEMPERATURE_MSB_DATA]))
 8000e22:	7b3b      	ldrb	r3, [r7, #12]
			<< BME280_SHIFT_BIT_POSITION_BY_12_BITS) |
 8000e24:	031a      	lsls	r2, r3, #12
			(((u32)(a_data_u8r[BME280_TEMPERATURE_LSB_DATA]))
 8000e26:	7b7b      	ldrb	r3, [r7, #13]
			<< BME280_SHIFT_BIT_POSITION_BY_04_BITS)
 8000e28:	011b      	lsls	r3, r3, #4
			<< BME280_SHIFT_BIT_POSITION_BY_12_BITS) |
 8000e2a:	4313      	orrs	r3, r2
			| ((u32)a_data_u8r[BME280_TEMPERATURE_XLSB_DATA] >>
 8000e2c:	7bba      	ldrb	r2, [r7, #14]
 8000e2e:	0912      	lsrs	r2, r2, #4
 8000e30:	b2d2      	uxtb	r2, r2
 8000e32:	4313      	orrs	r3, r2
			*v_uncomp_temperature_s32 = (s32)(((
 8000e34:	461a      	mov	r2, r3
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	601a      	str	r2, [r3, #0]
			BME280_SHIFT_BIT_POSITION_BY_04_BITS));
		}
	return com_rslt;
 8000e3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000e3e:	4618      	mov	r0, r3
 8000e40:	3714      	adds	r7, #20
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd90      	pop	{r4, r7, pc}
 8000e46:	bf00      	nop
 8000e48:	20000028 	.word	0x20000028

08000e4c <bme280_compensate_temperature_int32>:
 *
 *  @return Returns the actual temperature
 *
*/
s32 bme280_compensate_temperature_int32(s32 v_uncomp_temperature_s32)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b087      	sub	sp, #28
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
	s32 v_x1_u32r = BME280_INIT_VALUE;
 8000e54:	2300      	movs	r3, #0
 8000e56:	617b      	str	r3, [r7, #20]
	s32 v_x2_u32r = BME280_INIT_VALUE;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	613b      	str	r3, [r7, #16]
	s32 temperature = BME280_INIT_VALUE;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	60fb      	str	r3, [r7, #12]

	/* calculate x1*/
	v_x1_u32r  =
	((((v_uncomp_temperature_s32
	>> BME280_SHIFT_BIT_POSITION_BY_03_BITS) -
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	10da      	asrs	r2, r3, #3
	((s32)p_bme280->cal_param.dig_T1
 8000e64:	4b1c      	ldr	r3, [pc, #112]	; (8000ed8 <bme280_compensate_temperature_int32+0x8c>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	881b      	ldrh	r3, [r3, #0]
	<< BME280_SHIFT_BIT_POSITION_BY_01_BIT))) *
 8000e6a:	005b      	lsls	r3, r3, #1
	>> BME280_SHIFT_BIT_POSITION_BY_03_BITS) -
 8000e6c:	1ad3      	subs	r3, r2, r3
	((s32)p_bme280->cal_param.dig_T2)) >>
 8000e6e:	4a1a      	ldr	r2, [pc, #104]	; (8000ed8 <bme280_compensate_temperature_int32+0x8c>)
 8000e70:	6812      	ldr	r2, [r2, #0]
 8000e72:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
	<< BME280_SHIFT_BIT_POSITION_BY_01_BIT))) *
 8000e76:	fb02 f303 	mul.w	r3, r2, r3
	v_x1_u32r  =
 8000e7a:	12db      	asrs	r3, r3, #11
 8000e7c:	617b      	str	r3, [r7, #20]
	BME280_SHIFT_BIT_POSITION_BY_11_BITS;
	/* calculate x2*/
	v_x2_u32r  = (((((v_uncomp_temperature_s32
	>> BME280_SHIFT_BIT_POSITION_BY_04_BITS) -
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	111b      	asrs	r3, r3, #4
	((s32)p_bme280->cal_param.dig_T1))
 8000e82:	4a15      	ldr	r2, [pc, #84]	; (8000ed8 <bme280_compensate_temperature_int32+0x8c>)
 8000e84:	6812      	ldr	r2, [r2, #0]
 8000e86:	8812      	ldrh	r2, [r2, #0]
	>> BME280_SHIFT_BIT_POSITION_BY_04_BITS) -
 8000e88:	1a9b      	subs	r3, r3, r2
	* ((v_uncomp_temperature_s32 >> BME280_SHIFT_BIT_POSITION_BY_04_BITS) -
 8000e8a:	687a      	ldr	r2, [r7, #4]
 8000e8c:	1112      	asrs	r2, r2, #4
	((s32)p_bme280->cal_param.dig_T1)))
 8000e8e:	4912      	ldr	r1, [pc, #72]	; (8000ed8 <bme280_compensate_temperature_int32+0x8c>)
 8000e90:	6809      	ldr	r1, [r1, #0]
 8000e92:	8809      	ldrh	r1, [r1, #0]
	* ((v_uncomp_temperature_s32 >> BME280_SHIFT_BIT_POSITION_BY_04_BITS) -
 8000e94:	1a52      	subs	r2, r2, r1
 8000e96:	fb02 f303 	mul.w	r3, r2, r3
	>> BME280_SHIFT_BIT_POSITION_BY_12_BITS) *
 8000e9a:	131b      	asrs	r3, r3, #12
	((s32)p_bme280->cal_param.dig_T3))
 8000e9c:	4a0e      	ldr	r2, [pc, #56]	; (8000ed8 <bme280_compensate_temperature_int32+0x8c>)
 8000e9e:	6812      	ldr	r2, [r2, #0]
 8000ea0:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
	>> BME280_SHIFT_BIT_POSITION_BY_12_BITS) *
 8000ea4:	fb02 f303 	mul.w	r3, r2, r3
	v_x2_u32r  = (((((v_uncomp_temperature_s32
 8000ea8:	139b      	asrs	r3, r3, #14
 8000eaa:	613b      	str	r3, [r7, #16]
	>> BME280_SHIFT_BIT_POSITION_BY_14_BITS;
	/* calculate t_fine*/
	p_bme280->cal_param.t_fine = v_x1_u32r + v_x2_u32r;
 8000eac:	4b0a      	ldr	r3, [pc, #40]	; (8000ed8 <bme280_compensate_temperature_int32+0x8c>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	6979      	ldr	r1, [r7, #20]
 8000eb2:	693a      	ldr	r2, [r7, #16]
 8000eb4:	440a      	add	r2, r1
 8000eb6:	625a      	str	r2, [r3, #36]	; 0x24
	/* calculate temperature*/
	temperature  = (p_bme280->cal_param.t_fine * 5 + 128)
 8000eb8:	4b07      	ldr	r3, [pc, #28]	; (8000ed8 <bme280_compensate_temperature_int32+0x8c>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000ebe:	4613      	mov	r3, r2
 8000ec0:	009b      	lsls	r3, r3, #2
 8000ec2:	4413      	add	r3, r2
 8000ec4:	3380      	adds	r3, #128	; 0x80
 8000ec6:	121b      	asrs	r3, r3, #8
 8000ec8:	60fb      	str	r3, [r7, #12]
	>> BME280_SHIFT_BIT_POSITION_BY_08_BITS;
	return temperature;
 8000eca:	68fb      	ldr	r3, [r7, #12]
}
 8000ecc:	4618      	mov	r0, r3
 8000ece:	371c      	adds	r7, #28
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed6:	4770      	bx	lr
 8000ed8:	20000028 	.word	0x20000028

08000edc <bme280_read_uncomp_pressure>:
 *
 *
*/
BME280_RETURN_FUNCTION_TYPE bme280_read_uncomp_pressure(
s32 *v_uncomp_pressure_s32)
{
 8000edc:	b590      	push	{r4, r7, lr}
 8000ede:	b085      	sub	sp, #20
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
	/* used to return the communication result*/
	BME280_RETURN_FUNCTION_TYPE com_rslt = ERROR;
 8000ee4:	23ff      	movs	r3, #255	; 0xff
 8000ee6:	73fb      	strb	r3, [r7, #15]
	/* Array holding the MSB and LSb value
	a_data_u8[0] - Pressure MSB
	a_data_u8[1] - Pressure LSB
	a_data_u8[2] - Pressure XLSB
	*/
	u8 a_data_u8[BME280_PRESSURE_DATA_SIZE] = {
 8000ee8:	2300      	movs	r3, #0
 8000eea:	733b      	strb	r3, [r7, #12]
 8000eec:	2300      	movs	r3, #0
 8000eee:	737b      	strb	r3, [r7, #13]
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	73bb      	strb	r3, [r7, #14]
	BME280_INIT_VALUE, BME280_INIT_VALUE, BME280_INIT_VALUE};
	/* check the p_bme280 structure pointer as NULL*/
	if (p_bme280 == BME280_NULL) {
 8000ef4:	4b13      	ldr	r3, [pc, #76]	; (8000f44 <bme280_read_uncomp_pressure+0x68>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d102      	bne.n	8000f02 <bme280_read_uncomp_pressure+0x26>
		return E_BME280_NULL_PTR;
 8000efc:	f06f 037e 	mvn.w	r3, #126	; 0x7e
 8000f00:	e01b      	b.n	8000f3a <bme280_read_uncomp_pressure+0x5e>
		} else {
			com_rslt = p_bme280->BME280_BUS_READ_FUNC(
 8000f02:	4b10      	ldr	r3, [pc, #64]	; (8000f44 <bme280_read_uncomp_pressure+0x68>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8000f08:	4b0e      	ldr	r3, [pc, #56]	; (8000f44 <bme280_read_uncomp_pressure+0x68>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	f893 0029 	ldrb.w	r0, [r3, #41]	; 0x29
 8000f10:	f107 020c 	add.w	r2, r7, #12
 8000f14:	2303      	movs	r3, #3
 8000f16:	21f7      	movs	r1, #247	; 0xf7
 8000f18:	47a0      	blx	r4
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	73fb      	strb	r3, [r7, #15]
			p_bme280->dev_addr,
			BME280_PRESSURE_MSB_REG,
			a_data_u8, BME280_PRESSURE_DATA_LENGTH);
			*v_uncomp_pressure_s32 = (s32)((
			((u32)(a_data_u8[BME280_PRESSURE_MSB_DATA]))
 8000f1e:	7b3b      	ldrb	r3, [r7, #12]
			<< BME280_SHIFT_BIT_POSITION_BY_12_BITS) |
 8000f20:	031a      	lsls	r2, r3, #12
			(((u32)(a_data_u8[BME280_PRESSURE_LSB_DATA]))
 8000f22:	7b7b      	ldrb	r3, [r7, #13]
			<< BME280_SHIFT_BIT_POSITION_BY_04_BITS) |
 8000f24:	011b      	lsls	r3, r3, #4
			<< BME280_SHIFT_BIT_POSITION_BY_12_BITS) |
 8000f26:	4313      	orrs	r3, r2
			((u32)a_data_u8[BME280_PRESSURE_XLSB_DATA] >>
 8000f28:	7bba      	ldrb	r2, [r7, #14]
 8000f2a:	0912      	lsrs	r2, r2, #4
 8000f2c:	b2d2      	uxtb	r2, r2
			<< BME280_SHIFT_BIT_POSITION_BY_04_BITS) |
 8000f2e:	4313      	orrs	r3, r2
			*v_uncomp_pressure_s32 = (s32)((
 8000f30:	461a      	mov	r2, r3
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	601a      	str	r2, [r3, #0]
			BME280_SHIFT_BIT_POSITION_BY_04_BITS));
		}
	return com_rslt;
 8000f36:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	3714      	adds	r7, #20
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd90      	pop	{r4, r7, pc}
 8000f42:	bf00      	nop
 8000f44:	20000028 	.word	0x20000028

08000f48 <bme280_compensate_pressure_int32>:
 *
 *  @return Return the actual pressure output as u32
 *
*/
u32 bme280_compensate_pressure_int32(s32 v_uncomp_pressure_s32)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b087      	sub	sp, #28
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
	s32 v_x1_u32 = BME280_INIT_VALUE;
 8000f50:	2300      	movs	r3, #0
 8000f52:	613b      	str	r3, [r7, #16]
	s32 v_x2_u32 = BME280_INIT_VALUE;
 8000f54:	2300      	movs	r3, #0
 8000f56:	60fb      	str	r3, [r7, #12]
	u32 v_pressure_u32 = BME280_INIT_VALUE;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	617b      	str	r3, [r7, #20]

	/* calculate x1*/
	v_x1_u32 = (((s32)p_bme280->cal_param.t_fine)
 8000f5c:	4b52      	ldr	r3, [pc, #328]	; (80010a8 <bme280_compensate_pressure_int32+0x160>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	>> BME280_SHIFT_BIT_POSITION_BY_01_BIT) - (s32)64000;
 8000f62:	105b      	asrs	r3, r3, #1
	v_x1_u32 = (((s32)p_bme280->cal_param.t_fine)
 8000f64:	f5a3 437a 	sub.w	r3, r3, #64000	; 0xfa00
 8000f68:	613b      	str	r3, [r7, #16]
	/* calculate x2*/
	v_x2_u32 = (((v_x1_u32 >> BME280_SHIFT_BIT_POSITION_BY_02_BITS)
 8000f6a:	693b      	ldr	r3, [r7, #16]
 8000f6c:	109b      	asrs	r3, r3, #2
	* (v_x1_u32 >> BME280_SHIFT_BIT_POSITION_BY_02_BITS)
 8000f6e:	693a      	ldr	r2, [r7, #16]
 8000f70:	1092      	asrs	r2, r2, #2
 8000f72:	fb02 f303 	mul.w	r3, r2, r3
	) >> BME280_SHIFT_BIT_POSITION_BY_11_BITS)
 8000f76:	12db      	asrs	r3, r3, #11
	* ((s32)p_bme280->cal_param.dig_P6);
 8000f78:	4a4b      	ldr	r2, [pc, #300]	; (80010a8 <bme280_compensate_pressure_int32+0x160>)
 8000f7a:	6812      	ldr	r2, [r2, #0]
 8000f7c:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
	v_x2_u32 = (((v_x1_u32 >> BME280_SHIFT_BIT_POSITION_BY_02_BITS)
 8000f80:	fb02 f303 	mul.w	r3, r2, r3
 8000f84:	60fb      	str	r3, [r7, #12]
	/* calculate x2*/
	v_x2_u32 = v_x2_u32 + ((v_x1_u32 *
	((s32)p_bme280->cal_param.dig_P5))
 8000f86:	4b48      	ldr	r3, [pc, #288]	; (80010a8 <bme280_compensate_pressure_int32+0x160>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000f8e:	461a      	mov	r2, r3
	v_x2_u32 = v_x2_u32 + ((v_x1_u32 *
 8000f90:	693b      	ldr	r3, [r7, #16]
 8000f92:	fb03 f302 	mul.w	r3, r3, r2
	<< BME280_SHIFT_BIT_POSITION_BY_01_BIT);
 8000f96:	005b      	lsls	r3, r3, #1
	v_x2_u32 = v_x2_u32 + ((v_x1_u32 *
 8000f98:	68fa      	ldr	r2, [r7, #12]
 8000f9a:	4413      	add	r3, r2
 8000f9c:	60fb      	str	r3, [r7, #12]
	/* calculate x2*/
	v_x2_u32 = (v_x2_u32 >> BME280_SHIFT_BIT_POSITION_BY_02_BITS) +
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	109a      	asrs	r2, r3, #2
	(((s32)p_bme280->cal_param.dig_P4)
 8000fa2:	4b41      	ldr	r3, [pc, #260]	; (80010a8 <bme280_compensate_pressure_int32+0x160>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
	<< BME280_SHIFT_BIT_POSITION_BY_16_BITS);
 8000faa:	041b      	lsls	r3, r3, #16
	v_x2_u32 = (v_x2_u32 >> BME280_SHIFT_BIT_POSITION_BY_02_BITS) +
 8000fac:	4413      	add	r3, r2
 8000fae:	60fb      	str	r3, [r7, #12]
	/* calculate x1*/
	v_x1_u32 = (((p_bme280->cal_param.dig_P3 *
 8000fb0:	4b3d      	ldr	r3, [pc, #244]	; (80010a8 <bme280_compensate_pressure_int32+0x160>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000fb8:	4619      	mov	r1, r3
	(((v_x1_u32 >> BME280_SHIFT_BIT_POSITION_BY_02_BITS) *
 8000fba:	693b      	ldr	r3, [r7, #16]
 8000fbc:	109b      	asrs	r3, r3, #2
	(v_x1_u32 >> BME280_SHIFT_BIT_POSITION_BY_02_BITS))
 8000fbe:	693a      	ldr	r2, [r7, #16]
 8000fc0:	1092      	asrs	r2, r2, #2
	(((v_x1_u32 >> BME280_SHIFT_BIT_POSITION_BY_02_BITS) *
 8000fc2:	fb02 f303 	mul.w	r3, r2, r3
	>> BME280_SHIFT_BIT_POSITION_BY_13_BITS))
 8000fc6:	135b      	asrs	r3, r3, #13
	v_x1_u32 = (((p_bme280->cal_param.dig_P3 *
 8000fc8:	fb03 f301 	mul.w	r3, r3, r1
	>> BME280_SHIFT_BIT_POSITION_BY_03_BITS) +
 8000fcc:	10da      	asrs	r2, r3, #3
	((((s32)p_bme280->cal_param.dig_P2) *
 8000fce:	4b36      	ldr	r3, [pc, #216]	; (80010a8 <bme280_compensate_pressure_int32+0x160>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	693b      	ldr	r3, [r7, #16]
 8000fda:	fb03 f301 	mul.w	r3, r3, r1
	v_x1_u32) >> BME280_SHIFT_BIT_POSITION_BY_01_BIT))
 8000fde:	105b      	asrs	r3, r3, #1
	>> BME280_SHIFT_BIT_POSITION_BY_03_BITS) +
 8000fe0:	4413      	add	r3, r2
	v_x1_u32 = (((p_bme280->cal_param.dig_P3 *
 8000fe2:	149b      	asrs	r3, r3, #18
 8000fe4:	613b      	str	r3, [r7, #16]
	>> BME280_SHIFT_BIT_POSITION_BY_18_BITS;
	/* calculate x1*/
	v_x1_u32 = ((((32768 + v_x1_u32)) *
 8000fe6:	693b      	ldr	r3, [r7, #16]
 8000fe8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
	((s32)p_bme280->cal_param.dig_P1))
 8000fec:	4a2e      	ldr	r2, [pc, #184]	; (80010a8 <bme280_compensate_pressure_int32+0x160>)
 8000fee:	6812      	ldr	r2, [r2, #0]
 8000ff0:	88d2      	ldrh	r2, [r2, #6]
	v_x1_u32 = ((((32768 + v_x1_u32)) *
 8000ff2:	fb02 f303 	mul.w	r3, r2, r3
 8000ff6:	13db      	asrs	r3, r3, #15
 8000ff8:	613b      	str	r3, [r7, #16]
	>> BME280_SHIFT_BIT_POSITION_BY_15_BITS);
	/* calculate pressure*/
	v_pressure_u32 =
	(((u32)(((s32)1048576) - v_uncomp_pressure_s32)
	- (v_x2_u32 >> BME280_SHIFT_BIT_POSITION_BY_12_BITS))) * 3125;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	425b      	negs	r3, r3
 8000ffe:	68fa      	ldr	r2, [r7, #12]
 8001000:	1312      	asrs	r2, r2, #12
 8001002:	1a9b      	subs	r3, r3, r2
 8001004:	f640 4235 	movw	r2, #3125	; 0xc35
 8001008:	fb02 f303 	mul.w	r3, r2, r3
	v_pressure_u32 =
 800100c:	f103 4343 	add.w	r3, r3, #3271557120	; 0xc3000000
 8001010:	f503 03a0 	add.w	r3, r3, #5242880	; 0x500000
 8001014:	617b      	str	r3, [r7, #20]
	if (v_pressure_u32
	< 0x80000000)
 8001016:	697b      	ldr	r3, [r7, #20]
	if (v_pressure_u32
 8001018:	2b00      	cmp	r3, #0
 800101a:	db0b      	blt.n	8001034 <bme280_compensate_pressure_int32+0xec>
		/* Avoid exception caused by division by zero */
		if (v_x1_u32 != BME280_INIT_VALUE)
 800101c:	693b      	ldr	r3, [r7, #16]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d006      	beq.n	8001030 <bme280_compensate_pressure_int32+0xe8>
			v_pressure_u32 =
			(v_pressure_u32
			<< BME280_SHIFT_BIT_POSITION_BY_01_BIT) /
 8001022:	697b      	ldr	r3, [r7, #20]
 8001024:	005a      	lsls	r2, r3, #1
			((u32)v_x1_u32);
 8001026:	693b      	ldr	r3, [r7, #16]
			v_pressure_u32 =
 8001028:	fbb2 f3f3 	udiv	r3, r2, r3
 800102c:	617b      	str	r3, [r7, #20]
 800102e:	e00d      	b.n	800104c <bme280_compensate_pressure_int32+0x104>
		else
			return BME280_INVALID_DATA;
 8001030:	2300      	movs	r3, #0
 8001032:	e033      	b.n	800109c <bme280_compensate_pressure_int32+0x154>
	else
		/* Avoid exception caused by division by zero */
		if (v_x1_u32 != BME280_INIT_VALUE)
 8001034:	693b      	ldr	r3, [r7, #16]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d006      	beq.n	8001048 <bme280_compensate_pressure_int32+0x100>
			v_pressure_u32 = (v_pressure_u32
			/ (u32)v_x1_u32) * 2;
 800103a:	693b      	ldr	r3, [r7, #16]
 800103c:	697a      	ldr	r2, [r7, #20]
 800103e:	fbb2 f3f3 	udiv	r3, r2, r3
			v_pressure_u32 = (v_pressure_u32
 8001042:	005b      	lsls	r3, r3, #1
 8001044:	617b      	str	r3, [r7, #20]
 8001046:	e001      	b.n	800104c <bme280_compensate_pressure_int32+0x104>
		else
			return BME280_INVALID_DATA;
 8001048:	2300      	movs	r3, #0
 800104a:	e027      	b.n	800109c <bme280_compensate_pressure_int32+0x154>

		v_x1_u32 = (((s32)p_bme280->cal_param.dig_P9) *
 800104c:	4b16      	ldr	r3, [pc, #88]	; (80010a8 <bme280_compensate_pressure_int32+0x160>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001054:	4619      	mov	r1, r3
		((s32)(((v_pressure_u32 >> BME280_SHIFT_BIT_POSITION_BY_03_BITS)
 8001056:	697b      	ldr	r3, [r7, #20]
 8001058:	08db      	lsrs	r3, r3, #3
		* (v_pressure_u32 >> BME280_SHIFT_BIT_POSITION_BY_03_BITS))
 800105a:	697a      	ldr	r2, [r7, #20]
 800105c:	08d2      	lsrs	r2, r2, #3
 800105e:	fb02 f303 	mul.w	r3, r2, r3
		>> BME280_SHIFT_BIT_POSITION_BY_13_BITS)))
 8001062:	0b5b      	lsrs	r3, r3, #13
		v_x1_u32 = (((s32)p_bme280->cal_param.dig_P9) *
 8001064:	fb03 f301 	mul.w	r3, r3, r1
 8001068:	131b      	asrs	r3, r3, #12
 800106a:	613b      	str	r3, [r7, #16]
		>> BME280_SHIFT_BIT_POSITION_BY_12_BITS;
		v_x2_u32 = (((s32)(v_pressure_u32
		>> BME280_SHIFT_BIT_POSITION_BY_02_BITS)) *
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	089b      	lsrs	r3, r3, #2
		v_x2_u32 = (((s32)(v_pressure_u32
 8001070:	461a      	mov	r2, r3
		((s32)p_bme280->cal_param.dig_P8))
 8001072:	4b0d      	ldr	r3, [pc, #52]	; (80010a8 <bme280_compensate_pressure_int32+0x160>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
		>> BME280_SHIFT_BIT_POSITION_BY_02_BITS)) *
 800107a:	fb03 f302 	mul.w	r3, r3, r2
		v_x2_u32 = (((s32)(v_pressure_u32
 800107e:	135b      	asrs	r3, r3, #13
 8001080:	60fb      	str	r3, [r7, #12]
		>> BME280_SHIFT_BIT_POSITION_BY_13_BITS;
		v_pressure_u32 = (u32)((s32)v_pressure_u32 +
		((v_x1_u32 + v_x2_u32 + p_bme280->cal_param.dig_P7)
 8001082:	693a      	ldr	r2, [r7, #16]
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	4413      	add	r3, r2
 8001088:	4a07      	ldr	r2, [pc, #28]	; (80010a8 <bme280_compensate_pressure_int32+0x160>)
 800108a:	6812      	ldr	r2, [r2, #0]
 800108c:	f9b2 2012 	ldrsh.w	r2, [r2, #18]
 8001090:	4413      	add	r3, r2
		>> BME280_SHIFT_BIT_POSITION_BY_04_BITS));
 8001092:	111a      	asrs	r2, r3, #4
		v_pressure_u32 = (u32)((s32)v_pressure_u32 +
 8001094:	697b      	ldr	r3, [r7, #20]
 8001096:	4413      	add	r3, r2
 8001098:	617b      	str	r3, [r7, #20]

	return v_pressure_u32;
 800109a:	697b      	ldr	r3, [r7, #20]
}
 800109c:	4618      	mov	r0, r3
 800109e:	371c      	adds	r7, #28
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr
 80010a8:	20000028 	.word	0x20000028

080010ac <bme280_read_uncomp_humidity>:
 *
 *
*/
BME280_RETURN_FUNCTION_TYPE bme280_read_uncomp_humidity(
s32 *v_uncomp_humidity_s32)
{
 80010ac:	b590      	push	{r4, r7, lr}
 80010ae:	b085      	sub	sp, #20
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
	/* used to return the communication result*/
	BME280_RETURN_FUNCTION_TYPE com_rslt = ERROR;
 80010b4:	23ff      	movs	r3, #255	; 0xff
 80010b6:	73fb      	strb	r3, [r7, #15]
	/* Array holding the MSB and LSb value
	a_data_u8[0] - Humidity MSB
	a_data_u8[1] - Humidity LSB
	*/
	u8 a_data_u8[BME280_HUMIDITY_DATA_SIZE] = {
 80010b8:	2300      	movs	r3, #0
 80010ba:	733b      	strb	r3, [r7, #12]
 80010bc:	2300      	movs	r3, #0
 80010be:	737b      	strb	r3, [r7, #13]
	BME280_INIT_VALUE, BME280_INIT_VALUE};
	/* check the p_bme280 structure pointer as NULL*/
	if (p_bme280 == BME280_NULL) {
 80010c0:	4b10      	ldr	r3, [pc, #64]	; (8001104 <bme280_read_uncomp_humidity+0x58>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d102      	bne.n	80010ce <bme280_read_uncomp_humidity+0x22>
		return E_BME280_NULL_PTR;
 80010c8:	f06f 037e 	mvn.w	r3, #126	; 0x7e
 80010cc:	e016      	b.n	80010fc <bme280_read_uncomp_humidity+0x50>
		} else {
			com_rslt = p_bme280->BME280_BUS_READ_FUNC(
 80010ce:	4b0d      	ldr	r3, [pc, #52]	; (8001104 <bme280_read_uncomp_humidity+0x58>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 80010d4:	4b0b      	ldr	r3, [pc, #44]	; (8001104 <bme280_read_uncomp_humidity+0x58>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f893 0029 	ldrb.w	r0, [r3, #41]	; 0x29
 80010dc:	f107 020c 	add.w	r2, r7, #12
 80010e0:	2302      	movs	r3, #2
 80010e2:	21fd      	movs	r1, #253	; 0xfd
 80010e4:	47a0      	blx	r4
 80010e6:	4603      	mov	r3, r0
 80010e8:	73fb      	strb	r3, [r7, #15]
			p_bme280->dev_addr,
			BME280_HUMIDITY_MSB_REG, a_data_u8,
			BME280_HUMIDITY_DATA_LENGTH);
			*v_uncomp_humidity_s32 = (s32)(
			(((u32)(a_data_u8[BME280_HUMIDITY_MSB_DATA]))
 80010ea:	7b3b      	ldrb	r3, [r7, #12]
			<< BME280_SHIFT_BIT_POSITION_BY_08_BITS)|
 80010ec:	021b      	lsls	r3, r3, #8
			((u32)(a_data_u8[BME280_HUMIDITY_LSB_DATA])));
 80010ee:	7b7a      	ldrb	r2, [r7, #13]
			<< BME280_SHIFT_BIT_POSITION_BY_08_BITS)|
 80010f0:	4313      	orrs	r3, r2
			*v_uncomp_humidity_s32 = (s32)(
 80010f2:	461a      	mov	r2, r3
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	601a      	str	r2, [r3, #0]
		}
	return com_rslt;
 80010f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80010fc:	4618      	mov	r0, r3
 80010fe:	3714      	adds	r7, #20
 8001100:	46bd      	mov	sp, r7
 8001102:	bd90      	pop	{r4, r7, pc}
 8001104:	20000028 	.word	0x20000028

08001108 <bme280_compensate_humidity_int32>:
 *
 *  @return Return the actual relative humidity output as u32
 *
*/
u32 bme280_compensate_humidity_int32(s32 v_uncomp_humidity_s32)
{
 8001108:	b480      	push	{r7}
 800110a:	b085      	sub	sp, #20
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
	s32 v_x1_u32 = BME280_INIT_VALUE;
 8001110:	2300      	movs	r3, #0
 8001112:	60fb      	str	r3, [r7, #12]

	/* calculate x1*/
	v_x1_u32 = (p_bme280->cal_param.t_fine - ((s32)76800));
 8001114:	4b30      	ldr	r3, [pc, #192]	; (80011d8 <bme280_compensate_humidity_int32+0xd0>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800111a:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
 800111e:	60fb      	str	r3, [r7, #12]
	/* calculate x1*/
	v_x1_u32 = (((((v_uncomp_humidity_s32
	<< BME280_SHIFT_BIT_POSITION_BY_14_BITS) -
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	039a      	lsls	r2, r3, #14
	(((s32)p_bme280->cal_param.dig_H4)
 8001124:	4b2c      	ldr	r3, [pc, #176]	; (80011d8 <bme280_compensate_humidity_int32+0xd0>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
	<< BME280_SHIFT_BIT_POSITION_BY_20_BITS) -
 800112c:	051b      	lsls	r3, r3, #20
	<< BME280_SHIFT_BIT_POSITION_BY_14_BITS) -
 800112e:	1ad2      	subs	r2, r2, r3
	(((s32)p_bme280->cal_param.dig_H5) * v_x1_u32)) +
 8001130:	4b29      	ldr	r3, [pc, #164]	; (80011d8 <bme280_compensate_humidity_int32+0xd0>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001138:	4619      	mov	r1, r3
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	fb03 f301 	mul.w	r3, r3, r1
	<< BME280_SHIFT_BIT_POSITION_BY_20_BITS) -
 8001140:	1ad3      	subs	r3, r2, r3
	(((s32)p_bme280->cal_param.dig_H5) * v_x1_u32)) +
 8001142:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
	((s32)16384)) >> BME280_SHIFT_BIT_POSITION_BY_15_BITS)
 8001146:	13db      	asrs	r3, r3, #15
	* (((((((v_x1_u32 *
	((s32)p_bme280->cal_param.dig_H6))
 8001148:	4a23      	ldr	r2, [pc, #140]	; (80011d8 <bme280_compensate_humidity_int32+0xd0>)
 800114a:	6812      	ldr	r2, [r2, #0]
 800114c:	f992 2022 	ldrsb.w	r2, [r2, #34]	; 0x22
 8001150:	4611      	mov	r1, r2
	* (((((((v_x1_u32 *
 8001152:	68fa      	ldr	r2, [r7, #12]
 8001154:	fb02 f201 	mul.w	r2, r2, r1
	>> BME280_SHIFT_BIT_POSITION_BY_10_BITS) *
 8001158:	1292      	asrs	r2, r2, #10
	(((v_x1_u32 * ((s32)p_bme280->cal_param.dig_H3))
 800115a:	491f      	ldr	r1, [pc, #124]	; (80011d8 <bme280_compensate_humidity_int32+0xd0>)
 800115c:	6809      	ldr	r1, [r1, #0]
 800115e:	7f09      	ldrb	r1, [r1, #28]
 8001160:	4608      	mov	r0, r1
 8001162:	68f9      	ldr	r1, [r7, #12]
 8001164:	fb01 f100 	mul.w	r1, r1, r0
	>> BME280_SHIFT_BIT_POSITION_BY_11_BITS) + ((s32)32768)))
 8001168:	12c9      	asrs	r1, r1, #11
 800116a:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
	>> BME280_SHIFT_BIT_POSITION_BY_10_BITS) *
 800116e:	fb01 f202 	mul.w	r2, r1, r2
	>> BME280_SHIFT_BIT_POSITION_BY_10_BITS) + ((s32)2097152)) *
 8001172:	1292      	asrs	r2, r2, #10
 8001174:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
	((s32)p_bme280->cal_param.dig_H2) + 8192) >> 14));
 8001178:	4917      	ldr	r1, [pc, #92]	; (80011d8 <bme280_compensate_humidity_int32+0xd0>)
 800117a:	6809      	ldr	r1, [r1, #0]
 800117c:	f9b1 101a 	ldrsh.w	r1, [r1, #26]
	>> BME280_SHIFT_BIT_POSITION_BY_10_BITS) + ((s32)2097152)) *
 8001180:	fb01 f202 	mul.w	r2, r1, r2
	((s32)p_bme280->cal_param.dig_H2) + 8192) >> 14));
 8001184:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8001188:	1392      	asrs	r2, r2, #14
	v_x1_u32 = (((((v_uncomp_humidity_s32
 800118a:	fb02 f303 	mul.w	r3, r2, r3
 800118e:	60fb      	str	r3, [r7, #12]
	v_x1_u32 = (v_x1_u32 - (((((v_x1_u32
	>> BME280_SHIFT_BIT_POSITION_BY_15_BITS) *
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	13db      	asrs	r3, r3, #15
	(v_x1_u32 >> BME280_SHIFT_BIT_POSITION_BY_15_BITS))
 8001194:	68fa      	ldr	r2, [r7, #12]
 8001196:	13d2      	asrs	r2, r2, #15
	>> BME280_SHIFT_BIT_POSITION_BY_15_BITS) *
 8001198:	fb02 f303 	mul.w	r3, r2, r3
	>> BME280_SHIFT_BIT_POSITION_BY_07_BITS) *
 800119c:	11db      	asrs	r3, r3, #7
	((s32)p_bme280->cal_param.dig_H1))
 800119e:	4a0e      	ldr	r2, [pc, #56]	; (80011d8 <bme280_compensate_humidity_int32+0xd0>)
 80011a0:	6812      	ldr	r2, [r2, #0]
 80011a2:	7e12      	ldrb	r2, [r2, #24]
	>> BME280_SHIFT_BIT_POSITION_BY_07_BITS) *
 80011a4:	fb02 f303 	mul.w	r3, r2, r3
	>> BME280_SHIFT_BIT_POSITION_BY_04_BITS));
 80011a8:	111b      	asrs	r3, r3, #4
	v_x1_u32 = (v_x1_u32 - (((((v_x1_u32
 80011aa:	68fa      	ldr	r2, [r7, #12]
 80011ac:	1ad3      	subs	r3, r2, r3
 80011ae:	60fb      	str	r3, [r7, #12]
	v_x1_u32 = (v_x1_u32 < 0 ? 0 : v_x1_u32);
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80011b6:	60fb      	str	r3, [r7, #12]
	v_x1_u32 = (v_x1_u32 > 419430400 ?
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 80011be:	bfa8      	it	ge
 80011c0:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
 80011c4:	60fb      	str	r3, [r7, #12]
	419430400 : v_x1_u32);
	return (u32)(v_x1_u32 >> BME280_SHIFT_BIT_POSITION_BY_12_BITS);
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	131b      	asrs	r3, r3, #12
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	3714      	adds	r7, #20
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr
 80011d6:	bf00      	nop
 80011d8:	20000028 	.word	0x20000028

080011dc <bme280_read_uncomp_pressure_temperature_humidity>:
 *
*/
BME280_RETURN_FUNCTION_TYPE bme280_read_uncomp_pressure_temperature_humidity(
s32 *v_uncomp_pressure_s32,
s32 *v_uncomp_temperature_s32, s32 *v_uncomp_humidity_s32)
{
 80011dc:	b590      	push	{r4, r7, lr}
 80011de:	b089      	sub	sp, #36	; 0x24
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	60f8      	str	r0, [r7, #12]
 80011e4:	60b9      	str	r1, [r7, #8]
 80011e6:	607a      	str	r2, [r7, #4]
	/* used to return the communication result*/
	BME280_RETURN_FUNCTION_TYPE com_rslt = ERROR;
 80011e8:	23ff      	movs	r3, #255	; 0xff
 80011ea:	77fb      	strb	r3, [r7, #31]
	a_data_u8[1] - Temperature LSB
	a_data_u8[1] - Temperature LSB
	a_data_u8[1] - Humidity MSB
	a_data_u8[1] - Humidity LSB
	*/
	u8 a_data_u8[BME280_DATA_FRAME_SIZE] = {
 80011ec:	f107 0314 	add.w	r3, r7, #20
 80011f0:	2200      	movs	r2, #0
 80011f2:	601a      	str	r2, [r3, #0]
 80011f4:	605a      	str	r2, [r3, #4]
	BME280_INIT_VALUE, BME280_INIT_VALUE,
	BME280_INIT_VALUE, BME280_INIT_VALUE,
	BME280_INIT_VALUE, BME280_INIT_VALUE,
	BME280_INIT_VALUE, BME280_INIT_VALUE};
	/* check the p_bme280 structure pointer as NULL*/
	if (p_bme280 == BME280_NULL) {
 80011f6:	4b1d      	ldr	r3, [pc, #116]	; (800126c <bme280_read_uncomp_pressure_temperature_humidity+0x90>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d102      	bne.n	8001204 <bme280_read_uncomp_pressure_temperature_humidity+0x28>
		return E_BME280_NULL_PTR;
 80011fe:	f06f 037e 	mvn.w	r3, #126	; 0x7e
 8001202:	e02e      	b.n	8001262 <bme280_read_uncomp_pressure_temperature_humidity+0x86>
		} else {
			com_rslt = p_bme280->BME280_BUS_READ_FUNC(
 8001204:	4b19      	ldr	r3, [pc, #100]	; (800126c <bme280_read_uncomp_pressure_temperature_humidity+0x90>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 800120a:	4b18      	ldr	r3, [pc, #96]	; (800126c <bme280_read_uncomp_pressure_temperature_humidity+0x90>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f893 0029 	ldrb.w	r0, [r3, #41]	; 0x29
 8001212:	f107 0214 	add.w	r2, r7, #20
 8001216:	2308      	movs	r3, #8
 8001218:	21f7      	movs	r1, #247	; 0xf7
 800121a:	47a0      	blx	r4
 800121c:	4603      	mov	r3, r0
 800121e:	77fb      	strb	r3, [r7, #31]
			p_bme280->dev_addr,
			BME280_PRESSURE_MSB_REG,
			a_data_u8, BME280_ALL_DATA_FRAME_LENGTH);
			/*Pressure*/
			*v_uncomp_pressure_s32 = (s32)((
			((u32)(a_data_u8[
 8001220:	7d3b      	ldrb	r3, [r7, #20]
			BME280_DATA_FRAME_PRESSURE_MSB_BYTE]))
			<< BME280_SHIFT_BIT_POSITION_BY_12_BITS) |
 8001222:	031a      	lsls	r2, r3, #12
			(((u32)(a_data_u8[
 8001224:	7d7b      	ldrb	r3, [r7, #21]
			BME280_DATA_FRAME_PRESSURE_LSB_BYTE]))
			<< BME280_SHIFT_BIT_POSITION_BY_04_BITS) |
 8001226:	011b      	lsls	r3, r3, #4
			<< BME280_SHIFT_BIT_POSITION_BY_12_BITS) |
 8001228:	4313      	orrs	r3, r2
			((u32)a_data_u8[
 800122a:	7dba      	ldrb	r2, [r7, #22]
			BME280_DATA_FRAME_PRESSURE_XLSB_BYTE] >>
 800122c:	0912      	lsrs	r2, r2, #4
 800122e:	b2d2      	uxtb	r2, r2
			<< BME280_SHIFT_BIT_POSITION_BY_04_BITS) |
 8001230:	4313      	orrs	r3, r2
			*v_uncomp_pressure_s32 = (s32)((
 8001232:	461a      	mov	r2, r3
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	601a      	str	r2, [r3, #0]
			BME280_SHIFT_BIT_POSITION_BY_04_BITS));

			/* Temperature */
			*v_uncomp_temperature_s32 = (s32)(((
			(u32) (a_data_u8[
 8001238:	7dfb      	ldrb	r3, [r7, #23]
			BME280_DATA_FRAME_TEMPERATURE_MSB_BYTE]))
			<< BME280_SHIFT_BIT_POSITION_BY_12_BITS) |
 800123a:	031a      	lsls	r2, r3, #12
			(((u32)(a_data_u8[
 800123c:	7e3b      	ldrb	r3, [r7, #24]
			BME280_DATA_FRAME_TEMPERATURE_LSB_BYTE]))
			<< BME280_SHIFT_BIT_POSITION_BY_04_BITS)
 800123e:	011b      	lsls	r3, r3, #4
			<< BME280_SHIFT_BIT_POSITION_BY_12_BITS) |
 8001240:	4313      	orrs	r3, r2
			| ((u32)a_data_u8[
 8001242:	7e7a      	ldrb	r2, [r7, #25]
			BME280_DATA_FRAME_TEMPERATURE_XLSB_BYTE]
			>> BME280_SHIFT_BIT_POSITION_BY_04_BITS));
 8001244:	0912      	lsrs	r2, r2, #4
 8001246:	b2d2      	uxtb	r2, r2
			| ((u32)a_data_u8[
 8001248:	4313      	orrs	r3, r2
			*v_uncomp_temperature_s32 = (s32)(((
 800124a:	461a      	mov	r2, r3
 800124c:	68bb      	ldr	r3, [r7, #8]
 800124e:	601a      	str	r2, [r3, #0]

			/*Humidity*/
			*v_uncomp_humidity_s32 = (s32)((
			((u32)(a_data_u8[
 8001250:	7ebb      	ldrb	r3, [r7, #26]
			BME280_DATA_FRAME_HUMIDITY_MSB_BYTE]))
			<< BME280_SHIFT_BIT_POSITION_BY_08_BITS)|
 8001252:	021b      	lsls	r3, r3, #8
			((u32)(a_data_u8[
 8001254:	7efa      	ldrb	r2, [r7, #27]
			<< BME280_SHIFT_BIT_POSITION_BY_08_BITS)|
 8001256:	4313      	orrs	r3, r2
			*v_uncomp_humidity_s32 = (s32)((
 8001258:	461a      	mov	r2, r3
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	601a      	str	r2, [r3, #0]
			BME280_DATA_FRAME_HUMIDITY_LSB_BYTE])));
		}
	return com_rslt;
 800125e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8001262:	4618      	mov	r0, r3
 8001264:	3724      	adds	r7, #36	; 0x24
 8001266:	46bd      	mov	sp, r7
 8001268:	bd90      	pop	{r4, r7, pc}
 800126a:	bf00      	nop
 800126c:	20000028 	.word	0x20000028

08001270 <bme280_read_pressure_temperature_humidity>:
 *
 *
*/
BME280_RETURN_FUNCTION_TYPE bme280_read_pressure_temperature_humidity(
u32 *v_pressure_u32, s32 *v_temperature_s32, u32 *v_humidity_u32)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b088      	sub	sp, #32
 8001274:	af00      	add	r7, sp, #0
 8001276:	60f8      	str	r0, [r7, #12]
 8001278:	60b9      	str	r1, [r7, #8]
 800127a:	607a      	str	r2, [r7, #4]
	/* used to return the communication result*/
	BME280_RETURN_FUNCTION_TYPE com_rslt = ERROR;
 800127c:	23ff      	movs	r3, #255	; 0xff
 800127e:	77fb      	strb	r3, [r7, #31]
	s32 v_uncomp_pressure_s32 = BME280_INIT_VALUE;
 8001280:	2300      	movs	r3, #0
 8001282:	61bb      	str	r3, [r7, #24]
	s32 v_uncom_temperature_s32 = BME280_INIT_VALUE;
 8001284:	2300      	movs	r3, #0
 8001286:	617b      	str	r3, [r7, #20]
	s32 v_uncom_humidity_s32 = BME280_INIT_VALUE;
 8001288:	2300      	movs	r3, #0
 800128a:	613b      	str	r3, [r7, #16]
	/* check the p_bme280 structure pointer as NULL*/
	if (p_bme280 == BME280_NULL) {
 800128c:	4b16      	ldr	r3, [pc, #88]	; (80012e8 <bme280_read_pressure_temperature_humidity+0x78>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d102      	bne.n	800129a <bme280_read_pressure_temperature_humidity+0x2a>
		return E_BME280_NULL_PTR;
 8001294:	f06f 037e 	mvn.w	r3, #126	; 0x7e
 8001298:	e021      	b.n	80012de <bme280_read_pressure_temperature_humidity+0x6e>
		} else {
			/* read the uncompensated pressure,
			temperature and humidity*/
			com_rslt =
 800129a:	f107 0210 	add.w	r2, r7, #16
 800129e:	f107 0114 	add.w	r1, r7, #20
 80012a2:	f107 0318 	add.w	r3, r7, #24
 80012a6:	4618      	mov	r0, r3
 80012a8:	f7ff ff98 	bl	80011dc <bme280_read_uncomp_pressure_temperature_humidity>
 80012ac:	4603      	mov	r3, r0
 80012ae:	77fb      	strb	r3, [r7, #31]
			bme280_read_uncomp_pressure_temperature_humidity(
			&v_uncomp_pressure_s32, &v_uncom_temperature_s32,
			&v_uncom_humidity_s32);
			/* read the true pressure, temperature and humidity*/
			*v_temperature_s32 =
			bme280_compensate_temperature_int32(
 80012b0:	697b      	ldr	r3, [r7, #20]
 80012b2:	4618      	mov	r0, r3
 80012b4:	f7ff fdca 	bl	8000e4c <bme280_compensate_temperature_int32>
 80012b8:	4602      	mov	r2, r0
			*v_temperature_s32 =
 80012ba:	68bb      	ldr	r3, [r7, #8]
 80012bc:	601a      	str	r2, [r3, #0]
			v_uncom_temperature_s32);
			*v_pressure_u32 = bme280_compensate_pressure_int32(
 80012be:	69bb      	ldr	r3, [r7, #24]
 80012c0:	4618      	mov	r0, r3
 80012c2:	f7ff fe41 	bl	8000f48 <bme280_compensate_pressure_int32>
 80012c6:	4602      	mov	r2, r0
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	601a      	str	r2, [r3, #0]
			v_uncomp_pressure_s32);
			*v_humidity_u32 = bme280_compensate_humidity_int32(
 80012cc:	693b      	ldr	r3, [r7, #16]
 80012ce:	4618      	mov	r0, r3
 80012d0:	f7ff ff1a 	bl	8001108 <bme280_compensate_humidity_int32>
 80012d4:	4602      	mov	r2, r0
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	601a      	str	r2, [r3, #0]
			v_uncom_humidity_s32);
		}
	return com_rslt;
 80012da:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80012de:	4618      	mov	r0, r3
 80012e0:	3720      	adds	r7, #32
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	20000028 	.word	0x20000028

080012ec <bme280_get_calib_param>:
 *	@retval -1 -> Error
 *
 *
*/
BME280_RETURN_FUNCTION_TYPE bme280_get_calib_param(void)
{
 80012ec:	b590      	push	{r4, r7, lr}
 80012ee:	b089      	sub	sp, #36	; 0x24
 80012f0:	af00      	add	r7, sp, #0
	/* used to return the communication result*/
	BME280_RETURN_FUNCTION_TYPE com_rslt = ERROR;
 80012f2:	23ff      	movs	r3, #255	; 0xff
 80012f4:	77fb      	strb	r3, [r7, #31]
	u8 a_data_u8[BME280_CALIB_DATA_SIZE] = {
 80012f6:	1d3b      	adds	r3, r7, #4
 80012f8:	2200      	movs	r2, #0
 80012fa:	601a      	str	r2, [r3, #0]
 80012fc:	605a      	str	r2, [r3, #4]
 80012fe:	609a      	str	r2, [r3, #8]
 8001300:	60da      	str	r2, [r3, #12]
 8001302:	611a      	str	r2, [r3, #16]
 8001304:	615a      	str	r2, [r3, #20]
 8001306:	831a      	strh	r2, [r3, #24]
	BME280_INIT_VALUE, BME280_INIT_VALUE, BME280_INIT_VALUE,
	BME280_INIT_VALUE, BME280_INIT_VALUE, BME280_INIT_VALUE,
	BME280_INIT_VALUE, BME280_INIT_VALUE, BME280_INIT_VALUE,
	BME280_INIT_VALUE, BME280_INIT_VALUE, BME280_INIT_VALUE};
	/* check the p_bme280 structure pointer as NULL*/
	if (p_bme280 == BME280_NULL) {
 8001308:	4b71      	ldr	r3, [pc, #452]	; (80014d0 <bme280_get_calib_param+0x1e4>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d102      	bne.n	8001316 <bme280_get_calib_param+0x2a>
		return E_BME280_NULL_PTR;
 8001310:	f06f 037e 	mvn.w	r3, #126	; 0x7e
 8001314:	e0d7      	b.n	80014c6 <bme280_get_calib_param+0x1da>
		} else {
			com_rslt = p_bme280->BME280_BUS_READ_FUNC(
 8001316:	4b6e      	ldr	r3, [pc, #440]	; (80014d0 <bme280_get_calib_param+0x1e4>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 800131c:	4b6c      	ldr	r3, [pc, #432]	; (80014d0 <bme280_get_calib_param+0x1e4>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f893 0029 	ldrb.w	r0, [r3, #41]	; 0x29
 8001324:	1d3a      	adds	r2, r7, #4
 8001326:	231a      	movs	r3, #26
 8001328:	2188      	movs	r1, #136	; 0x88
 800132a:	47a0      	blx	r4
 800132c:	4603      	mov	r3, r0
 800132e:	77fb      	strb	r3, [r7, #31]
			BME280_TEMPERATURE_CALIB_DIG_T1_LSB_REG,
			a_data_u8,
			BME280_PRESSURE_TEMPERATURE_CALIB_DATA_LENGTH);

			p_bme280->cal_param.dig_T1 = (u16)(((
			(u16)((u8)a_data_u8[
 8001330:	797b      	ldrb	r3, [r7, #5]
			BME280_TEMPERATURE_CALIB_DIG_T1_MSB])) <<
 8001332:	021b      	lsls	r3, r3, #8
			BME280_SHIFT_BIT_POSITION_BY_08_BITS)
			| a_data_u8[BME280_TEMPERATURE_CALIB_DIG_T1_LSB]);
 8001334:	b21a      	sxth	r2, r3
 8001336:	793b      	ldrb	r3, [r7, #4]
 8001338:	b21b      	sxth	r3, r3
 800133a:	4313      	orrs	r3, r2
 800133c:	b21a      	sxth	r2, r3
			p_bme280->cal_param.dig_T1 = (u16)(((
 800133e:	4b64      	ldr	r3, [pc, #400]	; (80014d0 <bme280_get_calib_param+0x1e4>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	b292      	uxth	r2, r2
 8001344:	801a      	strh	r2, [r3, #0]
			p_bme280->cal_param.dig_T2 = (s16)(((
			(s16)((s8)a_data_u8[
 8001346:	79fb      	ldrb	r3, [r7, #7]
 8001348:	b25b      	sxtb	r3, r3
			BME280_TEMPERATURE_CALIB_DIG_T2_MSB])) <<
 800134a:	021b      	lsls	r3, r3, #8
			p_bme280->cal_param.dig_T2 = (s16)(((
 800134c:	b219      	sxth	r1, r3
			BME280_SHIFT_BIT_POSITION_BY_08_BITS)
			| a_data_u8[BME280_TEMPERATURE_CALIB_DIG_T2_LSB]);
 800134e:	79bb      	ldrb	r3, [r7, #6]
 8001350:	b21a      	sxth	r2, r3
			p_bme280->cal_param.dig_T2 = (s16)(((
 8001352:	4b5f      	ldr	r3, [pc, #380]	; (80014d0 <bme280_get_calib_param+0x1e4>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	430a      	orrs	r2, r1
 8001358:	b212      	sxth	r2, r2
 800135a:	805a      	strh	r2, [r3, #2]
			p_bme280->cal_param.dig_T3 = (s16)(((
			(s16)((s8)a_data_u8[
 800135c:	7a7b      	ldrb	r3, [r7, #9]
 800135e:	b25b      	sxtb	r3, r3
			BME280_TEMPERATURE_CALIB_DIG_T3_MSB])) <<
 8001360:	021b      	lsls	r3, r3, #8
			p_bme280->cal_param.dig_T3 = (s16)(((
 8001362:	b219      	sxth	r1, r3
			BME280_SHIFT_BIT_POSITION_BY_08_BITS)
			| a_data_u8[BME280_TEMPERATURE_CALIB_DIG_T3_LSB]);
 8001364:	7a3b      	ldrb	r3, [r7, #8]
 8001366:	b21a      	sxth	r2, r3
			p_bme280->cal_param.dig_T3 = (s16)(((
 8001368:	4b59      	ldr	r3, [pc, #356]	; (80014d0 <bme280_get_calib_param+0x1e4>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	430a      	orrs	r2, r1
 800136e:	b212      	sxth	r2, r2
 8001370:	809a      	strh	r2, [r3, #4]
			p_bme280->cal_param.dig_P1 = (u16)(((
			(u16)((u8)a_data_u8[
 8001372:	7afb      	ldrb	r3, [r7, #11]
			BME280_PRESSURE_CALIB_DIG_P1_MSB])) <<
 8001374:	021b      	lsls	r3, r3, #8
			BME280_SHIFT_BIT_POSITION_BY_08_BITS)
			| a_data_u8[BME280_PRESSURE_CALIB_DIG_P1_LSB]);
 8001376:	b21a      	sxth	r2, r3
 8001378:	7abb      	ldrb	r3, [r7, #10]
 800137a:	b21b      	sxth	r3, r3
 800137c:	4313      	orrs	r3, r2
 800137e:	b21a      	sxth	r2, r3
			p_bme280->cal_param.dig_P1 = (u16)(((
 8001380:	4b53      	ldr	r3, [pc, #332]	; (80014d0 <bme280_get_calib_param+0x1e4>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	b292      	uxth	r2, r2
 8001386:	80da      	strh	r2, [r3, #6]
			p_bme280->cal_param.dig_P2 = (s16)(((
			(s16)((s8)a_data_u8[
 8001388:	7b7b      	ldrb	r3, [r7, #13]
 800138a:	b25b      	sxtb	r3, r3
			BME280_PRESSURE_CALIB_DIG_P2_MSB])) <<
 800138c:	021b      	lsls	r3, r3, #8
			p_bme280->cal_param.dig_P2 = (s16)(((
 800138e:	b219      	sxth	r1, r3
			BME280_SHIFT_BIT_POSITION_BY_08_BITS)
			| a_data_u8[BME280_PRESSURE_CALIB_DIG_P2_LSB]);
 8001390:	7b3b      	ldrb	r3, [r7, #12]
 8001392:	b21a      	sxth	r2, r3
			p_bme280->cal_param.dig_P2 = (s16)(((
 8001394:	4b4e      	ldr	r3, [pc, #312]	; (80014d0 <bme280_get_calib_param+0x1e4>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	430a      	orrs	r2, r1
 800139a:	b212      	sxth	r2, r2
 800139c:	811a      	strh	r2, [r3, #8]
			p_bme280->cal_param.dig_P3 = (s16)(((
			(s16)((s8)a_data_u8[
 800139e:	7bfb      	ldrb	r3, [r7, #15]
 80013a0:	b25b      	sxtb	r3, r3
			BME280_PRESSURE_CALIB_DIG_P3_MSB])) <<
 80013a2:	021b      	lsls	r3, r3, #8
			p_bme280->cal_param.dig_P3 = (s16)(((
 80013a4:	b219      	sxth	r1, r3
			BME280_SHIFT_BIT_POSITION_BY_08_BITS)
			| a_data_u8[
 80013a6:	7bbb      	ldrb	r3, [r7, #14]
 80013a8:	b21a      	sxth	r2, r3
			p_bme280->cal_param.dig_P3 = (s16)(((
 80013aa:	4b49      	ldr	r3, [pc, #292]	; (80014d0 <bme280_get_calib_param+0x1e4>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	430a      	orrs	r2, r1
 80013b0:	b212      	sxth	r2, r2
 80013b2:	815a      	strh	r2, [r3, #10]
			BME280_PRESSURE_CALIB_DIG_P3_LSB]);
			p_bme280->cal_param.dig_P4 = (s16)(((
			(s16)((s8)a_data_u8[
 80013b4:	7c7b      	ldrb	r3, [r7, #17]
 80013b6:	b25b      	sxtb	r3, r3
			BME280_PRESSURE_CALIB_DIG_P4_MSB])) <<
 80013b8:	021b      	lsls	r3, r3, #8
			p_bme280->cal_param.dig_P4 = (s16)(((
 80013ba:	b219      	sxth	r1, r3
			BME280_SHIFT_BIT_POSITION_BY_08_BITS)
			| a_data_u8[BME280_PRESSURE_CALIB_DIG_P4_LSB]);
 80013bc:	7c3b      	ldrb	r3, [r7, #16]
 80013be:	b21a      	sxth	r2, r3
			p_bme280->cal_param.dig_P4 = (s16)(((
 80013c0:	4b43      	ldr	r3, [pc, #268]	; (80014d0 <bme280_get_calib_param+0x1e4>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	430a      	orrs	r2, r1
 80013c6:	b212      	sxth	r2, r2
 80013c8:	819a      	strh	r2, [r3, #12]
			p_bme280->cal_param.dig_P5 = (s16)(((
			(s16)((s8)a_data_u8[
 80013ca:	7cfb      	ldrb	r3, [r7, #19]
 80013cc:	b25b      	sxtb	r3, r3
			BME280_PRESSURE_CALIB_DIG_P5_MSB])) <<
 80013ce:	021b      	lsls	r3, r3, #8
			p_bme280->cal_param.dig_P5 = (s16)(((
 80013d0:	b219      	sxth	r1, r3
			BME280_SHIFT_BIT_POSITION_BY_08_BITS)
			| a_data_u8[BME280_PRESSURE_CALIB_DIG_P5_LSB]);
 80013d2:	7cbb      	ldrb	r3, [r7, #18]
 80013d4:	b21a      	sxth	r2, r3
			p_bme280->cal_param.dig_P5 = (s16)(((
 80013d6:	4b3e      	ldr	r3, [pc, #248]	; (80014d0 <bme280_get_calib_param+0x1e4>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	430a      	orrs	r2, r1
 80013dc:	b212      	sxth	r2, r2
 80013de:	81da      	strh	r2, [r3, #14]
			p_bme280->cal_param.dig_P6 = (s16)(((
			(s16)((s8)a_data_u8[
 80013e0:	7d7b      	ldrb	r3, [r7, #21]
 80013e2:	b25b      	sxtb	r3, r3
			BME280_PRESSURE_CALIB_DIG_P6_MSB])) <<
 80013e4:	021b      	lsls	r3, r3, #8
			p_bme280->cal_param.dig_P6 = (s16)(((
 80013e6:	b219      	sxth	r1, r3
			BME280_SHIFT_BIT_POSITION_BY_08_BITS)
			| a_data_u8[BME280_PRESSURE_CALIB_DIG_P6_LSB]);
 80013e8:	7d3b      	ldrb	r3, [r7, #20]
 80013ea:	b21a      	sxth	r2, r3
			p_bme280->cal_param.dig_P6 = (s16)(((
 80013ec:	4b38      	ldr	r3, [pc, #224]	; (80014d0 <bme280_get_calib_param+0x1e4>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	430a      	orrs	r2, r1
 80013f2:	b212      	sxth	r2, r2
 80013f4:	821a      	strh	r2, [r3, #16]
			p_bme280->cal_param.dig_P7 = (s16)(((
			(s16)((s8)a_data_u8[
 80013f6:	7dfb      	ldrb	r3, [r7, #23]
 80013f8:	b25b      	sxtb	r3, r3
			BME280_PRESSURE_CALIB_DIG_P7_MSB])) <<
 80013fa:	021b      	lsls	r3, r3, #8
			p_bme280->cal_param.dig_P7 = (s16)(((
 80013fc:	b219      	sxth	r1, r3
			BME280_SHIFT_BIT_POSITION_BY_08_BITS)
			| a_data_u8[BME280_PRESSURE_CALIB_DIG_P7_LSB]);
 80013fe:	7dbb      	ldrb	r3, [r7, #22]
 8001400:	b21a      	sxth	r2, r3
			p_bme280->cal_param.dig_P7 = (s16)(((
 8001402:	4b33      	ldr	r3, [pc, #204]	; (80014d0 <bme280_get_calib_param+0x1e4>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	430a      	orrs	r2, r1
 8001408:	b212      	sxth	r2, r2
 800140a:	825a      	strh	r2, [r3, #18]
			p_bme280->cal_param.dig_P8 = (s16)(((
			(s16)((s8)a_data_u8[
 800140c:	7e7b      	ldrb	r3, [r7, #25]
 800140e:	b25b      	sxtb	r3, r3
			BME280_PRESSURE_CALIB_DIG_P8_MSB])) <<
 8001410:	021b      	lsls	r3, r3, #8
			p_bme280->cal_param.dig_P8 = (s16)(((
 8001412:	b219      	sxth	r1, r3
			BME280_SHIFT_BIT_POSITION_BY_08_BITS)
			| a_data_u8[BME280_PRESSURE_CALIB_DIG_P8_LSB]);
 8001414:	7e3b      	ldrb	r3, [r7, #24]
 8001416:	b21a      	sxth	r2, r3
			p_bme280->cal_param.dig_P8 = (s16)(((
 8001418:	4b2d      	ldr	r3, [pc, #180]	; (80014d0 <bme280_get_calib_param+0x1e4>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	430a      	orrs	r2, r1
 800141e:	b212      	sxth	r2, r2
 8001420:	829a      	strh	r2, [r3, #20]
			p_bme280->cal_param.dig_P9 = (s16)(((
			(s16)((s8)a_data_u8[
 8001422:	7efb      	ldrb	r3, [r7, #27]
 8001424:	b25b      	sxtb	r3, r3
			BME280_PRESSURE_CALIB_DIG_P9_MSB])) <<
 8001426:	021b      	lsls	r3, r3, #8
			p_bme280->cal_param.dig_P9 = (s16)(((
 8001428:	b219      	sxth	r1, r3
			BME280_SHIFT_BIT_POSITION_BY_08_BITS)
			| a_data_u8[BME280_PRESSURE_CALIB_DIG_P9_LSB]);
 800142a:	7ebb      	ldrb	r3, [r7, #26]
 800142c:	b21a      	sxth	r2, r3
			p_bme280->cal_param.dig_P9 = (s16)(((
 800142e:	4b28      	ldr	r3, [pc, #160]	; (80014d0 <bme280_get_calib_param+0x1e4>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	430a      	orrs	r2, r1
 8001434:	b212      	sxth	r2, r2
 8001436:	82da      	strh	r2, [r3, #22]
			p_bme280->cal_param.dig_H1 =
 8001438:	4b25      	ldr	r3, [pc, #148]	; (80014d0 <bme280_get_calib_param+0x1e4>)
 800143a:	681b      	ldr	r3, [r3, #0]
			a_data_u8[BME280_HUMIDITY_CALIB_DIG_H1];
 800143c:	7f7a      	ldrb	r2, [r7, #29]
			p_bme280->cal_param.dig_H1 =
 800143e:	761a      	strb	r2, [r3, #24]
			com_rslt += p_bme280->BME280_BUS_READ_FUNC(
 8001440:	4b23      	ldr	r3, [pc, #140]	; (80014d0 <bme280_get_calib_param+0x1e4>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8001446:	4b22      	ldr	r3, [pc, #136]	; (80014d0 <bme280_get_calib_param+0x1e4>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f893 0029 	ldrb.w	r0, [r3, #41]	; 0x29
 800144e:	1d3a      	adds	r2, r7, #4
 8001450:	2307      	movs	r3, #7
 8001452:	21e1      	movs	r1, #225	; 0xe1
 8001454:	47a0      	blx	r4
 8001456:	4603      	mov	r3, r0
 8001458:	b2da      	uxtb	r2, r3
 800145a:	7ffb      	ldrb	r3, [r7, #31]
 800145c:	4413      	add	r3, r2
 800145e:	b2db      	uxtb	r3, r3
 8001460:	77fb      	strb	r3, [r7, #31]
			p_bme280->dev_addr,
			BME280_HUMIDITY_CALIB_DIG_H2_LSB_REG, a_data_u8,
			BME280_HUMIDITY_CALIB_DATA_LENGTH);
			p_bme280->cal_param.dig_H2 = (s16)(((
			(s16)((s8)a_data_u8[
 8001462:	797b      	ldrb	r3, [r7, #5]
 8001464:	b25b      	sxtb	r3, r3
			BME280_HUMIDITY_CALIB_DIG_H2_MSB])) <<
 8001466:	021b      	lsls	r3, r3, #8
			p_bme280->cal_param.dig_H2 = (s16)(((
 8001468:	b219      	sxth	r1, r3
			BME280_SHIFT_BIT_POSITION_BY_08_BITS)
			| a_data_u8[BME280_HUMIDITY_CALIB_DIG_H2_LSB]);
 800146a:	793b      	ldrb	r3, [r7, #4]
 800146c:	b21a      	sxth	r2, r3
			p_bme280->cal_param.dig_H2 = (s16)(((
 800146e:	4b18      	ldr	r3, [pc, #96]	; (80014d0 <bme280_get_calib_param+0x1e4>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	430a      	orrs	r2, r1
 8001474:	b212      	sxth	r2, r2
 8001476:	835a      	strh	r2, [r3, #26]
			p_bme280->cal_param.dig_H3 =
 8001478:	4b15      	ldr	r3, [pc, #84]	; (80014d0 <bme280_get_calib_param+0x1e4>)
 800147a:	681b      	ldr	r3, [r3, #0]
			a_data_u8[BME280_HUMIDITY_CALIB_DIG_H3];
 800147c:	79ba      	ldrb	r2, [r7, #6]
			p_bme280->cal_param.dig_H3 =
 800147e:	771a      	strb	r2, [r3, #28]
			p_bme280->cal_param.dig_H4 = (s16)(((
			(s16)((s8)a_data_u8[
 8001480:	79fb      	ldrb	r3, [r7, #7]
 8001482:	b25b      	sxtb	r3, r3
			BME280_HUMIDITY_CALIB_DIG_H4_MSB])) <<
 8001484:	011b      	lsls	r3, r3, #4
			p_bme280->cal_param.dig_H4 = (s16)(((
 8001486:	b219      	sxth	r1, r3
			BME280_SHIFT_BIT_POSITION_BY_04_BITS) |
			(((u8)BME280_MASK_DIG_H4) &
			a_data_u8[BME280_HUMIDITY_CALIB_DIG_H4_LSB]));
 8001488:	7a3b      	ldrb	r3, [r7, #8]
			p_bme280->cal_param.dig_H4 = (s16)(((
 800148a:	b21b      	sxth	r3, r3
 800148c:	f003 030f 	and.w	r3, r3, #15
 8001490:	b21a      	sxth	r2, r3
 8001492:	4b0f      	ldr	r3, [pc, #60]	; (80014d0 <bme280_get_calib_param+0x1e4>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	430a      	orrs	r2, r1
 8001498:	b212      	sxth	r2, r2
 800149a:	83da      	strh	r2, [r3, #30]
			p_bme280->cal_param.dig_H5 = (s16)(((
			(s16)((s8)a_data_u8[
 800149c:	7a7b      	ldrb	r3, [r7, #9]
 800149e:	b25b      	sxtb	r3, r3
			BME280_HUMIDITY_CALIB_DIG_H5_MSB])) <<
 80014a0:	011b      	lsls	r3, r3, #4
			p_bme280->cal_param.dig_H5 = (s16)(((
 80014a2:	b219      	sxth	r1, r3
			BME280_SHIFT_BIT_POSITION_BY_04_BITS) |
			(a_data_u8[BME280_HUMIDITY_CALIB_DIG_H4_LSB] >>
 80014a4:	7a3b      	ldrb	r3, [r7, #8]
			p_bme280->cal_param.dig_H5 = (s16)(((
 80014a6:	091b      	lsrs	r3, r3, #4
 80014a8:	b2db      	uxtb	r3, r3
 80014aa:	b21a      	sxth	r2, r3
 80014ac:	4b08      	ldr	r3, [pc, #32]	; (80014d0 <bme280_get_calib_param+0x1e4>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	430a      	orrs	r2, r1
 80014b2:	b212      	sxth	r2, r2
 80014b4:	841a      	strh	r2, [r3, #32]
			BME280_SHIFT_BIT_POSITION_BY_04_BITS));
			p_bme280->cal_param.dig_H6 =
			(s8)a_data_u8[BME280_HUMIDITY_CALIB_DIG_H6];
 80014b6:	7aba      	ldrb	r2, [r7, #10]
			p_bme280->cal_param.dig_H6 =
 80014b8:	4b05      	ldr	r3, [pc, #20]	; (80014d0 <bme280_get_calib_param+0x1e4>)
 80014ba:	681b      	ldr	r3, [r3, #0]
			(s8)a_data_u8[BME280_HUMIDITY_CALIB_DIG_H6];
 80014bc:	b252      	sxtb	r2, r2
			p_bme280->cal_param.dig_H6 =
 80014be:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		}
	return com_rslt;
 80014c2:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	3724      	adds	r7, #36	; 0x24
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd90      	pop	{r4, r7, pc}
 80014ce:	bf00      	nop
 80014d0:	20000028 	.word	0x20000028

080014d4 <bme280_set_oversamp_temperature>:
 *
 *
*/
BME280_RETURN_FUNCTION_TYPE bme280_set_oversamp_temperature(
u8 v_value_u8)
{
 80014d4:	b590      	push	{r4, r7, lr}
 80014d6:	b085      	sub	sp, #20
 80014d8:	af00      	add	r7, sp, #0
 80014da:	4603      	mov	r3, r0
 80014dc:	71fb      	strb	r3, [r7, #7]
	/* used to return the communication result*/
	BME280_RETURN_FUNCTION_TYPE com_rslt = ERROR;
 80014de:	23ff      	movs	r3, #255	; 0xff
 80014e0:	73fb      	strb	r3, [r7, #15]
	u8 v_data_u8 = BME280_INIT_VALUE;
 80014e2:	2300      	movs	r3, #0
 80014e4:	73bb      	strb	r3, [r7, #14]
	u8 v_prev_pow_mode_u8 = BME280_INIT_VALUE;
 80014e6:	2300      	movs	r3, #0
 80014e8:	737b      	strb	r3, [r7, #13]
	u8 v_pre_ctrl_hum_value_u8 = BME280_INIT_VALUE;
 80014ea:	2300      	movs	r3, #0
 80014ec:	733b      	strb	r3, [r7, #12]
	u8 v_pre_config_value_u8 = BME280_INIT_VALUE;
 80014ee:	2300      	movs	r3, #0
 80014f0:	72fb      	strb	r3, [r7, #11]
	/* check the p_bme280 structure pointer as NULL*/
	if (p_bme280 == BME280_NULL) {
 80014f2:	4b56      	ldr	r3, [pc, #344]	; (800164c <bme280_set_oversamp_temperature+0x178>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d102      	bne.n	8001500 <bme280_set_oversamp_temperature+0x2c>
		return E_BME280_NULL_PTR;
 80014fa:	f06f 037e 	mvn.w	r3, #126	; 0x7e
 80014fe:	e0a0      	b.n	8001642 <bme280_set_oversamp_temperature+0x16e>
		} else {
			v_data_u8 = p_bme280->ctrl_meas_reg;
 8001500:	4b52      	ldr	r3, [pc, #328]	; (800164c <bme280_set_oversamp_temperature+0x178>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8001508:	73bb      	strb	r3, [r7, #14]
			v_data_u8 =
			BME280_SET_BITSLICE(v_data_u8,
 800150a:	7bbb      	ldrb	r3, [r7, #14]
 800150c:	b25b      	sxtb	r3, r3
 800150e:	f003 031f 	and.w	r3, r3, #31
 8001512:	b25a      	sxtb	r2, r3
 8001514:	79fb      	ldrb	r3, [r7, #7]
 8001516:	015b      	lsls	r3, r3, #5
 8001518:	b25b      	sxtb	r3, r3
 800151a:	4313      	orrs	r3, r2
 800151c:	b25b      	sxtb	r3, r3
 800151e:	b2db      	uxtb	r3, r3
			v_data_u8 =
 8001520:	73bb      	strb	r3, [r7, #14]
			BME280_CTRL_MEAS_REG_OVERSAMP_TEMPERATURE, v_value_u8);
			com_rslt = bme280_get_power_mode(&v_prev_pow_mode_u8);
 8001522:	f107 030d 	add.w	r3, r7, #13
 8001526:	4618      	mov	r0, r3
 8001528:	f000 fa22 	bl	8001970 <bme280_get_power_mode>
 800152c:	4603      	mov	r3, r0
 800152e:	73fb      	strb	r3, [r7, #15]
			if (v_prev_pow_mode_u8 != BME280_SLEEP_MODE) {
 8001530:	7b7b      	ldrb	r3, [r7, #13]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d03e      	beq.n	80015b4 <bme280_set_oversamp_temperature+0xe0>
				com_rslt += bme280_set_soft_rst();
 8001536:	f000 fb07 	bl	8001b48 <bme280_set_soft_rst>
 800153a:	4603      	mov	r3, r0
 800153c:	b2da      	uxtb	r2, r3
 800153e:	7bfb      	ldrb	r3, [r7, #15]
 8001540:	4413      	add	r3, r2
 8001542:	b2db      	uxtb	r3, r3
 8001544:	73fb      	strb	r3, [r7, #15]
				p_bme280->delay_msec(BME280_3MS_DELAY);
 8001546:	4b41      	ldr	r3, [pc, #260]	; (800164c <bme280_set_oversamp_temperature+0x178>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800154c:	2003      	movs	r0, #3
 800154e:	4798      	blx	r3
				/* write previous value
				of configuration register*/
				v_pre_config_value_u8 = p_bme280->config_reg;
 8001550:	4b3e      	ldr	r3, [pc, #248]	; (800164c <bme280_set_oversamp_temperature+0x178>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8001558:	72fb      	strb	r3, [r7, #11]
				com_rslt += bme280_write_register(
 800155a:	f107 030b 	add.w	r3, r7, #11
 800155e:	2201      	movs	r2, #1
 8001560:	4619      	mov	r1, r3
 8001562:	20f5      	movs	r0, #245	; 0xf5
 8001564:	f000 fbd0 	bl	8001d08 <bme280_write_register>
 8001568:	4603      	mov	r3, r0
 800156a:	b2da      	uxtb	r2, r3
 800156c:	7bfb      	ldrb	r3, [r7, #15]
 800156e:	4413      	add	r3, r2
 8001570:	b2db      	uxtb	r3, r3
 8001572:	73fb      	strb	r3, [r7, #15]
				&v_pre_config_value_u8,
				BME280_GEN_READ_WRITE_DATA_LENGTH);
				/* write previous value
				of humidity oversampling*/
				v_pre_ctrl_hum_value_u8 =
				p_bme280->ctrl_hum_reg;
 8001574:	4b35      	ldr	r3, [pc, #212]	; (800164c <bme280_set_oversamp_temperature+0x178>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
				v_pre_ctrl_hum_value_u8 =
 800157c:	733b      	strb	r3, [r7, #12]
				com_rslt += bme280_write_register(
 800157e:	f107 030c 	add.w	r3, r7, #12
 8001582:	2201      	movs	r2, #1
 8001584:	4619      	mov	r1, r3
 8001586:	20f2      	movs	r0, #242	; 0xf2
 8001588:	f000 fbbe 	bl	8001d08 <bme280_write_register>
 800158c:	4603      	mov	r3, r0
 800158e:	b2da      	uxtb	r2, r3
 8001590:	7bfb      	ldrb	r3, [r7, #15]
 8001592:	4413      	add	r3, r2
 8001594:	b2db      	uxtb	r3, r3
 8001596:	73fb      	strb	r3, [r7, #15]
					BME280_CTRL_HUMIDITY_REG,
				&v_pre_ctrl_hum_value_u8,
				BME280_GEN_READ_WRITE_DATA_LENGTH);
				/* write previous and updated value
				of configuration register*/
				com_rslt += bme280_write_register(
 8001598:	f107 030e 	add.w	r3, r7, #14
 800159c:	2201      	movs	r2, #1
 800159e:	4619      	mov	r1, r3
 80015a0:	20f4      	movs	r0, #244	; 0xf4
 80015a2:	f000 fbb1 	bl	8001d08 <bme280_write_register>
 80015a6:	4603      	mov	r3, r0
 80015a8:	b2da      	uxtb	r2, r3
 80015aa:	7bfb      	ldrb	r3, [r7, #15]
 80015ac:	4413      	add	r3, r2
 80015ae:	b2db      	uxtb	r3, r3
 80015b0:	73fb      	strb	r3, [r7, #15]
 80015b2:	e00d      	b.n	80015d0 <bme280_set_oversamp_temperature+0xfc>
					BME280_CTRL_MEAS_REG,
				&v_data_u8, BME280_GEN_READ_WRITE_DATA_LENGTH);
			} else {
				com_rslt = p_bme280->BME280_BUS_WRITE_FUNC(
 80015b4:	4b25      	ldr	r3, [pc, #148]	; (800164c <bme280_set_oversamp_temperature+0x178>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 80015ba:	4b24      	ldr	r3, [pc, #144]	; (800164c <bme280_set_oversamp_temperature+0x178>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f893 0029 	ldrb.w	r0, [r3, #41]	; 0x29
 80015c2:	f107 020e 	add.w	r2, r7, #14
 80015c6:	2301      	movs	r3, #1
 80015c8:	21f4      	movs	r1, #244	; 0xf4
 80015ca:	47a0      	blx	r4
 80015cc:	4603      	mov	r3, r0
 80015ce:	73fb      	strb	r3, [r7, #15]
				p_bme280->dev_addr,
				BME280_CTRL_MEAS_REG_OVERSAMP_TEMPERATURE__REG,
				&v_data_u8, BME280_GEN_READ_WRITE_DATA_LENGTH);
			}
				p_bme280->oversamp_temperature = v_value_u8;
 80015d0:	4b1e      	ldr	r3, [pc, #120]	; (800164c <bme280_set_oversamp_temperature+0x178>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	79fa      	ldrb	r2, [r7, #7]
 80015d6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
				/* read the control measurement register value*/
				com_rslt = bme280_read_register(
 80015da:	f107 030e 	add.w	r3, r7, #14
 80015de:	2201      	movs	r2, #1
 80015e0:	4619      	mov	r1, r3
 80015e2:	20f4      	movs	r0, #244	; 0xf4
 80015e4:	f000 fbb6 	bl	8001d54 <bme280_read_register>
 80015e8:	4603      	mov	r3, r0
 80015ea:	73fb      	strb	r3, [r7, #15]
					BME280_CTRL_MEAS_REG,
				&v_data_u8, BME280_GEN_READ_WRITE_DATA_LENGTH);
				p_bme280->ctrl_meas_reg = v_data_u8;
 80015ec:	4b17      	ldr	r3, [pc, #92]	; (800164c <bme280_set_oversamp_temperature+0x178>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	7bba      	ldrb	r2, [r7, #14]
 80015f2:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
				/* read the control humidity register value*/
				com_rslt += bme280_read_register(
 80015f6:	f107 030e 	add.w	r3, r7, #14
 80015fa:	2201      	movs	r2, #1
 80015fc:	4619      	mov	r1, r3
 80015fe:	20f2      	movs	r0, #242	; 0xf2
 8001600:	f000 fba8 	bl	8001d54 <bme280_read_register>
 8001604:	4603      	mov	r3, r0
 8001606:	b2da      	uxtb	r2, r3
 8001608:	7bfb      	ldrb	r3, [r7, #15]
 800160a:	4413      	add	r3, r2
 800160c:	b2db      	uxtb	r3, r3
 800160e:	73fb      	strb	r3, [r7, #15]
					BME280_CTRL_HUMIDITY_REG,
				&v_data_u8, BME280_GEN_READ_WRITE_DATA_LENGTH);
				p_bme280->ctrl_hum_reg = v_data_u8;
 8001610:	4b0e      	ldr	r3, [pc, #56]	; (800164c <bme280_set_oversamp_temperature+0x178>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	7bba      	ldrb	r2, [r7, #14]
 8001616:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
				/* read the control
				configuration register value*/
				com_rslt += bme280_read_register(
 800161a:	f107 030e 	add.w	r3, r7, #14
 800161e:	2201      	movs	r2, #1
 8001620:	4619      	mov	r1, r3
 8001622:	20f5      	movs	r0, #245	; 0xf5
 8001624:	f000 fb96 	bl	8001d54 <bme280_read_register>
 8001628:	4603      	mov	r3, r0
 800162a:	b2da      	uxtb	r2, r3
 800162c:	7bfb      	ldrb	r3, [r7, #15]
 800162e:	4413      	add	r3, r2
 8001630:	b2db      	uxtb	r3, r3
 8001632:	73fb      	strb	r3, [r7, #15]
					BME280_CONFIG_REG,
				&v_data_u8, BME280_GEN_READ_WRITE_DATA_LENGTH);
				p_bme280->config_reg = v_data_u8;
 8001634:	4b05      	ldr	r3, [pc, #20]	; (800164c <bme280_set_oversamp_temperature+0x178>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	7bba      	ldrb	r2, [r7, #14]
 800163a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		}
	return com_rslt;
 800163e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001642:	4618      	mov	r0, r3
 8001644:	3714      	adds	r7, #20
 8001646:	46bd      	mov	sp, r7
 8001648:	bd90      	pop	{r4, r7, pc}
 800164a:	bf00      	nop
 800164c:	20000028 	.word	0x20000028

08001650 <bme280_set_oversamp_pressure>:
 *
 *
*/
BME280_RETURN_FUNCTION_TYPE bme280_set_oversamp_pressure(
u8 v_value_u8)
{
 8001650:	b590      	push	{r4, r7, lr}
 8001652:	b085      	sub	sp, #20
 8001654:	af00      	add	r7, sp, #0
 8001656:	4603      	mov	r3, r0
 8001658:	71fb      	strb	r3, [r7, #7]
	/* used to return the communication result*/
	BME280_RETURN_FUNCTION_TYPE com_rslt = ERROR;
 800165a:	23ff      	movs	r3, #255	; 0xff
 800165c:	73fb      	strb	r3, [r7, #15]
	u8 v_data_u8 = BME280_INIT_VALUE;
 800165e:	2300      	movs	r3, #0
 8001660:	73bb      	strb	r3, [r7, #14]
	u8 v_prev_pow_mode_u8 = BME280_INIT_VALUE;
 8001662:	2300      	movs	r3, #0
 8001664:	737b      	strb	r3, [r7, #13]
	u8 v_pre_ctrl_hum_value_u8 = BME280_INIT_VALUE;
 8001666:	2300      	movs	r3, #0
 8001668:	733b      	strb	r3, [r7, #12]
	u8 v_pre_config_value_u8 = BME280_INIT_VALUE;
 800166a:	2300      	movs	r3, #0
 800166c:	72fb      	strb	r3, [r7, #11]
	/* check the p_bme280 structure pointer as NULL*/
	if (p_bme280 == BME280_NULL) {
 800166e:	4b52      	ldr	r3, [pc, #328]	; (80017b8 <bme280_set_oversamp_pressure+0x168>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d102      	bne.n	800167c <bme280_set_oversamp_pressure+0x2c>
		return E_BME280_NULL_PTR;
 8001676:	f06f 037e 	mvn.w	r3, #126	; 0x7e
 800167a:	e099      	b.n	80017b0 <bme280_set_oversamp_pressure+0x160>
		} else {
			v_data_u8 = p_bme280->ctrl_meas_reg;
 800167c:	4b4e      	ldr	r3, [pc, #312]	; (80017b8 <bme280_set_oversamp_pressure+0x168>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8001684:	73bb      	strb	r3, [r7, #14]
			v_data_u8 =
			BME280_SET_BITSLICE(v_data_u8,
 8001686:	7bbb      	ldrb	r3, [r7, #14]
 8001688:	b25b      	sxtb	r3, r3
 800168a:	f023 031c 	bic.w	r3, r3, #28
 800168e:	b25a      	sxtb	r2, r3
 8001690:	79fb      	ldrb	r3, [r7, #7]
 8001692:	009b      	lsls	r3, r3, #2
 8001694:	b25b      	sxtb	r3, r3
 8001696:	f003 031c 	and.w	r3, r3, #28
 800169a:	b25b      	sxtb	r3, r3
 800169c:	4313      	orrs	r3, r2
 800169e:	b25b      	sxtb	r3, r3
 80016a0:	b2db      	uxtb	r3, r3
			v_data_u8 =
 80016a2:	73bb      	strb	r3, [r7, #14]
			BME280_CTRL_MEAS_REG_OVERSAMP_PRESSURE, v_value_u8);
			com_rslt = bme280_get_power_mode(&v_prev_pow_mode_u8);
 80016a4:	f107 030d 	add.w	r3, r7, #13
 80016a8:	4618      	mov	r0, r3
 80016aa:	f000 f961 	bl	8001970 <bme280_get_power_mode>
 80016ae:	4603      	mov	r3, r0
 80016b0:	73fb      	strb	r3, [r7, #15]
			if (v_prev_pow_mode_u8 != BME280_SLEEP_MODE) {
 80016b2:	7b7b      	ldrb	r3, [r7, #13]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d034      	beq.n	8001722 <bme280_set_oversamp_pressure+0xd2>
				com_rslt += bme280_set_soft_rst();
 80016b8:	f000 fa46 	bl	8001b48 <bme280_set_soft_rst>
 80016bc:	4603      	mov	r3, r0
 80016be:	b2da      	uxtb	r2, r3
 80016c0:	7bfb      	ldrb	r3, [r7, #15]
 80016c2:	4413      	add	r3, r2
 80016c4:	b2db      	uxtb	r3, r3
 80016c6:	73fb      	strb	r3, [r7, #15]
				p_bme280->delay_msec(BME280_3MS_DELAY);
 80016c8:	4b3b      	ldr	r3, [pc, #236]	; (80017b8 <bme280_set_oversamp_pressure+0x168>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016ce:	2003      	movs	r0, #3
 80016d0:	4798      	blx	r3
				/* write previous value of
				configuration register*/
				v_pre_config_value_u8 = p_bme280->config_reg;
 80016d2:	4b39      	ldr	r3, [pc, #228]	; (80017b8 <bme280_set_oversamp_pressure+0x168>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80016da:	72fb      	strb	r3, [r7, #11]
				com_rslt = bme280_write_register(
 80016dc:	f107 030b 	add.w	r3, r7, #11
 80016e0:	2201      	movs	r2, #1
 80016e2:	4619      	mov	r1, r3
 80016e4:	20f5      	movs	r0, #245	; 0xf5
 80016e6:	f000 fb0f 	bl	8001d08 <bme280_write_register>
 80016ea:	4603      	mov	r3, r0
 80016ec:	73fb      	strb	r3, [r7, #15]
				&v_pre_config_value_u8,
				BME280_GEN_READ_WRITE_DATA_LENGTH);
				/* write previous value of
				humidity oversampling*/
				v_pre_ctrl_hum_value_u8 =
				p_bme280->ctrl_hum_reg;
 80016ee:	4b32      	ldr	r3, [pc, #200]	; (80017b8 <bme280_set_oversamp_pressure+0x168>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
				v_pre_ctrl_hum_value_u8 =
 80016f6:	733b      	strb	r3, [r7, #12]
				com_rslt += bme280_write_register(
 80016f8:	f107 030c 	add.w	r3, r7, #12
 80016fc:	2201      	movs	r2, #1
 80016fe:	4619      	mov	r1, r3
 8001700:	20f2      	movs	r0, #242	; 0xf2
 8001702:	f000 fb01 	bl	8001d08 <bme280_write_register>
 8001706:	4603      	mov	r3, r0
 8001708:	b2da      	uxtb	r2, r3
 800170a:	7bfb      	ldrb	r3, [r7, #15]
 800170c:	4413      	add	r3, r2
 800170e:	b2db      	uxtb	r3, r3
 8001710:	73fb      	strb	r3, [r7, #15]
					BME280_CTRL_HUMIDITY_REG,
				&v_pre_ctrl_hum_value_u8,
				BME280_GEN_READ_WRITE_DATA_LENGTH);
				/* write previous and updated value of
				control measurement register*/
				bme280_write_register(
 8001712:	f107 030e 	add.w	r3, r7, #14
 8001716:	2201      	movs	r2, #1
 8001718:	4619      	mov	r1, r3
 800171a:	20f4      	movs	r0, #244	; 0xf4
 800171c:	f000 faf4 	bl	8001d08 <bme280_write_register>
 8001720:	e00d      	b.n	800173e <bme280_set_oversamp_pressure+0xee>
					BME280_CTRL_MEAS_REG,
				&v_data_u8, BME280_GEN_READ_WRITE_DATA_LENGTH);
			} else {
				com_rslt = p_bme280->BME280_BUS_WRITE_FUNC(
 8001722:	4b25      	ldr	r3, [pc, #148]	; (80017b8 <bme280_set_oversamp_pressure+0x168>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8001728:	4b23      	ldr	r3, [pc, #140]	; (80017b8 <bme280_set_oversamp_pressure+0x168>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f893 0029 	ldrb.w	r0, [r3, #41]	; 0x29
 8001730:	f107 020e 	add.w	r2, r7, #14
 8001734:	2301      	movs	r3, #1
 8001736:	21f4      	movs	r1, #244	; 0xf4
 8001738:	47a0      	blx	r4
 800173a:	4603      	mov	r3, r0
 800173c:	73fb      	strb	r3, [r7, #15]
				p_bme280->dev_addr,
				BME280_CTRL_MEAS_REG_OVERSAMP_PRESSURE__REG,
				&v_data_u8, BME280_GEN_READ_WRITE_DATA_LENGTH);
			}
				p_bme280->oversamp_pressure = v_value_u8;
 800173e:	4b1e      	ldr	r3, [pc, #120]	; (80017b8 <bme280_set_oversamp_pressure+0x168>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	79fa      	ldrb	r2, [r7, #7]
 8001744:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
				/* read the control measurement register value*/
				com_rslt = bme280_read_register(
 8001748:	f107 030e 	add.w	r3, r7, #14
 800174c:	2201      	movs	r2, #1
 800174e:	4619      	mov	r1, r3
 8001750:	20f4      	movs	r0, #244	; 0xf4
 8001752:	f000 faff 	bl	8001d54 <bme280_read_register>
 8001756:	4603      	mov	r3, r0
 8001758:	73fb      	strb	r3, [r7, #15]
					BME280_CTRL_MEAS_REG,
				&v_data_u8, BME280_GEN_READ_WRITE_DATA_LENGTH);
				p_bme280->ctrl_meas_reg = v_data_u8;
 800175a:	4b17      	ldr	r3, [pc, #92]	; (80017b8 <bme280_set_oversamp_pressure+0x168>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	7bba      	ldrb	r2, [r7, #14]
 8001760:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
				/* read the control humidity register value*/
				com_rslt += bme280_read_register(
 8001764:	f107 030e 	add.w	r3, r7, #14
 8001768:	2201      	movs	r2, #1
 800176a:	4619      	mov	r1, r3
 800176c:	20f2      	movs	r0, #242	; 0xf2
 800176e:	f000 faf1 	bl	8001d54 <bme280_read_register>
 8001772:	4603      	mov	r3, r0
 8001774:	b2da      	uxtb	r2, r3
 8001776:	7bfb      	ldrb	r3, [r7, #15]
 8001778:	4413      	add	r3, r2
 800177a:	b2db      	uxtb	r3, r3
 800177c:	73fb      	strb	r3, [r7, #15]
					BME280_CTRL_HUMIDITY_REG,
				&v_data_u8, BME280_GEN_READ_WRITE_DATA_LENGTH);
				p_bme280->ctrl_hum_reg = v_data_u8;
 800177e:	4b0e      	ldr	r3, [pc, #56]	; (80017b8 <bme280_set_oversamp_pressure+0x168>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	7bba      	ldrb	r2, [r7, #14]
 8001784:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
				/* read the control
				configuration register value*/
				com_rslt += bme280_read_register(
 8001788:	f107 030e 	add.w	r3, r7, #14
 800178c:	2201      	movs	r2, #1
 800178e:	4619      	mov	r1, r3
 8001790:	20f5      	movs	r0, #245	; 0xf5
 8001792:	f000 fadf 	bl	8001d54 <bme280_read_register>
 8001796:	4603      	mov	r3, r0
 8001798:	b2da      	uxtb	r2, r3
 800179a:	7bfb      	ldrb	r3, [r7, #15]
 800179c:	4413      	add	r3, r2
 800179e:	b2db      	uxtb	r3, r3
 80017a0:	73fb      	strb	r3, [r7, #15]
					BME280_CONFIG_REG,
				&v_data_u8, BME280_GEN_READ_WRITE_DATA_LENGTH);
				p_bme280->config_reg = v_data_u8;
 80017a2:	4b05      	ldr	r3, [pc, #20]	; (80017b8 <bme280_set_oversamp_pressure+0x168>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	7bba      	ldrb	r2, [r7, #14]
 80017a8:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		}
	return com_rslt;
 80017ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80017b0:	4618      	mov	r0, r3
 80017b2:	3714      	adds	r7, #20
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd90      	pop	{r4, r7, pc}
 80017b8:	20000028 	.word	0x20000028

080017bc <bme280_set_oversamp_humidity>:
 *
 *
*/
BME280_RETURN_FUNCTION_TYPE bme280_set_oversamp_humidity(
u8 v_value_u8)
{
 80017bc:	b590      	push	{r4, r7, lr}
 80017be:	b085      	sub	sp, #20
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	4603      	mov	r3, r0
 80017c4:	71fb      	strb	r3, [r7, #7]
	/* used to return the communication result*/
	BME280_RETURN_FUNCTION_TYPE com_rslt = ERROR;
 80017c6:	23ff      	movs	r3, #255	; 0xff
 80017c8:	73fb      	strb	r3, [r7, #15]
	u8 v_data_u8 = BME280_INIT_VALUE;
 80017ca:	2300      	movs	r3, #0
 80017cc:	73bb      	strb	r3, [r7, #14]
	u8 pre_ctrl_meas_value = BME280_INIT_VALUE;
 80017ce:	2300      	movs	r3, #0
 80017d0:	737b      	strb	r3, [r7, #13]
	u8 v_pre_config_value_u8 = BME280_INIT_VALUE;
 80017d2:	2300      	movs	r3, #0
 80017d4:	733b      	strb	r3, [r7, #12]
	u8 v_prev_pow_mode_u8 = BME280_INIT_VALUE;
 80017d6:	2300      	movs	r3, #0
 80017d8:	72fb      	strb	r3, [r7, #11]
	/* check the p_bme280 structure pointer as NULL*/
	if (p_bme280 == BME280_NULL) {
 80017da:	4b64      	ldr	r3, [pc, #400]	; (800196c <bme280_set_oversamp_humidity+0x1b0>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d102      	bne.n	80017e8 <bme280_set_oversamp_humidity+0x2c>
		return E_BME280_NULL_PTR;
 80017e2:	f06f 037e 	mvn.w	r3, #126	; 0x7e
 80017e6:	e0bc      	b.n	8001962 <bme280_set_oversamp_humidity+0x1a6>
		} else {
			/* write humidity oversampling*/
			v_data_u8 = p_bme280->ctrl_hum_reg;
 80017e8:	4b60      	ldr	r3, [pc, #384]	; (800196c <bme280_set_oversamp_humidity+0x1b0>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80017f0:	73bb      	strb	r3, [r7, #14]
			v_data_u8 =
			BME280_SET_BITSLICE(v_data_u8,
 80017f2:	7bbb      	ldrb	r3, [r7, #14]
 80017f4:	b25b      	sxtb	r3, r3
 80017f6:	f023 0307 	bic.w	r3, r3, #7
 80017fa:	b25a      	sxtb	r2, r3
 80017fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001800:	f003 0307 	and.w	r3, r3, #7
 8001804:	b25b      	sxtb	r3, r3
 8001806:	4313      	orrs	r3, r2
 8001808:	b25b      	sxtb	r3, r3
 800180a:	b2db      	uxtb	r3, r3
			v_data_u8 =
 800180c:	73bb      	strb	r3, [r7, #14]
			BME280_CTRL_HUMIDITY_REG_OVERSAMP_HUMIDITY, v_value_u8);
			com_rslt = bme280_get_power_mode(&v_prev_pow_mode_u8);
 800180e:	f107 030b 	add.w	r3, r7, #11
 8001812:	4618      	mov	r0, r3
 8001814:	f000 f8ac 	bl	8001970 <bme280_get_power_mode>
 8001818:	4603      	mov	r3, r0
 800181a:	73fb      	strb	r3, [r7, #15]
			if (v_prev_pow_mode_u8 != BME280_SLEEP_MODE) {
 800181c:	7afb      	ldrb	r3, [r7, #11]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d03e      	beq.n	80018a0 <bme280_set_oversamp_humidity+0xe4>
				com_rslt += bme280_set_soft_rst();
 8001822:	f000 f991 	bl	8001b48 <bme280_set_soft_rst>
 8001826:	4603      	mov	r3, r0
 8001828:	b2da      	uxtb	r2, r3
 800182a:	7bfb      	ldrb	r3, [r7, #15]
 800182c:	4413      	add	r3, r2
 800182e:	b2db      	uxtb	r3, r3
 8001830:	73fb      	strb	r3, [r7, #15]
				p_bme280->delay_msec(BME280_3MS_DELAY);
 8001832:	4b4e      	ldr	r3, [pc, #312]	; (800196c <bme280_set_oversamp_humidity+0x1b0>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001838:	2003      	movs	r0, #3
 800183a:	4798      	blx	r3
				/* write previous value of
				configuration register*/
				v_pre_config_value_u8 = p_bme280->config_reg;
 800183c:	4b4b      	ldr	r3, [pc, #300]	; (800196c <bme280_set_oversamp_humidity+0x1b0>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8001844:	733b      	strb	r3, [r7, #12]
				com_rslt += bme280_write_register(
 8001846:	f107 030c 	add.w	r3, r7, #12
 800184a:	2201      	movs	r2, #1
 800184c:	4619      	mov	r1, r3
 800184e:	20f5      	movs	r0, #245	; 0xf5
 8001850:	f000 fa5a 	bl	8001d08 <bme280_write_register>
 8001854:	4603      	mov	r3, r0
 8001856:	b2da      	uxtb	r2, r3
 8001858:	7bfb      	ldrb	r3, [r7, #15]
 800185a:	4413      	add	r3, r2
 800185c:	b2db      	uxtb	r3, r3
 800185e:	73fb      	strb	r3, [r7, #15]
					BME280_CONFIG_REG,
				&v_pre_config_value_u8,
				BME280_GEN_READ_WRITE_DATA_LENGTH);
				/* write the value of control humidity*/
				com_rslt += bme280_write_register(
 8001860:	f107 030e 	add.w	r3, r7, #14
 8001864:	2201      	movs	r2, #1
 8001866:	4619      	mov	r1, r3
 8001868:	20f2      	movs	r0, #242	; 0xf2
 800186a:	f000 fa4d 	bl	8001d08 <bme280_write_register>
 800186e:	4603      	mov	r3, r0
 8001870:	b2da      	uxtb	r2, r3
 8001872:	7bfb      	ldrb	r3, [r7, #15]
 8001874:	4413      	add	r3, r2
 8001876:	b2db      	uxtb	r3, r3
 8001878:	73fb      	strb	r3, [r7, #15]
					BME280_CTRL_HUMIDITY_REG,
				&v_data_u8, BME280_GEN_READ_WRITE_DATA_LENGTH);
				/* write previous value of
				control measurement register*/
				pre_ctrl_meas_value =
				p_bme280->ctrl_meas_reg;
 800187a:	4b3c      	ldr	r3, [pc, #240]	; (800196c <bme280_set_oversamp_humidity+0x1b0>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
				pre_ctrl_meas_value =
 8001882:	737b      	strb	r3, [r7, #13]
				com_rslt += bme280_write_register(
 8001884:	f107 030d 	add.w	r3, r7, #13
 8001888:	2201      	movs	r2, #1
 800188a:	4619      	mov	r1, r3
 800188c:	20f4      	movs	r0, #244	; 0xf4
 800188e:	f000 fa3b 	bl	8001d08 <bme280_write_register>
 8001892:	4603      	mov	r3, r0
 8001894:	b2da      	uxtb	r2, r3
 8001896:	7bfb      	ldrb	r3, [r7, #15]
 8001898:	4413      	add	r3, r2
 800189a:	b2db      	uxtb	r3, r3
 800189c:	73fb      	strb	r3, [r7, #15]
 800189e:	e023      	b.n	80018e8 <bme280_set_oversamp_humidity+0x12c>
					BME280_CTRL_MEAS_REG,
				&pre_ctrl_meas_value,
				BME280_GEN_READ_WRITE_DATA_LENGTH);
			} else {
				com_rslt +=
				p_bme280->BME280_BUS_WRITE_FUNC(
 80018a0:	4b32      	ldr	r3, [pc, #200]	; (800196c <bme280_set_oversamp_humidity+0x1b0>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 80018a6:	4b31      	ldr	r3, [pc, #196]	; (800196c <bme280_set_oversamp_humidity+0x1b0>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f893 0029 	ldrb.w	r0, [r3, #41]	; 0x29
 80018ae:	f107 020e 	add.w	r2, r7, #14
 80018b2:	2301      	movs	r3, #1
 80018b4:	21f2      	movs	r1, #242	; 0xf2
 80018b6:	47a0      	blx	r4
 80018b8:	4603      	mov	r3, r0
 80018ba:	b2da      	uxtb	r2, r3
				com_rslt +=
 80018bc:	7bfb      	ldrb	r3, [r7, #15]
 80018be:	4413      	add	r3, r2
 80018c0:	b2db      	uxtb	r3, r3
 80018c2:	73fb      	strb	r3, [r7, #15]
				BME280_CTRL_HUMIDITY_REG_OVERSAMP_HUMIDITY__REG,
				&v_data_u8, BME280_GEN_READ_WRITE_DATA_LENGTH);
				/* Control humidity write will effective only
				after the control measurement register*/
				pre_ctrl_meas_value =
				p_bme280->ctrl_meas_reg;
 80018c4:	4b29      	ldr	r3, [pc, #164]	; (800196c <bme280_set_oversamp_humidity+0x1b0>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
				pre_ctrl_meas_value =
 80018cc:	737b      	strb	r3, [r7, #13]
				com_rslt += bme280_write_register(
 80018ce:	f107 030d 	add.w	r3, r7, #13
 80018d2:	2201      	movs	r2, #1
 80018d4:	4619      	mov	r1, r3
 80018d6:	20f4      	movs	r0, #244	; 0xf4
 80018d8:	f000 fa16 	bl	8001d08 <bme280_write_register>
 80018dc:	4603      	mov	r3, r0
 80018de:	b2da      	uxtb	r2, r3
 80018e0:	7bfb      	ldrb	r3, [r7, #15]
 80018e2:	4413      	add	r3, r2
 80018e4:	b2db      	uxtb	r3, r3
 80018e6:	73fb      	strb	r3, [r7, #15]
					BME280_CTRL_MEAS_REG,
				&pre_ctrl_meas_value,
				BME280_GEN_READ_WRITE_DATA_LENGTH);
			}
			p_bme280->oversamp_humidity = v_value_u8;
 80018e8:	4b20      	ldr	r3, [pc, #128]	; (800196c <bme280_set_oversamp_humidity+0x1b0>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	79fa      	ldrb	r2, [r7, #7]
 80018ee:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			/* read the control measurement register value*/
			com_rslt += bme280_read_register(BME280_CTRL_MEAS_REG,
 80018f2:	f107 030e 	add.w	r3, r7, #14
 80018f6:	2201      	movs	r2, #1
 80018f8:	4619      	mov	r1, r3
 80018fa:	20f4      	movs	r0, #244	; 0xf4
 80018fc:	f000 fa2a 	bl	8001d54 <bme280_read_register>
 8001900:	4603      	mov	r3, r0
 8001902:	b2da      	uxtb	r2, r3
 8001904:	7bfb      	ldrb	r3, [r7, #15]
 8001906:	4413      	add	r3, r2
 8001908:	b2db      	uxtb	r3, r3
 800190a:	73fb      	strb	r3, [r7, #15]
			&v_data_u8, BME280_GEN_READ_WRITE_DATA_LENGTH);
			p_bme280->ctrl_meas_reg = v_data_u8;
 800190c:	4b17      	ldr	r3, [pc, #92]	; (800196c <bme280_set_oversamp_humidity+0x1b0>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	7bba      	ldrb	r2, [r7, #14]
 8001912:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
			/* read the control humidity register value*/
			com_rslt += bme280_read_register(
 8001916:	f107 030e 	add.w	r3, r7, #14
 800191a:	2201      	movs	r2, #1
 800191c:	4619      	mov	r1, r3
 800191e:	20f2      	movs	r0, #242	; 0xf2
 8001920:	f000 fa18 	bl	8001d54 <bme280_read_register>
 8001924:	4603      	mov	r3, r0
 8001926:	b2da      	uxtb	r2, r3
 8001928:	7bfb      	ldrb	r3, [r7, #15]
 800192a:	4413      	add	r3, r2
 800192c:	b2db      	uxtb	r3, r3
 800192e:	73fb      	strb	r3, [r7, #15]
			BME280_CTRL_HUMIDITY_REG,
			&v_data_u8, BME280_GEN_READ_WRITE_DATA_LENGTH);
			p_bme280->ctrl_hum_reg = v_data_u8;
 8001930:	4b0e      	ldr	r3, [pc, #56]	; (800196c <bme280_set_oversamp_humidity+0x1b0>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	7bba      	ldrb	r2, [r7, #14]
 8001936:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
			/* read the control configuration register value*/
			com_rslt += bme280_read_register(BME280_CONFIG_REG,
 800193a:	f107 030e 	add.w	r3, r7, #14
 800193e:	2201      	movs	r2, #1
 8001940:	4619      	mov	r1, r3
 8001942:	20f5      	movs	r0, #245	; 0xf5
 8001944:	f000 fa06 	bl	8001d54 <bme280_read_register>
 8001948:	4603      	mov	r3, r0
 800194a:	b2da      	uxtb	r2, r3
 800194c:	7bfb      	ldrb	r3, [r7, #15]
 800194e:	4413      	add	r3, r2
 8001950:	b2db      	uxtb	r3, r3
 8001952:	73fb      	strb	r3, [r7, #15]
			&v_data_u8, BME280_GEN_READ_WRITE_DATA_LENGTH);
			p_bme280->config_reg = v_data_u8;
 8001954:	4b05      	ldr	r3, [pc, #20]	; (800196c <bme280_set_oversamp_humidity+0x1b0>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	7bba      	ldrb	r2, [r7, #14]
 800195a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		}
	return com_rslt;
 800195e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001962:	4618      	mov	r0, r3
 8001964:	3714      	adds	r7, #20
 8001966:	46bd      	mov	sp, r7
 8001968:	bd90      	pop	{r4, r7, pc}
 800196a:	bf00      	nop
 800196c:	20000028 	.word	0x20000028

08001970 <bme280_get_power_mode>:
 *	@retval -1 -> Error
 *
 *
*/
BME280_RETURN_FUNCTION_TYPE bme280_get_power_mode(u8 *v_power_mode_u8)
{
 8001970:	b590      	push	{r4, r7, lr}
 8001972:	b085      	sub	sp, #20
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
	/* used to return the communication result*/
	BME280_RETURN_FUNCTION_TYPE com_rslt = ERROR;
 8001978:	23ff      	movs	r3, #255	; 0xff
 800197a:	73fb      	strb	r3, [r7, #15]
	u8 v_mode_u8r = BME280_INIT_VALUE;
 800197c:	2300      	movs	r3, #0
 800197e:	73bb      	strb	r3, [r7, #14]
	/* check the p_bme280 structure pointer as NULL*/
	if (p_bme280 == BME280_NULL) {
 8001980:	4b10      	ldr	r3, [pc, #64]	; (80019c4 <bme280_get_power_mode+0x54>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d102      	bne.n	800198e <bme280_get_power_mode+0x1e>
		return E_BME280_NULL_PTR;
 8001988:	f06f 037e 	mvn.w	r3, #126	; 0x7e
 800198c:	e015      	b.n	80019ba <bme280_get_power_mode+0x4a>
		} else {
			com_rslt = p_bme280->BME280_BUS_READ_FUNC(
 800198e:	4b0d      	ldr	r3, [pc, #52]	; (80019c4 <bme280_get_power_mode+0x54>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8001994:	4b0b      	ldr	r3, [pc, #44]	; (80019c4 <bme280_get_power_mode+0x54>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f893 0029 	ldrb.w	r0, [r3, #41]	; 0x29
 800199c:	f107 020e 	add.w	r2, r7, #14
 80019a0:	2301      	movs	r3, #1
 80019a2:	21f4      	movs	r1, #244	; 0xf4
 80019a4:	47a0      	blx	r4
 80019a6:	4603      	mov	r3, r0
 80019a8:	73fb      	strb	r3, [r7, #15]
			p_bme280->dev_addr,
			BME280_CTRL_MEAS_REG_POWER_MODE__REG,
			&v_mode_u8r, BME280_GEN_READ_WRITE_DATA_LENGTH);
			*v_power_mode_u8 = BME280_GET_BITSLICE(v_mode_u8r,
 80019aa:	7bbb      	ldrb	r3, [r7, #14]
 80019ac:	f003 0303 	and.w	r3, r3, #3
 80019b0:	b2da      	uxtb	r2, r3
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	701a      	strb	r2, [r3, #0]
			BME280_CTRL_MEAS_REG_POWER_MODE);
		}
	return com_rslt;
 80019b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	3714      	adds	r7, #20
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd90      	pop	{r4, r7, pc}
 80019c2:	bf00      	nop
 80019c4:	20000028 	.word	0x20000028

080019c8 <bme280_set_power_mode>:
 *	@retval -1 -> Error
 *
 *
*/
BME280_RETURN_FUNCTION_TYPE bme280_set_power_mode(u8 v_power_mode_u8)
{
 80019c8:	b590      	push	{r4, r7, lr}
 80019ca:	b085      	sub	sp, #20
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	4603      	mov	r3, r0
 80019d0:	71fb      	strb	r3, [r7, #7]
	/* used to return the communication result*/
	BME280_RETURN_FUNCTION_TYPE com_rslt = ERROR;
 80019d2:	23ff      	movs	r3, #255	; 0xff
 80019d4:	73fb      	strb	r3, [r7, #15]
	u8 v_mode_u8r = BME280_INIT_VALUE;
 80019d6:	2300      	movs	r3, #0
 80019d8:	73bb      	strb	r3, [r7, #14]
	u8 v_prev_pow_mode_u8 = BME280_INIT_VALUE;
 80019da:	2300      	movs	r3, #0
 80019dc:	737b      	strb	r3, [r7, #13]
	u8 v_pre_ctrl_hum_value_u8 = BME280_INIT_VALUE;
 80019de:	2300      	movs	r3, #0
 80019e0:	733b      	strb	r3, [r7, #12]
	u8 v_pre_config_value_u8 = BME280_INIT_VALUE;
 80019e2:	2300      	movs	r3, #0
 80019e4:	72fb      	strb	r3, [r7, #11]
	u8 v_data_u8 = BME280_INIT_VALUE;
 80019e6:	2300      	movs	r3, #0
 80019e8:	72bb      	strb	r3, [r7, #10]
	/* check the p_bme280 structure pointer as NULL*/
	if (p_bme280 == BME280_NULL) {
 80019ea:	4b56      	ldr	r3, [pc, #344]	; (8001b44 <bme280_set_power_mode+0x17c>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d102      	bne.n	80019f8 <bme280_set_power_mode+0x30>
		return E_BME280_NULL_PTR;
 80019f2:	f06f 037e 	mvn.w	r3, #126	; 0x7e
 80019f6:	e0a0      	b.n	8001b3a <bme280_set_power_mode+0x172>
		} else {
			if (v_power_mode_u8 <= BME280_NORMAL_MODE) {
 80019f8:	79fb      	ldrb	r3, [r7, #7]
 80019fa:	2b03      	cmp	r3, #3
 80019fc:	f200 8099 	bhi.w	8001b32 <bme280_set_power_mode+0x16a>
				v_mode_u8r = p_bme280->ctrl_meas_reg;
 8001a00:	4b50      	ldr	r3, [pc, #320]	; (8001b44 <bme280_set_power_mode+0x17c>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8001a08:	73bb      	strb	r3, [r7, #14]
				v_mode_u8r =
				BME280_SET_BITSLICE(v_mode_u8r,
 8001a0a:	7bbb      	ldrb	r3, [r7, #14]
 8001a0c:	b25b      	sxtb	r3, r3
 8001a0e:	f023 0303 	bic.w	r3, r3, #3
 8001a12:	b25a      	sxtb	r2, r3
 8001a14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a18:	f003 0303 	and.w	r3, r3, #3
 8001a1c:	b25b      	sxtb	r3, r3
 8001a1e:	4313      	orrs	r3, r2
 8001a20:	b25b      	sxtb	r3, r3
 8001a22:	b2db      	uxtb	r3, r3
				v_mode_u8r =
 8001a24:	73bb      	strb	r3, [r7, #14]
				BME280_CTRL_MEAS_REG_POWER_MODE,
				v_power_mode_u8);
				com_rslt = bme280_get_power_mode(
 8001a26:	f107 030d 	add.w	r3, r7, #13
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f7ff ffa0 	bl	8001970 <bme280_get_power_mode>
 8001a30:	4603      	mov	r3, r0
 8001a32:	73fb      	strb	r3, [r7, #15]
					&v_prev_pow_mode_u8);
				if (v_prev_pow_mode_u8 != BME280_SLEEP_MODE) {
 8001a34:	7b7b      	ldrb	r3, [r7, #13]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d03a      	beq.n	8001ab0 <bme280_set_power_mode+0xe8>
					com_rslt += bme280_set_soft_rst();
 8001a3a:	f000 f885 	bl	8001b48 <bme280_set_soft_rst>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	b2da      	uxtb	r2, r3
 8001a42:	7bfb      	ldrb	r3, [r7, #15]
 8001a44:	4413      	add	r3, r2
 8001a46:	b2db      	uxtb	r3, r3
 8001a48:	73fb      	strb	r3, [r7, #15]
					p_bme280->delay_msec(BME280_3MS_DELAY);
 8001a4a:	4b3e      	ldr	r3, [pc, #248]	; (8001b44 <bme280_set_power_mode+0x17c>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a50:	2003      	movs	r0, #3
 8001a52:	4798      	blx	r3
					/* write previous value of
					configuration register*/
					v_pre_config_value_u8 =
					p_bme280->config_reg;
 8001a54:	4b3b      	ldr	r3, [pc, #236]	; (8001b44 <bme280_set_power_mode+0x17c>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
					v_pre_config_value_u8 =
 8001a5c:	72fb      	strb	r3, [r7, #11]
					com_rslt = bme280_write_register(
 8001a5e:	f107 030b 	add.w	r3, r7, #11
 8001a62:	2201      	movs	r2, #1
 8001a64:	4619      	mov	r1, r3
 8001a66:	20f5      	movs	r0, #245	; 0xf5
 8001a68:	f000 f94e 	bl	8001d08 <bme280_write_register>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	73fb      	strb	r3, [r7, #15]
					&v_pre_config_value_u8,
					BME280_GEN_READ_WRITE_DATA_LENGTH);
					/* write previous value of
					humidity oversampling*/
					v_pre_ctrl_hum_value_u8 =
					p_bme280->ctrl_hum_reg;
 8001a70:	4b34      	ldr	r3, [pc, #208]	; (8001b44 <bme280_set_power_mode+0x17c>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
					v_pre_ctrl_hum_value_u8 =
 8001a78:	733b      	strb	r3, [r7, #12]
					com_rslt += bme280_write_register(
 8001a7a:	f107 030c 	add.w	r3, r7, #12
 8001a7e:	2201      	movs	r2, #1
 8001a80:	4619      	mov	r1, r3
 8001a82:	20f2      	movs	r0, #242	; 0xf2
 8001a84:	f000 f940 	bl	8001d08 <bme280_write_register>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	b2da      	uxtb	r2, r3
 8001a8c:	7bfb      	ldrb	r3, [r7, #15]
 8001a8e:	4413      	add	r3, r2
 8001a90:	b2db      	uxtb	r3, r3
 8001a92:	73fb      	strb	r3, [r7, #15]
					BME280_CTRL_HUMIDITY_REG,
					&v_pre_ctrl_hum_value_u8,
					BME280_GEN_READ_WRITE_DATA_LENGTH);
					/* write previous and updated value of
					control measurement register*/
					com_rslt += bme280_write_register(
 8001a94:	f107 030e 	add.w	r3, r7, #14
 8001a98:	2201      	movs	r2, #1
 8001a9a:	4619      	mov	r1, r3
 8001a9c:	20f4      	movs	r0, #244	; 0xf4
 8001a9e:	f000 f933 	bl	8001d08 <bme280_write_register>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	b2da      	uxtb	r2, r3
 8001aa6:	7bfb      	ldrb	r3, [r7, #15]
 8001aa8:	4413      	add	r3, r2
 8001aaa:	b2db      	uxtb	r3, r3
 8001aac:	73fb      	strb	r3, [r7, #15]
 8001aae:	e00d      	b.n	8001acc <bme280_set_power_mode+0x104>
					BME280_CTRL_MEAS_REG,
					&v_mode_u8r,
					BME280_GEN_READ_WRITE_DATA_LENGTH);
				} else {
					com_rslt =
					p_bme280->BME280_BUS_WRITE_FUNC(
 8001ab0:	4b24      	ldr	r3, [pc, #144]	; (8001b44 <bme280_set_power_mode+0x17c>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8001ab6:	4b23      	ldr	r3, [pc, #140]	; (8001b44 <bme280_set_power_mode+0x17c>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f893 0029 	ldrb.w	r0, [r3, #41]	; 0x29
					com_rslt =
 8001abe:	f107 020e 	add.w	r2, r7, #14
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	21f4      	movs	r1, #244	; 0xf4
 8001ac6:	47a0      	blx	r4
 8001ac8:	4603      	mov	r3, r0
 8001aca:	73fb      	strb	r3, [r7, #15]
					BME280_CTRL_MEAS_REG_POWER_MODE__REG,
					&v_mode_u8r,
					BME280_GEN_READ_WRITE_DATA_LENGTH);
				}
				/* read the control measurement register value*/
				com_rslt = bme280_read_register(
 8001acc:	f107 030a 	add.w	r3, r7, #10
 8001ad0:	2201      	movs	r2, #1
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	20f4      	movs	r0, #244	; 0xf4
 8001ad6:	f000 f93d 	bl	8001d54 <bme280_read_register>
 8001ada:	4603      	mov	r3, r0
 8001adc:	73fb      	strb	r3, [r7, #15]
					BME280_CTRL_MEAS_REG,
				&v_data_u8, BME280_GEN_READ_WRITE_DATA_LENGTH);
				p_bme280->ctrl_meas_reg = v_data_u8;
 8001ade:	4b19      	ldr	r3, [pc, #100]	; (8001b44 <bme280_set_power_mode+0x17c>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	7aba      	ldrb	r2, [r7, #10]
 8001ae4:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
				/* read the control humidity register value*/
				com_rslt += bme280_read_register(
 8001ae8:	f107 030a 	add.w	r3, r7, #10
 8001aec:	2201      	movs	r2, #1
 8001aee:	4619      	mov	r1, r3
 8001af0:	20f2      	movs	r0, #242	; 0xf2
 8001af2:	f000 f92f 	bl	8001d54 <bme280_read_register>
 8001af6:	4603      	mov	r3, r0
 8001af8:	b2da      	uxtb	r2, r3
 8001afa:	7bfb      	ldrb	r3, [r7, #15]
 8001afc:	4413      	add	r3, r2
 8001afe:	b2db      	uxtb	r3, r3
 8001b00:	73fb      	strb	r3, [r7, #15]
					BME280_CTRL_HUMIDITY_REG,
				&v_data_u8, BME280_GEN_READ_WRITE_DATA_LENGTH);
				p_bme280->ctrl_hum_reg = v_data_u8;
 8001b02:	4b10      	ldr	r3, [pc, #64]	; (8001b44 <bme280_set_power_mode+0x17c>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	7aba      	ldrb	r2, [r7, #10]
 8001b08:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
				/* read the config register value*/
				com_rslt += bme280_read_register(
 8001b0c:	f107 030a 	add.w	r3, r7, #10
 8001b10:	2201      	movs	r2, #1
 8001b12:	4619      	mov	r1, r3
 8001b14:	20f5      	movs	r0, #245	; 0xf5
 8001b16:	f000 f91d 	bl	8001d54 <bme280_read_register>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	b2da      	uxtb	r2, r3
 8001b1e:	7bfb      	ldrb	r3, [r7, #15]
 8001b20:	4413      	add	r3, r2
 8001b22:	b2db      	uxtb	r3, r3
 8001b24:	73fb      	strb	r3, [r7, #15]
					BME280_CONFIG_REG,
				&v_data_u8, BME280_GEN_READ_WRITE_DATA_LENGTH);
				p_bme280->config_reg = v_data_u8;
 8001b26:	4b07      	ldr	r3, [pc, #28]	; (8001b44 <bme280_set_power_mode+0x17c>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	7aba      	ldrb	r2, [r7, #10]
 8001b2c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
 8001b30:	e001      	b.n	8001b36 <bme280_set_power_mode+0x16e>
			} else {
			com_rslt = E_BME280_OUT_OF_RANGE;
 8001b32:	23fe      	movs	r3, #254	; 0xfe
 8001b34:	73fb      	strb	r3, [r7, #15]
			}
		}
	return com_rslt;
 8001b36:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	3714      	adds	r7, #20
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd90      	pop	{r4, r7, pc}
 8001b42:	bf00      	nop
 8001b44:	20000028 	.word	0x20000028

08001b48 <bme280_set_soft_rst>:
 *	@retval -1 -> Error
 *
 *
*/
BME280_RETURN_FUNCTION_TYPE bme280_set_soft_rst(void)
{
 8001b48:	b590      	push	{r4, r7, lr}
 8001b4a:	b083      	sub	sp, #12
 8001b4c:	af00      	add	r7, sp, #0
	/* used to return the communication result*/
	BME280_RETURN_FUNCTION_TYPE com_rslt = ERROR;
 8001b4e:	23ff      	movs	r3, #255	; 0xff
 8001b50:	71fb      	strb	r3, [r7, #7]
	u8 v_data_u8 = BME280_SOFT_RESET_CODE;
 8001b52:	23b6      	movs	r3, #182	; 0xb6
 8001b54:	71bb      	strb	r3, [r7, #6]
	/* check the p_bme280 structure pointer as NULL*/
	if (p_bme280 == BME280_NULL) {
 8001b56:	4b0d      	ldr	r3, [pc, #52]	; (8001b8c <bme280_set_soft_rst+0x44>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d102      	bne.n	8001b64 <bme280_set_soft_rst+0x1c>
		return E_BME280_NULL_PTR;
 8001b5e:	f06f 037e 	mvn.w	r3, #126	; 0x7e
 8001b62:	e00e      	b.n	8001b82 <bme280_set_soft_rst+0x3a>
		} else {
			com_rslt = p_bme280->BME280_BUS_WRITE_FUNC(
 8001b64:	4b09      	ldr	r3, [pc, #36]	; (8001b8c <bme280_set_soft_rst+0x44>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8001b6a:	4b08      	ldr	r3, [pc, #32]	; (8001b8c <bme280_set_soft_rst+0x44>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f893 0029 	ldrb.w	r0, [r3, #41]	; 0x29
 8001b72:	1dba      	adds	r2, r7, #6
 8001b74:	2301      	movs	r3, #1
 8001b76:	21e0      	movs	r1, #224	; 0xe0
 8001b78:	47a0      	blx	r4
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	71fb      	strb	r3, [r7, #7]
			p_bme280->dev_addr,
			BME280_RST_REG, &v_data_u8,
			BME280_GEN_READ_WRITE_DATA_LENGTH);
		}
	return com_rslt;
 8001b7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	370c      	adds	r7, #12
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd90      	pop	{r4, r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	20000028 	.word	0x20000028

08001b90 <bme280_set_standby_durn>:
 *	@retval -1 -> Error
 *
 *
*/
BME280_RETURN_FUNCTION_TYPE bme280_set_standby_durn(u8 v_standby_durn_u8)
{
 8001b90:	b590      	push	{r4, r7, lr}
 8001b92:	b085      	sub	sp, #20
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	4603      	mov	r3, r0
 8001b98:	71fb      	strb	r3, [r7, #7]
	/* used to return the communication result*/
	BME280_RETURN_FUNCTION_TYPE com_rslt = ERROR;
 8001b9a:	23ff      	movs	r3, #255	; 0xff
 8001b9c:	73fb      	strb	r3, [r7, #15]
	u8 v_data_u8 = BME280_INIT_VALUE;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	73bb      	strb	r3, [r7, #14]
	u8 pre_ctrl_meas_value = BME280_INIT_VALUE;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	737b      	strb	r3, [r7, #13]
	u8 v_prev_pow_mode_u8 = BME280_INIT_VALUE;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	733b      	strb	r3, [r7, #12]
	u8 v_pre_ctrl_hum_value_u8 = BME280_INIT_VALUE;
 8001baa:	2300      	movs	r3, #0
 8001bac:	72fb      	strb	r3, [r7, #11]
	/* check the p_bme280 structure pointer as NULL*/
	if (p_bme280 == BME280_NULL) {
 8001bae:	4b55      	ldr	r3, [pc, #340]	; (8001d04 <bme280_set_standby_durn+0x174>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d102      	bne.n	8001bbc <bme280_set_standby_durn+0x2c>
		return E_BME280_NULL_PTR;
 8001bb6:	f06f 037e 	mvn.w	r3, #126	; 0x7e
 8001bba:	e09f      	b.n	8001cfc <bme280_set_standby_durn+0x16c>
		} else {
			v_data_u8 = p_bme280->config_reg;
 8001bbc:	4b51      	ldr	r3, [pc, #324]	; (8001d04 <bme280_set_standby_durn+0x174>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8001bc4:	73bb      	strb	r3, [r7, #14]
			v_data_u8 =
			BME280_SET_BITSLICE(v_data_u8,
 8001bc6:	7bbb      	ldrb	r3, [r7, #14]
 8001bc8:	b25b      	sxtb	r3, r3
 8001bca:	f003 031f 	and.w	r3, r3, #31
 8001bce:	b25a      	sxtb	r2, r3
 8001bd0:	79fb      	ldrb	r3, [r7, #7]
 8001bd2:	015b      	lsls	r3, r3, #5
 8001bd4:	b25b      	sxtb	r3, r3
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	b25b      	sxtb	r3, r3
 8001bda:	b2db      	uxtb	r3, r3
			v_data_u8 =
 8001bdc:	73bb      	strb	r3, [r7, #14]
			BME280_CONFIG_REG_TSB, v_standby_durn_u8);
			com_rslt = bme280_get_power_mode(&v_prev_pow_mode_u8);
 8001bde:	f107 030c 	add.w	r3, r7, #12
 8001be2:	4618      	mov	r0, r3
 8001be4:	f7ff fec4 	bl	8001970 <bme280_get_power_mode>
 8001be8:	4603      	mov	r3, r0
 8001bea:	73fb      	strb	r3, [r7, #15]
			if (v_prev_pow_mode_u8 != BME280_SLEEP_MODE) {
 8001bec:	7b3b      	ldrb	r3, [r7, #12]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d03e      	beq.n	8001c70 <bme280_set_standby_durn+0xe0>
				com_rslt += bme280_set_soft_rst();
 8001bf2:	f7ff ffa9 	bl	8001b48 <bme280_set_soft_rst>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	b2da      	uxtb	r2, r3
 8001bfa:	7bfb      	ldrb	r3, [r7, #15]
 8001bfc:	4413      	add	r3, r2
 8001bfe:	b2db      	uxtb	r3, r3
 8001c00:	73fb      	strb	r3, [r7, #15]
				p_bme280->delay_msec(BME280_3MS_DELAY);
 8001c02:	4b40      	ldr	r3, [pc, #256]	; (8001d04 <bme280_set_standby_durn+0x174>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c08:	2003      	movs	r0, #3
 8001c0a:	4798      	blx	r3
				/* write previous and updated value of
				configuration register*/
				com_rslt += bme280_write_register(
 8001c0c:	f107 030e 	add.w	r3, r7, #14
 8001c10:	2201      	movs	r2, #1
 8001c12:	4619      	mov	r1, r3
 8001c14:	20f5      	movs	r0, #245	; 0xf5
 8001c16:	f000 f877 	bl	8001d08 <bme280_write_register>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	b2da      	uxtb	r2, r3
 8001c1e:	7bfb      	ldrb	r3, [r7, #15]
 8001c20:	4413      	add	r3, r2
 8001c22:	b2db      	uxtb	r3, r3
 8001c24:	73fb      	strb	r3, [r7, #15]
					BME280_CONFIG_REG,
				&v_data_u8, BME280_GEN_READ_WRITE_DATA_LENGTH);
				/* write previous value of
				humidity oversampling*/
				v_pre_ctrl_hum_value_u8 =
				p_bme280->ctrl_hum_reg;
 8001c26:	4b37      	ldr	r3, [pc, #220]	; (8001d04 <bme280_set_standby_durn+0x174>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
				v_pre_ctrl_hum_value_u8 =
 8001c2e:	72fb      	strb	r3, [r7, #11]
				com_rslt += bme280_write_register(
 8001c30:	f107 030b 	add.w	r3, r7, #11
 8001c34:	2201      	movs	r2, #1
 8001c36:	4619      	mov	r1, r3
 8001c38:	20f2      	movs	r0, #242	; 0xf2
 8001c3a:	f000 f865 	bl	8001d08 <bme280_write_register>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	b2da      	uxtb	r2, r3
 8001c42:	7bfb      	ldrb	r3, [r7, #15]
 8001c44:	4413      	add	r3, r2
 8001c46:	b2db      	uxtb	r3, r3
 8001c48:	73fb      	strb	r3, [r7, #15]
				&v_pre_ctrl_hum_value_u8,
				BME280_GEN_READ_WRITE_DATA_LENGTH);
				/* write previous value of control
				measurement register*/
				pre_ctrl_meas_value =
				p_bme280->ctrl_meas_reg;
 8001c4a:	4b2e      	ldr	r3, [pc, #184]	; (8001d04 <bme280_set_standby_durn+0x174>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
				pre_ctrl_meas_value =
 8001c52:	737b      	strb	r3, [r7, #13]
				com_rslt += bme280_write_register(
 8001c54:	f107 030d 	add.w	r3, r7, #13
 8001c58:	2201      	movs	r2, #1
 8001c5a:	4619      	mov	r1, r3
 8001c5c:	20f4      	movs	r0, #244	; 0xf4
 8001c5e:	f000 f853 	bl	8001d08 <bme280_write_register>
 8001c62:	4603      	mov	r3, r0
 8001c64:	b2da      	uxtb	r2, r3
 8001c66:	7bfb      	ldrb	r3, [r7, #15]
 8001c68:	4413      	add	r3, r2
 8001c6a:	b2db      	uxtb	r3, r3
 8001c6c:	73fb      	strb	r3, [r7, #15]
 8001c6e:	e00d      	b.n	8001c8c <bme280_set_standby_durn+0xfc>
					BME280_CTRL_MEAS_REG,
				&pre_ctrl_meas_value,
				BME280_GEN_READ_WRITE_DATA_LENGTH);
			} else {
				com_rslt =
				p_bme280->BME280_BUS_WRITE_FUNC(
 8001c70:	4b24      	ldr	r3, [pc, #144]	; (8001d04 <bme280_set_standby_durn+0x174>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8001c76:	4b23      	ldr	r3, [pc, #140]	; (8001d04 <bme280_set_standby_durn+0x174>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f893 0029 	ldrb.w	r0, [r3, #41]	; 0x29
				com_rslt =
 8001c7e:	f107 020e 	add.w	r2, r7, #14
 8001c82:	2301      	movs	r3, #1
 8001c84:	21f5      	movs	r1, #245	; 0xf5
 8001c86:	47a0      	blx	r4
 8001c88:	4603      	mov	r3, r0
 8001c8a:	73fb      	strb	r3, [r7, #15]
				p_bme280->dev_addr,
				BME280_CONFIG_REG_TSB__REG,
				&v_data_u8, BME280_GEN_READ_WRITE_DATA_LENGTH);
			}
			/* read the control measurement register value*/
			com_rslt += bme280_read_register(BME280_CTRL_MEAS_REG,
 8001c8c:	f107 030e 	add.w	r3, r7, #14
 8001c90:	2201      	movs	r2, #1
 8001c92:	4619      	mov	r1, r3
 8001c94:	20f4      	movs	r0, #244	; 0xf4
 8001c96:	f000 f85d 	bl	8001d54 <bme280_read_register>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	b2da      	uxtb	r2, r3
 8001c9e:	7bfb      	ldrb	r3, [r7, #15]
 8001ca0:	4413      	add	r3, r2
 8001ca2:	b2db      	uxtb	r3, r3
 8001ca4:	73fb      	strb	r3, [r7, #15]
			&v_data_u8, BME280_GEN_READ_WRITE_DATA_LENGTH);
			p_bme280->ctrl_meas_reg = v_data_u8;
 8001ca6:	4b17      	ldr	r3, [pc, #92]	; (8001d04 <bme280_set_standby_durn+0x174>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	7bba      	ldrb	r2, [r7, #14]
 8001cac:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
			/* read the control humidity register value*/
			com_rslt += bme280_read_register(
 8001cb0:	f107 030e 	add.w	r3, r7, #14
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	20f2      	movs	r0, #242	; 0xf2
 8001cba:	f000 f84b 	bl	8001d54 <bme280_read_register>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	b2da      	uxtb	r2, r3
 8001cc2:	7bfb      	ldrb	r3, [r7, #15]
 8001cc4:	4413      	add	r3, r2
 8001cc6:	b2db      	uxtb	r3, r3
 8001cc8:	73fb      	strb	r3, [r7, #15]
			BME280_CTRL_HUMIDITY_REG,
			&v_data_u8, BME280_GEN_READ_WRITE_DATA_LENGTH);
			p_bme280->ctrl_hum_reg = v_data_u8;
 8001cca:	4b0e      	ldr	r3, [pc, #56]	; (8001d04 <bme280_set_standby_durn+0x174>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	7bba      	ldrb	r2, [r7, #14]
 8001cd0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
			/* read the configuration register value*/
			com_rslt += bme280_read_register(BME280_CONFIG_REG,
 8001cd4:	f107 030e 	add.w	r3, r7, #14
 8001cd8:	2201      	movs	r2, #1
 8001cda:	4619      	mov	r1, r3
 8001cdc:	20f5      	movs	r0, #245	; 0xf5
 8001cde:	f000 f839 	bl	8001d54 <bme280_read_register>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	b2da      	uxtb	r2, r3
 8001ce6:	7bfb      	ldrb	r3, [r7, #15]
 8001ce8:	4413      	add	r3, r2
 8001cea:	b2db      	uxtb	r3, r3
 8001cec:	73fb      	strb	r3, [r7, #15]
			&v_data_u8, BME280_GEN_READ_WRITE_DATA_LENGTH);
			p_bme280->config_reg = v_data_u8;
 8001cee:	4b05      	ldr	r3, [pc, #20]	; (8001d04 <bme280_set_standby_durn+0x174>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	7bba      	ldrb	r2, [r7, #14]
 8001cf4:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		}
	return com_rslt;
 8001cf8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	3714      	adds	r7, #20
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd90      	pop	{r4, r7, pc}
 8001d04:	20000028 	.word	0x20000028

08001d08 <bme280_write_register>:
 *
 *
 */
BME280_RETURN_FUNCTION_TYPE bme280_write_register(u8 v_addr_u8,
u8 *v_data_u8, u8 v_len_u8)
{
 8001d08:	b590      	push	{r4, r7, lr}
 8001d0a:	b085      	sub	sp, #20
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	4603      	mov	r3, r0
 8001d10:	6039      	str	r1, [r7, #0]
 8001d12:	71fb      	strb	r3, [r7, #7]
 8001d14:	4613      	mov	r3, r2
 8001d16:	71bb      	strb	r3, [r7, #6]
	/* used to return the communication result*/
	BME280_RETURN_FUNCTION_TYPE com_rslt = ERROR;
 8001d18:	23ff      	movs	r3, #255	; 0xff
 8001d1a:	73fb      	strb	r3, [r7, #15]
	/* check the p_bme280 structure pointer as NULL*/
	if (p_bme280 == BME280_NULL) {
 8001d1c:	4b0c      	ldr	r3, [pc, #48]	; (8001d50 <bme280_write_register+0x48>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d102      	bne.n	8001d2a <bme280_write_register+0x22>
		return E_BME280_NULL_PTR;
 8001d24:	f06f 037e 	mvn.w	r3, #126	; 0x7e
 8001d28:	e00e      	b.n	8001d48 <bme280_write_register+0x40>
		} else {
			com_rslt = p_bme280->BME280_BUS_WRITE_FUNC(
 8001d2a:	4b09      	ldr	r3, [pc, #36]	; (8001d50 <bme280_write_register+0x48>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8001d30:	4b07      	ldr	r3, [pc, #28]	; (8001d50 <bme280_write_register+0x48>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f893 0029 	ldrb.w	r0, [r3, #41]	; 0x29
 8001d38:	79bb      	ldrb	r3, [r7, #6]
 8001d3a:	79f9      	ldrb	r1, [r7, #7]
 8001d3c:	683a      	ldr	r2, [r7, #0]
 8001d3e:	47a0      	blx	r4
 8001d40:	4603      	mov	r3, r0
 8001d42:	73fb      	strb	r3, [r7, #15]
			p_bme280->dev_addr,
			v_addr_u8, v_data_u8, v_len_u8);
		}
	return com_rslt;
 8001d44:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001d48:	4618      	mov	r0, r3
 8001d4a:	3714      	adds	r7, #20
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd90      	pop	{r4, r7, pc}
 8001d50:	20000028 	.word	0x20000028

08001d54 <bme280_read_register>:
 *
 *
 */
BME280_RETURN_FUNCTION_TYPE bme280_read_register(u8 v_addr_u8,
u8 *v_data_u8, u8 v_len_u8)
{
 8001d54:	b590      	push	{r4, r7, lr}
 8001d56:	b085      	sub	sp, #20
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	6039      	str	r1, [r7, #0]
 8001d5e:	71fb      	strb	r3, [r7, #7]
 8001d60:	4613      	mov	r3, r2
 8001d62:	71bb      	strb	r3, [r7, #6]
	/* used to return the communication result*/
	BME280_RETURN_FUNCTION_TYPE com_rslt = ERROR;
 8001d64:	23ff      	movs	r3, #255	; 0xff
 8001d66:	73fb      	strb	r3, [r7, #15]
	/* check the p_bme280 structure pointer as NULL*/
	if (p_bme280 == BME280_NULL) {
 8001d68:	4b0c      	ldr	r3, [pc, #48]	; (8001d9c <bme280_read_register+0x48>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d102      	bne.n	8001d76 <bme280_read_register+0x22>
		return E_BME280_NULL_PTR;
 8001d70:	f06f 037e 	mvn.w	r3, #126	; 0x7e
 8001d74:	e00e      	b.n	8001d94 <bme280_read_register+0x40>
		} else {
			com_rslt = p_bme280->BME280_BUS_READ_FUNC(
 8001d76:	4b09      	ldr	r3, [pc, #36]	; (8001d9c <bme280_read_register+0x48>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8001d7c:	4b07      	ldr	r3, [pc, #28]	; (8001d9c <bme280_read_register+0x48>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f893 0029 	ldrb.w	r0, [r3, #41]	; 0x29
 8001d84:	79bb      	ldrb	r3, [r7, #6]
 8001d86:	79f9      	ldrb	r1, [r7, #7]
 8001d88:	683a      	ldr	r2, [r7, #0]
 8001d8a:	47a0      	blx	r4
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	73fb      	strb	r3, [r7, #15]
			p_bme280->dev_addr,
			v_addr_u8, v_data_u8, v_len_u8);
		}
	return com_rslt;
 8001d90:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	3714      	adds	r7, #20
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd90      	pop	{r4, r7, pc}
 8001d9c:	20000028 	.word	0x20000028

08001da0 <BME280_SPI_bus_read>:
 *	\param reg_addr : Address of the first register, will data is going to be read
 *	\param reg_data : This data read from the sensor, which is hold in an array
 *	\param cnt : The no of byte of data to be read
 */
s8 BME280_SPI_bus_read(u8 dev_addr, u8 reg_addr, u8 *reg_data, u8 cnt)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b094      	sub	sp, #80	; 0x50
 8001da4:	af02      	add	r7, sp, #8
 8001da6:	603a      	str	r2, [r7, #0]
 8001da8:	461a      	mov	r2, r3
 8001daa:	4603      	mov	r3, r0
 8001dac:	71fb      	strb	r3, [r7, #7]
 8001dae:	460b      	mov	r3, r1
 8001db0:	71bb      	strb	r3, [r7, #6]
 8001db2:	4613      	mov	r3, r2
 8001db4:	717b      	strb	r3, [r7, #5]
	HAL_StatusTypeDef status = HAL_OK;
 8001db6:	2300      	movs	r3, #0
 8001db8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
	s32 iError=BME280_INIT_VALUE;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	647b      	str	r3, [r7, #68]	; 0x44
	u8 txarray[SPI_BUFFER_LEN]={0,};
 8001dc0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	601a      	str	r2, [r3, #0]
 8001dc8:	605a      	str	r2, [r3, #4]
 8001dca:	609a      	str	r2, [r3, #8]
 8001dcc:	60da      	str	r2, [r3, #12]
 8001dce:	611a      	str	r2, [r3, #16]
 8001dd0:	615a      	str	r2, [r3, #20]
 8001dd2:	619a      	str	r2, [r3, #24]
	u8 rxarray[SPI_BUFFER_LEN] = {0,};
 8001dd4:	f107 0308 	add.w	r3, r7, #8
 8001dd8:	2200      	movs	r2, #0
 8001dda:	601a      	str	r2, [r3, #0]
 8001ddc:	605a      	str	r2, [r3, #4]
 8001dde:	609a      	str	r2, [r3, #8]
 8001de0:	60da      	str	r2, [r3, #12]
 8001de2:	611a      	str	r2, [r3, #16]
 8001de4:	615a      	str	r2, [r3, #20]
 8001de6:	619a      	str	r2, [r3, #24]
	u8 stringpos;
	/*	For the SPI mode only 7 bits of register addresses are used.
	The MSB of register address is declared the bit what functionality it is
	read/write (read as 1/write as BME280_INIT_VALUE)*/
	txarray[BME280_INIT_VALUE] = reg_addr|SPI_READ;/*read routine is initiated register address is mask with 0x80*/
 8001de8:	79bb      	ldrb	r3, [r7, #6]
 8001dea:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001dee:	b2db      	uxtb	r3, r3
 8001df0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

	HAL_GPIO_WritePin( GPIOB, GPIO_PIN_6, GPIO_PIN_RESET );
 8001df4:	2200      	movs	r2, #0
 8001df6:	2140      	movs	r1, #64	; 0x40
 8001df8:	4825      	ldr	r0, [pc, #148]	; (8001e90 <BME280_SPI_bus_read+0xf0>)
 8001dfa:	f000 ff75 	bl	8002ce8 <HAL_GPIO_WritePin>
	status = HAL_SPI_TransmitReceive( &hspi1, (uint8_t *)(&txarray), (uint8_t *)(&rxarray), cnt+1, 500);
 8001dfe:	797b      	ldrb	r3, [r7, #5]
 8001e00:	b29b      	uxth	r3, r3
 8001e02:	3301      	adds	r3, #1
 8001e04:	b298      	uxth	r0, r3
 8001e06:	f107 0208 	add.w	r2, r7, #8
 8001e0a:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8001e0e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001e12:	9300      	str	r3, [sp, #0]
 8001e14:	4603      	mov	r3, r0
 8001e16:	481f      	ldr	r0, [pc, #124]	; (8001e94 <BME280_SPI_bus_read+0xf4>)
 8001e18:	f001 fdf8 	bl	8003a0c <HAL_SPI_TransmitReceive>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
	while( hspi1.State == HAL_SPI_STATE_BUSY ) {};
 8001e22:	bf00      	nop
 8001e24:	4b1b      	ldr	r3, [pc, #108]	; (8001e94 <BME280_SPI_bus_read+0xf4>)
 8001e26:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001e2a:	b2db      	uxtb	r3, r3
 8001e2c:	2b02      	cmp	r3, #2
 8001e2e:	d0f9      	beq.n	8001e24 <BME280_SPI_bus_read+0x84>
	HAL_GPIO_WritePin( GPIOB, GPIO_PIN_6, GPIO_PIN_SET );
 8001e30:	2201      	movs	r2, #1
 8001e32:	2140      	movs	r1, #64	; 0x40
 8001e34:	4816      	ldr	r0, [pc, #88]	; (8001e90 <BME280_SPI_bus_read+0xf0>)
 8001e36:	f000 ff57 	bl	8002ce8 <HAL_GPIO_WritePin>
//	__HAL_SPI_DISABLE(&hspi1);
	HAL_Delay(5); // since i can't find a buffer flushing command
 8001e3a:	2005      	movs	r0, #5
 8001e3c:	f000 fc6c 	bl	8002718 <HAL_Delay>
	for (stringpos = BME280_INIT_VALUE; stringpos < cnt; stringpos++) {
 8001e40:	2300      	movs	r3, #0
 8001e42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8001e46:	e011      	b.n	8001e6c <BME280_SPI_bus_read+0xcc>
		*(reg_data + stringpos) = rxarray[stringpos+BME280_DATA_INDEX];
 8001e48:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001e4c:	1c5a      	adds	r2, r3, #1
 8001e4e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001e52:	6839      	ldr	r1, [r7, #0]
 8001e54:	440b      	add	r3, r1
 8001e56:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8001e5a:	440a      	add	r2, r1
 8001e5c:	f812 2c40 	ldrb.w	r2, [r2, #-64]
 8001e60:	701a      	strb	r2, [r3, #0]
	for (stringpos = BME280_INIT_VALUE; stringpos < cnt; stringpos++) {
 8001e62:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001e66:	3301      	adds	r3, #1
 8001e68:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8001e6c:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 8001e70:	797b      	ldrb	r3, [r7, #5]
 8001e72:	429a      	cmp	r2, r3
 8001e74:	d3e8      	bcc.n	8001e48 <BME280_SPI_bus_read+0xa8>
	}

    if (status != HAL_OK)
 8001e76:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d002      	beq.n	8001e84 <BME280_SPI_bus_read+0xe4>
    {
    	// The BME280 API calls for 0 return value as a success, and -1 returned as failure
    	iError = (-1);
 8001e7e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001e82:	647b      	str	r3, [r7, #68]	; 0x44
    }
	return (s8)iError;
 8001e84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e86:	b25b      	sxtb	r3, r3
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	3748      	adds	r7, #72	; 0x48
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd80      	pop	{r7, pc}
 8001e90:	40020400 	.word	0x40020400
 8001e94:	20000068 	.word	0x20000068

08001e98 <BME280_SPI_bus_write>:
 *	\param reg_data : It is a value hold in the array,
 *		will be used for write the value into the register
 *	\param cnt : The no of byte of data to be write
 */
s8 BME280_SPI_bus_write(u8 dev_addr, u8 reg_addr, u8 *reg_data, u8 cnt)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b092      	sub	sp, #72	; 0x48
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	603a      	str	r2, [r7, #0]
 8001ea0:	461a      	mov	r2, r3
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	71fb      	strb	r3, [r7, #7]
 8001ea6:	460b      	mov	r3, r1
 8001ea8:	71bb      	strb	r3, [r7, #6]
 8001eaa:	4613      	mov	r3, r2
 8001eac:	717b      	strb	r3, [r7, #5]
	HAL_StatusTypeDef status = HAL_OK;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
	s32 iError = BME280_INIT_VALUE;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	647b      	str	r3, [r7, #68]	; 0x44
	u8 array[SPI_BUFFER_LEN * BME280_ADDRESS_INDEX];
	u8 stringpos = BME280_INIT_VALUE;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	u8 index = BME280_INIT_VALUE;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
	for (stringpos = BME280_INIT_VALUE; stringpos < cnt; stringpos++) {
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8001eca:	e024      	b.n	8001f16 <BME280_SPI_bus_write+0x7e>
		/* the operation of (reg_addr++)&0x7F done as per the
		SPI communication protocol specified in the data sheet*/
		index = stringpos * BME280_ADDRESS_INDEX;
 8001ecc:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001ed0:	005b      	lsls	r3, r3, #1
 8001ed2:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
		array[index] = (reg_addr++) & SPI_WRITE;
 8001ed6:	79bb      	ldrb	r3, [r7, #6]
 8001ed8:	1c5a      	adds	r2, r3, #1
 8001eda:	71ba      	strb	r2, [r7, #6]
 8001edc:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
 8001ee0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001ee4:	b2d9      	uxtb	r1, r3
 8001ee6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001eea:	4413      	add	r3, r2
 8001eec:	460a      	mov	r2, r1
 8001eee:	f803 2c40 	strb.w	r2, [r3, #-64]
		//printf("%X ", array[stringpos]);
		array[index + BME280_DATA_INDEX] = *(reg_data + stringpos);
 8001ef2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001ef6:	683a      	ldr	r2, [r7, #0]
 8001ef8:	441a      	add	r2, r3
 8001efa:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8001efe:	3301      	adds	r3, #1
 8001f00:	7812      	ldrb	r2, [r2, #0]
 8001f02:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8001f06:	440b      	add	r3, r1
 8001f08:	f803 2c40 	strb.w	r2, [r3, #-64]
	for (stringpos = BME280_INIT_VALUE; stringpos < cnt; stringpos++) {
 8001f0c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001f10:	3301      	adds	r3, #1
 8001f12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8001f16:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 8001f1a:	797b      	ldrb	r3, [r7, #5]
 8001f1c:	429a      	cmp	r2, r3
 8001f1e:	d3d5      	bcc.n	8001ecc <BME280_SPI_bus_write+0x34>
	}

	HAL_GPIO_WritePin( GPIOB, GPIO_PIN_6, GPIO_PIN_RESET );
 8001f20:	2200      	movs	r2, #0
 8001f22:	2140      	movs	r1, #64	; 0x40
 8001f24:	4814      	ldr	r0, [pc, #80]	; (8001f78 <BME280_SPI_bus_write+0xe0>)
 8001f26:	f000 fedf 	bl	8002ce8 <HAL_GPIO_WritePin>
	status = HAL_SPI_Transmit( &hspi1, (uint8_t*)(&array), cnt*2, 500);
 8001f2a:	797b      	ldrb	r3, [r7, #5]
 8001f2c:	b29b      	uxth	r3, r3
 8001f2e:	005b      	lsls	r3, r3, #1
 8001f30:	b29a      	uxth	r2, r3
 8001f32:	f107 0108 	add.w	r1, r7, #8
 8001f36:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001f3a:	4810      	ldr	r0, [pc, #64]	; (8001f7c <BME280_SPI_bus_write+0xe4>)
 8001f3c:	f001 fc32 	bl	80037a4 <HAL_SPI_Transmit>
 8001f40:	4603      	mov	r3, r0
 8001f42:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
	while( hspi1.State == HAL_SPI_STATE_BUSY ) {};
 8001f46:	bf00      	nop
 8001f48:	4b0c      	ldr	r3, [pc, #48]	; (8001f7c <BME280_SPI_bus_write+0xe4>)
 8001f4a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001f4e:	b2db      	uxtb	r3, r3
 8001f50:	2b02      	cmp	r3, #2
 8001f52:	d0f9      	beq.n	8001f48 <BME280_SPI_bus_write+0xb0>
	HAL_GPIO_WritePin( GPIOB, GPIO_PIN_6, GPIO_PIN_SET );
 8001f54:	2201      	movs	r2, #1
 8001f56:	2140      	movs	r1, #64	; 0x40
 8001f58:	4807      	ldr	r0, [pc, #28]	; (8001f78 <BME280_SPI_bus_write+0xe0>)
 8001f5a:	f000 fec5 	bl	8002ce8 <HAL_GPIO_WritePin>
//	__HAL_SPI_DISABLE(&hspi1);

    if (status != HAL_OK)
 8001f5e:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d002      	beq.n	8001f6c <BME280_SPI_bus_write+0xd4>
    {
    	// The BME280 API calls for 0 return value as a success, and -1 returned as failure
    	iError = (-1);
 8001f66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f6a:	647b      	str	r3, [r7, #68]	; 0x44
    }
	return (s8)iError;
 8001f6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f6e:	b25b      	sxtb	r3, r3
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	3748      	adds	r7, #72	; 0x48
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	40020400 	.word	0x40020400
 8001f7c:	20000068 	.word	0x20000068

08001f80 <BME280_delay_msek>:
/*	Brief : The delay routine
 *	\param : delay in ms
*/
// TODO: Test lai ham nay sau, tai sao lai la 10*milliseconds
void BME280_delay_msek(u32 msek)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b082      	sub	sp, #8
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
	/*Here you can write your own delay routine*/
	HAL_Delay(10*msek);
 8001f88:	687a      	ldr	r2, [r7, #4]
 8001f8a:	4613      	mov	r3, r2
 8001f8c:	009b      	lsls	r3, r3, #2
 8001f8e:	4413      	add	r3, r2
 8001f90:	005b      	lsls	r3, r3, #1
 8001f92:	4618      	mov	r0, r3
 8001f94:	f000 fbc0 	bl	8002718 <HAL_Delay>
}
 8001f98:	bf00      	nop
 8001f9a:	3708      	adds	r7, #8
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}

08001fa0 <SPI_routine>:

s8 SPI_routine(void) {
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	af00      	add	r7, sp, #0
 *	Bus write function pointer: BME280_WR_FUNC_PTR
 *	Bus read function pointer: BME280_RD_FUNC_PTR
 *	Delay function pointer: delay_msec
 *--------------------------------------------------------------------------*/

	bme280.bus_write = BME280_SPI_bus_write;
 8001fa4:	4b07      	ldr	r3, [pc, #28]	; (8001fc4 <SPI_routine+0x24>)
 8001fa6:	4a08      	ldr	r2, [pc, #32]	; (8001fc8 <SPI_routine+0x28>)
 8001fa8:	631a      	str	r2, [r3, #48]	; 0x30
	bme280.bus_read = BME280_SPI_bus_read;
 8001faa:	4b06      	ldr	r3, [pc, #24]	; (8001fc4 <SPI_routine+0x24>)
 8001fac:	4a07      	ldr	r2, [pc, #28]	; (8001fcc <SPI_routine+0x2c>)
 8001fae:	635a      	str	r2, [r3, #52]	; 0x34
	bme280.delay_msec = BME280_delay_msek;
 8001fb0:	4b04      	ldr	r3, [pc, #16]	; (8001fc4 <SPI_routine+0x24>)
 8001fb2:	4a07      	ldr	r2, [pc, #28]	; (8001fd0 <SPI_routine+0x30>)
 8001fb4:	639a      	str	r2, [r3, #56]	; 0x38
 *  Drop the chip select pin to low - this tells the BME280 to
 *  use SPI mode. It will not respond to I2C commands until you
 *  reset the power to it.
 */
//	HAL_GPIO_WritePin(GPIOB, SPI2_CS1_Pin, GPIO_PIN_RESET);
	HAL_Delay(10);
 8001fb6:	200a      	movs	r0, #10
 8001fb8:	f000 fbae 	bl	8002718 <HAL_Delay>
//	HAL_GPIO_WritePin(GPIOB, SPI2_CS1_Pin, GPIO_PIN_SET);

	return BME280_INIT_VALUE;
 8001fbc:	2300      	movs	r3, #0
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	2000002c 	.word	0x2000002c
 8001fc8:	08001e99 	.word	0x08001e99
 8001fcc:	08001da1 	.word	0x08001da1
 8001fd0:	08001f81 	.word	0x08001f81
 8001fd4:	00000000 	.word	0x00000000

08001fd8 <bme280_data_readout_template>:

s32 bme280_data_readout_template(void)
{
 8001fd8:	b5b0      	push	{r4, r5, r7, lr}
 8001fda:	b090      	sub	sp, #64	; 0x40
 8001fdc:	af00      	add	r7, sp, #0
	/* The variable used to assign the standby time*/
	u8 v_stand_by_time_u8 = BME280_INIT_VALUE;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	/* The variable used to read uncompensated temperature*/
	s32 v_data_uncomp_temp_s32 = BME280_INIT_VALUE;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	627b      	str	r3, [r7, #36]	; 0x24
	/* The variable used to read uncompensated pressure*/
	s32 v_data_uncomp_pres_s32 = BME280_INIT_VALUE;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	623b      	str	r3, [r7, #32]
	/* The variable used to read uncompensated pressure*/
	s32 v_data_uncomp_hum_s32 = BME280_INIT_VALUE;
 8001fec:	2300      	movs	r3, #0
 8001fee:	61fb      	str	r3, [r7, #28]
	/* The variable used to read compensated temperature*/
	s32 v_comp_temp_s32[2] = {BME280_INIT_VALUE, BME280_INIT_VALUE};
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	617b      	str	r3, [r7, #20]
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	61bb      	str	r3, [r7, #24]
	/* The variable used to read compensated pressure*/
	u32 v_comp_press_u32[2] = {BME280_INIT_VALUE, BME280_INIT_VALUE};
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	60fb      	str	r3, [r7, #12]
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	613b      	str	r3, [r7, #16]
	/* The variable used to read compensated humidity*/
	u32 v_comp_humidity_u32[2] = {BME280_INIT_VALUE, BME280_INIT_VALUE};
 8002000:	2300      	movs	r3, #0
 8002002:	607b      	str	r3, [r7, #4]
 8002004:	2300      	movs	r3, #0
 8002006:	60bb      	str	r3, [r7, #8]

	/* result of communication results*/
	s32 com_rslt = ERROR;
 8002008:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800200c:	63bb      	str	r3, [r7, #56]	; 0x38
 /*********************** START INITIALIZATION ************************/
  /*	Based on the user need configure I2C or SPI interface.
  *	It is example code to explain how to use the bme280 API*/
 	#ifdef BME280_API
	//I2C_routine();
	SPI_routine();
 800200e:	f7ff ffc7 	bl	8001fa0 <SPI_routine>
 *	I2C address
 *	Bus Write
 *	Bus read
 *	Chip id
*-------------------------------------------------------------------------*/
	com_rslt = bme280_init(&bme280);
 8002012:	4885      	ldr	r0, [pc, #532]	; (8002228 <bme280_data_readout_template+0x250>)
 8002014:	f7fe fe96 	bl	8000d44 <bme280_init>
 8002018:	4603      	mov	r3, r0
 800201a:	63bb      	str	r3, [r7, #56]	; 0x38
	/*	For initialization it is required to set the mode of
	 *	the sensor as "NORMAL"
	 *	data acquisition/read/write is possible in this mode
	 *	by using the below API able to set the power mode as NORMAL*/
	/* Set the power mode as NORMAL*/
	com_rslt += bme280_set_power_mode(BME280_FORCED_MODE);
 800201c:	2001      	movs	r0, #1
 800201e:	f7ff fcd3 	bl	80019c8 <bme280_set_power_mode>
 8002022:	4603      	mov	r3, r0
 8002024:	461a      	mov	r2, r3
 8002026:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002028:	4413      	add	r3, r2
 800202a:	63bb      	str	r3, [r7, #56]	; 0x38
	 * changes to this registers only become effective after a write operation to
	 * "BME280_CTRLMEAS_REG" register.
	 * In the code automated reading and writing of "BME280_CTRLHUM_REG_OSRSH"
	 * register first set the "BME280_CTRLHUM_REG_OSRSH" and then read and write
	 * the "BME280_CTRLMEAS_REG" register in the function*/
	com_rslt += bme280_set_oversamp_humidity(BME280_OVERSAMP_1X);
 800202c:	2001      	movs	r0, #1
 800202e:	f7ff fbc5 	bl	80017bc <bme280_set_oversamp_humidity>
 8002032:	4603      	mov	r3, r0
 8002034:	461a      	mov	r2, r3
 8002036:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002038:	4413      	add	r3, r2
 800203a:	63bb      	str	r3, [r7, #56]	; 0x38

	/* set the pressure oversampling*/
	com_rslt += bme280_set_oversamp_pressure(BME280_OVERSAMP_1X);
 800203c:	2001      	movs	r0, #1
 800203e:	f7ff fb07 	bl	8001650 <bme280_set_oversamp_pressure>
 8002042:	4603      	mov	r3, r0
 8002044:	461a      	mov	r2, r3
 8002046:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002048:	4413      	add	r3, r2
 800204a:	63bb      	str	r3, [r7, #56]	; 0x38
	/* set the temperature oversampling*/
	com_rslt += bme280_set_oversamp_temperature(BME280_OVERSAMP_1X);
 800204c:	2001      	movs	r0, #1
 800204e:	f7ff fa41 	bl	80014d4 <bme280_set_oversamp_temperature>
 8002052:	4603      	mov	r3, r0
 8002054:	461a      	mov	r2, r3
 8002056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002058:	4413      	add	r3, r2
 800205a:	63bb      	str	r3, [r7, #56]	; 0x38
	 *	Normal mode comprises an automated perpetual cycling between an (active)
	 *	Measurement period and an (inactive) standby period.
	 *	The standby time is determined by the contents of the register t_sb.
	 *	Standby time can be set using BME280_STANDBYTIME_125_MS.
	 *	Usage Hint : bme280_set_standbydur(BME280_STANDBYTIME_125_MS)*/
	com_rslt += bme280_set_standby_durn(BME280_STANDBY_TIME_1_MS);
 800205c:	2000      	movs	r0, #0
 800205e:	f7ff fd97 	bl	8001b90 <bme280_set_standby_durn>
 8002062:	4603      	mov	r3, r0
 8002064:	461a      	mov	r2, r3
 8002066:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002068:	4413      	add	r3, r2
 800206a:	63bb      	str	r3, [r7, #56]	; 0x38
************ START READ UNCOMPENSATED PRESSURE, TEMPERATURE
AND HUMIDITY DATA ********
*---------------------------------------------------------------------*/

	/* API is used to read the uncompensated humidity*/
	com_rslt += bme280_read_uncomp_humidity(&v_data_uncomp_hum_s32);
 800206c:	f107 031c 	add.w	r3, r7, #28
 8002070:	4618      	mov	r0, r3
 8002072:	f7ff f81b 	bl	80010ac <bme280_read_uncomp_humidity>
 8002076:	4603      	mov	r3, r0
 8002078:	461a      	mov	r2, r3
 800207a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800207c:	4413      	add	r3, r2
 800207e:	63bb      	str	r3, [r7, #56]	; 0x38

	/* API is used to read the uncompensated temperature*/
	com_rslt += bme280_read_uncomp_temperature(&v_data_uncomp_temp_s32);
 8002080:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002084:	4618      	mov	r0, r3
 8002086:	f7fe feab 	bl	8000de0 <bme280_read_uncomp_temperature>
 800208a:	4603      	mov	r3, r0
 800208c:	461a      	mov	r2, r3
 800208e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002090:	4413      	add	r3, r2
 8002092:	63bb      	str	r3, [r7, #56]	; 0x38

	/* API is used to read the uncompensated pressure*/
	com_rslt += bme280_read_uncomp_pressure(&v_data_uncomp_pres_s32);
 8002094:	f107 0320 	add.w	r3, r7, #32
 8002098:	4618      	mov	r0, r3
 800209a:	f7fe ff1f 	bl	8000edc <bme280_read_uncomp_pressure>
 800209e:	4603      	mov	r3, r0
 80020a0:	461a      	mov	r2, r3
 80020a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020a4:	4413      	add	r3, r2
 80020a6:	63bb      	str	r3, [r7, #56]	; 0x38
	HAL_Delay(10);
 80020a8:	200a      	movs	r0, #10
 80020aa:	f000 fb35 	bl	8002718 <HAL_Delay>
	/* API is used to read the uncompensated temperature,pressure
	and humidity data */
	com_rslt += bme280_read_uncomp_pressure_temperature_humidity(
 80020ae:	f107 021c 	add.w	r2, r7, #28
 80020b2:	f107 0120 	add.w	r1, r7, #32
 80020b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020ba:	4618      	mov	r0, r3
 80020bc:	f7ff f88e 	bl	80011dc <bme280_read_uncomp_pressure_temperature_humidity>
 80020c0:	4603      	mov	r3, r0
 80020c2:	461a      	mov	r2, r3
 80020c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020c6:	4413      	add	r3, r2
 80020c8:	63bb      	str	r3, [r7, #56]	; 0x38
/*------------------------------------------------------------------*
************ START READ COMPENSATED PRESSURE, TEMPERATURE
AND HUMIDITY DATA ********
*---------------------------------------------------------------------*/
	/* API is used to compute the compensated temperature*/
	v_comp_temp_s32[0] = bme280_compensate_temperature_int32(
 80020ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020cc:	4618      	mov	r0, r3
 80020ce:	f7fe febd 	bl	8000e4c <bme280_compensate_temperature_int32>
 80020d2:	4603      	mov	r3, r0
 80020d4:	617b      	str	r3, [r7, #20]
			v_data_uncomp_temp_s32);

	/* API is used to compute the compensated pressure*/
	v_comp_press_u32[0] = bme280_compensate_pressure_int32(
 80020d6:	6a3b      	ldr	r3, [r7, #32]
 80020d8:	4618      	mov	r0, r3
 80020da:	f7fe ff35 	bl	8000f48 <bme280_compensate_pressure_int32>
 80020de:	4603      	mov	r3, r0
 80020e0:	60fb      	str	r3, [r7, #12]
			v_data_uncomp_pres_s32);

	/* API is used to compute the compensated humidity*/
	v_comp_humidity_u32[0] = bme280_compensate_humidity_int32(
 80020e2:	69fb      	ldr	r3, [r7, #28]
 80020e4:	4618      	mov	r0, r3
 80020e6:	f7ff f80f 	bl	8001108 <bme280_compensate_humidity_int32>
 80020ea:	4603      	mov	r3, r0
 80020ec:	607b      	str	r3, [r7, #4]
			v_data_uncomp_hum_s32);

	/* API is used to read the compensated temperature, humidity and pressure*/
	com_rslt += bme280_read_pressure_temperature_humidity(
 80020ee:	1d3b      	adds	r3, r7, #4
 80020f0:	1d1a      	adds	r2, r3, #4
 80020f2:	f107 0314 	add.w	r3, r7, #20
 80020f6:	1d19      	adds	r1, r3, #4
 80020f8:	f107 030c 	add.w	r3, r7, #12
 80020fc:	3304      	adds	r3, #4
 80020fe:	4618      	mov	r0, r3
 8002100:	f7ff f8b6 	bl	8001270 <bme280_read_pressure_temperature_humidity>
 8002104:	4603      	mov	r3, r0
 8002106:	461a      	mov	r2, r3
 8002108:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800210a:	4413      	add	r3, r2
 800210c:	63bb      	str	r3, [r7, #56]	; 0x38
	&v_comp_press_u32[1], &v_comp_temp_s32[1],  &v_comp_humidity_u32[1]);

//	float imp_temp = ((float)(v_comp_temp_s32[1])/100)*1.8+32;		// convert to fahrenheit
	float temp = ((float)v_comp_temp_s32[1]/100);
 800210e:	69bb      	ldr	r3, [r7, #24]
 8002110:	ee07 3a90 	vmov	s15, r3
 8002114:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002118:	eddf 6a44 	vldr	s13, [pc, #272]	; 800222c <bme280_data_readout_template+0x254>
 800211c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002120:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	float imp_press = ((float)(v_comp_press_u32[1])/100)*.0295300; 	// convert to inches of mercury
 8002124:	693b      	ldr	r3, [r7, #16]
 8002126:	ee07 3a90 	vmov	s15, r3
 800212a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800212e:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 800222c <bme280_data_readout_template+0x254>
 8002132:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002136:	ee16 0a90 	vmov	r0, s13
 800213a:	f7fe f9c9 	bl	80004d0 <__aeabi_f2d>
 800213e:	a336      	add	r3, pc, #216	; (adr r3, 8002218 <bme280_data_readout_template+0x240>)
 8002140:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002144:	f7fe fa1c 	bl	8000580 <__aeabi_dmul>
 8002148:	4603      	mov	r3, r0
 800214a:	460c      	mov	r4, r1
 800214c:	4618      	mov	r0, r3
 800214e:	4621      	mov	r1, r4
 8002150:	f7fe fc28 	bl	80009a4 <__aeabi_d2f>
 8002154:	4603      	mov	r3, r0
 8002156:	633b      	str	r3, [r7, #48]	; 0x30
	//float press = ((float)(v_comp_press_u32[1])/100);
	float imp_humi = ((float)(v_comp_humidity_u32[1])/1024);		// relative humidity
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	ee07 3a90 	vmov	s15, r3
 800215e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002162:	eddf 6a33 	vldr	s13, [pc, #204]	; 8002230 <bme280_data_readout_template+0x258>
 8002166:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800216a:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	float dewpt = ((float)v_comp_temp_s32[1]/100) - ((100 - imp_humi) / 5. );
 800216e:	69bb      	ldr	r3, [r7, #24]
 8002170:	ee07 3a90 	vmov	s15, r3
 8002174:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002178:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 800222c <bme280_data_readout_template+0x254>
 800217c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002180:	ee16 0a90 	vmov	r0, s13
 8002184:	f7fe f9a4 	bl	80004d0 <__aeabi_f2d>
 8002188:	4604      	mov	r4, r0
 800218a:	460d      	mov	r5, r1
 800218c:	ed9f 7a27 	vldr	s14, [pc, #156]	; 800222c <bme280_data_readout_template+0x254>
 8002190:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002194:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002198:	ee17 0a90 	vmov	r0, s15
 800219c:	f7fe f998 	bl	80004d0 <__aeabi_f2d>
 80021a0:	f04f 0200 	mov.w	r2, #0
 80021a4:	4b23      	ldr	r3, [pc, #140]	; (8002234 <bme280_data_readout_template+0x25c>)
 80021a6:	f7fe fb15 	bl	80007d4 <__aeabi_ddiv>
 80021aa:	4602      	mov	r2, r0
 80021ac:	460b      	mov	r3, r1
 80021ae:	4620      	mov	r0, r4
 80021b0:	4629      	mov	r1, r5
 80021b2:	f7fe f82d 	bl	8000210 <__aeabi_dsub>
 80021b6:	4603      	mov	r3, r0
 80021b8:	460c      	mov	r4, r1
 80021ba:	4618      	mov	r0, r3
 80021bc:	4621      	mov	r1, r4
 80021be:	f7fe fbf1 	bl	80009a4 <__aeabi_d2f>
 80021c2:	4603      	mov	r3, r0
 80021c4:	62bb      	str	r3, [r7, #40]	; 0x28
	dewpt = dewpt * 1.8 + 32;
 80021c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80021c8:	f7fe f982 	bl	80004d0 <__aeabi_f2d>
 80021cc:	a314      	add	r3, pc, #80	; (adr r3, 8002220 <bme280_data_readout_template+0x248>)
 80021ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021d2:	f7fe f9d5 	bl	8000580 <__aeabi_dmul>
 80021d6:	4603      	mov	r3, r0
 80021d8:	460c      	mov	r4, r1
 80021da:	4618      	mov	r0, r3
 80021dc:	4621      	mov	r1, r4
 80021de:	f04f 0200 	mov.w	r2, #0
 80021e2:	4b15      	ldr	r3, [pc, #84]	; (8002238 <bme280_data_readout_template+0x260>)
 80021e4:	f7fe f816 	bl	8000214 <__adddf3>
 80021e8:	4603      	mov	r3, r0
 80021ea:	460c      	mov	r4, r1
 80021ec:	4618      	mov	r0, r3
 80021ee:	4621      	mov	r1, r4
 80021f0:	f7fe fbd8 	bl	80009a4 <__aeabi_d2f>
 80021f4:	4603      	mov	r3, r0
 80021f6:	62bb      	str	r3, [r7, #40]	; 0x28
	 *	the device reaches the lowest power consumption only
	 *	In SLEEP mode no measurements are performed
	 *	All registers are accessible
	 *	by using the below API able to set the power mode as SLEEP*/
	 /* Set the power mode as SLEEP*/
	com_rslt += bme280_set_power_mode(BME280_SLEEP_MODE);
 80021f8:	2000      	movs	r0, #0
 80021fa:	f7ff fbe5 	bl	80019c8 <bme280_set_power_mode>
 80021fe:	4603      	mov	r3, r0
 8002200:	461a      	mov	r2, r3
 8002202:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002204:	4413      	add	r3, r2
 8002206:	63bb      	str	r3, [r7, #56]	; 0x38
/*---------------------------------------------------------------------*
************************* END DE-INITIALIZATION **********************
*---------------------------------------------------------------------*/
return com_rslt;
 8002208:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800220a:	4618      	mov	r0, r3
 800220c:	3740      	adds	r7, #64	; 0x40
 800220e:	46bd      	mov	sp, r7
 8002210:	bdb0      	pop	{r4, r5, r7, pc}
 8002212:	bf00      	nop
 8002214:	f3af 8000 	nop.w
 8002218:	c100e6b0 	.word	0xc100e6b0
 800221c:	3f9e3d1c 	.word	0x3f9e3d1c
 8002220:	cccccccd 	.word	0xcccccccd
 8002224:	3ffccccc 	.word	0x3ffccccc
 8002228:	2000002c 	.word	0x2000002c
 800222c:	42c80000 	.word	0x42c80000
 8002230:	44800000 	.word	0x44800000
 8002234:	40140000 	.word	0x40140000
 8002238:	40400000 	.word	0x40400000

0800223c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b082      	sub	sp, #8
 8002240:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002242:	f000 f9f7 	bl	8002634 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002246:	f000 f817 	bl	8002278 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800224a:	f000 f8b9 	bl	80023c0 <MX_GPIO_Init>
  MX_SPI1_Init();
 800224e:	f000 f881 	bl	8002354 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */


  s32 rslt = bme280_data_readout_template();
 8002252:	f7ff fec1 	bl	8001fd8 <bme280_data_readout_template>
 8002256:	6078      	str	r0, [r7, #4]



  while((hspi1.Instance->SR & SPI_SR_BSY) == SET);
 8002258:	bf00      	nop
 800225a:	4b06      	ldr	r3, [pc, #24]	; (8002274 <main+0x38>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	689b      	ldr	r3, [r3, #8]

  __HAL_SPI_DISABLE(&hspi1);
 8002260:	4b04      	ldr	r3, [pc, #16]	; (8002274 <main+0x38>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	681a      	ldr	r2, [r3, #0]
 8002266:	4b03      	ldr	r3, [pc, #12]	; (8002274 <main+0x38>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800226e:	601a      	str	r2, [r3, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 8002270:	e7fe      	b.n	8002270 <main+0x34>
 8002272:	bf00      	nop
 8002274:	20000068 	.word	0x20000068

08002278 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b094      	sub	sp, #80	; 0x50
 800227c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800227e:	f107 031c 	add.w	r3, r7, #28
 8002282:	2234      	movs	r2, #52	; 0x34
 8002284:	2100      	movs	r1, #0
 8002286:	4618      	mov	r0, r3
 8002288:	f001 ff50 	bl	800412c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800228c:	f107 0308 	add.w	r3, r7, #8
 8002290:	2200      	movs	r2, #0
 8002292:	601a      	str	r2, [r3, #0]
 8002294:	605a      	str	r2, [r3, #4]
 8002296:	609a      	str	r2, [r3, #8]
 8002298:	60da      	str	r2, [r3, #12]
 800229a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800229c:	2300      	movs	r3, #0
 800229e:	607b      	str	r3, [r7, #4]
 80022a0:	4b2a      	ldr	r3, [pc, #168]	; (800234c <SystemClock_Config+0xd4>)
 80022a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a4:	4a29      	ldr	r2, [pc, #164]	; (800234c <SystemClock_Config+0xd4>)
 80022a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022aa:	6413      	str	r3, [r2, #64]	; 0x40
 80022ac:	4b27      	ldr	r3, [pc, #156]	; (800234c <SystemClock_Config+0xd4>)
 80022ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022b4:	607b      	str	r3, [r7, #4]
 80022b6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80022b8:	2300      	movs	r3, #0
 80022ba:	603b      	str	r3, [r7, #0]
 80022bc:	4b24      	ldr	r3, [pc, #144]	; (8002350 <SystemClock_Config+0xd8>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80022c4:	4a22      	ldr	r2, [pc, #136]	; (8002350 <SystemClock_Config+0xd8>)
 80022c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022ca:	6013      	str	r3, [r2, #0]
 80022cc:	4b20      	ldr	r3, [pc, #128]	; (8002350 <SystemClock_Config+0xd8>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80022d4:	603b      	str	r3, [r7, #0]
 80022d6:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80022d8:	2302      	movs	r3, #2
 80022da:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80022dc:	2301      	movs	r3, #1
 80022de:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80022e0:	2310      	movs	r3, #16
 80022e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80022e4:	2302      	movs	r3, #2
 80022e6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80022e8:	2300      	movs	r3, #0
 80022ea:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80022ec:	2310      	movs	r3, #16
 80022ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80022f0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80022f4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80022f6:	2304      	movs	r3, #4
 80022f8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80022fa:	2302      	movs	r3, #2
 80022fc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80022fe:	2302      	movs	r3, #2
 8002300:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002302:	f107 031c 	add.w	r3, r7, #28
 8002306:	4618      	mov	r0, r3
 8002308:	f000 ff8e 	bl	8003228 <HAL_RCC_OscConfig>
 800230c:	4603      	mov	r3, r0
 800230e:	2b00      	cmp	r3, #0
 8002310:	d001      	beq.n	8002316 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8002312:	f000 f897 	bl	8002444 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002316:	230f      	movs	r3, #15
 8002318:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800231a:	2302      	movs	r3, #2
 800231c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800231e:	2300      	movs	r3, #0
 8002320:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002322:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002326:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002328:	2300      	movs	r3, #0
 800232a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800232c:	f107 0308 	add.w	r3, r7, #8
 8002330:	2102      	movs	r1, #2
 8002332:	4618      	mov	r0, r3
 8002334:	f000 fcf2 	bl	8002d1c <HAL_RCC_ClockConfig>
 8002338:	4603      	mov	r3, r0
 800233a:	2b00      	cmp	r3, #0
 800233c:	d001      	beq.n	8002342 <SystemClock_Config+0xca>
  {
    Error_Handler();
 800233e:	f000 f881 	bl	8002444 <Error_Handler>
  }
}
 8002342:	bf00      	nop
 8002344:	3750      	adds	r7, #80	; 0x50
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}
 800234a:	bf00      	nop
 800234c:	40023800 	.word	0x40023800
 8002350:	40007000 	.word	0x40007000

08002354 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002358:	4b17      	ldr	r3, [pc, #92]	; (80023b8 <MX_SPI1_Init+0x64>)
 800235a:	4a18      	ldr	r2, [pc, #96]	; (80023bc <MX_SPI1_Init+0x68>)
 800235c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800235e:	4b16      	ldr	r3, [pc, #88]	; (80023b8 <MX_SPI1_Init+0x64>)
 8002360:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002364:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002366:	4b14      	ldr	r3, [pc, #80]	; (80023b8 <MX_SPI1_Init+0x64>)
 8002368:	2200      	movs	r2, #0
 800236a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800236c:	4b12      	ldr	r3, [pc, #72]	; (80023b8 <MX_SPI1_Init+0x64>)
 800236e:	2200      	movs	r2, #0
 8002370:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002372:	4b11      	ldr	r3, [pc, #68]	; (80023b8 <MX_SPI1_Init+0x64>)
 8002374:	2200      	movs	r2, #0
 8002376:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002378:	4b0f      	ldr	r3, [pc, #60]	; (80023b8 <MX_SPI1_Init+0x64>)
 800237a:	2200      	movs	r2, #0
 800237c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800237e:	4b0e      	ldr	r3, [pc, #56]	; (80023b8 <MX_SPI1_Init+0x64>)
 8002380:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002384:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8002386:	4b0c      	ldr	r3, [pc, #48]	; (80023b8 <MX_SPI1_Init+0x64>)
 8002388:	2220      	movs	r2, #32
 800238a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800238c:	4b0a      	ldr	r3, [pc, #40]	; (80023b8 <MX_SPI1_Init+0x64>)
 800238e:	2200      	movs	r2, #0
 8002390:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002392:	4b09      	ldr	r3, [pc, #36]	; (80023b8 <MX_SPI1_Init+0x64>)
 8002394:	2200      	movs	r2, #0
 8002396:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002398:	4b07      	ldr	r3, [pc, #28]	; (80023b8 <MX_SPI1_Init+0x64>)
 800239a:	2200      	movs	r2, #0
 800239c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800239e:	4b06      	ldr	r3, [pc, #24]	; (80023b8 <MX_SPI1_Init+0x64>)
 80023a0:	220a      	movs	r2, #10
 80023a2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80023a4:	4804      	ldr	r0, [pc, #16]	; (80023b8 <MX_SPI1_Init+0x64>)
 80023a6:	f001 f999 	bl	80036dc <HAL_SPI_Init>
 80023aa:	4603      	mov	r3, r0
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d001      	beq.n	80023b4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80023b0:	f000 f848 	bl	8002444 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80023b4:	bf00      	nop
 80023b6:	bd80      	pop	{r7, pc}
 80023b8:	20000068 	.word	0x20000068
 80023bc:	40013000 	.word	0x40013000

080023c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b088      	sub	sp, #32
 80023c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023c6:	f107 030c 	add.w	r3, r7, #12
 80023ca:	2200      	movs	r2, #0
 80023cc:	601a      	str	r2, [r3, #0]
 80023ce:	605a      	str	r2, [r3, #4]
 80023d0:	609a      	str	r2, [r3, #8]
 80023d2:	60da      	str	r2, [r3, #12]
 80023d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80023d6:	2300      	movs	r3, #0
 80023d8:	60bb      	str	r3, [r7, #8]
 80023da:	4b18      	ldr	r3, [pc, #96]	; (800243c <MX_GPIO_Init+0x7c>)
 80023dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023de:	4a17      	ldr	r2, [pc, #92]	; (800243c <MX_GPIO_Init+0x7c>)
 80023e0:	f043 0301 	orr.w	r3, r3, #1
 80023e4:	6313      	str	r3, [r2, #48]	; 0x30
 80023e6:	4b15      	ldr	r3, [pc, #84]	; (800243c <MX_GPIO_Init+0x7c>)
 80023e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ea:	f003 0301 	and.w	r3, r3, #1
 80023ee:	60bb      	str	r3, [r7, #8]
 80023f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80023f2:	2300      	movs	r3, #0
 80023f4:	607b      	str	r3, [r7, #4]
 80023f6:	4b11      	ldr	r3, [pc, #68]	; (800243c <MX_GPIO_Init+0x7c>)
 80023f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023fa:	4a10      	ldr	r2, [pc, #64]	; (800243c <MX_GPIO_Init+0x7c>)
 80023fc:	f043 0302 	orr.w	r3, r3, #2
 8002400:	6313      	str	r3, [r2, #48]	; 0x30
 8002402:	4b0e      	ldr	r3, [pc, #56]	; (800243c <MX_GPIO_Init+0x7c>)
 8002404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002406:	f003 0302 	and.w	r3, r3, #2
 800240a:	607b      	str	r3, [r7, #4]
 800240c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 800240e:	2201      	movs	r2, #1
 8002410:	2140      	movs	r1, #64	; 0x40
 8002412:	480b      	ldr	r0, [pc, #44]	; (8002440 <MX_GPIO_Init+0x80>)
 8002414:	f000 fc68 	bl	8002ce8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002418:	2340      	movs	r3, #64	; 0x40
 800241a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800241c:	2301      	movs	r3, #1
 800241e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002420:	2300      	movs	r3, #0
 8002422:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002424:	2300      	movs	r3, #0
 8002426:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002428:	f107 030c 	add.w	r3, r7, #12
 800242c:	4619      	mov	r1, r3
 800242e:	4804      	ldr	r0, [pc, #16]	; (8002440 <MX_GPIO_Init+0x80>)
 8002430:	f000 fac8 	bl	80029c4 <HAL_GPIO_Init>

}
 8002434:	bf00      	nop
 8002436:	3720      	adds	r7, #32
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}
 800243c:	40023800 	.word	0x40023800
 8002440:	40020400 	.word	0x40020400

08002444 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002444:	b480      	push	{r7}
 8002446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002448:	bf00      	nop
 800244a:	46bd      	mov	sp, r7
 800244c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002450:	4770      	bx	lr
	...

08002454 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b082      	sub	sp, #8
 8002458:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800245a:	2300      	movs	r3, #0
 800245c:	607b      	str	r3, [r7, #4]
 800245e:	4b10      	ldr	r3, [pc, #64]	; (80024a0 <HAL_MspInit+0x4c>)
 8002460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002462:	4a0f      	ldr	r2, [pc, #60]	; (80024a0 <HAL_MspInit+0x4c>)
 8002464:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002468:	6453      	str	r3, [r2, #68]	; 0x44
 800246a:	4b0d      	ldr	r3, [pc, #52]	; (80024a0 <HAL_MspInit+0x4c>)
 800246c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800246e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002472:	607b      	str	r3, [r7, #4]
 8002474:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002476:	2300      	movs	r3, #0
 8002478:	603b      	str	r3, [r7, #0]
 800247a:	4b09      	ldr	r3, [pc, #36]	; (80024a0 <HAL_MspInit+0x4c>)
 800247c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800247e:	4a08      	ldr	r2, [pc, #32]	; (80024a0 <HAL_MspInit+0x4c>)
 8002480:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002484:	6413      	str	r3, [r2, #64]	; 0x40
 8002486:	4b06      	ldr	r3, [pc, #24]	; (80024a0 <HAL_MspInit+0x4c>)
 8002488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800248a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800248e:	603b      	str	r3, [r7, #0]
 8002490:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002492:	2007      	movs	r0, #7
 8002494:	f000 fa32 	bl	80028fc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002498:	bf00      	nop
 800249a:	3708      	adds	r7, #8
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}
 80024a0:	40023800 	.word	0x40023800

080024a4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b08a      	sub	sp, #40	; 0x28
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024ac:	f107 0314 	add.w	r3, r7, #20
 80024b0:	2200      	movs	r2, #0
 80024b2:	601a      	str	r2, [r3, #0]
 80024b4:	605a      	str	r2, [r3, #4]
 80024b6:	609a      	str	r2, [r3, #8]
 80024b8:	60da      	str	r2, [r3, #12]
 80024ba:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a1d      	ldr	r2, [pc, #116]	; (8002538 <HAL_SPI_MspInit+0x94>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d133      	bne.n	800252e <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80024c6:	2300      	movs	r3, #0
 80024c8:	613b      	str	r3, [r7, #16]
 80024ca:	4b1c      	ldr	r3, [pc, #112]	; (800253c <HAL_SPI_MspInit+0x98>)
 80024cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ce:	4a1b      	ldr	r2, [pc, #108]	; (800253c <HAL_SPI_MspInit+0x98>)
 80024d0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80024d4:	6453      	str	r3, [r2, #68]	; 0x44
 80024d6:	4b19      	ldr	r3, [pc, #100]	; (800253c <HAL_SPI_MspInit+0x98>)
 80024d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024da:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024de:	613b      	str	r3, [r7, #16]
 80024e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024e2:	2300      	movs	r3, #0
 80024e4:	60fb      	str	r3, [r7, #12]
 80024e6:	4b15      	ldr	r3, [pc, #84]	; (800253c <HAL_SPI_MspInit+0x98>)
 80024e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ea:	4a14      	ldr	r2, [pc, #80]	; (800253c <HAL_SPI_MspInit+0x98>)
 80024ec:	f043 0301 	orr.w	r3, r3, #1
 80024f0:	6313      	str	r3, [r2, #48]	; 0x30
 80024f2:	4b12      	ldr	r3, [pc, #72]	; (800253c <HAL_SPI_MspInit+0x98>)
 80024f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f6:	f003 0301 	and.w	r3, r3, #1
 80024fa:	60fb      	str	r3, [r7, #12]
 80024fc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80024fe:	23e0      	movs	r3, #224	; 0xe0
 8002500:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002502:	2302      	movs	r3, #2
 8002504:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002506:	2300      	movs	r3, #0
 8002508:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800250a:	2303      	movs	r3, #3
 800250c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800250e:	2305      	movs	r3, #5
 8002510:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002512:	f107 0314 	add.w	r3, r7, #20
 8002516:	4619      	mov	r1, r3
 8002518:	4809      	ldr	r0, [pc, #36]	; (8002540 <HAL_SPI_MspInit+0x9c>)
 800251a:	f000 fa53 	bl	80029c4 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 15);
 800251e:	220f      	movs	r2, #15
 8002520:	2100      	movs	r1, #0
 8002522:	2023      	movs	r0, #35	; 0x23
 8002524:	f000 f9f5 	bl	8002912 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8002528:	2023      	movs	r0, #35	; 0x23
 800252a:	f000 fa0e 	bl	800294a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800252e:	bf00      	nop
 8002530:	3728      	adds	r7, #40	; 0x28
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}
 8002536:	bf00      	nop
 8002538:	40013000 	.word	0x40013000
 800253c:	40023800 	.word	0x40023800
 8002540:	40020000 	.word	0x40020000

08002544 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002544:	b480      	push	{r7}
 8002546:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002548:	bf00      	nop
 800254a:	46bd      	mov	sp, r7
 800254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002550:	4770      	bx	lr

08002552 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002552:	b480      	push	{r7}
 8002554:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002556:	e7fe      	b.n	8002556 <HardFault_Handler+0x4>

08002558 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002558:	b480      	push	{r7}
 800255a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800255c:	e7fe      	b.n	800255c <MemManage_Handler+0x4>

0800255e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800255e:	b480      	push	{r7}
 8002560:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002562:	e7fe      	b.n	8002562 <BusFault_Handler+0x4>

08002564 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002564:	b480      	push	{r7}
 8002566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002568:	e7fe      	b.n	8002568 <UsageFault_Handler+0x4>

0800256a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800256a:	b480      	push	{r7}
 800256c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800256e:	bf00      	nop
 8002570:	46bd      	mov	sp, r7
 8002572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002576:	4770      	bx	lr

08002578 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002578:	b480      	push	{r7}
 800257a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800257c:	bf00      	nop
 800257e:	46bd      	mov	sp, r7
 8002580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002584:	4770      	bx	lr

08002586 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002586:	b480      	push	{r7}
 8002588:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800258a:	bf00      	nop
 800258c:	46bd      	mov	sp, r7
 800258e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002592:	4770      	bx	lr

08002594 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002598:	f000 f89e 	bl	80026d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800259c:	bf00      	nop
 800259e:	bd80      	pop	{r7, pc}

080025a0 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80025a4:	4802      	ldr	r0, [pc, #8]	; (80025b0 <SPI1_IRQHandler+0x10>)
 80025a6:	f001 fbd3 	bl	8003d50 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80025aa:	bf00      	nop
 80025ac:	bd80      	pop	{r7, pc}
 80025ae:	bf00      	nop
 80025b0:	20000068 	.word	0x20000068

080025b4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80025b4:	b480      	push	{r7}
 80025b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80025b8:	4b08      	ldr	r3, [pc, #32]	; (80025dc <SystemInit+0x28>)
 80025ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025be:	4a07      	ldr	r2, [pc, #28]	; (80025dc <SystemInit+0x28>)
 80025c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80025c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80025c8:	4b04      	ldr	r3, [pc, #16]	; (80025dc <SystemInit+0x28>)
 80025ca:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80025ce:	609a      	str	r2, [r3, #8]
#endif
}
 80025d0:	bf00      	nop
 80025d2:	46bd      	mov	sp, r7
 80025d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d8:	4770      	bx	lr
 80025da:	bf00      	nop
 80025dc:	e000ed00 	.word	0xe000ed00

080025e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80025e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002618 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80025e4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80025e6:	e003      	b.n	80025f0 <LoopCopyDataInit>

080025e8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80025e8:	4b0c      	ldr	r3, [pc, #48]	; (800261c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80025ea:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80025ec:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80025ee:	3104      	adds	r1, #4

080025f0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80025f0:	480b      	ldr	r0, [pc, #44]	; (8002620 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80025f2:	4b0c      	ldr	r3, [pc, #48]	; (8002624 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80025f4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80025f6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80025f8:	d3f6      	bcc.n	80025e8 <CopyDataInit>
  ldr  r2, =_sbss
 80025fa:	4a0b      	ldr	r2, [pc, #44]	; (8002628 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80025fc:	e002      	b.n	8002604 <LoopFillZerobss>

080025fe <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80025fe:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002600:	f842 3b04 	str.w	r3, [r2], #4

08002604 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002604:	4b09      	ldr	r3, [pc, #36]	; (800262c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002606:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002608:	d3f9      	bcc.n	80025fe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800260a:	f7ff ffd3 	bl	80025b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800260e:	f001 fd69 	bl	80040e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002612:	f7ff fe13 	bl	800223c <main>
  bx  lr    
 8002616:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002618:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800261c:	08004174 	.word	0x08004174
  ldr  r0, =_sdata
 8002620:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002624:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8002628:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 800262c:	200000c4 	.word	0x200000c4

08002630 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002630:	e7fe      	b.n	8002630 <ADC_IRQHandler>
	...

08002634 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002638:	4b0e      	ldr	r3, [pc, #56]	; (8002674 <HAL_Init+0x40>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a0d      	ldr	r2, [pc, #52]	; (8002674 <HAL_Init+0x40>)
 800263e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002642:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002644:	4b0b      	ldr	r3, [pc, #44]	; (8002674 <HAL_Init+0x40>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a0a      	ldr	r2, [pc, #40]	; (8002674 <HAL_Init+0x40>)
 800264a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800264e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002650:	4b08      	ldr	r3, [pc, #32]	; (8002674 <HAL_Init+0x40>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a07      	ldr	r2, [pc, #28]	; (8002674 <HAL_Init+0x40>)
 8002656:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800265a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800265c:	2003      	movs	r0, #3
 800265e:	f000 f94d 	bl	80028fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002662:	2000      	movs	r0, #0
 8002664:	f000 f808 	bl	8002678 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002668:	f7ff fef4 	bl	8002454 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800266c:	2300      	movs	r3, #0
}
 800266e:	4618      	mov	r0, r3
 8002670:	bd80      	pop	{r7, pc}
 8002672:	bf00      	nop
 8002674:	40023c00 	.word	0x40023c00

08002678 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b082      	sub	sp, #8
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002680:	4b12      	ldr	r3, [pc, #72]	; (80026cc <HAL_InitTick+0x54>)
 8002682:	681a      	ldr	r2, [r3, #0]
 8002684:	4b12      	ldr	r3, [pc, #72]	; (80026d0 <HAL_InitTick+0x58>)
 8002686:	781b      	ldrb	r3, [r3, #0]
 8002688:	4619      	mov	r1, r3
 800268a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800268e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002692:	fbb2 f3f3 	udiv	r3, r2, r3
 8002696:	4618      	mov	r0, r3
 8002698:	f000 f965 	bl	8002966 <HAL_SYSTICK_Config>
 800269c:	4603      	mov	r3, r0
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d001      	beq.n	80026a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80026a2:	2301      	movs	r3, #1
 80026a4:	e00e      	b.n	80026c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2b0f      	cmp	r3, #15
 80026aa:	d80a      	bhi.n	80026c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80026ac:	2200      	movs	r2, #0
 80026ae:	6879      	ldr	r1, [r7, #4]
 80026b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80026b4:	f000 f92d 	bl	8002912 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80026b8:	4a06      	ldr	r2, [pc, #24]	; (80026d4 <HAL_InitTick+0x5c>)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80026be:	2300      	movs	r3, #0
 80026c0:	e000      	b.n	80026c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	3708      	adds	r7, #8
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd80      	pop	{r7, pc}
 80026cc:	20000000 	.word	0x20000000
 80026d0:	20000008 	.word	0x20000008
 80026d4:	20000004 	.word	0x20000004

080026d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026d8:	b480      	push	{r7}
 80026da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80026dc:	4b06      	ldr	r3, [pc, #24]	; (80026f8 <HAL_IncTick+0x20>)
 80026de:	781b      	ldrb	r3, [r3, #0]
 80026e0:	461a      	mov	r2, r3
 80026e2:	4b06      	ldr	r3, [pc, #24]	; (80026fc <HAL_IncTick+0x24>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4413      	add	r3, r2
 80026e8:	4a04      	ldr	r2, [pc, #16]	; (80026fc <HAL_IncTick+0x24>)
 80026ea:	6013      	str	r3, [r2, #0]
}
 80026ec:	bf00      	nop
 80026ee:	46bd      	mov	sp, r7
 80026f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f4:	4770      	bx	lr
 80026f6:	bf00      	nop
 80026f8:	20000008 	.word	0x20000008
 80026fc:	200000c0 	.word	0x200000c0

08002700 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002700:	b480      	push	{r7}
 8002702:	af00      	add	r7, sp, #0
  return uwTick;
 8002704:	4b03      	ldr	r3, [pc, #12]	; (8002714 <HAL_GetTick+0x14>)
 8002706:	681b      	ldr	r3, [r3, #0]
}
 8002708:	4618      	mov	r0, r3
 800270a:	46bd      	mov	sp, r7
 800270c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002710:	4770      	bx	lr
 8002712:	bf00      	nop
 8002714:	200000c0 	.word	0x200000c0

08002718 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b084      	sub	sp, #16
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002720:	f7ff ffee 	bl	8002700 <HAL_GetTick>
 8002724:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002730:	d005      	beq.n	800273e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002732:	4b09      	ldr	r3, [pc, #36]	; (8002758 <HAL_Delay+0x40>)
 8002734:	781b      	ldrb	r3, [r3, #0]
 8002736:	461a      	mov	r2, r3
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	4413      	add	r3, r2
 800273c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800273e:	bf00      	nop
 8002740:	f7ff ffde 	bl	8002700 <HAL_GetTick>
 8002744:	4602      	mov	r2, r0
 8002746:	68bb      	ldr	r3, [r7, #8]
 8002748:	1ad3      	subs	r3, r2, r3
 800274a:	68fa      	ldr	r2, [r7, #12]
 800274c:	429a      	cmp	r2, r3
 800274e:	d8f7      	bhi.n	8002740 <HAL_Delay+0x28>
  {
  }
}
 8002750:	bf00      	nop
 8002752:	3710      	adds	r7, #16
 8002754:	46bd      	mov	sp, r7
 8002756:	bd80      	pop	{r7, pc}
 8002758:	20000008 	.word	0x20000008

0800275c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800275c:	b480      	push	{r7}
 800275e:	b085      	sub	sp, #20
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	f003 0307 	and.w	r3, r3, #7
 800276a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800276c:	4b0c      	ldr	r3, [pc, #48]	; (80027a0 <__NVIC_SetPriorityGrouping+0x44>)
 800276e:	68db      	ldr	r3, [r3, #12]
 8002770:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002772:	68ba      	ldr	r2, [r7, #8]
 8002774:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002778:	4013      	ands	r3, r2
 800277a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002784:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002788:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800278c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800278e:	4a04      	ldr	r2, [pc, #16]	; (80027a0 <__NVIC_SetPriorityGrouping+0x44>)
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	60d3      	str	r3, [r2, #12]
}
 8002794:	bf00      	nop
 8002796:	3714      	adds	r7, #20
 8002798:	46bd      	mov	sp, r7
 800279a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279e:	4770      	bx	lr
 80027a0:	e000ed00 	.word	0xe000ed00

080027a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80027a4:	b480      	push	{r7}
 80027a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027a8:	4b04      	ldr	r3, [pc, #16]	; (80027bc <__NVIC_GetPriorityGrouping+0x18>)
 80027aa:	68db      	ldr	r3, [r3, #12]
 80027ac:	0a1b      	lsrs	r3, r3, #8
 80027ae:	f003 0307 	and.w	r3, r3, #7
}
 80027b2:	4618      	mov	r0, r3
 80027b4:	46bd      	mov	sp, r7
 80027b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ba:	4770      	bx	lr
 80027bc:	e000ed00 	.word	0xe000ed00

080027c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027c0:	b480      	push	{r7}
 80027c2:	b083      	sub	sp, #12
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	4603      	mov	r3, r0
 80027c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	db0b      	blt.n	80027ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027d2:	79fb      	ldrb	r3, [r7, #7]
 80027d4:	f003 021f 	and.w	r2, r3, #31
 80027d8:	4907      	ldr	r1, [pc, #28]	; (80027f8 <__NVIC_EnableIRQ+0x38>)
 80027da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027de:	095b      	lsrs	r3, r3, #5
 80027e0:	2001      	movs	r0, #1
 80027e2:	fa00 f202 	lsl.w	r2, r0, r2
 80027e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80027ea:	bf00      	nop
 80027ec:	370c      	adds	r7, #12
 80027ee:	46bd      	mov	sp, r7
 80027f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f4:	4770      	bx	lr
 80027f6:	bf00      	nop
 80027f8:	e000e100 	.word	0xe000e100

080027fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027fc:	b480      	push	{r7}
 80027fe:	b083      	sub	sp, #12
 8002800:	af00      	add	r7, sp, #0
 8002802:	4603      	mov	r3, r0
 8002804:	6039      	str	r1, [r7, #0]
 8002806:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002808:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800280c:	2b00      	cmp	r3, #0
 800280e:	db0a      	blt.n	8002826 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	b2da      	uxtb	r2, r3
 8002814:	490c      	ldr	r1, [pc, #48]	; (8002848 <__NVIC_SetPriority+0x4c>)
 8002816:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800281a:	0112      	lsls	r2, r2, #4
 800281c:	b2d2      	uxtb	r2, r2
 800281e:	440b      	add	r3, r1
 8002820:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002824:	e00a      	b.n	800283c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	b2da      	uxtb	r2, r3
 800282a:	4908      	ldr	r1, [pc, #32]	; (800284c <__NVIC_SetPriority+0x50>)
 800282c:	79fb      	ldrb	r3, [r7, #7]
 800282e:	f003 030f 	and.w	r3, r3, #15
 8002832:	3b04      	subs	r3, #4
 8002834:	0112      	lsls	r2, r2, #4
 8002836:	b2d2      	uxtb	r2, r2
 8002838:	440b      	add	r3, r1
 800283a:	761a      	strb	r2, [r3, #24]
}
 800283c:	bf00      	nop
 800283e:	370c      	adds	r7, #12
 8002840:	46bd      	mov	sp, r7
 8002842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002846:	4770      	bx	lr
 8002848:	e000e100 	.word	0xe000e100
 800284c:	e000ed00 	.word	0xe000ed00

08002850 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002850:	b480      	push	{r7}
 8002852:	b089      	sub	sp, #36	; 0x24
 8002854:	af00      	add	r7, sp, #0
 8002856:	60f8      	str	r0, [r7, #12]
 8002858:	60b9      	str	r1, [r7, #8]
 800285a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	f003 0307 	and.w	r3, r3, #7
 8002862:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002864:	69fb      	ldr	r3, [r7, #28]
 8002866:	f1c3 0307 	rsb	r3, r3, #7
 800286a:	2b04      	cmp	r3, #4
 800286c:	bf28      	it	cs
 800286e:	2304      	movcs	r3, #4
 8002870:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002872:	69fb      	ldr	r3, [r7, #28]
 8002874:	3304      	adds	r3, #4
 8002876:	2b06      	cmp	r3, #6
 8002878:	d902      	bls.n	8002880 <NVIC_EncodePriority+0x30>
 800287a:	69fb      	ldr	r3, [r7, #28]
 800287c:	3b03      	subs	r3, #3
 800287e:	e000      	b.n	8002882 <NVIC_EncodePriority+0x32>
 8002880:	2300      	movs	r3, #0
 8002882:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002884:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002888:	69bb      	ldr	r3, [r7, #24]
 800288a:	fa02 f303 	lsl.w	r3, r2, r3
 800288e:	43da      	mvns	r2, r3
 8002890:	68bb      	ldr	r3, [r7, #8]
 8002892:	401a      	ands	r2, r3
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002898:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	fa01 f303 	lsl.w	r3, r1, r3
 80028a2:	43d9      	mvns	r1, r3
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028a8:	4313      	orrs	r3, r2
         );
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	3724      	adds	r7, #36	; 0x24
 80028ae:	46bd      	mov	sp, r7
 80028b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b4:	4770      	bx	lr
	...

080028b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b082      	sub	sp, #8
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	3b01      	subs	r3, #1
 80028c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80028c8:	d301      	bcc.n	80028ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80028ca:	2301      	movs	r3, #1
 80028cc:	e00f      	b.n	80028ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80028ce:	4a0a      	ldr	r2, [pc, #40]	; (80028f8 <SysTick_Config+0x40>)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	3b01      	subs	r3, #1
 80028d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80028d6:	210f      	movs	r1, #15
 80028d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80028dc:	f7ff ff8e 	bl	80027fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028e0:	4b05      	ldr	r3, [pc, #20]	; (80028f8 <SysTick_Config+0x40>)
 80028e2:	2200      	movs	r2, #0
 80028e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028e6:	4b04      	ldr	r3, [pc, #16]	; (80028f8 <SysTick_Config+0x40>)
 80028e8:	2207      	movs	r2, #7
 80028ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028ec:	2300      	movs	r3, #0
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	3708      	adds	r7, #8
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}
 80028f6:	bf00      	nop
 80028f8:	e000e010 	.word	0xe000e010

080028fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b082      	sub	sp, #8
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002904:	6878      	ldr	r0, [r7, #4]
 8002906:	f7ff ff29 	bl	800275c <__NVIC_SetPriorityGrouping>
}
 800290a:	bf00      	nop
 800290c:	3708      	adds	r7, #8
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}

08002912 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002912:	b580      	push	{r7, lr}
 8002914:	b086      	sub	sp, #24
 8002916:	af00      	add	r7, sp, #0
 8002918:	4603      	mov	r3, r0
 800291a:	60b9      	str	r1, [r7, #8]
 800291c:	607a      	str	r2, [r7, #4]
 800291e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002920:	2300      	movs	r3, #0
 8002922:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002924:	f7ff ff3e 	bl	80027a4 <__NVIC_GetPriorityGrouping>
 8002928:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800292a:	687a      	ldr	r2, [r7, #4]
 800292c:	68b9      	ldr	r1, [r7, #8]
 800292e:	6978      	ldr	r0, [r7, #20]
 8002930:	f7ff ff8e 	bl	8002850 <NVIC_EncodePriority>
 8002934:	4602      	mov	r2, r0
 8002936:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800293a:	4611      	mov	r1, r2
 800293c:	4618      	mov	r0, r3
 800293e:	f7ff ff5d 	bl	80027fc <__NVIC_SetPriority>
}
 8002942:	bf00      	nop
 8002944:	3718      	adds	r7, #24
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}

0800294a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800294a:	b580      	push	{r7, lr}
 800294c:	b082      	sub	sp, #8
 800294e:	af00      	add	r7, sp, #0
 8002950:	4603      	mov	r3, r0
 8002952:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002954:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002958:	4618      	mov	r0, r3
 800295a:	f7ff ff31 	bl	80027c0 <__NVIC_EnableIRQ>
}
 800295e:	bf00      	nop
 8002960:	3708      	adds	r7, #8
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}

08002966 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002966:	b580      	push	{r7, lr}
 8002968:	b082      	sub	sp, #8
 800296a:	af00      	add	r7, sp, #0
 800296c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800296e:	6878      	ldr	r0, [r7, #4]
 8002970:	f7ff ffa2 	bl	80028b8 <SysTick_Config>
 8002974:	4603      	mov	r3, r0
}
 8002976:	4618      	mov	r0, r3
 8002978:	3708      	adds	r7, #8
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}

0800297e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800297e:	b480      	push	{r7}
 8002980:	b083      	sub	sp, #12
 8002982:	af00      	add	r7, sp, #0
 8002984:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800298c:	b2db      	uxtb	r3, r3
 800298e:	2b02      	cmp	r3, #2
 8002990:	d004      	beq.n	800299c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2280      	movs	r2, #128	; 0x80
 8002996:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002998:	2301      	movs	r3, #1
 800299a:	e00c      	b.n	80029b6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2205      	movs	r2, #5
 80029a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	681a      	ldr	r2, [r3, #0]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f022 0201 	bic.w	r2, r2, #1
 80029b2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80029b4:	2300      	movs	r3, #0
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	370c      	adds	r7, #12
 80029ba:	46bd      	mov	sp, r7
 80029bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c0:	4770      	bx	lr
	...

080029c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029c4:	b480      	push	{r7}
 80029c6:	b089      	sub	sp, #36	; 0x24
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
 80029cc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80029ce:	2300      	movs	r3, #0
 80029d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80029d2:	2300      	movs	r3, #0
 80029d4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80029d6:	2300      	movs	r3, #0
 80029d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029da:	2300      	movs	r3, #0
 80029dc:	61fb      	str	r3, [r7, #28]
 80029de:	e165      	b.n	8002cac <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80029e0:	2201      	movs	r2, #1
 80029e2:	69fb      	ldr	r3, [r7, #28]
 80029e4:	fa02 f303 	lsl.w	r3, r2, r3
 80029e8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	697a      	ldr	r2, [r7, #20]
 80029f0:	4013      	ands	r3, r2
 80029f2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80029f4:	693a      	ldr	r2, [r7, #16]
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	429a      	cmp	r2, r3
 80029fa:	f040 8154 	bne.w	8002ca6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	2b01      	cmp	r3, #1
 8002a04:	d00b      	beq.n	8002a1e <HAL_GPIO_Init+0x5a>
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	2b02      	cmp	r3, #2
 8002a0c:	d007      	beq.n	8002a1e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002a12:	2b11      	cmp	r3, #17
 8002a14:	d003      	beq.n	8002a1e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	2b12      	cmp	r3, #18
 8002a1c:	d130      	bne.n	8002a80 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002a24:	69fb      	ldr	r3, [r7, #28]
 8002a26:	005b      	lsls	r3, r3, #1
 8002a28:	2203      	movs	r2, #3
 8002a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a2e:	43db      	mvns	r3, r3
 8002a30:	69ba      	ldr	r2, [r7, #24]
 8002a32:	4013      	ands	r3, r2
 8002a34:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	68da      	ldr	r2, [r3, #12]
 8002a3a:	69fb      	ldr	r3, [r7, #28]
 8002a3c:	005b      	lsls	r3, r3, #1
 8002a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a42:	69ba      	ldr	r2, [r7, #24]
 8002a44:	4313      	orrs	r3, r2
 8002a46:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	69ba      	ldr	r2, [r7, #24]
 8002a4c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a54:	2201      	movs	r2, #1
 8002a56:	69fb      	ldr	r3, [r7, #28]
 8002a58:	fa02 f303 	lsl.w	r3, r2, r3
 8002a5c:	43db      	mvns	r3, r3
 8002a5e:	69ba      	ldr	r2, [r7, #24]
 8002a60:	4013      	ands	r3, r2
 8002a62:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	091b      	lsrs	r3, r3, #4
 8002a6a:	f003 0201 	and.w	r2, r3, #1
 8002a6e:	69fb      	ldr	r3, [r7, #28]
 8002a70:	fa02 f303 	lsl.w	r3, r2, r3
 8002a74:	69ba      	ldr	r2, [r7, #24]
 8002a76:	4313      	orrs	r3, r2
 8002a78:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	69ba      	ldr	r2, [r7, #24]
 8002a7e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	68db      	ldr	r3, [r3, #12]
 8002a84:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002a86:	69fb      	ldr	r3, [r7, #28]
 8002a88:	005b      	lsls	r3, r3, #1
 8002a8a:	2203      	movs	r2, #3
 8002a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a90:	43db      	mvns	r3, r3
 8002a92:	69ba      	ldr	r2, [r7, #24]
 8002a94:	4013      	ands	r3, r2
 8002a96:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	689a      	ldr	r2, [r3, #8]
 8002a9c:	69fb      	ldr	r3, [r7, #28]
 8002a9e:	005b      	lsls	r3, r3, #1
 8002aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa4:	69ba      	ldr	r2, [r7, #24]
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	69ba      	ldr	r2, [r7, #24]
 8002aae:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	2b02      	cmp	r3, #2
 8002ab6:	d003      	beq.n	8002ac0 <HAL_GPIO_Init+0xfc>
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	2b12      	cmp	r3, #18
 8002abe:	d123      	bne.n	8002b08 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002ac0:	69fb      	ldr	r3, [r7, #28]
 8002ac2:	08da      	lsrs	r2, r3, #3
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	3208      	adds	r2, #8
 8002ac8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002acc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002ace:	69fb      	ldr	r3, [r7, #28]
 8002ad0:	f003 0307 	and.w	r3, r3, #7
 8002ad4:	009b      	lsls	r3, r3, #2
 8002ad6:	220f      	movs	r2, #15
 8002ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8002adc:	43db      	mvns	r3, r3
 8002ade:	69ba      	ldr	r2, [r7, #24]
 8002ae0:	4013      	ands	r3, r2
 8002ae2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	691a      	ldr	r2, [r3, #16]
 8002ae8:	69fb      	ldr	r3, [r7, #28]
 8002aea:	f003 0307 	and.w	r3, r3, #7
 8002aee:	009b      	lsls	r3, r3, #2
 8002af0:	fa02 f303 	lsl.w	r3, r2, r3
 8002af4:	69ba      	ldr	r2, [r7, #24]
 8002af6:	4313      	orrs	r3, r2
 8002af8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002afa:	69fb      	ldr	r3, [r7, #28]
 8002afc:	08da      	lsrs	r2, r3, #3
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	3208      	adds	r2, #8
 8002b02:	69b9      	ldr	r1, [r7, #24]
 8002b04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002b0e:	69fb      	ldr	r3, [r7, #28]
 8002b10:	005b      	lsls	r3, r3, #1
 8002b12:	2203      	movs	r2, #3
 8002b14:	fa02 f303 	lsl.w	r3, r2, r3
 8002b18:	43db      	mvns	r3, r3
 8002b1a:	69ba      	ldr	r2, [r7, #24]
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	f003 0203 	and.w	r2, r3, #3
 8002b28:	69fb      	ldr	r3, [r7, #28]
 8002b2a:	005b      	lsls	r3, r3, #1
 8002b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b30:	69ba      	ldr	r2, [r7, #24]
 8002b32:	4313      	orrs	r3, r2
 8002b34:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	69ba      	ldr	r2, [r7, #24]
 8002b3a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	f000 80ae 	beq.w	8002ca6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	60fb      	str	r3, [r7, #12]
 8002b4e:	4b5c      	ldr	r3, [pc, #368]	; (8002cc0 <HAL_GPIO_Init+0x2fc>)
 8002b50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b52:	4a5b      	ldr	r2, [pc, #364]	; (8002cc0 <HAL_GPIO_Init+0x2fc>)
 8002b54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b58:	6453      	str	r3, [r2, #68]	; 0x44
 8002b5a:	4b59      	ldr	r3, [pc, #356]	; (8002cc0 <HAL_GPIO_Init+0x2fc>)
 8002b5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b62:	60fb      	str	r3, [r7, #12]
 8002b64:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002b66:	4a57      	ldr	r2, [pc, #348]	; (8002cc4 <HAL_GPIO_Init+0x300>)
 8002b68:	69fb      	ldr	r3, [r7, #28]
 8002b6a:	089b      	lsrs	r3, r3, #2
 8002b6c:	3302      	adds	r3, #2
 8002b6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b72:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002b74:	69fb      	ldr	r3, [r7, #28]
 8002b76:	f003 0303 	and.w	r3, r3, #3
 8002b7a:	009b      	lsls	r3, r3, #2
 8002b7c:	220f      	movs	r2, #15
 8002b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b82:	43db      	mvns	r3, r3
 8002b84:	69ba      	ldr	r2, [r7, #24]
 8002b86:	4013      	ands	r3, r2
 8002b88:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	4a4e      	ldr	r2, [pc, #312]	; (8002cc8 <HAL_GPIO_Init+0x304>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d025      	beq.n	8002bde <HAL_GPIO_Init+0x21a>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	4a4d      	ldr	r2, [pc, #308]	; (8002ccc <HAL_GPIO_Init+0x308>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d01f      	beq.n	8002bda <HAL_GPIO_Init+0x216>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	4a4c      	ldr	r2, [pc, #304]	; (8002cd0 <HAL_GPIO_Init+0x30c>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d019      	beq.n	8002bd6 <HAL_GPIO_Init+0x212>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	4a4b      	ldr	r2, [pc, #300]	; (8002cd4 <HAL_GPIO_Init+0x310>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d013      	beq.n	8002bd2 <HAL_GPIO_Init+0x20e>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	4a4a      	ldr	r2, [pc, #296]	; (8002cd8 <HAL_GPIO_Init+0x314>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d00d      	beq.n	8002bce <HAL_GPIO_Init+0x20a>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	4a49      	ldr	r2, [pc, #292]	; (8002cdc <HAL_GPIO_Init+0x318>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d007      	beq.n	8002bca <HAL_GPIO_Init+0x206>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	4a48      	ldr	r2, [pc, #288]	; (8002ce0 <HAL_GPIO_Init+0x31c>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d101      	bne.n	8002bc6 <HAL_GPIO_Init+0x202>
 8002bc2:	2306      	movs	r3, #6
 8002bc4:	e00c      	b.n	8002be0 <HAL_GPIO_Init+0x21c>
 8002bc6:	2307      	movs	r3, #7
 8002bc8:	e00a      	b.n	8002be0 <HAL_GPIO_Init+0x21c>
 8002bca:	2305      	movs	r3, #5
 8002bcc:	e008      	b.n	8002be0 <HAL_GPIO_Init+0x21c>
 8002bce:	2304      	movs	r3, #4
 8002bd0:	e006      	b.n	8002be0 <HAL_GPIO_Init+0x21c>
 8002bd2:	2303      	movs	r3, #3
 8002bd4:	e004      	b.n	8002be0 <HAL_GPIO_Init+0x21c>
 8002bd6:	2302      	movs	r3, #2
 8002bd8:	e002      	b.n	8002be0 <HAL_GPIO_Init+0x21c>
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e000      	b.n	8002be0 <HAL_GPIO_Init+0x21c>
 8002bde:	2300      	movs	r3, #0
 8002be0:	69fa      	ldr	r2, [r7, #28]
 8002be2:	f002 0203 	and.w	r2, r2, #3
 8002be6:	0092      	lsls	r2, r2, #2
 8002be8:	4093      	lsls	r3, r2
 8002bea:	69ba      	ldr	r2, [r7, #24]
 8002bec:	4313      	orrs	r3, r2
 8002bee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002bf0:	4934      	ldr	r1, [pc, #208]	; (8002cc4 <HAL_GPIO_Init+0x300>)
 8002bf2:	69fb      	ldr	r3, [r7, #28]
 8002bf4:	089b      	lsrs	r3, r3, #2
 8002bf6:	3302      	adds	r3, #2
 8002bf8:	69ba      	ldr	r2, [r7, #24]
 8002bfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002bfe:	4b39      	ldr	r3, [pc, #228]	; (8002ce4 <HAL_GPIO_Init+0x320>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c04:	693b      	ldr	r3, [r7, #16]
 8002c06:	43db      	mvns	r3, r3
 8002c08:	69ba      	ldr	r2, [r7, #24]
 8002c0a:	4013      	ands	r3, r2
 8002c0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d003      	beq.n	8002c22 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002c1a:	69ba      	ldr	r2, [r7, #24]
 8002c1c:	693b      	ldr	r3, [r7, #16]
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002c22:	4a30      	ldr	r2, [pc, #192]	; (8002ce4 <HAL_GPIO_Init+0x320>)
 8002c24:	69bb      	ldr	r3, [r7, #24]
 8002c26:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002c28:	4b2e      	ldr	r3, [pc, #184]	; (8002ce4 <HAL_GPIO_Init+0x320>)
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	43db      	mvns	r3, r3
 8002c32:	69ba      	ldr	r2, [r7, #24]
 8002c34:	4013      	ands	r3, r2
 8002c36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d003      	beq.n	8002c4c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002c44:	69ba      	ldr	r2, [r7, #24]
 8002c46:	693b      	ldr	r3, [r7, #16]
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002c4c:	4a25      	ldr	r2, [pc, #148]	; (8002ce4 <HAL_GPIO_Init+0x320>)
 8002c4e:	69bb      	ldr	r3, [r7, #24]
 8002c50:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c52:	4b24      	ldr	r3, [pc, #144]	; (8002ce4 <HAL_GPIO_Init+0x320>)
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c58:	693b      	ldr	r3, [r7, #16]
 8002c5a:	43db      	mvns	r3, r3
 8002c5c:	69ba      	ldr	r2, [r7, #24]
 8002c5e:	4013      	ands	r3, r2
 8002c60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d003      	beq.n	8002c76 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002c6e:	69ba      	ldr	r2, [r7, #24]
 8002c70:	693b      	ldr	r3, [r7, #16]
 8002c72:	4313      	orrs	r3, r2
 8002c74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002c76:	4a1b      	ldr	r2, [pc, #108]	; (8002ce4 <HAL_GPIO_Init+0x320>)
 8002c78:	69bb      	ldr	r3, [r7, #24]
 8002c7a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c7c:	4b19      	ldr	r3, [pc, #100]	; (8002ce4 <HAL_GPIO_Init+0x320>)
 8002c7e:	68db      	ldr	r3, [r3, #12]
 8002c80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c82:	693b      	ldr	r3, [r7, #16]
 8002c84:	43db      	mvns	r3, r3
 8002c86:	69ba      	ldr	r2, [r7, #24]
 8002c88:	4013      	ands	r3, r2
 8002c8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d003      	beq.n	8002ca0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002c98:	69ba      	ldr	r2, [r7, #24]
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ca0:	4a10      	ldr	r2, [pc, #64]	; (8002ce4 <HAL_GPIO_Init+0x320>)
 8002ca2:	69bb      	ldr	r3, [r7, #24]
 8002ca4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ca6:	69fb      	ldr	r3, [r7, #28]
 8002ca8:	3301      	adds	r3, #1
 8002caa:	61fb      	str	r3, [r7, #28]
 8002cac:	69fb      	ldr	r3, [r7, #28]
 8002cae:	2b0f      	cmp	r3, #15
 8002cb0:	f67f ae96 	bls.w	80029e0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002cb4:	bf00      	nop
 8002cb6:	3724      	adds	r7, #36	; 0x24
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbe:	4770      	bx	lr
 8002cc0:	40023800 	.word	0x40023800
 8002cc4:	40013800 	.word	0x40013800
 8002cc8:	40020000 	.word	0x40020000
 8002ccc:	40020400 	.word	0x40020400
 8002cd0:	40020800 	.word	0x40020800
 8002cd4:	40020c00 	.word	0x40020c00
 8002cd8:	40021000 	.word	0x40021000
 8002cdc:	40021400 	.word	0x40021400
 8002ce0:	40021800 	.word	0x40021800
 8002ce4:	40013c00 	.word	0x40013c00

08002ce8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	b083      	sub	sp, #12
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
 8002cf0:	460b      	mov	r3, r1
 8002cf2:	807b      	strh	r3, [r7, #2]
 8002cf4:	4613      	mov	r3, r2
 8002cf6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002cf8:	787b      	ldrb	r3, [r7, #1]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d003      	beq.n	8002d06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002cfe:	887a      	ldrh	r2, [r7, #2]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002d04:	e003      	b.n	8002d0e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002d06:	887b      	ldrh	r3, [r7, #2]
 8002d08:	041a      	lsls	r2, r3, #16
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	619a      	str	r2, [r3, #24]
}
 8002d0e:	bf00      	nop
 8002d10:	370c      	adds	r7, #12
 8002d12:	46bd      	mov	sp, r7
 8002d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d18:	4770      	bx	lr
	...

08002d1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b084      	sub	sp, #16
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
 8002d24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d101      	bne.n	8002d30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	e0cc      	b.n	8002eca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d30:	4b68      	ldr	r3, [pc, #416]	; (8002ed4 <HAL_RCC_ClockConfig+0x1b8>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f003 030f 	and.w	r3, r3, #15
 8002d38:	683a      	ldr	r2, [r7, #0]
 8002d3a:	429a      	cmp	r2, r3
 8002d3c:	d90c      	bls.n	8002d58 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d3e:	4b65      	ldr	r3, [pc, #404]	; (8002ed4 <HAL_RCC_ClockConfig+0x1b8>)
 8002d40:	683a      	ldr	r2, [r7, #0]
 8002d42:	b2d2      	uxtb	r2, r2
 8002d44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d46:	4b63      	ldr	r3, [pc, #396]	; (8002ed4 <HAL_RCC_ClockConfig+0x1b8>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f003 030f 	and.w	r3, r3, #15
 8002d4e:	683a      	ldr	r2, [r7, #0]
 8002d50:	429a      	cmp	r2, r3
 8002d52:	d001      	beq.n	8002d58 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002d54:	2301      	movs	r3, #1
 8002d56:	e0b8      	b.n	8002eca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f003 0302 	and.w	r3, r3, #2
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d020      	beq.n	8002da6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f003 0304 	and.w	r3, r3, #4
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d005      	beq.n	8002d7c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d70:	4b59      	ldr	r3, [pc, #356]	; (8002ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8002d72:	689b      	ldr	r3, [r3, #8]
 8002d74:	4a58      	ldr	r2, [pc, #352]	; (8002ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8002d76:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002d7a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f003 0308 	and.w	r3, r3, #8
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d005      	beq.n	8002d94 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d88:	4b53      	ldr	r3, [pc, #332]	; (8002ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8002d8a:	689b      	ldr	r3, [r3, #8]
 8002d8c:	4a52      	ldr	r2, [pc, #328]	; (8002ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8002d8e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002d92:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d94:	4b50      	ldr	r3, [pc, #320]	; (8002ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8002d96:	689b      	ldr	r3, [r3, #8]
 8002d98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	494d      	ldr	r1, [pc, #308]	; (8002ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8002da2:	4313      	orrs	r3, r2
 8002da4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f003 0301 	and.w	r3, r3, #1
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d044      	beq.n	8002e3c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	2b01      	cmp	r3, #1
 8002db8:	d107      	bne.n	8002dca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dba:	4b47      	ldr	r3, [pc, #284]	; (8002ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d119      	bne.n	8002dfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e07f      	b.n	8002eca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	2b02      	cmp	r3, #2
 8002dd0:	d003      	beq.n	8002dda <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002dd6:	2b03      	cmp	r3, #3
 8002dd8:	d107      	bne.n	8002dea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dda:	4b3f      	ldr	r3, [pc, #252]	; (8002ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d109      	bne.n	8002dfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002de6:	2301      	movs	r3, #1
 8002de8:	e06f      	b.n	8002eca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dea:	4b3b      	ldr	r3, [pc, #236]	; (8002ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f003 0302 	and.w	r3, r3, #2
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d101      	bne.n	8002dfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	e067      	b.n	8002eca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002dfa:	4b37      	ldr	r3, [pc, #220]	; (8002ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	f023 0203 	bic.w	r2, r3, #3
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	4934      	ldr	r1, [pc, #208]	; (8002ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e0c:	f7ff fc78 	bl	8002700 <HAL_GetTick>
 8002e10:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e12:	e00a      	b.n	8002e2a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e14:	f7ff fc74 	bl	8002700 <HAL_GetTick>
 8002e18:	4602      	mov	r2, r0
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	1ad3      	subs	r3, r2, r3
 8002e1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d901      	bls.n	8002e2a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e26:	2303      	movs	r3, #3
 8002e28:	e04f      	b.n	8002eca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e2a:	4b2b      	ldr	r3, [pc, #172]	; (8002ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8002e2c:	689b      	ldr	r3, [r3, #8]
 8002e2e:	f003 020c 	and.w	r2, r3, #12
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	009b      	lsls	r3, r3, #2
 8002e38:	429a      	cmp	r2, r3
 8002e3a:	d1eb      	bne.n	8002e14 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e3c:	4b25      	ldr	r3, [pc, #148]	; (8002ed4 <HAL_RCC_ClockConfig+0x1b8>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f003 030f 	and.w	r3, r3, #15
 8002e44:	683a      	ldr	r2, [r7, #0]
 8002e46:	429a      	cmp	r2, r3
 8002e48:	d20c      	bcs.n	8002e64 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e4a:	4b22      	ldr	r3, [pc, #136]	; (8002ed4 <HAL_RCC_ClockConfig+0x1b8>)
 8002e4c:	683a      	ldr	r2, [r7, #0]
 8002e4e:	b2d2      	uxtb	r2, r2
 8002e50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e52:	4b20      	ldr	r3, [pc, #128]	; (8002ed4 <HAL_RCC_ClockConfig+0x1b8>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f003 030f 	and.w	r3, r3, #15
 8002e5a:	683a      	ldr	r2, [r7, #0]
 8002e5c:	429a      	cmp	r2, r3
 8002e5e:	d001      	beq.n	8002e64 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002e60:	2301      	movs	r3, #1
 8002e62:	e032      	b.n	8002eca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f003 0304 	and.w	r3, r3, #4
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d008      	beq.n	8002e82 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e70:	4b19      	ldr	r3, [pc, #100]	; (8002ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8002e72:	689b      	ldr	r3, [r3, #8]
 8002e74:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	68db      	ldr	r3, [r3, #12]
 8002e7c:	4916      	ldr	r1, [pc, #88]	; (8002ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f003 0308 	and.w	r3, r3, #8
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d009      	beq.n	8002ea2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e8e:	4b12      	ldr	r3, [pc, #72]	; (8002ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8002e90:	689b      	ldr	r3, [r3, #8]
 8002e92:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	691b      	ldr	r3, [r3, #16]
 8002e9a:	00db      	lsls	r3, r3, #3
 8002e9c:	490e      	ldr	r1, [pc, #56]	; (8002ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002ea2:	f000 f821 	bl	8002ee8 <HAL_RCC_GetSysClockFreq>
 8002ea6:	4601      	mov	r1, r0
 8002ea8:	4b0b      	ldr	r3, [pc, #44]	; (8002ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	091b      	lsrs	r3, r3, #4
 8002eae:	f003 030f 	and.w	r3, r3, #15
 8002eb2:	4a0a      	ldr	r2, [pc, #40]	; (8002edc <HAL_RCC_ClockConfig+0x1c0>)
 8002eb4:	5cd3      	ldrb	r3, [r2, r3]
 8002eb6:	fa21 f303 	lsr.w	r3, r1, r3
 8002eba:	4a09      	ldr	r2, [pc, #36]	; (8002ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8002ebc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002ebe:	4b09      	ldr	r3, [pc, #36]	; (8002ee4 <HAL_RCC_ClockConfig+0x1c8>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	f7ff fbd8 	bl	8002678 <HAL_InitTick>

  return HAL_OK;
 8002ec8:	2300      	movs	r3, #0
}
 8002eca:	4618      	mov	r0, r3
 8002ecc:	3710      	adds	r7, #16
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}
 8002ed2:	bf00      	nop
 8002ed4:	40023c00 	.word	0x40023c00
 8002ed8:	40023800 	.word	0x40023800
 8002edc:	08004154 	.word	0x08004154
 8002ee0:	20000000 	.word	0x20000000
 8002ee4:	20000004 	.word	0x20000004

08002ee8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ee8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002eea:	b087      	sub	sp, #28
 8002eec:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002eee:	2300      	movs	r3, #0
 8002ef0:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 8002efa:	2300      	movs	r3, #0
 8002efc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002efe:	2300      	movs	r3, #0
 8002f00:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f02:	4bc6      	ldr	r3, [pc, #792]	; (800321c <HAL_RCC_GetSysClockFreq+0x334>)
 8002f04:	689b      	ldr	r3, [r3, #8]
 8002f06:	f003 030c 	and.w	r3, r3, #12
 8002f0a:	2b0c      	cmp	r3, #12
 8002f0c:	f200 817e 	bhi.w	800320c <HAL_RCC_GetSysClockFreq+0x324>
 8002f10:	a201      	add	r2, pc, #4	; (adr r2, 8002f18 <HAL_RCC_GetSysClockFreq+0x30>)
 8002f12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f16:	bf00      	nop
 8002f18:	08002f4d 	.word	0x08002f4d
 8002f1c:	0800320d 	.word	0x0800320d
 8002f20:	0800320d 	.word	0x0800320d
 8002f24:	0800320d 	.word	0x0800320d
 8002f28:	08002f53 	.word	0x08002f53
 8002f2c:	0800320d 	.word	0x0800320d
 8002f30:	0800320d 	.word	0x0800320d
 8002f34:	0800320d 	.word	0x0800320d
 8002f38:	08002f59 	.word	0x08002f59
 8002f3c:	0800320d 	.word	0x0800320d
 8002f40:	0800320d 	.word	0x0800320d
 8002f44:	0800320d 	.word	0x0800320d
 8002f48:	080030b5 	.word	0x080030b5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002f4c:	4bb4      	ldr	r3, [pc, #720]	; (8003220 <HAL_RCC_GetSysClockFreq+0x338>)
 8002f4e:	613b      	str	r3, [r7, #16]
       break;
 8002f50:	e15f      	b.n	8003212 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002f52:	4bb4      	ldr	r3, [pc, #720]	; (8003224 <HAL_RCC_GetSysClockFreq+0x33c>)
 8002f54:	613b      	str	r3, [r7, #16]
      break;
 8002f56:	e15c      	b.n	8003212 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f58:	4bb0      	ldr	r3, [pc, #704]	; (800321c <HAL_RCC_GetSysClockFreq+0x334>)
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f60:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f62:	4bae      	ldr	r3, [pc, #696]	; (800321c <HAL_RCC_GetSysClockFreq+0x334>)
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d04a      	beq.n	8003004 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f6e:	4bab      	ldr	r3, [pc, #684]	; (800321c <HAL_RCC_GetSysClockFreq+0x334>)
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	099b      	lsrs	r3, r3, #6
 8002f74:	f04f 0400 	mov.w	r4, #0
 8002f78:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002f7c:	f04f 0200 	mov.w	r2, #0
 8002f80:	ea03 0501 	and.w	r5, r3, r1
 8002f84:	ea04 0602 	and.w	r6, r4, r2
 8002f88:	4629      	mov	r1, r5
 8002f8a:	4632      	mov	r2, r6
 8002f8c:	f04f 0300 	mov.w	r3, #0
 8002f90:	f04f 0400 	mov.w	r4, #0
 8002f94:	0154      	lsls	r4, r2, #5
 8002f96:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002f9a:	014b      	lsls	r3, r1, #5
 8002f9c:	4619      	mov	r1, r3
 8002f9e:	4622      	mov	r2, r4
 8002fa0:	1b49      	subs	r1, r1, r5
 8002fa2:	eb62 0206 	sbc.w	r2, r2, r6
 8002fa6:	f04f 0300 	mov.w	r3, #0
 8002faa:	f04f 0400 	mov.w	r4, #0
 8002fae:	0194      	lsls	r4, r2, #6
 8002fb0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002fb4:	018b      	lsls	r3, r1, #6
 8002fb6:	1a5b      	subs	r3, r3, r1
 8002fb8:	eb64 0402 	sbc.w	r4, r4, r2
 8002fbc:	f04f 0100 	mov.w	r1, #0
 8002fc0:	f04f 0200 	mov.w	r2, #0
 8002fc4:	00e2      	lsls	r2, r4, #3
 8002fc6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002fca:	00d9      	lsls	r1, r3, #3
 8002fcc:	460b      	mov	r3, r1
 8002fce:	4614      	mov	r4, r2
 8002fd0:	195b      	adds	r3, r3, r5
 8002fd2:	eb44 0406 	adc.w	r4, r4, r6
 8002fd6:	f04f 0100 	mov.w	r1, #0
 8002fda:	f04f 0200 	mov.w	r2, #0
 8002fde:	0262      	lsls	r2, r4, #9
 8002fe0:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002fe4:	0259      	lsls	r1, r3, #9
 8002fe6:	460b      	mov	r3, r1
 8002fe8:	4614      	mov	r4, r2
 8002fea:	4618      	mov	r0, r3
 8002fec:	4621      	mov	r1, r4
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	f04f 0400 	mov.w	r4, #0
 8002ff4:	461a      	mov	r2, r3
 8002ff6:	4623      	mov	r3, r4
 8002ff8:	f7fd fd24 	bl	8000a44 <__aeabi_uldivmod>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	460c      	mov	r4, r1
 8003000:	617b      	str	r3, [r7, #20]
 8003002:	e049      	b.n	8003098 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003004:	4b85      	ldr	r3, [pc, #532]	; (800321c <HAL_RCC_GetSysClockFreq+0x334>)
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	099b      	lsrs	r3, r3, #6
 800300a:	f04f 0400 	mov.w	r4, #0
 800300e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003012:	f04f 0200 	mov.w	r2, #0
 8003016:	ea03 0501 	and.w	r5, r3, r1
 800301a:	ea04 0602 	and.w	r6, r4, r2
 800301e:	4629      	mov	r1, r5
 8003020:	4632      	mov	r2, r6
 8003022:	f04f 0300 	mov.w	r3, #0
 8003026:	f04f 0400 	mov.w	r4, #0
 800302a:	0154      	lsls	r4, r2, #5
 800302c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003030:	014b      	lsls	r3, r1, #5
 8003032:	4619      	mov	r1, r3
 8003034:	4622      	mov	r2, r4
 8003036:	1b49      	subs	r1, r1, r5
 8003038:	eb62 0206 	sbc.w	r2, r2, r6
 800303c:	f04f 0300 	mov.w	r3, #0
 8003040:	f04f 0400 	mov.w	r4, #0
 8003044:	0194      	lsls	r4, r2, #6
 8003046:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800304a:	018b      	lsls	r3, r1, #6
 800304c:	1a5b      	subs	r3, r3, r1
 800304e:	eb64 0402 	sbc.w	r4, r4, r2
 8003052:	f04f 0100 	mov.w	r1, #0
 8003056:	f04f 0200 	mov.w	r2, #0
 800305a:	00e2      	lsls	r2, r4, #3
 800305c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003060:	00d9      	lsls	r1, r3, #3
 8003062:	460b      	mov	r3, r1
 8003064:	4614      	mov	r4, r2
 8003066:	195b      	adds	r3, r3, r5
 8003068:	eb44 0406 	adc.w	r4, r4, r6
 800306c:	f04f 0100 	mov.w	r1, #0
 8003070:	f04f 0200 	mov.w	r2, #0
 8003074:	02a2      	lsls	r2, r4, #10
 8003076:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800307a:	0299      	lsls	r1, r3, #10
 800307c:	460b      	mov	r3, r1
 800307e:	4614      	mov	r4, r2
 8003080:	4618      	mov	r0, r3
 8003082:	4621      	mov	r1, r4
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	f04f 0400 	mov.w	r4, #0
 800308a:	461a      	mov	r2, r3
 800308c:	4623      	mov	r3, r4
 800308e:	f7fd fcd9 	bl	8000a44 <__aeabi_uldivmod>
 8003092:	4603      	mov	r3, r0
 8003094:	460c      	mov	r4, r1
 8003096:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003098:	4b60      	ldr	r3, [pc, #384]	; (800321c <HAL_RCC_GetSysClockFreq+0x334>)
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	0c1b      	lsrs	r3, r3, #16
 800309e:	f003 0303 	and.w	r3, r3, #3
 80030a2:	3301      	adds	r3, #1
 80030a4:	005b      	lsls	r3, r3, #1
 80030a6:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 80030a8:	697a      	ldr	r2, [r7, #20]
 80030aa:	68bb      	ldr	r3, [r7, #8]
 80030ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80030b0:	613b      	str	r3, [r7, #16]
      break;
 80030b2:	e0ae      	b.n	8003212 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80030b4:	4b59      	ldr	r3, [pc, #356]	; (800321c <HAL_RCC_GetSysClockFreq+0x334>)
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80030bc:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80030be:	4b57      	ldr	r3, [pc, #348]	; (800321c <HAL_RCC_GetSysClockFreq+0x334>)
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d04a      	beq.n	8003160 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030ca:	4b54      	ldr	r3, [pc, #336]	; (800321c <HAL_RCC_GetSysClockFreq+0x334>)
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	099b      	lsrs	r3, r3, #6
 80030d0:	f04f 0400 	mov.w	r4, #0
 80030d4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80030d8:	f04f 0200 	mov.w	r2, #0
 80030dc:	ea03 0501 	and.w	r5, r3, r1
 80030e0:	ea04 0602 	and.w	r6, r4, r2
 80030e4:	4629      	mov	r1, r5
 80030e6:	4632      	mov	r2, r6
 80030e8:	f04f 0300 	mov.w	r3, #0
 80030ec:	f04f 0400 	mov.w	r4, #0
 80030f0:	0154      	lsls	r4, r2, #5
 80030f2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80030f6:	014b      	lsls	r3, r1, #5
 80030f8:	4619      	mov	r1, r3
 80030fa:	4622      	mov	r2, r4
 80030fc:	1b49      	subs	r1, r1, r5
 80030fe:	eb62 0206 	sbc.w	r2, r2, r6
 8003102:	f04f 0300 	mov.w	r3, #0
 8003106:	f04f 0400 	mov.w	r4, #0
 800310a:	0194      	lsls	r4, r2, #6
 800310c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003110:	018b      	lsls	r3, r1, #6
 8003112:	1a5b      	subs	r3, r3, r1
 8003114:	eb64 0402 	sbc.w	r4, r4, r2
 8003118:	f04f 0100 	mov.w	r1, #0
 800311c:	f04f 0200 	mov.w	r2, #0
 8003120:	00e2      	lsls	r2, r4, #3
 8003122:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003126:	00d9      	lsls	r1, r3, #3
 8003128:	460b      	mov	r3, r1
 800312a:	4614      	mov	r4, r2
 800312c:	195b      	adds	r3, r3, r5
 800312e:	eb44 0406 	adc.w	r4, r4, r6
 8003132:	f04f 0100 	mov.w	r1, #0
 8003136:	f04f 0200 	mov.w	r2, #0
 800313a:	0262      	lsls	r2, r4, #9
 800313c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003140:	0259      	lsls	r1, r3, #9
 8003142:	460b      	mov	r3, r1
 8003144:	4614      	mov	r4, r2
 8003146:	4618      	mov	r0, r3
 8003148:	4621      	mov	r1, r4
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	f04f 0400 	mov.w	r4, #0
 8003150:	461a      	mov	r2, r3
 8003152:	4623      	mov	r3, r4
 8003154:	f7fd fc76 	bl	8000a44 <__aeabi_uldivmod>
 8003158:	4603      	mov	r3, r0
 800315a:	460c      	mov	r4, r1
 800315c:	617b      	str	r3, [r7, #20]
 800315e:	e049      	b.n	80031f4 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003160:	4b2e      	ldr	r3, [pc, #184]	; (800321c <HAL_RCC_GetSysClockFreq+0x334>)
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	099b      	lsrs	r3, r3, #6
 8003166:	f04f 0400 	mov.w	r4, #0
 800316a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800316e:	f04f 0200 	mov.w	r2, #0
 8003172:	ea03 0501 	and.w	r5, r3, r1
 8003176:	ea04 0602 	and.w	r6, r4, r2
 800317a:	4629      	mov	r1, r5
 800317c:	4632      	mov	r2, r6
 800317e:	f04f 0300 	mov.w	r3, #0
 8003182:	f04f 0400 	mov.w	r4, #0
 8003186:	0154      	lsls	r4, r2, #5
 8003188:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800318c:	014b      	lsls	r3, r1, #5
 800318e:	4619      	mov	r1, r3
 8003190:	4622      	mov	r2, r4
 8003192:	1b49      	subs	r1, r1, r5
 8003194:	eb62 0206 	sbc.w	r2, r2, r6
 8003198:	f04f 0300 	mov.w	r3, #0
 800319c:	f04f 0400 	mov.w	r4, #0
 80031a0:	0194      	lsls	r4, r2, #6
 80031a2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80031a6:	018b      	lsls	r3, r1, #6
 80031a8:	1a5b      	subs	r3, r3, r1
 80031aa:	eb64 0402 	sbc.w	r4, r4, r2
 80031ae:	f04f 0100 	mov.w	r1, #0
 80031b2:	f04f 0200 	mov.w	r2, #0
 80031b6:	00e2      	lsls	r2, r4, #3
 80031b8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80031bc:	00d9      	lsls	r1, r3, #3
 80031be:	460b      	mov	r3, r1
 80031c0:	4614      	mov	r4, r2
 80031c2:	195b      	adds	r3, r3, r5
 80031c4:	eb44 0406 	adc.w	r4, r4, r6
 80031c8:	f04f 0100 	mov.w	r1, #0
 80031cc:	f04f 0200 	mov.w	r2, #0
 80031d0:	02a2      	lsls	r2, r4, #10
 80031d2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80031d6:	0299      	lsls	r1, r3, #10
 80031d8:	460b      	mov	r3, r1
 80031da:	4614      	mov	r4, r2
 80031dc:	4618      	mov	r0, r3
 80031de:	4621      	mov	r1, r4
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	f04f 0400 	mov.w	r4, #0
 80031e6:	461a      	mov	r2, r3
 80031e8:	4623      	mov	r3, r4
 80031ea:	f7fd fc2b 	bl	8000a44 <__aeabi_uldivmod>
 80031ee:	4603      	mov	r3, r0
 80031f0:	460c      	mov	r4, r1
 80031f2:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80031f4:	4b09      	ldr	r3, [pc, #36]	; (800321c <HAL_RCC_GetSysClockFreq+0x334>)
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	0f1b      	lsrs	r3, r3, #28
 80031fa:	f003 0307 	and.w	r3, r3, #7
 80031fe:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8003200:	697a      	ldr	r2, [r7, #20]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	fbb2 f3f3 	udiv	r3, r2, r3
 8003208:	613b      	str	r3, [r7, #16]
      break;
 800320a:	e002      	b.n	8003212 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800320c:	4b04      	ldr	r3, [pc, #16]	; (8003220 <HAL_RCC_GetSysClockFreq+0x338>)
 800320e:	613b      	str	r3, [r7, #16]
      break;
 8003210:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003212:	693b      	ldr	r3, [r7, #16]
}
 8003214:	4618      	mov	r0, r3
 8003216:	371c      	adds	r7, #28
 8003218:	46bd      	mov	sp, r7
 800321a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800321c:	40023800 	.word	0x40023800
 8003220:	00f42400 	.word	0x00f42400
 8003224:	007a1200 	.word	0x007a1200

08003228 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b086      	sub	sp, #24
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003230:	2300      	movs	r3, #0
 8003232:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f003 0301 	and.w	r3, r3, #1
 800323c:	2b00      	cmp	r3, #0
 800323e:	f000 8083 	beq.w	8003348 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003242:	4b95      	ldr	r3, [pc, #596]	; (8003498 <HAL_RCC_OscConfig+0x270>)
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	f003 030c 	and.w	r3, r3, #12
 800324a:	2b04      	cmp	r3, #4
 800324c:	d019      	beq.n	8003282 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800324e:	4b92      	ldr	r3, [pc, #584]	; (8003498 <HAL_RCC_OscConfig+0x270>)
 8003250:	689b      	ldr	r3, [r3, #8]
 8003252:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003256:	2b08      	cmp	r3, #8
 8003258:	d106      	bne.n	8003268 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800325a:	4b8f      	ldr	r3, [pc, #572]	; (8003498 <HAL_RCC_OscConfig+0x270>)
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003262:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003266:	d00c      	beq.n	8003282 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003268:	4b8b      	ldr	r3, [pc, #556]	; (8003498 <HAL_RCC_OscConfig+0x270>)
 800326a:	689b      	ldr	r3, [r3, #8]
 800326c:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003270:	2b0c      	cmp	r3, #12
 8003272:	d112      	bne.n	800329a <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003274:	4b88      	ldr	r3, [pc, #544]	; (8003498 <HAL_RCC_OscConfig+0x270>)
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800327c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003280:	d10b      	bne.n	800329a <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003282:	4b85      	ldr	r3, [pc, #532]	; (8003498 <HAL_RCC_OscConfig+0x270>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800328a:	2b00      	cmp	r3, #0
 800328c:	d05b      	beq.n	8003346 <HAL_RCC_OscConfig+0x11e>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d157      	bne.n	8003346 <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8003296:	2301      	movs	r3, #1
 8003298:	e216      	b.n	80036c8 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032a2:	d106      	bne.n	80032b2 <HAL_RCC_OscConfig+0x8a>
 80032a4:	4b7c      	ldr	r3, [pc, #496]	; (8003498 <HAL_RCC_OscConfig+0x270>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a7b      	ldr	r2, [pc, #492]	; (8003498 <HAL_RCC_OscConfig+0x270>)
 80032aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032ae:	6013      	str	r3, [r2, #0]
 80032b0:	e01d      	b.n	80032ee <HAL_RCC_OscConfig+0xc6>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80032ba:	d10c      	bne.n	80032d6 <HAL_RCC_OscConfig+0xae>
 80032bc:	4b76      	ldr	r3, [pc, #472]	; (8003498 <HAL_RCC_OscConfig+0x270>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a75      	ldr	r2, [pc, #468]	; (8003498 <HAL_RCC_OscConfig+0x270>)
 80032c2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80032c6:	6013      	str	r3, [r2, #0]
 80032c8:	4b73      	ldr	r3, [pc, #460]	; (8003498 <HAL_RCC_OscConfig+0x270>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a72      	ldr	r2, [pc, #456]	; (8003498 <HAL_RCC_OscConfig+0x270>)
 80032ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032d2:	6013      	str	r3, [r2, #0]
 80032d4:	e00b      	b.n	80032ee <HAL_RCC_OscConfig+0xc6>
 80032d6:	4b70      	ldr	r3, [pc, #448]	; (8003498 <HAL_RCC_OscConfig+0x270>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a6f      	ldr	r2, [pc, #444]	; (8003498 <HAL_RCC_OscConfig+0x270>)
 80032dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032e0:	6013      	str	r3, [r2, #0]
 80032e2:	4b6d      	ldr	r3, [pc, #436]	; (8003498 <HAL_RCC_OscConfig+0x270>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a6c      	ldr	r2, [pc, #432]	; (8003498 <HAL_RCC_OscConfig+0x270>)
 80032e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032ec:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d013      	beq.n	800331e <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032f6:	f7ff fa03 	bl	8002700 <HAL_GetTick>
 80032fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032fc:	e008      	b.n	8003310 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032fe:	f7ff f9ff 	bl	8002700 <HAL_GetTick>
 8003302:	4602      	mov	r2, r0
 8003304:	693b      	ldr	r3, [r7, #16]
 8003306:	1ad3      	subs	r3, r2, r3
 8003308:	2b64      	cmp	r3, #100	; 0x64
 800330a:	d901      	bls.n	8003310 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800330c:	2303      	movs	r3, #3
 800330e:	e1db      	b.n	80036c8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003310:	4b61      	ldr	r3, [pc, #388]	; (8003498 <HAL_RCC_OscConfig+0x270>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003318:	2b00      	cmp	r3, #0
 800331a:	d0f0      	beq.n	80032fe <HAL_RCC_OscConfig+0xd6>
 800331c:	e014      	b.n	8003348 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800331e:	f7ff f9ef 	bl	8002700 <HAL_GetTick>
 8003322:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003324:	e008      	b.n	8003338 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003326:	f7ff f9eb 	bl	8002700 <HAL_GetTick>
 800332a:	4602      	mov	r2, r0
 800332c:	693b      	ldr	r3, [r7, #16]
 800332e:	1ad3      	subs	r3, r2, r3
 8003330:	2b64      	cmp	r3, #100	; 0x64
 8003332:	d901      	bls.n	8003338 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8003334:	2303      	movs	r3, #3
 8003336:	e1c7      	b.n	80036c8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003338:	4b57      	ldr	r3, [pc, #348]	; (8003498 <HAL_RCC_OscConfig+0x270>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003340:	2b00      	cmp	r3, #0
 8003342:	d1f0      	bne.n	8003326 <HAL_RCC_OscConfig+0xfe>
 8003344:	e000      	b.n	8003348 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003346:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f003 0302 	and.w	r3, r3, #2
 8003350:	2b00      	cmp	r3, #0
 8003352:	d06f      	beq.n	8003434 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003354:	4b50      	ldr	r3, [pc, #320]	; (8003498 <HAL_RCC_OscConfig+0x270>)
 8003356:	689b      	ldr	r3, [r3, #8]
 8003358:	f003 030c 	and.w	r3, r3, #12
 800335c:	2b00      	cmp	r3, #0
 800335e:	d017      	beq.n	8003390 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003360:	4b4d      	ldr	r3, [pc, #308]	; (8003498 <HAL_RCC_OscConfig+0x270>)
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003368:	2b08      	cmp	r3, #8
 800336a:	d105      	bne.n	8003378 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800336c:	4b4a      	ldr	r3, [pc, #296]	; (8003498 <HAL_RCC_OscConfig+0x270>)
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003374:	2b00      	cmp	r3, #0
 8003376:	d00b      	beq.n	8003390 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003378:	4b47      	ldr	r3, [pc, #284]	; (8003498 <HAL_RCC_OscConfig+0x270>)
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003380:	2b0c      	cmp	r3, #12
 8003382:	d11c      	bne.n	80033be <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003384:	4b44      	ldr	r3, [pc, #272]	; (8003498 <HAL_RCC_OscConfig+0x270>)
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800338c:	2b00      	cmp	r3, #0
 800338e:	d116      	bne.n	80033be <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003390:	4b41      	ldr	r3, [pc, #260]	; (8003498 <HAL_RCC_OscConfig+0x270>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f003 0302 	and.w	r3, r3, #2
 8003398:	2b00      	cmp	r3, #0
 800339a:	d005      	beq.n	80033a8 <HAL_RCC_OscConfig+0x180>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	68db      	ldr	r3, [r3, #12]
 80033a0:	2b01      	cmp	r3, #1
 80033a2:	d001      	beq.n	80033a8 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 80033a4:	2301      	movs	r3, #1
 80033a6:	e18f      	b.n	80036c8 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033a8:	4b3b      	ldr	r3, [pc, #236]	; (8003498 <HAL_RCC_OscConfig+0x270>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	691b      	ldr	r3, [r3, #16]
 80033b4:	00db      	lsls	r3, r3, #3
 80033b6:	4938      	ldr	r1, [pc, #224]	; (8003498 <HAL_RCC_OscConfig+0x270>)
 80033b8:	4313      	orrs	r3, r2
 80033ba:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033bc:	e03a      	b.n	8003434 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	68db      	ldr	r3, [r3, #12]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d020      	beq.n	8003408 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80033c6:	4b35      	ldr	r3, [pc, #212]	; (800349c <HAL_RCC_OscConfig+0x274>)
 80033c8:	2201      	movs	r2, #1
 80033ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033cc:	f7ff f998 	bl	8002700 <HAL_GetTick>
 80033d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033d2:	e008      	b.n	80033e6 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80033d4:	f7ff f994 	bl	8002700 <HAL_GetTick>
 80033d8:	4602      	mov	r2, r0
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	1ad3      	subs	r3, r2, r3
 80033de:	2b02      	cmp	r3, #2
 80033e0:	d901      	bls.n	80033e6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80033e2:	2303      	movs	r3, #3
 80033e4:	e170      	b.n	80036c8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033e6:	4b2c      	ldr	r3, [pc, #176]	; (8003498 <HAL_RCC_OscConfig+0x270>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f003 0302 	and.w	r3, r3, #2
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d0f0      	beq.n	80033d4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033f2:	4b29      	ldr	r3, [pc, #164]	; (8003498 <HAL_RCC_OscConfig+0x270>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	691b      	ldr	r3, [r3, #16]
 80033fe:	00db      	lsls	r3, r3, #3
 8003400:	4925      	ldr	r1, [pc, #148]	; (8003498 <HAL_RCC_OscConfig+0x270>)
 8003402:	4313      	orrs	r3, r2
 8003404:	600b      	str	r3, [r1, #0]
 8003406:	e015      	b.n	8003434 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003408:	4b24      	ldr	r3, [pc, #144]	; (800349c <HAL_RCC_OscConfig+0x274>)
 800340a:	2200      	movs	r2, #0
 800340c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800340e:	f7ff f977 	bl	8002700 <HAL_GetTick>
 8003412:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003414:	e008      	b.n	8003428 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003416:	f7ff f973 	bl	8002700 <HAL_GetTick>
 800341a:	4602      	mov	r2, r0
 800341c:	693b      	ldr	r3, [r7, #16]
 800341e:	1ad3      	subs	r3, r2, r3
 8003420:	2b02      	cmp	r3, #2
 8003422:	d901      	bls.n	8003428 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8003424:	2303      	movs	r3, #3
 8003426:	e14f      	b.n	80036c8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003428:	4b1b      	ldr	r3, [pc, #108]	; (8003498 <HAL_RCC_OscConfig+0x270>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f003 0302 	and.w	r3, r3, #2
 8003430:	2b00      	cmp	r3, #0
 8003432:	d1f0      	bne.n	8003416 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f003 0308 	and.w	r3, r3, #8
 800343c:	2b00      	cmp	r3, #0
 800343e:	d037      	beq.n	80034b0 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	695b      	ldr	r3, [r3, #20]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d016      	beq.n	8003476 <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003448:	4b15      	ldr	r3, [pc, #84]	; (80034a0 <HAL_RCC_OscConfig+0x278>)
 800344a:	2201      	movs	r2, #1
 800344c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800344e:	f7ff f957 	bl	8002700 <HAL_GetTick>
 8003452:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003454:	e008      	b.n	8003468 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003456:	f7ff f953 	bl	8002700 <HAL_GetTick>
 800345a:	4602      	mov	r2, r0
 800345c:	693b      	ldr	r3, [r7, #16]
 800345e:	1ad3      	subs	r3, r2, r3
 8003460:	2b02      	cmp	r3, #2
 8003462:	d901      	bls.n	8003468 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003464:	2303      	movs	r3, #3
 8003466:	e12f      	b.n	80036c8 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003468:	4b0b      	ldr	r3, [pc, #44]	; (8003498 <HAL_RCC_OscConfig+0x270>)
 800346a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800346c:	f003 0302 	and.w	r3, r3, #2
 8003470:	2b00      	cmp	r3, #0
 8003472:	d0f0      	beq.n	8003456 <HAL_RCC_OscConfig+0x22e>
 8003474:	e01c      	b.n	80034b0 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003476:	4b0a      	ldr	r3, [pc, #40]	; (80034a0 <HAL_RCC_OscConfig+0x278>)
 8003478:	2200      	movs	r2, #0
 800347a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800347c:	f7ff f940 	bl	8002700 <HAL_GetTick>
 8003480:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003482:	e00f      	b.n	80034a4 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003484:	f7ff f93c 	bl	8002700 <HAL_GetTick>
 8003488:	4602      	mov	r2, r0
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	1ad3      	subs	r3, r2, r3
 800348e:	2b02      	cmp	r3, #2
 8003490:	d908      	bls.n	80034a4 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8003492:	2303      	movs	r3, #3
 8003494:	e118      	b.n	80036c8 <HAL_RCC_OscConfig+0x4a0>
 8003496:	bf00      	nop
 8003498:	40023800 	.word	0x40023800
 800349c:	42470000 	.word	0x42470000
 80034a0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034a4:	4b8a      	ldr	r3, [pc, #552]	; (80036d0 <HAL_RCC_OscConfig+0x4a8>)
 80034a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034a8:	f003 0302 	and.w	r3, r3, #2
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d1e9      	bne.n	8003484 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f003 0304 	and.w	r3, r3, #4
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	f000 8097 	beq.w	80035ec <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034be:	2300      	movs	r3, #0
 80034c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034c2:	4b83      	ldr	r3, [pc, #524]	; (80036d0 <HAL_RCC_OscConfig+0x4a8>)
 80034c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d10f      	bne.n	80034ee <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034ce:	2300      	movs	r3, #0
 80034d0:	60fb      	str	r3, [r7, #12]
 80034d2:	4b7f      	ldr	r3, [pc, #508]	; (80036d0 <HAL_RCC_OscConfig+0x4a8>)
 80034d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d6:	4a7e      	ldr	r2, [pc, #504]	; (80036d0 <HAL_RCC_OscConfig+0x4a8>)
 80034d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034dc:	6413      	str	r3, [r2, #64]	; 0x40
 80034de:	4b7c      	ldr	r3, [pc, #496]	; (80036d0 <HAL_RCC_OscConfig+0x4a8>)
 80034e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034e6:	60fb      	str	r3, [r7, #12]
 80034e8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80034ea:	2301      	movs	r3, #1
 80034ec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034ee:	4b79      	ldr	r3, [pc, #484]	; (80036d4 <HAL_RCC_OscConfig+0x4ac>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d118      	bne.n	800352c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034fa:	4b76      	ldr	r3, [pc, #472]	; (80036d4 <HAL_RCC_OscConfig+0x4ac>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4a75      	ldr	r2, [pc, #468]	; (80036d4 <HAL_RCC_OscConfig+0x4ac>)
 8003500:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003504:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003506:	f7ff f8fb 	bl	8002700 <HAL_GetTick>
 800350a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800350c:	e008      	b.n	8003520 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800350e:	f7ff f8f7 	bl	8002700 <HAL_GetTick>
 8003512:	4602      	mov	r2, r0
 8003514:	693b      	ldr	r3, [r7, #16]
 8003516:	1ad3      	subs	r3, r2, r3
 8003518:	2b02      	cmp	r3, #2
 800351a:	d901      	bls.n	8003520 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800351c:	2303      	movs	r3, #3
 800351e:	e0d3      	b.n	80036c8 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003520:	4b6c      	ldr	r3, [pc, #432]	; (80036d4 <HAL_RCC_OscConfig+0x4ac>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003528:	2b00      	cmp	r3, #0
 800352a:	d0f0      	beq.n	800350e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	689b      	ldr	r3, [r3, #8]
 8003530:	2b01      	cmp	r3, #1
 8003532:	d106      	bne.n	8003542 <HAL_RCC_OscConfig+0x31a>
 8003534:	4b66      	ldr	r3, [pc, #408]	; (80036d0 <HAL_RCC_OscConfig+0x4a8>)
 8003536:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003538:	4a65      	ldr	r2, [pc, #404]	; (80036d0 <HAL_RCC_OscConfig+0x4a8>)
 800353a:	f043 0301 	orr.w	r3, r3, #1
 800353e:	6713      	str	r3, [r2, #112]	; 0x70
 8003540:	e01c      	b.n	800357c <HAL_RCC_OscConfig+0x354>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	689b      	ldr	r3, [r3, #8]
 8003546:	2b05      	cmp	r3, #5
 8003548:	d10c      	bne.n	8003564 <HAL_RCC_OscConfig+0x33c>
 800354a:	4b61      	ldr	r3, [pc, #388]	; (80036d0 <HAL_RCC_OscConfig+0x4a8>)
 800354c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800354e:	4a60      	ldr	r2, [pc, #384]	; (80036d0 <HAL_RCC_OscConfig+0x4a8>)
 8003550:	f043 0304 	orr.w	r3, r3, #4
 8003554:	6713      	str	r3, [r2, #112]	; 0x70
 8003556:	4b5e      	ldr	r3, [pc, #376]	; (80036d0 <HAL_RCC_OscConfig+0x4a8>)
 8003558:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800355a:	4a5d      	ldr	r2, [pc, #372]	; (80036d0 <HAL_RCC_OscConfig+0x4a8>)
 800355c:	f043 0301 	orr.w	r3, r3, #1
 8003560:	6713      	str	r3, [r2, #112]	; 0x70
 8003562:	e00b      	b.n	800357c <HAL_RCC_OscConfig+0x354>
 8003564:	4b5a      	ldr	r3, [pc, #360]	; (80036d0 <HAL_RCC_OscConfig+0x4a8>)
 8003566:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003568:	4a59      	ldr	r2, [pc, #356]	; (80036d0 <HAL_RCC_OscConfig+0x4a8>)
 800356a:	f023 0301 	bic.w	r3, r3, #1
 800356e:	6713      	str	r3, [r2, #112]	; 0x70
 8003570:	4b57      	ldr	r3, [pc, #348]	; (80036d0 <HAL_RCC_OscConfig+0x4a8>)
 8003572:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003574:	4a56      	ldr	r2, [pc, #344]	; (80036d0 <HAL_RCC_OscConfig+0x4a8>)
 8003576:	f023 0304 	bic.w	r3, r3, #4
 800357a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d015      	beq.n	80035b0 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003584:	f7ff f8bc 	bl	8002700 <HAL_GetTick>
 8003588:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800358a:	e00a      	b.n	80035a2 <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800358c:	f7ff f8b8 	bl	8002700 <HAL_GetTick>
 8003590:	4602      	mov	r2, r0
 8003592:	693b      	ldr	r3, [r7, #16]
 8003594:	1ad3      	subs	r3, r2, r3
 8003596:	f241 3288 	movw	r2, #5000	; 0x1388
 800359a:	4293      	cmp	r3, r2
 800359c:	d901      	bls.n	80035a2 <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 800359e:	2303      	movs	r3, #3
 80035a0:	e092      	b.n	80036c8 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035a2:	4b4b      	ldr	r3, [pc, #300]	; (80036d0 <HAL_RCC_OscConfig+0x4a8>)
 80035a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035a6:	f003 0302 	and.w	r3, r3, #2
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d0ee      	beq.n	800358c <HAL_RCC_OscConfig+0x364>
 80035ae:	e014      	b.n	80035da <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035b0:	f7ff f8a6 	bl	8002700 <HAL_GetTick>
 80035b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035b6:	e00a      	b.n	80035ce <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035b8:	f7ff f8a2 	bl	8002700 <HAL_GetTick>
 80035bc:	4602      	mov	r2, r0
 80035be:	693b      	ldr	r3, [r7, #16]
 80035c0:	1ad3      	subs	r3, r2, r3
 80035c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d901      	bls.n	80035ce <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 80035ca:	2303      	movs	r3, #3
 80035cc:	e07c      	b.n	80036c8 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035ce:	4b40      	ldr	r3, [pc, #256]	; (80036d0 <HAL_RCC_OscConfig+0x4a8>)
 80035d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035d2:	f003 0302 	and.w	r3, r3, #2
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d1ee      	bne.n	80035b8 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80035da:	7dfb      	ldrb	r3, [r7, #23]
 80035dc:	2b01      	cmp	r3, #1
 80035de:	d105      	bne.n	80035ec <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035e0:	4b3b      	ldr	r3, [pc, #236]	; (80036d0 <HAL_RCC_OscConfig+0x4a8>)
 80035e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e4:	4a3a      	ldr	r2, [pc, #232]	; (80036d0 <HAL_RCC_OscConfig+0x4a8>)
 80035e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035ea:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	699b      	ldr	r3, [r3, #24]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d068      	beq.n	80036c6 <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80035f4:	4b36      	ldr	r3, [pc, #216]	; (80036d0 <HAL_RCC_OscConfig+0x4a8>)
 80035f6:	689b      	ldr	r3, [r3, #8]
 80035f8:	f003 030c 	and.w	r3, r3, #12
 80035fc:	2b08      	cmp	r3, #8
 80035fe:	d060      	beq.n	80036c2 <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	699b      	ldr	r3, [r3, #24]
 8003604:	2b02      	cmp	r3, #2
 8003606:	d145      	bne.n	8003694 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003608:	4b33      	ldr	r3, [pc, #204]	; (80036d8 <HAL_RCC_OscConfig+0x4b0>)
 800360a:	2200      	movs	r2, #0
 800360c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800360e:	f7ff f877 	bl	8002700 <HAL_GetTick>
 8003612:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003614:	e008      	b.n	8003628 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003616:	f7ff f873 	bl	8002700 <HAL_GetTick>
 800361a:	4602      	mov	r2, r0
 800361c:	693b      	ldr	r3, [r7, #16]
 800361e:	1ad3      	subs	r3, r2, r3
 8003620:	2b02      	cmp	r3, #2
 8003622:	d901      	bls.n	8003628 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8003624:	2303      	movs	r3, #3
 8003626:	e04f      	b.n	80036c8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003628:	4b29      	ldr	r3, [pc, #164]	; (80036d0 <HAL_RCC_OscConfig+0x4a8>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003630:	2b00      	cmp	r3, #0
 8003632:	d1f0      	bne.n	8003616 <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	69da      	ldr	r2, [r3, #28]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6a1b      	ldr	r3, [r3, #32]
 800363c:	431a      	orrs	r2, r3
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003642:	019b      	lsls	r3, r3, #6
 8003644:	431a      	orrs	r2, r3
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800364a:	085b      	lsrs	r3, r3, #1
 800364c:	3b01      	subs	r3, #1
 800364e:	041b      	lsls	r3, r3, #16
 8003650:	431a      	orrs	r2, r3
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003656:	061b      	lsls	r3, r3, #24
 8003658:	431a      	orrs	r2, r3
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800365e:	071b      	lsls	r3, r3, #28
 8003660:	491b      	ldr	r1, [pc, #108]	; (80036d0 <HAL_RCC_OscConfig+0x4a8>)
 8003662:	4313      	orrs	r3, r2
 8003664:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003666:	4b1c      	ldr	r3, [pc, #112]	; (80036d8 <HAL_RCC_OscConfig+0x4b0>)
 8003668:	2201      	movs	r2, #1
 800366a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800366c:	f7ff f848 	bl	8002700 <HAL_GetTick>
 8003670:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003672:	e008      	b.n	8003686 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003674:	f7ff f844 	bl	8002700 <HAL_GetTick>
 8003678:	4602      	mov	r2, r0
 800367a:	693b      	ldr	r3, [r7, #16]
 800367c:	1ad3      	subs	r3, r2, r3
 800367e:	2b02      	cmp	r3, #2
 8003680:	d901      	bls.n	8003686 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8003682:	2303      	movs	r3, #3
 8003684:	e020      	b.n	80036c8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003686:	4b12      	ldr	r3, [pc, #72]	; (80036d0 <HAL_RCC_OscConfig+0x4a8>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800368e:	2b00      	cmp	r3, #0
 8003690:	d0f0      	beq.n	8003674 <HAL_RCC_OscConfig+0x44c>
 8003692:	e018      	b.n	80036c6 <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003694:	4b10      	ldr	r3, [pc, #64]	; (80036d8 <HAL_RCC_OscConfig+0x4b0>)
 8003696:	2200      	movs	r2, #0
 8003698:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800369a:	f7ff f831 	bl	8002700 <HAL_GetTick>
 800369e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036a0:	e008      	b.n	80036b4 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036a2:	f7ff f82d 	bl	8002700 <HAL_GetTick>
 80036a6:	4602      	mov	r2, r0
 80036a8:	693b      	ldr	r3, [r7, #16]
 80036aa:	1ad3      	subs	r3, r2, r3
 80036ac:	2b02      	cmp	r3, #2
 80036ae:	d901      	bls.n	80036b4 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 80036b0:	2303      	movs	r3, #3
 80036b2:	e009      	b.n	80036c8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036b4:	4b06      	ldr	r3, [pc, #24]	; (80036d0 <HAL_RCC_OscConfig+0x4a8>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d1f0      	bne.n	80036a2 <HAL_RCC_OscConfig+0x47a>
 80036c0:	e001      	b.n	80036c6 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80036c2:	2301      	movs	r3, #1
 80036c4:	e000      	b.n	80036c8 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 80036c6:	2300      	movs	r3, #0
}
 80036c8:	4618      	mov	r0, r3
 80036ca:	3718      	adds	r7, #24
 80036cc:	46bd      	mov	sp, r7
 80036ce:	bd80      	pop	{r7, pc}
 80036d0:	40023800 	.word	0x40023800
 80036d4:	40007000 	.word	0x40007000
 80036d8:	42470060 	.word	0x42470060

080036dc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b082      	sub	sp, #8
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d101      	bne.n	80036ee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	e056      	b.n	800379c <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2200      	movs	r2, #0
 80036f2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80036fa:	b2db      	uxtb	r3, r3
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d106      	bne.n	800370e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2200      	movs	r2, #0
 8003704:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003708:	6878      	ldr	r0, [r7, #4]
 800370a:	f7fe fecb 	bl	80024a4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2202      	movs	r2, #2
 8003712:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	681a      	ldr	r2, [r3, #0]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003724:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	685a      	ldr	r2, [r3, #4]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	689b      	ldr	r3, [r3, #8]
 800372e:	431a      	orrs	r2, r3
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	68db      	ldr	r3, [r3, #12]
 8003734:	431a      	orrs	r2, r3
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	691b      	ldr	r3, [r3, #16]
 800373a:	431a      	orrs	r2, r3
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	695b      	ldr	r3, [r3, #20]
 8003740:	431a      	orrs	r2, r3
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	699b      	ldr	r3, [r3, #24]
 8003746:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800374a:	431a      	orrs	r2, r3
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	69db      	ldr	r3, [r3, #28]
 8003750:	431a      	orrs	r2, r3
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6a1b      	ldr	r3, [r3, #32]
 8003756:	ea42 0103 	orr.w	r1, r2, r3
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	430a      	orrs	r2, r1
 8003764:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	699b      	ldr	r3, [r3, #24]
 800376a:	0c1b      	lsrs	r3, r3, #16
 800376c:	f003 0104 	and.w	r1, r3, #4
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	430a      	orrs	r2, r1
 800377a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	69da      	ldr	r2, [r3, #28]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800378a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2200      	movs	r2, #0
 8003790:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2201      	movs	r2, #1
 8003796:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800379a:	2300      	movs	r3, #0
}
 800379c:	4618      	mov	r0, r3
 800379e:	3708      	adds	r7, #8
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bd80      	pop	{r7, pc}

080037a4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b088      	sub	sp, #32
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	60f8      	str	r0, [r7, #12]
 80037ac:	60b9      	str	r1, [r7, #8]
 80037ae:	603b      	str	r3, [r7, #0]
 80037b0:	4613      	mov	r3, r2
 80037b2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80037b4:	2300      	movs	r3, #0
 80037b6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80037be:	2b01      	cmp	r3, #1
 80037c0:	d101      	bne.n	80037c6 <HAL_SPI_Transmit+0x22>
 80037c2:	2302      	movs	r3, #2
 80037c4:	e11e      	b.n	8003a04 <HAL_SPI_Transmit+0x260>
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	2201      	movs	r2, #1
 80037ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80037ce:	f7fe ff97 	bl	8002700 <HAL_GetTick>
 80037d2:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80037d4:	88fb      	ldrh	r3, [r7, #6]
 80037d6:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80037de:	b2db      	uxtb	r3, r3
 80037e0:	2b01      	cmp	r3, #1
 80037e2:	d002      	beq.n	80037ea <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80037e4:	2302      	movs	r3, #2
 80037e6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80037e8:	e103      	b.n	80039f2 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 80037ea:	68bb      	ldr	r3, [r7, #8]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d002      	beq.n	80037f6 <HAL_SPI_Transmit+0x52>
 80037f0:	88fb      	ldrh	r3, [r7, #6]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d102      	bne.n	80037fc <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80037f6:	2301      	movs	r3, #1
 80037f8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80037fa:	e0fa      	b.n	80039f2 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	2203      	movs	r2, #3
 8003800:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	2200      	movs	r2, #0
 8003808:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	68ba      	ldr	r2, [r7, #8]
 800380e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	88fa      	ldrh	r2, [r7, #6]
 8003814:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	88fa      	ldrh	r2, [r7, #6]
 800381a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	2200      	movs	r2, #0
 8003820:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	2200      	movs	r2, #0
 8003826:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	2200      	movs	r2, #0
 800382c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	2200      	movs	r2, #0
 8003832:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	2200      	movs	r2, #0
 8003838:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	689b      	ldr	r3, [r3, #8]
 800383e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003842:	d107      	bne.n	8003854 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	681a      	ldr	r2, [r3, #0]
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003852:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800385e:	2b40      	cmp	r3, #64	; 0x40
 8003860:	d007      	beq.n	8003872 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	681a      	ldr	r2, [r3, #0]
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003870:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	68db      	ldr	r3, [r3, #12]
 8003876:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800387a:	d14b      	bne.n	8003914 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d002      	beq.n	800388a <HAL_SPI_Transmit+0xe6>
 8003884:	8afb      	ldrh	r3, [r7, #22]
 8003886:	2b01      	cmp	r3, #1
 8003888:	d13e      	bne.n	8003908 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800388e:	881a      	ldrh	r2, [r3, #0]
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800389a:	1c9a      	adds	r2, r3, #2
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80038a4:	b29b      	uxth	r3, r3
 80038a6:	3b01      	subs	r3, #1
 80038a8:	b29a      	uxth	r2, r3
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80038ae:	e02b      	b.n	8003908 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	689b      	ldr	r3, [r3, #8]
 80038b6:	f003 0302 	and.w	r3, r3, #2
 80038ba:	2b02      	cmp	r3, #2
 80038bc:	d112      	bne.n	80038e4 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038c2:	881a      	ldrh	r2, [r3, #0]
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ce:	1c9a      	adds	r2, r3, #2
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80038d8:	b29b      	uxth	r3, r3
 80038da:	3b01      	subs	r3, #1
 80038dc:	b29a      	uxth	r2, r3
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	86da      	strh	r2, [r3, #54]	; 0x36
 80038e2:	e011      	b.n	8003908 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80038e4:	f7fe ff0c 	bl	8002700 <HAL_GetTick>
 80038e8:	4602      	mov	r2, r0
 80038ea:	69bb      	ldr	r3, [r7, #24]
 80038ec:	1ad3      	subs	r3, r2, r3
 80038ee:	683a      	ldr	r2, [r7, #0]
 80038f0:	429a      	cmp	r2, r3
 80038f2:	d803      	bhi.n	80038fc <HAL_SPI_Transmit+0x158>
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80038fa:	d102      	bne.n	8003902 <HAL_SPI_Transmit+0x15e>
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d102      	bne.n	8003908 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8003902:	2303      	movs	r3, #3
 8003904:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003906:	e074      	b.n	80039f2 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800390c:	b29b      	uxth	r3, r3
 800390e:	2b00      	cmp	r3, #0
 8003910:	d1ce      	bne.n	80038b0 <HAL_SPI_Transmit+0x10c>
 8003912:	e04c      	b.n	80039ae <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d002      	beq.n	8003922 <HAL_SPI_Transmit+0x17e>
 800391c:	8afb      	ldrh	r3, [r7, #22]
 800391e:	2b01      	cmp	r3, #1
 8003920:	d140      	bne.n	80039a4 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	330c      	adds	r3, #12
 800392c:	7812      	ldrb	r2, [r2, #0]
 800392e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003934:	1c5a      	adds	r2, r3, #1
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800393e:	b29b      	uxth	r3, r3
 8003940:	3b01      	subs	r3, #1
 8003942:	b29a      	uxth	r2, r3
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003948:	e02c      	b.n	80039a4 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	689b      	ldr	r3, [r3, #8]
 8003950:	f003 0302 	and.w	r3, r3, #2
 8003954:	2b02      	cmp	r3, #2
 8003956:	d113      	bne.n	8003980 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	330c      	adds	r3, #12
 8003962:	7812      	ldrb	r2, [r2, #0]
 8003964:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800396a:	1c5a      	adds	r2, r3, #1
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003974:	b29b      	uxth	r3, r3
 8003976:	3b01      	subs	r3, #1
 8003978:	b29a      	uxth	r2, r3
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	86da      	strh	r2, [r3, #54]	; 0x36
 800397e:	e011      	b.n	80039a4 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003980:	f7fe febe 	bl	8002700 <HAL_GetTick>
 8003984:	4602      	mov	r2, r0
 8003986:	69bb      	ldr	r3, [r7, #24]
 8003988:	1ad3      	subs	r3, r2, r3
 800398a:	683a      	ldr	r2, [r7, #0]
 800398c:	429a      	cmp	r2, r3
 800398e:	d803      	bhi.n	8003998 <HAL_SPI_Transmit+0x1f4>
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003996:	d102      	bne.n	800399e <HAL_SPI_Transmit+0x1fa>
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d102      	bne.n	80039a4 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800399e:	2303      	movs	r3, #3
 80039a0:	77fb      	strb	r3, [r7, #31]
          goto error;
 80039a2:	e026      	b.n	80039f2 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039a8:	b29b      	uxth	r3, r3
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d1cd      	bne.n	800394a <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80039ae:	69ba      	ldr	r2, [r7, #24]
 80039b0:	6839      	ldr	r1, [r7, #0]
 80039b2:	68f8      	ldr	r0, [r7, #12]
 80039b4:	f000 fb54 	bl	8004060 <SPI_EndRxTxTransaction>
 80039b8:	4603      	mov	r3, r0
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d002      	beq.n	80039c4 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	2220      	movs	r2, #32
 80039c2:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	689b      	ldr	r3, [r3, #8]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d10a      	bne.n	80039e2 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80039cc:	2300      	movs	r3, #0
 80039ce:	613b      	str	r3, [r7, #16]
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	68db      	ldr	r3, [r3, #12]
 80039d6:	613b      	str	r3, [r7, #16]
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	689b      	ldr	r3, [r3, #8]
 80039de:	613b      	str	r3, [r7, #16]
 80039e0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d002      	beq.n	80039f0 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 80039ea:	2301      	movs	r3, #1
 80039ec:	77fb      	strb	r3, [r7, #31]
 80039ee:	e000      	b.n	80039f2 <HAL_SPI_Transmit+0x24e>
  }

error:
 80039f0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	2201      	movs	r2, #1
 80039f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	2200      	movs	r2, #0
 80039fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003a02:	7ffb      	ldrb	r3, [r7, #31]
}
 8003a04:	4618      	mov	r0, r3
 8003a06:	3720      	adds	r7, #32
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	bd80      	pop	{r7, pc}

08003a0c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b08c      	sub	sp, #48	; 0x30
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	60f8      	str	r0, [r7, #12]
 8003a14:	60b9      	str	r1, [r7, #8]
 8003a16:	607a      	str	r2, [r7, #4]
 8003a18:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003a2a:	2b01      	cmp	r3, #1
 8003a2c:	d101      	bne.n	8003a32 <HAL_SPI_TransmitReceive+0x26>
 8003a2e:	2302      	movs	r3, #2
 8003a30:	e18a      	b.n	8003d48 <HAL_SPI_TransmitReceive+0x33c>
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	2201      	movs	r2, #1
 8003a36:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003a3a:	f7fe fe61 	bl	8002700 <HAL_GetTick>
 8003a3e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003a46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003a50:	887b      	ldrh	r3, [r7, #2]
 8003a52:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003a54:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003a58:	2b01      	cmp	r3, #1
 8003a5a:	d00f      	beq.n	8003a7c <HAL_SPI_TransmitReceive+0x70>
 8003a5c:	69fb      	ldr	r3, [r7, #28]
 8003a5e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a62:	d107      	bne.n	8003a74 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	689b      	ldr	r3, [r3, #8]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d103      	bne.n	8003a74 <HAL_SPI_TransmitReceive+0x68>
 8003a6c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003a70:	2b04      	cmp	r3, #4
 8003a72:	d003      	beq.n	8003a7c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003a74:	2302      	movs	r3, #2
 8003a76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003a7a:	e15b      	b.n	8003d34 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d005      	beq.n	8003a8e <HAL_SPI_TransmitReceive+0x82>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d002      	beq.n	8003a8e <HAL_SPI_TransmitReceive+0x82>
 8003a88:	887b      	ldrh	r3, [r7, #2]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d103      	bne.n	8003a96 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003a94:	e14e      	b.n	8003d34 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003a9c:	b2db      	uxtb	r3, r3
 8003a9e:	2b04      	cmp	r3, #4
 8003aa0:	d003      	beq.n	8003aaa <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	2205      	movs	r2, #5
 8003aa6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	2200      	movs	r2, #0
 8003aae:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	687a      	ldr	r2, [r7, #4]
 8003ab4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	887a      	ldrh	r2, [r7, #2]
 8003aba:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	887a      	ldrh	r2, [r7, #2]
 8003ac0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	68ba      	ldr	r2, [r7, #8]
 8003ac6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	887a      	ldrh	r2, [r7, #2]
 8003acc:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	887a      	ldrh	r2, [r7, #2]
 8003ad2:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	2200      	movs	r2, #0
 8003ade:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003aea:	2b40      	cmp	r3, #64	; 0x40
 8003aec:	d007      	beq.n	8003afe <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	681a      	ldr	r2, [r3, #0]
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003afc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	68db      	ldr	r3, [r3, #12]
 8003b02:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b06:	d178      	bne.n	8003bfa <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d002      	beq.n	8003b16 <HAL_SPI_TransmitReceive+0x10a>
 8003b10:	8b7b      	ldrh	r3, [r7, #26]
 8003b12:	2b01      	cmp	r3, #1
 8003b14:	d166      	bne.n	8003be4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b1a:	881a      	ldrh	r2, [r3, #0]
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b26:	1c9a      	adds	r2, r3, #2
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b30:	b29b      	uxth	r3, r3
 8003b32:	3b01      	subs	r3, #1
 8003b34:	b29a      	uxth	r2, r3
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003b3a:	e053      	b.n	8003be4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	689b      	ldr	r3, [r3, #8]
 8003b42:	f003 0302 	and.w	r3, r3, #2
 8003b46:	2b02      	cmp	r3, #2
 8003b48:	d11b      	bne.n	8003b82 <HAL_SPI_TransmitReceive+0x176>
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b4e:	b29b      	uxth	r3, r3
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d016      	beq.n	8003b82 <HAL_SPI_TransmitReceive+0x176>
 8003b54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b56:	2b01      	cmp	r3, #1
 8003b58:	d113      	bne.n	8003b82 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b5e:	881a      	ldrh	r2, [r3, #0]
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b6a:	1c9a      	adds	r2, r3, #2
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b74:	b29b      	uxth	r3, r3
 8003b76:	3b01      	subs	r3, #1
 8003b78:	b29a      	uxth	r2, r3
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003b7e:	2300      	movs	r3, #0
 8003b80:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	689b      	ldr	r3, [r3, #8]
 8003b88:	f003 0301 	and.w	r3, r3, #1
 8003b8c:	2b01      	cmp	r3, #1
 8003b8e:	d119      	bne.n	8003bc4 <HAL_SPI_TransmitReceive+0x1b8>
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b94:	b29b      	uxth	r3, r3
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d014      	beq.n	8003bc4 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	68da      	ldr	r2, [r3, #12]
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ba4:	b292      	uxth	r2, r2
 8003ba6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bac:	1c9a      	adds	r2, r3, #2
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bb6:	b29b      	uxth	r3, r3
 8003bb8:	3b01      	subs	r3, #1
 8003bba:	b29a      	uxth	r2, r3
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003bc4:	f7fe fd9c 	bl	8002700 <HAL_GetTick>
 8003bc8:	4602      	mov	r2, r0
 8003bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bcc:	1ad3      	subs	r3, r2, r3
 8003bce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003bd0:	429a      	cmp	r2, r3
 8003bd2:	d807      	bhi.n	8003be4 <HAL_SPI_TransmitReceive+0x1d8>
 8003bd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bd6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003bda:	d003      	beq.n	8003be4 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003bdc:	2303      	movs	r3, #3
 8003bde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003be2:	e0a7      	b.n	8003d34 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003be8:	b29b      	uxth	r3, r3
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d1a6      	bne.n	8003b3c <HAL_SPI_TransmitReceive+0x130>
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bf2:	b29b      	uxth	r3, r3
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d1a1      	bne.n	8003b3c <HAL_SPI_TransmitReceive+0x130>
 8003bf8:	e07c      	b.n	8003cf4 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d002      	beq.n	8003c08 <HAL_SPI_TransmitReceive+0x1fc>
 8003c02:	8b7b      	ldrh	r3, [r7, #26]
 8003c04:	2b01      	cmp	r3, #1
 8003c06:	d16b      	bne.n	8003ce0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	330c      	adds	r3, #12
 8003c12:	7812      	ldrb	r2, [r2, #0]
 8003c14:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c1a:	1c5a      	adds	r2, r3, #1
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c24:	b29b      	uxth	r3, r3
 8003c26:	3b01      	subs	r3, #1
 8003c28:	b29a      	uxth	r2, r3
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003c2e:	e057      	b.n	8003ce0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	689b      	ldr	r3, [r3, #8]
 8003c36:	f003 0302 	and.w	r3, r3, #2
 8003c3a:	2b02      	cmp	r3, #2
 8003c3c:	d11c      	bne.n	8003c78 <HAL_SPI_TransmitReceive+0x26c>
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c42:	b29b      	uxth	r3, r3
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d017      	beq.n	8003c78 <HAL_SPI_TransmitReceive+0x26c>
 8003c48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c4a:	2b01      	cmp	r3, #1
 8003c4c:	d114      	bne.n	8003c78 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	330c      	adds	r3, #12
 8003c58:	7812      	ldrb	r2, [r2, #0]
 8003c5a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c60:	1c5a      	adds	r2, r3, #1
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c6a:	b29b      	uxth	r3, r3
 8003c6c:	3b01      	subs	r3, #1
 8003c6e:	b29a      	uxth	r2, r3
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003c74:	2300      	movs	r3, #0
 8003c76:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	689b      	ldr	r3, [r3, #8]
 8003c7e:	f003 0301 	and.w	r3, r3, #1
 8003c82:	2b01      	cmp	r3, #1
 8003c84:	d119      	bne.n	8003cba <HAL_SPI_TransmitReceive+0x2ae>
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c8a:	b29b      	uxth	r3, r3
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d014      	beq.n	8003cba <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	68da      	ldr	r2, [r3, #12]
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c9a:	b2d2      	uxtb	r2, r2
 8003c9c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ca2:	1c5a      	adds	r2, r3, #1
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cac:	b29b      	uxth	r3, r3
 8003cae:	3b01      	subs	r3, #1
 8003cb0:	b29a      	uxth	r2, r3
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003cba:	f7fe fd21 	bl	8002700 <HAL_GetTick>
 8003cbe:	4602      	mov	r2, r0
 8003cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc2:	1ad3      	subs	r3, r2, r3
 8003cc4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003cc6:	429a      	cmp	r2, r3
 8003cc8:	d803      	bhi.n	8003cd2 <HAL_SPI_TransmitReceive+0x2c6>
 8003cca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ccc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003cd0:	d102      	bne.n	8003cd8 <HAL_SPI_TransmitReceive+0x2cc>
 8003cd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d103      	bne.n	8003ce0 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003cd8:	2303      	movs	r3, #3
 8003cda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003cde:	e029      	b.n	8003d34 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ce4:	b29b      	uxth	r3, r3
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d1a2      	bne.n	8003c30 <HAL_SPI_TransmitReceive+0x224>
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cee:	b29b      	uxth	r3, r3
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d19d      	bne.n	8003c30 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003cf4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cf6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003cf8:	68f8      	ldr	r0, [r7, #12]
 8003cfa:	f000 f9b1 	bl	8004060 <SPI_EndRxTxTransaction>
 8003cfe:	4603      	mov	r3, r0
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d006      	beq.n	8003d12 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003d04:	2301      	movs	r3, #1
 8003d06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	2220      	movs	r2, #32
 8003d0e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003d10:	e010      	b.n	8003d34 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	689b      	ldr	r3, [r3, #8]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d10b      	bne.n	8003d32 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	617b      	str	r3, [r7, #20]
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	68db      	ldr	r3, [r3, #12]
 8003d24:	617b      	str	r3, [r7, #20]
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	689b      	ldr	r3, [r3, #8]
 8003d2c:	617b      	str	r3, [r7, #20]
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	e000      	b.n	8003d34 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003d32:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	2201      	movs	r2, #1
 8003d38:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003d44:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003d48:	4618      	mov	r0, r3
 8003d4a:	3730      	adds	r7, #48	; 0x30
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	bd80      	pop	{r7, pc}

08003d50 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b088      	sub	sp, #32
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	689b      	ldr	r3, [r3, #8]
 8003d66:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003d68:	69bb      	ldr	r3, [r7, #24]
 8003d6a:	099b      	lsrs	r3, r3, #6
 8003d6c:	f003 0301 	and.w	r3, r3, #1
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d10f      	bne.n	8003d94 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003d74:	69bb      	ldr	r3, [r7, #24]
 8003d76:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d00a      	beq.n	8003d94 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003d7e:	69fb      	ldr	r3, [r7, #28]
 8003d80:	099b      	lsrs	r3, r3, #6
 8003d82:	f003 0301 	and.w	r3, r3, #1
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d004      	beq.n	8003d94 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d8e:	6878      	ldr	r0, [r7, #4]
 8003d90:	4798      	blx	r3
    return;
 8003d92:	e0d8      	b.n	8003f46 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003d94:	69bb      	ldr	r3, [r7, #24]
 8003d96:	085b      	lsrs	r3, r3, #1
 8003d98:	f003 0301 	and.w	r3, r3, #1
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d00a      	beq.n	8003db6 <HAL_SPI_IRQHandler+0x66>
 8003da0:	69fb      	ldr	r3, [r7, #28]
 8003da2:	09db      	lsrs	r3, r3, #7
 8003da4:	f003 0301 	and.w	r3, r3, #1
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d004      	beq.n	8003db6 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003db0:	6878      	ldr	r0, [r7, #4]
 8003db2:	4798      	blx	r3
    return;
 8003db4:	e0c7      	b.n	8003f46 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003db6:	69bb      	ldr	r3, [r7, #24]
 8003db8:	095b      	lsrs	r3, r3, #5
 8003dba:	f003 0301 	and.w	r3, r3, #1
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d10c      	bne.n	8003ddc <HAL_SPI_IRQHandler+0x8c>
 8003dc2:	69bb      	ldr	r3, [r7, #24]
 8003dc4:	099b      	lsrs	r3, r3, #6
 8003dc6:	f003 0301 	and.w	r3, r3, #1
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d106      	bne.n	8003ddc <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8003dce:	69bb      	ldr	r3, [r7, #24]
 8003dd0:	0a1b      	lsrs	r3, r3, #8
 8003dd2:	f003 0301 	and.w	r3, r3, #1
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	f000 80b5 	beq.w	8003f46 <HAL_SPI_IRQHandler+0x1f6>
 8003ddc:	69fb      	ldr	r3, [r7, #28]
 8003dde:	095b      	lsrs	r3, r3, #5
 8003de0:	f003 0301 	and.w	r3, r3, #1
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	f000 80ae 	beq.w	8003f46 <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003dea:	69bb      	ldr	r3, [r7, #24]
 8003dec:	099b      	lsrs	r3, r3, #6
 8003dee:	f003 0301 	and.w	r3, r3, #1
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d023      	beq.n	8003e3e <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003dfc:	b2db      	uxtb	r3, r3
 8003dfe:	2b03      	cmp	r3, #3
 8003e00:	d011      	beq.n	8003e26 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e06:	f043 0204 	orr.w	r2, r3, #4
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003e0e:	2300      	movs	r3, #0
 8003e10:	617b      	str	r3, [r7, #20]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	68db      	ldr	r3, [r3, #12]
 8003e18:	617b      	str	r3, [r7, #20]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	689b      	ldr	r3, [r3, #8]
 8003e20:	617b      	str	r3, [r7, #20]
 8003e22:	697b      	ldr	r3, [r7, #20]
 8003e24:	e00b      	b.n	8003e3e <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003e26:	2300      	movs	r3, #0
 8003e28:	613b      	str	r3, [r7, #16]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	68db      	ldr	r3, [r3, #12]
 8003e30:	613b      	str	r3, [r7, #16]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	689b      	ldr	r3, [r3, #8]
 8003e38:	613b      	str	r3, [r7, #16]
 8003e3a:	693b      	ldr	r3, [r7, #16]
        return;
 8003e3c:	e083      	b.n	8003f46 <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8003e3e:	69bb      	ldr	r3, [r7, #24]
 8003e40:	095b      	lsrs	r3, r3, #5
 8003e42:	f003 0301 	and.w	r3, r3, #1
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d014      	beq.n	8003e74 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e4e:	f043 0201 	orr.w	r2, r3, #1
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8003e56:	2300      	movs	r3, #0
 8003e58:	60fb      	str	r3, [r7, #12]
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	689b      	ldr	r3, [r3, #8]
 8003e60:	60fb      	str	r3, [r7, #12]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	681a      	ldr	r2, [r3, #0]
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e70:	601a      	str	r2, [r3, #0]
 8003e72:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8003e74:	69bb      	ldr	r3, [r7, #24]
 8003e76:	0a1b      	lsrs	r3, r3, #8
 8003e78:	f003 0301 	and.w	r3, r3, #1
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d00c      	beq.n	8003e9a <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e84:	f043 0208 	orr.w	r2, r3, #8
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	60bb      	str	r3, [r7, #8]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	689b      	ldr	r3, [r3, #8]
 8003e96:	60bb      	str	r3, [r7, #8]
 8003e98:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d050      	beq.n	8003f44 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	685a      	ldr	r2, [r3, #4]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003eb0:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2201      	movs	r2, #1
 8003eb6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8003eba:	69fb      	ldr	r3, [r7, #28]
 8003ebc:	f003 0302 	and.w	r3, r3, #2
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d104      	bne.n	8003ece <HAL_SPI_IRQHandler+0x17e>
 8003ec4:	69fb      	ldr	r3, [r7, #28]
 8003ec6:	f003 0301 	and.w	r3, r3, #1
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d034      	beq.n	8003f38 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	685a      	ldr	r2, [r3, #4]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f022 0203 	bic.w	r2, r2, #3
 8003edc:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d011      	beq.n	8003f0a <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003eea:	4a18      	ldr	r2, [pc, #96]	; (8003f4c <HAL_SPI_IRQHandler+0x1fc>)
 8003eec:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	f7fe fd43 	bl	800297e <HAL_DMA_Abort_IT>
 8003ef8:	4603      	mov	r3, r0
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d005      	beq.n	8003f0a <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f02:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d016      	beq.n	8003f40 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f16:	4a0d      	ldr	r2, [pc, #52]	; (8003f4c <HAL_SPI_IRQHandler+0x1fc>)
 8003f18:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f1e:	4618      	mov	r0, r3
 8003f20:	f7fe fd2d 	bl	800297e <HAL_DMA_Abort_IT>
 8003f24:	4603      	mov	r3, r0
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d00a      	beq.n	8003f40 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f2e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8003f36:	e003      	b.n	8003f40 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8003f38:	6878      	ldr	r0, [r7, #4]
 8003f3a:	f000 f809 	bl	8003f50 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8003f3e:	e000      	b.n	8003f42 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8003f40:	bf00      	nop
    return;
 8003f42:	bf00      	nop
 8003f44:	bf00      	nop
  }
}
 8003f46:	3720      	adds	r7, #32
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	bd80      	pop	{r7, pc}
 8003f4c:	08003f65 	.word	0x08003f65

08003f50 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003f50:	b480      	push	{r7}
 8003f52:	b083      	sub	sp, #12
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003f58:	bf00      	nop
 8003f5a:	370c      	adds	r7, #12
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f62:	4770      	bx	lr

08003f64 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b084      	sub	sp, #16
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f70:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	2200      	movs	r2, #0
 8003f76:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003f7e:	68f8      	ldr	r0, [r7, #12]
 8003f80:	f7ff ffe6 	bl	8003f50 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003f84:	bf00      	nop
 8003f86:	3710      	adds	r7, #16
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	bd80      	pop	{r7, pc}

08003f8c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b084      	sub	sp, #16
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	60f8      	str	r0, [r7, #12]
 8003f94:	60b9      	str	r1, [r7, #8]
 8003f96:	603b      	str	r3, [r7, #0]
 8003f98:	4613      	mov	r3, r2
 8003f9a:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003f9c:	e04c      	b.n	8004038 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003fa4:	d048      	beq.n	8004038 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8003fa6:	f7fe fbab 	bl	8002700 <HAL_GetTick>
 8003faa:	4602      	mov	r2, r0
 8003fac:	69bb      	ldr	r3, [r7, #24]
 8003fae:	1ad3      	subs	r3, r2, r3
 8003fb0:	683a      	ldr	r2, [r7, #0]
 8003fb2:	429a      	cmp	r2, r3
 8003fb4:	d902      	bls.n	8003fbc <SPI_WaitFlagStateUntilTimeout+0x30>
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d13d      	bne.n	8004038 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	685a      	ldr	r2, [r3, #4]
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003fca:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003fd4:	d111      	bne.n	8003ffa <SPI_WaitFlagStateUntilTimeout+0x6e>
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	689b      	ldr	r3, [r3, #8]
 8003fda:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003fde:	d004      	beq.n	8003fea <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	689b      	ldr	r3, [r3, #8]
 8003fe4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fe8:	d107      	bne.n	8003ffa <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	681a      	ldr	r2, [r3, #0]
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ff8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ffe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004002:	d10f      	bne.n	8004024 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	681a      	ldr	r2, [r3, #0]
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004012:	601a      	str	r2, [r3, #0]
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	681a      	ldr	r2, [r3, #0]
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004022:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	2201      	movs	r2, #1
 8004028:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	2200      	movs	r2, #0
 8004030:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004034:	2303      	movs	r3, #3
 8004036:	e00f      	b.n	8004058 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	689a      	ldr	r2, [r3, #8]
 800403e:	68bb      	ldr	r3, [r7, #8]
 8004040:	4013      	ands	r3, r2
 8004042:	68ba      	ldr	r2, [r7, #8]
 8004044:	429a      	cmp	r2, r3
 8004046:	bf0c      	ite	eq
 8004048:	2301      	moveq	r3, #1
 800404a:	2300      	movne	r3, #0
 800404c:	b2db      	uxtb	r3, r3
 800404e:	461a      	mov	r2, r3
 8004050:	79fb      	ldrb	r3, [r7, #7]
 8004052:	429a      	cmp	r2, r3
 8004054:	d1a3      	bne.n	8003f9e <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8004056:	2300      	movs	r3, #0
}
 8004058:	4618      	mov	r0, r3
 800405a:	3710      	adds	r7, #16
 800405c:	46bd      	mov	sp, r7
 800405e:	bd80      	pop	{r7, pc}

08004060 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b088      	sub	sp, #32
 8004064:	af02      	add	r7, sp, #8
 8004066:	60f8      	str	r0, [r7, #12]
 8004068:	60b9      	str	r1, [r7, #8]
 800406a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800406c:	4b1b      	ldr	r3, [pc, #108]	; (80040dc <SPI_EndRxTxTransaction+0x7c>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a1b      	ldr	r2, [pc, #108]	; (80040e0 <SPI_EndRxTxTransaction+0x80>)
 8004072:	fba2 2303 	umull	r2, r3, r2, r3
 8004076:	0d5b      	lsrs	r3, r3, #21
 8004078:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800407c:	fb02 f303 	mul.w	r3, r2, r3
 8004080:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	685b      	ldr	r3, [r3, #4]
 8004086:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800408a:	d112      	bne.n	80040b2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	9300      	str	r3, [sp, #0]
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	2200      	movs	r2, #0
 8004094:	2180      	movs	r1, #128	; 0x80
 8004096:	68f8      	ldr	r0, [r7, #12]
 8004098:	f7ff ff78 	bl	8003f8c <SPI_WaitFlagStateUntilTimeout>
 800409c:	4603      	mov	r3, r0
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d016      	beq.n	80040d0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040a6:	f043 0220 	orr.w	r2, r3, #32
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80040ae:	2303      	movs	r3, #3
 80040b0:	e00f      	b.n	80040d2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80040b2:	697b      	ldr	r3, [r7, #20]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d00a      	beq.n	80040ce <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80040b8:	697b      	ldr	r3, [r7, #20]
 80040ba:	3b01      	subs	r3, #1
 80040bc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	689b      	ldr	r3, [r3, #8]
 80040c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040c8:	2b80      	cmp	r3, #128	; 0x80
 80040ca:	d0f2      	beq.n	80040b2 <SPI_EndRxTxTransaction+0x52>
 80040cc:	e000      	b.n	80040d0 <SPI_EndRxTxTransaction+0x70>
        break;
 80040ce:	bf00      	nop
  }

  return HAL_OK;
 80040d0:	2300      	movs	r3, #0
}
 80040d2:	4618      	mov	r0, r3
 80040d4:	3718      	adds	r7, #24
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bd80      	pop	{r7, pc}
 80040da:	bf00      	nop
 80040dc:	20000000 	.word	0x20000000
 80040e0:	165e9f81 	.word	0x165e9f81

080040e4 <__libc_init_array>:
 80040e4:	b570      	push	{r4, r5, r6, lr}
 80040e6:	4e0d      	ldr	r6, [pc, #52]	; (800411c <__libc_init_array+0x38>)
 80040e8:	4c0d      	ldr	r4, [pc, #52]	; (8004120 <__libc_init_array+0x3c>)
 80040ea:	1ba4      	subs	r4, r4, r6
 80040ec:	10a4      	asrs	r4, r4, #2
 80040ee:	2500      	movs	r5, #0
 80040f0:	42a5      	cmp	r5, r4
 80040f2:	d109      	bne.n	8004108 <__libc_init_array+0x24>
 80040f4:	4e0b      	ldr	r6, [pc, #44]	; (8004124 <__libc_init_array+0x40>)
 80040f6:	4c0c      	ldr	r4, [pc, #48]	; (8004128 <__libc_init_array+0x44>)
 80040f8:	f000 f820 	bl	800413c <_init>
 80040fc:	1ba4      	subs	r4, r4, r6
 80040fe:	10a4      	asrs	r4, r4, #2
 8004100:	2500      	movs	r5, #0
 8004102:	42a5      	cmp	r5, r4
 8004104:	d105      	bne.n	8004112 <__libc_init_array+0x2e>
 8004106:	bd70      	pop	{r4, r5, r6, pc}
 8004108:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800410c:	4798      	blx	r3
 800410e:	3501      	adds	r5, #1
 8004110:	e7ee      	b.n	80040f0 <__libc_init_array+0xc>
 8004112:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004116:	4798      	blx	r3
 8004118:	3501      	adds	r5, #1
 800411a:	e7f2      	b.n	8004102 <__libc_init_array+0x1e>
 800411c:	0800416c 	.word	0x0800416c
 8004120:	0800416c 	.word	0x0800416c
 8004124:	0800416c 	.word	0x0800416c
 8004128:	08004170 	.word	0x08004170

0800412c <memset>:
 800412c:	4402      	add	r2, r0
 800412e:	4603      	mov	r3, r0
 8004130:	4293      	cmp	r3, r2
 8004132:	d100      	bne.n	8004136 <memset+0xa>
 8004134:	4770      	bx	lr
 8004136:	f803 1b01 	strb.w	r1, [r3], #1
 800413a:	e7f9      	b.n	8004130 <memset+0x4>

0800413c <_init>:
 800413c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800413e:	bf00      	nop
 8004140:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004142:	bc08      	pop	{r3}
 8004144:	469e      	mov	lr, r3
 8004146:	4770      	bx	lr

08004148 <_fini>:
 8004148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800414a:	bf00      	nop
 800414c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800414e:	bc08      	pop	{r3}
 8004150:	469e      	mov	lr, r3
 8004152:	4770      	bx	lr
