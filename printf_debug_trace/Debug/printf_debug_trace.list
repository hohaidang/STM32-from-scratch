
printf_debug_trace.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002774  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  08002944  08002944  00012944  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002a04  08002a04  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08002a04  08002a04  00012a04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002a0c  08002a0c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002a0c  08002a0c  00012a0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002a10  08002a10  00012a10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002a14  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000034  20000070  08002a84  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000a4  08002a84  000200a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006f17  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000164b  00000000  00000000  00026fb7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000005a0  00000000  00000000  00028608  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000004d8  00000000  00000000  00028ba8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000218a9  00000000  00000000  00029080  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00005f56  00000000  00000000  0004a929  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c6079  00000000  00000000  0005087f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001168f8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001b64  00000000  00000000  00116974  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800292c 	.word	0x0800292c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	0800292c 	.word	0x0800292c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b972 	b.w	80005ac <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	4688      	mov	r8, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14b      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4615      	mov	r5, r2
 80002f2:	d967      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0720 	rsb	r7, r2, #32
 80002fe:	fa01 f302 	lsl.w	r3, r1, r2
 8000302:	fa20 f707 	lsr.w	r7, r0, r7
 8000306:	4095      	lsls	r5, r2
 8000308:	ea47 0803 	orr.w	r8, r7, r3
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbb8 f7fe 	udiv	r7, r8, lr
 8000318:	fa1f fc85 	uxth.w	ip, r5
 800031c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000320:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000324:	fb07 f10c 	mul.w	r1, r7, ip
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18eb      	adds	r3, r5, r3
 800032e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000332:	f080 811b 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8118 	bls.w	800056c <__udivmoddi4+0x28c>
 800033c:	3f02      	subs	r7, #2
 800033e:	442b      	add	r3, r5
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0fe 	udiv	r0, r3, lr
 8000348:	fb0e 3310 	mls	r3, lr, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fc0c 	mul.w	ip, r0, ip
 8000354:	45a4      	cmp	ip, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	192c      	adds	r4, r5, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	f080 8107 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000362:	45a4      	cmp	ip, r4
 8000364:	f240 8104 	bls.w	8000570 <__udivmoddi4+0x290>
 8000368:	3802      	subs	r0, #2
 800036a:	442c      	add	r4, r5
 800036c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000370:	eba4 040c 	sub.w	r4, r4, ip
 8000374:	2700      	movs	r7, #0
 8000376:	b11e      	cbz	r6, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c6 4300 	strd	r4, r3, [r6]
 8000380:	4639      	mov	r1, r7
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0xbe>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80eb 	beq.w	8000566 <__udivmoddi4+0x286>
 8000390:	2700      	movs	r7, #0
 8000392:	e9c6 0100 	strd	r0, r1, [r6]
 8000396:	4638      	mov	r0, r7
 8000398:	4639      	mov	r1, r7
 800039a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039e:	fab3 f783 	clz	r7, r3
 80003a2:	2f00      	cmp	r7, #0
 80003a4:	d147      	bne.n	8000436 <__udivmoddi4+0x156>
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d302      	bcc.n	80003b0 <__udivmoddi4+0xd0>
 80003aa:	4282      	cmp	r2, r0
 80003ac:	f200 80fa 	bhi.w	80005a4 <__udivmoddi4+0x2c4>
 80003b0:	1a84      	subs	r4, r0, r2
 80003b2:	eb61 0303 	sbc.w	r3, r1, r3
 80003b6:	2001      	movs	r0, #1
 80003b8:	4698      	mov	r8, r3
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	d0e0      	beq.n	8000380 <__udivmoddi4+0xa0>
 80003be:	e9c6 4800 	strd	r4, r8, [r6]
 80003c2:	e7dd      	b.n	8000380 <__udivmoddi4+0xa0>
 80003c4:	b902      	cbnz	r2, 80003c8 <__udivmoddi4+0xe8>
 80003c6:	deff      	udf	#255	; 0xff
 80003c8:	fab2 f282 	clz	r2, r2
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f040 808f 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d2:	1b49      	subs	r1, r1, r5
 80003d4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003d8:	fa1f f885 	uxth.w	r8, r5
 80003dc:	2701      	movs	r7, #1
 80003de:	fbb1 fcfe 	udiv	ip, r1, lr
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ec:	fb08 f10c 	mul.w	r1, r8, ip
 80003f0:	4299      	cmp	r1, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f4:	18eb      	adds	r3, r5, r3
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4299      	cmp	r1, r3
 80003fe:	f200 80cd 	bhi.w	800059c <__udivmoddi4+0x2bc>
 8000402:	4684      	mov	ip, r0
 8000404:	1a59      	subs	r1, r3, r1
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000410:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x14c>
 800041c:	192c      	adds	r4, r5, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x14a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80b6 	bhi.w	8000596 <__udivmoddi4+0x2b6>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e79f      	b.n	8000376 <__udivmoddi4+0x96>
 8000436:	f1c7 0c20 	rsb	ip, r7, #32
 800043a:	40bb      	lsls	r3, r7
 800043c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000440:	ea4e 0e03 	orr.w	lr, lr, r3
 8000444:	fa01 f407 	lsl.w	r4, r1, r7
 8000448:	fa20 f50c 	lsr.w	r5, r0, ip
 800044c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000450:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000454:	4325      	orrs	r5, r4
 8000456:	fbb3 f9f8 	udiv	r9, r3, r8
 800045a:	0c2c      	lsrs	r4, r5, #16
 800045c:	fb08 3319 	mls	r3, r8, r9, r3
 8000460:	fa1f fa8e 	uxth.w	sl, lr
 8000464:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000468:	fb09 f40a 	mul.w	r4, r9, sl
 800046c:	429c      	cmp	r4, r3
 800046e:	fa02 f207 	lsl.w	r2, r2, r7
 8000472:	fa00 f107 	lsl.w	r1, r0, r7
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1e 0303 	adds.w	r3, lr, r3
 800047c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000480:	f080 8087 	bcs.w	8000592 <__udivmoddi4+0x2b2>
 8000484:	429c      	cmp	r4, r3
 8000486:	f240 8084 	bls.w	8000592 <__udivmoddi4+0x2b2>
 800048a:	f1a9 0902 	sub.w	r9, r9, #2
 800048e:	4473      	add	r3, lr
 8000490:	1b1b      	subs	r3, r3, r4
 8000492:	b2ad      	uxth	r5, r5
 8000494:	fbb3 f0f8 	udiv	r0, r3, r8
 8000498:	fb08 3310 	mls	r3, r8, r0, r3
 800049c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004a0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004a4:	45a2      	cmp	sl, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80004b0:	d26b      	bcs.n	800058a <__udivmoddi4+0x2aa>
 80004b2:	45a2      	cmp	sl, r4
 80004b4:	d969      	bls.n	800058a <__udivmoddi4+0x2aa>
 80004b6:	3802      	subs	r0, #2
 80004b8:	4474      	add	r4, lr
 80004ba:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004be:	fba0 8902 	umull	r8, r9, r0, r2
 80004c2:	eba4 040a 	sub.w	r4, r4, sl
 80004c6:	454c      	cmp	r4, r9
 80004c8:	46c2      	mov	sl, r8
 80004ca:	464b      	mov	r3, r9
 80004cc:	d354      	bcc.n	8000578 <__udivmoddi4+0x298>
 80004ce:	d051      	beq.n	8000574 <__udivmoddi4+0x294>
 80004d0:	2e00      	cmp	r6, #0
 80004d2:	d069      	beq.n	80005a8 <__udivmoddi4+0x2c8>
 80004d4:	ebb1 050a 	subs.w	r5, r1, sl
 80004d8:	eb64 0403 	sbc.w	r4, r4, r3
 80004dc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004e0:	40fd      	lsrs	r5, r7
 80004e2:	40fc      	lsrs	r4, r7
 80004e4:	ea4c 0505 	orr.w	r5, ip, r5
 80004e8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ec:	2700      	movs	r7, #0
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0xa0>
 80004f0:	f1c2 0320 	rsb	r3, r2, #32
 80004f4:	fa20 f703 	lsr.w	r7, r0, r3
 80004f8:	4095      	lsls	r5, r2
 80004fa:	fa01 f002 	lsl.w	r0, r1, r2
 80004fe:	fa21 f303 	lsr.w	r3, r1, r3
 8000502:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000506:	4338      	orrs	r0, r7
 8000508:	0c01      	lsrs	r1, r0, #16
 800050a:	fbb3 f7fe 	udiv	r7, r3, lr
 800050e:	fa1f f885 	uxth.w	r8, r5
 8000512:	fb0e 3317 	mls	r3, lr, r7, r3
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb07 f308 	mul.w	r3, r7, r8
 800051e:	428b      	cmp	r3, r1
 8000520:	fa04 f402 	lsl.w	r4, r4, r2
 8000524:	d907      	bls.n	8000536 <__udivmoddi4+0x256>
 8000526:	1869      	adds	r1, r5, r1
 8000528:	f107 3cff 	add.w	ip, r7, #4294967295
 800052c:	d22f      	bcs.n	800058e <__udivmoddi4+0x2ae>
 800052e:	428b      	cmp	r3, r1
 8000530:	d92d      	bls.n	800058e <__udivmoddi4+0x2ae>
 8000532:	3f02      	subs	r7, #2
 8000534:	4429      	add	r1, r5
 8000536:	1acb      	subs	r3, r1, r3
 8000538:	b281      	uxth	r1, r0
 800053a:	fbb3 f0fe 	udiv	r0, r3, lr
 800053e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000542:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000546:	fb00 f308 	mul.w	r3, r0, r8
 800054a:	428b      	cmp	r3, r1
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x27e>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f100 3cff 	add.w	ip, r0, #4294967295
 8000554:	d217      	bcs.n	8000586 <__udivmoddi4+0x2a6>
 8000556:	428b      	cmp	r3, r1
 8000558:	d915      	bls.n	8000586 <__udivmoddi4+0x2a6>
 800055a:	3802      	subs	r0, #2
 800055c:	4429      	add	r1, r5
 800055e:	1ac9      	subs	r1, r1, r3
 8000560:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000564:	e73b      	b.n	80003de <__udivmoddi4+0xfe>
 8000566:	4637      	mov	r7, r6
 8000568:	4630      	mov	r0, r6
 800056a:	e709      	b.n	8000380 <__udivmoddi4+0xa0>
 800056c:	4607      	mov	r7, r0
 800056e:	e6e7      	b.n	8000340 <__udivmoddi4+0x60>
 8000570:	4618      	mov	r0, r3
 8000572:	e6fb      	b.n	800036c <__udivmoddi4+0x8c>
 8000574:	4541      	cmp	r1, r8
 8000576:	d2ab      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 8000578:	ebb8 0a02 	subs.w	sl, r8, r2
 800057c:	eb69 020e 	sbc.w	r2, r9, lr
 8000580:	3801      	subs	r0, #1
 8000582:	4613      	mov	r3, r2
 8000584:	e7a4      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000586:	4660      	mov	r0, ip
 8000588:	e7e9      	b.n	800055e <__udivmoddi4+0x27e>
 800058a:	4618      	mov	r0, r3
 800058c:	e795      	b.n	80004ba <__udivmoddi4+0x1da>
 800058e:	4667      	mov	r7, ip
 8000590:	e7d1      	b.n	8000536 <__udivmoddi4+0x256>
 8000592:	4681      	mov	r9, r0
 8000594:	e77c      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000596:	3802      	subs	r0, #2
 8000598:	442c      	add	r4, r5
 800059a:	e747      	b.n	800042c <__udivmoddi4+0x14c>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	442b      	add	r3, r5
 80005a2:	e72f      	b.n	8000404 <__udivmoddi4+0x124>
 80005a4:	4638      	mov	r0, r7
 80005a6:	e708      	b.n	80003ba <__udivmoddi4+0xda>
 80005a8:	4637      	mov	r7, r6
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0xa0>

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80005b0:	b480      	push	{r7}
 80005b2:	b083      	sub	sp, #12
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005b8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005bc:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80005c0:	f003 0301 	and.w	r3, r3, #1
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d013      	beq.n	80005f0 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80005c8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005cc:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80005d0:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d00b      	beq.n	80005f0 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80005d8:	e000      	b.n	80005dc <ITM_SendChar+0x2c>
    {
      __NOP();
 80005da:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80005dc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d0f9      	beq.n	80005da <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80005e6:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005ea:	687a      	ldr	r2, [r7, #4]
 80005ec:	b2d2      	uxtb	r2, r2
 80005ee:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80005f0:	687b      	ldr	r3, [r7, #4]
}
 80005f2:	4618      	mov	r0, r3
 80005f4:	370c      	adds	r7, #12
 80005f6:	46bd      	mov	sp, r7
 80005f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fc:	4770      	bx	lr

080005fe <_write>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len) {
 80005fe:	b580      	push	{r7, lr}
 8000600:	b086      	sub	sp, #24
 8000602:	af00      	add	r7, sp, #0
 8000604:	60f8      	str	r0, [r7, #12]
 8000606:	60b9      	str	r1, [r7, #8]
 8000608:	607a      	str	r2, [r7, #4]
	// Implement your write code here, this is used by puts and printf for example
	int i = 0;
 800060a:	2300      	movs	r3, #0
 800060c:	617b      	str	r3, [r7, #20]
	for(i = 0; i < len; ++i) {
 800060e:	2300      	movs	r3, #0
 8000610:	617b      	str	r3, [r7, #20]
 8000612:	e009      	b.n	8000628 <_write+0x2a>
		ITM_SendChar((*ptr++));
 8000614:	68bb      	ldr	r3, [r7, #8]
 8000616:	1c5a      	adds	r2, r3, #1
 8000618:	60ba      	str	r2, [r7, #8]
 800061a:	781b      	ldrb	r3, [r3, #0]
 800061c:	4618      	mov	r0, r3
 800061e:	f7ff ffc7 	bl	80005b0 <ITM_SendChar>
	for(i = 0; i < len; ++i) {
 8000622:	697b      	ldr	r3, [r7, #20]
 8000624:	3301      	adds	r3, #1
 8000626:	617b      	str	r3, [r7, #20]
 8000628:	697a      	ldr	r2, [r7, #20]
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	429a      	cmp	r2, r3
 800062e:	dbf1      	blt.n	8000614 <_write+0x16>
	}
	return len;
 8000630:	687b      	ldr	r3, [r7, #4]
}
 8000632:	4618      	mov	r0, r3
 8000634:	3718      	adds	r7, #24
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}
	...

0800063c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000640:	f000 f9ee 	bl	8000a20 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000644:	f000 f81c 	bl	8000680 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000648:	f000 f88c 	bl	8000764 <MX_GPIO_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5); // on board LED
 800064c:	2120      	movs	r1, #32
 800064e:	4809      	ldr	r0, [pc, #36]	; (8000674 <main+0x38>)
 8000650:	f000 fd0b 	bl	800106a <HAL_GPIO_TogglePin>
	  ++count; // increment count
 8000654:	4b08      	ldr	r3, [pc, #32]	; (8000678 <main+0x3c>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	3301      	adds	r3, #1
 800065a:	4a07      	ldr	r2, [pc, #28]	; (8000678 <main+0x3c>)
 800065c:	6013      	str	r3, [r2, #0]
	   printf("Hello World count = %d\n", count);
 800065e:	4b06      	ldr	r3, [pc, #24]	; (8000678 <main+0x3c>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	4619      	mov	r1, r3
 8000664:	4805      	ldr	r0, [pc, #20]	; (800067c <main+0x40>)
 8000666:	f001 fa7d 	bl	8001b64 <iprintf>
//	  cout << "Hello World count = " << count << endl;
	  HAL_Delay(250); // 250ms delay
 800066a:	20fa      	movs	r0, #250	; 0xfa
 800066c:	f000 fa4a 	bl	8000b04 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5); // on board LED
 8000670:	e7ec      	b.n	800064c <main+0x10>
 8000672:	bf00      	nop
 8000674:	40020000 	.word	0x40020000
 8000678:	2000008c 	.word	0x2000008c
 800067c:	08002944 	.word	0x08002944

08000680 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b094      	sub	sp, #80	; 0x50
 8000684:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000686:	f107 031c 	add.w	r3, r7, #28
 800068a:	2234      	movs	r2, #52	; 0x34
 800068c:	2100      	movs	r1, #0
 800068e:	4618      	mov	r0, r3
 8000690:	f001 fa60 	bl	8001b54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000694:	f107 0308 	add.w	r3, r7, #8
 8000698:	2200      	movs	r2, #0
 800069a:	601a      	str	r2, [r3, #0]
 800069c:	605a      	str	r2, [r3, #4]
 800069e:	609a      	str	r2, [r3, #8]
 80006a0:	60da      	str	r2, [r3, #12]
 80006a2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006a4:	2300      	movs	r3, #0
 80006a6:	607b      	str	r3, [r7, #4]
 80006a8:	4b2c      	ldr	r3, [pc, #176]	; (800075c <SystemClock_Config+0xdc>)
 80006aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ac:	4a2b      	ldr	r2, [pc, #172]	; (800075c <SystemClock_Config+0xdc>)
 80006ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006b2:	6413      	str	r3, [r2, #64]	; 0x40
 80006b4:	4b29      	ldr	r3, [pc, #164]	; (800075c <SystemClock_Config+0xdc>)
 80006b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006bc:	607b      	str	r3, [r7, #4]
 80006be:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006c0:	2300      	movs	r3, #0
 80006c2:	603b      	str	r3, [r7, #0]
 80006c4:	4b26      	ldr	r3, [pc, #152]	; (8000760 <SystemClock_Config+0xe0>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	4a25      	ldr	r2, [pc, #148]	; (8000760 <SystemClock_Config+0xe0>)
 80006ca:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006ce:	6013      	str	r3, [r2, #0]
 80006d0:	4b23      	ldr	r3, [pc, #140]	; (8000760 <SystemClock_Config+0xe0>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006d8:	603b      	str	r3, [r7, #0]
 80006da:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006dc:	2301      	movs	r3, #1
 80006de:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006e4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006e6:	2302      	movs	r3, #2
 80006e8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006ea:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006ee:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006f0:	2304      	movs	r3, #4
 80006f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80006f4:	23b4      	movs	r3, #180	; 0xb4
 80006f6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006f8:	2302      	movs	r3, #2
 80006fa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80006fc:	2302      	movs	r3, #2
 80006fe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000700:	2302      	movs	r3, #2
 8000702:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000704:	f107 031c 	add.w	r3, r7, #28
 8000708:	4618      	mov	r0, r3
 800070a:	f000 ff9f 	bl	800164c <HAL_RCC_OscConfig>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000714:	f000 f868 	bl	80007e8 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000718:	f000 fcc2 	bl	80010a0 <HAL_PWREx_EnableOverDrive>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000722:	f000 f861 	bl	80007e8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000726:	230f      	movs	r3, #15
 8000728:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800072a:	2302      	movs	r3, #2
 800072c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800072e:	2300      	movs	r3, #0
 8000730:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000732:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000736:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000738:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800073c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800073e:	f107 0308 	add.w	r3, r7, #8
 8000742:	2105      	movs	r1, #5
 8000744:	4618      	mov	r0, r3
 8000746:	f000 fcfb 	bl	8001140 <HAL_RCC_ClockConfig>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000750:	f000 f84a 	bl	80007e8 <Error_Handler>
  }
}
 8000754:	bf00      	nop
 8000756:	3750      	adds	r7, #80	; 0x50
 8000758:	46bd      	mov	sp, r7
 800075a:	bd80      	pop	{r7, pc}
 800075c:	40023800 	.word	0x40023800
 8000760:	40007000 	.word	0x40007000

08000764 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b088      	sub	sp, #32
 8000768:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800076a:	f107 030c 	add.w	r3, r7, #12
 800076e:	2200      	movs	r2, #0
 8000770:	601a      	str	r2, [r3, #0]
 8000772:	605a      	str	r2, [r3, #4]
 8000774:	609a      	str	r2, [r3, #8]
 8000776:	60da      	str	r2, [r3, #12]
 8000778:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800077a:	2300      	movs	r3, #0
 800077c:	60bb      	str	r3, [r7, #8]
 800077e:	4b18      	ldr	r3, [pc, #96]	; (80007e0 <MX_GPIO_Init+0x7c>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000782:	4a17      	ldr	r2, [pc, #92]	; (80007e0 <MX_GPIO_Init+0x7c>)
 8000784:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000788:	6313      	str	r3, [r2, #48]	; 0x30
 800078a:	4b15      	ldr	r3, [pc, #84]	; (80007e0 <MX_GPIO_Init+0x7c>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000792:	60bb      	str	r3, [r7, #8]
 8000794:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000796:	2300      	movs	r3, #0
 8000798:	607b      	str	r3, [r7, #4]
 800079a:	4b11      	ldr	r3, [pc, #68]	; (80007e0 <MX_GPIO_Init+0x7c>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	4a10      	ldr	r2, [pc, #64]	; (80007e0 <MX_GPIO_Init+0x7c>)
 80007a0:	f043 0301 	orr.w	r3, r3, #1
 80007a4:	6313      	str	r3, [r2, #48]	; 0x30
 80007a6:	4b0e      	ldr	r3, [pc, #56]	; (80007e0 <MX_GPIO_Init+0x7c>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	f003 0301 	and.w	r3, r3, #1
 80007ae:	607b      	str	r3, [r7, #4]
 80007b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80007b2:	2200      	movs	r2, #0
 80007b4:	2120      	movs	r1, #32
 80007b6:	480b      	ldr	r0, [pc, #44]	; (80007e4 <MX_GPIO_Init+0x80>)
 80007b8:	f000 fc3e 	bl	8001038 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80007bc:	2320      	movs	r3, #32
 80007be:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007c0:	2301      	movs	r3, #1
 80007c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c4:	2300      	movs	r3, #0
 80007c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c8:	2300      	movs	r3, #0
 80007ca:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007cc:	f107 030c 	add.w	r3, r7, #12
 80007d0:	4619      	mov	r1, r3
 80007d2:	4804      	ldr	r0, [pc, #16]	; (80007e4 <MX_GPIO_Init+0x80>)
 80007d4:	f000 fa9e 	bl	8000d14 <HAL_GPIO_Init>

}
 80007d8:	bf00      	nop
 80007da:	3720      	adds	r7, #32
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	40023800 	.word	0x40023800
 80007e4:	40020000 	.word	0x40020000

080007e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007e8:	b480      	push	{r7}
 80007ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80007ec:	bf00      	nop
 80007ee:	46bd      	mov	sp, r7
 80007f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f4:	4770      	bx	lr
	...

080007f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007f8:	b480      	push	{r7}
 80007fa:	b083      	sub	sp, #12
 80007fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007fe:	2300      	movs	r3, #0
 8000800:	607b      	str	r3, [r7, #4]
 8000802:	4b10      	ldr	r3, [pc, #64]	; (8000844 <HAL_MspInit+0x4c>)
 8000804:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000806:	4a0f      	ldr	r2, [pc, #60]	; (8000844 <HAL_MspInit+0x4c>)
 8000808:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800080c:	6453      	str	r3, [r2, #68]	; 0x44
 800080e:	4b0d      	ldr	r3, [pc, #52]	; (8000844 <HAL_MspInit+0x4c>)
 8000810:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000812:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000816:	607b      	str	r3, [r7, #4]
 8000818:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800081a:	2300      	movs	r3, #0
 800081c:	603b      	str	r3, [r7, #0]
 800081e:	4b09      	ldr	r3, [pc, #36]	; (8000844 <HAL_MspInit+0x4c>)
 8000820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000822:	4a08      	ldr	r2, [pc, #32]	; (8000844 <HAL_MspInit+0x4c>)
 8000824:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000828:	6413      	str	r3, [r2, #64]	; 0x40
 800082a:	4b06      	ldr	r3, [pc, #24]	; (8000844 <HAL_MspInit+0x4c>)
 800082c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800082e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000832:	603b      	str	r3, [r7, #0]
 8000834:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000836:	bf00      	nop
 8000838:	370c      	adds	r7, #12
 800083a:	46bd      	mov	sp, r7
 800083c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000840:	4770      	bx	lr
 8000842:	bf00      	nop
 8000844:	40023800 	.word	0x40023800

08000848 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800084c:	bf00      	nop
 800084e:	46bd      	mov	sp, r7
 8000850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000854:	4770      	bx	lr

08000856 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000856:	b480      	push	{r7}
 8000858:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800085a:	e7fe      	b.n	800085a <HardFault_Handler+0x4>

0800085c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800085c:	b480      	push	{r7}
 800085e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000860:	e7fe      	b.n	8000860 <MemManage_Handler+0x4>

08000862 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000862:	b480      	push	{r7}
 8000864:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000866:	e7fe      	b.n	8000866 <BusFault_Handler+0x4>

08000868 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000868:	b480      	push	{r7}
 800086a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800086c:	e7fe      	b.n	800086c <UsageFault_Handler+0x4>

0800086e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800086e:	b480      	push	{r7}
 8000870:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000872:	bf00      	nop
 8000874:	46bd      	mov	sp, r7
 8000876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087a:	4770      	bx	lr

0800087c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000880:	bf00      	nop
 8000882:	46bd      	mov	sp, r7
 8000884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000888:	4770      	bx	lr

0800088a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800088a:	b480      	push	{r7}
 800088c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800088e:	bf00      	nop
 8000890:	46bd      	mov	sp, r7
 8000892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000896:	4770      	bx	lr

08000898 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800089c:	f000 f912 	bl	8000ac4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008a0:	bf00      	nop
 80008a2:	bd80      	pop	{r7, pc}

080008a4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b086      	sub	sp, #24
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	60f8      	str	r0, [r7, #12]
 80008ac:	60b9      	str	r1, [r7, #8]
 80008ae:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008b0:	2300      	movs	r3, #0
 80008b2:	617b      	str	r3, [r7, #20]
 80008b4:	e00a      	b.n	80008cc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80008b6:	f3af 8000 	nop.w
 80008ba:	4601      	mov	r1, r0
 80008bc:	68bb      	ldr	r3, [r7, #8]
 80008be:	1c5a      	adds	r2, r3, #1
 80008c0:	60ba      	str	r2, [r7, #8]
 80008c2:	b2ca      	uxtb	r2, r1
 80008c4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008c6:	697b      	ldr	r3, [r7, #20]
 80008c8:	3301      	adds	r3, #1
 80008ca:	617b      	str	r3, [r7, #20]
 80008cc:	697a      	ldr	r2, [r7, #20]
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	429a      	cmp	r2, r3
 80008d2:	dbf0      	blt.n	80008b6 <_read+0x12>
	}

return len;
 80008d4:	687b      	ldr	r3, [r7, #4]
}
 80008d6:	4618      	mov	r0, r3
 80008d8:	3718      	adds	r7, #24
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}

080008de <_close>:
	}
	return len;
}

int _close(int file)
{
 80008de:	b480      	push	{r7}
 80008e0:	b083      	sub	sp, #12
 80008e2:	af00      	add	r7, sp, #0
 80008e4:	6078      	str	r0, [r7, #4]
	return -1;
 80008e6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80008ea:	4618      	mov	r0, r3
 80008ec:	370c      	adds	r7, #12
 80008ee:	46bd      	mov	sp, r7
 80008f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f4:	4770      	bx	lr

080008f6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80008f6:	b480      	push	{r7}
 80008f8:	b083      	sub	sp, #12
 80008fa:	af00      	add	r7, sp, #0
 80008fc:	6078      	str	r0, [r7, #4]
 80008fe:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000900:	683b      	ldr	r3, [r7, #0]
 8000902:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000906:	605a      	str	r2, [r3, #4]
	return 0;
 8000908:	2300      	movs	r3, #0
}
 800090a:	4618      	mov	r0, r3
 800090c:	370c      	adds	r7, #12
 800090e:	46bd      	mov	sp, r7
 8000910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000914:	4770      	bx	lr

08000916 <_isatty>:

int _isatty(int file)
{
 8000916:	b480      	push	{r7}
 8000918:	b083      	sub	sp, #12
 800091a:	af00      	add	r7, sp, #0
 800091c:	6078      	str	r0, [r7, #4]
	return 1;
 800091e:	2301      	movs	r3, #1
}
 8000920:	4618      	mov	r0, r3
 8000922:	370c      	adds	r7, #12
 8000924:	46bd      	mov	sp, r7
 8000926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092a:	4770      	bx	lr

0800092c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800092c:	b480      	push	{r7}
 800092e:	b085      	sub	sp, #20
 8000930:	af00      	add	r7, sp, #0
 8000932:	60f8      	str	r0, [r7, #12]
 8000934:	60b9      	str	r1, [r7, #8]
 8000936:	607a      	str	r2, [r7, #4]
	return 0;
 8000938:	2300      	movs	r3, #0
}
 800093a:	4618      	mov	r0, r3
 800093c:	3714      	adds	r7, #20
 800093e:	46bd      	mov	sp, r7
 8000940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000944:	4770      	bx	lr
	...

08000948 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b084      	sub	sp, #16
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000950:	4b11      	ldr	r3, [pc, #68]	; (8000998 <_sbrk+0x50>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	2b00      	cmp	r3, #0
 8000956:	d102      	bne.n	800095e <_sbrk+0x16>
		heap_end = &end;
 8000958:	4b0f      	ldr	r3, [pc, #60]	; (8000998 <_sbrk+0x50>)
 800095a:	4a10      	ldr	r2, [pc, #64]	; (800099c <_sbrk+0x54>)
 800095c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800095e:	4b0e      	ldr	r3, [pc, #56]	; (8000998 <_sbrk+0x50>)
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000964:	4b0c      	ldr	r3, [pc, #48]	; (8000998 <_sbrk+0x50>)
 8000966:	681a      	ldr	r2, [r3, #0]
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	4413      	add	r3, r2
 800096c:	466a      	mov	r2, sp
 800096e:	4293      	cmp	r3, r2
 8000970:	d907      	bls.n	8000982 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000972:	f001 f8c5 	bl	8001b00 <__errno>
 8000976:	4602      	mov	r2, r0
 8000978:	230c      	movs	r3, #12
 800097a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800097c:	f04f 33ff 	mov.w	r3, #4294967295
 8000980:	e006      	b.n	8000990 <_sbrk+0x48>
	}

	heap_end += incr;
 8000982:	4b05      	ldr	r3, [pc, #20]	; (8000998 <_sbrk+0x50>)
 8000984:	681a      	ldr	r2, [r3, #0]
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	4413      	add	r3, r2
 800098a:	4a03      	ldr	r2, [pc, #12]	; (8000998 <_sbrk+0x50>)
 800098c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800098e:	68fb      	ldr	r3, [r7, #12]
}
 8000990:	4618      	mov	r0, r3
 8000992:	3710      	adds	r7, #16
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}
 8000998:	20000090 	.word	0x20000090
 800099c:	200000a8 	.word	0x200000a8

080009a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009a4:	4b08      	ldr	r3, [pc, #32]	; (80009c8 <SystemInit+0x28>)
 80009a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009aa:	4a07      	ldr	r2, [pc, #28]	; (80009c8 <SystemInit+0x28>)
 80009ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80009b4:	4b04      	ldr	r3, [pc, #16]	; (80009c8 <SystemInit+0x28>)
 80009b6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80009ba:	609a      	str	r2, [r3, #8]
#endif
}
 80009bc:	bf00      	nop
 80009be:	46bd      	mov	sp, r7
 80009c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c4:	4770      	bx	lr
 80009c6:	bf00      	nop
 80009c8:	e000ed00 	.word	0xe000ed00

080009cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80009cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a04 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80009d0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80009d2:	e003      	b.n	80009dc <LoopCopyDataInit>

080009d4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80009d4:	4b0c      	ldr	r3, [pc, #48]	; (8000a08 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80009d6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80009d8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80009da:	3104      	adds	r1, #4

080009dc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80009dc:	480b      	ldr	r0, [pc, #44]	; (8000a0c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80009de:	4b0c      	ldr	r3, [pc, #48]	; (8000a10 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80009e0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80009e2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80009e4:	d3f6      	bcc.n	80009d4 <CopyDataInit>
  ldr  r2, =_sbss
 80009e6:	4a0b      	ldr	r2, [pc, #44]	; (8000a14 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80009e8:	e002      	b.n	80009f0 <LoopFillZerobss>

080009ea <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80009ea:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80009ec:	f842 3b04 	str.w	r3, [r2], #4

080009f0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80009f0:	4b09      	ldr	r3, [pc, #36]	; (8000a18 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80009f2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80009f4:	d3f9      	bcc.n	80009ea <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80009f6:	f7ff ffd3 	bl	80009a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009fa:	f001 f887 	bl	8001b0c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009fe:	f7ff fe1d 	bl	800063c <main>
  bx  lr    
 8000a02:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000a04:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000a08:	08002a14 	.word	0x08002a14
  ldr  r0, =_sdata
 8000a0c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000a10:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8000a14:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8000a18:	200000a4 	.word	0x200000a4

08000a1c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a1c:	e7fe      	b.n	8000a1c <ADC_IRQHandler>
	...

08000a20 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a24:	4b0e      	ldr	r3, [pc, #56]	; (8000a60 <HAL_Init+0x40>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	4a0d      	ldr	r2, [pc, #52]	; (8000a60 <HAL_Init+0x40>)
 8000a2a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a2e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a30:	4b0b      	ldr	r3, [pc, #44]	; (8000a60 <HAL_Init+0x40>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	4a0a      	ldr	r2, [pc, #40]	; (8000a60 <HAL_Init+0x40>)
 8000a36:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a3a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a3c:	4b08      	ldr	r3, [pc, #32]	; (8000a60 <HAL_Init+0x40>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	4a07      	ldr	r2, [pc, #28]	; (8000a60 <HAL_Init+0x40>)
 8000a42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a46:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a48:	2003      	movs	r0, #3
 8000a4a:	f000 f92f 	bl	8000cac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a4e:	2000      	movs	r0, #0
 8000a50:	f000 f808 	bl	8000a64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a54:	f7ff fed0 	bl	80007f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a58:	2300      	movs	r3, #0
}
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	40023c00 	.word	0x40023c00

08000a64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b082      	sub	sp, #8
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a6c:	4b12      	ldr	r3, [pc, #72]	; (8000ab8 <HAL_InitTick+0x54>)
 8000a6e:	681a      	ldr	r2, [r3, #0]
 8000a70:	4b12      	ldr	r3, [pc, #72]	; (8000abc <HAL_InitTick+0x58>)
 8000a72:	781b      	ldrb	r3, [r3, #0]
 8000a74:	4619      	mov	r1, r3
 8000a76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a82:	4618      	mov	r0, r3
 8000a84:	f000 f939 	bl	8000cfa <HAL_SYSTICK_Config>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a8e:	2301      	movs	r3, #1
 8000a90:	e00e      	b.n	8000ab0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	2b0f      	cmp	r3, #15
 8000a96:	d80a      	bhi.n	8000aae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a98:	2200      	movs	r2, #0
 8000a9a:	6879      	ldr	r1, [r7, #4]
 8000a9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000aa0:	f000 f90f 	bl	8000cc2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000aa4:	4a06      	ldr	r2, [pc, #24]	; (8000ac0 <HAL_InitTick+0x5c>)
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	e000      	b.n	8000ab0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000aae:	2301      	movs	r3, #1
}
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	3708      	adds	r7, #8
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	20000000 	.word	0x20000000
 8000abc:	20000008 	.word	0x20000008
 8000ac0:	20000004 	.word	0x20000004

08000ac4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ac8:	4b06      	ldr	r3, [pc, #24]	; (8000ae4 <HAL_IncTick+0x20>)
 8000aca:	781b      	ldrb	r3, [r3, #0]
 8000acc:	461a      	mov	r2, r3
 8000ace:	4b06      	ldr	r3, [pc, #24]	; (8000ae8 <HAL_IncTick+0x24>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	4413      	add	r3, r2
 8000ad4:	4a04      	ldr	r2, [pc, #16]	; (8000ae8 <HAL_IncTick+0x24>)
 8000ad6:	6013      	str	r3, [r2, #0]
}
 8000ad8:	bf00      	nop
 8000ada:	46bd      	mov	sp, r7
 8000adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae0:	4770      	bx	lr
 8000ae2:	bf00      	nop
 8000ae4:	20000008 	.word	0x20000008
 8000ae8:	2000009c 	.word	0x2000009c

08000aec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
  return uwTick;
 8000af0:	4b03      	ldr	r3, [pc, #12]	; (8000b00 <HAL_GetTick+0x14>)
 8000af2:	681b      	ldr	r3, [r3, #0]
}
 8000af4:	4618      	mov	r0, r3
 8000af6:	46bd      	mov	sp, r7
 8000af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop
 8000b00:	2000009c 	.word	0x2000009c

08000b04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b084      	sub	sp, #16
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b0c:	f7ff ffee 	bl	8000aec <HAL_GetTick>
 8000b10:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b16:	68fb      	ldr	r3, [r7, #12]
 8000b18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b1c:	d005      	beq.n	8000b2a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b1e:	4b09      	ldr	r3, [pc, #36]	; (8000b44 <HAL_Delay+0x40>)
 8000b20:	781b      	ldrb	r3, [r3, #0]
 8000b22:	461a      	mov	r2, r3
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	4413      	add	r3, r2
 8000b28:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000b2a:	bf00      	nop
 8000b2c:	f7ff ffde 	bl	8000aec <HAL_GetTick>
 8000b30:	4602      	mov	r2, r0
 8000b32:	68bb      	ldr	r3, [r7, #8]
 8000b34:	1ad3      	subs	r3, r2, r3
 8000b36:	68fa      	ldr	r2, [r7, #12]
 8000b38:	429a      	cmp	r2, r3
 8000b3a:	d8f7      	bhi.n	8000b2c <HAL_Delay+0x28>
  {
  }
}
 8000b3c:	bf00      	nop
 8000b3e:	3710      	adds	r7, #16
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	20000008 	.word	0x20000008

08000b48 <__NVIC_SetPriorityGrouping>:
{
 8000b48:	b480      	push	{r7}
 8000b4a:	b085      	sub	sp, #20
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	f003 0307 	and.w	r3, r3, #7
 8000b56:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b58:	4b0c      	ldr	r3, [pc, #48]	; (8000b8c <__NVIC_SetPriorityGrouping+0x44>)
 8000b5a:	68db      	ldr	r3, [r3, #12]
 8000b5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b5e:	68ba      	ldr	r2, [r7, #8]
 8000b60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b64:	4013      	ands	r3, r2
 8000b66:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b68:	68fb      	ldr	r3, [r7, #12]
 8000b6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b6c:	68bb      	ldr	r3, [r7, #8]
 8000b6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b70:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b7a:	4a04      	ldr	r2, [pc, #16]	; (8000b8c <__NVIC_SetPriorityGrouping+0x44>)
 8000b7c:	68bb      	ldr	r3, [r7, #8]
 8000b7e:	60d3      	str	r3, [r2, #12]
}
 8000b80:	bf00      	nop
 8000b82:	3714      	adds	r7, #20
 8000b84:	46bd      	mov	sp, r7
 8000b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8a:	4770      	bx	lr
 8000b8c:	e000ed00 	.word	0xe000ed00

08000b90 <__NVIC_GetPriorityGrouping>:
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b94:	4b04      	ldr	r3, [pc, #16]	; (8000ba8 <__NVIC_GetPriorityGrouping+0x18>)
 8000b96:	68db      	ldr	r3, [r3, #12]
 8000b98:	0a1b      	lsrs	r3, r3, #8
 8000b9a:	f003 0307 	and.w	r3, r3, #7
}
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba6:	4770      	bx	lr
 8000ba8:	e000ed00 	.word	0xe000ed00

08000bac <__NVIC_SetPriority>:
{
 8000bac:	b480      	push	{r7}
 8000bae:	b083      	sub	sp, #12
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	6039      	str	r1, [r7, #0]
 8000bb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	db0a      	blt.n	8000bd6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bc0:	683b      	ldr	r3, [r7, #0]
 8000bc2:	b2da      	uxtb	r2, r3
 8000bc4:	490c      	ldr	r1, [pc, #48]	; (8000bf8 <__NVIC_SetPriority+0x4c>)
 8000bc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bca:	0112      	lsls	r2, r2, #4
 8000bcc:	b2d2      	uxtb	r2, r2
 8000bce:	440b      	add	r3, r1
 8000bd0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000bd4:	e00a      	b.n	8000bec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bd6:	683b      	ldr	r3, [r7, #0]
 8000bd8:	b2da      	uxtb	r2, r3
 8000bda:	4908      	ldr	r1, [pc, #32]	; (8000bfc <__NVIC_SetPriority+0x50>)
 8000bdc:	79fb      	ldrb	r3, [r7, #7]
 8000bde:	f003 030f 	and.w	r3, r3, #15
 8000be2:	3b04      	subs	r3, #4
 8000be4:	0112      	lsls	r2, r2, #4
 8000be6:	b2d2      	uxtb	r2, r2
 8000be8:	440b      	add	r3, r1
 8000bea:	761a      	strb	r2, [r3, #24]
}
 8000bec:	bf00      	nop
 8000bee:	370c      	adds	r7, #12
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf6:	4770      	bx	lr
 8000bf8:	e000e100 	.word	0xe000e100
 8000bfc:	e000ed00 	.word	0xe000ed00

08000c00 <NVIC_EncodePriority>:
{
 8000c00:	b480      	push	{r7}
 8000c02:	b089      	sub	sp, #36	; 0x24
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	60f8      	str	r0, [r7, #12]
 8000c08:	60b9      	str	r1, [r7, #8]
 8000c0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	f003 0307 	and.w	r3, r3, #7
 8000c12:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c14:	69fb      	ldr	r3, [r7, #28]
 8000c16:	f1c3 0307 	rsb	r3, r3, #7
 8000c1a:	2b04      	cmp	r3, #4
 8000c1c:	bf28      	it	cs
 8000c1e:	2304      	movcs	r3, #4
 8000c20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c22:	69fb      	ldr	r3, [r7, #28]
 8000c24:	3304      	adds	r3, #4
 8000c26:	2b06      	cmp	r3, #6
 8000c28:	d902      	bls.n	8000c30 <NVIC_EncodePriority+0x30>
 8000c2a:	69fb      	ldr	r3, [r7, #28]
 8000c2c:	3b03      	subs	r3, #3
 8000c2e:	e000      	b.n	8000c32 <NVIC_EncodePriority+0x32>
 8000c30:	2300      	movs	r3, #0
 8000c32:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c34:	f04f 32ff 	mov.w	r2, #4294967295
 8000c38:	69bb      	ldr	r3, [r7, #24]
 8000c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c3e:	43da      	mvns	r2, r3
 8000c40:	68bb      	ldr	r3, [r7, #8]
 8000c42:	401a      	ands	r2, r3
 8000c44:	697b      	ldr	r3, [r7, #20]
 8000c46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c48:	f04f 31ff 	mov.w	r1, #4294967295
 8000c4c:	697b      	ldr	r3, [r7, #20]
 8000c4e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c52:	43d9      	mvns	r1, r3
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c58:	4313      	orrs	r3, r2
}
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	3724      	adds	r7, #36	; 0x24
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr
	...

08000c68 <SysTick_Config>:
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b082      	sub	sp, #8
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	3b01      	subs	r3, #1
 8000c74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c78:	d301      	bcc.n	8000c7e <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	e00f      	b.n	8000c9e <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c7e:	4a0a      	ldr	r2, [pc, #40]	; (8000ca8 <SysTick_Config+0x40>)
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	3b01      	subs	r3, #1
 8000c84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c86:	210f      	movs	r1, #15
 8000c88:	f04f 30ff 	mov.w	r0, #4294967295
 8000c8c:	f7ff ff8e 	bl	8000bac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c90:	4b05      	ldr	r3, [pc, #20]	; (8000ca8 <SysTick_Config+0x40>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c96:	4b04      	ldr	r3, [pc, #16]	; (8000ca8 <SysTick_Config+0x40>)
 8000c98:	2207      	movs	r2, #7
 8000c9a:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8000c9c:	2300      	movs	r3, #0
}
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	3708      	adds	r7, #8
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	e000e010 	.word	0xe000e010

08000cac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b082      	sub	sp, #8
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cb4:	6878      	ldr	r0, [r7, #4]
 8000cb6:	f7ff ff47 	bl	8000b48 <__NVIC_SetPriorityGrouping>
}
 8000cba:	bf00      	nop
 8000cbc:	3708      	adds	r7, #8
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}

08000cc2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cc2:	b580      	push	{r7, lr}
 8000cc4:	b086      	sub	sp, #24
 8000cc6:	af00      	add	r7, sp, #0
 8000cc8:	4603      	mov	r3, r0
 8000cca:	60b9      	str	r1, [r7, #8]
 8000ccc:	607a      	str	r2, [r7, #4]
 8000cce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cd4:	f7ff ff5c 	bl	8000b90 <__NVIC_GetPriorityGrouping>
 8000cd8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cda:	687a      	ldr	r2, [r7, #4]
 8000cdc:	68b9      	ldr	r1, [r7, #8]
 8000cde:	6978      	ldr	r0, [r7, #20]
 8000ce0:	f7ff ff8e 	bl	8000c00 <NVIC_EncodePriority>
 8000ce4:	4602      	mov	r2, r0
 8000ce6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cea:	4611      	mov	r1, r2
 8000cec:	4618      	mov	r0, r3
 8000cee:	f7ff ff5d 	bl	8000bac <__NVIC_SetPriority>
}
 8000cf2:	bf00      	nop
 8000cf4:	3718      	adds	r7, #24
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}

08000cfa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cfa:	b580      	push	{r7, lr}
 8000cfc:	b082      	sub	sp, #8
 8000cfe:	af00      	add	r7, sp, #0
 8000d00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d02:	6878      	ldr	r0, [r7, #4]
 8000d04:	f7ff ffb0 	bl	8000c68 <SysTick_Config>
 8000d08:	4603      	mov	r3, r0
}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	3708      	adds	r7, #8
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
	...

08000d14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d14:	b480      	push	{r7}
 8000d16:	b089      	sub	sp, #36	; 0x24
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
 8000d1c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d22:	2300      	movs	r3, #0
 8000d24:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d26:	2300      	movs	r3, #0
 8000d28:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	61fb      	str	r3, [r7, #28]
 8000d2e:	e165      	b.n	8000ffc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d30:	2201      	movs	r2, #1
 8000d32:	69fb      	ldr	r3, [r7, #28]
 8000d34:	fa02 f303 	lsl.w	r3, r2, r3
 8000d38:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	697a      	ldr	r2, [r7, #20]
 8000d40:	4013      	ands	r3, r2
 8000d42:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d44:	693a      	ldr	r2, [r7, #16]
 8000d46:	697b      	ldr	r3, [r7, #20]
 8000d48:	429a      	cmp	r2, r3
 8000d4a:	f040 8154 	bne.w	8000ff6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	685b      	ldr	r3, [r3, #4]
 8000d52:	2b01      	cmp	r3, #1
 8000d54:	d00b      	beq.n	8000d6e <HAL_GPIO_Init+0x5a>
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	685b      	ldr	r3, [r3, #4]
 8000d5a:	2b02      	cmp	r3, #2
 8000d5c:	d007      	beq.n	8000d6e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d62:	2b11      	cmp	r3, #17
 8000d64:	d003      	beq.n	8000d6e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d66:	683b      	ldr	r3, [r7, #0]
 8000d68:	685b      	ldr	r3, [r3, #4]
 8000d6a:	2b12      	cmp	r3, #18
 8000d6c:	d130      	bne.n	8000dd0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	689b      	ldr	r3, [r3, #8]
 8000d72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d74:	69fb      	ldr	r3, [r7, #28]
 8000d76:	005b      	lsls	r3, r3, #1
 8000d78:	2203      	movs	r2, #3
 8000d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7e:	43db      	mvns	r3, r3
 8000d80:	69ba      	ldr	r2, [r7, #24]
 8000d82:	4013      	ands	r3, r2
 8000d84:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	68da      	ldr	r2, [r3, #12]
 8000d8a:	69fb      	ldr	r3, [r7, #28]
 8000d8c:	005b      	lsls	r3, r3, #1
 8000d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d92:	69ba      	ldr	r2, [r7, #24]
 8000d94:	4313      	orrs	r3, r2
 8000d96:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	69ba      	ldr	r2, [r7, #24]
 8000d9c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	685b      	ldr	r3, [r3, #4]
 8000da2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000da4:	2201      	movs	r2, #1
 8000da6:	69fb      	ldr	r3, [r7, #28]
 8000da8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dac:	43db      	mvns	r3, r3
 8000dae:	69ba      	ldr	r2, [r7, #24]
 8000db0:	4013      	ands	r3, r2
 8000db2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	685b      	ldr	r3, [r3, #4]
 8000db8:	091b      	lsrs	r3, r3, #4
 8000dba:	f003 0201 	and.w	r2, r3, #1
 8000dbe:	69fb      	ldr	r3, [r7, #28]
 8000dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc4:	69ba      	ldr	r2, [r7, #24]
 8000dc6:	4313      	orrs	r3, r2
 8000dc8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	69ba      	ldr	r2, [r7, #24]
 8000dce:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	68db      	ldr	r3, [r3, #12]
 8000dd4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000dd6:	69fb      	ldr	r3, [r7, #28]
 8000dd8:	005b      	lsls	r3, r3, #1
 8000dda:	2203      	movs	r2, #3
 8000ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8000de0:	43db      	mvns	r3, r3
 8000de2:	69ba      	ldr	r2, [r7, #24]
 8000de4:	4013      	ands	r3, r2
 8000de6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	689a      	ldr	r2, [r3, #8]
 8000dec:	69fb      	ldr	r3, [r7, #28]
 8000dee:	005b      	lsls	r3, r3, #1
 8000df0:	fa02 f303 	lsl.w	r3, r2, r3
 8000df4:	69ba      	ldr	r2, [r7, #24]
 8000df6:	4313      	orrs	r3, r2
 8000df8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	69ba      	ldr	r2, [r7, #24]
 8000dfe:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	685b      	ldr	r3, [r3, #4]
 8000e04:	2b02      	cmp	r3, #2
 8000e06:	d003      	beq.n	8000e10 <HAL_GPIO_Init+0xfc>
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	685b      	ldr	r3, [r3, #4]
 8000e0c:	2b12      	cmp	r3, #18
 8000e0e:	d123      	bne.n	8000e58 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e10:	69fb      	ldr	r3, [r7, #28]
 8000e12:	08da      	lsrs	r2, r3, #3
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	3208      	adds	r2, #8
 8000e18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e1e:	69fb      	ldr	r3, [r7, #28]
 8000e20:	f003 0307 	and.w	r3, r3, #7
 8000e24:	009b      	lsls	r3, r3, #2
 8000e26:	220f      	movs	r2, #15
 8000e28:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2c:	43db      	mvns	r3, r3
 8000e2e:	69ba      	ldr	r2, [r7, #24]
 8000e30:	4013      	ands	r3, r2
 8000e32:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	691a      	ldr	r2, [r3, #16]
 8000e38:	69fb      	ldr	r3, [r7, #28]
 8000e3a:	f003 0307 	and.w	r3, r3, #7
 8000e3e:	009b      	lsls	r3, r3, #2
 8000e40:	fa02 f303 	lsl.w	r3, r2, r3
 8000e44:	69ba      	ldr	r2, [r7, #24]
 8000e46:	4313      	orrs	r3, r2
 8000e48:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e4a:	69fb      	ldr	r3, [r7, #28]
 8000e4c:	08da      	lsrs	r2, r3, #3
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	3208      	adds	r2, #8
 8000e52:	69b9      	ldr	r1, [r7, #24]
 8000e54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e5e:	69fb      	ldr	r3, [r7, #28]
 8000e60:	005b      	lsls	r3, r3, #1
 8000e62:	2203      	movs	r2, #3
 8000e64:	fa02 f303 	lsl.w	r3, r2, r3
 8000e68:	43db      	mvns	r3, r3
 8000e6a:	69ba      	ldr	r2, [r7, #24]
 8000e6c:	4013      	ands	r3, r2
 8000e6e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	685b      	ldr	r3, [r3, #4]
 8000e74:	f003 0203 	and.w	r2, r3, #3
 8000e78:	69fb      	ldr	r3, [r7, #28]
 8000e7a:	005b      	lsls	r3, r3, #1
 8000e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e80:	69ba      	ldr	r2, [r7, #24]
 8000e82:	4313      	orrs	r3, r2
 8000e84:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	69ba      	ldr	r2, [r7, #24]
 8000e8a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	685b      	ldr	r3, [r3, #4]
 8000e90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	f000 80ae 	beq.w	8000ff6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	60fb      	str	r3, [r7, #12]
 8000e9e:	4b5c      	ldr	r3, [pc, #368]	; (8001010 <HAL_GPIO_Init+0x2fc>)
 8000ea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ea2:	4a5b      	ldr	r2, [pc, #364]	; (8001010 <HAL_GPIO_Init+0x2fc>)
 8000ea4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ea8:	6453      	str	r3, [r2, #68]	; 0x44
 8000eaa:	4b59      	ldr	r3, [pc, #356]	; (8001010 <HAL_GPIO_Init+0x2fc>)
 8000eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000eb2:	60fb      	str	r3, [r7, #12]
 8000eb4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000eb6:	4a57      	ldr	r2, [pc, #348]	; (8001014 <HAL_GPIO_Init+0x300>)
 8000eb8:	69fb      	ldr	r3, [r7, #28]
 8000eba:	089b      	lsrs	r3, r3, #2
 8000ebc:	3302      	adds	r3, #2
 8000ebe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ec2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000ec4:	69fb      	ldr	r3, [r7, #28]
 8000ec6:	f003 0303 	and.w	r3, r3, #3
 8000eca:	009b      	lsls	r3, r3, #2
 8000ecc:	220f      	movs	r2, #15
 8000ece:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed2:	43db      	mvns	r3, r3
 8000ed4:	69ba      	ldr	r2, [r7, #24]
 8000ed6:	4013      	ands	r3, r2
 8000ed8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	4a4e      	ldr	r2, [pc, #312]	; (8001018 <HAL_GPIO_Init+0x304>)
 8000ede:	4293      	cmp	r3, r2
 8000ee0:	d025      	beq.n	8000f2e <HAL_GPIO_Init+0x21a>
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	4a4d      	ldr	r2, [pc, #308]	; (800101c <HAL_GPIO_Init+0x308>)
 8000ee6:	4293      	cmp	r3, r2
 8000ee8:	d01f      	beq.n	8000f2a <HAL_GPIO_Init+0x216>
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	4a4c      	ldr	r2, [pc, #304]	; (8001020 <HAL_GPIO_Init+0x30c>)
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	d019      	beq.n	8000f26 <HAL_GPIO_Init+0x212>
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	4a4b      	ldr	r2, [pc, #300]	; (8001024 <HAL_GPIO_Init+0x310>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d013      	beq.n	8000f22 <HAL_GPIO_Init+0x20e>
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	4a4a      	ldr	r2, [pc, #296]	; (8001028 <HAL_GPIO_Init+0x314>)
 8000efe:	4293      	cmp	r3, r2
 8000f00:	d00d      	beq.n	8000f1e <HAL_GPIO_Init+0x20a>
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	4a49      	ldr	r2, [pc, #292]	; (800102c <HAL_GPIO_Init+0x318>)
 8000f06:	4293      	cmp	r3, r2
 8000f08:	d007      	beq.n	8000f1a <HAL_GPIO_Init+0x206>
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	4a48      	ldr	r2, [pc, #288]	; (8001030 <HAL_GPIO_Init+0x31c>)
 8000f0e:	4293      	cmp	r3, r2
 8000f10:	d101      	bne.n	8000f16 <HAL_GPIO_Init+0x202>
 8000f12:	2306      	movs	r3, #6
 8000f14:	e00c      	b.n	8000f30 <HAL_GPIO_Init+0x21c>
 8000f16:	2307      	movs	r3, #7
 8000f18:	e00a      	b.n	8000f30 <HAL_GPIO_Init+0x21c>
 8000f1a:	2305      	movs	r3, #5
 8000f1c:	e008      	b.n	8000f30 <HAL_GPIO_Init+0x21c>
 8000f1e:	2304      	movs	r3, #4
 8000f20:	e006      	b.n	8000f30 <HAL_GPIO_Init+0x21c>
 8000f22:	2303      	movs	r3, #3
 8000f24:	e004      	b.n	8000f30 <HAL_GPIO_Init+0x21c>
 8000f26:	2302      	movs	r3, #2
 8000f28:	e002      	b.n	8000f30 <HAL_GPIO_Init+0x21c>
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	e000      	b.n	8000f30 <HAL_GPIO_Init+0x21c>
 8000f2e:	2300      	movs	r3, #0
 8000f30:	69fa      	ldr	r2, [r7, #28]
 8000f32:	f002 0203 	and.w	r2, r2, #3
 8000f36:	0092      	lsls	r2, r2, #2
 8000f38:	4093      	lsls	r3, r2
 8000f3a:	69ba      	ldr	r2, [r7, #24]
 8000f3c:	4313      	orrs	r3, r2
 8000f3e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f40:	4934      	ldr	r1, [pc, #208]	; (8001014 <HAL_GPIO_Init+0x300>)
 8000f42:	69fb      	ldr	r3, [r7, #28]
 8000f44:	089b      	lsrs	r3, r3, #2
 8000f46:	3302      	adds	r3, #2
 8000f48:	69ba      	ldr	r2, [r7, #24]
 8000f4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f4e:	4b39      	ldr	r3, [pc, #228]	; (8001034 <HAL_GPIO_Init+0x320>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f54:	693b      	ldr	r3, [r7, #16]
 8000f56:	43db      	mvns	r3, r3
 8000f58:	69ba      	ldr	r2, [r7, #24]
 8000f5a:	4013      	ands	r3, r2
 8000f5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	685b      	ldr	r3, [r3, #4]
 8000f62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d003      	beq.n	8000f72 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000f6a:	69ba      	ldr	r2, [r7, #24]
 8000f6c:	693b      	ldr	r3, [r7, #16]
 8000f6e:	4313      	orrs	r3, r2
 8000f70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f72:	4a30      	ldr	r2, [pc, #192]	; (8001034 <HAL_GPIO_Init+0x320>)
 8000f74:	69bb      	ldr	r3, [r7, #24]
 8000f76:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000f78:	4b2e      	ldr	r3, [pc, #184]	; (8001034 <HAL_GPIO_Init+0x320>)
 8000f7a:	685b      	ldr	r3, [r3, #4]
 8000f7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f7e:	693b      	ldr	r3, [r7, #16]
 8000f80:	43db      	mvns	r3, r3
 8000f82:	69ba      	ldr	r2, [r7, #24]
 8000f84:	4013      	ands	r3, r2
 8000f86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d003      	beq.n	8000f9c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8000f94:	69ba      	ldr	r2, [r7, #24]
 8000f96:	693b      	ldr	r3, [r7, #16]
 8000f98:	4313      	orrs	r3, r2
 8000f9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000f9c:	4a25      	ldr	r2, [pc, #148]	; (8001034 <HAL_GPIO_Init+0x320>)
 8000f9e:	69bb      	ldr	r3, [r7, #24]
 8000fa0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fa2:	4b24      	ldr	r3, [pc, #144]	; (8001034 <HAL_GPIO_Init+0x320>)
 8000fa4:	689b      	ldr	r3, [r3, #8]
 8000fa6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fa8:	693b      	ldr	r3, [r7, #16]
 8000faa:	43db      	mvns	r3, r3
 8000fac:	69ba      	ldr	r2, [r7, #24]
 8000fae:	4013      	ands	r3, r2
 8000fb0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d003      	beq.n	8000fc6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8000fbe:	69ba      	ldr	r2, [r7, #24]
 8000fc0:	693b      	ldr	r3, [r7, #16]
 8000fc2:	4313      	orrs	r3, r2
 8000fc4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000fc6:	4a1b      	ldr	r2, [pc, #108]	; (8001034 <HAL_GPIO_Init+0x320>)
 8000fc8:	69bb      	ldr	r3, [r7, #24]
 8000fca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000fcc:	4b19      	ldr	r3, [pc, #100]	; (8001034 <HAL_GPIO_Init+0x320>)
 8000fce:	68db      	ldr	r3, [r3, #12]
 8000fd0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fd2:	693b      	ldr	r3, [r7, #16]
 8000fd4:	43db      	mvns	r3, r3
 8000fd6:	69ba      	ldr	r2, [r7, #24]
 8000fd8:	4013      	ands	r3, r2
 8000fda:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d003      	beq.n	8000ff0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000fe8:	69ba      	ldr	r2, [r7, #24]
 8000fea:	693b      	ldr	r3, [r7, #16]
 8000fec:	4313      	orrs	r3, r2
 8000fee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000ff0:	4a10      	ldr	r2, [pc, #64]	; (8001034 <HAL_GPIO_Init+0x320>)
 8000ff2:	69bb      	ldr	r3, [r7, #24]
 8000ff4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ff6:	69fb      	ldr	r3, [r7, #28]
 8000ff8:	3301      	adds	r3, #1
 8000ffa:	61fb      	str	r3, [r7, #28]
 8000ffc:	69fb      	ldr	r3, [r7, #28]
 8000ffe:	2b0f      	cmp	r3, #15
 8001000:	f67f ae96 	bls.w	8000d30 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001004:	bf00      	nop
 8001006:	3724      	adds	r7, #36	; 0x24
 8001008:	46bd      	mov	sp, r7
 800100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100e:	4770      	bx	lr
 8001010:	40023800 	.word	0x40023800
 8001014:	40013800 	.word	0x40013800
 8001018:	40020000 	.word	0x40020000
 800101c:	40020400 	.word	0x40020400
 8001020:	40020800 	.word	0x40020800
 8001024:	40020c00 	.word	0x40020c00
 8001028:	40021000 	.word	0x40021000
 800102c:	40021400 	.word	0x40021400
 8001030:	40021800 	.word	0x40021800
 8001034:	40013c00 	.word	0x40013c00

08001038 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001038:	b480      	push	{r7}
 800103a:	b083      	sub	sp, #12
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
 8001040:	460b      	mov	r3, r1
 8001042:	807b      	strh	r3, [r7, #2]
 8001044:	4613      	mov	r3, r2
 8001046:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001048:	787b      	ldrb	r3, [r7, #1]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d003      	beq.n	8001056 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800104e:	887a      	ldrh	r2, [r7, #2]
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001054:	e003      	b.n	800105e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001056:	887b      	ldrh	r3, [r7, #2]
 8001058:	041a      	lsls	r2, r3, #16
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	619a      	str	r2, [r3, #24]
}
 800105e:	bf00      	nop
 8001060:	370c      	adds	r7, #12
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr

0800106a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800106a:	b480      	push	{r7}
 800106c:	b083      	sub	sp, #12
 800106e:	af00      	add	r7, sp, #0
 8001070:	6078      	str	r0, [r7, #4]
 8001072:	460b      	mov	r3, r1
 8001074:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	695a      	ldr	r2, [r3, #20]
 800107a:	887b      	ldrh	r3, [r7, #2]
 800107c:	401a      	ands	r2, r3
 800107e:	887b      	ldrh	r3, [r7, #2]
 8001080:	429a      	cmp	r2, r3
 8001082:	d104      	bne.n	800108e <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001084:	887b      	ldrh	r3, [r7, #2]
 8001086:	041a      	lsls	r2, r3, #16
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 800108c:	e002      	b.n	8001094 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800108e:	887a      	ldrh	r2, [r7, #2]
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	619a      	str	r2, [r3, #24]
}
 8001094:	bf00      	nop
 8001096:	370c      	adds	r7, #12
 8001098:	46bd      	mov	sp, r7
 800109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109e:	4770      	bx	lr

080010a0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80010a6:	2300      	movs	r3, #0
 80010a8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80010aa:	2300      	movs	r3, #0
 80010ac:	603b      	str	r3, [r7, #0]
 80010ae:	4b20      	ldr	r3, [pc, #128]	; (8001130 <HAL_PWREx_EnableOverDrive+0x90>)
 80010b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b2:	4a1f      	ldr	r2, [pc, #124]	; (8001130 <HAL_PWREx_EnableOverDrive+0x90>)
 80010b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010b8:	6413      	str	r3, [r2, #64]	; 0x40
 80010ba:	4b1d      	ldr	r3, [pc, #116]	; (8001130 <HAL_PWREx_EnableOverDrive+0x90>)
 80010bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010c2:	603b      	str	r3, [r7, #0]
 80010c4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80010c6:	4b1b      	ldr	r3, [pc, #108]	; (8001134 <HAL_PWREx_EnableOverDrive+0x94>)
 80010c8:	2201      	movs	r2, #1
 80010ca:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80010cc:	f7ff fd0e 	bl	8000aec <HAL_GetTick>
 80010d0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80010d2:	e009      	b.n	80010e8 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80010d4:	f7ff fd0a 	bl	8000aec <HAL_GetTick>
 80010d8:	4602      	mov	r2, r0
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	1ad3      	subs	r3, r2, r3
 80010de:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80010e2:	d901      	bls.n	80010e8 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80010e4:	2303      	movs	r3, #3
 80010e6:	e01f      	b.n	8001128 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80010e8:	4b13      	ldr	r3, [pc, #76]	; (8001138 <HAL_PWREx_EnableOverDrive+0x98>)
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010f4:	d1ee      	bne.n	80010d4 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80010f6:	4b11      	ldr	r3, [pc, #68]	; (800113c <HAL_PWREx_EnableOverDrive+0x9c>)
 80010f8:	2201      	movs	r2, #1
 80010fa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80010fc:	f7ff fcf6 	bl	8000aec <HAL_GetTick>
 8001100:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001102:	e009      	b.n	8001118 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001104:	f7ff fcf2 	bl	8000aec <HAL_GetTick>
 8001108:	4602      	mov	r2, r0
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	1ad3      	subs	r3, r2, r3
 800110e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001112:	d901      	bls.n	8001118 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001114:	2303      	movs	r3, #3
 8001116:	e007      	b.n	8001128 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001118:	4b07      	ldr	r3, [pc, #28]	; (8001138 <HAL_PWREx_EnableOverDrive+0x98>)
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001120:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001124:	d1ee      	bne.n	8001104 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8001126:	2300      	movs	r3, #0
}
 8001128:	4618      	mov	r0, r3
 800112a:	3708      	adds	r7, #8
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}
 8001130:	40023800 	.word	0x40023800
 8001134:	420e0040 	.word	0x420e0040
 8001138:	40007000 	.word	0x40007000
 800113c:	420e0044 	.word	0x420e0044

08001140 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b084      	sub	sp, #16
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
 8001148:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d101      	bne.n	8001154 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001150:	2301      	movs	r3, #1
 8001152:	e0cc      	b.n	80012ee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001154:	4b68      	ldr	r3, [pc, #416]	; (80012f8 <HAL_RCC_ClockConfig+0x1b8>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f003 030f 	and.w	r3, r3, #15
 800115c:	683a      	ldr	r2, [r7, #0]
 800115e:	429a      	cmp	r2, r3
 8001160:	d90c      	bls.n	800117c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001162:	4b65      	ldr	r3, [pc, #404]	; (80012f8 <HAL_RCC_ClockConfig+0x1b8>)
 8001164:	683a      	ldr	r2, [r7, #0]
 8001166:	b2d2      	uxtb	r2, r2
 8001168:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800116a:	4b63      	ldr	r3, [pc, #396]	; (80012f8 <HAL_RCC_ClockConfig+0x1b8>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f003 030f 	and.w	r3, r3, #15
 8001172:	683a      	ldr	r2, [r7, #0]
 8001174:	429a      	cmp	r2, r3
 8001176:	d001      	beq.n	800117c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001178:	2301      	movs	r3, #1
 800117a:	e0b8      	b.n	80012ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f003 0302 	and.w	r3, r3, #2
 8001184:	2b00      	cmp	r3, #0
 8001186:	d020      	beq.n	80011ca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f003 0304 	and.w	r3, r3, #4
 8001190:	2b00      	cmp	r3, #0
 8001192:	d005      	beq.n	80011a0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001194:	4b59      	ldr	r3, [pc, #356]	; (80012fc <HAL_RCC_ClockConfig+0x1bc>)
 8001196:	689b      	ldr	r3, [r3, #8]
 8001198:	4a58      	ldr	r2, [pc, #352]	; (80012fc <HAL_RCC_ClockConfig+0x1bc>)
 800119a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800119e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f003 0308 	and.w	r3, r3, #8
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d005      	beq.n	80011b8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80011ac:	4b53      	ldr	r3, [pc, #332]	; (80012fc <HAL_RCC_ClockConfig+0x1bc>)
 80011ae:	689b      	ldr	r3, [r3, #8]
 80011b0:	4a52      	ldr	r2, [pc, #328]	; (80012fc <HAL_RCC_ClockConfig+0x1bc>)
 80011b2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80011b6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80011b8:	4b50      	ldr	r3, [pc, #320]	; (80012fc <HAL_RCC_ClockConfig+0x1bc>)
 80011ba:	689b      	ldr	r3, [r3, #8]
 80011bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	689b      	ldr	r3, [r3, #8]
 80011c4:	494d      	ldr	r1, [pc, #308]	; (80012fc <HAL_RCC_ClockConfig+0x1bc>)
 80011c6:	4313      	orrs	r3, r2
 80011c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f003 0301 	and.w	r3, r3, #1
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d044      	beq.n	8001260 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	2b01      	cmp	r3, #1
 80011dc:	d107      	bne.n	80011ee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011de:	4b47      	ldr	r3, [pc, #284]	; (80012fc <HAL_RCC_ClockConfig+0x1bc>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d119      	bne.n	800121e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011ea:	2301      	movs	r3, #1
 80011ec:	e07f      	b.n	80012ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	2b02      	cmp	r3, #2
 80011f4:	d003      	beq.n	80011fe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80011fa:	2b03      	cmp	r3, #3
 80011fc:	d107      	bne.n	800120e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80011fe:	4b3f      	ldr	r3, [pc, #252]	; (80012fc <HAL_RCC_ClockConfig+0x1bc>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001206:	2b00      	cmp	r3, #0
 8001208:	d109      	bne.n	800121e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800120a:	2301      	movs	r3, #1
 800120c:	e06f      	b.n	80012ee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800120e:	4b3b      	ldr	r3, [pc, #236]	; (80012fc <HAL_RCC_ClockConfig+0x1bc>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f003 0302 	and.w	r3, r3, #2
 8001216:	2b00      	cmp	r3, #0
 8001218:	d101      	bne.n	800121e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800121a:	2301      	movs	r3, #1
 800121c:	e067      	b.n	80012ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800121e:	4b37      	ldr	r3, [pc, #220]	; (80012fc <HAL_RCC_ClockConfig+0x1bc>)
 8001220:	689b      	ldr	r3, [r3, #8]
 8001222:	f023 0203 	bic.w	r2, r3, #3
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	4934      	ldr	r1, [pc, #208]	; (80012fc <HAL_RCC_ClockConfig+0x1bc>)
 800122c:	4313      	orrs	r3, r2
 800122e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001230:	f7ff fc5c 	bl	8000aec <HAL_GetTick>
 8001234:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001236:	e00a      	b.n	800124e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001238:	f7ff fc58 	bl	8000aec <HAL_GetTick>
 800123c:	4602      	mov	r2, r0
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	1ad3      	subs	r3, r2, r3
 8001242:	f241 3288 	movw	r2, #5000	; 0x1388
 8001246:	4293      	cmp	r3, r2
 8001248:	d901      	bls.n	800124e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800124a:	2303      	movs	r3, #3
 800124c:	e04f      	b.n	80012ee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800124e:	4b2b      	ldr	r3, [pc, #172]	; (80012fc <HAL_RCC_ClockConfig+0x1bc>)
 8001250:	689b      	ldr	r3, [r3, #8]
 8001252:	f003 020c 	and.w	r2, r3, #12
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	685b      	ldr	r3, [r3, #4]
 800125a:	009b      	lsls	r3, r3, #2
 800125c:	429a      	cmp	r2, r3
 800125e:	d1eb      	bne.n	8001238 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001260:	4b25      	ldr	r3, [pc, #148]	; (80012f8 <HAL_RCC_ClockConfig+0x1b8>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f003 030f 	and.w	r3, r3, #15
 8001268:	683a      	ldr	r2, [r7, #0]
 800126a:	429a      	cmp	r2, r3
 800126c:	d20c      	bcs.n	8001288 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800126e:	4b22      	ldr	r3, [pc, #136]	; (80012f8 <HAL_RCC_ClockConfig+0x1b8>)
 8001270:	683a      	ldr	r2, [r7, #0]
 8001272:	b2d2      	uxtb	r2, r2
 8001274:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001276:	4b20      	ldr	r3, [pc, #128]	; (80012f8 <HAL_RCC_ClockConfig+0x1b8>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f003 030f 	and.w	r3, r3, #15
 800127e:	683a      	ldr	r2, [r7, #0]
 8001280:	429a      	cmp	r2, r3
 8001282:	d001      	beq.n	8001288 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001284:	2301      	movs	r3, #1
 8001286:	e032      	b.n	80012ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f003 0304 	and.w	r3, r3, #4
 8001290:	2b00      	cmp	r3, #0
 8001292:	d008      	beq.n	80012a6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001294:	4b19      	ldr	r3, [pc, #100]	; (80012fc <HAL_RCC_ClockConfig+0x1bc>)
 8001296:	689b      	ldr	r3, [r3, #8]
 8001298:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	68db      	ldr	r3, [r3, #12]
 80012a0:	4916      	ldr	r1, [pc, #88]	; (80012fc <HAL_RCC_ClockConfig+0x1bc>)
 80012a2:	4313      	orrs	r3, r2
 80012a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f003 0308 	and.w	r3, r3, #8
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d009      	beq.n	80012c6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80012b2:	4b12      	ldr	r3, [pc, #72]	; (80012fc <HAL_RCC_ClockConfig+0x1bc>)
 80012b4:	689b      	ldr	r3, [r3, #8]
 80012b6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	691b      	ldr	r3, [r3, #16]
 80012be:	00db      	lsls	r3, r3, #3
 80012c0:	490e      	ldr	r1, [pc, #56]	; (80012fc <HAL_RCC_ClockConfig+0x1bc>)
 80012c2:	4313      	orrs	r3, r2
 80012c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80012c6:	f000 f821 	bl	800130c <HAL_RCC_GetSysClockFreq>
 80012ca:	4601      	mov	r1, r0
 80012cc:	4b0b      	ldr	r3, [pc, #44]	; (80012fc <HAL_RCC_ClockConfig+0x1bc>)
 80012ce:	689b      	ldr	r3, [r3, #8]
 80012d0:	091b      	lsrs	r3, r3, #4
 80012d2:	f003 030f 	and.w	r3, r3, #15
 80012d6:	4a0a      	ldr	r2, [pc, #40]	; (8001300 <HAL_RCC_ClockConfig+0x1c0>)
 80012d8:	5cd3      	ldrb	r3, [r2, r3]
 80012da:	fa21 f303 	lsr.w	r3, r1, r3
 80012de:	4a09      	ldr	r2, [pc, #36]	; (8001304 <HAL_RCC_ClockConfig+0x1c4>)
 80012e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80012e2:	4b09      	ldr	r3, [pc, #36]	; (8001308 <HAL_RCC_ClockConfig+0x1c8>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4618      	mov	r0, r3
 80012e8:	f7ff fbbc 	bl	8000a64 <HAL_InitTick>

  return HAL_OK;
 80012ec:	2300      	movs	r3, #0
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	3710      	adds	r7, #16
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	40023c00 	.word	0x40023c00
 80012fc:	40023800 	.word	0x40023800
 8001300:	0800295c 	.word	0x0800295c
 8001304:	20000000 	.word	0x20000000
 8001308:	20000004 	.word	0x20000004

0800130c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800130c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800130e:	b087      	sub	sp, #28
 8001310:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001312:	2300      	movs	r3, #0
 8001314:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 8001316:	2300      	movs	r3, #0
 8001318:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 800131a:	2300      	movs	r3, #0
 800131c:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 800131e:	2300      	movs	r3, #0
 8001320:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001322:	2300      	movs	r3, #0
 8001324:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001326:	4bc6      	ldr	r3, [pc, #792]	; (8001640 <HAL_RCC_GetSysClockFreq+0x334>)
 8001328:	689b      	ldr	r3, [r3, #8]
 800132a:	f003 030c 	and.w	r3, r3, #12
 800132e:	2b0c      	cmp	r3, #12
 8001330:	f200 817e 	bhi.w	8001630 <HAL_RCC_GetSysClockFreq+0x324>
 8001334:	a201      	add	r2, pc, #4	; (adr r2, 800133c <HAL_RCC_GetSysClockFreq+0x30>)
 8001336:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800133a:	bf00      	nop
 800133c:	08001371 	.word	0x08001371
 8001340:	08001631 	.word	0x08001631
 8001344:	08001631 	.word	0x08001631
 8001348:	08001631 	.word	0x08001631
 800134c:	08001377 	.word	0x08001377
 8001350:	08001631 	.word	0x08001631
 8001354:	08001631 	.word	0x08001631
 8001358:	08001631 	.word	0x08001631
 800135c:	0800137d 	.word	0x0800137d
 8001360:	08001631 	.word	0x08001631
 8001364:	08001631 	.word	0x08001631
 8001368:	08001631 	.word	0x08001631
 800136c:	080014d9 	.word	0x080014d9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001370:	4bb4      	ldr	r3, [pc, #720]	; (8001644 <HAL_RCC_GetSysClockFreq+0x338>)
 8001372:	613b      	str	r3, [r7, #16]
       break;
 8001374:	e15f      	b.n	8001636 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001376:	4bb4      	ldr	r3, [pc, #720]	; (8001648 <HAL_RCC_GetSysClockFreq+0x33c>)
 8001378:	613b      	str	r3, [r7, #16]
      break;
 800137a:	e15c      	b.n	8001636 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800137c:	4bb0      	ldr	r3, [pc, #704]	; (8001640 <HAL_RCC_GetSysClockFreq+0x334>)
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001384:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001386:	4bae      	ldr	r3, [pc, #696]	; (8001640 <HAL_RCC_GetSysClockFreq+0x334>)
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800138e:	2b00      	cmp	r3, #0
 8001390:	d04a      	beq.n	8001428 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001392:	4bab      	ldr	r3, [pc, #684]	; (8001640 <HAL_RCC_GetSysClockFreq+0x334>)
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	099b      	lsrs	r3, r3, #6
 8001398:	f04f 0400 	mov.w	r4, #0
 800139c:	f240 11ff 	movw	r1, #511	; 0x1ff
 80013a0:	f04f 0200 	mov.w	r2, #0
 80013a4:	ea03 0501 	and.w	r5, r3, r1
 80013a8:	ea04 0602 	and.w	r6, r4, r2
 80013ac:	4629      	mov	r1, r5
 80013ae:	4632      	mov	r2, r6
 80013b0:	f04f 0300 	mov.w	r3, #0
 80013b4:	f04f 0400 	mov.w	r4, #0
 80013b8:	0154      	lsls	r4, r2, #5
 80013ba:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80013be:	014b      	lsls	r3, r1, #5
 80013c0:	4619      	mov	r1, r3
 80013c2:	4622      	mov	r2, r4
 80013c4:	1b49      	subs	r1, r1, r5
 80013c6:	eb62 0206 	sbc.w	r2, r2, r6
 80013ca:	f04f 0300 	mov.w	r3, #0
 80013ce:	f04f 0400 	mov.w	r4, #0
 80013d2:	0194      	lsls	r4, r2, #6
 80013d4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80013d8:	018b      	lsls	r3, r1, #6
 80013da:	1a5b      	subs	r3, r3, r1
 80013dc:	eb64 0402 	sbc.w	r4, r4, r2
 80013e0:	f04f 0100 	mov.w	r1, #0
 80013e4:	f04f 0200 	mov.w	r2, #0
 80013e8:	00e2      	lsls	r2, r4, #3
 80013ea:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80013ee:	00d9      	lsls	r1, r3, #3
 80013f0:	460b      	mov	r3, r1
 80013f2:	4614      	mov	r4, r2
 80013f4:	195b      	adds	r3, r3, r5
 80013f6:	eb44 0406 	adc.w	r4, r4, r6
 80013fa:	f04f 0100 	mov.w	r1, #0
 80013fe:	f04f 0200 	mov.w	r2, #0
 8001402:	0262      	lsls	r2, r4, #9
 8001404:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001408:	0259      	lsls	r1, r3, #9
 800140a:	460b      	mov	r3, r1
 800140c:	4614      	mov	r4, r2
 800140e:	4618      	mov	r0, r3
 8001410:	4621      	mov	r1, r4
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	f04f 0400 	mov.w	r4, #0
 8001418:	461a      	mov	r2, r3
 800141a:	4623      	mov	r3, r4
 800141c:	f7fe ff48 	bl	80002b0 <__aeabi_uldivmod>
 8001420:	4603      	mov	r3, r0
 8001422:	460c      	mov	r4, r1
 8001424:	617b      	str	r3, [r7, #20]
 8001426:	e049      	b.n	80014bc <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001428:	4b85      	ldr	r3, [pc, #532]	; (8001640 <HAL_RCC_GetSysClockFreq+0x334>)
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	099b      	lsrs	r3, r3, #6
 800142e:	f04f 0400 	mov.w	r4, #0
 8001432:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001436:	f04f 0200 	mov.w	r2, #0
 800143a:	ea03 0501 	and.w	r5, r3, r1
 800143e:	ea04 0602 	and.w	r6, r4, r2
 8001442:	4629      	mov	r1, r5
 8001444:	4632      	mov	r2, r6
 8001446:	f04f 0300 	mov.w	r3, #0
 800144a:	f04f 0400 	mov.w	r4, #0
 800144e:	0154      	lsls	r4, r2, #5
 8001450:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001454:	014b      	lsls	r3, r1, #5
 8001456:	4619      	mov	r1, r3
 8001458:	4622      	mov	r2, r4
 800145a:	1b49      	subs	r1, r1, r5
 800145c:	eb62 0206 	sbc.w	r2, r2, r6
 8001460:	f04f 0300 	mov.w	r3, #0
 8001464:	f04f 0400 	mov.w	r4, #0
 8001468:	0194      	lsls	r4, r2, #6
 800146a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800146e:	018b      	lsls	r3, r1, #6
 8001470:	1a5b      	subs	r3, r3, r1
 8001472:	eb64 0402 	sbc.w	r4, r4, r2
 8001476:	f04f 0100 	mov.w	r1, #0
 800147a:	f04f 0200 	mov.w	r2, #0
 800147e:	00e2      	lsls	r2, r4, #3
 8001480:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001484:	00d9      	lsls	r1, r3, #3
 8001486:	460b      	mov	r3, r1
 8001488:	4614      	mov	r4, r2
 800148a:	195b      	adds	r3, r3, r5
 800148c:	eb44 0406 	adc.w	r4, r4, r6
 8001490:	f04f 0100 	mov.w	r1, #0
 8001494:	f04f 0200 	mov.w	r2, #0
 8001498:	02a2      	lsls	r2, r4, #10
 800149a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800149e:	0299      	lsls	r1, r3, #10
 80014a0:	460b      	mov	r3, r1
 80014a2:	4614      	mov	r4, r2
 80014a4:	4618      	mov	r0, r3
 80014a6:	4621      	mov	r1, r4
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	f04f 0400 	mov.w	r4, #0
 80014ae:	461a      	mov	r2, r3
 80014b0:	4623      	mov	r3, r4
 80014b2:	f7fe fefd 	bl	80002b0 <__aeabi_uldivmod>
 80014b6:	4603      	mov	r3, r0
 80014b8:	460c      	mov	r4, r1
 80014ba:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80014bc:	4b60      	ldr	r3, [pc, #384]	; (8001640 <HAL_RCC_GetSysClockFreq+0x334>)
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	0c1b      	lsrs	r3, r3, #16
 80014c2:	f003 0303 	and.w	r3, r3, #3
 80014c6:	3301      	adds	r3, #1
 80014c8:	005b      	lsls	r3, r3, #1
 80014ca:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 80014cc:	697a      	ldr	r2, [r7, #20]
 80014ce:	68bb      	ldr	r3, [r7, #8]
 80014d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80014d4:	613b      	str	r3, [r7, #16]
      break;
 80014d6:	e0ae      	b.n	8001636 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80014d8:	4b59      	ldr	r3, [pc, #356]	; (8001640 <HAL_RCC_GetSysClockFreq+0x334>)
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80014e0:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80014e2:	4b57      	ldr	r3, [pc, #348]	; (8001640 <HAL_RCC_GetSysClockFreq+0x334>)
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d04a      	beq.n	8001584 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80014ee:	4b54      	ldr	r3, [pc, #336]	; (8001640 <HAL_RCC_GetSysClockFreq+0x334>)
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	099b      	lsrs	r3, r3, #6
 80014f4:	f04f 0400 	mov.w	r4, #0
 80014f8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80014fc:	f04f 0200 	mov.w	r2, #0
 8001500:	ea03 0501 	and.w	r5, r3, r1
 8001504:	ea04 0602 	and.w	r6, r4, r2
 8001508:	4629      	mov	r1, r5
 800150a:	4632      	mov	r2, r6
 800150c:	f04f 0300 	mov.w	r3, #0
 8001510:	f04f 0400 	mov.w	r4, #0
 8001514:	0154      	lsls	r4, r2, #5
 8001516:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800151a:	014b      	lsls	r3, r1, #5
 800151c:	4619      	mov	r1, r3
 800151e:	4622      	mov	r2, r4
 8001520:	1b49      	subs	r1, r1, r5
 8001522:	eb62 0206 	sbc.w	r2, r2, r6
 8001526:	f04f 0300 	mov.w	r3, #0
 800152a:	f04f 0400 	mov.w	r4, #0
 800152e:	0194      	lsls	r4, r2, #6
 8001530:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001534:	018b      	lsls	r3, r1, #6
 8001536:	1a5b      	subs	r3, r3, r1
 8001538:	eb64 0402 	sbc.w	r4, r4, r2
 800153c:	f04f 0100 	mov.w	r1, #0
 8001540:	f04f 0200 	mov.w	r2, #0
 8001544:	00e2      	lsls	r2, r4, #3
 8001546:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800154a:	00d9      	lsls	r1, r3, #3
 800154c:	460b      	mov	r3, r1
 800154e:	4614      	mov	r4, r2
 8001550:	195b      	adds	r3, r3, r5
 8001552:	eb44 0406 	adc.w	r4, r4, r6
 8001556:	f04f 0100 	mov.w	r1, #0
 800155a:	f04f 0200 	mov.w	r2, #0
 800155e:	0262      	lsls	r2, r4, #9
 8001560:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001564:	0259      	lsls	r1, r3, #9
 8001566:	460b      	mov	r3, r1
 8001568:	4614      	mov	r4, r2
 800156a:	4618      	mov	r0, r3
 800156c:	4621      	mov	r1, r4
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	f04f 0400 	mov.w	r4, #0
 8001574:	461a      	mov	r2, r3
 8001576:	4623      	mov	r3, r4
 8001578:	f7fe fe9a 	bl	80002b0 <__aeabi_uldivmod>
 800157c:	4603      	mov	r3, r0
 800157e:	460c      	mov	r4, r1
 8001580:	617b      	str	r3, [r7, #20]
 8001582:	e049      	b.n	8001618 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001584:	4b2e      	ldr	r3, [pc, #184]	; (8001640 <HAL_RCC_GetSysClockFreq+0x334>)
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	099b      	lsrs	r3, r3, #6
 800158a:	f04f 0400 	mov.w	r4, #0
 800158e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001592:	f04f 0200 	mov.w	r2, #0
 8001596:	ea03 0501 	and.w	r5, r3, r1
 800159a:	ea04 0602 	and.w	r6, r4, r2
 800159e:	4629      	mov	r1, r5
 80015a0:	4632      	mov	r2, r6
 80015a2:	f04f 0300 	mov.w	r3, #0
 80015a6:	f04f 0400 	mov.w	r4, #0
 80015aa:	0154      	lsls	r4, r2, #5
 80015ac:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80015b0:	014b      	lsls	r3, r1, #5
 80015b2:	4619      	mov	r1, r3
 80015b4:	4622      	mov	r2, r4
 80015b6:	1b49      	subs	r1, r1, r5
 80015b8:	eb62 0206 	sbc.w	r2, r2, r6
 80015bc:	f04f 0300 	mov.w	r3, #0
 80015c0:	f04f 0400 	mov.w	r4, #0
 80015c4:	0194      	lsls	r4, r2, #6
 80015c6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80015ca:	018b      	lsls	r3, r1, #6
 80015cc:	1a5b      	subs	r3, r3, r1
 80015ce:	eb64 0402 	sbc.w	r4, r4, r2
 80015d2:	f04f 0100 	mov.w	r1, #0
 80015d6:	f04f 0200 	mov.w	r2, #0
 80015da:	00e2      	lsls	r2, r4, #3
 80015dc:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80015e0:	00d9      	lsls	r1, r3, #3
 80015e2:	460b      	mov	r3, r1
 80015e4:	4614      	mov	r4, r2
 80015e6:	195b      	adds	r3, r3, r5
 80015e8:	eb44 0406 	adc.w	r4, r4, r6
 80015ec:	f04f 0100 	mov.w	r1, #0
 80015f0:	f04f 0200 	mov.w	r2, #0
 80015f4:	02a2      	lsls	r2, r4, #10
 80015f6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80015fa:	0299      	lsls	r1, r3, #10
 80015fc:	460b      	mov	r3, r1
 80015fe:	4614      	mov	r4, r2
 8001600:	4618      	mov	r0, r3
 8001602:	4621      	mov	r1, r4
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	f04f 0400 	mov.w	r4, #0
 800160a:	461a      	mov	r2, r3
 800160c:	4623      	mov	r3, r4
 800160e:	f7fe fe4f 	bl	80002b0 <__aeabi_uldivmod>
 8001612:	4603      	mov	r3, r0
 8001614:	460c      	mov	r4, r1
 8001616:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001618:	4b09      	ldr	r3, [pc, #36]	; (8001640 <HAL_RCC_GetSysClockFreq+0x334>)
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	0f1b      	lsrs	r3, r3, #28
 800161e:	f003 0307 	and.w	r3, r3, #7
 8001622:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8001624:	697a      	ldr	r2, [r7, #20]
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	fbb2 f3f3 	udiv	r3, r2, r3
 800162c:	613b      	str	r3, [r7, #16]
      break;
 800162e:	e002      	b.n	8001636 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001630:	4b04      	ldr	r3, [pc, #16]	; (8001644 <HAL_RCC_GetSysClockFreq+0x338>)
 8001632:	613b      	str	r3, [r7, #16]
      break;
 8001634:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001636:	693b      	ldr	r3, [r7, #16]
}
 8001638:	4618      	mov	r0, r3
 800163a:	371c      	adds	r7, #28
 800163c:	46bd      	mov	sp, r7
 800163e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001640:	40023800 	.word	0x40023800
 8001644:	00f42400 	.word	0x00f42400
 8001648:	007a1200 	.word	0x007a1200

0800164c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b086      	sub	sp, #24
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001654:	2300      	movs	r3, #0
 8001656:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f003 0301 	and.w	r3, r3, #1
 8001660:	2b00      	cmp	r3, #0
 8001662:	f000 8083 	beq.w	800176c <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001666:	4b95      	ldr	r3, [pc, #596]	; (80018bc <HAL_RCC_OscConfig+0x270>)
 8001668:	689b      	ldr	r3, [r3, #8]
 800166a:	f003 030c 	and.w	r3, r3, #12
 800166e:	2b04      	cmp	r3, #4
 8001670:	d019      	beq.n	80016a6 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001672:	4b92      	ldr	r3, [pc, #584]	; (80018bc <HAL_RCC_OscConfig+0x270>)
 8001674:	689b      	ldr	r3, [r3, #8]
 8001676:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800167a:	2b08      	cmp	r3, #8
 800167c:	d106      	bne.n	800168c <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800167e:	4b8f      	ldr	r3, [pc, #572]	; (80018bc <HAL_RCC_OscConfig+0x270>)
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001686:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800168a:	d00c      	beq.n	80016a6 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800168c:	4b8b      	ldr	r3, [pc, #556]	; (80018bc <HAL_RCC_OscConfig+0x270>)
 800168e:	689b      	ldr	r3, [r3, #8]
 8001690:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001694:	2b0c      	cmp	r3, #12
 8001696:	d112      	bne.n	80016be <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001698:	4b88      	ldr	r3, [pc, #544]	; (80018bc <HAL_RCC_OscConfig+0x270>)
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80016a4:	d10b      	bne.n	80016be <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016a6:	4b85      	ldr	r3, [pc, #532]	; (80018bc <HAL_RCC_OscConfig+0x270>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d05b      	beq.n	800176a <HAL_RCC_OscConfig+0x11e>
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d157      	bne.n	800176a <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 80016ba:	2301      	movs	r3, #1
 80016bc:	e216      	b.n	8001aec <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016c6:	d106      	bne.n	80016d6 <HAL_RCC_OscConfig+0x8a>
 80016c8:	4b7c      	ldr	r3, [pc, #496]	; (80018bc <HAL_RCC_OscConfig+0x270>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a7b      	ldr	r2, [pc, #492]	; (80018bc <HAL_RCC_OscConfig+0x270>)
 80016ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016d2:	6013      	str	r3, [r2, #0]
 80016d4:	e01d      	b.n	8001712 <HAL_RCC_OscConfig+0xc6>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80016de:	d10c      	bne.n	80016fa <HAL_RCC_OscConfig+0xae>
 80016e0:	4b76      	ldr	r3, [pc, #472]	; (80018bc <HAL_RCC_OscConfig+0x270>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a75      	ldr	r2, [pc, #468]	; (80018bc <HAL_RCC_OscConfig+0x270>)
 80016e6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016ea:	6013      	str	r3, [r2, #0]
 80016ec:	4b73      	ldr	r3, [pc, #460]	; (80018bc <HAL_RCC_OscConfig+0x270>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a72      	ldr	r2, [pc, #456]	; (80018bc <HAL_RCC_OscConfig+0x270>)
 80016f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016f6:	6013      	str	r3, [r2, #0]
 80016f8:	e00b      	b.n	8001712 <HAL_RCC_OscConfig+0xc6>
 80016fa:	4b70      	ldr	r3, [pc, #448]	; (80018bc <HAL_RCC_OscConfig+0x270>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4a6f      	ldr	r2, [pc, #444]	; (80018bc <HAL_RCC_OscConfig+0x270>)
 8001700:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001704:	6013      	str	r3, [r2, #0]
 8001706:	4b6d      	ldr	r3, [pc, #436]	; (80018bc <HAL_RCC_OscConfig+0x270>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4a6c      	ldr	r2, [pc, #432]	; (80018bc <HAL_RCC_OscConfig+0x270>)
 800170c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001710:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d013      	beq.n	8001742 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800171a:	f7ff f9e7 	bl	8000aec <HAL_GetTick>
 800171e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001720:	e008      	b.n	8001734 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001722:	f7ff f9e3 	bl	8000aec <HAL_GetTick>
 8001726:	4602      	mov	r2, r0
 8001728:	693b      	ldr	r3, [r7, #16]
 800172a:	1ad3      	subs	r3, r2, r3
 800172c:	2b64      	cmp	r3, #100	; 0x64
 800172e:	d901      	bls.n	8001734 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001730:	2303      	movs	r3, #3
 8001732:	e1db      	b.n	8001aec <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001734:	4b61      	ldr	r3, [pc, #388]	; (80018bc <HAL_RCC_OscConfig+0x270>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800173c:	2b00      	cmp	r3, #0
 800173e:	d0f0      	beq.n	8001722 <HAL_RCC_OscConfig+0xd6>
 8001740:	e014      	b.n	800176c <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001742:	f7ff f9d3 	bl	8000aec <HAL_GetTick>
 8001746:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001748:	e008      	b.n	800175c <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800174a:	f7ff f9cf 	bl	8000aec <HAL_GetTick>
 800174e:	4602      	mov	r2, r0
 8001750:	693b      	ldr	r3, [r7, #16]
 8001752:	1ad3      	subs	r3, r2, r3
 8001754:	2b64      	cmp	r3, #100	; 0x64
 8001756:	d901      	bls.n	800175c <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8001758:	2303      	movs	r3, #3
 800175a:	e1c7      	b.n	8001aec <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800175c:	4b57      	ldr	r3, [pc, #348]	; (80018bc <HAL_RCC_OscConfig+0x270>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001764:	2b00      	cmp	r3, #0
 8001766:	d1f0      	bne.n	800174a <HAL_RCC_OscConfig+0xfe>
 8001768:	e000      	b.n	800176c <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800176a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f003 0302 	and.w	r3, r3, #2
 8001774:	2b00      	cmp	r3, #0
 8001776:	d06f      	beq.n	8001858 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001778:	4b50      	ldr	r3, [pc, #320]	; (80018bc <HAL_RCC_OscConfig+0x270>)
 800177a:	689b      	ldr	r3, [r3, #8]
 800177c:	f003 030c 	and.w	r3, r3, #12
 8001780:	2b00      	cmp	r3, #0
 8001782:	d017      	beq.n	80017b4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001784:	4b4d      	ldr	r3, [pc, #308]	; (80018bc <HAL_RCC_OscConfig+0x270>)
 8001786:	689b      	ldr	r3, [r3, #8]
 8001788:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800178c:	2b08      	cmp	r3, #8
 800178e:	d105      	bne.n	800179c <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001790:	4b4a      	ldr	r3, [pc, #296]	; (80018bc <HAL_RCC_OscConfig+0x270>)
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001798:	2b00      	cmp	r3, #0
 800179a:	d00b      	beq.n	80017b4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800179c:	4b47      	ldr	r3, [pc, #284]	; (80018bc <HAL_RCC_OscConfig+0x270>)
 800179e:	689b      	ldr	r3, [r3, #8]
 80017a0:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80017a4:	2b0c      	cmp	r3, #12
 80017a6:	d11c      	bne.n	80017e2 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80017a8:	4b44      	ldr	r3, [pc, #272]	; (80018bc <HAL_RCC_OscConfig+0x270>)
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d116      	bne.n	80017e2 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017b4:	4b41      	ldr	r3, [pc, #260]	; (80018bc <HAL_RCC_OscConfig+0x270>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f003 0302 	and.w	r3, r3, #2
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d005      	beq.n	80017cc <HAL_RCC_OscConfig+0x180>
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	68db      	ldr	r3, [r3, #12]
 80017c4:	2b01      	cmp	r3, #1
 80017c6:	d001      	beq.n	80017cc <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 80017c8:	2301      	movs	r3, #1
 80017ca:	e18f      	b.n	8001aec <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017cc:	4b3b      	ldr	r3, [pc, #236]	; (80018bc <HAL_RCC_OscConfig+0x270>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	691b      	ldr	r3, [r3, #16]
 80017d8:	00db      	lsls	r3, r3, #3
 80017da:	4938      	ldr	r1, [pc, #224]	; (80018bc <HAL_RCC_OscConfig+0x270>)
 80017dc:	4313      	orrs	r3, r2
 80017de:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017e0:	e03a      	b.n	8001858 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	68db      	ldr	r3, [r3, #12]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d020      	beq.n	800182c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017ea:	4b35      	ldr	r3, [pc, #212]	; (80018c0 <HAL_RCC_OscConfig+0x274>)
 80017ec:	2201      	movs	r2, #1
 80017ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017f0:	f7ff f97c 	bl	8000aec <HAL_GetTick>
 80017f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017f6:	e008      	b.n	800180a <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017f8:	f7ff f978 	bl	8000aec <HAL_GetTick>
 80017fc:	4602      	mov	r2, r0
 80017fe:	693b      	ldr	r3, [r7, #16]
 8001800:	1ad3      	subs	r3, r2, r3
 8001802:	2b02      	cmp	r3, #2
 8001804:	d901      	bls.n	800180a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001806:	2303      	movs	r3, #3
 8001808:	e170      	b.n	8001aec <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800180a:	4b2c      	ldr	r3, [pc, #176]	; (80018bc <HAL_RCC_OscConfig+0x270>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f003 0302 	and.w	r3, r3, #2
 8001812:	2b00      	cmp	r3, #0
 8001814:	d0f0      	beq.n	80017f8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001816:	4b29      	ldr	r3, [pc, #164]	; (80018bc <HAL_RCC_OscConfig+0x270>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	691b      	ldr	r3, [r3, #16]
 8001822:	00db      	lsls	r3, r3, #3
 8001824:	4925      	ldr	r1, [pc, #148]	; (80018bc <HAL_RCC_OscConfig+0x270>)
 8001826:	4313      	orrs	r3, r2
 8001828:	600b      	str	r3, [r1, #0]
 800182a:	e015      	b.n	8001858 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800182c:	4b24      	ldr	r3, [pc, #144]	; (80018c0 <HAL_RCC_OscConfig+0x274>)
 800182e:	2200      	movs	r2, #0
 8001830:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001832:	f7ff f95b 	bl	8000aec <HAL_GetTick>
 8001836:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001838:	e008      	b.n	800184c <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800183a:	f7ff f957 	bl	8000aec <HAL_GetTick>
 800183e:	4602      	mov	r2, r0
 8001840:	693b      	ldr	r3, [r7, #16]
 8001842:	1ad3      	subs	r3, r2, r3
 8001844:	2b02      	cmp	r3, #2
 8001846:	d901      	bls.n	800184c <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8001848:	2303      	movs	r3, #3
 800184a:	e14f      	b.n	8001aec <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800184c:	4b1b      	ldr	r3, [pc, #108]	; (80018bc <HAL_RCC_OscConfig+0x270>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f003 0302 	and.w	r3, r3, #2
 8001854:	2b00      	cmp	r3, #0
 8001856:	d1f0      	bne.n	800183a <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f003 0308 	and.w	r3, r3, #8
 8001860:	2b00      	cmp	r3, #0
 8001862:	d037      	beq.n	80018d4 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	695b      	ldr	r3, [r3, #20]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d016      	beq.n	800189a <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800186c:	4b15      	ldr	r3, [pc, #84]	; (80018c4 <HAL_RCC_OscConfig+0x278>)
 800186e:	2201      	movs	r2, #1
 8001870:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001872:	f7ff f93b 	bl	8000aec <HAL_GetTick>
 8001876:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001878:	e008      	b.n	800188c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800187a:	f7ff f937 	bl	8000aec <HAL_GetTick>
 800187e:	4602      	mov	r2, r0
 8001880:	693b      	ldr	r3, [r7, #16]
 8001882:	1ad3      	subs	r3, r2, r3
 8001884:	2b02      	cmp	r3, #2
 8001886:	d901      	bls.n	800188c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001888:	2303      	movs	r3, #3
 800188a:	e12f      	b.n	8001aec <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800188c:	4b0b      	ldr	r3, [pc, #44]	; (80018bc <HAL_RCC_OscConfig+0x270>)
 800188e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001890:	f003 0302 	and.w	r3, r3, #2
 8001894:	2b00      	cmp	r3, #0
 8001896:	d0f0      	beq.n	800187a <HAL_RCC_OscConfig+0x22e>
 8001898:	e01c      	b.n	80018d4 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800189a:	4b0a      	ldr	r3, [pc, #40]	; (80018c4 <HAL_RCC_OscConfig+0x278>)
 800189c:	2200      	movs	r2, #0
 800189e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018a0:	f7ff f924 	bl	8000aec <HAL_GetTick>
 80018a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018a6:	e00f      	b.n	80018c8 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018a8:	f7ff f920 	bl	8000aec <HAL_GetTick>
 80018ac:	4602      	mov	r2, r0
 80018ae:	693b      	ldr	r3, [r7, #16]
 80018b0:	1ad3      	subs	r3, r2, r3
 80018b2:	2b02      	cmp	r3, #2
 80018b4:	d908      	bls.n	80018c8 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 80018b6:	2303      	movs	r3, #3
 80018b8:	e118      	b.n	8001aec <HAL_RCC_OscConfig+0x4a0>
 80018ba:	bf00      	nop
 80018bc:	40023800 	.word	0x40023800
 80018c0:	42470000 	.word	0x42470000
 80018c4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018c8:	4b8a      	ldr	r3, [pc, #552]	; (8001af4 <HAL_RCC_OscConfig+0x4a8>)
 80018ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80018cc:	f003 0302 	and.w	r3, r3, #2
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d1e9      	bne.n	80018a8 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f003 0304 	and.w	r3, r3, #4
 80018dc:	2b00      	cmp	r3, #0
 80018de:	f000 8097 	beq.w	8001a10 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018e2:	2300      	movs	r3, #0
 80018e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018e6:	4b83      	ldr	r3, [pc, #524]	; (8001af4 <HAL_RCC_OscConfig+0x4a8>)
 80018e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d10f      	bne.n	8001912 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018f2:	2300      	movs	r3, #0
 80018f4:	60fb      	str	r3, [r7, #12]
 80018f6:	4b7f      	ldr	r3, [pc, #508]	; (8001af4 <HAL_RCC_OscConfig+0x4a8>)
 80018f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018fa:	4a7e      	ldr	r2, [pc, #504]	; (8001af4 <HAL_RCC_OscConfig+0x4a8>)
 80018fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001900:	6413      	str	r3, [r2, #64]	; 0x40
 8001902:	4b7c      	ldr	r3, [pc, #496]	; (8001af4 <HAL_RCC_OscConfig+0x4a8>)
 8001904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001906:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800190a:	60fb      	str	r3, [r7, #12]
 800190c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800190e:	2301      	movs	r3, #1
 8001910:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001912:	4b79      	ldr	r3, [pc, #484]	; (8001af8 <HAL_RCC_OscConfig+0x4ac>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800191a:	2b00      	cmp	r3, #0
 800191c:	d118      	bne.n	8001950 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800191e:	4b76      	ldr	r3, [pc, #472]	; (8001af8 <HAL_RCC_OscConfig+0x4ac>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4a75      	ldr	r2, [pc, #468]	; (8001af8 <HAL_RCC_OscConfig+0x4ac>)
 8001924:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001928:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800192a:	f7ff f8df 	bl	8000aec <HAL_GetTick>
 800192e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001930:	e008      	b.n	8001944 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001932:	f7ff f8db 	bl	8000aec <HAL_GetTick>
 8001936:	4602      	mov	r2, r0
 8001938:	693b      	ldr	r3, [r7, #16]
 800193a:	1ad3      	subs	r3, r2, r3
 800193c:	2b02      	cmp	r3, #2
 800193e:	d901      	bls.n	8001944 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001940:	2303      	movs	r3, #3
 8001942:	e0d3      	b.n	8001aec <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001944:	4b6c      	ldr	r3, [pc, #432]	; (8001af8 <HAL_RCC_OscConfig+0x4ac>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800194c:	2b00      	cmp	r3, #0
 800194e:	d0f0      	beq.n	8001932 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	689b      	ldr	r3, [r3, #8]
 8001954:	2b01      	cmp	r3, #1
 8001956:	d106      	bne.n	8001966 <HAL_RCC_OscConfig+0x31a>
 8001958:	4b66      	ldr	r3, [pc, #408]	; (8001af4 <HAL_RCC_OscConfig+0x4a8>)
 800195a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800195c:	4a65      	ldr	r2, [pc, #404]	; (8001af4 <HAL_RCC_OscConfig+0x4a8>)
 800195e:	f043 0301 	orr.w	r3, r3, #1
 8001962:	6713      	str	r3, [r2, #112]	; 0x70
 8001964:	e01c      	b.n	80019a0 <HAL_RCC_OscConfig+0x354>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	689b      	ldr	r3, [r3, #8]
 800196a:	2b05      	cmp	r3, #5
 800196c:	d10c      	bne.n	8001988 <HAL_RCC_OscConfig+0x33c>
 800196e:	4b61      	ldr	r3, [pc, #388]	; (8001af4 <HAL_RCC_OscConfig+0x4a8>)
 8001970:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001972:	4a60      	ldr	r2, [pc, #384]	; (8001af4 <HAL_RCC_OscConfig+0x4a8>)
 8001974:	f043 0304 	orr.w	r3, r3, #4
 8001978:	6713      	str	r3, [r2, #112]	; 0x70
 800197a:	4b5e      	ldr	r3, [pc, #376]	; (8001af4 <HAL_RCC_OscConfig+0x4a8>)
 800197c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800197e:	4a5d      	ldr	r2, [pc, #372]	; (8001af4 <HAL_RCC_OscConfig+0x4a8>)
 8001980:	f043 0301 	orr.w	r3, r3, #1
 8001984:	6713      	str	r3, [r2, #112]	; 0x70
 8001986:	e00b      	b.n	80019a0 <HAL_RCC_OscConfig+0x354>
 8001988:	4b5a      	ldr	r3, [pc, #360]	; (8001af4 <HAL_RCC_OscConfig+0x4a8>)
 800198a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800198c:	4a59      	ldr	r2, [pc, #356]	; (8001af4 <HAL_RCC_OscConfig+0x4a8>)
 800198e:	f023 0301 	bic.w	r3, r3, #1
 8001992:	6713      	str	r3, [r2, #112]	; 0x70
 8001994:	4b57      	ldr	r3, [pc, #348]	; (8001af4 <HAL_RCC_OscConfig+0x4a8>)
 8001996:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001998:	4a56      	ldr	r2, [pc, #344]	; (8001af4 <HAL_RCC_OscConfig+0x4a8>)
 800199a:	f023 0304 	bic.w	r3, r3, #4
 800199e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d015      	beq.n	80019d4 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019a8:	f7ff f8a0 	bl	8000aec <HAL_GetTick>
 80019ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019ae:	e00a      	b.n	80019c6 <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019b0:	f7ff f89c 	bl	8000aec <HAL_GetTick>
 80019b4:	4602      	mov	r2, r0
 80019b6:	693b      	ldr	r3, [r7, #16]
 80019b8:	1ad3      	subs	r3, r2, r3
 80019ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80019be:	4293      	cmp	r3, r2
 80019c0:	d901      	bls.n	80019c6 <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 80019c2:	2303      	movs	r3, #3
 80019c4:	e092      	b.n	8001aec <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019c6:	4b4b      	ldr	r3, [pc, #300]	; (8001af4 <HAL_RCC_OscConfig+0x4a8>)
 80019c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019ca:	f003 0302 	and.w	r3, r3, #2
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d0ee      	beq.n	80019b0 <HAL_RCC_OscConfig+0x364>
 80019d2:	e014      	b.n	80019fe <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019d4:	f7ff f88a 	bl	8000aec <HAL_GetTick>
 80019d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019da:	e00a      	b.n	80019f2 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019dc:	f7ff f886 	bl	8000aec <HAL_GetTick>
 80019e0:	4602      	mov	r2, r0
 80019e2:	693b      	ldr	r3, [r7, #16]
 80019e4:	1ad3      	subs	r3, r2, r3
 80019e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d901      	bls.n	80019f2 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 80019ee:	2303      	movs	r3, #3
 80019f0:	e07c      	b.n	8001aec <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019f2:	4b40      	ldr	r3, [pc, #256]	; (8001af4 <HAL_RCC_OscConfig+0x4a8>)
 80019f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019f6:	f003 0302 	and.w	r3, r3, #2
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d1ee      	bne.n	80019dc <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80019fe:	7dfb      	ldrb	r3, [r7, #23]
 8001a00:	2b01      	cmp	r3, #1
 8001a02:	d105      	bne.n	8001a10 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a04:	4b3b      	ldr	r3, [pc, #236]	; (8001af4 <HAL_RCC_OscConfig+0x4a8>)
 8001a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a08:	4a3a      	ldr	r2, [pc, #232]	; (8001af4 <HAL_RCC_OscConfig+0x4a8>)
 8001a0a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a0e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	699b      	ldr	r3, [r3, #24]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d068      	beq.n	8001aea <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001a18:	4b36      	ldr	r3, [pc, #216]	; (8001af4 <HAL_RCC_OscConfig+0x4a8>)
 8001a1a:	689b      	ldr	r3, [r3, #8]
 8001a1c:	f003 030c 	and.w	r3, r3, #12
 8001a20:	2b08      	cmp	r3, #8
 8001a22:	d060      	beq.n	8001ae6 <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	699b      	ldr	r3, [r3, #24]
 8001a28:	2b02      	cmp	r3, #2
 8001a2a:	d145      	bne.n	8001ab8 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a2c:	4b33      	ldr	r3, [pc, #204]	; (8001afc <HAL_RCC_OscConfig+0x4b0>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a32:	f7ff f85b 	bl	8000aec <HAL_GetTick>
 8001a36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a38:	e008      	b.n	8001a4c <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a3a:	f7ff f857 	bl	8000aec <HAL_GetTick>
 8001a3e:	4602      	mov	r2, r0
 8001a40:	693b      	ldr	r3, [r7, #16]
 8001a42:	1ad3      	subs	r3, r2, r3
 8001a44:	2b02      	cmp	r3, #2
 8001a46:	d901      	bls.n	8001a4c <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8001a48:	2303      	movs	r3, #3
 8001a4a:	e04f      	b.n	8001aec <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a4c:	4b29      	ldr	r3, [pc, #164]	; (8001af4 <HAL_RCC_OscConfig+0x4a8>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d1f0      	bne.n	8001a3a <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	69da      	ldr	r2, [r3, #28]
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6a1b      	ldr	r3, [r3, #32]
 8001a60:	431a      	orrs	r2, r3
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a66:	019b      	lsls	r3, r3, #6
 8001a68:	431a      	orrs	r2, r3
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a6e:	085b      	lsrs	r3, r3, #1
 8001a70:	3b01      	subs	r3, #1
 8001a72:	041b      	lsls	r3, r3, #16
 8001a74:	431a      	orrs	r2, r3
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a7a:	061b      	lsls	r3, r3, #24
 8001a7c:	431a      	orrs	r2, r3
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a82:	071b      	lsls	r3, r3, #28
 8001a84:	491b      	ldr	r1, [pc, #108]	; (8001af4 <HAL_RCC_OscConfig+0x4a8>)
 8001a86:	4313      	orrs	r3, r2
 8001a88:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a8a:	4b1c      	ldr	r3, [pc, #112]	; (8001afc <HAL_RCC_OscConfig+0x4b0>)
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a90:	f7ff f82c 	bl	8000aec <HAL_GetTick>
 8001a94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a96:	e008      	b.n	8001aaa <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a98:	f7ff f828 	bl	8000aec <HAL_GetTick>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	693b      	ldr	r3, [r7, #16]
 8001aa0:	1ad3      	subs	r3, r2, r3
 8001aa2:	2b02      	cmp	r3, #2
 8001aa4:	d901      	bls.n	8001aaa <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8001aa6:	2303      	movs	r3, #3
 8001aa8:	e020      	b.n	8001aec <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001aaa:	4b12      	ldr	r3, [pc, #72]	; (8001af4 <HAL_RCC_OscConfig+0x4a8>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d0f0      	beq.n	8001a98 <HAL_RCC_OscConfig+0x44c>
 8001ab6:	e018      	b.n	8001aea <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ab8:	4b10      	ldr	r3, [pc, #64]	; (8001afc <HAL_RCC_OscConfig+0x4b0>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001abe:	f7ff f815 	bl	8000aec <HAL_GetTick>
 8001ac2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ac4:	e008      	b.n	8001ad8 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ac6:	f7ff f811 	bl	8000aec <HAL_GetTick>
 8001aca:	4602      	mov	r2, r0
 8001acc:	693b      	ldr	r3, [r7, #16]
 8001ace:	1ad3      	subs	r3, r2, r3
 8001ad0:	2b02      	cmp	r3, #2
 8001ad2:	d901      	bls.n	8001ad8 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8001ad4:	2303      	movs	r3, #3
 8001ad6:	e009      	b.n	8001aec <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ad8:	4b06      	ldr	r3, [pc, #24]	; (8001af4 <HAL_RCC_OscConfig+0x4a8>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d1f0      	bne.n	8001ac6 <HAL_RCC_OscConfig+0x47a>
 8001ae4:	e001      	b.n	8001aea <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	e000      	b.n	8001aec <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8001aea:	2300      	movs	r3, #0
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	3718      	adds	r7, #24
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	40023800 	.word	0x40023800
 8001af8:	40007000 	.word	0x40007000
 8001afc:	42470060 	.word	0x42470060

08001b00 <__errno>:
 8001b00:	4b01      	ldr	r3, [pc, #4]	; (8001b08 <__errno+0x8>)
 8001b02:	6818      	ldr	r0, [r3, #0]
 8001b04:	4770      	bx	lr
 8001b06:	bf00      	nop
 8001b08:	2000000c 	.word	0x2000000c

08001b0c <__libc_init_array>:
 8001b0c:	b570      	push	{r4, r5, r6, lr}
 8001b0e:	4e0d      	ldr	r6, [pc, #52]	; (8001b44 <__libc_init_array+0x38>)
 8001b10:	4c0d      	ldr	r4, [pc, #52]	; (8001b48 <__libc_init_array+0x3c>)
 8001b12:	1ba4      	subs	r4, r4, r6
 8001b14:	10a4      	asrs	r4, r4, #2
 8001b16:	2500      	movs	r5, #0
 8001b18:	42a5      	cmp	r5, r4
 8001b1a:	d109      	bne.n	8001b30 <__libc_init_array+0x24>
 8001b1c:	4e0b      	ldr	r6, [pc, #44]	; (8001b4c <__libc_init_array+0x40>)
 8001b1e:	4c0c      	ldr	r4, [pc, #48]	; (8001b50 <__libc_init_array+0x44>)
 8001b20:	f000 ff04 	bl	800292c <_init>
 8001b24:	1ba4      	subs	r4, r4, r6
 8001b26:	10a4      	asrs	r4, r4, #2
 8001b28:	2500      	movs	r5, #0
 8001b2a:	42a5      	cmp	r5, r4
 8001b2c:	d105      	bne.n	8001b3a <__libc_init_array+0x2e>
 8001b2e:	bd70      	pop	{r4, r5, r6, pc}
 8001b30:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001b34:	4798      	blx	r3
 8001b36:	3501      	adds	r5, #1
 8001b38:	e7ee      	b.n	8001b18 <__libc_init_array+0xc>
 8001b3a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001b3e:	4798      	blx	r3
 8001b40:	3501      	adds	r5, #1
 8001b42:	e7f2      	b.n	8001b2a <__libc_init_array+0x1e>
 8001b44:	08002a0c 	.word	0x08002a0c
 8001b48:	08002a0c 	.word	0x08002a0c
 8001b4c:	08002a0c 	.word	0x08002a0c
 8001b50:	08002a10 	.word	0x08002a10

08001b54 <memset>:
 8001b54:	4402      	add	r2, r0
 8001b56:	4603      	mov	r3, r0
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d100      	bne.n	8001b5e <memset+0xa>
 8001b5c:	4770      	bx	lr
 8001b5e:	f803 1b01 	strb.w	r1, [r3], #1
 8001b62:	e7f9      	b.n	8001b58 <memset+0x4>

08001b64 <iprintf>:
 8001b64:	b40f      	push	{r0, r1, r2, r3}
 8001b66:	4b0a      	ldr	r3, [pc, #40]	; (8001b90 <iprintf+0x2c>)
 8001b68:	b513      	push	{r0, r1, r4, lr}
 8001b6a:	681c      	ldr	r4, [r3, #0]
 8001b6c:	b124      	cbz	r4, 8001b78 <iprintf+0x14>
 8001b6e:	69a3      	ldr	r3, [r4, #24]
 8001b70:	b913      	cbnz	r3, 8001b78 <iprintf+0x14>
 8001b72:	4620      	mov	r0, r4
 8001b74:	f000 f84e 	bl	8001c14 <__sinit>
 8001b78:	ab05      	add	r3, sp, #20
 8001b7a:	9a04      	ldr	r2, [sp, #16]
 8001b7c:	68a1      	ldr	r1, [r4, #8]
 8001b7e:	9301      	str	r3, [sp, #4]
 8001b80:	4620      	mov	r0, r4
 8001b82:	f000 f955 	bl	8001e30 <_vfiprintf_r>
 8001b86:	b002      	add	sp, #8
 8001b88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001b8c:	b004      	add	sp, #16
 8001b8e:	4770      	bx	lr
 8001b90:	2000000c 	.word	0x2000000c

08001b94 <std>:
 8001b94:	2300      	movs	r3, #0
 8001b96:	b510      	push	{r4, lr}
 8001b98:	4604      	mov	r4, r0
 8001b9a:	e9c0 3300 	strd	r3, r3, [r0]
 8001b9e:	6083      	str	r3, [r0, #8]
 8001ba0:	8181      	strh	r1, [r0, #12]
 8001ba2:	6643      	str	r3, [r0, #100]	; 0x64
 8001ba4:	81c2      	strh	r2, [r0, #14]
 8001ba6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001baa:	6183      	str	r3, [r0, #24]
 8001bac:	4619      	mov	r1, r3
 8001bae:	2208      	movs	r2, #8
 8001bb0:	305c      	adds	r0, #92	; 0x5c
 8001bb2:	f7ff ffcf 	bl	8001b54 <memset>
 8001bb6:	4b05      	ldr	r3, [pc, #20]	; (8001bcc <std+0x38>)
 8001bb8:	6263      	str	r3, [r4, #36]	; 0x24
 8001bba:	4b05      	ldr	r3, [pc, #20]	; (8001bd0 <std+0x3c>)
 8001bbc:	62a3      	str	r3, [r4, #40]	; 0x28
 8001bbe:	4b05      	ldr	r3, [pc, #20]	; (8001bd4 <std+0x40>)
 8001bc0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001bc2:	4b05      	ldr	r3, [pc, #20]	; (8001bd8 <std+0x44>)
 8001bc4:	6224      	str	r4, [r4, #32]
 8001bc6:	6323      	str	r3, [r4, #48]	; 0x30
 8001bc8:	bd10      	pop	{r4, pc}
 8001bca:	bf00      	nop
 8001bcc:	0800238d 	.word	0x0800238d
 8001bd0:	080023af 	.word	0x080023af
 8001bd4:	080023e7 	.word	0x080023e7
 8001bd8:	0800240b 	.word	0x0800240b

08001bdc <_cleanup_r>:
 8001bdc:	4901      	ldr	r1, [pc, #4]	; (8001be4 <_cleanup_r+0x8>)
 8001bde:	f000 b885 	b.w	8001cec <_fwalk_reent>
 8001be2:	bf00      	nop
 8001be4:	080026e5 	.word	0x080026e5

08001be8 <__sfmoreglue>:
 8001be8:	b570      	push	{r4, r5, r6, lr}
 8001bea:	1e4a      	subs	r2, r1, #1
 8001bec:	2568      	movs	r5, #104	; 0x68
 8001bee:	4355      	muls	r5, r2
 8001bf0:	460e      	mov	r6, r1
 8001bf2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001bf6:	f000 f897 	bl	8001d28 <_malloc_r>
 8001bfa:	4604      	mov	r4, r0
 8001bfc:	b140      	cbz	r0, 8001c10 <__sfmoreglue+0x28>
 8001bfe:	2100      	movs	r1, #0
 8001c00:	e9c0 1600 	strd	r1, r6, [r0]
 8001c04:	300c      	adds	r0, #12
 8001c06:	60a0      	str	r0, [r4, #8]
 8001c08:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001c0c:	f7ff ffa2 	bl	8001b54 <memset>
 8001c10:	4620      	mov	r0, r4
 8001c12:	bd70      	pop	{r4, r5, r6, pc}

08001c14 <__sinit>:
 8001c14:	6983      	ldr	r3, [r0, #24]
 8001c16:	b510      	push	{r4, lr}
 8001c18:	4604      	mov	r4, r0
 8001c1a:	bb33      	cbnz	r3, 8001c6a <__sinit+0x56>
 8001c1c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8001c20:	6503      	str	r3, [r0, #80]	; 0x50
 8001c22:	4b12      	ldr	r3, [pc, #72]	; (8001c6c <__sinit+0x58>)
 8001c24:	4a12      	ldr	r2, [pc, #72]	; (8001c70 <__sinit+0x5c>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	6282      	str	r2, [r0, #40]	; 0x28
 8001c2a:	4298      	cmp	r0, r3
 8001c2c:	bf04      	itt	eq
 8001c2e:	2301      	moveq	r3, #1
 8001c30:	6183      	streq	r3, [r0, #24]
 8001c32:	f000 f81f 	bl	8001c74 <__sfp>
 8001c36:	6060      	str	r0, [r4, #4]
 8001c38:	4620      	mov	r0, r4
 8001c3a:	f000 f81b 	bl	8001c74 <__sfp>
 8001c3e:	60a0      	str	r0, [r4, #8]
 8001c40:	4620      	mov	r0, r4
 8001c42:	f000 f817 	bl	8001c74 <__sfp>
 8001c46:	2200      	movs	r2, #0
 8001c48:	60e0      	str	r0, [r4, #12]
 8001c4a:	2104      	movs	r1, #4
 8001c4c:	6860      	ldr	r0, [r4, #4]
 8001c4e:	f7ff ffa1 	bl	8001b94 <std>
 8001c52:	2201      	movs	r2, #1
 8001c54:	2109      	movs	r1, #9
 8001c56:	68a0      	ldr	r0, [r4, #8]
 8001c58:	f7ff ff9c 	bl	8001b94 <std>
 8001c5c:	2202      	movs	r2, #2
 8001c5e:	2112      	movs	r1, #18
 8001c60:	68e0      	ldr	r0, [r4, #12]
 8001c62:	f7ff ff97 	bl	8001b94 <std>
 8001c66:	2301      	movs	r3, #1
 8001c68:	61a3      	str	r3, [r4, #24]
 8001c6a:	bd10      	pop	{r4, pc}
 8001c6c:	0800296c 	.word	0x0800296c
 8001c70:	08001bdd 	.word	0x08001bdd

08001c74 <__sfp>:
 8001c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c76:	4b1b      	ldr	r3, [pc, #108]	; (8001ce4 <__sfp+0x70>)
 8001c78:	681e      	ldr	r6, [r3, #0]
 8001c7a:	69b3      	ldr	r3, [r6, #24]
 8001c7c:	4607      	mov	r7, r0
 8001c7e:	b913      	cbnz	r3, 8001c86 <__sfp+0x12>
 8001c80:	4630      	mov	r0, r6
 8001c82:	f7ff ffc7 	bl	8001c14 <__sinit>
 8001c86:	3648      	adds	r6, #72	; 0x48
 8001c88:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8001c8c:	3b01      	subs	r3, #1
 8001c8e:	d503      	bpl.n	8001c98 <__sfp+0x24>
 8001c90:	6833      	ldr	r3, [r6, #0]
 8001c92:	b133      	cbz	r3, 8001ca2 <__sfp+0x2e>
 8001c94:	6836      	ldr	r6, [r6, #0]
 8001c96:	e7f7      	b.n	8001c88 <__sfp+0x14>
 8001c98:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001c9c:	b16d      	cbz	r5, 8001cba <__sfp+0x46>
 8001c9e:	3468      	adds	r4, #104	; 0x68
 8001ca0:	e7f4      	b.n	8001c8c <__sfp+0x18>
 8001ca2:	2104      	movs	r1, #4
 8001ca4:	4638      	mov	r0, r7
 8001ca6:	f7ff ff9f 	bl	8001be8 <__sfmoreglue>
 8001caa:	6030      	str	r0, [r6, #0]
 8001cac:	2800      	cmp	r0, #0
 8001cae:	d1f1      	bne.n	8001c94 <__sfp+0x20>
 8001cb0:	230c      	movs	r3, #12
 8001cb2:	603b      	str	r3, [r7, #0]
 8001cb4:	4604      	mov	r4, r0
 8001cb6:	4620      	mov	r0, r4
 8001cb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001cba:	4b0b      	ldr	r3, [pc, #44]	; (8001ce8 <__sfp+0x74>)
 8001cbc:	6665      	str	r5, [r4, #100]	; 0x64
 8001cbe:	e9c4 5500 	strd	r5, r5, [r4]
 8001cc2:	60a5      	str	r5, [r4, #8]
 8001cc4:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8001cc8:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8001ccc:	2208      	movs	r2, #8
 8001cce:	4629      	mov	r1, r5
 8001cd0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001cd4:	f7ff ff3e 	bl	8001b54 <memset>
 8001cd8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8001cdc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001ce0:	e7e9      	b.n	8001cb6 <__sfp+0x42>
 8001ce2:	bf00      	nop
 8001ce4:	0800296c 	.word	0x0800296c
 8001ce8:	ffff0001 	.word	0xffff0001

08001cec <_fwalk_reent>:
 8001cec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001cf0:	4680      	mov	r8, r0
 8001cf2:	4689      	mov	r9, r1
 8001cf4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001cf8:	2600      	movs	r6, #0
 8001cfa:	b914      	cbnz	r4, 8001d02 <_fwalk_reent+0x16>
 8001cfc:	4630      	mov	r0, r6
 8001cfe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001d02:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8001d06:	3f01      	subs	r7, #1
 8001d08:	d501      	bpl.n	8001d0e <_fwalk_reent+0x22>
 8001d0a:	6824      	ldr	r4, [r4, #0]
 8001d0c:	e7f5      	b.n	8001cfa <_fwalk_reent+0xe>
 8001d0e:	89ab      	ldrh	r3, [r5, #12]
 8001d10:	2b01      	cmp	r3, #1
 8001d12:	d907      	bls.n	8001d24 <_fwalk_reent+0x38>
 8001d14:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001d18:	3301      	adds	r3, #1
 8001d1a:	d003      	beq.n	8001d24 <_fwalk_reent+0x38>
 8001d1c:	4629      	mov	r1, r5
 8001d1e:	4640      	mov	r0, r8
 8001d20:	47c8      	blx	r9
 8001d22:	4306      	orrs	r6, r0
 8001d24:	3568      	adds	r5, #104	; 0x68
 8001d26:	e7ee      	b.n	8001d06 <_fwalk_reent+0x1a>

08001d28 <_malloc_r>:
 8001d28:	b570      	push	{r4, r5, r6, lr}
 8001d2a:	1ccd      	adds	r5, r1, #3
 8001d2c:	f025 0503 	bic.w	r5, r5, #3
 8001d30:	3508      	adds	r5, #8
 8001d32:	2d0c      	cmp	r5, #12
 8001d34:	bf38      	it	cc
 8001d36:	250c      	movcc	r5, #12
 8001d38:	2d00      	cmp	r5, #0
 8001d3a:	4606      	mov	r6, r0
 8001d3c:	db01      	blt.n	8001d42 <_malloc_r+0x1a>
 8001d3e:	42a9      	cmp	r1, r5
 8001d40:	d903      	bls.n	8001d4a <_malloc_r+0x22>
 8001d42:	230c      	movs	r3, #12
 8001d44:	6033      	str	r3, [r6, #0]
 8001d46:	2000      	movs	r0, #0
 8001d48:	bd70      	pop	{r4, r5, r6, pc}
 8001d4a:	f000 fd6b 	bl	8002824 <__malloc_lock>
 8001d4e:	4a21      	ldr	r2, [pc, #132]	; (8001dd4 <_malloc_r+0xac>)
 8001d50:	6814      	ldr	r4, [r2, #0]
 8001d52:	4621      	mov	r1, r4
 8001d54:	b991      	cbnz	r1, 8001d7c <_malloc_r+0x54>
 8001d56:	4c20      	ldr	r4, [pc, #128]	; (8001dd8 <_malloc_r+0xb0>)
 8001d58:	6823      	ldr	r3, [r4, #0]
 8001d5a:	b91b      	cbnz	r3, 8001d64 <_malloc_r+0x3c>
 8001d5c:	4630      	mov	r0, r6
 8001d5e:	f000 fb05 	bl	800236c <_sbrk_r>
 8001d62:	6020      	str	r0, [r4, #0]
 8001d64:	4629      	mov	r1, r5
 8001d66:	4630      	mov	r0, r6
 8001d68:	f000 fb00 	bl	800236c <_sbrk_r>
 8001d6c:	1c43      	adds	r3, r0, #1
 8001d6e:	d124      	bne.n	8001dba <_malloc_r+0x92>
 8001d70:	230c      	movs	r3, #12
 8001d72:	6033      	str	r3, [r6, #0]
 8001d74:	4630      	mov	r0, r6
 8001d76:	f000 fd56 	bl	8002826 <__malloc_unlock>
 8001d7a:	e7e4      	b.n	8001d46 <_malloc_r+0x1e>
 8001d7c:	680b      	ldr	r3, [r1, #0]
 8001d7e:	1b5b      	subs	r3, r3, r5
 8001d80:	d418      	bmi.n	8001db4 <_malloc_r+0x8c>
 8001d82:	2b0b      	cmp	r3, #11
 8001d84:	d90f      	bls.n	8001da6 <_malloc_r+0x7e>
 8001d86:	600b      	str	r3, [r1, #0]
 8001d88:	50cd      	str	r5, [r1, r3]
 8001d8a:	18cc      	adds	r4, r1, r3
 8001d8c:	4630      	mov	r0, r6
 8001d8e:	f000 fd4a 	bl	8002826 <__malloc_unlock>
 8001d92:	f104 000b 	add.w	r0, r4, #11
 8001d96:	1d23      	adds	r3, r4, #4
 8001d98:	f020 0007 	bic.w	r0, r0, #7
 8001d9c:	1ac3      	subs	r3, r0, r3
 8001d9e:	d0d3      	beq.n	8001d48 <_malloc_r+0x20>
 8001da0:	425a      	negs	r2, r3
 8001da2:	50e2      	str	r2, [r4, r3]
 8001da4:	e7d0      	b.n	8001d48 <_malloc_r+0x20>
 8001da6:	428c      	cmp	r4, r1
 8001da8:	684b      	ldr	r3, [r1, #4]
 8001daa:	bf16      	itet	ne
 8001dac:	6063      	strne	r3, [r4, #4]
 8001dae:	6013      	streq	r3, [r2, #0]
 8001db0:	460c      	movne	r4, r1
 8001db2:	e7eb      	b.n	8001d8c <_malloc_r+0x64>
 8001db4:	460c      	mov	r4, r1
 8001db6:	6849      	ldr	r1, [r1, #4]
 8001db8:	e7cc      	b.n	8001d54 <_malloc_r+0x2c>
 8001dba:	1cc4      	adds	r4, r0, #3
 8001dbc:	f024 0403 	bic.w	r4, r4, #3
 8001dc0:	42a0      	cmp	r0, r4
 8001dc2:	d005      	beq.n	8001dd0 <_malloc_r+0xa8>
 8001dc4:	1a21      	subs	r1, r4, r0
 8001dc6:	4630      	mov	r0, r6
 8001dc8:	f000 fad0 	bl	800236c <_sbrk_r>
 8001dcc:	3001      	adds	r0, #1
 8001dce:	d0cf      	beq.n	8001d70 <_malloc_r+0x48>
 8001dd0:	6025      	str	r5, [r4, #0]
 8001dd2:	e7db      	b.n	8001d8c <_malloc_r+0x64>
 8001dd4:	20000094 	.word	0x20000094
 8001dd8:	20000098 	.word	0x20000098

08001ddc <__sfputc_r>:
 8001ddc:	6893      	ldr	r3, [r2, #8]
 8001dde:	3b01      	subs	r3, #1
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	b410      	push	{r4}
 8001de4:	6093      	str	r3, [r2, #8]
 8001de6:	da08      	bge.n	8001dfa <__sfputc_r+0x1e>
 8001de8:	6994      	ldr	r4, [r2, #24]
 8001dea:	42a3      	cmp	r3, r4
 8001dec:	db01      	blt.n	8001df2 <__sfputc_r+0x16>
 8001dee:	290a      	cmp	r1, #10
 8001df0:	d103      	bne.n	8001dfa <__sfputc_r+0x1e>
 8001df2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001df6:	f000 bb0d 	b.w	8002414 <__swbuf_r>
 8001dfa:	6813      	ldr	r3, [r2, #0]
 8001dfc:	1c58      	adds	r0, r3, #1
 8001dfe:	6010      	str	r0, [r2, #0]
 8001e00:	7019      	strb	r1, [r3, #0]
 8001e02:	4608      	mov	r0, r1
 8001e04:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001e08:	4770      	bx	lr

08001e0a <__sfputs_r>:
 8001e0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e0c:	4606      	mov	r6, r0
 8001e0e:	460f      	mov	r7, r1
 8001e10:	4614      	mov	r4, r2
 8001e12:	18d5      	adds	r5, r2, r3
 8001e14:	42ac      	cmp	r4, r5
 8001e16:	d101      	bne.n	8001e1c <__sfputs_r+0x12>
 8001e18:	2000      	movs	r0, #0
 8001e1a:	e007      	b.n	8001e2c <__sfputs_r+0x22>
 8001e1c:	463a      	mov	r2, r7
 8001e1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001e22:	4630      	mov	r0, r6
 8001e24:	f7ff ffda 	bl	8001ddc <__sfputc_r>
 8001e28:	1c43      	adds	r3, r0, #1
 8001e2a:	d1f3      	bne.n	8001e14 <__sfputs_r+0xa>
 8001e2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001e30 <_vfiprintf_r>:
 8001e30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001e34:	460c      	mov	r4, r1
 8001e36:	b09d      	sub	sp, #116	; 0x74
 8001e38:	4617      	mov	r7, r2
 8001e3a:	461d      	mov	r5, r3
 8001e3c:	4606      	mov	r6, r0
 8001e3e:	b118      	cbz	r0, 8001e48 <_vfiprintf_r+0x18>
 8001e40:	6983      	ldr	r3, [r0, #24]
 8001e42:	b90b      	cbnz	r3, 8001e48 <_vfiprintf_r+0x18>
 8001e44:	f7ff fee6 	bl	8001c14 <__sinit>
 8001e48:	4b7c      	ldr	r3, [pc, #496]	; (800203c <_vfiprintf_r+0x20c>)
 8001e4a:	429c      	cmp	r4, r3
 8001e4c:	d158      	bne.n	8001f00 <_vfiprintf_r+0xd0>
 8001e4e:	6874      	ldr	r4, [r6, #4]
 8001e50:	89a3      	ldrh	r3, [r4, #12]
 8001e52:	0718      	lsls	r0, r3, #28
 8001e54:	d55e      	bpl.n	8001f14 <_vfiprintf_r+0xe4>
 8001e56:	6923      	ldr	r3, [r4, #16]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d05b      	beq.n	8001f14 <_vfiprintf_r+0xe4>
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	9309      	str	r3, [sp, #36]	; 0x24
 8001e60:	2320      	movs	r3, #32
 8001e62:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001e66:	2330      	movs	r3, #48	; 0x30
 8001e68:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001e6c:	9503      	str	r5, [sp, #12]
 8001e6e:	f04f 0b01 	mov.w	fp, #1
 8001e72:	46b8      	mov	r8, r7
 8001e74:	4645      	mov	r5, r8
 8001e76:	f815 3b01 	ldrb.w	r3, [r5], #1
 8001e7a:	b10b      	cbz	r3, 8001e80 <_vfiprintf_r+0x50>
 8001e7c:	2b25      	cmp	r3, #37	; 0x25
 8001e7e:	d154      	bne.n	8001f2a <_vfiprintf_r+0xfa>
 8001e80:	ebb8 0a07 	subs.w	sl, r8, r7
 8001e84:	d00b      	beq.n	8001e9e <_vfiprintf_r+0x6e>
 8001e86:	4653      	mov	r3, sl
 8001e88:	463a      	mov	r2, r7
 8001e8a:	4621      	mov	r1, r4
 8001e8c:	4630      	mov	r0, r6
 8001e8e:	f7ff ffbc 	bl	8001e0a <__sfputs_r>
 8001e92:	3001      	adds	r0, #1
 8001e94:	f000 80c2 	beq.w	800201c <_vfiprintf_r+0x1ec>
 8001e98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001e9a:	4453      	add	r3, sl
 8001e9c:	9309      	str	r3, [sp, #36]	; 0x24
 8001e9e:	f898 3000 	ldrb.w	r3, [r8]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	f000 80ba 	beq.w	800201c <_vfiprintf_r+0x1ec>
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	f04f 32ff 	mov.w	r2, #4294967295
 8001eae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001eb2:	9304      	str	r3, [sp, #16]
 8001eb4:	9307      	str	r3, [sp, #28]
 8001eb6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001eba:	931a      	str	r3, [sp, #104]	; 0x68
 8001ebc:	46a8      	mov	r8, r5
 8001ebe:	2205      	movs	r2, #5
 8001ec0:	f818 1b01 	ldrb.w	r1, [r8], #1
 8001ec4:	485e      	ldr	r0, [pc, #376]	; (8002040 <_vfiprintf_r+0x210>)
 8001ec6:	f7fe f9a3 	bl	8000210 <memchr>
 8001eca:	9b04      	ldr	r3, [sp, #16]
 8001ecc:	bb78      	cbnz	r0, 8001f2e <_vfiprintf_r+0xfe>
 8001ece:	06d9      	lsls	r1, r3, #27
 8001ed0:	bf44      	itt	mi
 8001ed2:	2220      	movmi	r2, #32
 8001ed4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001ed8:	071a      	lsls	r2, r3, #28
 8001eda:	bf44      	itt	mi
 8001edc:	222b      	movmi	r2, #43	; 0x2b
 8001ede:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001ee2:	782a      	ldrb	r2, [r5, #0]
 8001ee4:	2a2a      	cmp	r2, #42	; 0x2a
 8001ee6:	d02a      	beq.n	8001f3e <_vfiprintf_r+0x10e>
 8001ee8:	9a07      	ldr	r2, [sp, #28]
 8001eea:	46a8      	mov	r8, r5
 8001eec:	2000      	movs	r0, #0
 8001eee:	250a      	movs	r5, #10
 8001ef0:	4641      	mov	r1, r8
 8001ef2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001ef6:	3b30      	subs	r3, #48	; 0x30
 8001ef8:	2b09      	cmp	r3, #9
 8001efa:	d969      	bls.n	8001fd0 <_vfiprintf_r+0x1a0>
 8001efc:	b360      	cbz	r0, 8001f58 <_vfiprintf_r+0x128>
 8001efe:	e024      	b.n	8001f4a <_vfiprintf_r+0x11a>
 8001f00:	4b50      	ldr	r3, [pc, #320]	; (8002044 <_vfiprintf_r+0x214>)
 8001f02:	429c      	cmp	r4, r3
 8001f04:	d101      	bne.n	8001f0a <_vfiprintf_r+0xda>
 8001f06:	68b4      	ldr	r4, [r6, #8]
 8001f08:	e7a2      	b.n	8001e50 <_vfiprintf_r+0x20>
 8001f0a:	4b4f      	ldr	r3, [pc, #316]	; (8002048 <_vfiprintf_r+0x218>)
 8001f0c:	429c      	cmp	r4, r3
 8001f0e:	bf08      	it	eq
 8001f10:	68f4      	ldreq	r4, [r6, #12]
 8001f12:	e79d      	b.n	8001e50 <_vfiprintf_r+0x20>
 8001f14:	4621      	mov	r1, r4
 8001f16:	4630      	mov	r0, r6
 8001f18:	f000 fae0 	bl	80024dc <__swsetup_r>
 8001f1c:	2800      	cmp	r0, #0
 8001f1e:	d09d      	beq.n	8001e5c <_vfiprintf_r+0x2c>
 8001f20:	f04f 30ff 	mov.w	r0, #4294967295
 8001f24:	b01d      	add	sp, #116	; 0x74
 8001f26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001f2a:	46a8      	mov	r8, r5
 8001f2c:	e7a2      	b.n	8001e74 <_vfiprintf_r+0x44>
 8001f2e:	4a44      	ldr	r2, [pc, #272]	; (8002040 <_vfiprintf_r+0x210>)
 8001f30:	1a80      	subs	r0, r0, r2
 8001f32:	fa0b f000 	lsl.w	r0, fp, r0
 8001f36:	4318      	orrs	r0, r3
 8001f38:	9004      	str	r0, [sp, #16]
 8001f3a:	4645      	mov	r5, r8
 8001f3c:	e7be      	b.n	8001ebc <_vfiprintf_r+0x8c>
 8001f3e:	9a03      	ldr	r2, [sp, #12]
 8001f40:	1d11      	adds	r1, r2, #4
 8001f42:	6812      	ldr	r2, [r2, #0]
 8001f44:	9103      	str	r1, [sp, #12]
 8001f46:	2a00      	cmp	r2, #0
 8001f48:	db01      	blt.n	8001f4e <_vfiprintf_r+0x11e>
 8001f4a:	9207      	str	r2, [sp, #28]
 8001f4c:	e004      	b.n	8001f58 <_vfiprintf_r+0x128>
 8001f4e:	4252      	negs	r2, r2
 8001f50:	f043 0302 	orr.w	r3, r3, #2
 8001f54:	9207      	str	r2, [sp, #28]
 8001f56:	9304      	str	r3, [sp, #16]
 8001f58:	f898 3000 	ldrb.w	r3, [r8]
 8001f5c:	2b2e      	cmp	r3, #46	; 0x2e
 8001f5e:	d10e      	bne.n	8001f7e <_vfiprintf_r+0x14e>
 8001f60:	f898 3001 	ldrb.w	r3, [r8, #1]
 8001f64:	2b2a      	cmp	r3, #42	; 0x2a
 8001f66:	d138      	bne.n	8001fda <_vfiprintf_r+0x1aa>
 8001f68:	9b03      	ldr	r3, [sp, #12]
 8001f6a:	1d1a      	adds	r2, r3, #4
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	9203      	str	r2, [sp, #12]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	bfb8      	it	lt
 8001f74:	f04f 33ff 	movlt.w	r3, #4294967295
 8001f78:	f108 0802 	add.w	r8, r8, #2
 8001f7c:	9305      	str	r3, [sp, #20]
 8001f7e:	4d33      	ldr	r5, [pc, #204]	; (800204c <_vfiprintf_r+0x21c>)
 8001f80:	f898 1000 	ldrb.w	r1, [r8]
 8001f84:	2203      	movs	r2, #3
 8001f86:	4628      	mov	r0, r5
 8001f88:	f7fe f942 	bl	8000210 <memchr>
 8001f8c:	b140      	cbz	r0, 8001fa0 <_vfiprintf_r+0x170>
 8001f8e:	2340      	movs	r3, #64	; 0x40
 8001f90:	1b40      	subs	r0, r0, r5
 8001f92:	fa03 f000 	lsl.w	r0, r3, r0
 8001f96:	9b04      	ldr	r3, [sp, #16]
 8001f98:	4303      	orrs	r3, r0
 8001f9a:	f108 0801 	add.w	r8, r8, #1
 8001f9e:	9304      	str	r3, [sp, #16]
 8001fa0:	f898 1000 	ldrb.w	r1, [r8]
 8001fa4:	482a      	ldr	r0, [pc, #168]	; (8002050 <_vfiprintf_r+0x220>)
 8001fa6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001faa:	2206      	movs	r2, #6
 8001fac:	f108 0701 	add.w	r7, r8, #1
 8001fb0:	f7fe f92e 	bl	8000210 <memchr>
 8001fb4:	2800      	cmp	r0, #0
 8001fb6:	d037      	beq.n	8002028 <_vfiprintf_r+0x1f8>
 8001fb8:	4b26      	ldr	r3, [pc, #152]	; (8002054 <_vfiprintf_r+0x224>)
 8001fba:	bb1b      	cbnz	r3, 8002004 <_vfiprintf_r+0x1d4>
 8001fbc:	9b03      	ldr	r3, [sp, #12]
 8001fbe:	3307      	adds	r3, #7
 8001fc0:	f023 0307 	bic.w	r3, r3, #7
 8001fc4:	3308      	adds	r3, #8
 8001fc6:	9303      	str	r3, [sp, #12]
 8001fc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001fca:	444b      	add	r3, r9
 8001fcc:	9309      	str	r3, [sp, #36]	; 0x24
 8001fce:	e750      	b.n	8001e72 <_vfiprintf_r+0x42>
 8001fd0:	fb05 3202 	mla	r2, r5, r2, r3
 8001fd4:	2001      	movs	r0, #1
 8001fd6:	4688      	mov	r8, r1
 8001fd8:	e78a      	b.n	8001ef0 <_vfiprintf_r+0xc0>
 8001fda:	2300      	movs	r3, #0
 8001fdc:	f108 0801 	add.w	r8, r8, #1
 8001fe0:	9305      	str	r3, [sp, #20]
 8001fe2:	4619      	mov	r1, r3
 8001fe4:	250a      	movs	r5, #10
 8001fe6:	4640      	mov	r0, r8
 8001fe8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001fec:	3a30      	subs	r2, #48	; 0x30
 8001fee:	2a09      	cmp	r2, #9
 8001ff0:	d903      	bls.n	8001ffa <_vfiprintf_r+0x1ca>
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d0c3      	beq.n	8001f7e <_vfiprintf_r+0x14e>
 8001ff6:	9105      	str	r1, [sp, #20]
 8001ff8:	e7c1      	b.n	8001f7e <_vfiprintf_r+0x14e>
 8001ffa:	fb05 2101 	mla	r1, r5, r1, r2
 8001ffe:	2301      	movs	r3, #1
 8002000:	4680      	mov	r8, r0
 8002002:	e7f0      	b.n	8001fe6 <_vfiprintf_r+0x1b6>
 8002004:	ab03      	add	r3, sp, #12
 8002006:	9300      	str	r3, [sp, #0]
 8002008:	4622      	mov	r2, r4
 800200a:	4b13      	ldr	r3, [pc, #76]	; (8002058 <_vfiprintf_r+0x228>)
 800200c:	a904      	add	r1, sp, #16
 800200e:	4630      	mov	r0, r6
 8002010:	f3af 8000 	nop.w
 8002014:	f1b0 3fff 	cmp.w	r0, #4294967295
 8002018:	4681      	mov	r9, r0
 800201a:	d1d5      	bne.n	8001fc8 <_vfiprintf_r+0x198>
 800201c:	89a3      	ldrh	r3, [r4, #12]
 800201e:	065b      	lsls	r3, r3, #25
 8002020:	f53f af7e 	bmi.w	8001f20 <_vfiprintf_r+0xf0>
 8002024:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002026:	e77d      	b.n	8001f24 <_vfiprintf_r+0xf4>
 8002028:	ab03      	add	r3, sp, #12
 800202a:	9300      	str	r3, [sp, #0]
 800202c:	4622      	mov	r2, r4
 800202e:	4b0a      	ldr	r3, [pc, #40]	; (8002058 <_vfiprintf_r+0x228>)
 8002030:	a904      	add	r1, sp, #16
 8002032:	4630      	mov	r0, r6
 8002034:	f000 f888 	bl	8002148 <_printf_i>
 8002038:	e7ec      	b.n	8002014 <_vfiprintf_r+0x1e4>
 800203a:	bf00      	nop
 800203c:	08002990 	.word	0x08002990
 8002040:	080029d0 	.word	0x080029d0
 8002044:	080029b0 	.word	0x080029b0
 8002048:	08002970 	.word	0x08002970
 800204c:	080029d6 	.word	0x080029d6
 8002050:	080029da 	.word	0x080029da
 8002054:	00000000 	.word	0x00000000
 8002058:	08001e0b 	.word	0x08001e0b

0800205c <_printf_common>:
 800205c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002060:	4691      	mov	r9, r2
 8002062:	461f      	mov	r7, r3
 8002064:	688a      	ldr	r2, [r1, #8]
 8002066:	690b      	ldr	r3, [r1, #16]
 8002068:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800206c:	4293      	cmp	r3, r2
 800206e:	bfb8      	it	lt
 8002070:	4613      	movlt	r3, r2
 8002072:	f8c9 3000 	str.w	r3, [r9]
 8002076:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800207a:	4606      	mov	r6, r0
 800207c:	460c      	mov	r4, r1
 800207e:	b112      	cbz	r2, 8002086 <_printf_common+0x2a>
 8002080:	3301      	adds	r3, #1
 8002082:	f8c9 3000 	str.w	r3, [r9]
 8002086:	6823      	ldr	r3, [r4, #0]
 8002088:	0699      	lsls	r1, r3, #26
 800208a:	bf42      	ittt	mi
 800208c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002090:	3302      	addmi	r3, #2
 8002092:	f8c9 3000 	strmi.w	r3, [r9]
 8002096:	6825      	ldr	r5, [r4, #0]
 8002098:	f015 0506 	ands.w	r5, r5, #6
 800209c:	d107      	bne.n	80020ae <_printf_common+0x52>
 800209e:	f104 0a19 	add.w	sl, r4, #25
 80020a2:	68e3      	ldr	r3, [r4, #12]
 80020a4:	f8d9 2000 	ldr.w	r2, [r9]
 80020a8:	1a9b      	subs	r3, r3, r2
 80020aa:	42ab      	cmp	r3, r5
 80020ac:	dc28      	bgt.n	8002100 <_printf_common+0xa4>
 80020ae:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80020b2:	6822      	ldr	r2, [r4, #0]
 80020b4:	3300      	adds	r3, #0
 80020b6:	bf18      	it	ne
 80020b8:	2301      	movne	r3, #1
 80020ba:	0692      	lsls	r2, r2, #26
 80020bc:	d42d      	bmi.n	800211a <_printf_common+0xbe>
 80020be:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80020c2:	4639      	mov	r1, r7
 80020c4:	4630      	mov	r0, r6
 80020c6:	47c0      	blx	r8
 80020c8:	3001      	adds	r0, #1
 80020ca:	d020      	beq.n	800210e <_printf_common+0xb2>
 80020cc:	6823      	ldr	r3, [r4, #0]
 80020ce:	68e5      	ldr	r5, [r4, #12]
 80020d0:	f8d9 2000 	ldr.w	r2, [r9]
 80020d4:	f003 0306 	and.w	r3, r3, #6
 80020d8:	2b04      	cmp	r3, #4
 80020da:	bf08      	it	eq
 80020dc:	1aad      	subeq	r5, r5, r2
 80020de:	68a3      	ldr	r3, [r4, #8]
 80020e0:	6922      	ldr	r2, [r4, #16]
 80020e2:	bf0c      	ite	eq
 80020e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80020e8:	2500      	movne	r5, #0
 80020ea:	4293      	cmp	r3, r2
 80020ec:	bfc4      	itt	gt
 80020ee:	1a9b      	subgt	r3, r3, r2
 80020f0:	18ed      	addgt	r5, r5, r3
 80020f2:	f04f 0900 	mov.w	r9, #0
 80020f6:	341a      	adds	r4, #26
 80020f8:	454d      	cmp	r5, r9
 80020fa:	d11a      	bne.n	8002132 <_printf_common+0xd6>
 80020fc:	2000      	movs	r0, #0
 80020fe:	e008      	b.n	8002112 <_printf_common+0xb6>
 8002100:	2301      	movs	r3, #1
 8002102:	4652      	mov	r2, sl
 8002104:	4639      	mov	r1, r7
 8002106:	4630      	mov	r0, r6
 8002108:	47c0      	blx	r8
 800210a:	3001      	adds	r0, #1
 800210c:	d103      	bne.n	8002116 <_printf_common+0xba>
 800210e:	f04f 30ff 	mov.w	r0, #4294967295
 8002112:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002116:	3501      	adds	r5, #1
 8002118:	e7c3      	b.n	80020a2 <_printf_common+0x46>
 800211a:	18e1      	adds	r1, r4, r3
 800211c:	1c5a      	adds	r2, r3, #1
 800211e:	2030      	movs	r0, #48	; 0x30
 8002120:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002124:	4422      	add	r2, r4
 8002126:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800212a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800212e:	3302      	adds	r3, #2
 8002130:	e7c5      	b.n	80020be <_printf_common+0x62>
 8002132:	2301      	movs	r3, #1
 8002134:	4622      	mov	r2, r4
 8002136:	4639      	mov	r1, r7
 8002138:	4630      	mov	r0, r6
 800213a:	47c0      	blx	r8
 800213c:	3001      	adds	r0, #1
 800213e:	d0e6      	beq.n	800210e <_printf_common+0xb2>
 8002140:	f109 0901 	add.w	r9, r9, #1
 8002144:	e7d8      	b.n	80020f8 <_printf_common+0x9c>
	...

08002148 <_printf_i>:
 8002148:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800214c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8002150:	460c      	mov	r4, r1
 8002152:	7e09      	ldrb	r1, [r1, #24]
 8002154:	b085      	sub	sp, #20
 8002156:	296e      	cmp	r1, #110	; 0x6e
 8002158:	4617      	mov	r7, r2
 800215a:	4606      	mov	r6, r0
 800215c:	4698      	mov	r8, r3
 800215e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002160:	f000 80b3 	beq.w	80022ca <_printf_i+0x182>
 8002164:	d822      	bhi.n	80021ac <_printf_i+0x64>
 8002166:	2963      	cmp	r1, #99	; 0x63
 8002168:	d036      	beq.n	80021d8 <_printf_i+0x90>
 800216a:	d80a      	bhi.n	8002182 <_printf_i+0x3a>
 800216c:	2900      	cmp	r1, #0
 800216e:	f000 80b9 	beq.w	80022e4 <_printf_i+0x19c>
 8002172:	2958      	cmp	r1, #88	; 0x58
 8002174:	f000 8083 	beq.w	800227e <_printf_i+0x136>
 8002178:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800217c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8002180:	e032      	b.n	80021e8 <_printf_i+0xa0>
 8002182:	2964      	cmp	r1, #100	; 0x64
 8002184:	d001      	beq.n	800218a <_printf_i+0x42>
 8002186:	2969      	cmp	r1, #105	; 0x69
 8002188:	d1f6      	bne.n	8002178 <_printf_i+0x30>
 800218a:	6820      	ldr	r0, [r4, #0]
 800218c:	6813      	ldr	r3, [r2, #0]
 800218e:	0605      	lsls	r5, r0, #24
 8002190:	f103 0104 	add.w	r1, r3, #4
 8002194:	d52a      	bpl.n	80021ec <_printf_i+0xa4>
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	6011      	str	r1, [r2, #0]
 800219a:	2b00      	cmp	r3, #0
 800219c:	da03      	bge.n	80021a6 <_printf_i+0x5e>
 800219e:	222d      	movs	r2, #45	; 0x2d
 80021a0:	425b      	negs	r3, r3
 80021a2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80021a6:	486f      	ldr	r0, [pc, #444]	; (8002364 <_printf_i+0x21c>)
 80021a8:	220a      	movs	r2, #10
 80021aa:	e039      	b.n	8002220 <_printf_i+0xd8>
 80021ac:	2973      	cmp	r1, #115	; 0x73
 80021ae:	f000 809d 	beq.w	80022ec <_printf_i+0x1a4>
 80021b2:	d808      	bhi.n	80021c6 <_printf_i+0x7e>
 80021b4:	296f      	cmp	r1, #111	; 0x6f
 80021b6:	d020      	beq.n	80021fa <_printf_i+0xb2>
 80021b8:	2970      	cmp	r1, #112	; 0x70
 80021ba:	d1dd      	bne.n	8002178 <_printf_i+0x30>
 80021bc:	6823      	ldr	r3, [r4, #0]
 80021be:	f043 0320 	orr.w	r3, r3, #32
 80021c2:	6023      	str	r3, [r4, #0]
 80021c4:	e003      	b.n	80021ce <_printf_i+0x86>
 80021c6:	2975      	cmp	r1, #117	; 0x75
 80021c8:	d017      	beq.n	80021fa <_printf_i+0xb2>
 80021ca:	2978      	cmp	r1, #120	; 0x78
 80021cc:	d1d4      	bne.n	8002178 <_printf_i+0x30>
 80021ce:	2378      	movs	r3, #120	; 0x78
 80021d0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80021d4:	4864      	ldr	r0, [pc, #400]	; (8002368 <_printf_i+0x220>)
 80021d6:	e055      	b.n	8002284 <_printf_i+0x13c>
 80021d8:	6813      	ldr	r3, [r2, #0]
 80021da:	1d19      	adds	r1, r3, #4
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	6011      	str	r1, [r2, #0]
 80021e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80021e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80021e8:	2301      	movs	r3, #1
 80021ea:	e08c      	b.n	8002306 <_printf_i+0x1be>
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	6011      	str	r1, [r2, #0]
 80021f0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80021f4:	bf18      	it	ne
 80021f6:	b21b      	sxthne	r3, r3
 80021f8:	e7cf      	b.n	800219a <_printf_i+0x52>
 80021fa:	6813      	ldr	r3, [r2, #0]
 80021fc:	6825      	ldr	r5, [r4, #0]
 80021fe:	1d18      	adds	r0, r3, #4
 8002200:	6010      	str	r0, [r2, #0]
 8002202:	0628      	lsls	r0, r5, #24
 8002204:	d501      	bpl.n	800220a <_printf_i+0xc2>
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	e002      	b.n	8002210 <_printf_i+0xc8>
 800220a:	0668      	lsls	r0, r5, #25
 800220c:	d5fb      	bpl.n	8002206 <_printf_i+0xbe>
 800220e:	881b      	ldrh	r3, [r3, #0]
 8002210:	4854      	ldr	r0, [pc, #336]	; (8002364 <_printf_i+0x21c>)
 8002212:	296f      	cmp	r1, #111	; 0x6f
 8002214:	bf14      	ite	ne
 8002216:	220a      	movne	r2, #10
 8002218:	2208      	moveq	r2, #8
 800221a:	2100      	movs	r1, #0
 800221c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002220:	6865      	ldr	r5, [r4, #4]
 8002222:	60a5      	str	r5, [r4, #8]
 8002224:	2d00      	cmp	r5, #0
 8002226:	f2c0 8095 	blt.w	8002354 <_printf_i+0x20c>
 800222a:	6821      	ldr	r1, [r4, #0]
 800222c:	f021 0104 	bic.w	r1, r1, #4
 8002230:	6021      	str	r1, [r4, #0]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d13d      	bne.n	80022b2 <_printf_i+0x16a>
 8002236:	2d00      	cmp	r5, #0
 8002238:	f040 808e 	bne.w	8002358 <_printf_i+0x210>
 800223c:	4665      	mov	r5, ip
 800223e:	2a08      	cmp	r2, #8
 8002240:	d10b      	bne.n	800225a <_printf_i+0x112>
 8002242:	6823      	ldr	r3, [r4, #0]
 8002244:	07db      	lsls	r3, r3, #31
 8002246:	d508      	bpl.n	800225a <_printf_i+0x112>
 8002248:	6923      	ldr	r3, [r4, #16]
 800224a:	6862      	ldr	r2, [r4, #4]
 800224c:	429a      	cmp	r2, r3
 800224e:	bfde      	ittt	le
 8002250:	2330      	movle	r3, #48	; 0x30
 8002252:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002256:	f105 35ff 	addle.w	r5, r5, #4294967295
 800225a:	ebac 0305 	sub.w	r3, ip, r5
 800225e:	6123      	str	r3, [r4, #16]
 8002260:	f8cd 8000 	str.w	r8, [sp]
 8002264:	463b      	mov	r3, r7
 8002266:	aa03      	add	r2, sp, #12
 8002268:	4621      	mov	r1, r4
 800226a:	4630      	mov	r0, r6
 800226c:	f7ff fef6 	bl	800205c <_printf_common>
 8002270:	3001      	adds	r0, #1
 8002272:	d14d      	bne.n	8002310 <_printf_i+0x1c8>
 8002274:	f04f 30ff 	mov.w	r0, #4294967295
 8002278:	b005      	add	sp, #20
 800227a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800227e:	4839      	ldr	r0, [pc, #228]	; (8002364 <_printf_i+0x21c>)
 8002280:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8002284:	6813      	ldr	r3, [r2, #0]
 8002286:	6821      	ldr	r1, [r4, #0]
 8002288:	1d1d      	adds	r5, r3, #4
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	6015      	str	r5, [r2, #0]
 800228e:	060a      	lsls	r2, r1, #24
 8002290:	d50b      	bpl.n	80022aa <_printf_i+0x162>
 8002292:	07ca      	lsls	r2, r1, #31
 8002294:	bf44      	itt	mi
 8002296:	f041 0120 	orrmi.w	r1, r1, #32
 800229a:	6021      	strmi	r1, [r4, #0]
 800229c:	b91b      	cbnz	r3, 80022a6 <_printf_i+0x15e>
 800229e:	6822      	ldr	r2, [r4, #0]
 80022a0:	f022 0220 	bic.w	r2, r2, #32
 80022a4:	6022      	str	r2, [r4, #0]
 80022a6:	2210      	movs	r2, #16
 80022a8:	e7b7      	b.n	800221a <_printf_i+0xd2>
 80022aa:	064d      	lsls	r5, r1, #25
 80022ac:	bf48      	it	mi
 80022ae:	b29b      	uxthmi	r3, r3
 80022b0:	e7ef      	b.n	8002292 <_printf_i+0x14a>
 80022b2:	4665      	mov	r5, ip
 80022b4:	fbb3 f1f2 	udiv	r1, r3, r2
 80022b8:	fb02 3311 	mls	r3, r2, r1, r3
 80022bc:	5cc3      	ldrb	r3, [r0, r3]
 80022be:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80022c2:	460b      	mov	r3, r1
 80022c4:	2900      	cmp	r1, #0
 80022c6:	d1f5      	bne.n	80022b4 <_printf_i+0x16c>
 80022c8:	e7b9      	b.n	800223e <_printf_i+0xf6>
 80022ca:	6813      	ldr	r3, [r2, #0]
 80022cc:	6825      	ldr	r5, [r4, #0]
 80022ce:	6961      	ldr	r1, [r4, #20]
 80022d0:	1d18      	adds	r0, r3, #4
 80022d2:	6010      	str	r0, [r2, #0]
 80022d4:	0628      	lsls	r0, r5, #24
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	d501      	bpl.n	80022de <_printf_i+0x196>
 80022da:	6019      	str	r1, [r3, #0]
 80022dc:	e002      	b.n	80022e4 <_printf_i+0x19c>
 80022de:	066a      	lsls	r2, r5, #25
 80022e0:	d5fb      	bpl.n	80022da <_printf_i+0x192>
 80022e2:	8019      	strh	r1, [r3, #0]
 80022e4:	2300      	movs	r3, #0
 80022e6:	6123      	str	r3, [r4, #16]
 80022e8:	4665      	mov	r5, ip
 80022ea:	e7b9      	b.n	8002260 <_printf_i+0x118>
 80022ec:	6813      	ldr	r3, [r2, #0]
 80022ee:	1d19      	adds	r1, r3, #4
 80022f0:	6011      	str	r1, [r2, #0]
 80022f2:	681d      	ldr	r5, [r3, #0]
 80022f4:	6862      	ldr	r2, [r4, #4]
 80022f6:	2100      	movs	r1, #0
 80022f8:	4628      	mov	r0, r5
 80022fa:	f7fd ff89 	bl	8000210 <memchr>
 80022fe:	b108      	cbz	r0, 8002304 <_printf_i+0x1bc>
 8002300:	1b40      	subs	r0, r0, r5
 8002302:	6060      	str	r0, [r4, #4]
 8002304:	6863      	ldr	r3, [r4, #4]
 8002306:	6123      	str	r3, [r4, #16]
 8002308:	2300      	movs	r3, #0
 800230a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800230e:	e7a7      	b.n	8002260 <_printf_i+0x118>
 8002310:	6923      	ldr	r3, [r4, #16]
 8002312:	462a      	mov	r2, r5
 8002314:	4639      	mov	r1, r7
 8002316:	4630      	mov	r0, r6
 8002318:	47c0      	blx	r8
 800231a:	3001      	adds	r0, #1
 800231c:	d0aa      	beq.n	8002274 <_printf_i+0x12c>
 800231e:	6823      	ldr	r3, [r4, #0]
 8002320:	079b      	lsls	r3, r3, #30
 8002322:	d413      	bmi.n	800234c <_printf_i+0x204>
 8002324:	68e0      	ldr	r0, [r4, #12]
 8002326:	9b03      	ldr	r3, [sp, #12]
 8002328:	4298      	cmp	r0, r3
 800232a:	bfb8      	it	lt
 800232c:	4618      	movlt	r0, r3
 800232e:	e7a3      	b.n	8002278 <_printf_i+0x130>
 8002330:	2301      	movs	r3, #1
 8002332:	464a      	mov	r2, r9
 8002334:	4639      	mov	r1, r7
 8002336:	4630      	mov	r0, r6
 8002338:	47c0      	blx	r8
 800233a:	3001      	adds	r0, #1
 800233c:	d09a      	beq.n	8002274 <_printf_i+0x12c>
 800233e:	3501      	adds	r5, #1
 8002340:	68e3      	ldr	r3, [r4, #12]
 8002342:	9a03      	ldr	r2, [sp, #12]
 8002344:	1a9b      	subs	r3, r3, r2
 8002346:	42ab      	cmp	r3, r5
 8002348:	dcf2      	bgt.n	8002330 <_printf_i+0x1e8>
 800234a:	e7eb      	b.n	8002324 <_printf_i+0x1dc>
 800234c:	2500      	movs	r5, #0
 800234e:	f104 0919 	add.w	r9, r4, #25
 8002352:	e7f5      	b.n	8002340 <_printf_i+0x1f8>
 8002354:	2b00      	cmp	r3, #0
 8002356:	d1ac      	bne.n	80022b2 <_printf_i+0x16a>
 8002358:	7803      	ldrb	r3, [r0, #0]
 800235a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800235e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002362:	e76c      	b.n	800223e <_printf_i+0xf6>
 8002364:	080029e1 	.word	0x080029e1
 8002368:	080029f2 	.word	0x080029f2

0800236c <_sbrk_r>:
 800236c:	b538      	push	{r3, r4, r5, lr}
 800236e:	4c06      	ldr	r4, [pc, #24]	; (8002388 <_sbrk_r+0x1c>)
 8002370:	2300      	movs	r3, #0
 8002372:	4605      	mov	r5, r0
 8002374:	4608      	mov	r0, r1
 8002376:	6023      	str	r3, [r4, #0]
 8002378:	f7fe fae6 	bl	8000948 <_sbrk>
 800237c:	1c43      	adds	r3, r0, #1
 800237e:	d102      	bne.n	8002386 <_sbrk_r+0x1a>
 8002380:	6823      	ldr	r3, [r4, #0]
 8002382:	b103      	cbz	r3, 8002386 <_sbrk_r+0x1a>
 8002384:	602b      	str	r3, [r5, #0]
 8002386:	bd38      	pop	{r3, r4, r5, pc}
 8002388:	200000a0 	.word	0x200000a0

0800238c <__sread>:
 800238c:	b510      	push	{r4, lr}
 800238e:	460c      	mov	r4, r1
 8002390:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002394:	f000 fa96 	bl	80028c4 <_read_r>
 8002398:	2800      	cmp	r0, #0
 800239a:	bfab      	itete	ge
 800239c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800239e:	89a3      	ldrhlt	r3, [r4, #12]
 80023a0:	181b      	addge	r3, r3, r0
 80023a2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80023a6:	bfac      	ite	ge
 80023a8:	6563      	strge	r3, [r4, #84]	; 0x54
 80023aa:	81a3      	strhlt	r3, [r4, #12]
 80023ac:	bd10      	pop	{r4, pc}

080023ae <__swrite>:
 80023ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80023b2:	461f      	mov	r7, r3
 80023b4:	898b      	ldrh	r3, [r1, #12]
 80023b6:	05db      	lsls	r3, r3, #23
 80023b8:	4605      	mov	r5, r0
 80023ba:	460c      	mov	r4, r1
 80023bc:	4616      	mov	r6, r2
 80023be:	d505      	bpl.n	80023cc <__swrite+0x1e>
 80023c0:	2302      	movs	r3, #2
 80023c2:	2200      	movs	r2, #0
 80023c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80023c8:	f000 f9b6 	bl	8002738 <_lseek_r>
 80023cc:	89a3      	ldrh	r3, [r4, #12]
 80023ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80023d2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80023d6:	81a3      	strh	r3, [r4, #12]
 80023d8:	4632      	mov	r2, r6
 80023da:	463b      	mov	r3, r7
 80023dc:	4628      	mov	r0, r5
 80023de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80023e2:	f000 b869 	b.w	80024b8 <_write_r>

080023e6 <__sseek>:
 80023e6:	b510      	push	{r4, lr}
 80023e8:	460c      	mov	r4, r1
 80023ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80023ee:	f000 f9a3 	bl	8002738 <_lseek_r>
 80023f2:	1c43      	adds	r3, r0, #1
 80023f4:	89a3      	ldrh	r3, [r4, #12]
 80023f6:	bf15      	itete	ne
 80023f8:	6560      	strne	r0, [r4, #84]	; 0x54
 80023fa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80023fe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002402:	81a3      	strheq	r3, [r4, #12]
 8002404:	bf18      	it	ne
 8002406:	81a3      	strhne	r3, [r4, #12]
 8002408:	bd10      	pop	{r4, pc}

0800240a <__sclose>:
 800240a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800240e:	f000 b8d3 	b.w	80025b8 <_close_r>
	...

08002414 <__swbuf_r>:
 8002414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002416:	460e      	mov	r6, r1
 8002418:	4614      	mov	r4, r2
 800241a:	4605      	mov	r5, r0
 800241c:	b118      	cbz	r0, 8002426 <__swbuf_r+0x12>
 800241e:	6983      	ldr	r3, [r0, #24]
 8002420:	b90b      	cbnz	r3, 8002426 <__swbuf_r+0x12>
 8002422:	f7ff fbf7 	bl	8001c14 <__sinit>
 8002426:	4b21      	ldr	r3, [pc, #132]	; (80024ac <__swbuf_r+0x98>)
 8002428:	429c      	cmp	r4, r3
 800242a:	d12a      	bne.n	8002482 <__swbuf_r+0x6e>
 800242c:	686c      	ldr	r4, [r5, #4]
 800242e:	69a3      	ldr	r3, [r4, #24]
 8002430:	60a3      	str	r3, [r4, #8]
 8002432:	89a3      	ldrh	r3, [r4, #12]
 8002434:	071a      	lsls	r2, r3, #28
 8002436:	d52e      	bpl.n	8002496 <__swbuf_r+0x82>
 8002438:	6923      	ldr	r3, [r4, #16]
 800243a:	b363      	cbz	r3, 8002496 <__swbuf_r+0x82>
 800243c:	6923      	ldr	r3, [r4, #16]
 800243e:	6820      	ldr	r0, [r4, #0]
 8002440:	1ac0      	subs	r0, r0, r3
 8002442:	6963      	ldr	r3, [r4, #20]
 8002444:	b2f6      	uxtb	r6, r6
 8002446:	4283      	cmp	r3, r0
 8002448:	4637      	mov	r7, r6
 800244a:	dc04      	bgt.n	8002456 <__swbuf_r+0x42>
 800244c:	4621      	mov	r1, r4
 800244e:	4628      	mov	r0, r5
 8002450:	f000 f948 	bl	80026e4 <_fflush_r>
 8002454:	bb28      	cbnz	r0, 80024a2 <__swbuf_r+0x8e>
 8002456:	68a3      	ldr	r3, [r4, #8]
 8002458:	3b01      	subs	r3, #1
 800245a:	60a3      	str	r3, [r4, #8]
 800245c:	6823      	ldr	r3, [r4, #0]
 800245e:	1c5a      	adds	r2, r3, #1
 8002460:	6022      	str	r2, [r4, #0]
 8002462:	701e      	strb	r6, [r3, #0]
 8002464:	6963      	ldr	r3, [r4, #20]
 8002466:	3001      	adds	r0, #1
 8002468:	4283      	cmp	r3, r0
 800246a:	d004      	beq.n	8002476 <__swbuf_r+0x62>
 800246c:	89a3      	ldrh	r3, [r4, #12]
 800246e:	07db      	lsls	r3, r3, #31
 8002470:	d519      	bpl.n	80024a6 <__swbuf_r+0x92>
 8002472:	2e0a      	cmp	r6, #10
 8002474:	d117      	bne.n	80024a6 <__swbuf_r+0x92>
 8002476:	4621      	mov	r1, r4
 8002478:	4628      	mov	r0, r5
 800247a:	f000 f933 	bl	80026e4 <_fflush_r>
 800247e:	b190      	cbz	r0, 80024a6 <__swbuf_r+0x92>
 8002480:	e00f      	b.n	80024a2 <__swbuf_r+0x8e>
 8002482:	4b0b      	ldr	r3, [pc, #44]	; (80024b0 <__swbuf_r+0x9c>)
 8002484:	429c      	cmp	r4, r3
 8002486:	d101      	bne.n	800248c <__swbuf_r+0x78>
 8002488:	68ac      	ldr	r4, [r5, #8]
 800248a:	e7d0      	b.n	800242e <__swbuf_r+0x1a>
 800248c:	4b09      	ldr	r3, [pc, #36]	; (80024b4 <__swbuf_r+0xa0>)
 800248e:	429c      	cmp	r4, r3
 8002490:	bf08      	it	eq
 8002492:	68ec      	ldreq	r4, [r5, #12]
 8002494:	e7cb      	b.n	800242e <__swbuf_r+0x1a>
 8002496:	4621      	mov	r1, r4
 8002498:	4628      	mov	r0, r5
 800249a:	f000 f81f 	bl	80024dc <__swsetup_r>
 800249e:	2800      	cmp	r0, #0
 80024a0:	d0cc      	beq.n	800243c <__swbuf_r+0x28>
 80024a2:	f04f 37ff 	mov.w	r7, #4294967295
 80024a6:	4638      	mov	r0, r7
 80024a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80024aa:	bf00      	nop
 80024ac:	08002990 	.word	0x08002990
 80024b0:	080029b0 	.word	0x080029b0
 80024b4:	08002970 	.word	0x08002970

080024b8 <_write_r>:
 80024b8:	b538      	push	{r3, r4, r5, lr}
 80024ba:	4c07      	ldr	r4, [pc, #28]	; (80024d8 <_write_r+0x20>)
 80024bc:	4605      	mov	r5, r0
 80024be:	4608      	mov	r0, r1
 80024c0:	4611      	mov	r1, r2
 80024c2:	2200      	movs	r2, #0
 80024c4:	6022      	str	r2, [r4, #0]
 80024c6:	461a      	mov	r2, r3
 80024c8:	f7fe f899 	bl	80005fe <_write>
 80024cc:	1c43      	adds	r3, r0, #1
 80024ce:	d102      	bne.n	80024d6 <_write_r+0x1e>
 80024d0:	6823      	ldr	r3, [r4, #0]
 80024d2:	b103      	cbz	r3, 80024d6 <_write_r+0x1e>
 80024d4:	602b      	str	r3, [r5, #0]
 80024d6:	bd38      	pop	{r3, r4, r5, pc}
 80024d8:	200000a0 	.word	0x200000a0

080024dc <__swsetup_r>:
 80024dc:	4b32      	ldr	r3, [pc, #200]	; (80025a8 <__swsetup_r+0xcc>)
 80024de:	b570      	push	{r4, r5, r6, lr}
 80024e0:	681d      	ldr	r5, [r3, #0]
 80024e2:	4606      	mov	r6, r0
 80024e4:	460c      	mov	r4, r1
 80024e6:	b125      	cbz	r5, 80024f2 <__swsetup_r+0x16>
 80024e8:	69ab      	ldr	r3, [r5, #24]
 80024ea:	b913      	cbnz	r3, 80024f2 <__swsetup_r+0x16>
 80024ec:	4628      	mov	r0, r5
 80024ee:	f7ff fb91 	bl	8001c14 <__sinit>
 80024f2:	4b2e      	ldr	r3, [pc, #184]	; (80025ac <__swsetup_r+0xd0>)
 80024f4:	429c      	cmp	r4, r3
 80024f6:	d10f      	bne.n	8002518 <__swsetup_r+0x3c>
 80024f8:	686c      	ldr	r4, [r5, #4]
 80024fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80024fe:	b29a      	uxth	r2, r3
 8002500:	0715      	lsls	r5, r2, #28
 8002502:	d42c      	bmi.n	800255e <__swsetup_r+0x82>
 8002504:	06d0      	lsls	r0, r2, #27
 8002506:	d411      	bmi.n	800252c <__swsetup_r+0x50>
 8002508:	2209      	movs	r2, #9
 800250a:	6032      	str	r2, [r6, #0]
 800250c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002510:	81a3      	strh	r3, [r4, #12]
 8002512:	f04f 30ff 	mov.w	r0, #4294967295
 8002516:	e03e      	b.n	8002596 <__swsetup_r+0xba>
 8002518:	4b25      	ldr	r3, [pc, #148]	; (80025b0 <__swsetup_r+0xd4>)
 800251a:	429c      	cmp	r4, r3
 800251c:	d101      	bne.n	8002522 <__swsetup_r+0x46>
 800251e:	68ac      	ldr	r4, [r5, #8]
 8002520:	e7eb      	b.n	80024fa <__swsetup_r+0x1e>
 8002522:	4b24      	ldr	r3, [pc, #144]	; (80025b4 <__swsetup_r+0xd8>)
 8002524:	429c      	cmp	r4, r3
 8002526:	bf08      	it	eq
 8002528:	68ec      	ldreq	r4, [r5, #12]
 800252a:	e7e6      	b.n	80024fa <__swsetup_r+0x1e>
 800252c:	0751      	lsls	r1, r2, #29
 800252e:	d512      	bpl.n	8002556 <__swsetup_r+0x7a>
 8002530:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002532:	b141      	cbz	r1, 8002546 <__swsetup_r+0x6a>
 8002534:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002538:	4299      	cmp	r1, r3
 800253a:	d002      	beq.n	8002542 <__swsetup_r+0x66>
 800253c:	4630      	mov	r0, r6
 800253e:	f000 f973 	bl	8002828 <_free_r>
 8002542:	2300      	movs	r3, #0
 8002544:	6363      	str	r3, [r4, #52]	; 0x34
 8002546:	89a3      	ldrh	r3, [r4, #12]
 8002548:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800254c:	81a3      	strh	r3, [r4, #12]
 800254e:	2300      	movs	r3, #0
 8002550:	6063      	str	r3, [r4, #4]
 8002552:	6923      	ldr	r3, [r4, #16]
 8002554:	6023      	str	r3, [r4, #0]
 8002556:	89a3      	ldrh	r3, [r4, #12]
 8002558:	f043 0308 	orr.w	r3, r3, #8
 800255c:	81a3      	strh	r3, [r4, #12]
 800255e:	6923      	ldr	r3, [r4, #16]
 8002560:	b94b      	cbnz	r3, 8002576 <__swsetup_r+0x9a>
 8002562:	89a3      	ldrh	r3, [r4, #12]
 8002564:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002568:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800256c:	d003      	beq.n	8002576 <__swsetup_r+0x9a>
 800256e:	4621      	mov	r1, r4
 8002570:	4630      	mov	r0, r6
 8002572:	f000 f917 	bl	80027a4 <__smakebuf_r>
 8002576:	89a2      	ldrh	r2, [r4, #12]
 8002578:	f012 0301 	ands.w	r3, r2, #1
 800257c:	d00c      	beq.n	8002598 <__swsetup_r+0xbc>
 800257e:	2300      	movs	r3, #0
 8002580:	60a3      	str	r3, [r4, #8]
 8002582:	6963      	ldr	r3, [r4, #20]
 8002584:	425b      	negs	r3, r3
 8002586:	61a3      	str	r3, [r4, #24]
 8002588:	6923      	ldr	r3, [r4, #16]
 800258a:	b953      	cbnz	r3, 80025a2 <__swsetup_r+0xc6>
 800258c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002590:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8002594:	d1ba      	bne.n	800250c <__swsetup_r+0x30>
 8002596:	bd70      	pop	{r4, r5, r6, pc}
 8002598:	0792      	lsls	r2, r2, #30
 800259a:	bf58      	it	pl
 800259c:	6963      	ldrpl	r3, [r4, #20]
 800259e:	60a3      	str	r3, [r4, #8]
 80025a0:	e7f2      	b.n	8002588 <__swsetup_r+0xac>
 80025a2:	2000      	movs	r0, #0
 80025a4:	e7f7      	b.n	8002596 <__swsetup_r+0xba>
 80025a6:	bf00      	nop
 80025a8:	2000000c 	.word	0x2000000c
 80025ac:	08002990 	.word	0x08002990
 80025b0:	080029b0 	.word	0x080029b0
 80025b4:	08002970 	.word	0x08002970

080025b8 <_close_r>:
 80025b8:	b538      	push	{r3, r4, r5, lr}
 80025ba:	4c06      	ldr	r4, [pc, #24]	; (80025d4 <_close_r+0x1c>)
 80025bc:	2300      	movs	r3, #0
 80025be:	4605      	mov	r5, r0
 80025c0:	4608      	mov	r0, r1
 80025c2:	6023      	str	r3, [r4, #0]
 80025c4:	f7fe f98b 	bl	80008de <_close>
 80025c8:	1c43      	adds	r3, r0, #1
 80025ca:	d102      	bne.n	80025d2 <_close_r+0x1a>
 80025cc:	6823      	ldr	r3, [r4, #0]
 80025ce:	b103      	cbz	r3, 80025d2 <_close_r+0x1a>
 80025d0:	602b      	str	r3, [r5, #0]
 80025d2:	bd38      	pop	{r3, r4, r5, pc}
 80025d4:	200000a0 	.word	0x200000a0

080025d8 <__sflush_r>:
 80025d8:	898a      	ldrh	r2, [r1, #12]
 80025da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80025de:	4605      	mov	r5, r0
 80025e0:	0710      	lsls	r0, r2, #28
 80025e2:	460c      	mov	r4, r1
 80025e4:	d458      	bmi.n	8002698 <__sflush_r+0xc0>
 80025e6:	684b      	ldr	r3, [r1, #4]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	dc05      	bgt.n	80025f8 <__sflush_r+0x20>
 80025ec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	dc02      	bgt.n	80025f8 <__sflush_r+0x20>
 80025f2:	2000      	movs	r0, #0
 80025f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80025f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80025fa:	2e00      	cmp	r6, #0
 80025fc:	d0f9      	beq.n	80025f2 <__sflush_r+0x1a>
 80025fe:	2300      	movs	r3, #0
 8002600:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002604:	682f      	ldr	r7, [r5, #0]
 8002606:	6a21      	ldr	r1, [r4, #32]
 8002608:	602b      	str	r3, [r5, #0]
 800260a:	d032      	beq.n	8002672 <__sflush_r+0x9a>
 800260c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800260e:	89a3      	ldrh	r3, [r4, #12]
 8002610:	075a      	lsls	r2, r3, #29
 8002612:	d505      	bpl.n	8002620 <__sflush_r+0x48>
 8002614:	6863      	ldr	r3, [r4, #4]
 8002616:	1ac0      	subs	r0, r0, r3
 8002618:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800261a:	b10b      	cbz	r3, 8002620 <__sflush_r+0x48>
 800261c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800261e:	1ac0      	subs	r0, r0, r3
 8002620:	2300      	movs	r3, #0
 8002622:	4602      	mov	r2, r0
 8002624:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002626:	6a21      	ldr	r1, [r4, #32]
 8002628:	4628      	mov	r0, r5
 800262a:	47b0      	blx	r6
 800262c:	1c43      	adds	r3, r0, #1
 800262e:	89a3      	ldrh	r3, [r4, #12]
 8002630:	d106      	bne.n	8002640 <__sflush_r+0x68>
 8002632:	6829      	ldr	r1, [r5, #0]
 8002634:	291d      	cmp	r1, #29
 8002636:	d848      	bhi.n	80026ca <__sflush_r+0xf2>
 8002638:	4a29      	ldr	r2, [pc, #164]	; (80026e0 <__sflush_r+0x108>)
 800263a:	40ca      	lsrs	r2, r1
 800263c:	07d6      	lsls	r6, r2, #31
 800263e:	d544      	bpl.n	80026ca <__sflush_r+0xf2>
 8002640:	2200      	movs	r2, #0
 8002642:	6062      	str	r2, [r4, #4]
 8002644:	04d9      	lsls	r1, r3, #19
 8002646:	6922      	ldr	r2, [r4, #16]
 8002648:	6022      	str	r2, [r4, #0]
 800264a:	d504      	bpl.n	8002656 <__sflush_r+0x7e>
 800264c:	1c42      	adds	r2, r0, #1
 800264e:	d101      	bne.n	8002654 <__sflush_r+0x7c>
 8002650:	682b      	ldr	r3, [r5, #0]
 8002652:	b903      	cbnz	r3, 8002656 <__sflush_r+0x7e>
 8002654:	6560      	str	r0, [r4, #84]	; 0x54
 8002656:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002658:	602f      	str	r7, [r5, #0]
 800265a:	2900      	cmp	r1, #0
 800265c:	d0c9      	beq.n	80025f2 <__sflush_r+0x1a>
 800265e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002662:	4299      	cmp	r1, r3
 8002664:	d002      	beq.n	800266c <__sflush_r+0x94>
 8002666:	4628      	mov	r0, r5
 8002668:	f000 f8de 	bl	8002828 <_free_r>
 800266c:	2000      	movs	r0, #0
 800266e:	6360      	str	r0, [r4, #52]	; 0x34
 8002670:	e7c0      	b.n	80025f4 <__sflush_r+0x1c>
 8002672:	2301      	movs	r3, #1
 8002674:	4628      	mov	r0, r5
 8002676:	47b0      	blx	r6
 8002678:	1c41      	adds	r1, r0, #1
 800267a:	d1c8      	bne.n	800260e <__sflush_r+0x36>
 800267c:	682b      	ldr	r3, [r5, #0]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d0c5      	beq.n	800260e <__sflush_r+0x36>
 8002682:	2b1d      	cmp	r3, #29
 8002684:	d001      	beq.n	800268a <__sflush_r+0xb2>
 8002686:	2b16      	cmp	r3, #22
 8002688:	d101      	bne.n	800268e <__sflush_r+0xb6>
 800268a:	602f      	str	r7, [r5, #0]
 800268c:	e7b1      	b.n	80025f2 <__sflush_r+0x1a>
 800268e:	89a3      	ldrh	r3, [r4, #12]
 8002690:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002694:	81a3      	strh	r3, [r4, #12]
 8002696:	e7ad      	b.n	80025f4 <__sflush_r+0x1c>
 8002698:	690f      	ldr	r7, [r1, #16]
 800269a:	2f00      	cmp	r7, #0
 800269c:	d0a9      	beq.n	80025f2 <__sflush_r+0x1a>
 800269e:	0793      	lsls	r3, r2, #30
 80026a0:	680e      	ldr	r6, [r1, #0]
 80026a2:	bf08      	it	eq
 80026a4:	694b      	ldreq	r3, [r1, #20]
 80026a6:	600f      	str	r7, [r1, #0]
 80026a8:	bf18      	it	ne
 80026aa:	2300      	movne	r3, #0
 80026ac:	eba6 0807 	sub.w	r8, r6, r7
 80026b0:	608b      	str	r3, [r1, #8]
 80026b2:	f1b8 0f00 	cmp.w	r8, #0
 80026b6:	dd9c      	ble.n	80025f2 <__sflush_r+0x1a>
 80026b8:	4643      	mov	r3, r8
 80026ba:	463a      	mov	r2, r7
 80026bc:	6a21      	ldr	r1, [r4, #32]
 80026be:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80026c0:	4628      	mov	r0, r5
 80026c2:	47b0      	blx	r6
 80026c4:	2800      	cmp	r0, #0
 80026c6:	dc06      	bgt.n	80026d6 <__sflush_r+0xfe>
 80026c8:	89a3      	ldrh	r3, [r4, #12]
 80026ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80026ce:	81a3      	strh	r3, [r4, #12]
 80026d0:	f04f 30ff 	mov.w	r0, #4294967295
 80026d4:	e78e      	b.n	80025f4 <__sflush_r+0x1c>
 80026d6:	4407      	add	r7, r0
 80026d8:	eba8 0800 	sub.w	r8, r8, r0
 80026dc:	e7e9      	b.n	80026b2 <__sflush_r+0xda>
 80026de:	bf00      	nop
 80026e0:	20400001 	.word	0x20400001

080026e4 <_fflush_r>:
 80026e4:	b538      	push	{r3, r4, r5, lr}
 80026e6:	690b      	ldr	r3, [r1, #16]
 80026e8:	4605      	mov	r5, r0
 80026ea:	460c      	mov	r4, r1
 80026ec:	b1db      	cbz	r3, 8002726 <_fflush_r+0x42>
 80026ee:	b118      	cbz	r0, 80026f8 <_fflush_r+0x14>
 80026f0:	6983      	ldr	r3, [r0, #24]
 80026f2:	b90b      	cbnz	r3, 80026f8 <_fflush_r+0x14>
 80026f4:	f7ff fa8e 	bl	8001c14 <__sinit>
 80026f8:	4b0c      	ldr	r3, [pc, #48]	; (800272c <_fflush_r+0x48>)
 80026fa:	429c      	cmp	r4, r3
 80026fc:	d109      	bne.n	8002712 <_fflush_r+0x2e>
 80026fe:	686c      	ldr	r4, [r5, #4]
 8002700:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002704:	b17b      	cbz	r3, 8002726 <_fflush_r+0x42>
 8002706:	4621      	mov	r1, r4
 8002708:	4628      	mov	r0, r5
 800270a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800270e:	f7ff bf63 	b.w	80025d8 <__sflush_r>
 8002712:	4b07      	ldr	r3, [pc, #28]	; (8002730 <_fflush_r+0x4c>)
 8002714:	429c      	cmp	r4, r3
 8002716:	d101      	bne.n	800271c <_fflush_r+0x38>
 8002718:	68ac      	ldr	r4, [r5, #8]
 800271a:	e7f1      	b.n	8002700 <_fflush_r+0x1c>
 800271c:	4b05      	ldr	r3, [pc, #20]	; (8002734 <_fflush_r+0x50>)
 800271e:	429c      	cmp	r4, r3
 8002720:	bf08      	it	eq
 8002722:	68ec      	ldreq	r4, [r5, #12]
 8002724:	e7ec      	b.n	8002700 <_fflush_r+0x1c>
 8002726:	2000      	movs	r0, #0
 8002728:	bd38      	pop	{r3, r4, r5, pc}
 800272a:	bf00      	nop
 800272c:	08002990 	.word	0x08002990
 8002730:	080029b0 	.word	0x080029b0
 8002734:	08002970 	.word	0x08002970

08002738 <_lseek_r>:
 8002738:	b538      	push	{r3, r4, r5, lr}
 800273a:	4c07      	ldr	r4, [pc, #28]	; (8002758 <_lseek_r+0x20>)
 800273c:	4605      	mov	r5, r0
 800273e:	4608      	mov	r0, r1
 8002740:	4611      	mov	r1, r2
 8002742:	2200      	movs	r2, #0
 8002744:	6022      	str	r2, [r4, #0]
 8002746:	461a      	mov	r2, r3
 8002748:	f7fe f8f0 	bl	800092c <_lseek>
 800274c:	1c43      	adds	r3, r0, #1
 800274e:	d102      	bne.n	8002756 <_lseek_r+0x1e>
 8002750:	6823      	ldr	r3, [r4, #0]
 8002752:	b103      	cbz	r3, 8002756 <_lseek_r+0x1e>
 8002754:	602b      	str	r3, [r5, #0]
 8002756:	bd38      	pop	{r3, r4, r5, pc}
 8002758:	200000a0 	.word	0x200000a0

0800275c <__swhatbuf_r>:
 800275c:	b570      	push	{r4, r5, r6, lr}
 800275e:	460e      	mov	r6, r1
 8002760:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002764:	2900      	cmp	r1, #0
 8002766:	b096      	sub	sp, #88	; 0x58
 8002768:	4614      	mov	r4, r2
 800276a:	461d      	mov	r5, r3
 800276c:	da07      	bge.n	800277e <__swhatbuf_r+0x22>
 800276e:	2300      	movs	r3, #0
 8002770:	602b      	str	r3, [r5, #0]
 8002772:	89b3      	ldrh	r3, [r6, #12]
 8002774:	061a      	lsls	r2, r3, #24
 8002776:	d410      	bmi.n	800279a <__swhatbuf_r+0x3e>
 8002778:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800277c:	e00e      	b.n	800279c <__swhatbuf_r+0x40>
 800277e:	466a      	mov	r2, sp
 8002780:	f000 f8b2 	bl	80028e8 <_fstat_r>
 8002784:	2800      	cmp	r0, #0
 8002786:	dbf2      	blt.n	800276e <__swhatbuf_r+0x12>
 8002788:	9a01      	ldr	r2, [sp, #4]
 800278a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800278e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002792:	425a      	negs	r2, r3
 8002794:	415a      	adcs	r2, r3
 8002796:	602a      	str	r2, [r5, #0]
 8002798:	e7ee      	b.n	8002778 <__swhatbuf_r+0x1c>
 800279a:	2340      	movs	r3, #64	; 0x40
 800279c:	2000      	movs	r0, #0
 800279e:	6023      	str	r3, [r4, #0]
 80027a0:	b016      	add	sp, #88	; 0x58
 80027a2:	bd70      	pop	{r4, r5, r6, pc}

080027a4 <__smakebuf_r>:
 80027a4:	898b      	ldrh	r3, [r1, #12]
 80027a6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80027a8:	079d      	lsls	r5, r3, #30
 80027aa:	4606      	mov	r6, r0
 80027ac:	460c      	mov	r4, r1
 80027ae:	d507      	bpl.n	80027c0 <__smakebuf_r+0x1c>
 80027b0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80027b4:	6023      	str	r3, [r4, #0]
 80027b6:	6123      	str	r3, [r4, #16]
 80027b8:	2301      	movs	r3, #1
 80027ba:	6163      	str	r3, [r4, #20]
 80027bc:	b002      	add	sp, #8
 80027be:	bd70      	pop	{r4, r5, r6, pc}
 80027c0:	ab01      	add	r3, sp, #4
 80027c2:	466a      	mov	r2, sp
 80027c4:	f7ff ffca 	bl	800275c <__swhatbuf_r>
 80027c8:	9900      	ldr	r1, [sp, #0]
 80027ca:	4605      	mov	r5, r0
 80027cc:	4630      	mov	r0, r6
 80027ce:	f7ff faab 	bl	8001d28 <_malloc_r>
 80027d2:	b948      	cbnz	r0, 80027e8 <__smakebuf_r+0x44>
 80027d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80027d8:	059a      	lsls	r2, r3, #22
 80027da:	d4ef      	bmi.n	80027bc <__smakebuf_r+0x18>
 80027dc:	f023 0303 	bic.w	r3, r3, #3
 80027e0:	f043 0302 	orr.w	r3, r3, #2
 80027e4:	81a3      	strh	r3, [r4, #12]
 80027e6:	e7e3      	b.n	80027b0 <__smakebuf_r+0xc>
 80027e8:	4b0d      	ldr	r3, [pc, #52]	; (8002820 <__smakebuf_r+0x7c>)
 80027ea:	62b3      	str	r3, [r6, #40]	; 0x28
 80027ec:	89a3      	ldrh	r3, [r4, #12]
 80027ee:	6020      	str	r0, [r4, #0]
 80027f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027f4:	81a3      	strh	r3, [r4, #12]
 80027f6:	9b00      	ldr	r3, [sp, #0]
 80027f8:	6163      	str	r3, [r4, #20]
 80027fa:	9b01      	ldr	r3, [sp, #4]
 80027fc:	6120      	str	r0, [r4, #16]
 80027fe:	b15b      	cbz	r3, 8002818 <__smakebuf_r+0x74>
 8002800:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002804:	4630      	mov	r0, r6
 8002806:	f000 f881 	bl	800290c <_isatty_r>
 800280a:	b128      	cbz	r0, 8002818 <__smakebuf_r+0x74>
 800280c:	89a3      	ldrh	r3, [r4, #12]
 800280e:	f023 0303 	bic.w	r3, r3, #3
 8002812:	f043 0301 	orr.w	r3, r3, #1
 8002816:	81a3      	strh	r3, [r4, #12]
 8002818:	89a3      	ldrh	r3, [r4, #12]
 800281a:	431d      	orrs	r5, r3
 800281c:	81a5      	strh	r5, [r4, #12]
 800281e:	e7cd      	b.n	80027bc <__smakebuf_r+0x18>
 8002820:	08001bdd 	.word	0x08001bdd

08002824 <__malloc_lock>:
 8002824:	4770      	bx	lr

08002826 <__malloc_unlock>:
 8002826:	4770      	bx	lr

08002828 <_free_r>:
 8002828:	b538      	push	{r3, r4, r5, lr}
 800282a:	4605      	mov	r5, r0
 800282c:	2900      	cmp	r1, #0
 800282e:	d045      	beq.n	80028bc <_free_r+0x94>
 8002830:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002834:	1f0c      	subs	r4, r1, #4
 8002836:	2b00      	cmp	r3, #0
 8002838:	bfb8      	it	lt
 800283a:	18e4      	addlt	r4, r4, r3
 800283c:	f7ff fff2 	bl	8002824 <__malloc_lock>
 8002840:	4a1f      	ldr	r2, [pc, #124]	; (80028c0 <_free_r+0x98>)
 8002842:	6813      	ldr	r3, [r2, #0]
 8002844:	4610      	mov	r0, r2
 8002846:	b933      	cbnz	r3, 8002856 <_free_r+0x2e>
 8002848:	6063      	str	r3, [r4, #4]
 800284a:	6014      	str	r4, [r2, #0]
 800284c:	4628      	mov	r0, r5
 800284e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002852:	f7ff bfe8 	b.w	8002826 <__malloc_unlock>
 8002856:	42a3      	cmp	r3, r4
 8002858:	d90c      	bls.n	8002874 <_free_r+0x4c>
 800285a:	6821      	ldr	r1, [r4, #0]
 800285c:	1862      	adds	r2, r4, r1
 800285e:	4293      	cmp	r3, r2
 8002860:	bf04      	itt	eq
 8002862:	681a      	ldreq	r2, [r3, #0]
 8002864:	685b      	ldreq	r3, [r3, #4]
 8002866:	6063      	str	r3, [r4, #4]
 8002868:	bf04      	itt	eq
 800286a:	1852      	addeq	r2, r2, r1
 800286c:	6022      	streq	r2, [r4, #0]
 800286e:	6004      	str	r4, [r0, #0]
 8002870:	e7ec      	b.n	800284c <_free_r+0x24>
 8002872:	4613      	mov	r3, r2
 8002874:	685a      	ldr	r2, [r3, #4]
 8002876:	b10a      	cbz	r2, 800287c <_free_r+0x54>
 8002878:	42a2      	cmp	r2, r4
 800287a:	d9fa      	bls.n	8002872 <_free_r+0x4a>
 800287c:	6819      	ldr	r1, [r3, #0]
 800287e:	1858      	adds	r0, r3, r1
 8002880:	42a0      	cmp	r0, r4
 8002882:	d10b      	bne.n	800289c <_free_r+0x74>
 8002884:	6820      	ldr	r0, [r4, #0]
 8002886:	4401      	add	r1, r0
 8002888:	1858      	adds	r0, r3, r1
 800288a:	4282      	cmp	r2, r0
 800288c:	6019      	str	r1, [r3, #0]
 800288e:	d1dd      	bne.n	800284c <_free_r+0x24>
 8002890:	6810      	ldr	r0, [r2, #0]
 8002892:	6852      	ldr	r2, [r2, #4]
 8002894:	605a      	str	r2, [r3, #4]
 8002896:	4401      	add	r1, r0
 8002898:	6019      	str	r1, [r3, #0]
 800289a:	e7d7      	b.n	800284c <_free_r+0x24>
 800289c:	d902      	bls.n	80028a4 <_free_r+0x7c>
 800289e:	230c      	movs	r3, #12
 80028a0:	602b      	str	r3, [r5, #0]
 80028a2:	e7d3      	b.n	800284c <_free_r+0x24>
 80028a4:	6820      	ldr	r0, [r4, #0]
 80028a6:	1821      	adds	r1, r4, r0
 80028a8:	428a      	cmp	r2, r1
 80028aa:	bf04      	itt	eq
 80028ac:	6811      	ldreq	r1, [r2, #0]
 80028ae:	6852      	ldreq	r2, [r2, #4]
 80028b0:	6062      	str	r2, [r4, #4]
 80028b2:	bf04      	itt	eq
 80028b4:	1809      	addeq	r1, r1, r0
 80028b6:	6021      	streq	r1, [r4, #0]
 80028b8:	605c      	str	r4, [r3, #4]
 80028ba:	e7c7      	b.n	800284c <_free_r+0x24>
 80028bc:	bd38      	pop	{r3, r4, r5, pc}
 80028be:	bf00      	nop
 80028c0:	20000094 	.word	0x20000094

080028c4 <_read_r>:
 80028c4:	b538      	push	{r3, r4, r5, lr}
 80028c6:	4c07      	ldr	r4, [pc, #28]	; (80028e4 <_read_r+0x20>)
 80028c8:	4605      	mov	r5, r0
 80028ca:	4608      	mov	r0, r1
 80028cc:	4611      	mov	r1, r2
 80028ce:	2200      	movs	r2, #0
 80028d0:	6022      	str	r2, [r4, #0]
 80028d2:	461a      	mov	r2, r3
 80028d4:	f7fd ffe6 	bl	80008a4 <_read>
 80028d8:	1c43      	adds	r3, r0, #1
 80028da:	d102      	bne.n	80028e2 <_read_r+0x1e>
 80028dc:	6823      	ldr	r3, [r4, #0]
 80028de:	b103      	cbz	r3, 80028e2 <_read_r+0x1e>
 80028e0:	602b      	str	r3, [r5, #0]
 80028e2:	bd38      	pop	{r3, r4, r5, pc}
 80028e4:	200000a0 	.word	0x200000a0

080028e8 <_fstat_r>:
 80028e8:	b538      	push	{r3, r4, r5, lr}
 80028ea:	4c07      	ldr	r4, [pc, #28]	; (8002908 <_fstat_r+0x20>)
 80028ec:	2300      	movs	r3, #0
 80028ee:	4605      	mov	r5, r0
 80028f0:	4608      	mov	r0, r1
 80028f2:	4611      	mov	r1, r2
 80028f4:	6023      	str	r3, [r4, #0]
 80028f6:	f7fd fffe 	bl	80008f6 <_fstat>
 80028fa:	1c43      	adds	r3, r0, #1
 80028fc:	d102      	bne.n	8002904 <_fstat_r+0x1c>
 80028fe:	6823      	ldr	r3, [r4, #0]
 8002900:	b103      	cbz	r3, 8002904 <_fstat_r+0x1c>
 8002902:	602b      	str	r3, [r5, #0]
 8002904:	bd38      	pop	{r3, r4, r5, pc}
 8002906:	bf00      	nop
 8002908:	200000a0 	.word	0x200000a0

0800290c <_isatty_r>:
 800290c:	b538      	push	{r3, r4, r5, lr}
 800290e:	4c06      	ldr	r4, [pc, #24]	; (8002928 <_isatty_r+0x1c>)
 8002910:	2300      	movs	r3, #0
 8002912:	4605      	mov	r5, r0
 8002914:	4608      	mov	r0, r1
 8002916:	6023      	str	r3, [r4, #0]
 8002918:	f7fd fffd 	bl	8000916 <_isatty>
 800291c:	1c43      	adds	r3, r0, #1
 800291e:	d102      	bne.n	8002926 <_isatty_r+0x1a>
 8002920:	6823      	ldr	r3, [r4, #0]
 8002922:	b103      	cbz	r3, 8002926 <_isatty_r+0x1a>
 8002924:	602b      	str	r3, [r5, #0]
 8002926:	bd38      	pop	{r3, r4, r5, pc}
 8002928:	200000a0 	.word	0x200000a0

0800292c <_init>:
 800292c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800292e:	bf00      	nop
 8002930:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002932:	bc08      	pop	{r3}
 8002934:	469e      	mov	lr, r3
 8002936:	4770      	bx	lr

08002938 <_fini>:
 8002938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800293a:	bf00      	nop
 800293c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800293e:	bc08      	pop	{r3}
 8002940:	469e      	mov	lr, r3
 8002942:	4770      	bx	lr
